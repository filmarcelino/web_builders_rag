[
  {
    "id": "5acb0c6ea9b3bdc2108f927888f27c65",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "the name, email and age attributes: ~~~ruby spec/user_spec rb require \"spec_helper\" require \"user\" RSpec describe User do describe \"name\" do it \"returns the users name\" do user = User new(\"David\", \"david@example com\", 30) expect(user name) to eq(\"David\") end end describe \"email\" do it \"returns the users email\" do user = User new(\"David\", \"david@example com\", 30) expect(user email) to eq(\"david@example com\") end end describe \"age\" do it \"returns the users age\" do user = User new(\"David\", \"david@examplecom\", 30)\nexpect(user age) to eq(30)\nend\nend\nend\n~~~\nRun the tests to make sure everything is wired together correctly We can run just the tests for this user class by passing the test file name to the rspec command: $rspec spec/user_spec rb Examine the test file again, we need to create a new user object with the same attributes in the arrange phase of all of the tests Which is quite a bit of duplication between the tests To reduce this duplication, we could instead use a before hook to execute the arrange phase code and make the tests much more concise In our case, we can include a before hook that will create a new User instance and assign that instance to a @user instance variable that we can use in each of our tests:\n~~~ruby\nspec/user_spec rb\nrequire \"spec_helper\"\nrequire \"user\"\nRSpec describe User do\nbefore do\n@user = User new(\"David\", \"david@example com\", 30)\nend\ndescribe \"name\" do\nit \"returns the users name\" do\nexpect(@user name) to eq(\"David\")\nend\nend\ndescribe \"email\" do\nit \"returns the users email\" do\nexpect(@user email) to eq(\"david@example com\")\nend\nend\ndescribe \"age\" do\nit \"returns the users age\" do\nexpect(@user age) to eq(30)\nend\nend\nend\n~~~\nBy default, before hooks run before each test in the same example group We can see this a bit more clearly by including a puts statement in our before hook:\n~~~ruby\nspec/user_spec rb\nbefore do\nputs \"running the before hook\"\n@user = User new(\"David\", \"david@example",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "9a75ded3d1a2e7b6caaa97daefa61765",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "do it \"returns the users email\" do expect(@user email) to eq(\"david@example com\") end end describe \"age\" do it \"returns the users age\" do expect(@user age) to eq(30) end end end ~~~ By default, before hooks run before each test in the same example group We can see this a bit more clearly by including a puts statement in our before hook: ~~~ruby spec/user_spec rb before do puts \"running the before hook\" @user = User new(\"David\", \"david@examplecom\", 30)\nend\n~~~\nNow, when we run our tests again we should see \"running the before hook\" printed to the screen three times, once for each of our tests Alternatively, we can pass an :all argument to the before method This will make the before hook run only once before all the tests Change the before hook to the following and run the tests The puts statement will only print once in the terminal, proving the before block was only executed once ~~~ruby\nspec/user_spec rb\nbefore(:all) do\nputs \"running the before hook\"\n@user = User new(\"David\", \"david@example com\", 30)\nend\n~~~\nHowever, it is a good rule of thumb to avoid using the :all argument and stick to the default before hook behaviour of running before each individual test When the before hook runs before each test, it ensures each of the tests start with a fresh object to work with and state changes to the object will not leak to other tests Potentially causing hard to debug test failures After Hook\nAfter hooks are run after our tests have executed They are best used for the teardown phase so we can clean up after our tests and get the state of the system back to what it was before the test was executed Using the counter example we used to demonstrate the teardown phase in the previous less, we can refactor the counter tests to use an after hook for the teardown phase and reset the count between each of the tests We will also move the arrange phase code of creating the count into a before hook and assign it to an instance variable to show both hooks working together:\n~~~ruby\nspec/counter_spec rb\nrequire \"spec_helper\"\nrequire \"counter\"\nRSpec describe Counter do\ndescribe \"increment \" do\nbefore do\n@counter = Counter new\nend\nafter do\n@counter reset end\nit \"increments the counter by one\" do\n@counter increment",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "dc3286e015cc663c053d738009548e00",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "teardown phase and reset the count between each of the tests We will also move the arrange phase code of creating the count into a before hook and assign it to an instance variable to show both hooks working together: ~~~ruby spec/counter_spec rb require \"spec_helper\" require \"counter\" RSpec describe Counter do describe \"increment \" do before do @counter = Counter new end after do @counter reset end it \"increments the counter by one\" do @counter incrementexpect(@counter count) to eq(1)\nend\nit \"increments the counter by two\" do\n@counter increment @counter increment expect(@counter count) to eq(2)\nend\nend\nend\n~~~\nRun the counter tests with $ rspec spec/counter_spec rb to make sure everything is still working Let and Subject Variables\nUsing instance variables in before hooks like we have been doing has some big drawbacks that can lead to slower and less stable test suites Before hooks are run for every test in the same example group Some of those tests may not need that instance variable Instance variables return nil if they are not assigned, it's fairly easy and a common mistake to misspell an instance variable and end up with a no method error for nil class in Ruby You've probably seen this error a few times already while working through the OOP section Instance variables can leak between tests and even between test files Which could potentially cause all sorts of havoc in our test suite Thankfully RSpec provides a more idiomatic and safer way of creating variables that can be used in multiple tests, The let method Returning to the user example we used to demonstrate before hooks earlier Instead of using instance variables we could instead use a let variable Remove the before block and create a let variable just under the top level example group Also rename the instance variables in the tests from @user to just user :\n~~~ruby\nspec/user_spec rb\nrequire \"spec_helper\"\nrequire \"user\"\nRSpec describe User do\nlet(:user) { User new(\"David\", \"david@example com\", 30) }\ndescribe \"name\" do\nit \"returns the users name\" do\nexpect(user name) to eq(\"David\")\nend\nend\ndescribe \"email\" do\nit \"returns the users email\" do\nexpect(user email) to eq(\"david@example com\")\nend\nend\ndescribe \"age\" do\nit \"returns the users age\" do\nexpect(user age)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "e20697225a04e6985881a58011d9cca2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "group Also rename the instance variables in the tests from @user to just user : ~~~ruby spec/user_spec rb require \"spec_helper\" require \"user\" RSpec describe User do let(:user) { User new(\"David\", \"david@example com\", 30) } describe \"name\" do it \"returns the users name\" do expect(user name) to eq(\"David\") end end describe \"email\" do it \"returns the users email\" do expect(user email) to eq(\"david@example com\") end end describe \"age\" do it \"returns the users age\" do expect(user age)to eq(30)\nend\nend\nend\n~~~\nMake sure everything is still passing by running the user tests with $ rspec spec/user_spec rb The let method takes a symbol argument which is the name of the variable and is what we use to invoke the variable within our test cases In our code, we named our let variable user It also takes a block, the result of the block is what will be returned when we invoke the let variable In our code, this is an instance of the User class The let method is lazily evaluated, which means it doesn't execute until we invoke it in our tests There is another version of the let method: let This version executes immediately before our tests like a before hook does But this version of the let variable will be more useful later in the course when we are writing tests for Rails apps and need to create database records before our tests and assign it to a variable we can use later Subject\nAs you have seen time and time again throughout this guide, we need to initialize new instances of the class we are testing and assign it to a variable in the arrange phase of almost all of our tests Because this is such a common pattern, RSpec provides an even more specialised method just for creating an instance we can use in all of our tests The subject helper method Refactoring the previous user example to use a subject instead of a let variable is incredibly easy We just replace the let method call with subject:\n~~~ruby\nspec/user_spec rb\nrequire \"spec_helper\"\nrequire \"user\"\nRSpec describe User do\nsubject(:user) { User new(\"David\", \"david@example com\", 30) }\n# omitted for brevity end\n~~~\nIf we run our tests after making this change, they should all still  pass Subject and let variables have very similar syntax",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "942a94e2331b5db56b542d463869b65d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "subject helper method Refactoring the previous user example to use a subject instead of a let variable is incredibly easy We just replace the let method call with subject: ~~~ruby spec/user_spec rb require \"spec_helper\" require \"user\" RSpec describe User do subject(:user) { User new(\"David\", \"david@example com\", 30) } # omitted for brevity end ~~~ If we run our tests after making this change, they should all still pass Subject and let variables have very similar syntaxThey both accept a name argument in the form of a symbol and they both accept a block Functionally, they work pretty much the same However there are some subtle differences The name argument is optional, we could have omitted it and used an unnamed subject instead But we would then have to reference the subject using using a subject method call Using a named subject makes our tests much more readable and is considered the best practice way of using subjects The contrast between these two approaches is shown below:\n~~~ruby\nUsing an unnamed subject\ndescribe \"age\" do\nsubject { User new(\"David\", \"david@example com\", 30) }\nit \"returns the users age\" do\nexpect(subject age) to eq(30)\nend\nend\nUsing a named subject\ndescribe \"age\" do\nsubject(:user) { User new(\"David\", \"david@example com\", 30) }\nit \"returns the users age\" do\nexpect(user age) to eq(30)\nend\nend\n~~~\nThe main difference between subject and let is what they mean to the human reader Subject is meant to be used for the subject of the test file or in other words the instance of the object under test Using the subject method makes it easy to identify where the instance is being created for the reader Let variables on the other hand, can be used for any generic data that needs to be shared So when should you use let The rule here is to use let variables for anything other than creating the object under test since that should be reserved for subject One common use case is using let variables for the arguments we pass to the instance created in the subject Back in our user tests, lets extract all the arguments we are passing into User new in the subject out into let variables:\n~~~ruby\nspec/user_spec rb\nrequire \"spec_helper\"\nrequire \"user\"\nRSpec describe User do\nsubject(:user) { User",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "c49445a7ed50bd8eecf919793687fb9a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "use let variables for anything other than creating the object under test since that should be reserved for subject One common use case is using let variables for the arguments we pass to the instance created in the subject Back in our user tests, lets extract all the arguments we are passing into User new in the subject out into let variables: ~~~ruby spec/user_spec rb require \"spec_helper\" require \"user\" RSpec describe User do subject(:user) { Usernew(name, email, age) }\nlet(:name) { \"David\" }\nlet(:email) { \"david@example com\" }\nlet(:age) { 30 }\n# omitted for brevity end\n~~~\nRun the user tests with $ rspec spec/user_spec rb and they should all still be passing This may seem like an unnecessary refactor since it was working fine before and this just seems to have added more lines of code However, using the let variables to name the arguments that we are passing to User new adds some clarity to what those arguments represent and improves the readability of the tests But a far more interesting reason for making this refactor is that it allows us to create user instances with different arguments so we can then test the various different outcomes those different arguments will produce An example is the best way of getting a clear understanding of this, we are going to write a test for the previously untested retired method on the user class As a reminder this is what that method looks like:\n~~~ruby\nlib/user rb\ndef retired age >= 65\nend\n~~~\nThere are 3 possible paths we need to cover with test cases:\nWhen the users age is less than 65\nWhen the users age is equal to 65\nWhen the users age is greater than 65\nTo write these test cases, we are going to introduce a new piece of RSpec syntax The context method:\n~~~ruby\nspec/user_spec rb\nrequire \"spec_helper\"\nrequire \"user\"\nRSpec describe User do\nsubject(:user) { User new(name, email, age) }\nlet(:name) { \"David\" }\nlet(:email) { \"david@example com\" }\nlet(:age) { 30 }\n# omitted for brevity describe \"retired",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "bb14be17762955b9ce2ce1ee207ef4c3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "is less than 65 When the users age is equal to 65 When the users age is greater than 65 To write these test cases, we are going to introduce a new piece of RSpec syntax The context method: ~~~ruby spec/user_spec rb require \"spec_helper\" require \"user\" RSpec describe User do subject(:user) { User new(name, email, age) } let(:name) { \"David\" } let(:email) { \"david@example com\" } let(:age) { 30 } # omitted for brevity describe \"retired\" do\ncontext \"when the user is 65\" do\nit \"returns true\" do\nend\nend\ncontext \"when the user is older than 65\" do\nit \"returns true\" do\nend\nend\ncontext \"when the user is younger than 65\" do\nit \"returns false\" do\nend\nend\nend\nend\n~~~\nThe context method is just an alias for the describe method we have already gotten very familiar with Meaning, both methods function the exact same and can be used interchangeably However they differ in what they represent to the human reader Whereas describe is used to represent example groups for things such as classes and methods Context on the other hand, outlines and represents example groups around different states, For example the age state in our user class Like when a user is 65, when a user is older than 65 and so on In other words, It gives context about certain conditions in our test so we can test what happens when those conditions are in place The rule of when to use context is when we want to test the outcomes our methods will produce under different conditions Fill in the expectations for each of the test cases:\n~~~ruby\nspec/user_spec rb\nrequire \"spec_helper\"\nrequire \"user\"\nRSpec describe User do\nsubject(:user) { User new(name, email, age) }\nlet(:name) { \"David\" }\nlet(:email) { \"david@example com\" }\nlet(:age) { 30 }\n# omitted for brevity describe \"retired \" do\ncontext \"when the user is 65\" do\nit \"returns true\" do\nexpect(user retired ) to be(true)\nend\nend\ncontext \"when the user is older than 65\" do\nit \"returns true\" do\nexpect(user retired )",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "4441ef284e2c187851d2f00808704151",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "the test cases: ~~~ruby spec/user_spec rb require \"spec_helper\" require \"user\" RSpec describe User do subject(:user) { User new(name, email, age) } let(:name) { \"David\" } let(:email) { \"david@example com\" } let(:age) { 30 } # omitted for brevity describe \"retired \" do context \"when the user is 65\" do it \"returns true\" do expect(user retired ) to be(true) end end context \"when the user is older than 65\" do it \"returns true\" do expect(user retired )to be(true)\nend\nend\ncontext \"when the user is younger than 65\" do\nit \"returns false\" do\nexpect(user retired ) to be(false)\nend\nend\nend\nend\n~~~\nIf we run our tests now with $ rspec spec/user_spec rb we will get two failures:\n~~~bash\nFailures:\n1) User retired when the user is 65 returns true\nFailure/Error: expect(user retired ) to be(true)\nexpected true\ngot false\n# /spec/user_spec rb:32:in `block (4 levels) in <top (required)>'\n2) User retired when the user is older than 65 returns true\nFailure/Error: expect(user retired ) to be(true)\nexpected true\ngot false\n# /spec/user_spec rb:38:in `block (4 levels) in <top (required)>'\n~~~\nThis is because we are defaulting the users age to 30 in the age let variable defined in the top example group let(:age) { 30 } Therefore only the test case for the user being younger than 65 is passing at the moment However, we can override the age let variable in our contexts to create the correct conditions that will allow our failing tests to pass:\n~~~ruby\nspec/user_spec rb\nrequire \"spec_helper\"\nrequire \"user\"\nRSpec describe User do\nsubject(:user) { User new(name, email, age) }\nlet(:name) { \"David\" }\nlet(:email) { \"david@example com\" }\nlet(:age) { 30 }\n# omitted for brevity describe \"retired \" do\ncontext \"when the user is 65\" do\nlet(:age) { 65 }\nit \"returns true\" do\nexpect(user retired )",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "d254c5a7c19f1972a0e643c62d852dc2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "age let variable in our contexts to create the correct conditions that will allow our failing tests to pass: ~~~ruby spec/user_spec rb require \"spec_helper\" require \"user\" RSpec describe User do subject(:user) { User new(name, email, age) } let(:name) { \"David\" } let(:email) { \"david@example com\" } let(:age) { 30 } # omitted for brevity describe \"retired \" do context \"when the user is 65\" do let(:age) { 65 } it \"returns true\" do expect(user retired )to be(true)\nend\nend\ncontext \"when the user is older than 65\" do\nlet(:age) { 66 }\nit \"returns true\" do\nexpect(user retired ) to be(true)\nend\nend\ncontext \"when the user is younger than 65\" do\nit \"returns false\" do\nexpect(user retired ) to be(false)\nend\nend\nend\nend\n~~~\nIf we run our tests now everything will be passing 🎉\nThe mechanics of how this works is simpler than it looks If there are multiple let variables with the same name in our test file, then our test case will use the let variable that is defined closet to it In our code we have an age let variable in the top example group and other let variables named age within the context example groups as well When the test case for when the user is 65 is executed for example, it will use the let variable that is closest to it In other words, it will use the let variable that is defined within the same example group: let(:age) { 65 } Conclusion\nHooks, lets and subjects are incredibly powerful They can help greatly with crafting well structured and easy to understand tests by cutting down on duplication and unnecessary noise within a test suite However, it is easy to overuse them and end up with test files that the reader will need to repeatedly bounce around between hooks, lets and the actual tests to get a full picture of what the tests are doing Making it a chore to read and reason about what's going on in the individual test cases These code sharing tools are best only when they improve the overall readability and clarity of your tests Most of the time, it is best for clarity sake to have the arrange and teardown code in the test block that uses it Much like we did with the original todo list example Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "03f760bac0d831a6def78e08a3f411f5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
    "source_type": "git_repo",
    "title": "lib/user.rb",
    "content": "what the tests are doing Making it a chore to read and reason about what's going on in the individual test cases These code sharing tools are best only when they improve the overall readability and clarity of your tests Most of the time, it is best for clarity sake to have the arrange and teardown code in the test block that uses it Much like we did with the original todo list example Assignment 1TODO: Hook exercises in the testing repo\n1 TODO: Subject exercises in the testing repo\n1 TODO: Let exercises in the testing repo\nAdditional Resources\nThis section contains helpful links to other content It isn't required, so consider it supplemental https://mixandgo com/learn/let-vs-instance-variables-in-rspec",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18820,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_two_code_sharing.md",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "bfa3c1140b9ffd97ccefac003004b7ce",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "Introduction\nIn this lesson we will learn all about RSpec, a testing framework for Ruby that provides tools to help you structure and write automated tests In the Ruby sphere there are a few different options when it comes to testing frameworks But RSpec is by far the most popular, having at the time of writing over half a billion downloads since it was created RSpec's popularity is largely owed to its rich, expressive syntax which makes writing readable and maintainable tests a breeze This lesson is designed to be a guide through all the basic RSpec features you will need to know to get started writing your own automated tests To get the most out this lesson, please follow along with all the examples Learning Outcomes\nHow to install RSpec\nWhat is an example group and how do you define one What is an it block for What is an expectation What is a matcher What are the 3 phases of a test When should a teardown phase be used Project Setup and Installing RSpec\nTo kick things off, we need to create a new project where we can install RSpec and start using it Fire up a terminal, create a new directory and then navigate into it:\n~~~bash\n$ mkdir odin_rspec\n$ cd odin_rspec\n~~~\nCreate a lib directory and todo_list rb file\n~~~bash\n$ mkdir lib && touch lib/todo_list rb\n~~~\nOpen up the todo_list rb file in your favourite text editor and paste the following code into it This will be the code we will be writing tests for throughout the first part of this lesson ~~~ruby\nlib/todo_list rb\nclass TodoList\nattr_reader :tasks\ndef initialize(name, tasks = [])\n@name = name\n@tasks = tasks\nend\ndef name\n\"#{@name} (#{remaining_tasks})\"\nend\ndef add_task(task)\n@tasks << task\nend\ndef complete_task(task)\ntasks delete(task)\nend\ndef completed tasks empty end\nprivate\ndef remaining_tasks\nif tasks size == 1\n\"1 task\"\nelse\n\"#{tasks size} tasks\"\nend\nend\nend\n~~~\nNow that we have the code we will write tests for in place, it's time to install and setup RSpec",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 16
  },
  {
    "id": "eafd14c37b0f29b62f8bb5caaa768e42",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "rb class TodoList attr_reader :tasks def initialize(name, tasks = []) @name = name @tasks = tasks end def name \"#{@name} (#{remaining_tasks})\" end def add_task(task) @tasks << task end def complete_task(task) tasks delete(task) end def completed tasks empty end private def remaining_tasks if tasks size == 1 \"1 task\" else \"#{tasks size} tasks\" end end end ~~~ Now that we have the code we will write tests for in place, it's time to install and setup RSpecBack in your terminal, make sure you are in the root directory of the odin_rspec project and create a Gemfile\n~~~ruby\n$ touch Gemfile\n~~~\nGems are Ruby libraries written by other other programmers and allow us to easily add ready made functionality to our projects In our case we want to add RSpec to our project Paste the following into the Gemfile:\n~~~ruby\nsource 'https://rubygems org'\ngem 'rspec', '3 10'\n~~~\nBack in the terminal, we will run bundle install to make the RSpec gem available to our project:\n~~~ruby\n$ bundle install\n~~~\nNext run the RSpec install script, which will create a couple of files for us We will explain what these do a little later ~~~ruby\n$ rspec --init\ncreate rspec\ncreate   spec/spec_helper rb\n~~~\nOpen up the rspec file which was just created, it should only include this code at the moment:\n~~~ruby\n--require spec_helper\n~~~\nAdd the following to the file and then save it:\n~~~ruby\n--require spec_helper\n--format documentation\n--order rand\n~~~\nThe Last thing we need to do is create the file where the tests will live for our TodoList class In RSpec these are commonly called spec files because their filename is appended with _spec rb ~~~ruby\n$ touch spec/todo_list_spec rb\n~~~\nFinally, to verify everything is setup correctly, run $ rspec which should include the following in its output:\n~~~ruby\n0 examples, 0 failures\n~~~\nThat's it, we're up and running with RSpec The final folder structure of the project looks like this:\n~~~bash ├── rspec\n├── Gemfile\n├── Gemfile lock\n├── lib\n│   └── todo_list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 16
  },
  {
    "id": "49cde0ad91210ca6aa4e65aea3951ff2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "RSpec these are commonly called spec files because their filename is appended with _spec rb ~~~ruby $ touch spec/todo_list_spec rb ~~~ Finally, to verify everything is setup correctly, run $ rspec which should include the following in its output: ~~~ruby 0 examples, 0 failures ~~~ That's it, we're up and running with RSpec The final folder structure of the project looks like this: ~~~bash ├── rspec ├── Gemfile ├── Gemfile lock ├── lib │ └── todo_listrb\n└── spec\n├── todo_list_spec rb\n└── spec_helper rb\n~~~\nThe Gemfile is where we list the outside dependencies needed for our project to run correctly In our project, we only need the RSpec gem so we can write and run RSpec tests The Gemfile lock was automatically generated after we ran the bundle install command earlier It locks your gems down to specific versions so the project always uses the same versions no matter what machine the project is installed on This is all you really need to know about Gemfile's for now, but we will include a link in the additional resources if you want to learn more about them The lib directory is where our actual executable source code lives In our case the todo list class The spec directory is where we put all of our test files We don't want to mix our test code with our source code as that would get messy very quickly and make it hard to discern the test code from the source code Therefore it is best practice to put the test code in separate files within a different directory Finally the rspec --init command we ran earlier generated a couple of files for us The first of these was the rspec file, this is where we would add extra command line configuration for when we run the rspec command to execute our tests Things like the format of the output RSpec produces in the terminal and if the tests should be run in a random order or not for example The second file was the spec_helper rb file, this is where we would add configuration that needs to be shared among many test files We won't be doing anything more with either of these files during this lesson But for completion sake, it's good to know what they are for Structure of a RSpec test file\nOpen up the todo_list_spec rb file we created earlier The first thing we need to do is require a couple of dependencies The first is the spec_helper file RSpec generated for us",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 16
  },
  {
    "id": "e68b55085e05680955ec3804a669c85a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "would add configuration that needs to be shared among many test files We won't be doing anything more with either of these files during this lesson But for completion sake, it's good to know what they are for Structure of a RSpec test file Open up the todo_list_spec rb file we created earlier The first thing we need to do is require a couple of dependencies The first is the spec_helper file RSpec generated for usThe second file is the todo_list rb file in lib so we can create an instance of the TodoList class in the our test file so we can invoke its methods and test what they do ~~~ruby\nspec/todo_list_spec rb\nrequire \"spec_helper\"\nrequire \"todo_list\"\n~~~\nExample Groups\nNow let's create the top level example group Example groups serve two purposes, they are how we organize our test file by grouping related tests together and they allow us to describe the behaviour we are testing within them We define an example group using the describe method In the case of the following example group we are creating an example group for all the tests related to the TodoList Class ~~~ruby\nspec/todo_list_spec rb\nrequire \"spec_helper\"\nrequire \"todo_list\"\nRSpec describe TodoList do\nend\n~~~\nExample groups can be nested within each other This allows us to be more granular with grouping related tests together We will see how that works by creating a nested example group where we can put all the tests for the #name method on the TodoList class ~~~ruby\nspec/todo_list_spec rb\nrequire \"spec_helper\"\nrequire \"todo_list\"\nRSpec describe TodoList do\ndescribe \"name\" do\nend\nend\n~~~\nThe describe method takes an argument that can either be a class name or a string Typically you will pass the name of the class you are testing to the outer most example group and use strings for the nested example groups We will get into why you'd want to use a class name for some example groups and strings for others later on For now, the most important thing to note is that the argument is used to provide a label that describes the behaviour we will test within the example group In our case the the top level example group describes all the tests within it will be for the TodoList class The nested example group describes all tests within it will be for the name method on the TodoList class",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 3,
    "total_chunks": 16
  },
  {
    "id": "70cd7decd2975eb85b77a00366271450",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "groups and strings for others later on For now, the most important thing to note is that the argument is used to provide a label that describes the behaviour we will test within the example group In our case the the top level example group describes all the tests within it will be for the TodoList class The nested example group describes all tests within it will be for the name method on the TodoList classStructuring your test files and providing descriptive labels like this makes it easy for you to read the test file and determine what is being tested within it The describe method also takes a block ( do end) As we have already seen, nested example groups can go within the block But we can also put individual examples within the block Or in other words, our actual tests It blocks\nit blocks are used to define the individual examples within our example groups Much like the describe method,  it is also a method that accepts an argument that allows us to express what we expect to happen in that individual test, for example it \"returns the users name\" However unlike the describe method, the argument must always be a string and we cannot nest anything within an it block This is because it blocks are reserved for our actual test code Let's create a few it blocks which we can use to test the name method of the todo list:\n~~~ruby\nspec/todo_list_spec rb\nrequire \"spec_helper\"\nrequire \"todo_list\"\nRSpec describe TodoList do\ndescribe \"name\" do\nit \"returns the name with 0 tasks remaining\" do\nend\nit \"returns the name with 1 task remaining\" do\nend\nit \"returns the name with 2 tasks remaining\" do\nend\nend\nend\n~~~\nTo see all the structuring we have been doing in action we need to execute our tests To execute the tests, open the terminal and run the $ rspec command from the root directory of the odin_rspec project directory The output, as shown in the code snippet below uses the arguments we passed to our example groups and it blocks to output the structure of our tests to the terminal ~~~bash\nTodoList\nname\nreturns the name with 1 task remaining\nreturns the name with 0 tasks remaining\nreturns the name with 2 tasks remaining\nFinished in 0 00247 seconds (files took 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 4,
    "total_chunks": 16
  },
  {
    "id": "5422b3eb27b99335f6e150fefb72e725",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "the $ rspec command from the root directory of the odin_rspec project directory The output, as shown in the code snippet below uses the arguments we passed to our example groups and it blocks to output the structure of our tests to the terminal ~~~bash TodoList name returns the name with 1 task remaining returns the name with 0 tasks remaining returns the name with 2 tasks remaining Finished in 0 00247 seconds (files took 01574 seconds to load)\n3 examples, 0 failures\n~~~\nTest Order\nYou may have noticed the tests are not displaying in order we wrote them in When we set up the project earlier, we configured the tests to execute in a random order by adding the --order rand line to the rspec file We did this because each of our tests should be deterministic, meaning that they should be independent of each other and execute the same way every-time no matter what order they are in If the tests did execute in the same order every-time It would be possible to write tests that depend on that order to succeed This would eventually lead to a very brittle and hard to maintain test suite Pending Tests\nThe output also shows us our three individual it blocks in green In testing terms green means the test is passing But that's not quite right, we aren't testing anything in our examples yet By default RSpec will treat empty it blocks as passing tests Let's instead set them to pending to signify that they still need to completed There are a few different ways to set it blocks to pending in RSpec But for our purposes we are going to add an x to the start of each it block to set them to pending:\n~~~ruby\nspec/todo_list_spec rb\nrequire \"spec_helper\"\nrequire \"todo_list\"\nRSpec describe TodoList do\ndescribe \"name\" do\nxit \"returns the name with 0 tasks remaining\" do\nend\nxit \"returns the name with 1 task remaining\" do\nend\nxit \"returns the name with 2 tasks remaining\" do\nend\nend\nend\n~~~\nRun the test suite once again using the $ rspec command You should now get output that looks something like the following terminal output, with the it blocks output now colored in yellow Yellow signals a test is pending and needs to be completed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 5,
    "total_chunks": 16
  },
  {
    "id": "fc8b2d2d41d09a7676efadd000c635fb",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "\"returns the name with 0 tasks remaining\" do end xit \"returns the name with 1 task remaining\" do end xit \"returns the name with 2 tasks remaining\" do end end end ~~~ Run the test suite once again using the $ rspec command You should now get output that looks something like the following terminal output, with the it blocks output now colored in yellow Yellow signals a test is pending and needs to be completed~~~bash\nPending: (Failures listed here are expected and do not affect your suite's status)\n1) TodoList name returns the name with 0 tasks remaining\n# Temporarily skipped with xit\n# /spec/todo_list_spec rb:6\n2) TodoList name returns the name with 2 tasks remaining\n# Temporarily skipped with xit\n# /spec/todo_list_spec rb:12\n3) TodoList name returns the name with 1 task remaining\n# Temporarily skipped with xit\n# /spec/todo_list_spec rb:9\nFinished in 0 00179 seconds (files took 0 06131 seconds to load)\n3 examples, 0 failures, 3 pending\n~~~\nMaking Expectations\nNow that we have the basic structure in place, its time to write some actual test code To test something in RSpec we make expectations about what the code does To demonstrate this, let's write the test for the first it block Remove the x from the it method to stop it from being a pending test and put the following within the block:\n~~~ruby\nspec/todo_list_spec rb\nit \"returns the name with 0 tasks remaining\" do\ntodo_list = TodoList new(\"My List\")\nexpect(todo_list name) to eq(\"My List (0 tasks)\")\nend\n~~~\nYou can probably guess what this does just from reading the code, it expects the the name of the todo list we created to equal \"My List (0 tasks)\" Run the test suite with the $ rspec command in your terminal You should see that the output for the test we just filled in is now green",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 6,
    "total_chunks": 16
  },
  {
    "id": "e1e0179f59b01d814a540131fc7c9283",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "with 0 tasks remaining\" do todo_list = TodoList new(\"My List\") expect(todo_list name) to eq(\"My List (0 tasks)\") end ~~~ You can probably guess what this does just from reading the code, it expects the the name of the todo list we created to equal \"My List (0 tasks)\" Run the test suite with the $ rspec command in your terminal You should see that the output for the test we just filled in is now greenThat means we've just wrote our first proper passing test 🎉\n~~~bash\nTodoList\nname\nreturns the name with 2 tasks remaining (PENDING: Temporarily skipped with xit)\nreturns the name with 1 task remaining (PENDING: Temporarily skipped with xit)\nreturns the name with 0 tasks remaining\nPending: (Failures listed here are expected and do not affect your suite's status)\n1) TodoList name returns the name with 2 tasks remaining\n# Temporarily skipped with xit\n# /spec/todo_list_spec rb:13\n2) TodoList name returns the name with 1 task remaining\n# Temporarily skipped with xit\n# /spec/todo_list_spec rb:10\nFinished in 0 00179 seconds (files took 0 06131 seconds to load)\n3 examples, 0 failures, 2 pending\nRandomized with seed 3657\n~~~\nParts of an Expectation\nAn RSpec expectation is made up of two distinct parts The first part is the actual value we want to make the expectation on: expect(todo_list name) to\nThe second part is a matcher, which is used to verify that the actual value matches our expected value: eq(\"My List (0 tasks)\")\nThese two parts together make up a full expectation in RSpec:\n~~~ruby\nexpect(actual_value) to eq(expected_value)\n~~~\nNegative Expectations\nSuppose you want to expect something is not to equal to something else RSpec has you covered You can use the expect(actual_value) not_to expectation, which does the opposite of expect(actual_value) to and will fail if the expectation does match To see this in action, let's add a negative expectation to the first test case we created for the name method In this expectation we will expect the todo list name not to equal \"Barrys List (0 tasks)\"\n~~~ruby\nspec/todo_list_spec",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 7,
    "total_chunks": 16
  },
  {
    "id": "fecda52a7ed82985a448e93cfadb7d89",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "to expect something is not to equal to something else RSpec has you covered You can use the expect(actual_value) not_to expectation, which does the opposite of expect(actual_value) to and will fail if the expectation does match To see this in action, let's add a negative expectation to the first test case we created for the name method In this expectation we will expect the todo list name not to equal \"Barrys List (0 tasks)\" ~~~ruby spec/todo_list_specrb\nit \"returns the name with 0 tasks remaining\" do\ntodo_list = TodoList new(\"My List\")\nexpect(todo_list name) to eq(\"My List (0 tasks)\")\nexpect(todo_list name) not_to eq(\"Barrys List (0 tasks)\")\nend\n~~~\nRun your tests once again with $ rspec The first test case should still be passing Failing Tests\nSo far we've seen pending and passing tests, but what does a failing test look like to find out Remove the x from the second test cases  it method we wrote earlier and put the following within its block:\n~~~ruby\nspec/todo_list_spec rb\nit \"returns the name with 1 task remaining\" do\ntodo_list = TodoList new(\"My List\")\nexpect(todo_list name) to eq(\"My List (1 task)\")\nend\n~~~\nWe are expecting the todo list name to display that it has one task Run the tests to find out if our expectation is correct: $ rspec\n~~~bash\n1) TodoList name returns the name with 1 task remaining\nFailure/Error: expect(todo_list name) to eq(\"My List (1 task)\")\nexpected: \"My List (1 task)\"\ngot: \"My List (0 tasks)\"\n(compared using ==)\n# /spec/todo_list_spec rb:15:in `block (3 levels) in <top (required)>'\n~~~\nAs you have probably been anticipating, this test did indeed fail The output is coloured red which signifies a failing test The output also displays some useful information indicating what went wrong There are two important parts of the output in-particular that will help you debug why it failed The first part, is the output showing what the test expected and what it got instead This is usually enough to let you know what went wrong and where to start with fixing the test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 8,
    "total_chunks": 16
  },
  {
    "id": "2f0261113961bda83ccf294dbaecb9c8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "did indeed fail The output is coloured red which signifies a failing test The output also displays some useful information indicating what went wrong There are two important parts of the output in-particular that will help you debug why it failed The first part, is the output showing what the test expected and what it got instead This is usually enough to let you know what went wrong and where to start with fixing the test~~~ruby\nexpected: \"My List (1 task)\"\ngot: \"My List (0 tasks)\"\n~~~\nAnother useful part of the output is the line number it failed on In larger, more complicated test files where the expected and got output doesn't provide enough of a clue as to what went wrong This will provide a useful place to start when tracking down why the test failed\n~~~ruby /spec/todo_list_spec rb:16:in `block (3 levels) in '\n~~~\nLet's quickly fix this test to get it working We just need to pass in a tasks array which contains one task:\n~~~ruby\nspec/todo_list_spec rb\nit \"returns the name with 1 task remaining\" do\ntodo_list = TodoList new(\"My List\", [\"task 1\"])\nexpect(todo_list name) to eq(\"My List (1 task)\")\nend\n~~~\nRun the tests again with $ rspec We should now have 2 passing tests and one pending test remaining Matchers\nSo far we have been using eq matcher in our expectations But RSpec has a wide selection of different matchers we can use to make the tests more expressive in all sorts of different scenarios We'll cover a few matchers that you are likely to find the most useful here But we encourage you to have a browse through the RSpec matchers documentation to see what other matchers are at your disposal The Eq Matcher\nThe eq matcher is the most versatile and commonly used matcher It will likely be the matcher you use the most It compares the actual value against the expected value and will return true if it matches Otherwise it will return false Lets see this matcher in action once again by finishing off the tests for the todo list name method:\n~~~ruby\nspec/todo_list_spec rb\nit \"returns the name with 2 tasks remaining\" do\ntodo_list = TodoList new(\"My List\", [\"task 1\", \"task 2\"])\nexpect(todo_list name)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 9,
    "total_chunks": 16
  },
  {
    "id": "a01775dafbcbb778743fd0bcb2bcb5bb",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "commonly used matcher It will likely be the matcher you use the most It compares the actual value against the expected value and will return true if it matches Otherwise it will return false Lets see this matcher in action once again by finishing off the tests for the todo list name method: ~~~ruby spec/todo_list_spec rb it \"returns the name with 2 tasks remaining\" do todo_list = TodoList new(\"My List\", [\"task 1\", \"task 2\"]) expect(todo_list name)to eq(\"My List (2 tasks)\")\nend\n~~~\nRun all the tests in the terminal once again with $ rspec to see all of our todo list name method tests now passing The Be Matcher\nWe'll often need to test predicate methods in our classes that return either true or false We could use the eq matcher to test these methods But RSpec has a more expressive be matcher which is better suited to the job and will make the tests much nicer to read as you can expect the result to be true or be false rather than equal to true or equal to false which doesn't quite read as well To demonstrate the be matcher, we are going write a test for another one of the TodoList methods Specifically the completed method First we need an example group where we can group the tests for the completed method together ~~~ruby\nspec/todo_list_spec rb\nrequire \"spec_helper\"\nrequire \"todo_list\"\nRSpec describe TodoList do\n# omitted for brevity\ndescribe \"completed \" do\nend\nend\n~~~\nNext we will write the individual test cases for the completed method There are only two cases that we care about What does the method return when the list is completed and what does it return when the list is not completed:\n~~~ruby\nspec/todo_list_spec rb\ndescribe \"completed \" do\nit \"returns true when all tasks are completed\" do\nend\nit \"returns false when all tasks are not completed\" do\nend\nend\n~~~\nNow lets see how to use that be matcher we have been hyping up by writing the expectation for the first test case:\n~~~ruby\nspec/todo_list_spec rb\nit \"returns true when all tasks are completed\" do\ntodo_list = TodoList new(\"My List\", [])\nexpect(todo_list completed ) to be(true)\nend\n~~~\nAnd to finish off the tests for the completed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 10,
    "total_chunks": 16
  },
  {
    "id": "1166879b0399208a5d28bf97c154f3c3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "all tasks are completed\" do end it \"returns false when all tasks are not completed\" do end end ~~~ Now lets see how to use that be matcher we have been hyping up by writing the expectation for the first test case: ~~~ruby spec/todo_list_spec rb it \"returns true when all tasks are completed\" do todo_list = TodoList new(\"My List\", []) expect(todo_list completed ) to be(true) end ~~~ And to finish off the tests for the completedmethod, we will write the test for when the todo list is not completed:\n~~~ruby\nspec/todo_list_spec rb\nit \"returns false when all tasks are not completed\" do\ntodo_list = TodoList new(\"My List\", [\"Incomplete task\"])\nexpect(todo_list completed ) to be(false)\nend\n~~~\nFinally run all the tests once again with $ rspec and everything should still be passing The Include Matcher\nThe include matcher functions much like the  include method you've already been using with Ruby collections It passes the expectation if the actual value includes the expected value To see how the include matcher works, we will write some tests for yet another one of the todo lists methods This time the add_task method Write the following test and make sure it works by running the tests with the   $ rspec command in the terminal ~~~ruby\nspec/todo_list_spec rb\nrequire \"spec_helper\"\nrequire \"todo_list\"\nRSpec describe TodoList do\n# omitted for brevity\ndescribe \"add_task\" do\nit \"adds a task to the list\" do\ntodo_list = TodoList new(\"My List\", [\"Existing task\"])\ntodo_list add_task(\"New task\")\nexpect(todo_list tasks) to include(\"New task\")\nend\nend\nend\n~~~\nIn this test, we are adding a new task to a todo list which already contains an existing task However we don't care about the existing task We only care that the list includes the new task we've added The include matcher is perfect for situations like this, where we only care about a certain part of the actual value You've likely noticed that the tests for the add_task method look quite a bit different from the tests we've been writing previously That's a pretty good cue to have a deeper look at the different parts of an individual test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 11,
    "total_chunks": 16
  },
  {
    "id": "fc3bdc1689c02c1ae7afa3e8de99b610",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "the existing task We only care that the list includes the new task we've added The include matcher is perfect for situations like this, where we only care about a certain part of the actual value You've likely noticed that the tests for the add_task method look quite a bit different from the tests we've been writing previously That's a pretty good cue to have a deeper look at the different parts of an individual testAnatomy of a Test\nEach test is generally made up of three distinct phases, these are:\nArrange\nAct\nAssert\nLets write a test for the complete_task method to examine each of these phases in more detail:\n~~~ruby\nspec/todo_list_spec rb\nrequire \"spec_helper\"\nrequire \"todo_list\"\nRSpec describe TodoList do\n# omitted for brevity\ndescribe \"complete_task\" do\nit \"marks a task as completed\" do\n# arrange\ntodo_list = TodoList new(\"My List\", [\"Incomplete Task\"])\n# act\ntodo_list complete_task(\"Incomplete Task\")\n# assert\nexpect(todo_list tasks) not_to include(\"Incomplete Task\")\nend\nend\nend\n~~~\nArrange - First we need to arrange the right conditions in our example so we can test the correct behaviour For the arrange phase In our complete_task test, we initialised a new todo list with an uncompleted task so we can test the complete behaviour on this task This phase is also commonly known as the setup phase Act - In the second phase we act, or in other words we invoke the behaviour that we are testing In the act phase of our test we invoke the complete_task method, passing in the name of the task we created in the arrange phase to complete it Assert - In the final phase we assert that the behaviour did what we expected it to do In the assert phase of our test we made an expectation that the todo list no longer included the task which we just completed Style\nSome of our earlier tests combined the act and assert phases For instance, in our completed method tests We both acted and asserted in the expectation:\n~~~ruby\nspec/todo_list_spec rb\nit \"returns true when all tasks are completed\" do\n# arrange\ntodo_list = TodoList new(\"My List\", [])\n# act and assert\nexpect(todo_list completed ) to be(true)\nend\n~~~\nThis test could be rewritten to make the different phases clearer:\n~~~ruby\nspec/todo_list_spec",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 12,
    "total_chunks": 16
  },
  {
    "id": "6500a7ccce3321dd5e963254f0e259f5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "task which we just completed Style Some of our earlier tests combined the act and assert phases For instance, in our completed method tests We both acted and asserted in the expectation: ~~~ruby spec/todo_list_spec rb it \"returns true when all tasks are completed\" do # arrange todo_list = TodoList new(\"My List\", []) # act and assert expect(todo_list completed ) to be(true) end ~~~ This test could be rewritten to make the different phases clearer: ~~~ruby spec/todo_list_specrb\nit \"returns true when all tasks are completed\" do\n# arrange\ntodo_list = TodoList new(\"My List\", [])\n# act\nresult = todo_list completed # assert\nexpect(result) to be(true)\nend\n~~~\nWhich version of these you use is up to you Many find the terser syntax of the first version more readable It's also a common practice to separate each phase using a newline so it is easy to distinguish the different phases from each other at a glance Teardown Phase\nThere is an extra phase which is sometimes needed when we need to undo something that was done in the arrange or act phases to change the global state in our system This phase is called the teardown phase To see how this phase works, create a new file in the lib directory named counter rb and paste the following code into it:\n~~~ruby\nlib/counter rb\n$global_counter = 0\nclass Counter\ndef count\n$global_counter\nend\ndef increment $global_counter += 1\nend\ndef reset $global_counter = 0\nend\nend\n~~~\nNext, create a new test file for the Counter class in the spec directory named counter_spec rb and enter the following test code into it:\n~~~ruby\nspec/counter_spec rb\nrequire \"spec_helper\"\nrequire \"counter\"\nRSpec describe Counter do\ndescribe \"increment \" do\nit \"increments the counter by one\" do\ncounter = Counter new\ncounter increment expect(counter count) to eq(1)\nend\nit \"increments the counter by two\" do\ncounter = Counter new\ncounter increment counter increment expect(counter count) to eq(2)\nend\nend\nend\n~~~\nIn the test file, we have two tests for the increment method One for asserting it increments the count by one, and another to assert it increments the count by 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 13,
    "total_chunks": 16
  },
  {
    "id": "0da2a0ed5da3aa7399aa731762411362",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "describe \"increment \" do it \"increments the counter by one\" do counter = Counter new counter increment expect(counter count) to eq(1) end it \"increments the counter by two\" do counter = Counter new counter increment counter increment expect(counter count) to eq(2) end end end ~~~ In the test file, we have two tests for the increment method One for asserting it increments the count by one, and another to assert it increments the count by 2If we run these tests now we will see one of two failures depending on the order the tests are executed in Recall that by default RSpec executes tests in a random order If the increment by one test was run first, the increment by two test will fail for the following reason:\n~~~ruby\n1) Counter increment increments the counter by two\nFailure/Error: expect(counter count) to eq(2)\nexpected: 2\ngot: 3\n~~~\nIf the increment by two test was run first, then the increment by one test will fail for this reason:\n~~~ruby\n1) Counter increment increments the counter by one\nFailure/Error: expect(counter count) to eq(1)\nexpected: 1\ngot: 3\n~~~\nIf we run the tests a few times we will see both of these test failures eventually as the random order changes The problem is that both our tests expect the count to start from zero But both of our tests are also changing the state of our system by incrementing the $global_count These state changes in the system are hanging around and leaking between our two tests Meaning that the global count is only zero for the first test to be executed This is where the teardown phase comes into play, we need to clean up after each test by resetting the global count back zero after the test has been executed This will ensure the state changes made in one test will not affect the other test Luckily our counter class has a handy reset method which we can use to do this Add the following teardown phases to the counter tests:\n~~~ruby\nspec/counter_spec rb\nrequire \"spec_helper\"\nrequire \"counter\"\nRSpec describe Counter do\ndescribe \"increment \" do\nit \"increments the counter by one\" do\n# arrange\ncounter = Counter new\n# act\ncounter increment # assert\nexpect(counter count) to eq(1)\n# teardown\ncounter reset end\nit \"increments the counter by two\" do\n# arrange\ncounter = Counter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 14,
    "total_chunks": 16
  },
  {
    "id": "2ca4872b646f11cfc2fa1cd2d091ff13",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
    "source_type": "git_repo",
    "title": "lib/todo_list.rb",
    "content": "has a handy reset method which we can use to do this Add the following teardown phases to the counter tests: ~~~ruby spec/counter_spec rb require \"spec_helper\" require \"counter\" RSpec describe Counter do describe \"increment \" do it \"increments the counter by one\" do # arrange counter = Counter new # act counter increment # assert expect(counter count) to eq(1) # teardown counter reset end it \"increments the counter by two\" do # arrange counter = Counternew\n# act\ncounter increment counter increment # assert\nexpect(counter count) to eq(2)\n# teardown\ncounter reset end\nend\nend\n~~~\nNow when we run the tests suite, both of these tests will pass every-time No matter which order they are executed in This counter class was a contrived example to demonstrate the teardown phase You won't have to use the teardown phase all that often because you would not normally do something like this with a global variable in a real system But later on in the curriculum you will be working with things that persist data such as databases and the file system The teardown phase will come in useful when you need to clean up the persisted data between your tests Conclusion\nWe've covered a lot of ground here, you now know all of the basic building blocks of how to write tests using RSpec In the coming lessons we will explore what we should test But before that, in the next lesson we will explore a few more RSpec features that allow us to share common code between our tests We will once again be using the odin_rspec project we set up in this lesson to demonstrate those features so make sure to keep that project around Assignment\n1 TODO: Matcher exercises in the testing repo\nAdditional Resources\nThis section contains helpful links to other content It isn't required, so consider it supplemental https://www rubyguides com/2018/09/ruby-gems-gemfiles-bundler/",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 29796,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\rspec_part_one_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 15,
    "total_chunks": 16
  },
  {
    "id": "b05ebed9c506a46452953a598aba8cee",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
    "source_type": "git_repo",
    "title": "test_driven_development",
    "content": "Introduction\nSo far you’ve been learning how to test code that you’ve written, but there’s a popular development process that flips that concept on its head Rather than writing code, manually testing it until you get it working, then writing a test to make sure it stays working; you can write the test before the code, so that you don’t have to waste any time manually testing Test Driven Development is the name of this inverted development process Learning Outcomes\nLook through these now and use them to guide your learning By the end of this lesson, expect to:\nLearn what Test Driven Development is\nLearn the advantages of Test Driven Development\nLearn how to write code TDD style\nWhat is TDD, and why do it Test Driven Development (TDD) just means, in its simplest definition, that you write the tests for a method before the method itself This can seem like a really strange concept, especially when you first try doing it, but like anything else in programming (and life more broadly) the more you do it the more normal it will feel, and the better you will get at it Following Test Driven Development is especially useful when you’re still learning about testing, as it will help you learn how to write code that’s easy to test from the outset, rather than having to rewrite methods to make them testable Another benefit of writing code TDD style is that it guarantees that your code will be tested When writing code with the intention of testing it after the fact, it’s very easy to put testing on the back burner for so long that it never happens, and testing before you write the code in question removes that temptation As was mentioned in the introduction, TDD’ing a project means that you don’t have to manually test much if any functionality, and that time that you would’ve spent manually testing can add up quickly on a large project One last benefit to the TDD approach is that it can help you better plan the design, and catch bugs earlier in the process because your tests are driving your development We should mention here though that not everyone agrees that TDD is the way to go There are plenty of developers that write tests after the code is written When you're first learning how to test it's probably best for you to write tests after your code, so that you can focus on learning testing in isolation Feel free to try doing TDD once you feel more comfortable with testing though",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10811,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "031f9a93f78548b7eae6ab5950c03027",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
    "source_type": "git_repo",
    "title": "test_driven_development",
    "content": "tests are driving your development We should mention here though that not everyone agrees that TDD is the way to go There are plenty of developers that write tests after the code is written When you're first learning how to test it's probably best for you to write tests after your code, so that you can focus on learning testing in isolation Feel free to try doing TDD once you feel more comfortable with testing thoughRed Green Refactor\nWhen you first write your test in Test Driven Development it is in what’s known as the red state, because when running the test it will fail and the output will be red Once you’ve written a method that passes the test you are in the green state, as now the test passes and its output will be green Once you’re passing your test you can refactor the method, using the test to ensure that your method is still working as intended after your refactor This development cycle is known as red-green-refactor, and it’s at the heart of the TDD process When following TDD you will iterate over each unit of work needed for your project with these three steps until you’re done One key aspect of the red-green-refactor cycle that isn’t in the name, is that the code you write to go from red to green should be the minimum amount required to pass the test If you find that the functionality you’re adding actually does more than is being tested, that is a sign that your method is likely doing too much, or possibly that your tests aren’t testing all of the right functionality TDD Examples\nLet’s walk through a TDD approach to a basic class Given the general problem:\nCreate a Square class that takes an integer on initialization for the length of each side, and has an #area method and a #perimeter method which returns (as you probably guessed) the area and perimeter of the square respectively Start by making a directory to house this example, and then lib and spec directories to house the class and the specs respectively Next, create the spec and class files Lastly, open the example directory in your text editor so that you can start this TDD style ~~~ bash\nmkdir tdd-lesson\ncd tdd-lesson\nmkdir lib\nmkdir spec\ntouch lib/square rb\ntouch spec/square_spec rb\ncode ~~~\nNow, how might you want to TDD the creation of this class",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10811,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "876e876cc782838ba6308f8eed7c83b6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
    "source_type": "git_repo",
    "title": "test_driven_development",
    "content": "by making a directory to house this example, and then lib and spec directories to house the class and the specs respectively Next, create the spec and class files Lastly, open the example directory in your text editor so that you can start this TDD style ~~~ bash mkdir tdd-lesson cd tdd-lesson mkdir lib mkdir spec touch lib/square rb touch spec/square_spec rb code ~~~ Now, how might you want to TDD the creation of this classWell, you know that you need to describe a class called Square, and that you'll need to describe its #area method, so start with setting all that up in a square_spec rb file:\n~~~rb\nrequire_relative ' /lib/square'\ndescribe Square do\ndescribe \"#area\" do\nend\nend\n~~~\nSince Square will be initialized with a side length, do that initialization in a couple of different context blocks so that you can initialize differently sized squares to test the method:\n~~~rb\nrequire_relative ' /lib/square'\ndescribe Square do\ndescribe \"#area\" do\ncontext 'when side length is 4' do\nlet(:size_4_square) { described_class new(4) }\nend\ncontext 'when side length is 6' do\nlet(:size_6_square) { described_class new(6) }\nend\nend\nend\n~~~\nNext add an it block to each of the contexts to actually test that the method works as you expect:\n~~~rb\nrequire_relative ' /lib/square'\ndescribe Square do\ndescribe \"#area\" do\ncontext 'when side length is 4' do\nlet(:size_4_square) { described_class new(4) }\nit 'returns 16' do\nexpect(size_4_square area) to eq(16)\nend\nend\ncontext 'when side length is 6' do\nlet(:size_6_square) { described_class new(6) }\nit 'returns 36' do\nexpect(size_6_square area) to eq(36)\nend\nend\nend\nend\n~~~\nAlright, that should have you set up to test #area, now run the tests by entering rspec in the terminal The result should be like the red failure/error above, since you haven’t implemented Square at all yet This is the red stage of the red-green-refactor cycle mentioned earlier, so the next step is making it green by implementing the expected functionality",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10811,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9f2cb8a0bbf2d09cc9530dd836825562",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
    "source_type": "git_repo",
    "title": "test_driven_development",
    "content": "new(6) } it 'returns 36' do expect(size_6_square area) to eq(36) end end end end ~~~ Alright, that should have you set up to test #area, now run the tests by entering rspec in the terminal The result should be like the red failure/error above, since you haven’t implemented Square at all yet This is the red stage of the red-green-refactor cycle mentioned earlier, so the next step is making it green by implementing the expected functionalityDo that in our lib/square rb file now:\n~~~rb\nclass Square\ndef initialize(side_length)\n@side_length = side_length\nend\ndef area\n@side_length * @side_length\nend\nend\n~~~\nAnd now if you run the test suite again you should get a nice green output indicating no failures Try it by entering rspec in the terminal again:\nSuccess You are now on the green stage of the red-green-refactor cycle Now you can refactor knowing that you can use the test to make sure to keep the existing functionality that you’ve built, maybe do:\n~~~rb\nclass Square\ndef initialize(side_length)\n@side_length = side_length\nend\ndef area\n@side_length ** 2\nend\nend\n~~~\nYeah, that’s a little cleaner And you can run rspec again to make sure the tests still pass:\nLooks like you’re good Now do the #perimeter method First write the test:\n~~~rb\nrequire_relative ' /lib/square'\ndescribe Square do\n# omitted for brevity\ndescribe \"#perimeter\" do\ncontext 'when side length is 4' do\nlet(:size_4_square) { described_class new(4) }\nit 'returns 16' do\nexpect(size_4_square perimeter) to eq(16)\nend\nend\ncontext 'when side length is 6' do\nlet(:size_6_square) { described_class new(6) }\nit 'returns 24' do\nexpect(size_6_square perimeter)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10811,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a6e4707a4b964c0daff0b02cf706e034",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
    "source_type": "git_repo",
    "title": "test_driven_development",
    "content": "rspec again to make sure the tests still pass: Looks like you’re good Now do the #perimeter method First write the test: ~~~rb require_relative ' /lib/square' describe Square do # omitted for brevity describe \"#perimeter\" do context 'when side length is 4' do let(:size_4_square) { described_class new(4) } it 'returns 16' do expect(size_4_square perimeter) to eq(16) end end context 'when side length is 6' do let(:size_6_square) { described_class new(6) } it 'returns 24' do expect(size_6_square perimeter)to eq(24)\nend\nend\nend\nend\n~~~\nRun the test to make sure it fails like you expect:\nNow write the minimum functionality required to make the tests pass:\n~~~rb\nclass Square\ndef initialize(side_length)\n@side_length = side_length\nend\ndef area\n@side_length ** 2\nend\ndef perimeter\n@side_length * 4\nend\nend\n~~~\nThen run the tests to make sure they pass:\nSince this seems like it doesn’t need any refactoring we’re all done Assignment\nTODO: Exercise: Finishing TDD'ing a few more methods in the example class used in the content\nTODO: Exercise: TDD a value object\nTODO: Exercise: TDD a class that has a collaborator which doesn't exist yet using mocks\nAdditional Resources\nThis section contains helpful links to other content It isn't required, so consider it supplemental Read \"TDD is Dead Long Live Testing\" by DHH for an anti-TDD viewpoint\nKnowledge Check\nThis section contains questions for you to check your understanding of this lesson If you’re having trouble answering the questions below on your own, review the material above to find the answer What does it mean for code to be test driven List four different advantages of TDD What is the 3 part development cycle used for TDD How much code should be written when going from the red state to the green state of the red-green-refactor cycle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10811,
      "relative_path": "git_repos\\odin-project\\ruby\\automated_testing\\test_driven_development.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "510bb593e685317436e78edc6b4cbaf1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
    "source_type": "git_repo",
    "title": "arrays",
    "content": "Introduction\nAt the beginning of this section, you learned how to create and manipulate numbers and strings and how to assign them to variables In real-world development, where you'll be working with dozens (and even hundreds ) of variables, working with numbers and strings individually is tedious, if not impossible One way Ruby allows you to represent a collection of data is with arrays, which you can think of as ordered lists Rather than working with individual variables, numbers, or strings, an array allows you to create and manipulate an ordered and indexed collection of these data The individual variables, numbers, or strings within an array are known as elements An array can contain any combination of variables, numbers, strings, or other Ruby objects (including other arrays), although it is advisable to keep similar data types in any one array Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe what an array is, and explain why it's useful Describe two different ways of creating a new array Explain how to access array elements using different methods Explain three different ways to add data to an array Explain how to remove elements from an array Creating arrays\nHere are two basic arrays:\nruby\nnum_array = [1, 2, 3, 4, 5]\nstr_array = [\"This\", \"is\", \"a\", \"small\", \"array\"]\nBoth arrays have five elements separated by commas The first array contains integers, while the second array contains strings Arrays are commonly created with an array literal, which is a special syntax used to create instances of an array object To create a new array using an array literal, use square brackets ([]) An array can also be created by calling the Array new method When you call this method, you can also include up to 2 optional arguments (initial size and default value):\nruby\nArray new               #=> []\nArray new(3)            #=> [nil, nil, nil]\nArray new(3, 7)         #=> [7, 7, 7]\nArray new(3, true)      #=> [true, true, true]\nAccessing elements\nEvery element in an array has an index, which is a numerical representation of the element's position in the array Like most other programming languages, Ruby arrays use zero-based indexing, which means that the index of the first element is 0, the index of the second element is 1, and so on",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8465,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "46742bfc1a2b23aa28bfc8f7ee154942",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
    "source_type": "git_repo",
    "title": "arrays",
    "content": "#=> [] Array new(3) #=> [nil, nil, nil] Array new(3, 7) #=> [7, 7, 7] Array new(3, true) #=> [true, true, true] Accessing elements Every element in an array has an index, which is a numerical representation of the element's position in the array Like most other programming languages, Ruby arrays use zero-based indexing, which means that the index of the first element is 0, the index of the second element is 1, and so onAccessing a specific element within an array is done by calling my_array[x], where x is the index of the element you want Calling an invalid position will result in nil Ruby also allows the use of negative indices, which return elements starting from the end of an array, starting at [-1] ```ruby\nstr_array = [\"This\", \"is\", \"a\", \"small\", \"array\"]\nstr_array[0]            #=> \"This\"\nstr_array[1]            #=> \"is\"\nstr_array[4]            #=> \"array\"\nstr_array[-1]           #=> \"array\"\nstr_array[-2]           #=> \"small\"\n```\nFinally, Ruby provides the #first and #last array methods, which should be self-explanatory In addition, these methods can take an integer argument, e g , my_array first(n) or my_array last(n), which will return a new array that contains the first or last n elements of my_array, respectively ```ruby\nstr_array = [\"This\", \"is\", \"a\", \"small\", \"array\"]\nstr_array first         #=> \"This\"\nstr_array first(2)      #=> [\"This\", \"is\"]\nstr_array last(2)       #=> [\"small\", \"array\"]\n```\nAdding and removing elements\nAdding an element to an existing array is done by using the #push method or the shovel operator << Both methods will add elements to the end of an array and return that array with the new elements The #pop method will remove the element at the end of an array and return the element that was removed ```ruby\nnum_array = [1, 2]\nnum_array push(3, 4)      #=> [1, 2, 3, 4]\nnum_array << 5            #=> [1, 2, 3, 4, 5]\nnum_array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8465,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0d2f97652a478104543fba81638fb420",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
    "source_type": "git_repo",
    "title": "arrays",
    "content": "existing array is done by using the #push method or the shovel operator << Both methods will add elements to the end of an array and return that array with the new elements The #pop method will remove the element at the end of an array and return the element that was removed ```ruby num_array = [1, 2] num_array push(3, 4) #=> [1, 2, 3, 4] num_array << 5 #=> [1, 2, 3, 4, 5] num_arraypop             #=> 5\nnum_array                 #=> [1, 2, 3, 4]\n```\nThe methods #shift and #unshift are used to add and remove elements at the beginning of an array The #unshift method adds elements to the beginning of an array and returns that array (much like #push) The #shift method removes the first element of an array and returns that element (much like #pop) ```ruby\nnum_array = [2, 3, 4]\nnum_array unshift(1)      #=> [1, 2, 3, 4]\nnum_array shift           #=> 1\nnum_array                 #=> [2, 3, 4]\n```\nIt's also useful to know that both #pop and #shift can take integer arguments:\n```ruby\nnum_array = [1, 2, 3, 4, 5, 6]\nnum_array pop(3)          #=> [4, 5, 6]\nnum_array shift(2)        #=> [1, 2]\nnum_array                 #=> [3]\n```\nAdding and subtracting arrays\nWhat do you think will be the outcome of [1, 2, 3] + [3, 4, 5] If you guessed [1, 2, 3, 3, 4, 5], congratulations Adding two arrays will return a new array built by concatenating them, similar to string concatenation The concat method works the same way ```ruby\na = [1, 2, 3]\nb = [3, 4, 5]\na + b         #=> [1, 2, 3, 3, 4, 5]\na",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8465,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f4118f1784774801e1a0ea500ba21a36",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
    "source_type": "git_repo",
    "title": "arrays",
    "content": "``` Adding and subtracting arrays What do you think will be the outcome of [1, 2, 3] + [3, 4, 5] If you guessed [1, 2, 3, 3, 4, 5], congratulations Adding two arrays will return a new array built by concatenating them, similar to string concatenation The concat method works the same way ```ruby a = [1, 2, 3] b = [3, 4, 5] a + b #=> [1, 2, 3, 3, 4, 5] aconcat(b)   #=> [1, 2, 3, 3, 4, 5]\n```\nTo find the difference between two arrays, you can subtract them using - This method returns a copy of the first array, removing any elements that appear in the second array ruby\n[1, 1, 1, 2, 2, 3, 4] - [1, 4]  #=> [2, 2, 3]\nBasic methods\nRuby gives you many methods to manipulate arrays and their contents (over 150 ), many of which are beyond the scope of this lesson To learn about other methods, go to the official documentation and browse the Array class documentation page, where you can find methods listed alphabetically (by scrolling the left sidebar) or summarized and grouped by purpose (by reading under \"What's Here\") Calling the #methods method on an array will also yield a long list of the available methods ruby\nnum_array methods       #=> A very long list of methods\nHere is a brief look at some other common array methods you might run into:\n```ruby\n[] empty #=> true\n[[]] empty #=> false\n[1, 2] empty #=> false\n[1, 2, 3] length        #=> 3\n[1, 2, 3] reverse       #=> [3, 2, 1]\n[1, 2, 3] include (3)   #=> true\n[1, 2, 3] include (\"3\") #=> false\n[1, 2, 3] join          #=> \"123\"\n[1, 2, 3] join(\"-\")     #=> \"1-2-3\"\n```\nAssignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8465,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5b5071c6d83f9b41433f64a54c611fa3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
    "source_type": "git_repo",
    "title": "arrays",
    "content": "long list of methods Here is a brief look at some other common array methods you might run into: ```ruby [] empty #=> true [[]] empty #=> false [1, 2] empty #=> false [1, 2, 3] length #=> 3 [1, 2, 3] reverse #=> [3, 2, 1] [1, 2, 3] include (3) #=> true [1, 2, 3] include (\"3\") #=> false [1, 2, 3] join #=> \"123\" [1, 2, 3] join(\"-\") #=> \"1-2-3\" ``` Assignment 1Read Launch School's chapter on [Arrays](https://launchschool com/books/ruby/read/arrays), following along with the exercises using irb or any other appropriate REPL 1 Read [The Definitive Guide to Ruby Arrays](https://www rubyguides com/2015/05/ruby-arrays/) by Jesus Castello 1 Complete the array exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises) that you previously cloned 1 Let's get some practice reading documentation You'll feel just like a real programmer What do you think the methods `#clear`, `#insert`, `#sample`, `#shuffle`, and `#uniq` do Look these methods up in the [Array class documentation](https://docs ruby-lang org/en/3 3/Array html) Were you close Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is an array and why is it useful What are two ways to create a new empty array What are some ways of accessing the elements in an array What are 3 ways to add data to an array How can you remove elements from an array Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental If you need a different take on arrays, read through this alternative article on arrays by zetcode Arrays also allow for set operations Don't worry about the simple bookshelf example Classes and Rails will be covered later",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8465,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "366c99657a19a5bcfce77668e395f35c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
    "source_type": "git_repo",
    "title": "Addition",
    "content": "Introduction\nRuby is very object-oriented, which means that absolutely everything in Ruby is an object, even the most basic data types We'll start here with four of Ruby's basic data types: numbers (integers and floats), strings, symbols, and Booleans (true, false, and nil) For all of the examples throughout this lesson, feel free to follow along in irb or any appropriate online REPL to get a better feel for how they work Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson List the basic arithmetic operators and what they do Describe the difference between an integer and a float and how to convert between the two Explain string interpolation and concatenation Describe what escape characters are, and list several examples Define what a symbol is and how it differs from a string Explain what the Booleans true, false, and nil represent Numbers\nYou probably already know what numbers are, so there's no need to go into elaborate metaphors here Ruby has all the typical math operators you would expect:\n```ruby\nAddition\n1 + 1   #=> 2\nSubtraction\n2 - 1   #=> 1\nMultiplication\n2 * 2   #=> 4\nDivision\n10 / 5  #=> 2\nExponent\n2 ** 2  #=> 4\n3 ** 4  #=> 81\nModulus (find the remainder of division)\n8 % 2   #=> 0  (8 / 2 = 4; no remainder)\n10 % 4  #=> 2  (10 / 4 = 2 with a remainder of 2)\n```\nIntegers and floats\nThere are two main types of numbers in Ruby Integers are whole numbers, such as 10 Floats are numbers that contain a decimal point, such as 10 5, 10 0, or 0 25 It's important to keep in mind that when doing arithmetic with two integers in Ruby, the result will always be an integer ruby\n17 / 5    #=> 3, not 3 4\nTo obtain an accurate answer, just replace one of the integers in the expression with a float ruby\n17 / 5 0  #=> 3 4\nConverting number types\nRuby makes it very easy to convert floats to integers and vice versa ```ruby\nTo convert an integer to a float:\n13 to_f   #=> 13",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13344,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "0120ecf14e781b0fd8ba20842a262392",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
    "source_type": "git_repo",
    "title": "Addition",
    "content": "doing arithmetic with two integers in Ruby, the result will always be an integer ruby 17 / 5 #=> 3, not 3 4 To obtain an accurate answer, just replace one of the integers in the expression with a float ruby 17 / 5 0 #=> 3 4 Converting number types Ruby makes it very easy to convert floats to integers and vice versa ```ruby To convert an integer to a float: 13 to_f #=> 130\nTo convert a float to an integer:\n13 0 to_i #=> 13\n13 9 to_i #=> 13\n```\nAs shown in the last example above, when Ruby converts a float to an integer, the decimal places are cut off Ruby doesn't do any rounding in this conversion Some useful number methods\nThere are many useful methods for numbers built into Ruby For example,\n#even ruby\n6 even #=> true\n7 even #=> false\n#odd ruby\n6 odd #=> false\n7 odd #=> true\nStrings\nStrings, strings, wonderful things, use them well and your app will grow wings Or something At first glance, you might think that strings are just a bunch of characters that aren't very useful beyond getting user input and outputting some information to the screen, but like Burt Reynolds passing up the chance to play Han Solo, you'd be wrong Very wrong What were you thinking, Burt Double and single quotation marks\nStrings can be formed with either double \"\" or single'' quotation marks, also known as string literals They are pretty similar, but there are some differences Specifically, string interpolation and the escape characters that we'll discuss soon both only work inside double quotation marks, not single quotation marks Concatenation\nIn true Ruby style, there are plenty of ways to concatenate strings ```ruby\nWith the plus operator:\n\"Welcome \" + \"to \" + \"Odin \"    #=> \"Welcome to Odin \"\nWith the shovel operator:\n\"Welcome \" << \"to \" << \"Odin \"  #=> \"Welcome to Odin \"\nWith the concat method:\n\"Welcome \" concat(\"to \") concat(\"Odin \")  #=> \"Welcome to Odin \"\n```\nClassic Ruby Substrings\nYou can access strings inside strings Stringception It's super easy, too ```ruby\n\"hello\"[0]      #=> \"h\"\n\"hello\"[0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13344,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "defb7b29e08d9e3c7ce51301d5fd3a83",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
    "source_type": "git_repo",
    "title": "Addition",
    "content": "plenty of ways to concatenate strings ```ruby With the plus operator: \"Welcome \" + \"to \" + \"Odin \" #=> \"Welcome to Odin \" With the shovel operator: \"Welcome \" << \"to \" << \"Odin \" #=> \"Welcome to Odin \" With the concat method: \"Welcome \" concat(\"to \") concat(\"Odin \") #=> \"Welcome to Odin \" ``` Classic Ruby Substrings You can access strings inside strings Stringception It's super easy, too ```ruby \"hello\"[0] #=> \"h\" \"hello\"[01]   #=> \"he\"\n\"hello\"[0, 4]   #=> \"hell\"\n\"hello\"[-1]     #=> \"o\"\n```\nIn the above example we can access the individual characters of a string by referencing the index(es) of the character within the string using [] For more information on the topic you can read the #slice method documentation Escape characters\nEscape characters allow you to type in representations of whitespace characters and to include quotation marks inside your string without accidentally ending it As a reminder, escape characters only work inside double quotation marks ```ruby\n\\  #=> Need a backslash in your string \\b  #=> Backspace\n\\r  #=> Carriage return, for those of you that love typewriters\n\\n  #=> Newline You'll likely use this one the most \\s  #=> Space\n\\t  #=> Tab\n\\\"  #=> Double quotation mark\n\\'  #=> Single quotation mark\n```\nThe best thing to do is play around with them in irb or a REPL ```ruby\nirb(main):001:0> puts \"Hello \\n\\nHello\"\nHello\nHello\n=> nil\n```\nInterpolation\nString interpolation allows you to evaluate a string that contains placeholder variables This is a very useful and common technique, so you will likely find yourself using this often Be sure to use double quotes so that string interpolation will work ```ruby\nname = \"Odin\"\nputs \"Hello, #{name}\" #=> \"Hello, Odin\"\nputs 'Hello, #{name}' #=> \"Hello, #{name}\"\n```\nCommon string methods\nThere are many useful string methods that are built into Ruby You need to capitalize a word No problem Reverse a string Easy peasy Extract the binary subatomic algorithm from any regex grep We don't know, but since this is Ruby, let's go with YES",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13344,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "078089710be4149eb187f1ac2b4dd2d4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
    "source_type": "git_repo",
    "title": "Addition",
    "content": "sure to use double quotes so that string interpolation will work ```ruby name = \"Odin\" puts \"Hello, #{name}\" #=> \"Hello, Odin\" puts 'Hello, #{name}' #=> \"Hello, #{name}\" ``` Common string methods There are many useful string methods that are built into Ruby You need to capitalize a word No problem Reverse a string Easy peasy Extract the binary subatomic algorithm from any regex grep We don't know, but since this is Ruby, let's go with YESJust remember, strings have loads of methods provided to you for free, and you can find them all in the Ruby docs for the String class If you're working with strings and need to do something, check the Ruby docs first and see if there's a method that does it for you Below is a quick recap of the more common string methods you might find yourself using:\n#capitalize\nruby\n\"hello\" capitalize #=> \"Hello\"\n#include ```ruby\n\"hello\" include (\"lo\")  #=> true\n\"hello\" include (\"z\")   #=> false\n```\n#upcase\nruby\n\"hello\" upcase  #=> \"HELLO\"\n#downcase\nruby\n\"Hello\" downcase  #=> \"hello\"\n#empty ```ruby\n\"hello\" empty #=> false\n\"\" empty #=> true\n```\n#length\nruby\n\"hello\" length  #=> 5\n#reverse\nruby\n\"hello\" reverse  #=> \"olleh\"\n#split\n```ruby\n\"hello world\" split  #=> [\"hello\", \"world\"]\n\"hello\" split(\"\")    #=> [\"h\", \"e\", \"l\", \"l\", \"o\"]\n```\n#strip\nruby\n\" hello, world   \" strip  #=> \"hello, world\"\nYou'll read more about these methods and others in the assignment The examples below are just to get your creative juices flowing with some of the awesome ways you can modify strings ```ruby\n\"he77o\" sub(\"7\", \"l\")           #=> \"hel7o\"\n\"he77o\" gsub(\"7\", \"l\")          #=> \"hello\"\n\"hello\" insert(-1, \" dude\")     #=> \"hello dude\"\n\"hello world\" delete(\"l\")       #=> \"heo word\"\n\" \" prepend(\"hello, \", \"world\") #=> \"hello, world",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13344,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "8b9973f609254254bd861a362a0bf329",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
    "source_type": "git_repo",
    "title": "Addition",
    "content": "\"o\"] ``` #strip ruby \" hello, world \" strip #=> \"hello, world\" You'll read more about these methods and others in the assignment The examples below are just to get your creative juices flowing with some of the awesome ways you can modify strings ```ruby \"he77o\" sub(\"7\", \"l\") #=> \"hel7o\" \"he77o\" gsub(\"7\", \"l\") #=> \"hello\" \"hello\" insert(-1, \" dude\") #=> \"hello dude\" \"hello world\" delete(\"l\") #=> \"heo word\" \" \" prepend(\"hello, \", \"world\") #=> \"hello, world\"\n```\nThe assignments will go much deeper, so go through them thoroughly and be sure to play around in a REPL as you read Converting other objects to strings\nUsing the to_s method, you can convert pretty much anything to a string Here are some examples:\n```ruby\n5 to_s        #=> \"5\"\nnil to_s      #=> \"\"\n:symbol to_s  #=> \"symbol\"\n```\nSymbols\nSymbols are an interesting twist on the idea of a string The full explanation can be a bit long, but here's the short version:\nStrings can be changed, so every time a string is used, Ruby has to store it in memory even if an existing string with the same value already exists Symbols, on the other hand, are stored in memory only once, making them faster in certain situations One common application where symbols are preferred over strings are the keys in hashes We'll cover this in detail in the hashes lesson later in the course You won't need to use symbols much in the beginning, but it's good to get familiar with what they are and what they look like so that you can recognize them Create a symbol\nTo create a symbol, put a colon at the beginning of some text:\nruby\n:my_symbol\nSymbols vs strings\nTo get a better idea of how symbols are stored in memory, give this a whirl in irb or a REPL The #object_id method returns an integer identifier for an object (And remember: in Ruby, everything is an object )\n```ruby\n\"string\" == \"string\"  #=> true\n\"string\" object_id == \"string\" object_id  #=> false\n:symbol object_id == :symbol object_id    #=> true\n```\nBooleans\nYou will learn about these data types in more detail in the Conditional Logic lesson later in this course",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13344,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "97a54e782ddb2ffe0b1a30e71c72e786",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
    "source_type": "git_repo",
    "title": "Addition",
    "content": "of how symbols are stored in memory, give this a whirl in irb or a REPL The #object_id method returns an integer identifier for an object (And remember: in Ruby, everything is an object ) ```ruby \"string\" == \"string\" #=> true \"string\" object_id == \"string\" object_id #=> false :symbol object_id == :symbol object_id #=> true ``` Booleans You will learn about these data types in more detail in the Conditional Logic lesson later in this courseThe goal of this lesson is for you to get a basic understanding of what Booleans are True and false\nThe Boolean values true and false represent exactly what you think they do: true represents something that is true, and false represents something that is false Nil\nIn Ruby, nil represents \"nothing\" Everything in Ruby has a return value When a piece of code doesn't have anything to return, it will return nil This is pretty abstract, but it will make more sense as you learn and use Ruby more Assignment\nRemember, if you get stuck, ask questions in the #ruby-help channel of our Discord server 1 Read the [Basics chapter of LaunchSchool's *Introduction to Programming With Ruby*](https://launchschool com/books/ruby/read/basics) for a different explanation of Ruby's data types Be sure to also complete the exercises 1 Read [Alex Chaffee’s brief writeup on Objects](https://codelikethis com/lessons/learn-to-code/objects), for a basic understanding of what objects are in programming We will explore this topic much deeper later in the course 1 Now it is time to complete some test-driven exercises to practice what you have learned in this lesson - Follow the [cloning and installation instructions in the main README of our ruby-exercise repo](https://github com/TheOdinProject/ruby-exercises tab=readme-ov-file#cloning-and-installation) to set up the exercises - Then, follow the [usage instructions in the ruby-basics README](https://github com/TheOdinProject/ruby-exercises/tree/main/ruby_basics#usage) to complete the exercises in the `1_data_types` folder - After completing the exercises, check out the solutions branch on GitHub to compare solutions Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13344,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "5a81395687ee2721affe3cc2ff5260ed",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
    "source_type": "git_repo",
    "title": "Addition",
    "content": "learned in this lesson - Follow the [cloning and installation instructions in the main README of our ruby-exercise repo](https://github com/TheOdinProject/ruby-exercises tab=readme-ov-file#cloning-and-installation) to set up the exercises - Then, follow the [usage instructions in the ruby-basics README](https://github com/TheOdinProject/ruby-exercises/tree/main/ruby_basics#usage) to complete the exercises in the `1_data_types` folder - After completing the exercises, check out the solutions branch on GitHub to compare solutions Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the basic arithmetic operators you can use on numbers What's the difference between an integer and a float What method would you use to convert a float to an integer What method would you use to convert an integer to a float What is a string What are the differences between single and double quotes What is string interpolation How do you concatenate strings What method would you use to change all the characters in your string to upper case What method would you use to split up strings into arrays What are escape characters How do you access a specific character or substring How do you convert other data types into strings What is a symbol How do you create a symbol What's the difference between a symbol and a string What does true represent What does false represent What does nil represent Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The Bastards Book of Ruby's \"Numbers\" chapter\nThe Bastards Book of Ruby's \"Strings\" chapter\nRuby Monstas \"Numbers\" section\nRuby Monstas \"Strings\" section\nRuby Monstas \"Symbols\" section\nRuby Monstas \"True, False, and Nil\" section",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13344,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_data_types.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "26fcc8cf866141bf71881d862be5c56e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
    "source_type": "git_repo",
    "title": "=> Hot diggity, 1 is less than 2!",
    "content": "Introduction\nThis lesson is all about controlling the flow of your code When you have some code that you only want to execute under specific conditions, you will need a way for the computer to check whether those conditions have been met Conditional logic can be found everywhere in everyday life Ever had to tidy your room before being allowed to play video games That's your mother setting up a nice conditional statement that might look like this in a computer program ruby\nif room_tidy == true\n\"I can play video games\"\nend\nThere must be a motherboard joke in there somewhere Answers on a postcard Any conditional statement will always have an expression that evaluates to true or false Based on this answer, the computer will decide whether or not to execute the code that follows If it's true, then the code will be processed; if it's false, the code will be skipped, and you can provide some other code that will be run instead There can even be several conditional statements on one line, but keep in mind that too many can make code look cluttered You'll write a lot of conditional statements on your road to programmer stardom Although they are fundamentally simple, they are a big source of bugs in your code when something isn't working as expected Make sure you understand the logic behind the expression being evaluated so you can step through it if you need to Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe and list falsy values Explain how to use if, elsif, and else Explain the difference between if and unless Describe what ||, &&, and do Explain what short circuit evaluation is Describe what the ternary operator is and how to use it Explain what a case statement is and how it works Truthy and falsy in Ruby\nYou already know that conditional statements check expressions for a true or false value, so it follows that you need to understand what Ruby considers to be true or false In typical Ruby fashion, it's very simple The only false values in Ruby are the values nil and false themselves That's it Everything else is considered true Even the string \"false\" is true in conditional expressions If you have experience with other programming languages, you might be familiar with the number 0 or an empty string (\"\") being equivalent to false This isn't the case with Ruby, so be careful when writing those expressions Otherwise, you might end up with more bugs on your screen than if you were using light mode at midnight",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14533,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "15baa37d8931a57c85de3bdbd7dbacbf",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
    "source_type": "git_repo",
    "title": "=> Hot diggity, 1 is less than 2!",
    "content": "false themselves That's it Everything else is considered true Even the string \"false\" is true in conditional expressions If you have experience with other programming languages, you might be familiar with the number 0 or an empty string (\"\") being equivalent to false This isn't the case with Ruby, so be careful when writing those expressions Otherwise, you might end up with more bugs on your screen than if you were using light mode at midnightBasic conditional statement\nThe simplest way to control the flow of your code using conditionals is with the if statement The general syntax of an if statement is shown here:\n```ruby\nif statement_to_be_evaluated == true\n# do something awesome end\nif 1 < 2\nputs \"Hot diggity, 1 is less than 2 \"\nend\n=> Hot diggity, 1 is less than 2 ```\nIf there is only one line of code to be evaluated inside the block, then you can rewrite the code to be more succinct and take up only one line:\nruby\nputs \"Hot diggity damn, 1 is less than 2\" if 1 < 2\nYou don't even need the end statement Nice and concise The statement to be evaluated can be anything that returns true or false It could be a mathematical expression, a variable value, or a call to a method Only if the expression evaluates to true does the code inside the block run Adding else and elsif\nWe often want to check a condition and run some code if it's true but then run some other code if it's false This is done with an if else statement ruby\nif attack_by_land == true\nputs \"release the goat\"\nelse\nputs \"release the shark\"\nend\nOh yeah Protected on land and sea But what about if we're attacked by air We need yet another conditional check Enter the if elsif else statement ruby\nif attack_by_land == true\nputs \"release the goat\"\nelsif attack_by_sea == true\nputs \"release the shark\"\nelse\nputs \"release Kevin the octopus\"\nend\nAin't nobody pillaging our land You can have as many elsif expressions as you want The else clause is optional, but you usually want to provide some default value in case none of the previous expressions evaluate to true Boolean logic\nTo determine whether an expression evaluates to true or false, you'll need a comparison operator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14533,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "999ef993ce3713acb785f8612f8df1a4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
    "source_type": "git_repo",
    "title": "=> Hot diggity, 1 is less than 2!",
    "content": "true puts \"release the goat\" elsif attack_by_sea == true puts \"release the shark\" else puts \"release Kevin the octopus\" end Ain't nobody pillaging our land You can have as many elsif expressions as you want The else clause is optional, but you usually want to provide some default value in case none of the previous expressions evaluate to true Boolean logic To determine whether an expression evaluates to true or false, you'll need a comparison operatorThere are several provided by Ruby:\n== (equals) returns true if the values compared are equal ruby\n5 == 5 #=> true\n5 == 6 #=> false = (not equal) returns true if the values compared are not equal ruby\n5 = 7 #=> true\n5 = 5 #=> false\n> (greater than) returns true if the value on the left of the operator is larger than the value on the right ruby\n7 > 5 #=> true\n5 > 7 #=> false\n< (less than) returns true if the value on the left of the operator is smaller than the value on the right ruby\n5 < 7 #=> true\n7 < 5 #=> false\n>= (greater than or equal to) returns true if the value on the left of the operator is larger than or equal to the value on the right ruby\n7 >= 7 #=> true\n7 >= 5 #=> true\n<= (less than or equal to) returns true if the value on the left of the operator is smaller than or equal to the value on the right ruby\n5 <= 5 #=> true\n5 <= 7 #=> true\n#eql checks both the value type and the actual value it holds ruby\n5 eql (5 0) #=> false; although they are the same value, one is an integer and the other is a float\n5 eql (5)   #=> true\n#equal checks whether both values are the exact same object in memory This can be slightly confusing because of the way computers store some values for efficiency Two variables pointing to the same number will usually return true ruby\na = 5\nb = 5\na equal (b) #=> true\nThis expression is true because of the way computers store integers in memory Although two different variables are holding the number 5, they point to the same object in memory However, consider the next code example:\nruby\na = \"hello\"\nb = \"hello\"\na equal",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14533,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "b60cb2547de41f57c90003ec43efdd2e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
    "source_type": "git_repo",
    "title": "=> Hot diggity, 1 is less than 2!",
    "content": "the way computers store some values for efficiency Two variables pointing to the same number will usually return true ruby a = 5 b = 5 a equal (b) #=> true This expression is true because of the way computers store integers in memory Although two different variables are holding the number 5, they point to the same object in memory However, consider the next code example: ruby a = \"hello\" b = \"hello\" a equal(b) #=> false\nThis happens because computers can't store strings in the same efficient way they store numbers Although the values of the variables are the same, the computer has created two separate string objects in memory In addition to the above operators, Ruby has a special operator that is affectionately referred to as the spaceship operator Unlike the other comparison operators, which all return true or false, the spaceship operator returns one of three numerical values <=> (spaceship operator) returns the following:\n-1 if the value on the left is less than the value on the right;\n0 if the value on the left is equal to the value on the right; and\n1 if the value on the left is greater than the value on the right ruby\n5 <=> 10    #=> -1\n10 <=> 10   #=> 0\n10 <=> 5    #=> 1\nThe spaceship operator is most commonly used in sorting functions, which we'll cover more later All of the above operators also work on data types other than numbers, such as strings Why not play around with this in a REPL Logical operators\nSometimes you'll want to write an expression that contains more than one condition In Ruby, this is accomplished with logical operators, which are && (and), || (or) and (not) There are some differences between the word versions and their symbolic equivalents, particularly in the way they evaluate code We recommend you watch this video that explains the differences between symbolic logical operators and their word versions The && operator returns true if both the left and right expressions return true ```ruby\nif 1 < 2 && 5 < 6\nputs \"Party at Kevin's \"\nend\nThis can also be written as\nif 1 < 2 and 5 < 6\nputs \"Party at Kevin's \"\nend\n```\nOne thing to keep in mind with the && and || operators is the order of logic The expressions are always evaluated from left to right Using the && operator, both expressions must return true",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14533,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "f89e62d47a09871c2fb7ffcfe1bbf7be",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
    "source_type": "git_repo",
    "title": "=> Hot diggity, 1 is less than 2!",
    "content": "and right expressions return true ```ruby if 1 < 2 && 5 < 6 puts \"Party at Kevin's \" end This can also be written as if 1 < 2 and 5 < 6 puts \"Party at Kevin's \" end ``` One thing to keep in mind with the && and || operators is the order of logic The expressions are always evaluated from left to right Using the && operator, both expressions must return trueIf the first expression encountered returns false, then the second expression is never checked To the Ruby interpreter, it's pointless to evaluate the second half as the overall expression can never return true With the || operator, if the first expression evaluates to true, then the second expression is never checked because the complete expression is already true, and the code in the block is run This is known as short circuit evaluation ```ruby\nif 10 < 2 || 5 < 6 #=> although the left expression is false, there is a party at Kevin's because the right expression returns true\nputs \"Party at Kevin's \"\nend\nThis can also be written as\nif 10 < 2 or 5 < 6\nputs \"Party at Kevin's \"\nend\n```\nThe operator reverses the logic of the expression Therefore, if the expression itself returns false, using the operator makes the expression true, and the code inside the block will be executed ```ruby\nif false     #=> true\nif (10 < 5)  #=> true\n```\nCase statements\nCase statements are a neat way of writing several conditional expressions that would normally result in a messy if elsif statement You can even assign the return value from a case statement to a variable for use later Case statements process each condition in turn, and if the condition returns false, it will move onto the next one until a match is found An else clause can be provided to serve as a default if no match is found ```ruby\ngrade = 'F'\ndid_i_pass = case grade #=> create a variable did_i_pass and assign the result of a call to case with the variable grade passed in\nwhen 'A' then \"Hell yeah \"\nwhen 'D' then \"Don't tell your mother \"\nelse \"'YOU SHALL NOT PASS ' -Gandalf\"\nend\n```\nAs soon as a match is found, the value of that match is returned, and the case statement stops execution",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14533,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "b7ae1e04f061a0d87e766a3a99ba82d6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
    "source_type": "git_repo",
    "title": "=> Hot diggity, 1 is less than 2!",
    "content": "if no match is found ```ruby grade = 'F' did_i_pass = case grade #=> create a variable did_i_pass and assign the result of a call to case with the variable grade passed in when 'A' then \"Hell yeah \" when 'D' then \"Don't tell your mother \" else \"'YOU SHALL NOT PASS ' -Gandalf\" end ``` As soon as a match is found, the value of that match is returned, and the case statement stops executionCan you tell what the value of the did_i_pass variable is going to be after the case statement If you need to do some more complex code manipulation, you can remove the then keyword and instead place the code to be executed on the next line ```ruby\ngrade = 'F'\ncase grade\nwhen 'A'\nputs \"You're a genius\"\nfuture_bank_account_balance = 5_000_000\nwhen 'D'\nputs \"Better luck next time\"\ncan_i_retire_soon = false\nelse\nputs \"'YOU SHALL NOT PASS ' -Gandalf\"\nfml = true\nend\n```\nUnless statements\nAn unless statement works in the opposite way as an if statement: it only processes the code in the block if the expression evaluates to false There isn't much more to it ruby\nage = 19\nunless age < 18\nputs \"Get a job \"\nend\nJust like with if statements, you can write an unless statement on one line, and you can also add an else clause ```ruby\nage = 19\nputs \"Welcome to a life of debt \" unless age < 18\nunless age < 18\nputs \"Down with that sort of thing \"\nelse\nputs \"Careful now \"\nend\n```\nYou should use an unless statement when you want to not do something if a condition is true, because it can make your code more readable than using if true Ternary operator\nThe ternary operator is a one-line if else statement that can make your code much more concise Its syntax is condition <execute if true> : <execute if false> You can assign the return value of the expression to a variable ruby\nage = 19\nresponse = age < 18 \"You still have your entire life ahead of you \" : \"You're all grown up \"\nputs response #=> \"You're all grown up \"\nHere, because the expression evaluated to false, the code after the : was assigned to the variable response",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14533,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "b4af45a50f7e4e3022d17879a36d535a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
    "source_type": "git_repo",
    "title": "=> Hot diggity, 1 is less than 2!",
    "content": "more concise Its syntax is condition <execute if true> : <execute if false> You can assign the return value of the expression to a variable ruby age = 19 response = age < 18 \"You still have your entire life ahead of you \" : \"You're all grown up \" puts response #=> \"You're all grown up \" Here, because the expression evaluated to false, the code after the : was assigned to the variable responseWriting this as an if else statement would be much more verbose:\n```ruby\nage = 19\nif age < 18\nresponse = \"You still have your entire life ahead of you \"\nelse\nresponse = \"You're all grown up \"\nend\nputs response #=> \"You're all grown up \"\n```\nHowever, if your conditional statements are complicated, then using an if else statement can help to make your code more readable Remember, above all else, your code needs to be readable and understandable by other people, especially in the development stage You can always optimize your code for efficiency once it's finished and you're moving to a production environment where speed matters Assignment\n1 For more depth, read the [Flow Control](https://launchschool com/books/ruby/read/flow_control#conditionals) chapter from LaunchSchool's *Introduction to Programming With Ruby* 1 For an overview of flow control, read through this [Ruby Explained: Conditionals and Flow Control](https://www eriktrautman com/posts/ruby-explained-conditionals-and-flow-control) article Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a Boolean What are \"truthy\" values Are the following considered true or false: nil, 0, \"0\", \"\", 1, [], {} and -1 When do you use elsif When do you use unless What do || and && and do What is short circuit evaluation What is returned by puts(\"woah\") || true What is the ternary operator When should you use a case statement Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental See this Stack Overflow post for more on the spaceship operator For more depth on flow control, read Zetcode's Flow Control section",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14533,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\conditional_logic.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "fcd741051e341fee9bacacb4c6355ed7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "Introduction\nIn previous lessons, you learned about loops as well as arrays and hashes You will soon discover that you'll have to do so much iterating (looping or repeating something several times) over collections as a developer that it will make you dizzy Remember the DRY (Don't Repeat Yourself) approach to programming that we talked about in the lesson on Methods Well, Ruby keeps iterating DRY through something called enumerables Enumerables are a set of convenient built-in methods in Ruby that are included as part of both arrays and hashes There are some iteration patterns that you'll find yourself doing again and again, such as transforming, searching for, and selecting subsets of elements in your collections Enumerables were designed to make implementing these iteration patterns (and therefore your life as a developer) much, much easier We will run through the enumerable methods that you will most commonly use and see out in the wild This is certainly not an exhaustive list, so be sure to have a look at the Ruby docs to see what else the Enumerable module offers For all of the examples throughout this lesson, feel free to follow along in irb or any appropriate online REPL environment to get a better feel for how they work Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain how the #each and #each_with_index methods work and how they differ Explain how the #map method works Explain how the #select method works Explain how the #reduce method works Describe the differences between using do end and { } Explain what a bang method is and why it is or is not considered best practice Life before enumerables\nLet's say that you wanted to make an invite list for your birthday using your friends array but that you don't want to invite your friend Brian because he's a bit of a nutcase at parties and always drinks way too much With the loops you've learned so far, you might do something like this:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\ninvited_list = []\nfor friend in friends do\nif friend = 'Brian'\ninvited_list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "770e7528240974edc5b889a221ad70d2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "Let's say that you wanted to make an invite list for your birthday using your friends array but that you don't want to invite your friend Brian because he's a bit of a nutcase at parties and always drinks way too much With the loops you've learned so far, you might do something like this: ```ruby friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun'] invited_list = [] for friend in friends do if friend = 'Brian' invited_listpush(friend)\nend\nend\ninvited_list #=> [\"Sharon\", \"Leo\", \"Leila\", \"Arun\"]\n```\nWarning: The do is optional in a for loop in Ruby and may cause issues if used in IRB\nThat's not too hard, but imagine having to do that for every party you host from now until the end of time It might be easier to just stop hanging out with Brian Using the #select enumerable method (which we'll get into much more detail about later), you could change the above code to this:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends select { |friend| friend = 'Brian' }\n#=> [\"Sharon\", \"Leo\", \"Leila\", \"Arun\"]\n```\nor even better and more to the point:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends reject { |friend| friend == 'Brian' }\n#=> [\"Sharon\", \"Leo\", \"Leila\", \"Arun\"]\n```\nYou just cut down what was previously an 8 line program down to 2 lines Amazing Imagine all the time you'll save sorting your invite lists now The each method\n#each is the granddaddy of the enumerable methods It's a bit like Chuck Norris: it can do anything As you'll see throughout this lesson, though, just because you can use #each to do just about anything doesn't mean it's always the best or most efficient tool for the job Calling #each on an array will iterate through that array and will yield each element to a code block, where a task can be performed:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "fed9e28afd79deb412b65fa5e94d363c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "methods It's a bit like Chuck Norris: it can do anything As you'll see throughout this lesson, though, just because you can use #each to do just about anything doesn't mean it's always the best or most efficient tool for the job Calling #each on an array will iterate through that array and will yield each element to a code block, where a task can be performed: ```ruby friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun'] friendseach { |friend| puts \"Hello, \" + friend }\n=> Hello, Sharon\n=> Hello, Leo\n=> Hello, Leila\n=> Hello, Brian\n=> Hello, Arun\n=> [\"Sharon\", \"Leo\", \"Leila\", \"Brian\" \"Arun\"]\n```\nLet's break down this syntax:\nfriends is the array that contains strings of your friends' names each is the enumerable method you are calling on your friends array { |friend| puts \"Hello, \" + friend } is a block, and the code inside this block is run for each element in your array Because we have 5 friends in our array, this block will be run 5 times, once with each of the 5 elements Within the block, you'll notice that we have |friend|, which is known as a block variable This is the element from your array that the block is currently iterating over You can use any variable name that you find helpful here; in this example, we could have used |x|, but |friend| is more descriptive of what each element is In the first iteration, the value of |friend| will be 'Sharon'; in the second iteration, its value will be 'Leo'; in the third, 'Leila'; and so on until it reaches the end of the array What if the block you want to pass to a method requires more logic than can fit on one line It starts to become less readable and looks unwieldy For multi-line blocks, the commonly accepted best practice is to change up the syntax to use do end instead of { }:\n```ruby\nmy_array = [1, 2]\nmy_array each do |num|\nnum *= 2\nputs \"The new number is #{num} \"\nend\n=> The new number is 2 => The new number is 4 => [1, 2]\n```\n#each also works for hashes with a bit of added functionality",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "37baf7325cbc4f8c844c3e728f13a24f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "to become less readable and looks unwieldy For multi-line blocks, the commonly accepted best practice is to change up the syntax to use do end instead of { }: ```ruby my_array = [1, 2] my_array each do |num| num *= 2 puts \"The new number is #{num} \" end => The new number is 2 => The new number is 4 => [1, 2] ``` #each also works for hashes with a bit of added functionalityBy default, each iteration will yield both the key and value individually or together (as an array) to the block depending on how you define your block variable:\n```ruby\nmy_hash = { \"one\" => 1, \"two\" => 2 }\nmy_hash each { |key, value| puts \"#{key} is #{value}\" }\n=> one is 1\n=> two is 2\n=> { \"one\" => 1, \"two\" => 2}\n```\n```ruby\nmy_hash each { |pair| puts \"the pair is #{pair}\" }\n=> the pair is [\"one\", 1]\n=> the pair is [\"two\", 2]\n=> { \"one\" => 1, \"two\" => 2}\n```\nYou may have noticed in the above code examples that #each returns the original array or hash regardless of what happens inside the code block This is an important thing to keep in mind when debugging your code as it can lead to some confusion Take this code as an example:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends each { |friend| friend upcase }\n=> ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\n```\nYou might expect this to return ['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN'], but you'd be wrong---dead wrong It actually returns the original array you called #each on You're still not invited, Brian The each_with_index method\nThis method is nearly the same as #each, but it provides some additional functionality by yielding two block variables instead of one as it iterates through an array The first variable's value is the element itself, while the second variable's value is the index of that element within the array This allows you to do things that are a bit more complex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "41bc7da1492faef90f24fd7629f7eeb9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "original array you called #each on You're still not invited, Brian The each_with_index method This method is nearly the same as #each, but it provides some additional functionality by yielding two block variables instead of one as it iterates through an array The first variable's value is the element itself, while the second variable's value is the index of that element within the array This allows you to do things that are a bit more complexFor example, if we only want to print every other word from an array of strings, we can achieve this like so:\n```ruby\nfruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\nfruits each_with_index { |fruit, index| puts fruit if index even }\n=> apple\n=> strawberry\n=> [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\n```\nJust like with the #each method, #each_with_index returns the original array it's called on The map method\nRemember when we tried to use #each to write all of your friends' names in all caps For reference, this is the code that we tried:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends each { |friend| friend upcase }\n=> ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\n```\nAs we can see, #each returns the original array, but that's not what we want WE WANT CAPS Let's modify our #each code to get it to work:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nshouting_at_friends = []\nfriends each { |friend| shouting_at_friends push(friend upcase) }\n=> ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nshouting_at_friends #=> ['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN']\n```\nIt works It took quite a bit of extra work, though We had to introduce another array that could store the transformed elements This code is starting to look more clunky and suspiciously like the for loop example in the first section that we're trying to get away from Luckily, we have the #map enumerable method to save us from our misery",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "91a7ff358cf4d907ccf329f6e1e1da48",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "=> ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun'] shouting_at_friends #=> ['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN'] ``` It works It took quite a bit of extra work, though We had to introduce another array that could store the transformed elements This code is starting to look more clunky and suspiciously like the for loop example in the first section that we're trying to get away from Luckily, we have the #map enumerable method to save us from our miseryThe #map method (also called #collect) transforms each element from an array according to whatever block you pass to it and returns the transformed elements in a new array #map may seem confusing at first, but it is extremely useful We'll go through several examples and use cases, which should help you understand how and when you can use this enumerable power for good First, let's use #map to improve on our code that transforms all of our friends' names to uppercase:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends map { |friend| friend upcase }\n=> ['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN']\n```\nWe're back down to two lines of code, baby Isn't it beautiful Maybe now you're getting hungry from all this intense learning and you want to change your McDonald's order from medium to extra large With #map and #gsub, that's easy peasy:\n```ruby\nmy_order = ['medium Big Mac', 'medium fries', 'medium milkshake']\nmy_order map { |item| item gsub('medium', 'extra large') }\n=> [\"extra large Big Mac\", \"extra large fries\", \"extra large milkshake\"]\n```\nMaybe you've decided that it's time for you to get your finances in order, and you want to deduct your rent payments from your salary over the past few months to make sure that you haven't been spending all of your remaining money on extra large Big Mac meals:\n```ruby\nsalaries = [1200, 1500, 1100, 1800]\nsalaries",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "b0f2cbc8fc103267f805867cfd09bf65",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "{ |item| item gsub('medium', 'extra large') } => [\"extra large Big Mac\", \"extra large fries\", \"extra large milkshake\"] ``` Maybe you've decided that it's time for you to get your finances in order, and you want to deduct your rent payments from your salary over the past few months to make sure that you haven't been spending all of your remaining money on extra large Big Mac meals: ```ruby salaries = [1200, 1500, 1100, 1800] salariesmap { |salary| salary - 700 }\n=> [500, 800, 400, 1100]\n```\nWhenever you want to return a new array with the results of running your block of code, #map is the method for you The select method\nYou've already seen the #select method in action at the beginning of this lesson in our quest to make Brian an outcast The #select method (also called #filter) passes every item in an array to a block and returns a new array with only the items for which the condition you set in the block evaluated to true First, let's explore how we would accomplish the same thing using #each:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\ninvited_list = []\nfriends each do |friend|\nif friend = 'Brian'\ninvited_list push(friend)\nend\nend\ninvited_list\n#=> [\"Sharon\", \"Leo\", \"Leila\", \"Arun\"]\n```\nUsing our shiny new #select method, this code can be simplified down to two lines:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends select { |friend| friend = 'Brian' }\n#=> [\"Sharon\", \"Leo\", \"Leila\", \"Arun\"]\n```\nNow that we've cut out Brian, we can send out the invites Let's say that the friends who you invited to your party have gotten back to you, and their responses are all recorded in a hash Let's use #select to see who's coming",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "4f058b24a48560397c8299e75f188f15",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "method, this code can be simplified down to two lines: ```ruby friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun'] friends select { |friend| friend = 'Brian' } #=> [\"Sharon\", \"Leo\", \"Leila\", \"Arun\"] ``` Now that we've cut out Brian, we can send out the invites Let's say that the friends who you invited to your party have gotten back to you, and their responses are all recorded in a hash Let's use #select to see who's comingRecall that when you use an enumerable method with a hash, you need to set up block variables for both the key and the value:\n```ruby\nresponses = { 'Sharon' => 'yes', 'Leo' => 'no', 'Leila' => 'no', 'Arun' => 'yes' }\nresponses select { |person, response| response == 'yes'}\n=> {\"Sharon\"=>\"yes\", \"Arun\"=>\"yes\"}\n```\nLooks like only Sharon and Arun can go You're going to need more people for a good party Sounds like it's time for you to reluctantly call Brian, who you know will bring a batch of his awful home-brewed IPA Maybe his last batch has gotten better The reduce method\nThe #reduce method (also called #inject) is possibly the most difficult-to-grasp enumerable for new coders The general idea is that it takes an array or hash and reduces it down to a single object You should use #reduce when you want to get an output of a single value A classic example of when #reduce is useful is obtaining the sum of an array of numbers First, let's explore how we would achieve this using #each:\n```ruby\nmy_numbers = [5, 6, 7, 8]\nsum = 0\nmy_numbers each { |number| sum += number }\nsum\n=> 26\n```\nThis isn't too bad in terms of number of lines of code, but we had to introduce a temporary local variable (sum) outside of the enumerable It would be much nicer if we could do all of this within the enumerable:\n```ruby\nmy_numbers = [5, 6, 7, 8]\nmy_numbers reduce { |sum, number| sum + number }\n=> 26\n```\nWhoa What",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "16c38707c859c94974cb477908cc7f0b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "= 0 my_numbers each { |number| sum += number } sum => 26 ``` This isn't too bad in terms of number of lines of code, but we had to introduce a temporary local variable (sum) outside of the enumerable It would be much nicer if we could do all of this within the enumerable: ```ruby my_numbers = [5, 6, 7, 8] my_numbers reduce { |sum, number| sum + number } => 26 ``` Whoa WhatThere's a lot happening here, so let's walk through what it's doing step by step The first block variable in the #reduce enumerable (sum in this example) is known as the accumulator The result of each iteration is stored in the accumulator and then passed to the next iteration The accumulator is also the value that the #reduce method returns at the end of its work By default, the initial value of the accumulator is the first element in the collection, so for each step of the iteration, we would have the following:\nIteration 0: sum = 5 + 6 = 11\nIteration 1: sum = 11 + 7 = 18\nIteration 2: sum = 18 + 8 = 26\nWe can also set a different initial value for the accumulator by directly passing in a value to the #reduce method ```ruby\nmy_numbers = [5, 6, 7, 8]\nmy_numbers reduce(1000) { |sum, number| sum + number }\n=> 1026\n```\nNow let's look at a more elaborate example that shows just how powerful this method can be This one is much more complicated, so don't be discouraged if you don't fully understand it at this point Just know that #reduce can save you many lines of code in certain scenarios Now that you know who's coming to your party, you need to decide where to go You don't actually like making decisions very much, so you put it to a vote among your friends The options are St Mark's Bistro, a classy place suited for a sophisticated person such as yourself The other option is Bob's Dirty Burger Shack, which you know is Brian's favorite place Since he's coming to the party now, it's best to include it as an option to avoid any arguments Your friends' votes are collected in the votes array ```ruby\nvotes = [\"Bob's Dirty Burger Shack\", \"St",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "63ee9b01ffc8af6b2c82b4b2a7d59b0e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "put it to a vote among your friends The options are St Mark's Bistro, a classy place suited for a sophisticated person such as yourself The other option is Bob's Dirty Burger Shack, which you know is Brian's favorite place Since he's coming to the party now, it's best to include it as an option to avoid any arguments Your friends' votes are collected in the votes array ```ruby votes = [\"Bob's Dirty Burger Shack\", \"StMark's Bistro\", \"Bob's Dirty Burger Shack\"]\nvotes reduce(Hash new(0)) do |result, vote|\nresult[vote] += 1\nresult\nend\n=> {\"Bob's Dirty Burger Shack\"=>2, \"St Mark's Bistro\"=>1}\n```\nAlright, so what happened here Other than Brian ruining your party Again First, we passed in a much more interesting initial value for our accumulator this time When we pass in an argument to Hash new, that becomes the default value when accessing keys that do not exist in the hash For example, we could say the following:\nruby\nhundreds = Hash new(100)\nhundreds[\"first\"]         #=> 100\nhundreds[\"mine\"]          #=> 100\nhundreds[\"yours\"]         #=> 100\nOnce you set the value for a key equal to something else, the default value is overwritten:\nruby\nhundreds = Hash new(100)\nhundreds[\"new\"]           #=> 100\nhundreds[\"new\"] = 99\nhundreds[\"new\"]           #=> 99\nNow that we know that this new hash with a default value of 0 is our accumulator (which is called result in the code block), let's see what happens in each iteration:\nIteration 0:\nresult = {}\nRemember, this hash already has default values of 0, so result[\"Bob's Dirty Burger Shack\"] == 0 and result[\"St Mark's Bistro\"] == 0\nIteration 1:\nThe method runs result[\"Bob's Dirty Burger Shack\"] += 1\nresult = {\"Bob's Dirty Burger Shack\" => 1}\nIteration 2:\nThe method runs result[\"St Mark's Bistro\"] += 1\nresult = {\"Bob's Dirty Burger Shack\" => 1, \"St",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "a5e3144ea3f1b6cb92b5262b952d28dc",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "in the code block), let's see what happens in each iteration: Iteration 0: result = {} Remember, this hash already has default values of 0, so result[\"Bob's Dirty Burger Shack\"] == 0 and result[\"St Mark's Bistro\"] == 0 Iteration 1: The method runs result[\"Bob's Dirty Burger Shack\"] += 1 result = {\"Bob's Dirty Burger Shack\" => 1} Iteration 2: The method runs result[\"St Mark's Bistro\"] += 1 result = {\"Bob's Dirty Burger Shack\" => 1, \"StMark's Bistro\" => 1}\nIteration 3:\nThe method runs result[\"Bob's Dirty Burger Shack\"] += 1\nresult = {\"Bob's Dirty Burger Shack\" => 2, \"St Mark's Bistro\" => 1}\nNote that this example returns a hash with several key => value pairs So even though the result is more complicated, #reduce still just returns one object, a hash Bang methods\nEarlier, we mentioned that enumerables like #map and #select return new arrays but don't modify the arrays that they were called on This is by design since we won't often want to modify the original array or hash and we don't want to accidentally lose that information For example, if enumerables did mutate the original array, then using #select to filter out Brian from our invitation list would permanently remove him from our friends list Whoa That's a bit drastic Brian may be a nutcase at parties, but he's still our friend To see this principle in action, let's go back to an earlier example where we wrote each of our friends' names in all caps:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends map { |friend| friend upcase }\n=> ['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN']\nfriends\n=> ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\n```\nYou can see that when we call our original friends array again, it remains unchanged If you wanted to change your friends array instead, you could use the bang method #map :\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\nfriends map { |friend| friend",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "c1c634b55e117c8fae9f90c6c720471d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "all caps: ```ruby friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun'] friends map { |friend| friend upcase } => ['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN'] friends => ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun'] ``` You can see that when we call our original friends array again, it remains unchanged If you wanted to change your friends array instead, you could use the bang method #map : ```ruby friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun'] friends map { |friend| friendupcase }\n=> ['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN']\nfriends\n=> ['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN']\n```\nNow when we call our original friends array again, it returns the changed values from the #map method Instead of returning a new array, #map modified our original array As you'll recall from the Methods lesson, bang methods can be easily identified by their exclamation marks ( ) at the end of their name All bang methods are destructive and modify the object they are called on Many of the enumerable methods that return new versions of the array or hash they were called on have a bang method version available, such as #map and #select It's best practice to avoid using these methods, however, as you or a future developer working on your code may need the original version Remember that violent psychopath who you should expect will end up maintaining your code Keep that in mind when making the decision to use bang methods Return values of enumerables\nSo if it's not a good idea to use bang methods but we need to reuse the result of an enumerable method throughout our program, what can we do instead One option is to put the result of an enumerable method into a local variable:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\ninvited_friends = friends select { |friend| friend",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "9074399bc6a88523c90d5577643d3c3b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "Keep that in mind when making the decision to use bang methods Return values of enumerables So if it's not a good idea to use bang methods but we need to reuse the result of an enumerable method throughout our program, what can we do instead One option is to put the result of an enumerable method into a local variable: ```ruby friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun'] invited_friends = friends select { |friend| friend= 'Brian' }\nfriends\n=> ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\ninvited_friends\n=> [\"Sharon\", \"Leo\", \"Leila\", \"Arun\"]\n```\nAn even better option would be to wrap your enumerable method in a method definition:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\ndef invited_friends(friends)\nfriends select { |friend| friend = 'Brian' }\nend\nfriends\n=> ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\ninvited_friends(friends)\n#=> [\"Sharon\", \"Leo\", \"Leila\", \"Arun\"]\n```\nAssignment\n1 Read through the Ruby Explained article on [Map, Select, and Other Enumerable Methods](https://www eriktrautman com/posts/ruby-explained-map-select-and-other-enumerable-methods) 1 Follow along with this [How to Use The Ruby Map Method](https://www rubyguides com/2018/10/ruby-map-method/) tutorial from Ruby Guides 1 Follow along with this [Reducing Enumerable](https://medium com/@baweaver/reducing-enumerable-part-one-the-journey-begins-ddc1d4108490) article by Brandon Weaver 1 Complete the basic enumerable exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises) that you previously cloned Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does the #each method do What does it return What does the #each_with_index method do What does the #map method do What does the #select method do What does the #reduce method do When should you use do",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "b901c9549280121b5fc65b5aa09e18ca",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> Hello, Sharon",
    "content": "an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does the #each method do What does it return What does the #each_with_index method do What does the #map method do What does the #select method do What does the #reduce method do When should you use doend around a code block versus { } Why should you avoid using the bang methods of enumerables Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The Bastards Book of Ruby has a good section on Enumerables This tutorial on codementor is another good discussion of the versatility of enumerable methods There are many more enumerable methods than are covered in this lesson (e g , #reject, #drop, #uniq) For a full listing, you can check out the Ruby Docs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21901,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\basic_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "2604be37bfcdd0f5c386ccc58b72bd88",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\enumerable_exercises.md",
    "source_type": "git_repo",
    "title": "=> 1",
    "content": "Enumerable exercises\n1 Write a program that prints each item in a array to the console Here are some sample arrays to test your code:\n```ruby\n[1, 2, 3, 4, 5]\n=> 1\n=> 2\n=> 3\n=> 4\n=> 5\n```\n```ruby\n['oh', 'no', 'pls', 'stahp', 'undo']\n=> 'oh'\n=> 'no'\n=> 'pls'\n=> 'stahp'\n=> 'undo'\n```\n2 Write a program that multiplies each number in a array by 10 and returns a new array with the larger numbers Here are some sample arrays to test your code:\n[1, 2, 3, 4]\n#=> [10, 20, 30, 40]\n[10, 20, 30, 40, 50]\n#=> [100, 200, 300, 400, 500]\n3 Write a program that selects all the numbers that are less than 10 and returns them in a new array Here are some sample arrays to test your code:\n[10, 2, 3, 4, 78, 8, 67, 25]\n#=> [2, 3, 4, 8]\n[1, 22, 3, 7, 50, 89, 9]\n#=> [1, 3, 7, 9]\n4 Write a program that returns the sum of all the numbers in an array Here are some sample arrays to test your code:\n[10, 20, 30, 40]\n#=> 100\n[1, 2, 3, 7, 10]\n#=> 20\n5 Write a program that returns true if a array includes 15 Otherwise, it should return false Here are some sample arrays to test your code:\n[10, 15, 30, 40]\n#=> true\n[1, 2, 3, 14, 16]\n#=> false\n6 Write a program that returns true if all the elements in an array are greater than 10 Otherwise, it should return false",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1887,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\enumerable_exercises.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "49d51c547de9d44af6aab5fc5775dfab",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\enumerable_exercises.md",
    "source_type": "git_repo",
    "title": "=> 1",
    "content": "code: [10, 20, 30, 40] #=> 100 [1, 2, 3, 7, 10] #=> 20 5 Write a program that returns true if a array includes 15 Otherwise, it should return false Here are some sample arrays to test your code: [10, 15, 30, 40] #=> true [1, 2, 3, 14, 16] #=> false 6 Write a program that returns true if all the elements in an array are greater than 10 Otherwise, it should return falseHere are some sample arrays to test your code:\n[10,20,30,40]\n#=> true\n[1,2,3,4,5]\n#=> false\n[1,10,2,20,3,30]\n#=> false\n7 Write a program that returns true if any numbers in an array are greater than 10 Otherwise, it should return false Here are some sample arrays to test your code:\n[10,20,30,40]\n#=> true\n[2,8,17,89,50,3]\n#=> true\n[1,2,3,4,5]\n#=> false",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1887,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\enumerable_exercises.md",
      "source_type": "git_repo"
    },
    "token_count": 255,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f5fda86bac46f549d1d707530fed2c90",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
    "source_type": "git_repo",
    "title": "'Rocket' syntax",
    "content": "Introduction\nNow that you've learned about arrays, it's time to get into the array's supercharged cousin: the hash Ruby hashes are more advanced collections of data and are similar to objects in JavaScript and dictionaries in Python if you're familiar with those Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what a hash is Describe how to create a new hash and how to add information to it Explain what keys and values are Describe how to change and delete data inside a hash Describe how to merge two hashes Arrays vs hashes\nYou're sitting in your cubicle, diligently working away (because you would never dream of slacking off at work), when lunch time rolls around You need to grab a bite to eat, but how are you going to go about requesting food For the purposes of this parable, you have two options: a vending machine or a nice restaurant If you were to go to the vending machine, you would see nice, orderly rows of food where each option is labeled with a number These labels are the indices of the vending machine array It's important to note that the indices are not interchangeable: \"12\" will always come before \"13\" and after \"11\" You request your food by using an index to tell the vending machine what you want It understands the index and returns whatever lives in that spot Mmmmm, nothing like a lunch of Flamin' Hot Cheetos and Diet Coke You are a programmer, after all Your other option is to sit yourself down at a table covered with a nice white tablecloth, where a pleasant waiter will see to your every need The first thing they will do is bring you a menu, which for those of you that have only been eating out of vending machines so far in your life, lists out all of your dining options labeled with the name of the dish, such as \"sublimated artichoke frittata\" or \"whole pork belly, market acorns, and activated shell bean\" In this menu hash, the dish names are called keys: they are the labels that are used to identify your dining options The food that those dish names represent are the values that the keys point to To order your food, you give your waiter the key (you tell him the name of the dish you want), and he returns the value of that key (food that matches the description on the menu)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10251,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "8d588a49c90094e273a43b038cea92ea",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
    "source_type": "git_repo",
    "title": "'Rocket' syntax",
    "content": "activated shell bean\" In this menu hash, the dish names are called keys: they are the labels that are used to identify your dining options The food that those dish names represent are the values that the keys point to To order your food, you give your waiter the key (you tell him the name of the dish you want), and he returns the value of that key (food that matches the description on the menu)Mmmmm, nothing like a lunch of free-range bison with corn and peach compote and an IPA You are a programmer, after all There are two important differences to note between the vending machine array and the menu hash First, it's far easier for us to use the names of things to find what we're looking for than to have to translate what we want into numerical indices This is a huge advantage of using a hash: no more having to count out array elements to request what we want Second, the items on a menu can appear in any order, and we'll still get exactly what we want as long as we use the correct name This unordered aspect of hashes isn't true for arrays, which are highly dependent on order Creating hashes\nLet's dive in and create a hash ruby\nmy_hash = {\n\"a random word\" => \"ahoy\",\n\"Dorothy's math test score\" => 94,\n\"an array\" => [1, 2, 3],\n\"an empty hash within a hash\" => {}\n}\nThis example shows the most basic way to create a hash, which is to use the hash literal of curly braces ({}) The above hash has four keys that point to four different values For example, the first key, \"a random word\", points to the value \"ahoy\" As you can see, the values of a hash can be a number, a string, an array, or even another hash Keys and values are associated with a special operator called a hash rocket: => Just like with an array, you can also create a new hash by calling the good old ::new method on the Hash class ruby\nmy_hash = Hash new\nmy_hash               #=> {}\nOf course, hashes don't only take strings as keys and values Ruby is a pretty flexible language, so you can jam any old thing in there and it'll work just fine",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10251,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "3138b06e776e9efd58fe5be3a9ed77ea",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
    "source_type": "git_repo",
    "title": "'Rocket' syntax",
    "content": "Keys and values are associated with a special operator called a hash rocket: => Just like with an array, you can also create a new hash by calling the good old ::new method on the Hash class ruby my_hash = Hash new my_hash #=> {} Of course, hashes don't only take strings as keys and values Ruby is a pretty flexible language, so you can jam any old thing in there and it'll work just fineruby\nhash = { 9 => \"nine\", :six => 6 }\nAccessing values\nYou can access values in a hash the same way that you access elements in an array When you call a hash's value by key, the key goes inside a pair of brackets, just like when you're calling an array by index ```ruby\nshoes = {\n\"summer\" => \"sandals\",\n\"winter\" => \"boots\"\n}\nshoes[\"summer\"]   #=> \"sandals\"\n```\nIf you try to access a key that doesn't exist in the hash, it will return nil:\nruby\nshoes[\"hiking\"]   #=> nil\nSometimes, this behavior can be problematic for you if silently returning a nil value could potentially wreak havoc in your program Luckily, hashes have a fetch method that will raise an error when you try to access a key that is not in your hash ruby\nshoes fetch(\"hiking\")   #=> KeyError: key not found: \"hiking\"\nAlternatively, this method can return a default value instead of raising an error if the given key is not found ruby\nshoes fetch(\"hiking\", \"hiking boots\") #=> \"hiking boots\"\nAdding and changing data\nYou can add a key-value pair to a hash by calling the key and setting the value, just like you would with any other variable ```ruby\nshoes[\"fall\"] = \"sneakers\"\nshoes     #=> {\"summer\"=>\"sandals\", \"winter\"=>\"boots\", \"fall\"=>\"sneakers\"}\n```\nYou can also use this approach to change the value of an existing key ruby\nshoes[\"summer\"] = \"flip-flops\"\nshoes     #=> {\"summer\"=>\"flip-flops\", \"winter\"=>\"boots\", \"fall\"=>\"sneakers\"}\nRemoving data\nDeleting data from a hash is done with the hash's #delete method, which provides the cool functionality of returning the value of the key-value pair that was deleted from the hash ruby\nshoes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10251,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "dee8e14dd258e92ac1deb8728a3879c8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
    "source_type": "git_repo",
    "title": "'Rocket' syntax",
    "content": "just like you would with any other variable ```ruby shoes[\"fall\"] = \"sneakers\" shoes #=> {\"summer\"=>\"sandals\", \"winter\"=>\"boots\", \"fall\"=>\"sneakers\"} ``` You can also use this approach to change the value of an existing key ruby shoes[\"summer\"] = \"flip-flops\" shoes #=> {\"summer\"=>\"flip-flops\", \"winter\"=>\"boots\", \"fall\"=>\"sneakers\"} Removing data Deleting data from a hash is done with the hash's #delete method, which provides the cool functionality of returning the value of the key-value pair that was deleted from the hash ruby shoesdelete(\"summer\")    #=> \"flip-flops\"\nshoes                     #=> {\"winter\"=>\"boots\", \"fall\"=>\"sneakers\"}\nMethods\nHashes respond to many of the same methods as arrays do since they both employ Ruby's Enumerable module In the next lesson, we'll go into far more detail on the Enumerable module, including the differences in how the Enumerable methods behave for arrays and hashes A couple of useful methods that are specific to hashes are the #keys and #values methods, which very unsurprisingly return the keys and values of a hash, respectively Note that both of these methods return arrays ```ruby\nbooks = {\n\"Infinite Jest\" => \"David Foster Wallace\",\n\"Into the Wild\" => \"Jon Krakauer\"\n}\nbooks keys      #=> [\"Infinite Jest\", \"Into the Wild\"]\nbooks values    #=> [\"David Foster Wallace\", \"Jon Krakauer\"]\n```\nMerging two hashes\nOccasionally, you'll come across a situation where two hashes wish to come together in holy union Luckily, there's a method for that (No ordained minister required )\nruby\nhash1 = { \"a\" => 100, \"b\" => 200 }\nhash2 = { \"b\" => 254, \"c\" => 300 }\nhash1 merge(hash2)      #=> { \"a\" => 100, \"b\" => 254, \"c\" => 300 }\nNotice that the values from the hash getting merged in (in this case, the values in hash2) overwrite the values of the hash getting uh, merged at (hash1 here) when the two hashes have a key that's the same For a full list of the methods that work on hashes, check out the Hash class documentation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10251,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "78c4f9ac8b34aeebf054fc584d2a22dd",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
    "source_type": "git_repo",
    "title": "'Rocket' syntax",
    "content": "=> 254, \"c\" => 300 } hash1 merge(hash2) #=> { \"a\" => 100, \"b\" => 254, \"c\" => 300 } Notice that the values from the hash getting merged in (in this case, the values in hash2) overwrite the values of the hash getting uh, merged at (hash1 here) when the two hashes have a key that's the same For a full list of the methods that work on hashes, check out the Hash class documentationSymbols as hash keys\nIn this lesson, we mostly used strings for hash keys, but in the real world, you'll almost always see symbols (like :this_guy) used as keys This is predominantly because symbols are far more performant than strings in Ruby, but they also allow for a much cleaner syntax when defining hashes Behold the beauty:\n```ruby\n'Rocket' syntax\namerican_cars = {\n:chevrolet => \"Corvette\",\n:ford => \"Mustang\",\n:dodge => \"Ram\"\n}\n'Symbols' syntax\njapanese_cars = {\nhonda: \"Accord\",\ntoyota: \"Corolla\",\nnissan: \"Altima\"\n}\n```\nThat last example brings a tear to the eye, doesn't it Notice that the hash rocket and the colon that represents a symbol have been mashed together This unfortunately only works for symbols, though, so don't try { 9: \"value\" } or you'll get a syntax error When you use the cleaner 'symbols' syntax to create a hash, you'll still need to use the standard symbol syntax when you're trying to access a value In other words, regardless of which of the above two syntax options you use when creating a hash, they both create symbol keys that are accessed the same way ruby\namerican_cars[:ford]    #=> \"Mustang\"\njapanese_cars[:honda]   #=> \"Accord\"\nAssignment\n1 Read [Launch School’s chapter on Hashes](https://launchschool com/books/ruby/read/hashes), and go through the exercises using irb or any other appropriate REPL 1 Complete the hash exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises) that you previously cloned Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10251,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "3dd242f3683bd19335285d41cd50fe5e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
    "source_type": "git_repo",
    "title": "'Rocket' syntax",
    "content": "options you use when creating a hash, they both create symbol keys that are accessed the same way ruby american_cars[:ford] #=> \"Mustang\" japanese_cars[:honda] #=> \"Accord\" Assignment 1 Read [Launch School’s chapter on Hashes](https://launchschool com/books/ruby/read/hashes), and go through the exercises using irb or any other appropriate REPL 1 Complete the hash exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises) that you previously cloned Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the differences between hashes and arrays What are keys and values in a hash How can you create a new hash How can you populate a hash with data How can you change existing values within a hash How can you delete existing data from a hash How can you merge two hashes together Why is it preferred to use symbols as hash keys Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read the article Ruby Explained: Hashes by Erik Trautman Note that one of the delete examples is incorrect: setting a value to nil does not delete the key-value pair",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10251,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\hashes.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "aaa88b1ab3df8b329f6fb5ab54741d2e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "Introduction\nTracking down and fixing both errors and unexpected behavior in your code is an inevitable part of being a developer The art of finding the cause of problems and then fixing them in code is known as debugging The origin of the term \"debugging\" is a classic computer science tale worth reading if you haven’t already In this lesson, we'll cover all of the main techniques you can use to debug your code when you run into a problem Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What a stack trace is Using a stack trace to debug your code Using puts, p, Pry and debug gem's VSCode integration to debug your code How you should decide to start with debugging Reading the stack trace\nWhen your Ruby program crashes after encountering a runtime error or exception, it will produce a wall of text known as a stack trace that is then output in your terminal A stack trace looks something like this:\nDon't let the stack trace intimidate you You don't need to read it all or even know what most of it means The stack trace prints each line of code in your program that was executed before it crashed The very first line of the stack trace will generally provide the most useful information about the error your program encountered:\nFirst, this line of the stack trace will tell you what specific line caused the runtime error In the above example, the error was encountered in line 31 of the file bottles rb This line also provides a brief explanation of the error and the name of the error (In this case, it's a NameError) And yes, in Ruby, errors (Exceptions) are also objects There you have it At this point, you know where in your code the exception is being raised, and you know the type of error you're dealing with You might even know what fixes need to be implemented in your code But what if you don't know how to fix your code Then it's time to dive into debugging Debugging with puts\nThe debugging process is all about confirming assumptions about your code until you find something that goes against your assumptions For example, does a variable or method return what you expect Does a calculation or iteration over an array or hash give the output you expect The easiest and quickest way to confirm your assumptions while debugging is by using puts statements to output the return value of variables, methods, calculations, iterations, or even entire lines of code to your terminal",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "945d4cd92d41ff4c19bd47fb9b6748a6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "about confirming assumptions about your code until you find something that goes against your assumptions For example, does a variable or method return what you expect Does a calculation or iteration over an array or hash give the output you expect The easiest and quickest way to confirm your assumptions while debugging is by using puts statements to output the return value of variables, methods, calculations, iterations, or even entire lines of code to your terminalLet's say that for whatever reason, we need to write a method that takes a string and checks if the string is an isogram (a word that has no repeating letters) or not Perhaps it's a hostage situation that requires a pro debugger Let's take a look at a first draft:\n```ruby\ndef isogram (string)\noriginal_length = string length\nstring_array = string downcase split\nunique_length = string_array uniq length\noriginal_length == unique_length\nend\nisogram (\"Odin\")\n=> false\n```\nOkay, that didn't work We didn't expect that Why Because the string Odin is an isogram but we got false The method didn't throw an exception, so we don't even have a line to start debugging at Now what We know that original_length == unique_length returns false since it's the last statement, so why not place a puts on the line before that to see what unique_length is As an alternative to puts, p is also commonly used for debugging; p is a combination of puts and inspect (more on that below) To better show the differences between what Ruby is printing to the terminal and returning, the examples in this section use the full IRB syntax, which is exactly what you'd see if you typed these commands into your own terminal IRB session ruby\nirb(main):001:1* def isogram (string)\nirb(main):002:1*   original_length = string length\nirb(main):003:1*   string_array = string downcase split\nirb(main):004:1*   unique_length = string_array uniq length\nirb(main):005:1*\nirb(main):006:1*   p unique_length\nirb(main):007:1*\nirb(main):008:1*   original_length == unique_length\nirb(main):009:0> end\n=> :isogram irb(main):010:0> isogram (\"Odin\")\n1\n=> false\nINTERESTING",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "dd914005eb0a1075d7b616cf29ff007a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "is printing to the terminal and returning, the examples in this section use the full IRB syntax, which is exactly what you'd see if you typed these commands into your own terminal IRB session ruby irb(main):001:1* def isogram (string) irb(main):002:1* original_length = string length irb(main):003:1* string_array = string downcase split irb(main):004:1* unique_length = string_array uniq length irb(main):005:1* irb(main):006:1* p unique_length irb(main):007:1* irb(main):008:1* original_length == unique_length irb(main):009:0> end => :isogram irb(main):010:0> isogram (\"Odin\") 1 => false INTERESTINGUsing p on unique_length prints it to the console and shows us something must be wrong with how we called #uniq on string_array because we know that we have 4 unique characters in our input but we got 1 as output For verification, let's place another p statement before the unique_length statement:\nruby\nirb(main):001:1* def isogram (string)\nirb(main):002:1*   original_length = string length\nirb(main):003:1*   string_array = string downcase split\nirb(main):004:1*\nirb(main):005:1*   p string_array\nirb(main):006:1*\nirb(main):007:1*   unique_length = string_array uniq length\nirb(main):008:1*\nirb(main):009:1*   p unique_length\nirb(main):010:1*\nirb(main):011:1*   original_length == unique_length\nirb(main):012:0> end\n=> :isogram irb(main):013:0> isogram (\"Odin\")\n[\"odin\"]\n1\n=> false\nIndeed, we didn't use #split correctly, as it creates an array with the given string rather than an array of the string's characters Why By default, if we didn’t provide arguments, the #split method will divide the string using whitespace as the delimiter Try running the above code in IRB using #split('') or an appropriate online REPL instead, and you'll see the difference Hostage situation resolved That wasn't so bad, was it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "d634d4dd2749bb38294048c5568241e9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "[\"odin\"] 1 => false Indeed, we didn't use #split correctly, as it creates an array with the given string rather than an array of the string's characters Why By default, if we didn’t provide arguments, the #split method will divide the string using whitespace as the delimiter Try running the above code in IRB using #split('') or an appropriate online REPL instead, and you'll see the difference Hostage situation resolved That wasn't so bad, was itDebugging with puts and nil\nUsing puts is a great way to debug, but there's a HUGE caveat with using it: calling puts on anything that is nil or an empty string or collection will just print a blank line to your terminal This is one instance where using p will yield more information As mentioned above, p is a combination of puts and the #inspect method, the latter of which essentially prints a string representation of whatever it's called on To illustrate this, try the following in a REPL:\nruby\nputs \"Using puts:\"\nputs []\np \"Using p:\"\np []\nDebugging with Pry-byebug\nPry is a Ruby gem that provides you with an interactive REPL while your program is running The REPL provided by Pry is very similar to IRB but has added functionality The recommended Ruby gem for debugging is Pry-byebug and it includes Pry as a dependency Pry-byebug adds step-by-step debugging and stack navigation To use Pry-byebug, you'll first need to install it in your terminal by running gem install pry-byebug You can then make it available in your program by requiring it at the top of your file with require 'pry-byebug' Finally, to use Pry-byebug, you just need to call binding pry at any point in your program To follow along with these examples save the code into a Ruby file (e g , script rb) and then run the file in your terminal (e g , ruby script rb)\n```ruby\nrequire 'pry-byebug'\ndef isogram (string)\noriginal_length = string length\nstring_array = string downcase split\nbinding pry\nunique_length = string_array uniq length\noriginal_length == unique_length\nend\nisogram (\"Odin\")\n```\nWhen your code executes and gets to binding pry, it will open an IRB-like session in your terminal You can then use that session to check the values of anything within the scope of where you included binding pry",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "4ae16edab1211be3c9f6129544a7a692",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "your terminal (e g , ruby script rb) ```ruby require 'pry-byebug' def isogram (string) original_length = string length string_array = string downcase split binding pry unique_length = string_array uniq length original_length == unique_length end isogram (\"Odin\") ``` When your code executes and gets to binding pry, it will open an IRB-like session in your terminal You can then use that session to check the values of anything within the scope of where you included binding pryHowever, keep in mind that any code written after the binding pry statement will not have been evaluated during the Pry session For example, here original_length and string_array are in scope However, unique_length is not in scope, because it is written after binding pry and has not been evaluated yet Thus, adding a binding pry line in our code is similar to creating a breakpoint in JavaScript To see this point in action, try running the following:\n```ruby\nrequire 'pry-byebug'\ndef yell_greeting(string)\nname = string\nbinding pry\nname = name upcase\ngreeting = \"WASSAP, #{name} \"\nputs greeting\nend\nyell_greeting(\"bob\")\n```\nDuring the session, if you check for the value of name, you will notice that you get back the value bob instead of BOB What value do you think greeting will return Yup, it will be nil This is because name = name upcase and greeting = \"WASSAP, #{name} \" occurred after the binding pry call and were never evaluated Using the same example above, you can use one of pry-byebug's commands to figure out what name = name upcase will return You won't need to quit the session or add another binding pry beneath it Enter next to step over to the next line ```ruby\n[1] pry(main)> name\n=> \"bob\"\n[2] pry(main)> greeting\n=> nil\n[3] pry(main)> next\n5: def yell_greeting(string)\n6:   name = string\n7:\n8:   binding pry\n9:\n10:   name = name upcase\n=> 11:   greeting = \"WASSAP, #{name} \"\n12:   puts greeting\n13: end\n[4] pry(main)> name\n=> \"BOB\"\n```\nIt stops after evaluating the next line name now returns BOB",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "ae04ad36f50ae96c1dc0a22ec09280fd",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "or add another binding pry beneath it Enter next to step over to the next line ```ruby [1] pry(main)> name => \"bob\" [2] pry(main)> greeting => nil [3] pry(main)> next 5: def yell_greeting(string) 6: name = string 7: 8: binding pry 9: 10: name = name upcase => 11: greeting = \"WASSAP, #{name} \" 12: puts greeting 13: end [4] pry(main)> name => \"BOB\" ``` It stops after evaluating the next line name now returns BOBCalling next again will evaluate the following line Try it out to know what greeting will return Pry-byebug has a few more commands Play around with them to get a feel of what they do As you can see, using Pry-byebug for debugging achieves the same outcome as puts debugging: it allows you to confirm the assumptions you have about particular parts of your code If your code is complex, Pry-byebug will probably allow you to debug quicker thanks to its interactive runtime environment In such scenarios, Pry-byebug will be easier to interact with than having to add puts statements everywhere and re-running your code each time There is far, far more that you can do with Pry-byebug, but that's beyond the scope of this lesson Check out the Assignments and Additional Resources to find out where you can learn more about this useful gem How to start debugging\nPrograms generally go wrong due to two main reasons:\nThe program encounters an error and won't run For example, a typo may cause a syntax error to be raised that causes the program to crash In this case, Ruby provides a stack trace The program runs but does not work the way you expect For example, you expect a method to return a 2, but it actually returns 6 when you run it In this case, there is no stack trace Obviously, if available, the stack trace is the first place you should look when debugging If there's no stack trace, then puts and Pry are the easiest and quickest tools you can use to get yourself back up and running Assignment\n1 Go through the Ruby Guides [Ruby Debugging](https://www rubyguides com/2015/07/ruby-debugging/) tutorial, which covers the same topics we went over, but in more depth 1 Read through the [Exceptions and Stack Traces](https://launchschool",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "a0e9a7f6373698139b8970b94d9c7760",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "is no stack trace Obviously, if available, the stack trace is the first place you should look when debugging If there's no stack trace, then puts and Pry are the easiest and quickest tools you can use to get yourself back up and running Assignment 1 Go through the Ruby Guides [Ruby Debugging](https://www rubyguides com/2015/07/ruby-debugging/) tutorial, which covers the same topics we went over, but in more depth 1 Read through the [Exceptions and Stack Traces](https://launchschoolcom/books/ruby/read/more_stuff#readingstacktraces) section of Launch School's online book *Introduction to Programming with Ruby* 1 Check your [VSCode Extensions](https://code visualstudio com/docs/editor/extension-marketplace) and make sure the [Ruby LSP](https://marketplace visualstudio com/items itemName=Shopify ruby-lsp) and the [VSCode rdbg Ruby Debugger](https://marketplace visualstudio com/items itemName=KoichiSasada vscode-rdbg) extensions are installed 1 Now that you're familiar with the basics, we're going to have some fun with VSCode Check the [VSCode rdbg Ruby Debugger documentation](https://github com/ruby/vscode-rdbg) and generate the configuration inside your VSCode by going to `Run and Debug` and clicking on `create a launch json file` then picking `Ruby (rdbg)` Now, the configuration you want to use is `Debug current file with rdbg` that you can see at the top of the Debug sidebar You can also invoke the last used debugging configuration with `F5` `launch json` files need to be created on a per project basis If you're having a hard time figuring out how to navigate to your `launch json` file in order to change the configuration, peek into [Debugging with VScode launch configurations portion](https://code visualstudio com/docs/editor/debugging#_launch-configurations) We encourage you to go through the entire article, though 1 Now that everything is installed, configured, let's create a new file which you can call `script rb` Next copy and paste the very first example in the [Debugging with pry-byebug](#debugging-with-pry-byebug) Section Get rid of the `require pry-byebug` line and change `binding pry` to `debugger` Save the file 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "3d58088f0947a1cb2f1b27085e01182c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "file in order to change the configuration, peek into [Debugging with VScode launch configurations portion](https://code visualstudio com/docs/editor/debugging#_launch-configurations) We encourage you to go through the entire article, though 1 Now that everything is installed, configured, let's create a new file which you can call `script rb` Next copy and paste the very first example in the [Debugging with pry-byebug](#debugging-with-pry-byebug) Section Get rid of the `require pry-byebug` line and change `binding pry` to `debugger` Save the file 1Click the `Run and Debug` button, open up the folder your script is located in, set a VSCode breakpoint somewhere within the function, and Run the debugger This should all look very familiar to you, when you hit the VSCode breakpoint it should look similar to the breakpoints you used in the [JavaScript Developer Tools lesson](https://www theodinproject com/lessons/foundations-javascript-developer-tools) But *whoa*, once we hit the `debugger` breakpoint we got an interactive REPL to play around with The best of both worlds Play around with this, and feel free to reference [Debugging with VScode documentation](https://code visualstudio com/docs/editor/debugging) if you get stuck 1 Although VSCode's debugger is a helpful tool that can make debugging simpler, many companies won't be using it - and will want you to be familiar with debugging using the concepts this lesson focused on: the stack trace, `puts`,`debug`, `pry-byebug` Let's practice them by completing the debugging exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises/tree/main/ruby_basics#readme) that you previously cloned Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a stack trace What is generally the most useful line in a stack trace What are the two things you can learn from the first line of a stack trace How do puts and Pry help you in the debugging process What should you use instead of puts for nil values Where should you start with debugging if you encounter a runtime error",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "245a14889153ee604dd1b2f4c71c9625",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
    "source_type": "git_repo",
    "title": "=> false",
    "content": "mind you are not expected to memorize or master this knowledge What is a stack trace What is generally the most useful line in a stack trace What are the two things you can learn from the first line of a stack trace How do puts and Pry help you in the debugging process What should you use instead of puts for nil values Where should you start with debugging if you encounter a runtime errorWhere should you start with debugging if your program runs but does not work the way you expect Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read the article on Debugging without doom and gloom by Practicing Ruby Poke around Debug's repo and its README that will help you master this invaluable gem Watch debug gem: Ruby's new debug functionality talk by Koichi Sasada, one of debug's maintainers to learn about its history and functionality Read this brilliant article about reading Ruby error messages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16500,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\debugging.md",
      "source_type": "git_repo"
    },
    "token_count": 184,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "76f7d0eb525d6bc8d4f606b02ebfd173",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\input_and_output.md",
    "source_type": "git_repo",
    "title": "input_and_output",
    "content": "Introduction\nTo create programs that are user friendly and interactive, you'll need to know how to output data to a screen and how to get input from a user In this lesson, we'll cover the most common ways to achieve these tasks in Ruby As with other lessons, and this one in particular, following along in irb or an appropriate online REPL will be helpful Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Differentiate between the print and puts commands Describe the method used to get input from the user Output commands\nTo output information, such as into your irb or REPL environment or into the command line, we can use the print command To better show the differences between what Ruby is printing to the terminal and returning, the examples in this lesson use the full irb syntax, which is exactly what you'd see if you typed these commands into your own terminal irb session ```ruby\nirb(main):001:0> print \"Learning to code is FUN \"\nLearning to code is FUN => nil\nirb(main):002:0> print \"1234\"\n1234=> nil\n```\nWe can also use the puts command:\n```ruby\nirb(main):001:0> puts \"Learning to code is cool \"\nLearning to code is cool => nil\nirb(main):002:0> puts \"Hey, I want 2 key lime pies \"\nHey, I want 2 key lime pies => nil\nirb(main):003:0> x = \"My name is ALEX :)\"\n=> \"My name is ALEX :)\"\nirb(main):004:0> puts x\nMy name is ALEX :)\n=> nil\n```\nAs you can see, the puts and print commands are quite similar, but you should have already noticed the small difference between the two: puts appends a new line to the argument passed in, whereas print keeps things all on one line A very important thing to notice for both commands is that after printing whatever argument they are passed, puts and print both return nil To highlight the difference between puts and print, we're going to pull out a piece of rarely used Ruby syntax: the semicolon In short, semicolons are never required in Ruby, but they allow you to run multiple Ruby commands all on one line This type of code golf is not generally recommended, but it's helpful for this example",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5695,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\input_and_output.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ba64030c1b578cc5f45eb5f46f986393",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\input_and_output.md",
    "source_type": "git_repo",
    "title": "input_and_output",
    "content": "for both commands is that after printing whatever argument they are passed, puts and print both return nil To highlight the difference between puts and print, we're going to pull out a piece of rarely used Ruby syntax: the semicolon In short, semicolons are never required in Ruby, but they allow you to run multiple Ruby commands all on one line This type of code golf is not generally recommended, but it's helpful for this exampleIn a REPL, the two statements can be written on separate lines without the semicolon and still produce the desired output However, irb can read only one statement at a time, making the semicolons necessary for this code to work as intended ```ruby\nirb(main):001:0> print \"Hello World\"; print \"I love drinking coffee\"\nHello WorldI love drinking coffee=> nil\nirb(main):002:0> puts \"Hello World\"; puts \"I love drinking coffee\"\nHello World\nI love drinking coffee\n=> nil\n```\nInput commands\nTo accept input from a user, we can use the gets command When we use gets, program execution will stop and wait for user input After the user presses Enter, the program will continue its execution Let's give this a go Open irb, type gets, and then type The Odin Project You should see something like the following:\nruby\nirb(main):001:0> gets\nThe Odin Project\n=> \"The Odin Project\\n\"\nHow about that Let's break this process down a bit You'll notice that, unlike puts and print, gets actually returns the user input instead of returning nil This means that the input can be assigned to a variable for you to then use and manipulate and twist and turn and spit back out As you might also remember from the String section of the Basic Data Types lesson, \"\\n\" is an escape character that represents a new line The gets command always returns a new line at the end of the input This command often makes use of a \"separator\" to read streams and multi-line files, but that's beyond the scope of this beginner lesson For now, it's helpful to know that #chomp is a method commonly used to trim separators ```ruby\nirb(main):001:0> new_string = gets chomp\nThis is a sentence => \"This is a sentence \"\nirb(main):002:0> puts new_string\nThis is a sentence => nil\n```\nAssignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5695,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\input_and_output.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "435e5ec73c7c9b047fe6b765e8d696ac",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\input_and_output.md",
    "source_type": "git_repo",
    "title": "input_and_output",
    "content": "a new line at the end of the input This command often makes use of a \"separator\" to read streams and multi-line files, but that's beyond the scope of this beginner lesson For now, it's helpful to know that #chomp is a method commonly used to trim separators ```ruby irb(main):001:0> new_string = gets chomp This is a sentence => \"This is a sentence \" irb(main):002:0> puts new_string This is a sentence => nil ``` Assignment 1Read through and complete the exercise from [learnrubyonline org's \"Hello, World\" lesson](https://www learnrubyonline org/en/Hello_World) 1 Read the first four sections of the [Ruby - File I/0](https://www tutorialspoint com/ruby/ruby_input_output htm) from TutorialsPoint on `puts`, `gets`, `putc`, and `print` 1 Read this [Ruby guides article describing the differences between `puts`, `print` and `p`](https://www rubyguides com/2018/10/puts-vs-print/) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the two methods we can use to output data to the user's screen What is similar between these two output methods What is different between these two output methods What is the method you can use to get input from the user What is at least one difference between the output and input methods Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5695,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\input_and_output.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b2f6cb14d7676b786ef966568cd1096f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\loops.md",
    "source_type": "git_repo",
    "title": "We can make ranges of letters, too!",
    "content": "Introduction\nNot to be confused with Fruit Loops, the addictive cereal that causes symptoms similar to ADHD in kids, loops in Ruby are blocks of code that are continually repeated until a certain condition is met Like me, you've probably experienced real-life loops when you were given detention in school and forced to repeatedly write the same line about not drawing small phallic shapes on your desk Writing the same thing over and over and over is not only boring but also potentially error prone You might have made a spelling mistake on one line and forgotten to dot an \"i\" on another line It's the same with programming: the less code you have to write, the less chance you have of introducing bugs that can cause your program to crash and burn If you find yourself needing to repeat an action more than once in your code, you probably need loops in your life For all of the examples in this lesson, you should code along in irb or any appropriate online REPL environment to get a better feel for how they work Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what a loop is and why it's useful Explain what a loop loop is and how to use it Explain what a while loop is and how to use it Explain what a for loop is and how to use it Explain what a #times loop is and how to use it Explain what an until loop is and how to use it Explain what #upto and #downto loops are and how to use them Loop\nThe loop loop (say what ) is Ruby's loop that just won't quit It's an infinite loop that will keep going unless you specifically request for it to stop, using the break command Most commonly, break is used with a condition, as illustrated in the example below ruby\ni = 0\nloop do\nputs \"i is #{i}\"\ni += 1\nbreak if i == 10\nend\nYou won't see this loop used much in Ruby If you find yourself using loop, know that there is probably a better loop for you out there, like one of the more specific loops below While loop\nA while loop is similar to the loop loop except that you declare the condition that will break out of the loop up front",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8023,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\loops.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "04c0f391aabe8f1dd0e51d130448d727",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\loops.md",
    "source_type": "git_repo",
    "title": "We can make ranges of letters, too!",
    "content": "loop do puts \"i is #{i}\" i += 1 break if i == 10 end You won't see this loop used much in Ruby If you find yourself using loop, know that there is probably a better loop for you out there, like one of the more specific loops below While loop A while loop is similar to the loop loop except that you declare the condition that will break out of the loop up frontruby\ni = 0\nwhile i < 10 do\nputs \"i is #{i}\"\ni += 1\nend\nThis is an example of using a while loop with a count Because you declare the condition that breaks the loop up front, the intention of your code is much clearer, making this code easier to read than our loop loop above You can also use while loops to repeatedly ask a question of the user until they give the desired response:\nruby\nwhile gets chomp = \"yes\" do\nputs \"Are we there yet \"\nend\nThis example shows the flexibility advantage of a while loop: it will run until its break condition is met, which could be for a variable number of loops or a number of loops that is initially unknown Who knows if you've arrived at your destination the first, fourth, or seventy-ninth time you ask Until loop\nThe until loop is the opposite of the while loop A while loop continues for as long as the condition is true, whereas an until loop continues for as long as the condition is false These two loops can therefore be used pretty much interchangeably Ultimately, what your break condition is will determine which one is more readable As much as possible, you should avoid negating your logical expressions using (not) First, it can be difficult to actually notice the exclamation point in your code Second, using negation makes the logic more difficult to reason through and therefore makes your code more difficult to understand These situations are where until shines We can re-write our while loop examples using until ruby\ni = 0\nuntil i >= 10 do\nputs \"i is #{i}\"\ni += 1\nend\nYou can see here that using until means that the loop will continue running until the condition i >= 10 is true The next example shows how you can use until to avoid the negation that the above while loop had to use ruby\nuntil gets chomp == \"yes\" do\nputs \"Do you like Pizza \"\nend\nMuch more readable And who doesn't like Pizza",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8023,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\loops.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b4484f20fd870a3d2b5f235927ec904b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\loops.md",
    "source_type": "git_repo",
    "title": "We can make ranges of letters, too!",
    "content": ">= 10 do puts \"i is #{i}\" i += 1 end You can see here that using until means that the loop will continue running until the condition i >= 10 is true The next example shows how you can use until to avoid the negation that the above while loop had to use ruby until gets chomp == \"yes\" do puts \"Do you like Pizza \" end Much more readable And who doesn't like PizzaRanges\nWhat if we know exactly how many times we want our loop to run Ruby lets us use something called a range to define an interval All we need to do is give Ruby the starting value, the ending value, and whether we want the range to be inclusive or exclusive ```ruby\n(1 5)      # inclusive range: 1, 2, 3, 4, 5\n(1 5)     # exclusive range: 1, 2, 3, 4\nWe can make ranges of letters, too ('a' 'd')  # a, b, c, d\n```\nFor loop\nA for loop is used to iterate through a collection of information such as an array or range These loops are useful if you need to do something a given number of times while also using an iterator ruby\nfor i in 0 5\nputs \"#{i} zombies incoming \"\nend\nThat's really all there is to it Times loop\nIf you need to run a loop for a specified number of times, then look no further than the trusty #times loop It works by iterating through a loop a specified number of times and even throws in the bonus of accessing the number it's currently iterating through ruby\n5 times do\nputs \"Hello, world \"\nend\nI'm sure you can guess what that code does Ruby is easily readable that way ruby\n5 times do |number|\nputs \"Alternative fact number #{number}\"\nend\nRemember, loops will start counting from a zero index unless specified otherwise, so the first loop iteration will output Alternative fact number 0 Upto and Downto loops\nThe Ruby methods #upto and #downto do exactly what you'd think they do from their names You can use these methods to iterate from a starting number either up to or down to another number, respectively ```ruby\n5 upto(10) { |num| print \"#{num} \" }     #=> 5 6 7 8 9 10\n10",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8023,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\loops.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c376343707da6e161e2c0c0587733414",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\loops.md",
    "source_type": "git_repo",
    "title": "We can make ranges of letters, too!",
    "content": "counting from a zero index unless specified otherwise, so the first loop iteration will output Alternative fact number 0 Upto and Downto loops The Ruby methods #upto and #downto do exactly what you'd think they do from their names You can use these methods to iterate from a starting number either up to or down to another number, respectively ```ruby 5 upto(10) { |num| print \"#{num} \" } #=> 5 6 7 8 9 10 10downto(5) { |num| print \"#{num} \" }   #=> 10 9 8 7 6 5\n```\nIf you need to step through a series of numbers (or even letters) within a specific range, then these are the loops for you Assignment\n1 Read the [Loops & Iterators chapter](https://launchschool com/books/ruby/read/loops_iterators) of LaunchSchool's *Introduction to Programming With Ruby* We recommend skipping the section on recursion since recursion will be covered later on 1 Try re-writing the above examples using alternative loop methods to achieve the same results Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a loop and why is it useful What is a loop loop, and how would you use it What is a while loop, and how would you use it What is a for loop, and how would you use it What is a #times loop, and how would you use it What is an until loop, and how would you use it What are the #upto and #downto loops, and how would you use them Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental If you'd like another overview of loops, read this Ruby Explained: Iteration article (Don't worry about the #each method described here; we'll get to that in an upcoming lesson )\nIf you want yet another take, read Skork's article on loops (Again, don't worry about the #each and #each_with_index methods here; they're coming up soon )",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8023,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\loops.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d1dda7dd6c7f04ffa7ba745f73911b2c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "Introduction\nIn Ruby, methods are where all the action happens You will often find yourself writing code that does the same thing in different places in your program Wouldn't it be great if there was a way to reuse the same code over and over again without having to write it all out each time This is what methods are for Methods allow you to name sections of your code and then run that code anywhere in your program as many times as you need just by calling that name This concept allows for what programmers refer to as the DRY approach to programming: Don't Repeat Yourself Recycling sections of code instead of repeating them throughout your programs can make your program more readable and manageable As you read more about Ruby methods, you'll notice that the terms \"methods\" and \"functions\" are often used interchangeably What's the difference According to The Ruby Programming Language book:\nMany languages distinguish between functions, which have no associated object, and methods, which are invoked on a receiver object Because Ruby is a purely object-oriented language, all methods are true methods and are associated with at least one object Basically, because everything in Ruby is an object, Ruby only has methods, not functions With that established, we know that when we're talking about Ruby, \"methods\" and \"functions\" refer to the same thing In this lesson, we're going to deconstruct what methods are, examine their behaviour, and learn how to use them Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain how to create and call a new method Explain how to pass variables to a method and how to define default parameters Describe the differences between implicit return and explicit return Explain what it means to chain methods together and how to do it Explain what predicate methods are and how to use one Explain what bang methods are and how to use one Ruby's built-in methods\nOne of Ruby's great advantages for new programmers is its large number of built-in methods You've been using many of them already, probably without even realizing it Over the course of your learning so far, you have modified strings and other objects in various ways For example, the #times loop and #upto loop that you learned about in the Loops lesson are both methods that are included as part of Ruby's Integer class If you're wondering about all of the pound signs (#), they’re just the convention for writing out Ruby instance methods We can use them to write out the full name of an instance method, e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "9f7ed7dd8a2677441b7b53e778c35b9e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "learning so far, you have modified strings and other objects in various ways For example, the #times loop and #upto loop that you learned about in the Loops lesson are both methods that are included as part of Ruby's Integer class If you're wondering about all of the pound signs (#), they’re just the convention for writing out Ruby instance methods We can use them to write out the full name of an instance method, eg , Integer#upto, or just the method name, e g , #upto, depending on the context Note that in the development world, you shouldn't call these hashtags If you want to be super awesome, though, you can call them \"octothorpes\" That word is totally trending Methods are typically called by adding method_name after an instance of the object that contains that method ruby\n\"anything\" reverse\nIn this case, #reverse is a built-in method for String objects However, there are also some built-in methods that Ruby makes globally accessible, such as print and puts These methods are called with just their name and any arguments (If you're super curious, these methods are made globally available by the Kernel module through the Object class, but that's far more than you need to know right now )\nruby\nputs \"anything\" #=> anything\nIt's worth noting that in most languages, arguments are passed to methods by wrapping them in parentheses () In Ruby, however, the parentheses are generally optional We could rewrite the above code as puts(\"anything\"), which Ruby would interpret in the same way Creating a method\nYou can create your own custom methods in Ruby using the following syntax:\n```ruby\ndef my_name\n\"Joe Smith\"\nend\nputs my_name    #=> \"Joe Smith\"\n```\nLet's break this example down:\ndef is a built-in keyword that tells Ruby that this is the start of a method definition my_name is the name of your new method You can name your methods almost anything you want, but there are some constraints and conventions, which are described in the next section \"Joe Smith\" is the code inside the method body All of the logic for your method is contained in the indented lines of the method body This particular method returns a string when the method is called end is a built-in keyword that tells Ruby that this is the end of the method definition To call the method, you need to use its name, as shown in the last line of the example",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "26a61aedabd7af9b7481ee62057a9f7a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "the next section \"Joe Smith\" is the code inside the method body All of the logic for your method is contained in the indented lines of the method body This particular method returns a string when the method is called end is a built-in keyword that tells Ruby that this is the end of the method definition To call the method, you need to use its name, as shown in the last line of the exampleMethod names\nAs mentioned above, you can name your methods almost anything you want, but you shouldn't pick names haphazardly There are certain conventions that are recommended in order to improve the readability and maintainability of your code Your method names can use numbers, capital letters, lowercase letters, and the special characters _, , , and = Just like with variable names in Ruby, the convention for a method name with multiple words is to use snake_case, separating words with underscores It's good practice to start the method name with a lower-case character, because names that start with capital letters are constants in Ruby Here are some things you are not allowed to do with your method names:\nYou cannot name your method one of Ruby’s approximately 40 reserved words, such as end, while, or for You cannot use any symbols other than _, , , and = You cannot use , , or = anywhere other than at the end of the name You cannot begin a method name with a number Here are some examples of valid and invalid method names:\nruby\nmethod_name      # valid\n_name_of_method  # valid\n1_method_name    # invalid\nmethod_27        # valid\nmethod _name     # invalid\nmethod_name # valid\nbegin            # invalid (Ruby reserved word)\nbegin_count      # valid\nCan you tell why some of these names are invalid In general, short but descriptive is the name of the naming game You want to be able to tell what a method is expected to do based on its name, so please don't name your method do_stuff If your method does so many things that you feel it requires a very long name, then your method should probably be broken up into several smaller and simpler methods Ideally, each method should do only one thing This practice will pay dividends down the road in terms of readability, scalability, and maintainability (It also makes testing your code a lot easier, which will be covered in a later lesson )\nParameters and arguments\nOf course, not all methods are as basic as the my_name example method above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "4ffd8ebebe5a38276ae48aae224722af",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "a very long name, then your method should probably be broken up into several smaller and simpler methods Ideally, each method should do only one thing This practice will pay dividends down the road in terms of readability, scalability, and maintainability (It also makes testing your code a lot easier, which will be covered in a later lesson ) Parameters and arguments Of course, not all methods are as basic as the my_name example method aboveAfter all, what good are methods if you can't interact with them When you want to return something other than a fixed result, you need to give your methods parameters Parameters are variables that your method will receive when it is called You can have more meaningful and useful interactions with your methods by using parameters to make them more versatile ```ruby\ndef greet(name)\n\"Hello, \" + name + \" \"\nend\nputs greet(\"John\") #=> Hello, John ```\nIn this example, name is a parameter that the greet method uses to return a more specific greeting The method was called with the argument \"John\", which returns the string \"Hello John \"\nIf you're wondering what the differences are between an argument and a parameter, parameters act as placeholder variables in the template of your method, whereas arguments are the actual values that get passed to the method when it is called Thus, in the example above, name is a parameter and \"John\" is an argument The two terms are commonly used interchangeably, though, so don't worry too much about this distinction Default parameters\nWhat if you don't always want to provide arguments for each parameter that your method accepts That's where default parameters can be useful Going back to our example above, what happens if we don't know the person's name We can change our greet method to use a default name of \"stranger\":\n```ruby\ndef greet(name = \"stranger\")\n\"Hello, \" + name + \" \"\nend\nputs greet(\"Jane\") #=> Hello, Jane puts greet #=> Hello, stranger ```\nWhat methods return\nAn important detail that a programmer must learn is understanding what your methods return Having a good understanding of what your methods are returning is an important part of debugging your code when things don't behave as expected How do we tell our methods what to return Let's revisit our my_name example method:\n```ruby\ndef my_name\n\"Joe Smith\"\nend\nputs my_name #=> \"Joe Smith\"\n```\nOur my_name method returns \"Joe Smith\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "8addef46613f422b28a52140b74c7f9e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "stranger ``` What methods return An important detail that a programmer must learn is understanding what your methods return Having a good understanding of what your methods are returning is an important part of debugging your code when things don't behave as expected How do we tell our methods what to return Let's revisit our my_name example method: ```ruby def my_name \"Joe Smith\" end puts my_name #=> \"Joe Smith\" ``` Our my_name method returns \"Joe Smith\"This may seem obvious because it's the only thing inside the method In most languages, however, such a method would not return anything because it does not have an explicit return statement, which is a statement that starts with the return keyword The above example could just as easily be written with an explicit return:\n```ruby\ndef my_name\nreturn \"Joe Smith\"\nend\nputs my_name #=> \"Joe Smith\"\n```\nRuby is one of the few languages that offers implicit return for methods, which means that a Ruby method will return the last expression that was evaluated even without the return keyword The last expression that was evaluated may or may not be the last line in the code, as you can see in the following example:\n```ruby\ndef even_odd(number)\nif number % 2 == 0\n\"That is an even number \"\nelse\n\"That is an odd number \"\nend\nend\nputs even_odd(16) #=>  That is an even number puts even_odd(17) #=>  That is an odd number ```\nHere, the method's return is dependent on the result of the if condition If the argument is an even number, the expression inside the else statement never gets evaluated, so the even_odd method returns \"That is an even number \"\nEven though Ruby offers the ease of using implicit returns, explicit returns still have a place in Ruby code An explicit return (using the keyword return) essentially tells Ruby, \"This is the last expression you should evaluate \" This example shows how using return stops the method from continuing:\n```ruby\ndef my_name\nreturn \"Joe Smith\"\n\"Jane Doe\"\nend\nputs my_name #=> \"Joe Smith\"\n```\nFor example, an explicit return can be useful when you want to write a method that checks for input errors before continuing ```ruby\ndef even_odd(number)\nunless number is_a Numeric\nreturn \"A number was not entered \"\nend\nif number % 2 == 0\n\"That is an even number \"\nelse\n\"That is an odd number",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "5fdbc9d0e15b8ee42c9bf237e95402ff",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "return stops the method from continuing: ```ruby def my_name return \"Joe Smith\" \"Jane Doe\" end puts my_name #=> \"Joe Smith\" ``` For example, an explicit return can be useful when you want to write a method that checks for input errors before continuing ```ruby def even_odd(number) unless number is_a Numeric return \"A number was not entered \" end if number % 2 == 0 \"That is an even number \" else \"That is an odd number\"\nend\nend\nputs even_odd(20) #=>  That is an even number puts even_odd(\"Ruby\") #=>  A number was not entered ```\nNow, try removing the explicit return from the method above Does the method return what you expected Difference between puts and return\nA common source of confusion for new programmers is the difference between puts and return puts is a method that prints whatever argument you pass it to the console return is the final output of a method that you can use in other places throughout your code For example, we can write a method that calculates the square of a number and then puts the output to the console ruby\ndef puts_squared(number)\nputs number * number\nend\nThis method only prints the value that it calculated to the console, but it doesn't return that value If we then write x = puts_squared(20), the method will print 400 in the console, but the variable x will be assigned a value of nil (If you need a refresher on this, go back and review the Ruby Input and Output lesson )\nNow, let's write the same method but with an implicit return instead of puts (Using an explicit return will act exactly the same in this example )\nruby\ndef return_squared(number)\nnumber * number\nend\nWhen we run the return_squared method, it won't print any output to the console Instead, it will return the result in a way that allows it to be used in the rest of your code We can save the output of running this method in a variable (x in the code below) and use that variable in a variety of ways If we would still like to see the result of the method in the console, we can puts that variable to the console using string interpolation ```ruby\nx = return_squared(20) #=> 400\ny = 100\nsum = x + y #=> 500\nputs \"The sum of #{x} and #{y} is #{sum}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "3d0bbd040087d7c1dee4dd9e33d549d8",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "can save the output of running this method in a variable (x in the code below) and use that variable in a variety of ways If we would still like to see the result of the method in the console, we can puts that variable to the console using string interpolation ```ruby x = return_squared(20) #=> 400 y = 100 sum = x + y #=> 500 puts \"The sum of #{x} and #{y} is #{sum}\"\n=> The sum of 400 and 100 is 500 ```\nChaining methods\nOne of the magical properties of methods that allows you to write very concise code is being able to chain methods together This can be done using Ruby's built-in methods or with methods that you create ```ruby\nphrase = [\"be\", \"to\", \"not\", \"or\", \"be\", \"to\"]\nputs phrase reverse join(\" \") capitalize\n=> \"To be or not to be\"\n```\nChaining methods together like this effectively has each method call build off of the outcome of the previous method in the chain The process that takes place essentially produces the following steps:\nruby\n[\"be\", \"to\", \"not\", \"or\", \"be\", \"to\"] reverse\n= [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"] join(\" \")\n= \"to be or not to be\" capitalize\n= \"To be or not to be\"\nPredicate methods\nYou will sometimes encounter built-in Ruby methods that have a question mark ( ) at the end of their name, such as even , odd , or between These are all predicate methods, which is a naming convention that Ruby uses for methods that return a Boolean, that is, they return either true or false ```ruby\nputs 5 even #=> false\nputs 6 even #=> true\nputs 17 odd #=> true\nputs 12 between (10, 15)  #=> true\n```\nYou can also create your own method with a at the end of its name to indicate that it returns a Boolean Ruby doesn't enforce this naming convention, but you will thank yourself later for following this guideline Bang methods\nObserve the example below:\n```ruby\nwhisper = \"HELLO EVERYBODY\"\nputs whisper downcase #=> \"hello everybody\"\nputs whisper #=> \"HELLO EVERYBODY\"\n```\nWhat gives We thought we downcased that thing So why was it back to all uppercase when we called it again",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "7cccc854fc061ca9a8e240b743d0e742",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "method with a at the end of its name to indicate that it returns a Boolean Ruby doesn't enforce this naming convention, but you will thank yourself later for following this guideline Bang methods Observe the example below: ```ruby whisper = \"HELLO EVERYBODY\" puts whisper downcase #=> \"hello everybody\" puts whisper #=> \"HELLO EVERYBODY\" ``` What gives We thought we downcased that thing So why was it back to all uppercase when we called it againWhen we call a method on an object, such as our whisper string above, it does not modify the original value of that object A general rule in programming is that you do not want your methods to overwrite the objects that you call them on This protects you from irreversibly overwriting your data by accident You are able to overwrite your data by explicitly re-assigning a variable (such as whisper = whisper downcase) Another way to do this type of reassignment is with bang methods, which are denoted with an exclamation mark ( ) at the end of the method name By adding a to the end of your method, you indicate that this method performs its action and simultaneously overwrites the value of the original object with the result ruby\nputs whisper downcase #=> \"hello everybody\"\nputs whisper #=> \"hello everybody\"\nWriting whisper downcase is the equivalent of writing whisper = whisper downcase Assignment\n1 For a good introduction to all the different concepts related to methods, read the [Methods chapter](https://launchschool com/books/ruby/read/methods) from Launch School's *Introduction to Programming with Ruby* Make sure to do the exercises at the end of the chapter too 1 To get a different take, read the part of the Objects section that discusses [Methods](http://ruby-for-beginners rubymonstas org/objects/methods html) from Ruby Monsta's *Ruby for Beginners* 1 For more depth on how you can write your own methods, read the section on [Writing Methods](http://ruby-for-beginners rubymonstas org/writing_methods html) from Ruby Monsta's *Ruby for Beginners* 1 Complete the method exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises) that you previously cloned Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "b36ffeca360355045e3ccb58fb569265",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
    "source_type": "git_repo",
    "title": "=> The sum of 400 and 100 is 500.",
    "content": "read the part of the Objects section that discusses [Methods](http://ruby-for-beginners rubymonstas org/objects/methods html) from Ruby Monsta's *Ruby for Beginners* 1 For more depth on how you can write your own methods, read the section on [Writing Methods](http://ruby-for-beginners rubymonstas org/writing_methods html) from Ruby Monsta's *Ruby for Beginners* 1 Complete the method exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises) that you previously cloned Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How would you create your own method How would you call your new method How do you pass variables to your method How do you define default parameters for your method What is the difference between an explicit return and an implicit return What is the difference between puts and return How do you chain multiple methods together Give an example of a valid method name and an invalid method name What is snake case What are some of Ruby's reserved words What do you call a method that returns true or false What is their naming convention What do bang methods do What is their naming convention Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Check out the Ruby's Method Arguments article from Ruby Guides to learn about advanced types of method arguments such as variable, keyword and optional For a deeper look at methods, read the Methods chapter from the Bastards Book of Ruby Try to complete the exercises throughout the chapter Read this explanation on Stack Overflow about the subtle differences between methods and functions, and how they can differ between programming languages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19221,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\methods.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "c8704b46dfd170f424da7cf525fcd834",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "Introduction\nThis lesson is going to build on your knowledge of arrays and hashes As you have seen, arrays and hashes are great ways to store data However, sometimes the data is more complex and needs more structure than a basic array or hash offers Let's take a look at how you can use nested arrays and nested hashes to store more complex data Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe a nested array and hash Explain what data is useful to store in a nested array and hash Explain how to access data in a nested array and hash Explain why the #dig method is useful Explain how to add data to a nested array and hash Explain how to delete data in a nested array and hash Explain how to create a new nested array that is not mutable Explain how to iterate over a nested array and hash Nested arrays\nArrays can contain any type of data, including other arrays An array that contains other arrays is called a nested array, or a multidimensional array Nested arrays can be useful to store groups of similar data or positional data The following nested array of test scores is storing groups of similar data and the teacher mailboxes is storing groups of positional data ```ruby\ntest_scores = [\n[97, 76, 79, 93],\n[79, 84, 76, 79],\n[88, 67, 64, 76],\n[94, 55, 67, 81]\n]\nteacher_mailboxes = [\n[\"Adams\", \"Baker\", \"Clark\", \"Davis\"],\n[\"Jones\", \"Lewis\", \"Lopez\", \"Moore\"],\n[\"Perez\", \"Scott\", \"Smith\", \"Young\"]\n]\n```\nAccessing elements\nYou already know that every element in an array has an index Accessing a specific element within a nested array is done by calling array[x][y], where x is the index of the nested element and y is the index inside of the nested element ```ruby\nteacher_mailboxes[0][0]\n=> \"Adams\"\nteacher_mailboxes[1][0]\n=> \"Jones\"\nteacher_mailboxes[2][0]\n=> \"Perez\"\n```\nYou can also use negative indices to return elements from the end of an array, starting at [-1]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "0d8d860eaa38175dcb97b6cde3c8e4cf",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "``` Accessing elements You already know that every element in an array has an index Accessing a specific element within a nested array is done by calling array[x][y], where x is the index of the nested element and y is the index inside of the nested element ```ruby teacher_mailboxes[0][0] => \"Adams\" teacher_mailboxes[1][0] => \"Jones\" teacher_mailboxes[2][0] => \"Perez\" ``` You can also use negative indices to return elements from the end of an array, starting at [-1]```ruby\nteacher_mailboxes[0][-1]\n=> \"Davis\"\nteacher_mailboxes[-1][0]\n=> \"Perez\"\nteacher_mailboxes[-1][-2]\n=> \"Smith\"\n```\nIf you try to access an index of a nonexistent nested element, it will raise an NoMethodError, because the nil class does not have a [] method However, just like a regular array, if you try to access a nonexistent index inside of an existing nested element, it will return nil ```ruby\nteacher_mailboxes[3][0]\n=> NoMethodError\nteacher_mailboxes[0][4]\n=> nil\n```\nIf you want a nil value returned when trying to access an index of a nonexistent nested element, you can use the #dig method This method can also be used when accessing a nonexistent index inside of an existing nested element ```ruby\nteacher_mailboxes dig(3, 0)\n=> nil\nteacher_mailboxes dig(0, 4)\n=> nil\n```\nCreating a new nested array\nNow that you have seen how to access values inside a nested array, we need to take a step back to look at creating a new nested array In a previous lesson you were taught to create a new array, by calling the Array new method with up to 2 optional arguments (initial size and default value), like Array new(3) or Array new(3, 7) However, there is one major \"gotcha\" that is important to point out According to the Array class documentation, the second optional argument for Array new (the default value), should only be used with an immutable (unable to be changed) object such as a number, boolean value, or symbol Using a string, array, hash, or other mutable object may result in confusing behavior because each default value in the array will actually be a reference to the same default value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "e8ec6e11c1360159b63c0c0b5127b1e5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "one major \"gotcha\" that is important to point out According to the Array class documentation, the second optional argument for Array new (the default value), should only be used with an immutable (unable to be changed) object such as a number, boolean value, or symbol Using a string, array, hash, or other mutable object may result in confusing behavior because each default value in the array will actually be a reference to the same default valueTherefore, any change to one of the elements will change all of the elements in the array To create an immutable array of mutable objects (string, array, hash, etc), you will need to pass the default value for Array new via a block, using curly braces, instead of the second optional argument The code in the block gets evaluated for every slot in the array, creating multiple objects to initialize the array with, rather than references to the same object To see this for yourself, let's look at two examples This first example uses the second optional argument for the default value ```ruby\nmutable = Array new(3, Array new(2))\n=> [[nil, nil], [nil, nil], [nil, nil]]\nmutable[0][0] = 1000\n=> 1000\nmutable\n=> [[1000, nil], [1000, nil], [1000, nil]]\n```\nChanging the value of the first element in the first nested array, causes the first element to change in all three nested arrays This same behavior will happen with strings, hashes, or any other mutable objects Now, let's take a look at an example that omits the second optional argument and instead passes in the mutable value in a block ```ruby\nimmutable = Array new(3) { Array new(2) }\n=> [[nil, nil], [nil, nil], [nil, nil]]\nimmutable[0][0] = 1000\n=> 1000\nimmutable\n=> [[1000, nil], [nil, nil], [nil, nil]]\n```\nChanging the value of the first element in the first nested array does not cause the value to change in any other nested array Adding and removing elements\nYou can add another element to the end of a nested array using the #push method or the shovel operator << If you want to add an element to a specific nested array, you will need to specify the index of the nested array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "31227e2c45cf56400799fad18a6951b0",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "nil], [nil, nil]] ``` Changing the value of the first element in the first nested array does not cause the value to change in any other nested array Adding and removing elements You can add another element to the end of a nested array using the #push method or the shovel operator << If you want to add an element to a specific nested array, you will need to specify the index of the nested array```ruby\ntest_scores << [100, 99, 98, 97]\n=> [[97, 76, 79, 93], [79, 84, 76, 79], [88, 67, 64, 76], [94, 55, 67, 81], [100, 99, 98, 97]]\ntest_scores[0] push(100)\n=> [97, 76, 79, 93, 100]\ntest_scores\n=> [[97, 76, 79, 93, 100], [79, 84, 76, 79], [88, 67, 64, 76], [94, 55, 67, 81], [100, 99, 98, 97]]\n```\nUsing this similar syntax, you can add or remove elements from the entire nested array or from a specific nested element ```ruby\ntest_scores pop\n=> [100, 99, 98, 97]\ntest_scores[0] pop\n=> 100\ntest_scores\n=> [[97, 76, 79, 93], [79, 84, 76, 79], [88, 67, 64, 76], [94, 55, 67, 81]]\n```\nIterating over a nested array\nLet's break down how to iterate over a nested array using the #each_with_index method You might find it helpful to think of a nested array as having rows and columns Each row is the nested element and each column is the index of the nested element When we iterate over the teacher_mailboxes example, each element will be one row ```ruby\nteacher_mailboxes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "e52b4e5769d2b7e5473d05624989fe0c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "79], [88, 67, 64, 76], [94, 55, 67, 81]] ``` Iterating over a nested array Let's break down how to iterate over a nested array using the #each_with_index method You might find it helpful to think of a nested array as having rows and columns Each row is the nested element and each column is the index of the nested element When we iterate over the teacher_mailboxes example, each element will be one row ```ruby teacher_mailboxeseach_with_index do |row, row_index|\nputs \"Row:#{row_index} = #{row}\"\nend\n=> Row:0 = [\"Adams\", \"Baker\", \"Clark\", \"Davis\"]\n=> Row:1 = [\"Jones\", \"Lewis\", \"Lopez\", \"Moore\"]\n=> Row:2 = [\"Perez\", \"Scott\", \"Smith\", \"Young\"]\n=> [[\"Adams\", \"Baker\", \"Clark\", \"Davis\"], [\"Jones\", \"Lewis\", \"Lopez\", \"Moore\"], [\"Perez\", \"Scott\", \"Smith\", \"Young\"]]\n```\nTo iterate over the individual elements inside of each row, you will need to nest another enumerable method inside ```ruby\nteacher_mailboxes each_with_index do |row, row_index|\nrow each_with_index do |teacher, column_index|\nputs \"Row:#{row_index} Column:#{column_index} = #{teacher}\"\nend\nend\n=> Row:0 Column:0 = Adams\n=> Row:0 Column:1 = Baker\n=> Row:0 Column:2 = Clark\n=> Row:0 Column:3 = Davis\n=> Row:1 Column:0 = Jones\n=> Row:1 Column:1 = Lewis\n=> Row:1 Column:2 = Lopez\n=> Row:1 Column:3 = Moore\n=> Row:2 Column:0 = Perez\n=> Row:2 Column:1 = Scott\n=> Row:2 Column:2 = Smith\n=> Row:2 Column:3 = Young\n=> [[\"Adams\", \"Baker\", \"Clark\", \"Davis\"], [\"Jones\", \"Lewis\", \"Lopez\", \"Moore\"], [\"Perez\", \"Scott\", \"Smith\", \"Young\"]]\n```\nAlthough these examples are a bit contrived, it is important to note that if we only need each teacher's name it would be beneficial to use #flatten before iterating",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "24284f37716dc83cddba899d88f5fd46",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "Column:1 = Lewis => Row:1 Column:2 = Lopez => Row:1 Column:3 = Moore => Row:2 Column:0 = Perez => Row:2 Column:1 = Scott => Row:2 Column:2 = Smith => Row:2 Column:3 = Young => [[\"Adams\", \"Baker\", \"Clark\", \"Davis\"], [\"Jones\", \"Lewis\", \"Lopez\", \"Moore\"], [\"Perez\", \"Scott\", \"Smith\", \"Young\"]] ``` Although these examples are a bit contrived, it is important to note that if we only need each teacher's name it would be beneficial to use #flatten before iterating```ruby\nteacher_mailboxes flatten each do |teacher|\nputs \"#{teacher} is amazing \"\nend\n=> Adams is amazing => Baker is amazing => Clark is amazing => Davis is amazing => Jones is amazing => Lewis is amazing => Lopez is amazing => Moore is amazing => Perez is amazing => Scott is amazing => Smith is amazing => Young is amazing => [\"Adams\", \"Baker\", \"Clark\", \"Davis\", \"Jones\", \"Lewis\", \"Lopez\", \"Moore\", \"Perez\", \"Scott\", \"Smith\", \"Young\"]\n```\nNow let's take a look at a more complicated example of nesting two predicate enumerables together Using the above nested array of test scores, let's determine if any student scored higher than 80 on everything ```ruby\ntest_scores = [[97, 76, 79, 93], [79, 84, 76, 79], [88, 67, 64, 76], [94, 55, 67, 81]]\n=> [[97, 76, 79, 93], [79, 84, 76, 79], [88, 67, 64, 76], [94, 55, 67, 81]]\ntest_scores any do |scores|\nscores all { |score| score > 80 }\nend\n=> false\n```\nThis seems pretty straight-forward It returns false, because none of the nested arrays have scores that are all over 80 What do you think will happen if we switch #any and #all Do you think we will get the same results ```ruby\ntest_scores all do |scores|\nscores any",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "d6b33ff10595c73f9258e997c5bc7a90",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "[79, 84, 76, 79], [88, 67, 64, 76], [94, 55, 67, 81]] test_scores any do |scores| scores all { |score| score > 80 } end => false ``` This seems pretty straight-forward It returns false, because none of the nested arrays have scores that are all over 80 What do you think will happen if we switch #any and #all Do you think we will get the same results ```ruby test_scores all do |scores| scores any{ |score| score > 80 }\nend\n=> true\n```\nThe results are different, because now it is determining if all of the nested arrays contain any number over 80 This returns true, because each of the nested arrays have at least one number over 80 Nested hashes\nThe hashes that you've seen so far have single key/value pairs However, just like arrays, they can be nested, or multidimensional Nested hashes are a very common way to store complex associated data ruby\nvehicles = {\nalice: {year: 2019, make: \"Toyota\", model: \"Corolla\"},\nblake: {year: 2020, make: \"Volkswagen\", model: \"Beetle\"},\ncaleb: {year: 2020, make: \"Honda\", model: \"Accord\"}\n}\nAccessing data\nAccessing a specific element in a nested hash is very similar to a nested array It is done by calling hash[:x][:y], where :x is the key of the hash and :y is the key of the nested hash ```ruby\nvehicles[:alice][:year]\n=> 2019\nvehicles[:blake][:make]\n=> \"Volkswagen\"\nvehicles[:caleb][:model]\n=> \"Accord\"\n```\nSimilar to nested arrays, if you try to access a key in a nonexistent nested hash, it will raise an NoMethodError, therefore you may want to use the #dig method As expected, if you try to access a nonexistent key in an existing nested hash, it will return nil ```ruby\nvehicles[:zoe][:year]\n=> NoMethodError\nvehicles dig(:zoe, :year)\n=> nil\nvehicles[:alice][:color]\n=> nil\nvehicles dig(:alice, :color)\n=> nil\n```\nAdding and removing data\nYou can add more nested hashes, just like a regular hash",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "27c68a05ccdb9456d1b77ec88740fce5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "try to access a key in a nonexistent nested hash, it will raise an NoMethodError, therefore you may want to use the #dig method As expected, if you try to access a nonexistent key in an existing nested hash, it will return nil ```ruby vehicles[:zoe][:year] => NoMethodError vehicles dig(:zoe, :year) => nil vehicles[:alice][:color] => nil vehicles dig(:alice, :color) => nil ``` Adding and removing data You can add more nested hashes, just like a regular hashLet's say Dave just bought a new vehicle and we want to add it to the list ```ruby\nvehicles[:dave] = {year: 2021, make: \"Ford\", model: \"Escape\"}\n=> {:year=>2021, :make=>\"Ford\", :model=>\"Escape\"}\nvehicles\n=> {:alice=>{:year=>2019, :make=>\"Toyota\", :model=>\"Corolla\"}, :blake=>{:year=>2020, :make=>\"Volkswagen\", :model=>\"Beetle\"}, :caleb=>{:year=>2020, :make=>\"Honda\", :model=>\"Accord\"}, :dave=>{:year=>2021, :make=>\"Ford\", :model=>\"Escape\"}}\n```\nYou can also add an element to one of the nested hashes Let's say that Dave really loves his new Escape and thinks we should keep track of the color of the vehicles To add a new key/value pair to a nested hash, specify the key of the nested hash right before naming the new key ```ruby\nvehicles[:dave][:color] = \"red\"\n=> \"red\"\nvehicles\n=> {:alice=>{:year=>2019, :make=>\"Toyota\", :model=>\"Corolla\"}, :blake=>{:year=>2020, :make=>\"Volkswagen\", :model=>\"Beetle\"}, :caleb=>{:year=>2020, :make=>\"Honda\", :model=>\"Accord\"}, :dave=>{:year=>2021, :make=>\"Ford\", :model=>\"Escape\", :color=>\"red\"}}\n```\nDeleting one of the nested hashes will be just like a regular hash Let's say Blake has decided to sell his Beetle and backpack across Europe So, let's delete Blake's car ```ruby\nvehicles",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "ab1269cb11e8a55c0aeeb7e32b458440",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "a new key/value pair to a nested hash, specify the key of the nested hash right before naming the new key ```ruby vehicles[:dave][:color] = \"red\" => \"red\" vehicles => {:alice=>{:year=>2019, :make=>\"Toyota\", :model=>\"Corolla\"}, :blake=>{:year=>2020, :make=>\"Volkswagen\", :model=>\"Beetle\"}, :caleb=>{:year=>2020, :make=>\"Honda\", :model=>\"Accord\"}, :dave=>{:year=>2021, :make=>\"Ford\", :model=>\"Escape\", :color=>\"red\"}} ``` Deleting one of the nested hashes will be just like a regular hash Let's say Blake has decided to sell his Beetle and backpack across Europe So, let's delete Blake's car ```ruby vehiclesdelete(:blake)\n=> {:year=>2020, :make=>\"Volkswagen\", :model=>\"Beetle\"}\nvehicles\n=> {:alice=>{:year=>2019, :make=>\"Toyota\", :model=>\"Corolla\"}, :caleb=>{:year=>2020, :make=>\"Honda\", :model=>\"Accord\"}, :dave=>{:year=>2021, :make=>\"Ford\", :model=>\"Escape\", :color=>\"red\"}}\n```\nTo delete one of the key/value pairs inside of a nested hash, you first specify the key of the hash Let's say Dave decided that we don't need to specify the color of his vehicle Therefore, we specify vehicles[:dave] before we indicate the key of the nested hash to delete ```ruby\nvehicles[:dave] delete(:color)\n=> \"red\"\nvehicles\n=> {:alice=>{:year=>2019, :make=>\"Toyota\", :model=>\"Corolla\"}, :caleb=>{:year=>2020, :make=>\"Honda\", :model=>\"Accord\"}, :dave=>{:year=>2021, :make=>\"Ford\", :model=>\"Escape\"}}\n```\nMethods\nThere are many helpful methods to use with nested hashes Once you know what data you need from a nested hash, you might find that browsing through the documentation and experimenting with them in IRB is the best way for you to understand how they work Let's look at an example using the vehicles nested hash Let's say that we want to know who owns vehicles that are from 2020 or newer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "a265515219c50174c74b60fc51e57fad",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": ":make=>\"Ford\", :model=>\"Escape\"}} ``` Methods There are many helpful methods to use with nested hashes Once you know what data you need from a nested hash, you might find that browsing through the documentation and experimenting with them in IRB is the best way for you to understand how they work Let's look at an example using the vehicles nested hash Let's say that we want to know who owns vehicles that are from 2020 or newerAt first glance in the documentation, it looks like #select would be a great method to use ```ruby\nvehicles select { |name, data| data[:year] >= 2020 }\n=> {:caleb=>{:year=>2020, :make=>\"Honda\", :model=>\"Accord\"}, :dave=>{:year=>2021, :make=>\"Ford\", :model=>\"Escape\"}}\n```\nYes, using #select gives us the information that we need However, what if we only want the names of the owners and not another nested hash Let's keep looking through the documentation to see what else we find The #collect method sounds very useful for this situation Let's collect the names if the year is 2020 or newer ```ruby\nvehicles collect { |name, data| name if data[:year] >= 2020 }\n=> [nil, :caleb, :dave]\n```\nUsing #collect gets us a lot closer to only having the names of the new vehicle owners If you look at this method in the documentation you will see that #collect and #map have the same functionality Both of these methods use the return value of each iteration, so when the if statement is false, it will return a nil value Nil values can cause problems down the road, so let's look through the documentation to see if we can find a method to help solve this problem The #compact method returns an array (or hash) without nil values, so let's chain it on the end of the block ```ruby\nvehicles collect { |name, data| name if data[:year] >= 2020 } compact\n=> [:caleb, :dave]\n```\nYes, using #collect and #compact returns the data that we want As you can see, chaining methods can be very useful However, if we continue exploring the documentation, we will find another method that combines the functionality of these two methods Ruby version 2 7 added a new enumerable method called #filter_map that sounds very useful for this situation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "d2c6ea8b8c0d260979cacee0844bd786",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "```ruby vehicles collect { |name, data| name if data[:year] >= 2020 } compact => [:caleb, :dave] ``` Yes, using #collect and #compact returns the data that we want As you can see, chaining methods can be very useful However, if we continue exploring the documentation, we will find another method that combines the functionality of these two methods Ruby version 2 7 added a new enumerable method called #filter_map that sounds very useful for this situation```ruby\nvehicles filter_map { |name, data| name if data[:year] >= 2020 }\n=> [:caleb, :dave]\n```\nAmazing We have found a great solution to returning an array that only contains the names of the owners of vehicles from 2020 or newer Plus, we got experience using other methods that you will probably use in the future We have found some really useful methods by exploring the documentation when we have a specific use case in mind Assignment\n1 Read more about [using a hash with a nested array](https://web archive org/web/20220525215038/https://learn co/lessons/nested-hash-iteration) 1 This Stack Overflow answer explains more about [using arrays with a nested hash](https://stackoverflow com/questions/50529389/manipulating-output-from-an-array-of-nested-hashes-in-ruby) 1 Complete the nested collections exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a nested array What data is useful to store in a nested array What is a nested hash What data is useful to store in a nested hash How do you access elements in a nested array How do you access data in a nested hash Why is the #dig method useful How do you add elements to a nested array How do you add data to a nested hash How do you delete elements from a nested array How do you delete data in a nested hash How do you create a new nested array that is not mutable How do you iterate over a nested array How do you iterate over a nested hash Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "5bdc4aaa1df77cbe6a38b8171a333e7f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
    "source_type": "git_repo",
    "title": "=> \"Adams\"",
    "content": "to a nested array How do you add data to a nested hash How do you delete elements from a nested array How do you delete data in a nested hash How do you create a new nested array that is not mutable How do you iterate over a nested array How do you iterate over a nested hash Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalIt looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17550,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\nested_collections.md",
      "source_type": "git_repo"
    },
    "token_count": 100,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "01a89c07e79a1ea4629004bb0d79ac57",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> true",
    "content": "Introduction\nIn the previous lesson, you learned about some really handy enumerable methods like #each, #map, and #select In this lesson, we're going to learn about even more enumerable methods Woohoo The party never ends here at The Odin Project This time, we're focusing on a particular subset of enumerable methods: the predicate enumerable methods You should recall from the Methods lesson that a predicate method is indicated by a question mark ( ) at the end of the method name and returns either true or false Again, we won't be going through all of the predicate enumerable methods, so be sure to have a look at the Ruby docs to see what else Enumerable offers For all of the examples throughout this lesson, feel free to follow along in irb or any appropriate online REPL environment to get a better feel for how they work Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe what a predicate enumerable method is Explain how the #include method works Explain how the #any method works Explain how the #all method works Explain how the #none method works The include method\nThe #include method works exactly like you think it should If we want to know whether a particular element exists in an array, we can use the #include method This method will return true if the element you pass as an argument to #include exists in the array or hash; otherwise, it will return false First, let's explore how we would achieve this with the #each method:\n```ruby\nnumbers = [5, 6, 7, 8]\nelement = 6\nresult = false\nnumbers each do |number|\nif number == element\nresult = true\nbreak\nend\nend\nresult\n=> true\nelement = 3\nresult = false\nnumbers each do |number|\nif number == element\nresult = true\nbreak\nend\nend\nresult\n=> false\n```\nIf you notice, there is a `break` statement in the `if` condition so that loop stops executing once the number is found Otherwise it would still run over all numbers in the array which is not needed as we have already found the element Using #include , this code can be greatly simplified:\n```ruby\nnumbers = [5, 6, 7, 8]\nnumbers include (6)\n=> true\nnumbers include",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7828,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "707201f910bfb6f6342cea6666b81d49",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> true",
    "content": "= true break end end result => false ``` If you notice, there is a `break` statement in the `if` condition so that loop stops executing once the number is found Otherwise it would still run over all numbers in the array which is not needed as we have already found the element Using #include , this code can be greatly simplified: ```ruby numbers = [5, 6, 7, 8] numbers include (6) => true numbers include(3)\n=> false\n```\nFor another example, let's return to the friends and invited_friends arrays from the previous lesson:\n```ruby\nfriends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']\ninvited_list = friends select { |friend| friend = 'Brian' }\ninvited_list include ('Brian')\n=> false\n```\nThe any method\nYou might also be able to guess what the #any method does It returns true if any elements in your array or hash match the condition within the block; otherwise, it will return false Let's say we want to see if there is any number greater than 500 or less than 20 in an array of numbers First, let's see how we could achieve this using #each ```ruby\nnumbers = [21, 42, 303, 499, 550, 811]\nresult = false\nnumbers each do |number|\nif number > 500\nresult = true\nbreak\nend\nend\nresult\n=> true\nnumbers = [21, 42, 303, 499, 550, 811]\nresult = false\nnumbers each do |number|\nif number < 20\nresult = true\nbreak\nend\nend\nresult\n=> false\n```\nUsing #any , this code can be greatly simplified:\n```ruby\nnumbers = [21, 42, 303, 499, 550, 811]\nnumbers any { |number| number > 500 }\n=> true\nnumbers any { |number| number < 20 }\n=> false\n```\nThe all method\nThe all method is also fairly intuitive It only returns true if all the elements in your array or hash match the condition you set within the block; otherwise, it will return false Let's say that we want to check whether all the words in our list are more than 3 characters or 6 characters long",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7828,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "09ce7306fa8139c91825ae8b0034e79f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> true",
    "content": "number > 500 } => true numbers any { |number| number < 20 } => false ``` The all method The all method is also fairly intuitive It only returns true if all the elements in your array or hash match the condition you set within the block; otherwise, it will return false Let's say that we want to check whether all the words in our list are more than 3 characters or 6 characters longFirst,let's see how we could achieve this using #each:\n```ruby\nfruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\nmatches = []\nresult = false\nfruits each do |fruit|\nif fruit length > 3\nmatches push(fruit)\nend\nend\nresult = fruits length == matches length\nresult\n=> true\nfruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\nmatches = []\nresult = false\nfruits each do |fruit|\nif fruit length > 6\nmatches push(fruit)\nend\nend\nresult = fruits length == matches length\nresult\n=> false\n```\nUsing #all , this code can be greatly simplified:\n```ruby\nfruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\nfruits all { |fruit| fruit length > 3 }\n=> true\nfruits all { |fruit| fruit length > 6 }\n=> false\n```\nSpecial note to keep in mind while debugging: #all will return true by default unless the block returns false or nil So if you call #all on an empty array or hash (i e , there are no elements  for the block to evaluate), it will return true The none method\nAs you might expect, #none returns true only if the condition in the block matches none of the elements in your array or hash; otherwise, it returns false First, let's see how this could be achieved using #each You'll notice that this approach is very similar to what we did for #all ```ruby\nfruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\nresult = false\nfruits each do |fruit|\nif fruit length > 10\nresult = false\nbreak\nend\nresult = true\nend\nresult\n=> true\nfruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\nresult = false\nfruits each do |fruit|\nif fruit",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7828,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "768846b420685f67899a12ecf0f562c7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> true",
    "content": "or hash; otherwise, it returns false First, let's see how this could be achieved using #each You'll notice that this approach is very similar to what we did for #all ```ruby fruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"] result = false fruits each do |fruit| if fruit length > 10 result = false break end result = true end result => true fruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"] result = false fruits each do |fruit| if fruitlength > 6\nresult = false\nbreak\nend\nresult = true\nend\nresult\n=> false\n```\nUsing #none , this can be greatly simplified:\n```ruby\nfruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\nfruits none { |fruit| fruit length > 10 }\n=> true\nfruits none { |fruit| fruit length > 6 }\n=> false\n```\nThe one method\nRuby has methods to check whether all, any, or none of the elements in an array match a condition But what if you need exactly one match - no more, no less Ruby has you covered with the #one method, which returns true if the block evaluates to true for exactly one element ```ruby\nfruits = [\"apple\", \"banana\", \"strawberry\", \"pineapple\"]\nfruits one { |fruit| fruit length > 9 }\n=> true\nfruits one { |fruit| fruit length > 2 }\n=> false\n```\nAssignment\n1 Read [How to Use Ruby Any, All, None, and One](https://www rubyguides com/2018/10/any-all-none-one/) for alternative explanations for predicate enumerables 1 Complete the predicate enumerable exercises from the [ruby-exercises repo](https://github com/TheOdinProject/ruby-exercises) that you previously cloned Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why is there a question mark after some method names What does the #include method do What does the #any method do What does the #all method do What does the #none method do Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7828,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "55edfa4c109756e3d1aa1602becdad3c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
    "source_type": "git_repo",
    "title": "=> true",
    "content": "can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why is there a question mark after some method names What does the #include method do What does the #any method do What does the #all method do What does the #none method do Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalIt looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7828,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\predicate_enumerable_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 108,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "eb62bd2cd245974509dedbb8bbde9225",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby_projects\\project_bubble_sort.md",
    "source_type": "git_repo",
    "title": "project_bubble_sort",
    "content": "Introduction\nSorting algorithms are some of the earliest that you typically get exposed to in Computer Science. It may not be immediately obvious how important they are, but it shouldn't be hard to think of some examples where your computer needs to sort some massive datasets during everyday operations.\nOne of the simpler (but more processor-intensive) ways of sorting a group of items in an array is bubble sort, where each element is compared to the one next to it and they are swapped if the one on the left is larger than the one on the right. This continues until the array is eventually sorted.\nCheck out this video from Harvard’s CS50 on Bubble Sort.\nThere's also an entry on Bubble Sort on Wikipedia that's worth taking a look at.\nAssignment\n- Build a method `#bubble_sort` that takes an array and returns a sorted array. It must use the bubble sort methodology (using `#sort` would be pretty pointless, wouldn't it?).\n```ruby\n> bubble_sort([4,3,78,2,0,2])\n=> [0,2,2,3,4,78]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1366,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby_projects\\project_bubble_sort.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "019c497a6a26bb3c5207a5bb750dfeb3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby_projects\\project_caesar_cipher.md",
    "source_type": "git_repo",
    "title": "project_caesar_cipher",
    "content": "Introduction\nBy now you should feel pretty good working with strings, arrays and hashes. We'll do a couple of classic \"intro to programming\" problems in the next few lessons to help solidify your knowledge and get warmed up to working on small projects. You'll need to rely on some of your basic knowledge of conditionals and flow control from the prep work but you shouldn't need to do anything you haven't seen before.\nIf you want to actually write and run your own Ruby code, you can either use IRB from the command line (type `irb` after the prompt), run it from a script file using `$ ruby ./your_file_name_in_the_current_directory.rb`, or use any other appropriate REPL.\nAssignment\nFrom Wikipedia:\nIn cryptography, a Caesar cipher, also known as Caesar's cipher, the shift cipher, Caesar's code or Caesar shift, is one of the simplest and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A, E would become B, and so on. The method is named after Julius Caesar, who used it in his private correspondence.\nHarvard's CS50 class has a video about the Caesar cipher.\nImplement a Caesar cipher that takes in a string and the shift factor and then outputs the modified string using a right shift:\n```ruby\n> caesar_cipher(\"What a string!\", 5)\n=> \"Bmfy f xywnsl!\"\n```\n**Quick Tips:**\n- You will need to remember how to convert a string into a number.\n- Don't forget to wrap from `z` to `a`.\n- Don't forget to keep the same case.\n- The Wikipedia quote discusses a Caesar cipher using a left shift.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1908,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby_projects\\project_caesar_cipher.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "496aa53f69441944bb8db590f90d0b31",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby_projects\\project_stock_picker.md",
    "source_type": "git_repo",
    "title": "project_stock_picker",
    "content": "Introduction\nBy now you should feel pretty good working with strings, arrays and hashes. We'll do a couple of classic \"intro to programming\" problems in the next few lessons to help solidify your knowledge and get warmed up to working on small projects. You'll need to rely on some of your basic knowledge of conditionals and flow control from the prep work but you shouldn't need to do anything you haven't seen before.\nIf you want to actually write and run your own Ruby code, you can either use IRB from the command line (type `irb` after the prompt), run it from a script file using `$ ruby ./your_file_name_in_the_current_directory.rb`, or use any other appropriate REPL.\nAssignment\nImplement a method `#stock_picker` that takes in an array of stock prices, one for each hypothetical day. It should return a pair of days representing the best day to buy and the best day to sell. Days start at 0.\n```ruby\n> stock_picker([17,3,6,9,15,8,6,1,10])\n=> [1,4]  # for a profit of $15 - $3 == $12\n```\n**Quick Tips:**\n- You need to buy before you can sell\n- Pay attention to edge cases like when the lowest day is the last day or the highest day is the first day.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1311,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby_projects\\project_stock_picker.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1cd5013078d98c1be37763d135a9779e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby_projects\\project_sub_strings.md",
    "source_type": "git_repo",
    "title": "project_sub_strings",
    "content": "Introduction\nBy now you should feel pretty good working with strings, arrays and hashes. We'll do a couple of classic \"intro to programming\" problems in the next few lessons to help solidify your knowledge and get warmed up to working on small projects. You'll need to rely on some of your basic knowledge of conditionals and flow control from the prep work but you shouldn't need to do anything you haven't seen before.\nIf you want to actually write and run your own Ruby code, you can either use IRB from the command line (type `irb` after the prompt), run it from a script file using `$ ruby ./your_file_name_in_the_current_directory.rb`, or use any other appropriate REPL.\nAssignment\nImplement a method `#substrings` that takes a word as the first argument and then an array of valid substrings (your dictionary) as the second argument. It should return a hash listing each substring (case insensitive) that was found in the original string and how many times it was found.\n```ruby\n> dictionary = [\"below\",\"down\",\"go\",\"going\",\"horn\",\"how\",\"howdy\",\"it\",\"i\",\"low\",\"own\",\"part\",\"partner\",\"sit\"]\n=> [\"below\",\"down\",\"go\",\"going\",\"horn\",\"how\",\"howdy\",\"it\",\"i\",\"low\",\"own\",\"part\",\"partner\",\"sit\"]\n> substrings(\"below\", dictionary)\n=> { \"below\" => 1, \"low\" => 1 }\n```\nNext, make sure your method can handle multiple words:\n```ruby\n> substrings(\"Howdy partner, sit down! How's it going?\", dictionary)\n=> { \"down\" => 1, \"go\" => 1, \"going\" => 1, \"how\" => 2, \"howdy\" => 1, \"it\" => 2, \"i\" => 3, \"own\" => 1, \"part\" => 1, \"partner\" => 1, \"sit\" => 1 }\n```\n**Quick Tips:**\n- Recall how to turn strings into arrays and arrays into strings.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1796,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby_projects\\project_sub_strings.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d7fa2af0c753d8cee5eafaaa75398834",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\variables.md",
    "source_type": "git_repo",
    "title": "bad",
    "content": "Introduction\nVariables are a way of assigning data to names in your programs You can think of a variable as a box with a label on it: it stores something and has a name so that you know what's inside This is an imperfect metaphor as you'll see by the end of this lesson, but it should help with understanding variables for now Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe what a variable is and how to assign it a value or expression Explain what the +=, -=, *=, and /= assignment operators do Describe the naming conventions for variables Declaring a variable\nThis is how to create a variable in Ruby:\nruby\nage = 18 #=> 18\nYou can also assign the result of an expression to a variable ruby\nage = 18 + 5 #=> 23\nVariable names are reusable, so you can assign a new value to a variable at any point in your program Naturally, doing so will override the original value ruby\nage = 18\nage #=> 18\nage = 33\nage #=> 33\nThere will often be scenarios where you want to perform an operation on the original value of a variable and then reassign the result of that operation to the same variable ruby\nage = 18\nage #=> 18\nage = age + 4\nage #=> 22\nBecause this is a common scenario, Ruby provides a nice shorthand assignment operator for doing this: += ruby\nage = 18\nage += 4 #=> 22\nThere are similar assignment operators for all the common math operators:\n```ruby\nage = 18\nage -= 2  #=> 16\ncash = 10\ncash *= 2 #=> 20\ntemperature = 40\ntemperature /= 10 #=> 4\n```\nHow to name variables\nRuby is a language that aims to be natural to read and easy to write Remember this when you're naming your variables The name should, as clearly as possible, describe what the value of the variable represents Naming variables clearly will pay dividends when you review your code months after you've written it, when you can no longer remember what that variable was designed to store From now on, when naming your variables, remember the following quote by John Woods:\nAlways code as if the person who ends up maintaining your code will be a violent psychopath who knows where you live",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7073,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\variables.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1558d728018cef7129c73d6e5223a444",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\variables.md",
    "source_type": "git_repo",
    "title": "bad",
    "content": "clearly as possible, describe what the value of the variable represents Naming variables clearly will pay dividends when you review your code months after you've written it, when you can no longer remember what that variable was designed to store From now on, when naming your variables, remember the following quote by John Woods: Always code as if the person who ends up maintaining your code will be a violent psychopath who knows where you liveThe most basic thing you can do to write clean, maintainable code is to name your variables properly So get into this habit early to avoid psychopath programmers coming after you Variable names should always be lowercase, and multiple words that make up a variable name should be split by an underscore This is known as snake_case ```ruby\nbad\na = 19\nstring = \"John\"\ngood\nage = 19\nname = \"John\"\ncan_swim = false\n```\nVariables are references\nThe information you name with a variable is stored in memory on your computer, so a variable is effectively a reference or a pointer to that address in memory This is important to know as it can sometimes be the cause of unexpected behavior from your code Let's look at an example of this unexpected behavior, with two variables: desired_location, which is assigned to the string \"Barcelona\", and johns_location, which is assigned to the desired_location variable Both variables are pointing to where \"Barcelona\" is stored in memory ```ruby\ndesired_location = \"Barcelona\"\njohns_location = desired_location\ndesired_location  #=> \"Barcelona\"\njohns_location    #=> \"Barcelona\"\n```\nUnexpected behavior happens if the string \"Barcelona\" that is stored in memory is modified One way to modify a string is to use the upcase method, instead of the safe upcase method If the string is modified using johns_location upcase then desired_location will also reflect that change:\n```ruby\njohns_location upcase #=> \"BARCELONA\"\ndesired_location        #=> \"BARCELONA\"\njohns_location          #=> \"BARCELONA\"\n```\nThis example may be hard to completely understand at this point in the lesson The important concept is that assigning variables to other variables can have unintended side effects Just because you can do it, doesn't mean you should You will have the opportunity to revisit this example in one of the following assignments Assignment\n1 Read the [Variables](https://launchschool",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7073,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\variables.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "dc4d00b2ff01b89a7dd608e2dddc6cb5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\variables.md",
    "source_type": "git_repo",
    "title": "bad",
    "content": "will also reflect that change: ```ruby johns_location upcase #=> \"BARCELONA\" desired_location #=> \"BARCELONA\" johns_location #=> \"BARCELONA\" ``` This example may be hard to completely understand at this point in the lesson The important concept is that assigning variables to other variables can have unintended side effects Just because you can do it, doesn't mean you should You will have the opportunity to revisit this example in one of the following assignments Assignment 1 Read the [Variables](https://launchschoolcom/books/ruby/read/variables) chapter from LaunchSchool's brilliant *Introduction to Programming With Ruby* As indicated in this article, remember that you should not use `$global_variables` Additionally, `@@class_variables` are rarely needed and easily misused 1 Read through these short, to-the-point variable lessons by Ruby Monstas:\n- [Overview of Variables](http://ruby-for-beginners rubymonstas org/variables html)\n- [Reusing Variable Names](http://ruby-for-beginners rubymonstas org/variables/reusing_names html)\n- [Things on the Right Go First](http://ruby-for-beginners rubymonstas org/variables/right_goes_first html)\n1 Use IRB in your command line or an appropriate online REPL environment and try naming some variables and assigning values to them Don't worry so much about good naming conventions at this stage Instead, experiment with different variable names and see what is valid Try using symbols or numbers in your variable names Try assigning a variable to another variable and observe the behavior when using `upcase `, as in the example above If you come across anything quirky, Google it to find out why it happened Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a variable How do you assign a value or an expression to a variable What does the += assignment operator do What does the -= assignment operator do What does the *= assignment operator do What does the /= assignment operator do What are the variable naming conventions Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read the full Variables chapter from The Bastards Book of Ruby if you can't get enough about variables Variables as Pointers, from LaunchSchool's Introduction to Programming With Ruby",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7073,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\variables.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0caba7715ffbac26495b78fef9b418c1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\basic_ruby\\variables.md",
    "source_type": "git_repo",
    "title": "bad",
    "content": "+= assignment operator do What does the -= assignment operator do What does the *= assignment operator do What does the /= assignment operator do What are the variable naming conventions Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental Read the full Variables chapter from The Bastards Book of Ruby if you can't get enough about variables Variables as Pointers, from LaunchSchool's Introduction to Programming With RubyIf you want to know more about Ruby's naming conventions, check out the Ruby Style Guide Don't get too deep into it; just know that it's there",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7073,
      "relative_path": "git_repos\\odin-project\\ruby\\basic_ruby\\variables.md",
      "source_type": "git_repo"
    },
    "token_count": 116,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0582033e4061dfcaf90e88fd3b04727f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\a_very_brief_intro_to_cs.md",
    "source_type": "git_repo",
    "title": "a_very_brief_intro_to_cs",
    "content": "Introduction\nYou've learned how to build some cool stuff already and, frankly, you could probably make some decent websites without a crazy amount of additional formal education However, just because you can write English at a grade school level doesn't mean you will be editing the New York Times anytime soon In the world of programming, there's a difference between solving a problem the brute force way and solving a problem WELL We touched on the first layer of this when we covered basic object-oriented programming and how you should break apart your code into well-organized chunks If you assume those lessons were all about learning how to write good code, these next few lessons are going to be about training yourself to figure out the best code to write -- the most elegant solution to the problem at hand It becomes particularly important whenever you start working with large data sets, like when your website becomes highly successful We're taking a look at some more Computer Science-y concepts here because they are fundamental for a reason Some problems require you to use tools beyond just arrays and iterators You're going to build chess and it's not fundamentally difficult (it's just a rules-based game after all) but there are some tricks that you'll want to use to help you solve it There's no sense reinventing the wheel when others have already figured out good methods for solving certain types of problems If that doesn't get you interested, remember that this curriculum is meant to prepare you for life beyond the web page If you're interested in applying for a job, you'll be asked questions that directly touch on some of this stuff It's going to require you to put on your thinking cap (sorry, it had to happen sometime), but we won't be doing anything too crazy We'll stick to the practical side of this material as opposed to getting too stuck in theory Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What is an algorithm What is pseudo-code Assignment\n1 Watch [Introduction to Algorithms by David Malan](https://www youtube com/watch v=6hfOvs8pY1k) on TedEd to see how to think about algorithms 1 Watch [What is an Algorithm ](https://youtu be/e_WfC8HwVB8) on YouTube for a more structured look at solving problems using algorithms 1 Read this Quora answer about [the importance of algorithms in web development](https://qr ae/py3NAc) to get some context for why we're going over this stuff 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3777,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\a_very_brief_intro_to_cs.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2b7ab8c81af7676472d942f85a7b062e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\a_very_brief_intro_to_cs.md",
    "source_type": "git_repo",
    "title": "a_very_brief_intro_to_cs",
    "content": "this lesson What is an algorithm What is pseudo-code Assignment 1 Watch [Introduction to Algorithms by David Malan](https://www youtube com/watch v=6hfOvs8pY1k) on TedEd to see how to think about algorithms 1 Watch [What is an Algorithm ](https://youtu be/e_WfC8HwVB8) on YouTube for a more structured look at solving problems using algorithms 1 Read this Quora answer about [the importance of algorithms in web development](https://qr ae/py3NAc) to get some context for why we're going over this stuff 1Watch [What is pseudocode ](https://www youtube com/watch v=Rg-fO7rDsds)\n1 Watch the first section (from 0:00 - 7:01) of [Telusko's video on data structures and algorithms](https://www youtube com/watch v=xWLxhF3b5P8) for a quick overview of DSA, and why companies may be interested in hiring candidates familiar with DSA Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is an Algorithm What is the importance of algorithms in web development What is pseudocode Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Wikipedia on Computer Science Wikipedia on Algorithms Map of Computer Science",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3777,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\a_very_brief_intro_to_cs.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2c74845216914617ac728dc1384a7e58",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\common_data_structures_algorithms.md",
    "source_type": "git_repo",
    "title": "common_data_structures_algorithms",
    "content": "Introduction\nThe basic idea of a data structure is to store data in a way that meets the needs of your particular application You might be inclined to store a particular kind of data in one giant array, but it would be rather time consuming to locate a specific value if you had a significant number and depth of items So you need to look to other options Depending on the application, there are a batch of other basic data structures available to help you out The differences between them typically have to do with trade-offs between how long it takes to first populate the structure, how long it takes to add or find elements, and how large the structure is in memory We'll save the specifics of data structures for more computer-science-oriented courses, but this introduction should again expand your toolbox slightly so you can identify and solve certain problems where plain old Arrays, Hashes and Sets don't quite cut it New structures and strategies will be particularly relevant, for instance, when you're trying to search through a large batch of data for a particular value or plan out a strategy several moves in advance You've already had a brief introduction to algorithms over some of the other lessons and you even got to write your own Merge Sort algorithm in the last project You'll find that sorting algorithms are quite common Another major area for algorithms is in search, where milliseconds count When you're searching through enormous troves of data, the quality of your search algorithm is incredibly important Traversing a data tree looking for a particular element is a related problem that's common in data intensive applications Luckily for you, these complex algorithmic problems have all been solved many times in the past Understanding how they are solved will give you some great tools to apply to other (similar) problems on your own Algorithms are really just ways of solving problems systematically In this brief introduction, we'll focus on a couple of algorithms that you may run into when coding on your own -- breadth-first-search and depth-first-search Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What is a data structure What is a stack What is a queue What's the difference between a stack and a queue What is a stack useful for What is a queue useful for What's the best way to implement stacks and queues in Ruby Why bother having many different search algorithms What is breadth-first-search (BFS) What is depth-first-search (DFS) What situations would you want to use BFS What situations would you want to use DFS instead When would BFS be impractical",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6291,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\common_data_structures_algorithms.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c6a060711ecc1a1e09e8e02b2d078165",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\common_data_structures_algorithms.md",
    "source_type": "git_repo",
    "title": "common_data_structures_algorithms",
    "content": "is a stack What is a queue What's the difference between a stack and a queue What is a stack useful for What is a queue useful for What's the best way to implement stacks and queues in Ruby Why bother having many different search algorithms What is breadth-first-search (BFS) What is depth-first-search (DFS) What situations would you want to use BFS What situations would you want to use DFS instead When would BFS be impracticalAssignment\n1 Glance over the [Wikipedia entry on Data Structures](http://en wikipedia org/wiki/Data_structure) for a high level overview of things 1 Watch the first 10 minutes of [Why Study Algorithms](https://www youtube com/watch v=u2TwK3fED8A) The rest is more mathematical if you're interested 1 Read [What is an Algorithm and How Does it Make You a Better Programmer](https://web archive org/web/20231223233808/http://blog thefirehoseproject com/posts/what-is-an-algorithm/) for another basic look at what algorithms are 1 Learn about [how binary search works](https://www youtube com/watch v=DSffdCT5Cx4) from Harvard’s CS50 on YouTube 1 Now, we're going to focus on learning about binary search trees Start by watching this video to learn [how a binary search tree is constructed from an unordered array](https://www youtube com/watch v=FvdPo8PBQtc) 1 Next, learn about the [principles of queues and stacks](https://www youtube com/watch v=6QS_Cup1YoI), which are concepts used in breadth-first search and depth-first search respectively 1 Finally, learn about breadth-first search and depth-first search of binary search trees from this series of videos on YouTube:\n- [Binary tree traversal](https://www youtube com/watch v=9RHO6jU--GU)\n- [Breadth-first traversal](https://www youtube com/watch v=86g8jAQug04)\n- [Depth-first traversal](https://www youtube com/watch v=gm8DUJJhmY4)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between a stack and a queue How would you implement a queue in Ruby",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6291,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\common_data_structures_algorithms.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b514ad3261ec6cdbe705f70a911b31af",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\common_data_structures_algorithms.md",
    "source_type": "git_repo",
    "title": "common_data_structures_algorithms",
    "content": "youtube com/watch v=9RHO6jU--GU) - [Breadth-first traversal](https://www youtube com/watch v=86g8jAQug04) - [Depth-first traversal](https://www youtube com/watch v=gm8DUJJhmY4) Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between a stack and a queue How would you implement a queue in RubyWhat is a linked list What is a node Which recursive problem-solving method/algorithm design principle does binary search implement What abstract data type would you use to defer/store nodes in a breadth-first tree traversal What abstract data type would you use to defer/store nodes in a depth-first tree traversal Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Khan Academy's great Algorithms Course\nStanford's Coursera 4-Part Algorithm Course\nVisualizing Algorithms from Mike Bostock\nAnother free course on algorithms by Udacity\nA brief note on putting Sorting, Tries and Heaps into Ruby, by Ilya Grigorik\nA more detailed video on stacks and queues\nA stack overflow discussion on the relative strengths of BFS and DFS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6291,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\common_data_structures_algorithms.md",
      "source_type": "git_repo"
    },
    "token_count": 282,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4181149e4786b865f5864e91f100cb09",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_binary_search_trees.md",
    "source_type": "git_repo",
    "title": "project_binary_search_trees",
    "content": "Introduction\nYou have learned about binary search trees, where you take a group of data items and turn them into a tree full of nodes, with each left node being \"lower\" than each right node The tree starts with the \"root node\" and any node with no children is called a \"leaf node\" You have also learned about tree traversal algorithms like breadth-first and depth-first Now, let's take a look at balanced binary search trees (BST) A BST allows fast operations for lookup, insertion, and deletion of data items Read this article on building balanced BSTs Here is a video on building balanced BSTs as well Although these two resources do not use Ruby, you should understand it enough to develop your own pseudocode Assignment\nYou'll build a balanced BST in this assignment Do not use duplicate values because they make it more complicated and result in trees that are much harder to balance Therefore, be sure to always remove duplicate values or check for an existing value before inserting 1 Build a `Node` class It should have an attribute for the data it stores as well as its left and right children As a bonus, try including the `Comparable` module and compare nodes using their data attribute 1 Build a `Tree` class which accepts an array when initialized The `Tree` class should have a `root` attribute, which uses the return value of `#build_tree` which you'll write next 1 Write a `#build_tree` method which takes an array of data (e g , `[1, 7, 4, 23, 8, 9, 4, 3, 5, 7, 9, 67, 6345, 324]`) and turns it into a balanced binary tree full of `Node` objects appropriately placed (don't forget to sort and remove duplicates ) The `#build_tree` method should return the level-0 root node **Tip:** If you would like to visualize your binary search tree, here is a `#pretty_print` method that a student wrote and shared on Discord:\n```ruby\ndef pretty_print(node = @root, prefix = '', is_left = true)\npretty_print(node right, \"#{prefix}#{is_left '│   ' : '    '}\", false) if node right\nputs \"#{prefix}#{is_left '└── ' : '┌── '}#{node data}\"\npretty_print(node left, \"#{prefix}#{is_left",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6504,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_binary_search_trees.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3b92f91f7b43a5963b9089752b189927",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_binary_search_trees.md",
    "source_type": "git_repo",
    "title": "project_binary_search_trees",
    "content": "placed (don't forget to sort and remove duplicates ) The `#build_tree` method should return the level-0 root node **Tip:** If you would like to visualize your binary search tree, here is a `#pretty_print` method that a student wrote and shared on Discord: ```ruby def pretty_print(node = @root, prefix = '', is_left = true) pretty_print(node right, \"#{prefix}#{is_left '│ ' : ' '}\", false) if node right puts \"#{prefix}#{is_left '└── ' : '┌── '}#{node data}\" pretty_print(node left, \"#{prefix}#{is_left'    ' : '│   '}\", true) if node left\nend\n```\n1 Write an `#insert` and `#delete` method which accepts a value to insert/delete You'll have to deal with several cases for delete, such as when a node has children or not If you need additional resources, check out these two articles on [inserting](https://www geeksforgeeks org/insertion-in-binary-search-tree/ ref=lbp) and [deleting](https://www geeksforgeeks org/binary-search-tree-set-2-delete/ ref=lbp), or this [video on BST inserting/removing](https://youtu be/wcIRPqTR3Kc) with several visual examples You may be tempted to implement these methods using the original input array, but it's important for the efficiency of these operations that you don't do this If we refer back to the [Big O Cheatsheet](https://www bigocheatsheet com/), we'll see that binary search trees can insert/delete in `O(log n)` time, which is a significant performance boost over arrays for the same operations To get this added efficiency, your implementation of these methods should traverse the tree and manipulate the nodes and their connections 1 Write a `#find` method which accepts a value and returns the node with the given value 1 Write a `#level_order` method which accepts a block This method should traverse the tree in breadth-first level order and yield each node to the provided block This method can be implemented using either iteration or recursion (try implementing both ) The method should return an array of values if no block is given",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6504,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_binary_search_trees.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "70489afb933daae7c1a2f6528c26aa18",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_binary_search_trees.md",
    "source_type": "git_repo",
    "title": "project_binary_search_trees",
    "content": "the nodes and their connections 1 Write a `#find` method which accepts a value and returns the node with the given value 1 Write a `#level_order` method which accepts a block This method should traverse the tree in breadth-first level order and yield each node to the provided block This method can be implemented using either iteration or recursion (try implementing both ) The method should return an array of values if no block is given**Tip:** You will want to use an array acting as a queue to keep track of all the child nodes that you have yet to traverse, and to add new ones to the list ([video on level order traversal](https://www youtube com/watch v=86g8jAQug04)) 1 Write `#inorder`, `#preorder`, and `#postorder` methods that accepts a block Each method should traverse the tree in their respective depth-first order and yield each node to the provided block The methods should return an array of values if no block is given The video [Binary Tree Traversal: Preorder, Inorder, Postorder](https://www youtube com/watch v=gm8DUJJhmY4) explains the topic clearly 1 Write a `#height` method that accepts a value and returns the height of the node containing that value Height is defined as the number of edges in the longest path from that node to a leaf node If the value is not found in the tree, the method should return `nil` 1 Write a `#depth` method that accepts a value and returns the depth of the node containing that value Depth is defined as the number of edges in the path from that node to the tree's root node If the value is not found in the tree, the method should return `nil` 1 Write a `#balanced ` method that checks if the tree is balanced A binary tree is considered balanced if, for every node in the tree, the height difference between its left and right subtrees is no more than 1, and both the left and right subtrees are also balanced #### Pitfall with checking balance\nA common mistake is only checking the height difference between the root's left and right children That is not enough — you must check the balance condition for every node 1 Write a `#rebalance` method which rebalances an unbalanced tree **Tip:** You'll want to use a traversal method to provide a new array to the `#build_tree` method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6504,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_binary_search_trees.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "af51c0c9cbb4104688c44264c8ecc567",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_binary_search_trees.md",
    "source_type": "git_repo",
    "title": "project_binary_search_trees",
    "content": "no more than 1, and both the left and right subtrees are also balanced #### Pitfall with checking balance A common mistake is only checking the height difference between the root's left and right children That is not enough — you must check the balance condition for every node 1 Write a `#rebalance` method which rebalances an unbalanced tree **Tip:** You'll want to use a traversal method to provide a new array to the `#build_tree` method#### Tie it all together\nWrite a driver script that does the following:\n1 Create a binary search tree from an array of random numbers `(Array new(15) { rand(1 100) })`\n1 Confirm that the tree is balanced by calling `#balanced `\n1 Print out all elements in level, pre, post, and in order\n1 Unbalance the tree by adding several numbers > 100\n1 Confirm that the tree is unbalanced by calling `#balanced `\n1 Balance the tree by calling `#rebalance`\n1 Confirm that the tree is balanced by calling `#balanced `\n1 Print out all elements in level, pre, post, and in order",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6504,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_binary_search_trees.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7f1629d30149c6613af3a4f6e403c50f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "Introduction\nOne of the most used data structures across programming languages is a hash table, aka hash map A hash map is similar to a conventional array, except it uses \"keys\" as indices rather than meaningless sequential numbering of the values With the data organized in this way, we get quick search speeds for keys in the structure If you've worked with Ruby hashes, then you have used structures based on hash tables But how do they work internally How can we save key value pairs and later retrieve them In this lesson, you will learn how it all works, and even implement your own hash map in the next project To start, here is a brief description of a hash map: a hash map takes in a key value pair, produces a hash code, and stores the pair in a bucket Hash codes Buckets What Don't fret, we'll learn all about these concepts and more Buckle up and let's dive in Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Hash codes and how to generate them Hash maps and how they work internally What is a hash code Let's start by learning what it means to hash a value Hashing involves taking an input in and generating a corresponding output A hash function should be a pure function Hashing the same input should always return the same hash code, and there should be no random generation component For example, let's look at a hashing method that takes a name and gives us the first letter of that name:\nruby\ndef hash(name)\nname[0]\nend\nWe created our first basic hashing method There is a key difference between hashing and ciphering (encryption): reversibility Hashing is a one-way process Using the above example, you can make a hash code from a name, but you cannot take a hash code and revert it back to a name If you have a name \"Carlos\", we can hash it to \"C\" But it's impossible to reverse it from \"C\" back to its original form You cannot know if it's \"Carlos\", maybe it's \"Carla\" or \"Carrot\" We don't know Hashing is very good for security Given a password, you can save the hash of that password rather than the password's plain text If someone steals your hashes, they cannot know the original passwords since they are unable to reverse the hash back to the password Use cases\nWhat can we do with those hashes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15148,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "47f5135bfff09aef3e5c3b4ad6036eb4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "from \"C\" back to its original form You cannot know if it's \"Carlos\", maybe it's \"Carla\" or \"Carrot\" We don't know Hashing is very good for security Given a password, you can save the hash of that password rather than the password's plain text If someone steals your hashes, they cannot know the original passwords since they are unable to reverse the hash back to the password Use cases What can we do with those hashesYou have probably seen it in school where a folder is organized into smaller folders, and each folder holds information about people with the same first letter:\ntext\nC:\ncarlos txt\ncarla txt\nB:\nbryan txt\nbob txt\nbeatrice txt\nbella txt\nbenjamin txt\nbianca txt\nIf we get a new student in our school with the name \"Carlos\", we can run our hash method to find out which folder to place them in hash(\"Carlos\") -> \"C\" so we put \"Carlos\" in the directory labeled C You might have spotted a problem: what if our school is populated with many people whose names share the same first letter C Then we will have a directory labeled C that holds too many names while other directories could be empty To eliminate this duplication and better separate our students, we need to rework our hash method ruby\ndef hash(name, surname)\nname[0] + surname[0]\nend\nInstead of just taking the first name letter, we take the first name and last name letters \"Carlos Smith\" will have a hash code of \"CS\" This will spread our students among more directories and will eliminate many duplicate hash codes from being generated But it still doesn't solve our problem What if we have a common combination of first letters in students' names Then we will still have an imbalance in the size of the directories We need to make it easier to find the person we're looking for, so let's rework our hash code ```ruby\ndef string_to_number(string)\nhash_code = 0\nstring each_char { |char| hash_code += char ord }\nhash_code\nend\ndef hash(name, surname)\nstring_to_number(name) + string_to_number(surname)\nend\n```\nWe not only consider the first letters with this technique Instead, we take the entire name and convert it into numbers You might be thinking, wouldn't it just be better to save the whole name as a hash code That is true",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15148,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "189d8e81ff93582dc18be9efa3389952",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "we're looking for, so let's rework our hash code ```ruby def string_to_number(string) hash_code = 0 string each_char { |char| hash_code += char ord } hash_code end def hash(name, surname) string_to_number(name) + string_to_number(surname) end ``` We not only consider the first letters with this technique Instead, we take the entire name and convert it into numbers You might be thinking, wouldn't it just be better to save the whole name as a hash code That is trueThis would make it unique for each name, but in the context of hash maps, we need the hash code to be a number This number will serve as the index to the bucket that will store the key value pair More on buckets in the next section Buckets\nBuckets are storage that we need to store our elements Simply, it's an array For a specific key, we decide which bucket to use for storage through our hash method The hash method returns a number that serves as the index of the array at which we store this specific key value pair Let's say we wanted to store a person's full name as a key \"Fred\" with a value of \"Smith\":\nPass \"Fred\" into the hash method to get the hash code which is 508 Find the bucket at index 508 Store the key value pair in that bucket In this case, the key would be \"Fred\" and the value would be \"Smith\" This is an oversimplified explanation; we'll discuss more internal mechanics later in the lesson Now if we wanted to get a value using a key:\nPut each entry inside a bucket as a Node item, which holds both the key and the value To retrieve the value, we hash the key and calculate its bucket number If the bucket is not empty, then we go to that bucket Now we compare if the node's key is the same key that was used for the retrieval If it is, then we can return the node's value Otherwise, we return nil Maybe you are wondering, why are we comparing the keys if we already found the index of that bucket Remember, a hash code is just the location Different keys might generate the same hash code We need to make sure the key is the same by comparing both keys that are inside the bucket This is it, making this will result in a hash table with has , set and get",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15148,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "40ba819e51ae194b5b8f393c7989de8a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "value Otherwise, we return nil Maybe you are wondering, why are we comparing the keys if we already found the index of that bucket Remember, a hash code is just the location Different keys might generate the same hash code We need to make sure the key is the same by comparing both keys that are inside the bucket This is it, making this will result in a hash table with has , set and getWhat if we found the hash code, but also the key value is the same as what we already have in the bucket We check if it's the same item by comparing the keys, then we overwrite the value with our new value This is how we can only have unique values inside a Set A Set is similar to a hash map but the key difference (pun intended) is that a Set will have nodes with only keys and no values Insertion order is not maintained\nA hash map does not guarantee insertion order when you iterate over it The translation of hash codes to indexes does not follow a linear progression from the first to the last index Instead, it is more unpredictable, irrespective of the order in which items are inserted That means if you are to retrieve the array of keys and values to iterate over them, then they will not be in order of when you inserted them Some implementations will maintain insert order, such as Ruby's own Hash For the coming project however we will be implementing an unordered hash table Example: if we insert the values Mao, Zach, Xari in this order, we may get back [\"Zach\", \"Mao\", \"Xari\"] when we call an iterator If iterating over a hash map frequently is your goal, then this data structure is not the right choice for the job, a simple array would be better Collisions\nWe have another problem that we need to deal with: collisions A collision occurs when two different keys generate the exact same hash code Because they have the same hash code, they will land in the same bucket Let's take an example: hashing the name \"Sara\" and the name \"raSa\" will generate the same hash code That is because the letters in both names are the same, just arranged differently We can rework our string_to_number method so that it can give us unique hash codes that depend on where the letters appear in the name using an algorithm ```ruby\ndef string_to_number(string)\nhash_code = 0\nprime_number = 31\nstring each_char { |char| hash_code = prime_number * hash_code + char",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15148,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "29504aaab255a7e1dd14dfd191873266",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "hashing the name \"Sara\" and the name \"raSa\" will generate the same hash code That is because the letters in both names are the same, just arranged differently We can rework our string_to_number method so that it can give us unique hash codes that depend on where the letters appear in the name using an algorithm ```ruby def string_to_number(string) hash_code = 0 prime_number = 31 string each_char { |char| hash_code = prime_number * hash_code + charord }\nhash_code\nend\n```\nWith our new method we will have different hash codes for the names \"Sara\" and \"raSa\" This is because even if both names have the same letters, some of the letters appear in different locations The hash code started to change because we are multiplying the old hash with every new iteration and then adding the letter code Notice the usage of a prime number We could have chosen any number we wanted, but prime numbers are preferable Multiplying by a prime number will reduce the likelihood of hash codes being evenly divisible by the bucket length, which helps minimize the occurrence of collisions Even though we reworked our hash method to avoid the \"Sara\"/\"raSa\" collision, there is always the possibility for collisions Since we have a finite number of buckets, there is no way to eliminate collisions entirely Let's try to minimize them Dealing with collisions\nUp until now, our hash map is a one-dimensional data structure What if each Node inside the bucket can store more than one value Enter Linked Lists Now, each bucket will be a Linked List When inserting into a bucket, if it's empty, we insert the head of Linked List If a head exists in a bucket, we follow that Linked List to add to the end of it You probably understand by this point why we must write a good hashing method which eliminates as many collisions as possible Most likely you will not be writing your own hash method, as most languages have it built in, but understanding how hash methods work is important Growth of a hash table\nLet's talk about the growth of our buckets We don't have infinite memory, so we can't have an infinite number of buckets We need to start somewhere, but starting too big is also a waste of memory if we're only going to have a hash map with a single value in it So to deal with this issue, we should start with a small array for our buckets We'll use an array of size 16",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15148,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "cb9ee0653d7a084a75e18fa6397b8103",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "table Let's talk about the growth of our buckets We don't have infinite memory, so we can't have an infinite number of buckets We need to start somewhere, but starting too big is also a waste of memory if we're only going to have a hash map with a single value in it So to deal with this issue, we should start with a small array for our buckets We'll use an array of size 16Most programming languages start with the default size of `16` because it's a power of 2, which helps with some techniques for performance that require bit manipulation for indexes How are we going to insert into those buckets when our hash method generates big numbers like 20353924 We make use of the modulo % operation given any number modulo by 16 we will get a number between 0 and 15 For example, if we are to find the bucket where the value \"Manon\" will land, then we do the following:\nAs we continue to add nodes into our buckets, collisions become more and more likely Eventually, however, there will be more nodes than there are buckets, which guarantees a collision (check the additional resources section for an explanation of this fact if you're curious) Remember we don't want collisions In a perfect world, each bucket will either have 0 or 1 node only, so we grow our buckets array to have more chance that our nodes will spread and not stack up in the same buckets To grow our array, we create a new one that is double its size and then copy all existing nodes over to the buckets of this new array, hashing their keys again When do we know that it's time to grow our buckets size To deal with this, our hash map class needs to keep track of two new fields, the capacity and the load factor The capacity is the total number of buckets we currently have The load factor is a number that we assign our hash map to at the start It's the factor that will determine when it is a good time to grow our buckets Hash map implementations across various languages use a load factor between 0 75 and 1 The product of these two numbers gives us a number, and we know it's time to grow when there are more entries in the hash map than that number For example, if there are 16 buckets, and the load factor is 0 8, then we need to grow the buckets when there are more than 16 * 0 8 = 12",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15148,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "8331353e7421608e24cc4a9b6bb7db98",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "Hash map implementations across various languages use a load factor between 0 75 and 1 The product of these two numbers gives us a number, and we know it's time to grow when there are more entries in the hash map than that number For example, if there are 16 buckets, and the load factor is 0 8, then we need to grow the buckets when there are more than 16 * 0 8 = 128 entries - which happens on the 13th entry Setting it too low will consume too much memory by having too many empty buckets, while setting it too high will allow our buckets to have many collisions before we grow them Computation complexity\nA hash map is very efficient in its insertion, retrieval and removal operations That is because we use array indexes to do those operations A hash map has an average case complexity of O(1) for the following methods:\nInsertion\nRetrieving\nRemoval\nAssuming we have a good hash map written The worst case of those operations would be O(n) and that happens when we have all our data hashes to the same exact bucket The complexity itself surfaces because of the linked list, and O(n) is because we are traversing the linked list to insert yet again another node into the same bucket, which happens specifically because of collisions The growth of our hash map has the complexity of O(n) at all times Assignment\n- Read [What are Hash Functions and How to choose a good Hash Function](https://www geeksforgeeks org/what-are-hash-functions-and-how-to-choose-a-good-hash-function) for a more technical overview of a hash function - Watch this video from CS50 that explains the concept of [hash maps using buckets](https://www youtube com/watch v=btT4bCOvqjs) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does it mean to hash What are buckets What is a collision When is it a good time to grow our table Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This discussion goes through the usages of prime numbers in hash functions The pigeonhole principle mathematically guarantees collisions when there are more nodes than boxes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15148,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "0579a55830ffcc9f43c56d9a4e6a1533",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_knights_travails.md",
    "source_type": "git_repo",
    "title": "project_knights_travails",
    "content": "Introduction\nNow you're a pro with DFS and BFS Let's try using our search algorithms on a real problem For this project, you'll need to use a data structure that's similar (but not identical) to a binary tree - graphs For a good introduction on what graphs are, reference Khan Academy's \"Describing Graphs\" Given enough turns, a knight on a standard 8x8 chess board can move from any square to any other square Its basic move is two steps forward and one step to the side or one step forward and two steps to the side It can face any direction All the possible places you can end up after one move look like this:\nIn this problem, the chessboard can be represented as a graph:\nEach square on the board is a node (or vertex) A knight’s valid moves from any square represent the edges (or connections) between the vertices Thus, the problem of finding the shortest path for the knight’s movement becomes a graph traversal problem The goal is to traverse the graph (the chessboard) to find the shortest route between two nodes (the start and end positions) Vertices and Edges\nThe vertices in this graph are each of the possible positions on the chessboard, represented by a pair of coordinates like [x, y], where x and y are between 0 and 7 The edges are the valid knight moves between vertices For example, from [0,0], a knight can move to [2,1], [1,2], and so on Each of these moves represents a connection between the vertex [0,0] and the other reachable vertices Graph Representation\nWhile solving this problem, you don’t need to explicitly create a graph object with vertices and edges Instead, you can think of the graph as implicit The knight starts on a specific vertex, and the algorithm will dynamically explore all possible moves (edges) to other vertices (positions on the board) as it traverses the board Helpful Concepts Before You Begin\nYou’ve worked with BFS on binary trees in the previous lesson, but applying it on a chessboard (a grid) can feel like a big leap — and that’s totally normal Here are some core ideas to keep in mind:\nRepresent positions as coordinates: Each square can be written as [x, y], where both values range from 0 to 7 Use a queue: Like in tree BFS, you’ll use a queue to keep track of the next positions to explore",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4810,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_knights_travails.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "cf73a8f06d11f4115e2779a834c1f1a2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_knights_travails.md",
    "source_type": "git_repo",
    "title": "project_knights_travails",
    "content": "BFS on binary trees in the previous lesson, but applying it on a chessboard (a grid) can feel like a big leap — and that’s totally normal Here are some core ideas to keep in mind: Represent positions as coordinates: Each square can be written as [x, y], where both values range from 0 to 7 Use a queue: Like in tree BFS, you’ll use a queue to keep track of the next positions to exploreTrack visited positions: Unlike trees, graphs can revisit the same position through different paths — so be sure to track visited positions to avoid loops or unnecessary repeats Thinking of the board as a grid-based graph instead of a tree will help you apply BFS much more effectively here Assignment\nYour task is to build a function knight_moves that shows the shortest possible way to get from one square to another by outputting all squares the knight will stop on along the way You can think of the board as having 2-dimensional coordinates Calling your function would therefore look like:\nknight_moves([0,0],[1,2]) # returns [[0,0],[1,2]]\nSometimes *there is more than one fastest path* Examples of this are shown below Any answer is correct as long as it follows the rules and gives the shortest possible path - `knight_moves([0,0],[3,3])` may return `[[0,0],[2,1],[3,3]]` or `[[0,0],[1,2],[3,3]]` - `knight_moves([3,3],[0,0])` may return `[[3,3],[2,1],[0,0]]` or `[[3,3],[1,2],[0,0]]` - `knight_moves([0,0],[7,7])` may return `[[0,0],[2,1],[4,2],[6,3],[4,4],[6,5],[7,7]]` or `[[0,0],[2,1],[4,2],[6,3],[7,5],[5,6],[7,7]]` 1 Think about the rules of the board and knight, make sure to follow them 1 From every square, multiple moves are possible Choose a data structure that will allow you to work with them Don't allow any moves to go off the board 1 Decide which search algorithm is best to use for this case",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4810,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_knights_travails.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a812b9d28f75d478ccc2c311e11c65fd",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_knights_travails.md",
    "source_type": "git_repo",
    "title": "project_knights_travails",
    "content": "`knight_moves([0,0],[3,3])` may return `[[0,0],[2,1],[3,3]]` or `[[0,0],[1,2],[3,3]]` - `knight_moves([3,3],[0,0])` may return `[[3,3],[2,1],[0,0]]` or `[[3,3],[1,2],[0,0]]` - `knight_moves([0,0],[7,7])` may return `[[0,0],[2,1],[4,2],[6,3],[4,4],[6,5],[7,7]]` or `[[0,0],[2,1],[4,2],[6,3],[7,5],[5,6],[7,7]]` 1 Think about the rules of the board and knight, make sure to follow them 1 From every square, multiple moves are possible Choose a data structure that will allow you to work with them Don't allow any moves to go off the board 1 Decide which search algorithm is best to use for this caseHint: one of them could be a potentially infinite series 1 Use the chosen search algorithm to find the shortest path between the starting square (or node) and the ending square Output what that full path looks like, e g :\n```bash\n> knight_moves([3,3],[4,3])\n=> You made it in 3 moves Here's your path:\n[3,3]\n[4,5]\n[2,4]\n[4,3]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4810,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_knights_travails.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "494b17bd02e5dd9565e3082b590f5235",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_linked_lists.md",
    "source_type": "git_repo",
    "title": "project_linked_lists",
    "content": "Introduction\nIn Computer Science, one of the most basic and fundamental data structures is the\nlinked list, which functions similarly to an array The principal benefit of a linked\nlist over a conventional array is that the list elements can easily be inserted or\nremoved without reallocation of any other elements In some programming languages, the size of an array is a concern and one of the ways\nto overcome that problem and allow dynamically allocated data is using linked lists Luckily in Ruby, arrays aren't limited to a certain size, and both insertion and deletion can be done trivially at any index using the appropriate built in array method, so you don't have to think about overcoming those limitations So if array size, array insertion and array deletion are not limitations in Ruby, are linked lists really necessary The short answer to that is no; however, it's the simplest of the dynamic data\nstructures and it will give you a solid foundation, so you can understand more\ncomplex data structures like graphs and binary trees with more ease Structure of a linked list\nA linked list is a linear collection of data elements called nodes that \"point\"\nto the next node by means of a pointer Each node holds a single element of data and a link or pointer to the next node in the list A head node is the first node in the list, a tail node is the last node in the list Below is a basic representation of a linked list:\n[ NODE(head) ] -> [ NODE ] -> [ NODE(tail) ] -> nil\nFor a more thorough explanation, use these resources:\nLinked Lists in Plain English\nWhat's a Linked List, Anyway Linked Lists, Ruby's Missing Data Structure\nA more verbose explanation with plenty of diagrams\nAssignment\nYou will need two classes:\n1 `LinkedList` class, which will represent the full list 1 `Node` class, containing two instance variables, `#value` and `#next_node`, set both as `nil` by default Build the following methods in your linked list class:\n1 `#append(value)` adds a new node containing `value` to the end of the list\n1 `#prepend(value)` adds a new node containing `value` to the start of the list\n1 `#size` returns the total number of nodes in the list\n1 `#head` returns the first node in the list\n1 `#tail` returns the last node in the list\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4354,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_linked_lists.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6162c5eff8778e67f96446abe41b1fff",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_linked_lists.md",
    "source_type": "git_repo",
    "title": "project_linked_lists",
    "content": "`#value` and `#next_node`, set both as `nil` by default Build the following methods in your linked list class: 1 `#append(value)` adds a new node containing `value` to the end of the list 1 `#prepend(value)` adds a new node containing `value` to the start of the list 1 `#size` returns the total number of nodes in the list 1 `#head` returns the first node in the list 1 `#tail` returns the last node in the list 1`#at(index)` returns the node at the given `index`\n1 `#pop` removes the last element from the list\n1 `#contains (value)` returns true if the passed in value is in the list and otherwise returns false 1 `#find(value)` returns the index of the node containing value, or nil if not found 1 `#to_s` represent your LinkedList objects as strings, so you can print them out and preview them in the console The format should be: `( value ) -> ( value ) -> ( value ) -> nil`\n#### Extra credit\n1 `#insert_at(value, index)` that inserts a new node with the provided `value` at the given `index` 1 `#remove_at(index)` that removes the node at the given `index` **Extra Credit Tip:** When you insert or remove a node, consider how it will affect the existing nodes Some of the nodes will need their `#next_node` link updated #### Test it out\nLet's test out the Linked List you made 1 Create a `main rb` file and make sure it requires the file containing `LinkedList` This is where we'll test the list 1 Create an instance of `LinkedList` and populate it with nodes:\n```ruby\nlist = LinkedList new\nlist append('dog')\nlist append('cat')\nlist append('parrot')\nlist append('hamster')\nlist append('snake')\nlist append('turtle')\n```\n1 Add `puts list` to the end of the file and run it Because of the naming, this should use the `#to_s` method you wrote earlier 1 If everything is working, the output should be `( dog ) -> ( cat ) -> ( parrot ) -> ( hamster ) -> ( snake ) -> ( turtle ) -> nil` Feel free to use different values to test if you like",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4354,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_linked_lists.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3ab45b69b2043618543593ed7f42a2c4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_hash_map.md",
    "source_type": "git_repo",
    "title": "project_hash_map",
    "content": "Introduction\nYou already know the magic behind hash maps Now it's time to write your own implementation Limitation\nBefore we get started, we need to lay down some ground rules Ruby's dynamic nature of arrays allows us to insert and retrieve indexes that are outside our array size range Example: if we create an array of size 16 to represent our buckets, nothing stops us from storing items at index 500 This defeats the purpose of limiting storage size in hash maps, so we need to enforce some restrictions Use the following snippet whenever you access a bucket through an index We want to raise an error if we try to access an out-of-bounds index:\nruby\nraise IndexError if index negative || index >= @buckets length\nAssignment\nStart by creating a `HashMap` class It should have at least two variables for `load factor` and `capacity` Then proceed to create the following methods:\n1 `#hash(key)` takes a key and produces a hash code with it We already implemented a fairly good `hash` function in the previous lesson As a reminder:\n```ruby\ndef hash(key)\nhash_code = 0\nprime_number = 31\nkey each_char { |char| hash_code = prime_number * hash_code + char ord }\nhash_code\nend\n```\nYou are free to use that, or you can conduct your own research on hashing algorithms Beware, this is a deep, deep rabbit hole You might find yourself confusing keys with hash codes while accessing key-value pairs later We would like to stress that the key is what your `hash` function will take as an input In a way, we could say that the key is important for us *only* inside the `hash` function, as we never access a bucket directly with the key Instead, we always do so with the hash code In the real world, hash maps can accommodate various data types as keys, including numbers, strings, or objects However, for this project, we will only handle keys of type `string` 1 `#set(key, value)` takes two arguments, the first is a key and the second is a value that is assigned to this key If a key already exists, then the old value is overwritten or we can say that we *update* the key's value (e g `Carlos` is our key but it is called twice: once with value `I am the old value `, and once with value `I am the new value `",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6663,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_hash_map.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ea2ed27a38a51d229386770de083c45f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_hash_map.md",
    "source_type": "git_repo",
    "title": "project_hash_map",
    "content": "type `string` 1 `#set(key, value)` takes two arguments, the first is a key and the second is a value that is assigned to this key If a key already exists, then the old value is overwritten or we can say that we *update* the key's value (e g `Carlos` is our key but it is called twice: once with value `I am the old value `, and once with value `I am the new value `From the logic stated above, `Carlos` should contain only the latter value) In the meantime, a collision is when *TWO DIFFERENT* keys sit inside the same bucket, because they generate the same hash code (e g `Rama` and `Sita` are both hashed to `3`, so `3` becomes a location for `Rama` AND `Sita` However, we know that it is the collision It means we should find a way how to resolve it — how to *deal with collisions*, which was mentioned in the previous lesson) - Remember to grow your buckets size when it needs to, by calculating if your bucket has reached the `load factor` Some of the methods in this assignment that are mentioned later could be reused to help you handle that growth logic more easily So you may want to hold onto implementing your growing functionality just for now However, the reason why we mention it with `#set` is because it's important to grow buckets exactly when they are being expanded 1 `#get(key)` takes one argument as a key and returns the value that is assigned to this key If key is not found, return `nil` 1 `#has (key)` takes a key as an argument and returns `true` or `false` based on whether or not the key is in the hash map 1 `#remove(key)` takes a key as an argument If the given key is in the hash map, it should remove the entry with that key and return the deleted entry's value If the key isn't in the hash map, it should return `nil` 1 `#length` returns the number of stored keys in the hash map 1 `#clear` removes all entries in the hash map 1 `#keys` returns an array containing all the keys inside the hash map 1 `#values` returns an array containing all the values 1 `#entries` returns an array that contains each `key, value` pair",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6663,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_hash_map.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b0afa64d0cade8f9043b752b44c5a14a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_hash_map.md",
    "source_type": "git_repo",
    "title": "project_hash_map",
    "content": "entry with that key and return the deleted entry's value If the key isn't in the hash map, it should return `nil` 1 `#length` returns the number of stored keys in the hash map 1 `#clear` removes all entries in the hash map 1 `#keys` returns an array containing all the keys inside the hash map 1 `#values` returns an array containing all the values 1 `#entries` returns an array that contains each `key, value` pairExample: `[[first_key, first_value], [second_key, second_value]]`\nRemember that our hash map does not preserve insertion order when you are retrieving your hash map's data It is normal and expected for keys and values to appear out of the order you inserted them in #### Test Your Hash Map\n1 Create a new Ruby file 1 Create a new instance of your hash map and set the load factor to be `0 75` ```ruby\ntest = HashMap new\n```\n1 Populate your hash map using the `#set(key, value)` method by copying the following:\n```ruby\ntest set('apple', 'red')\ntest set('banana', 'yellow')\ntest set('carrot', 'orange')\ntest set('dog', 'brown')\ntest set('elephant', 'gray')\ntest set('frog', 'green')\ntest set('grape', 'purple')\ntest set('hat', 'black')\ntest set('ice cream', 'white')\ntest set('jacket', 'blue')\ntest set('kite', 'pink')\ntest set('lion', 'golden')\n```\n1 After populating your hash map with the data above, your hash map's current load levels should now be at `0 75` (full capacity) 1 Now with a full hash map, try overwriting a few nodes using `#set(key, value)` This should only overwrite the existing `values` of your nodes and not add new ones, so `#length` should still return the same value and `capacity` should remain the same 1 After that, populate your hash map with the last node below This will make your load levels exceed your `load factor`, triggering your hash map's growth functionality and doubling its `capacity`:\n```ruby\ntest set('moon', 'silver')\n```\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6663,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_hash_map.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ed977abb3ba9c4a4413ead8ca3a3e40d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_hash_map.md",
    "source_type": "git_repo",
    "title": "project_hash_map",
    "content": "map, try overwriting a few nodes using `#set(key, value)` This should only overwrite the existing `values` of your nodes and not add new ones, so `#length` should still return the same value and `capacity` should remain the same 1 After that, populate your hash map with the last node below This will make your load levels exceed your `load factor`, triggering your hash map's growth functionality and doubling its `capacity`: ```ruby test set('moon', 'silver') ``` 1If you have implemented your hash map correctly, the load levels of your expanded hash map should drop well below your load factor, and the entries should be spread evenly among the expanded buckets 1 With your new hash map, try overwriting a few nodes using `#set(key, value)` Again, this should only overwrite existing `values` of your nodes 1 Test the other methods of your hash map, such as `#get(key)`, `#has (key)`, `#remove(key)`, `#length`, `#clear`, `#keys`, `#values`, and `#entries`, to check if they are still working as expected after expanding your hash map #### Extra Credit\n- Create a class `HashSet` that behaves the same as a `HashMap` but only contains `keys` with no `values`",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6663,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_hash_map.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1e568a0dd0a76a7ae262754fc68f265c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_recursion.md",
    "source_type": "git_repo",
    "title": "project_recursion",
    "content": "Introduction\nUse what you have learnt about recursion so far to tackle two classic problems that can leverage recursion: Fibonacci and Merge Sort Fibonacci\nThe Fibonacci Sequence, is a numerical sequence where each number is the sum of the two numbers before it Eg 0, 1, 1, 2, 3, 5, 8, 13 are the first eight digits in the sequence You should already be thinking that perhaps this can be solved iteratively rather than recursively, and you would be correct Nevertheless generating the sequence recursively is an excellent way to better understand recursion You can watch this video from Khan Academy on recursive Fibonacci to understand it further Merge sort\nA significant part of computer science is dedicated to sorting data An algorithm which uses the 'divide and conquer' approach of recursion is able to reduce a sorting problem to smaller and smaller sub-problems Merge sort is one such sorting algorithm, and can be much faster than other algorithms such as bubble sort on the right data sets Essentially merge sort recurses through an array of unsorted data until it reaches its smallest sub-set, a single item Of course an array with a single item is considered sorted Merge sort then merges the single items back together in sorted order Pretty clever To understand what the merge sort algorithm is doing check out these resources:\nWatch this introductory video on merge sort from Harvard's CS50x course Watch another explanation of how merge sort works (watch only until 1:58:33), this time from a part of a Harvard CS50x lecture The concept of merging and Merge Sort -- How it Works part on YouTube give you a more formal look at this problem if you're still unclear (Optional) Play with this Merge Sort Visualizer to get a better feel for exactly what is happening during a Merge Sort Assignment\nFirst up create a file and tackle the fibonacci sequence:\n1 Using iteration, write a method `#fibs` which takes a number and returns an array containing that many numbers from the Fibonacci sequence Using an example input of `8`, this function should return the array `[0, 1, 1, 2, 3, 5, 8, 13]` 1 Now write another method `#fibs_rec` which solves the same problem recursively 1 Test both versions of your methods by passing in various lengths as arguments Hopefully you were able to solve the problem with recursion",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4884,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_recursion.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9e5336d33464fd1454ee56d5d1bcfb21",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_recursion.md",
    "source_type": "git_repo",
    "title": "project_recursion",
    "content": "write a method `#fibs` which takes a number and returns an array containing that many numbers from the Fibonacci sequence Using an example input of `8`, this function should return the array `[0, 1, 1, 2, 3, 5, 8, 13]` 1 Now write another method `#fibs_rec` which solves the same problem recursively 1 Test both versions of your methods by passing in various lengths as arguments Hopefully you were able to solve the problem with recursionIf you need some help understanding what's going on with this function, the \"Test it out\" section below will help If you're still a bit confused, there are some additional resources linked at the end of this page Once you have a firm grasp on solving Fibonacci with recursion, create a new file and work on a merge sort:\n1 Build a method `#merge_sort` that takes in an array and returns a sorted array, using a recursive merge sort methodology An input of `[3, 2, 1, 13, 8, 5, 0, 1]` should return `[0, 1, 1, 2, 3, 5, 8, 13]`, and an input of `[105, 79, 100, 110]` should return `[79, 100, 105, 110]` Tips:\n- Think about what the base case is and what behavior is happening again and again and can actually be delegated to someone else (e g that same method ) - It may be helpful to check out the background videos again if you don't quite understand what should be going on #### Test it out\nTo showcase the recursive effect implemented in your Fibonacci method, do the following:\n1 Add the following to the start of the method:\n```ruby\nputs 'This was printed recursively'\n```\n1 Run the method with `8` as the input 1 If the method is implemented correctly, you should see that sentence printed around 8 times (Keep in mind that, depending on the way you implemented the method, you may see 7 instead of 8 This isn't a bug It simply depends on how many times the method is *actually* repeated) Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4884,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_recursion.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9653fecfcd9c7a9c63f8a51e044730a2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\project_recursion.md",
    "source_type": "git_repo",
    "title": "project_recursion",
    "content": "Run the method with `8` as the input 1 If the method is implemented correctly, you should see that sentence printed around 8 times (Keep in mind that, depending on the way you implemented the method, you may see 7 instead of 8 This isn't a bug It simply depends on how many times the method is *actually* repeated) Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalAn extensive written JavaScript solution for recursive Fibonacci\nAnother look at merge sort\nVisualize and understand the memory allocation for recursive functions\nFor more attempts at recursion try the first 5 problems in Project Euler",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4884,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\project_recursion.md",
      "source_type": "git_repo"
    },
    "token_count": 132,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "927815b4c70634867c31163765afe7d2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\recursive_methods.md",
    "source_type": "git_repo",
    "title": "recursive_methods",
    "content": "Introduction\nRecursion is the idea that a function calls itself Pretty straightforward, right It's used to take a big problem and start breaking it down into smaller and smaller pieces (\"Divide and Conquer\") and continuing to feed their solutions back into the original function until some sort of answer is achieved and the whole chain unwinds From the Wikipedia entry on Divide and Conquer Algorithms:\nIn computer science, divide and conquer (D&C) is an important algorithm design paradigm based on multi-branched recursion A divide and conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same (or related) type, until these become simple enough to be solved directly The solutions to the sub-problems are then combined to give a solution to the original problem There's also a right and wrong way to use recursion The fact is, any problem you can solve recursively, you can also solve using the iterators that you know and love If you find yourself saying \"why didn't I just use a while loop here \" then you probably should have You won't often end up using a recursive solution to a problem, but you should get a feel for when it might be a good idea Some problems also break down into far too many pieces and totally overwhelm your computer's memory There's a balance In this brief lesson, you'll get a chance to learn more about when and how to use recursion and then in the next project you will get the chance to apply some of that (since it probably won't really stick until you've had a chance to try it) Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Why is recursion a useful technique for solving a big problem What are the limitations of using recursive solutions What types of problems are more suited for simple loops than recursion What is meant by \"recursive depth\" What is a \"stack overflow\" (the concept, not the website) Why is that relevant to a recursive problem Assignment\n1 Read the [Chapter on Recursion](http://ruby bastardsbook com/chapters/recursion/) in the Bastards Book of Ruby by Dan Nguyen 1 Watch this [explanation of recursion by Web Dev Simplified](https://www youtube com/watch v=6oDQaB2one8) 1 Watch this [Video on Recursion](https://www youtube com/watch v=mz6tAJMVmfM) from CS50 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4399,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\recursive_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c0228fe226ec35da0af08f682322f16a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\recursive_methods.md",
    "source_type": "git_repo",
    "title": "recursive_methods",
    "content": "problems are more suited for simple loops than recursion What is meant by \"recursive depth\" What is a \"stack overflow\" (the concept, not the website) Why is that relevant to a recursive problem Assignment 1 Read the [Chapter on Recursion](http://ruby bastardsbook com/chapters/recursion/) in the Bastards Book of Ruby by Dan Nguyen 1 Watch this [explanation of recursion by Web Dev Simplified](https://www youtube com/watch v=6oDQaB2one8) 1 Watch this [Video on Recursion](https://www youtube com/watch v=mz6tAJMVmfM) from CS50 1Read the [\"Implementation Issues\" section of the wiki article](http://en wikipedia org/wiki/Divide_and_conquer_algorithm#Implementation_issues) to get an overview of some of the limitations of recursion Test yourself\n1 Solve each of the questions from this [Code Quiz on recursion](http://www codequizzes com/computer-science/beginner/recursion) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How would you briefly define a recursive function What is the point of recursion Is it more efficient than using a plain loop What are the 2 essential parts in a recursive function Why is \"stack overflow\" relevant to a recursive problem Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental \"What is Ruby Recursion and How Does It Work \" on Stack Overflow\nEfficient Recursion from U of Alberta\nNatashatherobot's blog post on Recursion in Ruby\nFunctional Programming Techniques with Ruby post, which covers recursion at the top",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4399,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\recursive_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cb44edd0095670605fdaea5dc1ccb725",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "Introduction\nIn the last lesson, we focused on measuring complexity from the perspective of time We learned about the various ways in which algorithm complexity can be measured and why Big O was the preferred way We also showed some examples of how this applied to measuring the time complexity of an algorithm In this lesson, we'll focus on space complexity and see how the same notations we've already learned can be used to measure how a change in input for our algorithms can affect the amount of memory it uses When we talk about memory, we mean primary memory, which is the working memory available to your system to execute algorithms You can read more about the topic in this GeeksforGeeks Primary Memory article Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What do we mean by space complexity Why is it important to consider how our algorithm uses memory space How do we measure space complexity What do we mean by space complexity Space complexity can be considered to be the total space used by an algorithm relative to the size of the input Thinking back to the previous lesson, you'll recall that we don't consider the efficiency of an algorithm in how it performs in one specific instance of that algorithm running Instead, we want to know how the efficiency changes when the size of the input changes Measuring space complexity considers the space used by your algorithm input and auxiliary space Auxiliary space is the extra space used by the algorithm These can be things like temporary variables created during the execution of the algorithm They won't have a lasting impact on memory space but during the execution of the algorithm will need to be considered Therefore, you can consider the space complexity to be the total amount of working memory our algorithm needs The importance of considering space complexity\nIf you do any of your own research into algorithm efficiency, you'd be forgiven for assuming that space complexity isn't all that important Most articles you'll read on the subject spend all or the majority of the time covering time complexity and if they do mention space complexity at all, it's pretty much a footnote There are some fair arguments for why Memory these days is pretty cheap compared to processing power, and therefore it's often easier to get around space constraints by increasing primary memory, for example by buying more RAM It's also fair to say that most algorithms you write will probably deal with very manageable input sizes, and therefore space doesn't really become a problem You'll invariably run into an issue with your program being slow before you have any issues with memory being used up",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12429,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a27d1827998901e6b7f35d3449b557e3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "these days is pretty cheap compared to processing power, and therefore it's often easier to get around space constraints by increasing primary memory, for example by buying more RAM It's also fair to say that most algorithms you write will probably deal with very manageable input sizes, and therefore space doesn't really become a problem You'll invariably run into an issue with your program being slow before you have any issues with memory being used upOn the flip side, although memory is cheap, your hardware will usually have a fixed amount You can't expand memory easily on the fly in most scenarios When the problem is one of time, you can just allow the program to run for longer and it will eventually come back with a result You can't do this with space On balance, you'll probably come across problems in which the time it takes to execute is more important than the space it uses, but knowing about measuring space complexity will mean when you do run into a situation where there are space constraints, you'll be prepared to handle it Measuring space complexity\nThe good news is that we measure space complexity in exactly the same way as time complexity You already learned about Big O in the last lesson, so you already know how to measure the efficiency of your code The difference is that you'll need to think about how your algorithm is utilizing memory rather than time The first thing to know is that, like time complexity, we measure space complexity by considering all steps including any constants, and then we drop the constants when applying a Big O Notation to the algorithm So we may have an algorithm that uses memory in Linear Complexity as the input changes, and in doing so creates 3 temporary variables So we can think of the complexity of our algorithm as O(N) + 3 auxiliary variables using memory Because those 3 variables are the same no matter our input size, we don't concern ourselves with them when considering the space complexity of our algorithm So we'd say the space complexity is O(N) This should be familiar to you from the time complexity lesson As a reminder the Big O Notations are:\nO(1) - Constant Complexity\nO(log N) - Logarithmic Complexity\nO(N) - Linear Complexity\nO(N log N) - N x log N Complexity\nO(n²) - Quadratic Complexity\nO(n³) - Cubic Complexity\nO(2ⁿ) - Exponential Complexity\nO(N ) - Factorial Complexity\nLet's work through some examples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12429,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "261067d67c6de60ebca7f826029fdd5c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "space complexity of our algorithm So we'd say the space complexity is O(N) This should be familiar to you from the time complexity lesson As a reminder the Big O Notations are: O(1) - Constant Complexity O(log N) - Logarithmic Complexity O(N) - Linear Complexity O(N log N) - N x log N Complexity O(n²) - Quadratic Complexity O(n³) - Cubic Complexity O(2ⁿ) - Exponential Complexity O(N ) - Factorial Complexity Let's work through some examplesWe won't go through every possible complexity because most don't apply for the data structures you'll be familiar with and use the most We'll cover the most common ones O(1) - constant complexity\nConsider this example ruby\ndef multiply(num1, num2)\nnum1 * num2\nend\nHere it should hopefully be clear that no matter the arguments we pass to the function call, only a single value is created (the product of the numbers) The value doesn't change Therefore, we can consider the space this takes is always O(1) O(N) - linear complexity\nMost data structures you come across will have a space complexity of O(N) That makes sense - when you increase the number of items in your data structure, it increases the space that data structure occupies in a linear way ruby\ndef sum_arr(arr)\ncopy_arr = arr dup\nsum = 0\ncopy_arr each do |number|\nsum += number\nend\nreturn sum\nend\nWe wrote this in a slightly more verbose way than you'd normally write it in Ruby to make it a little clearer Here we have a method which accepts an array Within, we have two variables One called sum and the other copy_arr which holds a copy of the array passed in We then have an each loop that iterates over the array The amount of space that this algorithm takes depends on the array that is passed to it It could be 3 elements in the array or 300 When we don't know the length of the array, we refer to it as N, so we have N + 1 variable called sum We know that we drop constants with Big O, so we are left with N, or O(N) for its Big O notation Why did we make a copy of the array That will be discussed in a later section The complexity is replicated no matter the data structure:\nruby\ndef sum_hash_values(hash)\ncopy_hash = hash",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12429,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "bc0e254d75a4b8f0711828530a0c7edb",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "don't know the length of the array, we refer to it as N, so we have N + 1 variable called sum We know that we drop constants with Big O, so we are left with N, or O(N) for its Big O notation Why did we make a copy of the array That will be discussed in a later section The complexity is replicated no matter the data structure: ruby def sum_hash_values(hash) copy_hash = hashdup\nsum = 0\ncopy_hash each do |_, value|\nsum += value\nend\nreturn sum\nend\nHere as the hash size increases, the space it uses grows in a linear way Other complexities\nAs we've stated, many data structures share O(N) space complexity, and therefore you won't write many algorithms with a space complexity that differs You do find some recursive functions that may have a different space complexity and some sorting algorithms You normally won't have much reason to consider anything else though In the last lesson one of the assignments was a link to the Big-O cheat sheet If you take another look at it now, you may have a better appreciation for just how amazing it is as a reference for space and time complexity If you scroll down to the data structures and then the sorting algorithms section, you'll see it gives you the time and space complexities Notice just how many are O(N), especially for data structures Many sorting algorithms have just O(1) space complexity, something to keep in mind as you come across different sorting algorithms during your learning That's why we won't be diving into examples for other Big O notations with space complexity We'd have to come up with convoluted examples that wouldn't represent most code you'll write If you do come across a good real world example in your own code, then do let us know and we may consider adding it here for others to consider Other considerations\nOne of the common areas that causes confusion when considering space complexity is what constitutes using space in the context of an algorithm In an earlier example we wrote methods that duplicated an array and hash argument We did that to be explicit But what if we'd written the method as:\nruby\ndef sum_arr(arr)\nsum = 0\narr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12429,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "67d122757b7295509edff2ebd5b0e516",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "then do let us know and we may consider adding it here for others to consider Other considerations One of the common areas that causes confusion when considering space complexity is what constitutes using space in the context of an algorithm In an earlier example we wrote methods that duplicated an array and hash argument We did that to be explicit But what if we'd written the method as: ruby def sum_arr(arr) sum = 0 arreach do |number|\nsum += number\nend\nreturn sum\nend\nWhen a data structure is passed in as the argument, especially for languages that pass arrays by reference rather than value, it can be a bit unclear if that method considers the space used by that data structure when calculating its space complexity If we didn't count it, then it would be easy for all our methods to have great space usage on paper because we put the onus on the caller to allocate that space If we did count it, but the data structure was created for use by many different methods, then the space complexity for all those methods is O(N) when they aren't utilizing additional space Then consider that if your method receives an array as an input and loops it, an index must be created for the loop which uses additional space The first answer to analyzing space complexity provides some great context to the question and gives some thought-provoking answers Ultimately when you consider Big O measures the worst-case scenario, it would be easier to err on the side of caution and do consider the space of arguments passed to your method Wrapping up\nMeasuring the complexity of your algorithms, whether time or space, can be difficult It takes practice and consideration For most practice code you write, it's not something that will cross your mind, especially as you wrestle with getting your code to work Once your code is working though, and you might be looking to refactor it, it's definitely worth taking a moment to consider if the code is as efficient as it could be Are you creating unnecessary variables Or does your algorithm use a data structure with a worse time complexity for what it's mostly used for than another data structure would have been On top of these considerations, you also need to balance the readability of your code If you start introducing memoization in order to make your code more efficient, does it mean it's much harder to understand Is that trade-off worth it Ultimately, you need to make a call on it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12429,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "f610967cb3d0e4b2424aed582cf466dc",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "Or does your algorithm use a data structure with a worse time complexity for what it's mostly used for than another data structure would have been On top of these considerations, you also need to balance the readability of your code If you start introducing memoization in order to make your code more efficient, does it mean it's much harder to understand Is that trade-off worth it Ultimately, you need to make a call on itOur advice would be to consider the readability first, and look to refactor for better efficiency if there is a clear impact on performance Assignment\n1 Read this [article on big O and space complexity](https://dev to/mwong068/big-o-space-complexity-lcm) It isn't detail heavy but does a good job explaining things clearly, and does lightly cover recursive functions 1 This [article on recursion and space complexity](https://dev to/elmarshall/recursion-and-space-complexity-13gc) offers a little more context to recursive functions and their space complexity Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is space complexity How do we measure space complexity What are the main considerations we should consider before optimising code Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Space Complexity in Data Structure article for a more comprehensive overview of space complexity in Data Sctructures and Algorithms Video on Space Complexity and Big O Gotchhas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12429,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "a6462a35e6002f82852fa0a98b277d35",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\conclusion\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "You did it!\nRuby is conquered.  You're now a ninja.... okay, that's a bit hyperbolic but the fact is that you now know more than enough Ruby to take on Rails like a Boss.  And, actually, the real secret is that the hard part is over.  Getting to this point is the most difficult part of the learning curve.\nSure, you've still got plenty to learn, but the real conceptual leaps have already been made.  You can think like a programmer now and should be able to figure out how to appropriately Google for pretty much anything you don't already know.\nIf you know Ruby, the world is sort of opened up for you.  Want to learn Python?  That would be a whole lot easier now.  Nervous about Rails?  Don't be.  Rails is just Ruby that's been packaged up to do lots of stuff for you.  With what you know, you'll have a much easier time \"seeing the matrix\" and understanding what Rails is up to.  Even JavaScript should make a whole lot more sense to you once we get back to it.\nBefore you move on, we would love it if you could send us your feedback on the Ruby course. Getting user (you) feedback is important so we can continue to improve the curriculum and get an idea of your experience. So that's it, you're more than ready to go ahead and take on Rails.  Congratulations!!!\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nWhy Ruby and Python are different\nExercism, a site where you can grow and improve your ability to write code by reading others' code and commenting on it.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1847,
      "relative_path": "git_repos\\odin-project\\ruby\\conclusion\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ada1bdb3094faed53bfe38c4003dfb5d",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\conclusion\\project_ruby_final.md",
    "source_type": "git_repo",
    "title": "project_ruby_final",
    "content": "Introduction\nYou've come a long way Now it's time to prove how much you've learned Chess is a classic game that appears very complicated at first but can be broken down into logical steps that make it a great Ruby capstone project If you've never played, be sure to read up on the rules (see the Chess Wikipedia Page) first The problem specification is deliberately sparse for this, your final project of Ruby -- it's up to you to attack the problem with very little prior information or structure, which is good practice for real world programming challenges You have all the tools you need You already did a lot of the heavy thinking in the Knight's Travails project The main difference is that this problem has the broadest scope of anything you've done yet The keys here will be thinking it through logically ahead of time and maintaining a disciplined workflow It'll be much easier on you if you're able to stay organized and break it down into components that you can tackle one by one This is a great project to have as a part of your portfolio going forward because it shows you can take on something with a lot of different components to it Assignment\n1 **Build a command line Chess game where two players can play against each other **\n1 The game should be properly constrained -- it should prevent players from making illegal moves and declare check or check mate in the correct situations 1 Make it so you can save the board at any time (remember how to serialize )\n1 Write tests for the important parts You don't need to TDD it (unless you want to), but be sure to use RSpec tests for anything that you find yourself typing into the command line repeatedly 1 Do your best to keep your classes modular and clean and your methods doing only one thing each This is the largest program that you've written, so you'll definitely start to see the benefits of good organization (and testing) when you start running into bugs 1 Unfamiliar with Chess Check out some of the additional resources to help you get your bearings 1 Have fun Check out Wikipedia's [unicode chess characters](http://en wikipedia org/wiki/Chess_symbols_in_Unicode) for a little spice for your gameboard #### Extra credit\n1 Build a very basic AI computer player (perhaps who does a random legal move) Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Illustrated rules of Chess\nChess notation for humans and computers\nIf you're feeling stuck, you should visit the community Discord",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3231,
      "relative_path": "git_repos\\odin-project\\ruby\\conclusion\\project_ruby_final.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "011e1addf39eb05cd69015e01c022c85",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\conclusion\\project_ruby_final.md",
    "source_type": "git_repo",
    "title": "project_ruby_final",
    "content": "get your bearings 1 Have fun Check out Wikipedia's [unicode chess characters](http://en wikipedia org/wiki/Chess_symbols_in_Unicode) for a little spice for your gameboard #### Extra credit 1 Build a very basic AI computer player (perhaps who does a random legal move) Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental Illustrated rules of Chess Chess notation for humans and computers If you're feeling stuck, you should visit the community DiscordOnce you have completed the project, check out this discussion on writing chess in Ruby from RubyQuiz Warning: this resource contains a blueprint for how to complete this project That means, if you decide to peruse it, you won't get the opportunity to dig into this problem",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3231,
      "relative_path": "git_repos\\odin-project\\ruby\\conclusion\\project_ruby_final.md",
      "source_type": "git_repo"
    },
    "token_count": 153,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f31170c9ff08668df34605d2d19cf943",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\files_and_serialization\\files_and_serialization.md",
    "source_type": "git_repo",
    "title": "files_and_serialization",
    "content": "Introduction\nUntil now you've mostly been working with self-contained command line programs It's time to start branching out and interacting with files Files are basically just collections of bits and bytes that you'll somehow need to open, read into your program, modify, and save Even though many files (like images) look like a giant jumble of data when you open them up in a text editor, it can be helpful to think of all files as one really long string, or stream, of bytes Your script will read them in from top to bottom, performing whatever operations you specify along the way Lucky for you, Ruby makes your life pretty easy with regards to dealing with files It has the tools necessary to read those long streams of bytes into your program and then allow you to work with them using the objects you're familiar with As long as you remember that the files are just a long stream of words/characters/bytes being read in from top to bottom, it should be fairly intuitive If you want to do more detailed stuff like write to a specific point in a file, you'll need to figure out what position you're at first, since you may be in the middle of it somewhere Working with files gets you into the idea of serialization, which basically just means converting your data into a storable format like a string That's very useful whether you're thinking of saving your objects and classes (say, when you're in the middle of a game) to a file or when you're transmitting those same types of objects to the web browser (since the only way for information to travel via HTTP is as a string) Luckily, Ruby again makes things pretty easy for you There are some generally accepted formats for serializing data and Ruby gives you the tools you'll need to work with all of them The two you'll run into again and again are YAML and JSON You often see YAML used to save configuration files in Ruby on Rails because it's very lightweight and straightforward You can read it easily in a text editor JSON is ubiquitous across the web, and is the format of choice to deliver complex or deeply nested data (like objects) from some website to your program via an API (like if you want to interface with Google Maps) Finally, files and serialization overlap in a lot of ways with the idea and purpose of databases -- they facilitate the ability to maintain state and permanence for your data We'll briefly look into some basic database connections that Ruby provides as well",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5991,
      "relative_path": "git_repos\\odin-project\\ruby\\files_and_serialization\\files_and_serialization.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e5f9ab658de583e0343bef2a48c2e3f1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\files_and_serialization\\files_and_serialization.md",
    "source_type": "git_repo",
    "title": "files_and_serialization",
    "content": "and is the format of choice to deliver complex or deeply nested data (like objects) from some website to your program via an API (like if you want to interface with Google Maps) Finally, files and serialization overlap in a lot of ways with the idea and purpose of databases -- they facilitate the ability to maintain state and permanence for your data We'll briefly look into some basic database connections that Ruby provides as wellLesson overview\nThis section contains a general overview of topics that you will learn in this lesson Two ways to store a file from your hard drive into a string or array in your Ruby script Three things made possible or much easier by serialization What is JSON What is YAML Turning a Ruby object into JSON Turning JSON into a Ruby object What classes and methods can your Ruby script use to read and write to the hard drive Assignment\n1 Read [Thoughtbot's I/O in Ruby](https://thoughtbot com/blog/io-in-ruby) You can ignore both the 'Putting it all together' and the 'Working with disparate APIs' sections 1 Watch [icc0612's introduction to serialization](https://www youtube com/watch v=uS37TujnLRw) It will explain the concept of serialization before you implement it in Ruby 1 Read [Choosing the Right Serialization Format](https://www sitepoint com/choosing-right-serialization-format/) for more information about the various serialization options you can choose from 1 Skim [Alan Skorkin's article about object oriented serialization in Ruby](http://www skorks com/2010/04/serializing-and-deserializing-objects-with-ruby/) The article isn't well formatted and some code examples are outdated, but this post still contains relevant information To view in a better format, you can copy the contents of this [pastebin](https://pastebin com/ZixCHcWk) and paste them into the [Odin Markdown Preview Tool](https://www theodinproject com/lessons/preview) 1 Read the sections 'Ruby files' and 'Ruby directories' from the [Input/Output chapter of Zetcode's Ruby Tutorial](http://zetcode com/lang/rubytutorial/io/) for examples of how to manipulate files and directories using the `File` and `Dir` classes Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5991,
      "relative_path": "git_repos\\odin-project\\ruby\\files_and_serialization\\files_and_serialization.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "95b4b3375a292a145fd0e53dba47d1ee",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\files_and_serialization\\files_and_serialization.md",
    "source_type": "git_repo",
    "title": "files_and_serialization",
    "content": "information To view in a better format, you can copy the contents of this [pastebin](https://pastebin com/ZixCHcWk) and paste them into the [Odin Markdown Preview Tool](https://www theodinproject com/lessons/preview) 1 Read the sections 'Ruby files' and 'Ruby directories' from the [Input/Output chapter of Zetcode's Ruby Tutorial](http://zetcode com/lang/rubytutorial/io/) for examples of how to manipulate files and directories using the `File` and `Dir` classes Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How would you go through the lines of a file using an IO object How would you take the Array [1,2,3] and serialize it into a JSON string format What are the benefits of YAML vs JSON vs MessagePack serialization formats How can you check if a file or directory exists How can you list a directory's contents in the form of an array Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Everything You Need to know about Serialization in Ruby on Rails\nRuby Monk's section on Serializing\nShort Example of Serialization from Ruby Learning\nHow to Read and Write Files by Giraffe Academy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5991,
      "relative_path": "git_repos\\odin-project\\ruby\\files_and_serialization\\files_and_serialization.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "cb4f969fab3afa1d7960f8a93158d602",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\files_and_serialization\\project_hangman.md",
    "source_type": "git_repo",
    "title": "project_hangman",
    "content": "Introduction\nFiles are a great way to save and reload a game, so we'll give it a shot here by building Hangman.\nAssignment\nYou will be building a command line Hangman game where one player plays against the computer, but a bit more advanced.\n1. Download the `google-10000-english-no-swears.txt` dictionary file from the first20hours GitHub repository [google-10000-english](https://raw.githubusercontent.com/first20hours/google-10000-english/master/google-10000-english-no-swears.txt).\n1. When a new game is started, your script should load in the dictionary and randomly select a word between 5 and 12 characters long for the secret word.\n1. You don't need to draw an actual stick figure (though you can if you want to!), but do display some sort of count so the player knows how many more incorrect guesses they have before the game ends.  You should also display which correct letters have already been chosen (and their position in the word, e.g. `_ r o g r a _ _ i n g`) and which incorrect letters have already been chosen.\n1. Every turn, allow the player to make a guess of a letter.  It should be case insensitive.  Update the display to reflect whether the letter was correct or incorrect.  If out of guesses, the player should lose.\n1. Now implement the functionality where, at the start of any turn, instead of making a guess the player should also have the option to save the game.  Remember what you learned about serializing objects.\n1. When the program first loads, add in an option that allows you to open one of your saved games, which should jump you exactly back to where you were when you saved.  Play on!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1766,
      "relative_path": "git_repos\\odin-project\\ruby\\files_and_serialization\\project_hangman.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7583400cd06317d7580ffb3b44b06234",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "Introduction\nYou've written a lot of code up to this point, and you've hopefully moved on from just trying to write code that works, to now considering code readability and maintainability You might spend some time considering how you can create the necessary abstractions so that your code stays easy to work with even as the requirements for it grow Code readability and maintainability are super important After all, you will likely spend as much, if not more, time reading code than writing it You need to make sure new features are integrated with ease However, there is another consideration that can be just as important when writing code Efficiency You need to understand how the code you write will perform You also need to understand how the choices you make impact that performance so that you can choose the right data structure and algorithm for your requirement In programming, there are two ways we can measure the efficiency of our code We can measure the time complexity or the space complexity In this lesson, we'll introduce the core concepts around measuring the time efficiency of the code you write Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How the efficiency of an algorithm is measured What is Big O What are the Big O notations used to measure an algorithm's efficiency How else can we measure an algorithm's efficiency What to do when two algorithms have the same complexity Efficiency basics\nThe very first step in mastering efficient code is to understand how to measure it Let's take a look at a little program that prints out all odd numbers between 1 and 10 ```ruby\ndef odd_numbers_less_than_ten\ncurrent_number = 1\nwhile current_number < 10\nif current_number % 2 = 0\nputs current_number\nend\ncurrent_number += 1\nend\nend\n```\nIf you were to run this in your terminal, you should get the numbers 1, 3, 5, 7 and 9 printed to the console It probably took a fraction of a second to run If you were to run it again, it might take the same time, or it might be faster or slower depending on what else your computer is doing If you were to run it on a different computer, it would again run faster or slower Therefore it's important to understand that you never measure the efficiency of an algorithm by how long it takes to execute So how do we measure it The way to measure code efficiency is to evaluate how many 'steps' it takes to complete",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "b2da037621e91255a3826d378796a5d7",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "time, or it might be faster or slower depending on what else your computer is doing If you were to run it on a different computer, it would again run faster or slower Therefore it's important to understand that you never measure the efficiency of an algorithm by how long it takes to execute So how do we measure it The way to measure code efficiency is to evaluate how many 'steps' it takes to completeIf you know that one algorithm you write takes 5 steps and another one takes 20 steps to accomplish the same task, then you can say that the 5-step algorithm will always run faster than the 20-step algorithm on the same computer Let's go back to our odd_numbers_less_than_ten method How many steps does our algorithm take We assign the number 1 to a variable That's one step We have a loop For each iteration of the loop, we do the following:\nCompare current_number to see if it is less than 10 That is 1 step We then check if current_number is odd That is 1 step If it is then we output it to the terminal That's 1 step every 2 iterations We increase current_number by 1 That is 1 step To exit the loop, we need to compare current_number one last time to see that it is not less than ten any more That is one last step So there are 3 steps for every loop iteration and it iterates 9 times which is 27 steps Then we have one step which iterates for only half the loop iteration which is 5 steps Assigning an initial value to current_number and checking the exit condition of the loop is one step each 27 + 5 + 1 + 1 = 34 steps Therefore, we can say our algorithm takes 34 steps to complete While this is useful to know, it isn't actually helpful for comparing algorithms To see why, let's slightly modify our initial algorithm to take in a number instead of setting a hard default of 10 ```ruby\ndef odd_numbers(max_number)\ncurrent_number = 1\nwhile current_number < max_number\nif current_number % 2 = 0\nputs current_number\nend\ncurrent_number += 1\nend\nend\n```\nHow many steps does this algorithm take You've probably realised the answer is it depends If you set max_number to be 10, like we did before, the number of steps is 34, but if you enter another number then the number of steps changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "de03511030b1a2b6fc6e169542018b19",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "of setting a hard default of 10 ```ruby def odd_numbers(max_number) current_number = 1 while current_number < max_number if current_number % 2 = 0 puts current_number end current_number += 1 end end ``` How many steps does this algorithm take You've probably realised the answer is it depends If you set max_number to be 10, like we did before, the number of steps is 34, but if you enter another number then the number of steps changesThere is no concrete number we can use to measure the efficiency of our code because it changes based on an external input So what we really want to be able to measure is how the number of steps of our algorithm changes when the data changes This helps us answer the question of whether the code we write will scale To do that, we need to delve into a new concept: Asymptotic Notations and, in particular, Big O Asymptotic notations\nAsymptotic Notations are used to describe the running time of an algorithm Because an algorithm's running time can differ depending on the input, there are several notations that measure that running time in different ways The 3 most common are as follows:\nBig O Notation - represents the upper bound of an algorithm This means the worst-case scenario for how the algorithm will perform Omega Notation - represents the lower bound of an algorithm This is the best-case scenario Theta Notation - represents both the upper bound and lower bound and therefore analyses the average case complexity of an algorithm Big O is the one you'll most commonly see referenced because you need to be sure the worst-case scenario for any code you write is scalable as the inputs grow in your application It's also worth noting that the Notations given below for Big O also apply to Omega and Theta notations The differences are in how they look to measure the efficiency of the algorithm and therefore which Notation should apply This should become clearer as you read on What is big O Big O gives us a consistent way to measure the efficiency of an algorithm It gives us a measurement for the time it takes for an algorithm to run as the input grows so that you can directly compare the performance of two algorithms and pick the best one Big O is not a piece of code you can put your algorithm into that tells you how efficient it is",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "16505d5e8ef2372ae8f724e2a9df9fb4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "read on What is big O Big O gives us a consistent way to measure the efficiency of an algorithm It gives us a measurement for the time it takes for an algorithm to run as the input grows so that you can directly compare the performance of two algorithms and pick the best one Big O is not a piece of code you can put your algorithm into that tells you how efficient it isYou will need to measure how the number of steps changes as the data grows, and using this you can apply a Big O Notation to it and measure it against other algorithms In many cases you'll be using a data structure in which the ways you interact with it are well known, and in that case it's easier to judge how it will scale as the input changes Firstly, we'll summarise the Big O Notations and then provide a little more context for each one The reading materials will dive into greater detail Big O notation\nThe Big O Notations in the order of speed from fastest to slowest are:\nO(1) - Constant Complexity\nO(log N) - Logarithmic Complexity\nO(N) - Linear Complexity\nO(N log N) - N x log N Complexity\nO(n²) - Quadratic Complexity\nO(n³) - Cubic Complexity\nO(2ⁿ) - Exponential Complexity\nO(N ) - Factorial Complexity\nO(1) - constant complexity\nTo understand Constant Complexity, let's use an array ruby\narr = [1, 2, 3, 4, 5]\nIf we want to look up what is at index 2, we can get to the element using arr[2] which would give us back 3 This takes just one step If we double our array ruby\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nWe can still access any element in just one step arr[7] gives us 8 in a single step Our array can keep growing and we can always access any element in a single step It's constant Hence we have O(1) Looking up something in one step is as good as it gets for time complexity While we're looking at the basic form of Big O, let's take a look at one of its little gotchas to keep in mind You may have thought a moment ago, is it really just one step",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "f4cc0eaa1d9e6d32307e5f58a307bad1",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "single step Our array can keep growing and we can always access any element in a single step It's constant Hence we have O(1) Looking up something in one step is as good as it gets for time complexity While we're looking at the basic form of Big O, let's take a look at one of its little gotchas to keep in mind You may have thought a moment ago, is it really just one stepThe answer is technically no, in reality the computer must first look up where the array is in memory, then from the first element in the array it needs to jump to the index argument provided That's at least a couple of steps So you wouldn't be wrong for writing something like O(1 + 2(steps)) However, the 2 steps are merely incidental With an array of 10,000 elements, it still takes the same amount of steps as if the array was 2 elements Because of this, Big O doesn't concern itself with these incidental numbers They don't provide any context to how the complexity grows when the data size changes, because they are constant, and so in Big O they are dropped Big O only wants to tell us an algorithm's complexity relative to the size of the input Do the number of steps matter Yes, they might We'll touch on when this may be the case a little later O(log N) - logarithmic complexity\nLogarithmic Complexity tells us that the number of steps an algorithm takes increases by 1 as the data doubles That's still pretty efficient when you think about it Going from 5,000 to 10,000 data elements and only taking one additional step can scale really well One such algorithm that does this is Binary Search It only works on sorted arrays, but if you have an array of 10 items in sorted order:\nruby\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTo find out if the array contains the number 7, Binary Search calculates the middle index using the formula:\nruby\nmiddle_index = (start_index + end_index) / 2\nHere, start_index is the beginning of the array (initially 0), and end_index is the last element of the array (initially 9 for a 10-element array) The middle element at index 4 would be 5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "1e3af43f37e184761936e05875074ba3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "sorted order: ruby arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] To find out if the array contains the number 7, Binary Search calculates the middle index using the formula: ruby middle_index = (start_index + end_index) / 2 Here, start_index is the beginning of the array (initially 0), and end_index is the last element of the array (initially 9 for a 10-element array) The middle element at index 4 would be 5Because the array is sorted and 7 is greater than 5, we can eliminate 5 and everything to its left, as those numbers are all less than 7 ruby\narr = [-, -, -, -, -, 6, 7, 8, 9, 10]\nIn just one step, we've eliminated half of the array Now, we recalculate the middle index with the new start_index and end_index values The middle index would now be 7, and the number at this index is 8 Since 7 is less than 8, we can eliminate 8 and everything to its right ruby\narr = [6, 7, -, -, -]\nWe repeat this process until we have an array of just one item If that item matches the number we're looking for, we've found it If not, the number isn't in the array The below table summarises the size of an array doubling and how many steps in Big O terms we would need to arrive at one element to see if it matches what we're looking for:\n| Size | Steps |\n| ---- | ----- |\n| 1    | 1     |\n| 2    | 2     |\n| 4    | 3     |\n| 8    | 4     |\n| 16   | 5     |\n| 32   | 6     |\nPretty impressive eh O(N) - linear complexity\nThis one is pretty easy to wrap your head around Linear Complexity just tells us that as the number of items grows, the number of steps grows at exactly the same rate Every time you iterate over an array is an example of Linear Complexity If you have an array of 5 items, then we can iterate every element in 5 steps An array of 10 items can be iterated in 10 steps",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "dc83eca37b65e9315769de9b3293f049",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "- linear complexity This one is pretty easy to wrap your head around Linear Complexity just tells us that as the number of items grows, the number of steps grows at exactly the same rate Every time you iterate over an array is an example of Linear Complexity If you have an array of 5 items, then we can iterate every element in 5 steps An array of 10 items can be iterated in 10 stepsIf you come across any algorithm with a Big O efficiency of O(N), you know that the number of steps will increase in line with the number of elements in your data structure O(N log N) - N x log N complexity\nYou can't say this one isn't appropriately named This notation means we have an algorithm which initially is O(log N) such as our example earlier of Binary Search where it repeatedly breaks an array in half, but with O(N log N) each of those array halves is processed by another algorithm with a complexity of O(N) One such algorithm is the merge sort algorithm from our previous lesson :)\nO(n²) - quadratic complexity\nYou've probably written code with a Quadratic Complexity on your programming journey It's commonly seen when you loop over a data set and within each loop you loop over it again For example, if our array has 3 items, the nested loops require 3² = 9 sub-steps Adding just one more item to the array almost doubles this number to 4² = 16 Adding a 5th item takes us to 5² = 25 sub-steps Then doubling the array size to 10 items increases the sub-steps from 25 to 100, so 4 times as much work needed We hope you can see where we're going with this O(n³) - cubic complexity\nThink triple nested loops baby If looping over an array with n items, 1 extra item adds an extra outer loop, an extra middle loop, and an extra innermost loop When using such triply nested loops on an array of size n, we require a total of n³ sub-steps For example, if our array has 3 items, the triply-nested loops require a total of 3³ = 27 sub-steps Adding one more item more than doubles this number to 4³ = 64 sub-steps The task almost doubles again for 5 items, with 5³ = 125 sub-steps",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "3ed0855b1be5d7b7a7a3960caf08b092",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "outer loop, an extra middle loop, and an extra innermost loop When using such triply nested loops on an array of size n, we require a total of n³ sub-steps For example, if our array has 3 items, the triply-nested loops require a total of 3³ = 27 sub-steps Adding one more item more than doubles this number to 4³ = 64 sub-steps The task almost doubles again for 5 items, with 5³ = 125 sub-stepsDoubling our array size to 10 items means we require 10³ = 1000 sub-steps in total, 8 times as many as before 100 items in the array require a total of 1,000,000 sub-steps Ouch O(2ⁿ) - exponential complexity\nExponential Complexity means that with each item added to the data size, the number of steps doubles from the previous number of steps Let's provide a little table to see how quickly this can get out of hand | Size | Steps |\n| ---- | ----- |\n| 1    | 2     |\n| 2    | 4     |\n| 3    | 8     |\n| 4    | 16    |\n| 5    | 32    |\n| 6    | 64    |\n| 7    | 128   |\n| 8    | 256   |\n| 9    | 512   |\n| 10   | 1024  |\nYou want to avoid this if at all possible, otherwise you won't be processing much data quickly O(N ) - factorial complexity\nThe factorial of a number is the product of all numbers between 1 and that number For example, the factorial of 4 (written as 4 ) is 4 * 3 * 2 * 1 You will come across Factorial Complexity if you ever need to calculate permutations or combinations If you have an array and have to work out all the combinations you can make from the array, that is a Factorial complexity It's manageable for a small number of items, but the leap with each new item in a dataset can be huge The factorial of 3 is 6 (3 * 2 * 1) The factorial of 4 is 24 The factorial of 10 3,628,800 So you can see how quickly things can get out of hand",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "fcbd6d7877e3566569dcd12e53450771",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "an array and have to work out all the combinations you can make from the array, that is a Factorial complexity It's manageable for a small number of items, but the leap with each new item in a dataset can be huge The factorial of 3 is 6 (3 * 2 * 1) The factorial of 4 is 24 The factorial of 10 3,628,800 So you can see how quickly things can get out of handAlternatives to big O\nIf Big O gives us the worst-case scenario of how our algorithm will scale, what alternatives are there Big Ω (omega notation)\nOmega Notation gives us the best-case scenario for an algorithm To understand where this might be, let's look at a method and discuss how we can measure its complexity ruby\ndef find_value(arr)\narr each do |item|\nreturn item if item == 1\nend\nend\nIn the worst case (Big O), which occurs if the item is not in the array or is the last item in the array, the algorithm has linear complexity O(N) This happens because, in both cases, the code must iterate through every element As the input size doubles, the number of iterations required in the worst case also doubles However, in the best-case scenario the value we are looking for will be the first item in the array In this case our algorithm takes just one step This has a complexity of Ω(1) This is its Omega Complexity Omega Notation isn't considered as useful because it is unlikely our item will often be the first item in our data structure search, so it doesn't give us any idea how well the algorithm will scale Big-Θ (big-theta notation)\nWhile Omega Notation measures the best-case scenario for an algorithm's efficiency, and Big O measures the worst case, Theta looks to give the exact value or a useful range between narrow upper and lower bounds If we had some code that looped every item in an array, then it doesn't matter the size of the array Our algorithm will always run in O(N) time in its best-case and worst-case scenarios In that case we know its exact performance in all scenarios is Θ(N), and that is the Theta performance of our algorithm For other algorithms, Theta may represent both the lower and upper bound of an algorithm that has different complexities We won't get into this more here because Big O is the primary notation used for general algorithm time complexity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "c16a5c31f8b5713bf05fce325400394e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "array Our algorithm will always run in O(N) time in its best-case and worst-case scenarios In that case we know its exact performance in all scenarios is Θ(N), and that is the Theta performance of our algorithm For other algorithms, Theta may represent both the lower and upper bound of an algorithm that has different complexities We won't get into this more here because Big O is the primary notation used for general algorithm time complexityThis is just a simplistic explanation to try to make the topic approachable If you do happen to be mathematically minded, then you'll find more detailed explanations with a quick search online Why big O\nNow that we've touched on the different ways of quantifying an algorithm's efficiency, hopefully it's clear why we choose to use the worst-case scenario when measuring the efficiency of that algorithm Using a worst-case scenario we can make sure our algorithm will scale in all outcomes If we write an algorithm that could potentially run in constant time, but could also run in linear time in the worst case, it can only scale as the input grows if it still works when the worst case does happen You need to be confident your code won't lock up and leave users frustrated if you suddenly get an input of a million items instead of 10 Algorithms with the same complexity\nIf we write two algorithms with the same complexity, does that mean they're equally good to use We'll answer this question with two code examples which we'll then discuss a bit further to try and answer the question The first example is some code we've seen already, our odd_numbers method ```ruby\ndef odd_numbers(max_number)\ncurrent_number = 1\nwhile current_number < max_number\nif current_number % 2 = 0\nputs current_number\nend\ncurrent_number += 1\nend\nend\n```\nThe time complexity of this algorithm is O(N) As the data size increases, the number of steps of our algorithm increases at the same rate Let's look at another version:\n```ruby\ndef odd_numbers(max_number)\ncurrent_number = 1\nwhile current_number < max_number\nif current_number % 2 = 0\nputs current_number\nend\ncurrent_number += 2\nend\nend\n```\nNot much of a change, but this time we increase current_number by 2 How does this affect our algorithm runtime Well, for an input of n, the number of steps is approximately half as we iterate by 2 each time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "c9e76cb056d9005439bdf352ee3f061e",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "algorithm increases at the same rate Let's look at another version: ```ruby def odd_numbers(max_number) current_number = 1 while current_number < max_number if current_number % 2 = 0 puts current_number end current_number += 2 end end ``` Not much of a change, but this time we increase current_number by 2 How does this affect our algorithm runtime Well, for an input of n, the number of steps is approximately half as we iterate by 2 each timeThis is an algorithm of O(N/2) but as mentioned earlier, Big O doesn't concern itself with constants because they aren't relative to how an algorithm scales as the input changes and it wouldn't be fun or easy to have to compare an algorithm of O(N/2 + 5 N) against O(N + 5 / 2N) Therefore, the Big O efficiency of both algorithms is O(N) They scale at the same rate as the input grows Therefore, you also need to ensure the code you write is as efficient as it can be within its time complexity Assignment\n1 Read through [A Rubyists Guide to Big-O Notation](https://www honeybadger io/blog/a-rubyist-s-guide-to-big-o-notation/) The last section talks about how this applies to database queries in a web app, which you won't have covered yet, but it's something to keep in mind as you move forward into the Rails materials 1 The [Big-O cheat sheet](https://www bigocheatsheet com/) is an amazing resource It gives a complexity chart where you can see how the different algorithms perform as the data size increases and also gives the time complexity for common data structure operations along with those for common sorting algorithms 1 This [Guide to Time Complexity for Ruby Developers](https://www rubyguides com/2018/03/time-complexity-for-ruby-developers/) gives some more insight into applying a Big-O notation to your own code Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is Big O What are the Big O Notations Why use Big O What is Big Omega and why isn't it as useful Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "faa775ba6f28c4ba41dc686a6179d7f2",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is Big O What are the Big O Notations Why use Big O What is Big Omega and why isn't it as useful Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalIt's not a free resource but A common sense guide to data structures and algorithms does a great job making these topics approachable to people not familiar with some of the mathematical terminology used In this video, Introduction to Big O Notation and Time Complexity, the author provides a step-by-step process for how to analyze and understand time complexity for various algorithms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21192,
      "relative_path": "git_repos\\odin-project\\ruby\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 153,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "a5fd4a0121040a619a4c216fd1b3ad14",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "Introduction\nThis course is all about teaching you Ruby, the language designed specifically for programmer happiness What could possibly be better than that A task that takes dozens of lines of code to accomplish in Java or a hundred in C could take just a few in Ruby thanks to Ruby prepackaging so many useful functions into easy-to-use and convenient methods Ruby and Python are quite similar and in some ways resemble Romance languages; once you've learned one, it's not terribly hard to pick up the other because they tend to follow many of the same conventions Python tends to be taught more in colleges and is often used for more data-intensive and processor-heavy applications However, Ruby has a secret weapon that makes it the love of fast-iterating web developers: the Ruby on Rails framework, which we'll cover in a later course Rails has been optimized for writing code faster and with fewer headaches, allowing you to iterate more frequently when building a website Faster iteration means that the end product is more likely to suit the client's or users' needs, making your projects more successful You'll do a healthy chunk of learning in this course, but by the end of it all, you'll have built some pretty sweet projects including Tic Tac Toe, Hangman, and even Chess You'll be able to save and open files, write tests for your code, separate out your spaghetti code into nice, distinct classes, and even reproduce some basic algorithms and data structures to solve complex problems Basically, you're going to start feeling a whole lot more like a real programmer, and that feeling will be justified Learning Ruby before Ruby on Rails\nSome people believe you can just dive right into Rails and start firing out websites So why do we have an entire course dedicated to only Ruby before we start looking at Rails Rails is a framework built using exclusively Ruby, and every bit of code in it is written with Ruby When (not \"if\") something in your project breaks, you'd better be able to debug it, which means having a strong understanding of Ruby, how it works, and what its error messages look like Beyond that, when you start to stretch your wings and do something just a bit beyond what the vanilla tutorials explicitly show you how to do, you'll quickly discover a world of frustration if you don't have a strong foundation in Ruby The amount of time you would spend Googling your error messages and staring blankly at help docs would be better spent learning Ruby now",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5212,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "08c0180ef6824eccdcd10b6e75416a06",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "how it works, and what its error messages look like Beyond that, when you start to stretch your wings and do something just a bit beyond what the vanilla tutorials explicitly show you how to do, you'll quickly discover a world of frustration if you don't have a strong foundation in Ruby The amount of time you would spend Googling your error messages and staring blankly at help docs would be better spent learning Ruby nowThe path ahead\nRuby is a big language with lots of syntax, so we've broken the concepts up into smaller chunks to make it more digestible Some of the early material will be fairly straightforward and will rely on beginner friendly exercises to help reinforce your understanding As you progress through the course, the goal is for you to get a much deeper and more practical understanding of the material As you move into some of the more advanced topics, you'll be reading less and building more-just the way it should be In the first section, you'll learn all about the basics of Ruby along with some classic programming basics In the second section, you'll learn about object-oriented programming, which will show you how to cleanly and neatly organize your code into reusable objects In the third section, you'll dive into some basic computer science, where you'll learn about recursion and common data structures In the fourth section, you'll learn some more advanced features of Git and the Git workflow used by professional developers In the fifth section, you'll learn the basics of test-driven development In the sixth and final section, you'll tie everything together by building a fully fledged chess game Assignment\n1 Read the Introduction of [Launch School's *Introduction to Programming with Ruby*](https://launchschool com/books/ruby/read/introduction) book to learn a bit more about the history of Ruby 1 To understand how you'll be interacting with Ruby throughout this course, read through the [Your Tools chapter of The *Ruby for Beginners* book](http://ruby-for-beginners rubymonstas org/your_tools html) from Ruby Monstas (Note that even though they recommend using Sublime as your text editor, any code editor will work For the record, we still tend to prefer VS Code around here )\n1 Skip the installation instructions and read through the [\"Preparations\" chapter of Launch School's *Introduction to Programming with Ruby* book](https://launchschool com/books/ruby/read/preparations#usingacodeeditor) for some helpful advice about using and learning Ruby effectively",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5212,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4792589b9213d43a7278b5e7234f530f",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "[Your Tools chapter of The *Ruby for Beginners* book](http://ruby-for-beginners rubymonstas org/your_tools html) from Ruby Monstas (Note that even though they recommend using Sublime as your text editor, any code editor will work For the record, we still tend to prefer VS Code around here ) 1 Skip the installation instructions and read through the [\"Preparations\" chapter of Launch School's *Introduction to Programming with Ruby* book](https://launchschool com/books/ruby/read/preparations#usingacodeeditor) for some helpful advice about using and learning Ruby effectivelyAlso, you won't be able to install Pry until you have installed Ruby in the next lesson 1 Now that you've learned a few ways to interact with your Ruby code, read about [how to use code files inside IRB](https://stackoverflow com/questions/13112245/ruby-how-to-load-a-file-into-interactive-ruby-console-irb/38533339), which will be helpful for quick troubleshooting and experimenting Okay, enough talk Let's learn Ruby",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5212,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 222,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5bbbf5fae5fffb8bd12edcb9bfc17310",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
    "source_type": "git_repo",
    "title": "installing_ruby",
    "content": "Introduction\nBefore we start learning, we'll need to install Ruby first This section is where you could potentially encounter a lot of errors Before continuing, let's review a few best practices to keep in mind:\nCopy and paste the commands to avoid typos Follow the directions closely, and don't skip over any sections Do NOT use sudo unless The Odin Project specifically says to do so Failing to follow this can cause a lot of headaches, and never run as the root user In some instances, you might see a message in the terminal telling you to use sudo and install something with apt Ignore that and follow our instructions for now Now, let's get started Linux\n### Step 1: Install updates, packages and libraries\nBefore we can install Ruby, we need to install some base packages #### Step 1 1: Open the terminal\nWe'll use the terminal to install all of the programs If you're using Ubuntu or Xubuntu, press Ctrl + Alt + T to open the terminal (This may work in other Linux distributions; you'll have to try )\n**Quick tip:** In Linux, you can copy from the terminal with Ctrl + Shift + C and paste with Ctrl + Shift + V #### Step 1 2: Update Linux\nThe rest of the installation will take place inside the terminal window First, we need to make sure your Linux distribution is up to date Run these commands one by one Because these commands use `sudo`, you will have to enter your password in order for them to run When typing your password, you may not get any visual feedback, but rest assured that your password is being entered Once you're done typing your password, press Enter ```bash\nsudo apt update\nsudo apt upgrade\n```\nWhen it prompts you, press Y and then Enter #### Step 1 3: Install packages and libraries\nNext, you need to install some required packages that do not come preinstalled Be sure to copy and paste this command ```bash\nsudo apt install gcc make libssl-dev libreadline-dev zlib1g-dev libsqlite3-dev libyaml-dev\n```\nWhen it prompts you, press Y and then Enter You may or may not have to type your password after pressing Enter ### Step 2: Install Ruby\nNow you're ready to install Ruby We're going to use a tool called `rbenv`, which makes it easy to install and manage Ruby versions #### Step 2 1: Install rbenv\nFirst, you need to clone the rbenv repository",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10188,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "02826a4094c4541af4da53861373e3a3",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
    "source_type": "git_repo",
    "title": "installing_ruby",
    "content": "sudo apt install gcc make libssl-dev libreadline-dev zlib1g-dev libsqlite3-dev libyaml-dev ``` When it prompts you, press Y and then Enter You may or may not have to type your password after pressing Enter ### Step 2: Install Ruby Now you're ready to install Ruby We're going to use a tool called `rbenv`, which makes it easy to install and manage Ruby versions #### Step 2 1: Install rbenv First, you need to clone the rbenv repository```bash\ngit clone https://github com/rbenv/rbenv git ~/ rbenv\n```\nNext command takes care of setting rbenv ```bash\n~/ rbenv/bin/rbenv init\n```\nClose the terminal window and open a new one to refresh Next, you need to install `ruby-build` to help compile the Ruby binaries Run these commands in the terminal to create a directory for the ruby-build plugin and then download it to the proper directory ```bash\nmkdir -p \"$(rbenv root)\"/plugins\ngit clone https://github com/rbenv/ruby-build git \"$(rbenv root)\"/plugins/ruby-build\n```\nFinally, run\n```bash\nrbenv -v\n```\nfrom your terminal to verify that `rbenv` has been installed correctly You should get an output with a version number **similar** to this:\n```bash\nrbenv 1 2 0-14-gc6cc0a1\n```\nIf you do not get a version number at all (anything not starting with `rbenv 1 `), please ask for help in [our Discord server](https://discordapp com/channels/505093832157691914/505093832157691916) #### Step 2 2: Install Ruby\nIt's finally time to install Ruby using `rbenv` Inside the terminal, run this command:\n```bash\nrbenv install 3 4 2 --verbose\n```\nThis command will take 10-15 minutes to complete The `--verbose` flag will show you what's going on so you can be sure it hasn't gotten stuck While it installs, take this time to watch [funny jumping goats video](https://youtu be/X2CYWg9-2N0) or to get a glass of water You may get this error message:\n```bash\nruby-build: definition not found: x x",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10188,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2557b31b128cd0bcbebb060155cc84c4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
    "source_type": "git_repo",
    "title": "installing_ruby",
    "content": "Ruby using `rbenv` Inside the terminal, run this command: ```bash rbenv install 3 4 2 --verbose ``` This command will take 10-15 minutes to complete The `--verbose` flag will show you what's going on so you can be sure it hasn't gotten stuck While it installs, take this time to watch [funny jumping goats video](https://youtu be/X2CYWg9-2N0) or to get a glass of water You may get this error message: ```bash ruby-build: definition not found: x xx\nSee all available versions with `rbenv install --list' If the version you need is missing, try upgrading ruby-build:\ngit -C /home/itorja/ rbenv/plugins/ruby-build pull\n```\nIf so, we run the suggested command:\n```bash\ngit -C \"$(rbenv root)\"/plugins/ruby-build pull\n```\nOnce Ruby is installed, you need to tell rbenv which version to use by default Inside the terminal, type:\n```bash\nrbenv global 3 4 2\n```\nThen,\n```bash\nruby -v\n```\nThe above command should return something similar to this:\n```bash\nruby 3 4 2pxx (20xx-xx-xx revision xxxxx) [x86_64-linux]\n```\nwhere x represents the version available at the time you installed Ruby Well done Pat yourself on the back The hard part is done, and it's time to move on to the next lesson MacOS\n### Step 1: Install packages and libraries\nBefore we can install Ruby, we need to install some base packages We will use the terminal to install all of the programs #### Step 1 1: Open the terminal\nIn your Applications folder, find \"Utilities\" and double click \"Terminal\" Alternatively, using Spotlight (Cmd + Space) or Launchpad, type \"Terminal\" The rest of the instructions are done inside this terminal window and if you followed all the Foundations instructions, you should have already completed step 1 2 and 1 3 #### Step 1 2: Install Xcode\nFirst, you need to install Xcode, which is a program provided by Apple for programming Xcode will install many programs that are needed for Ruby and Git and should take 10-15 minutes to install Type `xcode-select --install` in your terminal and press Enter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10188,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "e59c8f18ddd54316ab7141496561be24",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
    "source_type": "git_repo",
    "title": "installing_ruby",
    "content": "the instructions are done inside this terminal window and if you followed all the Foundations instructions, you should have already completed step 1 2 and 1 3 #### Step 1 2: Install Xcode First, you need to install Xcode, which is a program provided by Apple for programming Xcode will install many programs that are needed for Ruby and Git and should take 10-15 minutes to install Type `xcode-select --install` in your terminal and press EnterYou may need to click \"Install\" when prompted #### Step 1 3: Install Homebrew\nThe next program you need to install is [Homebrew](https://brew sh/), which makes it easy to install other programs you'll need From inside the terminal, type the following:\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw githubusercontent com/Homebrew/install/HEAD/install sh)\"\n```\nYou will be prompted to enter your password When typing your password, you may not get any visual feedback, but rest assured that your password is being entered Once you're done typing your password, press Enter To verify the Homebrew installation, we can run\n```bash\nwhich brew\n```\nIf it outputs a certain path, you're good to go ahead But if the terminal reads ```brew not found```, please go through the [MacOS instructions in the setting up git lesson](https://www theodinproject com/lessons/foundations-setting-up-git) to get homebrew installed Congratulations You've installed the prerequisites ### Step 2: Install Ruby\nNow you're ready to install Ruby We're going to use a tool called `rbenv`, which makes it easy to manage Ruby versions #### Step 2 1: Install ruby-build\nFirst, let's install `ruby-build`:\n```bash\nbrew install ruby-build\n```\n`ruby-build` will make it possible to install our Ruby version of choice #### Step 2 2: Install rbenv\nTo install `rbenv`, run the following in your terminal:\n```bash\nbrew install rbenv\n```\nThen, run this command:\n```bash\nrbenv init\n```\nAt this point, open a new terminal tab, so changes take effect To confirm that everything went as it should, open a new terminal tab and run:\n```bash\nrbenv -v\n```\nYou should get an output with a version number **similar** to this:\n```bash\nrbenv 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10188,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "5fd7b7d924b8c5f58b1bd4dadc8f0321",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
    "source_type": "git_repo",
    "title": "installing_ruby",
    "content": "of choice #### Step 2 2: Install rbenv To install `rbenv`, run the following in your terminal: ```bash brew install rbenv ``` Then, run this command: ```bash rbenv init ``` At this point, open a new terminal tab, so changes take effect To confirm that everything went as it should, open a new terminal tab and run: ```bash rbenv -v ``` You should get an output with a version number **similar** to this: ```bash rbenv 12 0-14-gc6cc0a1\n```\nIf you do not get a version number at all (anything not starting with `rbenv 1 `), please ask for help in [our Discord server](https://discordapp com/channels/505093832157691914/505093832157691916) #### Step 2 3: Install Ruby\nWe can now (finally) install Ruby Our curriculum currently uses version 3 4 2, which will allow you to complete this path's materials and content without error We upgrade the material to accommodate newer versions as necessary Without further ado, let's get going First, let's upgrade `ruby-build`:\n```bash\nbrew upgrade ruby-build\n```\nNow we're ready to install our desired version of Ruby:\n```bash\nrbenv install 3 4 2 --verbose\n```\nThis command will take 10-15 minutes to complete The `--verbose` flag will show you what's going on so you can be sure it hasn't gotten stuck While it installs, take this time to watch [funny jumping goats video](https://www youtube com/watch v=X2CYWg9-2N0) or to get a glass of water Once Ruby is installed, you need to tell rbenv which version to use by default Inside the terminal, type:\n```bash\nrbenv global 3 4 2\n```\nYou can double check that this worked by typing `ruby -v` and checking that the output says version 3 4 2:\n```bash\nruby -v\n```\nYou should get an output with a version number **similar** to this:\n```bash\nruby 3 4 2pxx (20xx-xx-xx revision xxxxx) [x86_64-darwin18]\n```\nIf you don't see the output above, close and reopen the terminal window and then run the command again Well done Pat yourself on the back",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10188,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "1cb6f915c630f47bfbaf04953e4e16f9",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
    "source_type": "git_repo",
    "title": "installing_ruby",
    "content": "4 2 ``` You can double check that this worked by typing `ruby -v` and checking that the output says version 3 4 2: ```bash ruby -v ``` You should get an output with a version number **similar** to this: ```bash ruby 3 4 2pxx (20xx-xx-xx revision xxxxx) [x86_64-darwin18] ``` If you don't see the output above, close and reopen the terminal window and then run the command again Well done Pat yourself on the backThe hard part is done, and it's time to move on to the next lesson Extras\nIf you are using Visual Studio Code as your IDE, you can install the \"Ruby LSP\" extension, which will provide you with semantic highlighting and formatting support Using the extension is optional, but it is a quick install; go to the \"Extensions\" tab in VSC (Ctrl + Shift + X), search \"Ruby LSP\", and click install on the first one Congratulations, the extension is now installed The most important features Ruby LSP provides will work out of the box But it may bug you about using a monorepo setup, missing lockfiles or rubocop - you can choose \"Don't show again\" for now We will introduce these later",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10188,
      "relative_path": "git_repos\\odin-project\\ruby\\introduction\\installing_ruby.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "5ecaab5ce96139f07bfbb4b1095e9842",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "Introduction\nYou may have been wondering how programmers structure their projects Do they just put their entire code in a single file If they don't, how can they use code across multiple files Are there agreed-upon rules Common patterns What is the Ruby way of doing things In this lesson, we will show you how to structure your Ruby projects to keep them manageable and to help you and others easily navigate the code you've written Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson The benefits of splitting your code into separate files How to make use of code from a separate file Namespace and scope of required files What development dependencies are What gems are What Bundler is and why it is useful What bundle init does and what a Gemfile is How to get the most out of Ruby LSP VSCode extension Confusion, convention, convenience\nRecall how the projects you worked on in Foundations were structured The HTML, CSS and JS all lived in separate files and appeared to be \"one\" in the browser thanks to linking CSS and JS in the HTML file(s) Organizing your projects into different files has many practical benefits Chief among them is making your code more modular, making it easier to adjust and understand the code as it gets more complex Remember that old saying about how to keep your physical environment organized - \"A place for everything and everything in its place\" The same principle applies to software projects For Ruby projects, the rules of thumb are:\nOne class per file Every time you create a new class, you should create a new file for it to live in It is convention to put all your Ruby files into a lib directory For example:\nbash\nproject_name\n├── lib\n│   └── lovely_file_of_yours rb\n└── main rb\nMaking use of multiple files\nIf you are to split your code across multiple files, you first will need to know how to make sure code from one file can be used in another file Let's consider this file structure:\nbash\n├── lib\n│   ├── sort\n│   │   ├── bogo_sort rb\n│   │   ├── bubble_sort rb\n│   │   └── merge_sort rb\n│   └── sort rb\n└── main rb\nThere are two main ways to do that: require_relative and require require_relative\n```ruby\nYou're in the root of the project, the directory that holds main rb\nmain",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "ecc56673caaf26803214265d5ea78bea",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "to know how to make sure code from one file can be used in another file Let's consider this file structure: bash ├── lib │ ├── sort │ │ ├── bogo_sort rb │ │ ├── bubble_sort rb │ │ └── merge_sort rb │ └── sort rb └── main rb There are two main ways to do that: require_relative and require require_relative ```ruby You're in the root of the project, the directory that holds main rb mainrb\nrequire_relative 'lib/sort'\nsort rb\nrequire_relative 'sort/bubble_sort'\nrequire_relative 'sort/bogo_sort'\nrequire_relative 'sort/merge_sort'\n```\nLet's start with how the docs define its functionality:\nrequire_relative(string) → true or false\nRuby tries to load the library named string relative to the directory containing the requiring file If the file does not exist a LoadError is raised Returns true if the file was loaded and false if the file was already loaded before The important part here is relative to the directory containing the requiring file This means that no matter where you execute the code from, require_relative looks for the file specified from the point of view of the file it has been written in So main rb is simply going to lib to find sort (the rb is implicit), and sort rb is going to sort to find those three different sorts Simple enough, isn't it require\nrequire is trickier Let's grab some of the docs here:\nIf the  feature is an  absolute path (e g starts with '/'),  the feature\nwill  be loaded  directly using  the absolute  path If  the feature  is an\nexplicit relative  path (e g starts with ' /'  or ' /'),  the feature\nwill  be  loaded  using  the  relative  path  from  the  current  directory Otherwise,  the feature  will be  searched  for in  the library  directories\nlisted in the $LOAD_PATH The absolute path bit seems self-explanatory When you use a relative path the difference between using a relative path with require and doing require_relative is that require's relative paths are resolved from the point of view of the directory you are running your code from Let's change our example:\n```ruby\nYou're in the root of the project, the directory that holds main rb\nmain rb\nrequire 'lib/sort'\nsort",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "8234b529c6c1542ce08713870701608a",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "in the library directories listed in the $LOAD_PATH The absolute path bit seems self-explanatory When you use a relative path the difference between using a relative path with require and doing require_relative is that require's relative paths are resolved from the point of view of the directory you are running your code from Let's change our example: ```ruby You're in the root of the project, the directory that holds main rb main rb require 'lib/sort' sortrb\nrequire 'sort/bubble_sort'\nrequire 'sort/bogo_sort'\nrequire 'sort/merge_sort'\n```\nAh Of course - an error - it can't find lib/sort Those are not relative paths Fancy schmancy require_relative and its implicitly assuming the paths are relative ```ruby\nYou're in the root of the project, the directory that holds main rb\nmain rb\nrequire ' /lib/sort'\nsort rb\nrequire ' /sort/bubble_sort'\nrequire ' /sort/bogo_sort'\nrequire ' /sort/merge_sort'\n```\nNow it says it can't find /sort/bubble_sort This is because it is not looking for it from the point of view of sort rb but from the point of view of main rb What about the $LOAD_PATH part ```ruby\nYou're in the root of the project, the directory that holds main rb\nmain rb\nrequire 'csv'\nrequire_relative 'lib/sort'\n```\nrequire 'csv' is going to look for a csv rb in the Ruby's $LOAD_PATH global variable which by default contains the Ruby standard library There are other file extensions it might look for, but this is not important at this point - just remember that the requires look for some extensions like rb without the need to declare them explicitly In addition to that, if it doesn't find that file in $LOAD_PATH it is going to look through installed gems (more on those later) to see if the file is there Both of those approaches (require and require_relative) are going to execute the file, allowing you to use their contents If you try to require something for the second time, nothing will happen, and the requires will return false Convention is that require_relative is used for your own code, while require is used for things outside of it, like gems that your app depend on",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "de6a3e2fe5b42783703ebc98937b4149",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "gems (more on those later) to see if the file is there Both of those approaches (require and require_relative) are going to execute the file, allowing you to use their contents If you try to require something for the second time, nothing will happen, and the requires will return false Convention is that require_relative is used for your own code, while require is used for things outside of it, like gems that your app depend onBenefit of this approach is that you don't need to hold all the code for part of your app in one file:\n```ruby\nYou're in the root of the project, the directory that holds main rb\nThis is your file structure:\n├── lib\n│    ├── flight rb\n│    ├── hotel rb\n│    └── airport rb\n└── main rb\nlib/airport rb\nclass Airport\ndef introduce\nputs \"I'm at the airport \"\nend\nend\nlib/flight rb\nclass Flight\ndef introduce\nputs \"I'm on the flight \"\nend\nend\nlib/hotel rb\nclass Hotel\ndef introduce\nputs \"I'm at the hotel \"\nend\nend\nmain rb\nrequire_relative 'lib/airport'\nrequire_relative 'lib/flight'\nrequire_relative 'lib/hotel'\nAirport new introduce\n=> I'm at the airport Flight new introduce\n=> I'm on the flight Hotel new introduce\n=> I'm at the hotel ```\nSo instead of defining both the Flight and Hotel classes inside airport rb, we can do that in separate files It is customary to require all the files in your topmost file, like main rb here This allows everyone to just get hold of main rb and they get the entirety of your code where they need it Depending on their needs, they would use an appropriate way of loading that file Another thing to keep in mind is that local variables do not get loaded, so if your airport rb had a local variable coolest_airports, trying to access it in main rb would raise an error Constants do get loaded however, so you can access those Something important to keep in mind is that all required code is put into the same namespace This means that if you have the same names for methods, modules, classes and so on they will be added together in the order they were required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "18ce32229eeaad4e3a06a62d54b13178",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "loaded, so if your airport rb had a local variable coolest_airports, trying to access it in main rb would raise an error Constants do get loaded however, so you can access those Something important to keep in mind is that all required code is put into the same namespace This means that if you have the same names for methods, modules, classes and so on they will be added together in the order they were requiredFor example, let's say you and your friend have used the same method name and you're trying to use their code and yours:\n```ruby\nall files are in the same directory for simplicity's sake\nnot_so_green rb\ndef food_opinion(food)\n\"#{food} is awesome \"\nend\nscheals rb\ndef food_opinion(food)\n\"#{food} is awful \"\nend\nmain rb\nrequire_relative 'not_so_green'\nrequire_relative 'scheals'\nputs food_opinion('Cereal')\n=> Cereal is awful Since food_opinion is defined twice, the last definition wins out ```\nTo make sure code doesn't get overwritten, Rubyists wrap their code in modules which give them the benefits of a namespace:\n```ruby\nall files are in the same directory for simplicity's sake\nnot_so_green rb\nmodule NotSoGreen\ndef self food_opinion(food)\n\"#{food} is awesome \"\nend\nend\nscheals rb\nmodule Scheals\ndef self food_opinion(food)\n\"#{food} is awful \"\nend\nend\nmain rb\nrequire_relative 'not_so_green'\nrequire_relative 'scheals'\nputs NotSoGreen food_opinion('Cereal')\n=> Cereal is awesome puts Scheals food_opinion('Marmite')\n=> Marmite is awful puts food_opinion('Cereal')\n=> Errors out - there's no longer a free floating food_opinion method to use ```\nGems and you\nNow that you know how to work with your own files, it is time to learn how to work with the files of others Gems are packages containing Ruby utility libraries that someone wrote - basically, some code Some of those gems are part of the Ruby standard library, but most require installing independently If you use a gem then you call such a gem a dependency - your code depends on that gem to function properly Some dependencies are only used in particular contexts; for example, you can have a set of gems used only in a development or test environment",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "757f8c4b559461a6dd4ec716ea692f76",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "packages containing Ruby utility libraries that someone wrote - basically, some code Some of those gems are part of the Ruby standard library, but most require installing independently If you use a gem then you call such a gem a dependency - your code depends on that gem to function properly Some dependencies are only used in particular contexts; for example, you can have a set of gems used only in a development or test environmentMany gems depend upon other gems, and sometimes, the versions they depend on differ You could manage gems and their dependencies on your own, going through the process of installing, updating them and resolving whatever conflicts might arise, but Rubyists have tools for that RubyGems has been part of Ruby standard library since version 1 9 and is used to get those amazing gems onto your computer Remember that bit about require going through installed gems to potentially find a file you're looking for That's the work of RubyGems Another cool part about it It is a gem itself Let's give it a try Create a new Ruby file main rb in a directory called colorful:\n```ruby\nrequire 'colorize'\nputs 'Red goes faster ' colorize(:red)\nputs \"I'm blue da ba dee da ba di \" colorize(:blue)\nputs \"It ain't easy bein' green \" colorize(:green)\n```\nYou're probably itching to see all those colours, so run your file with ruby main rb to see them or rather, a LoadError Right - you need to install that gem first Do that with gem install colorize and you'll see RubyGems in action Your system now has access to the Colorize gem Wait, your system - what about others who would like to use your code Yeah, they would also need to gem install it - no big deal But what if you have dozens of gems How do you ensure that the versions you use are the same version others download This sounds rather tedious Enter: Bundler It's another gem, part of RubyGems, but released independently Bundler allows you to declare what gems your project needs - down to their version As for others, Bundler allows them to take that declaration, a simple file called Gemfile, and use it to install those gems in a quick bundle install Since gem installs are global, you need a way to run only those particular gem versions that are declared in the Gemfile You can do that by using bundle exec followed by a command you want to execute - most likely bundle exec ruby foo rb",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "874a5c60d05e2828aaa3d97947a1a9ab",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "to their version As for others, Bundler allows them to take that declaration, a simple file called Gemfile, and use it to install those gems in a quick bundle install Since gem installs are global, you need a way to run only those particular gem versions that are declared in the Gemfile You can do that by using bundle exec followed by a command you want to execute - most likely bundle exec ruby foo rbLet's make sure whoever wants to use our script can do so:\nbash\nbundle init # creates a default Gemfile in the current working directory\nbundle add colorize # adds the colorize gem to the Gemfile and runs bundle install\nThis has created two files: Gemfile and Gemfile lock Let's take a look into both:\n```ruby\nGemfile\nfrozen_string_literal: true\nsource \"https://rubygems org\"\ngem \"rails\"\ngem \"colorize\", \"~> 1 1\"\nGemfile lock\nGEM\nremote: https://rubygems org/\nspecs:\ncolorize (1 1 0)\nPLATFORMS\nruby\nx86_64-linux # This might be different for you if you're using a different CPU and OS DEPENDENCIES\ncolorize (~> 1 1)\nBUNDLED WITH\n2 5 4\n```\nThere's not much in those, but as you can see, the Gemfile has information on where to get the gems from and what gems are required The \"~> 1 1\" is a version constraint, particularly a pessimistic constraint It relies on semantic versioning The first number is the major version\nThe second is the minor version\nthe third, if it exists, is the patch number\nMajor versions can break things from previous versions - for example, changing method names Minor versions can add and change things but can't break anything Patches happen when you introduce bug fixes that don't break anything So, if people behind a gem maintain it in line with semantic versioning, you can rely on this pessimistic constraint never letting your project have a gem version that could potentially break your app - it is equivalent to gem \"colorize\", \">= 1 1\", \"<2 0\" Gemfile lock has information on what was the last environment that should be able to run your app Bundler will use it to install the same versions of gems even if Gemfile could potentially allow for newer versions to be installed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "e6066a5c99825dfd63e81b17e147abea",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "semantic versioning, you can rely on this pessimistic constraint never letting your project have a gem version that could potentially break your app - it is equivalent to gem \"colorize\", \">= 1 1\", \"<2 0\" Gemfile lock has information on what was the last environment that should be able to run your app Bundler will use it to install the same versions of gems even if Gemfile could potentially allow for newer versions to be installedruby-version\nThere's another important thing to give to folks that will run your code: the target Ruby version of your project You can do it easily by running rbenv local 3 2 2 as it creates a ruby-version file with the version declared - 3 2 2 Test the command out by using one of your rbenv installed Ruby versions Run rbenv versions to see the list of Ruby versions you have installed Many other tools recognize this to figure out what Ruby version your project is running - for example, rbenv will no longer use the global Ruby version and the Ruby LSP VSCode extension will also change its behavior Ruby LSP in VSCode\nEarlier in the curriculum, you were instructed to choose the Don't show again option when Ruby LSP told you about not finding a lock file - you might've also seen errors concerning RuboCop In the next lesson, we will review RuboCop and how it should land in your project's Gemfile After that, you will enjoy all the benefits of using Ruby LSP and its RuboCop integration, and your projects will be set up like a real pro Assignment\n1 Read [Eric Mathison's Understanding require and Friends in Ruby](https://github com/ericmathison/articles/blob/master/understanding-require-in-ruby md) 1 Check out the [RubyGems Basics](https://guides rubygems org/rubygems-basics/) 1 Skim through [Patterns guide from RubyGems](https://guides rubygems org/patterns/), paying closer attention to `Semantic versioning`, `Declaring dependencies` and `Loading code` 1 Skim through [Bundler's Getting Started](https://bundler io/guides/getting_started html#what-is-bundler) and [Frequently Asked Questions](https://bundler io/guides/faq html) 1 Check out [Ruby LSP VSCode extension's README](https://github",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "b4f548121cf525ebb1bdee0150762282",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
    "source_type": "git_repo",
    "title": "You're in the root of the project, the directory that holds main.rb",
    "content": "RuboCop integration, and your projects will be set up like a real pro Assignment 1 Read [Eric Mathison's Understanding require and Friends in Ruby](https://github com/ericmathison/articles/blob/master/understanding-require-in-ruby md) 1 Check out the [RubyGems Basics](https://guides rubygems org/rubygems-basics/) 1 Skim through [Patterns guide from RubyGems](https://guides rubygems org/patterns/), paying closer attention to `Semantic versioning`, `Declaring dependencies` and `Loading code` 1 Skim through [Bundler's Getting Started](https://bundler io/guides/getting_started html#what-is-bundler) and [Frequently Asked Questions](https://bundler io/guides/faq html) 1 Check out [Ruby LSP VSCode extension's README](https://githubcom/Shopify/ruby-lsp/tree/main/vscode#readme) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why would you split your code across multiple files How can you make code from different files available Why would you wrap your code in a module What are gems How do you install gems What is Bundler used for Why would you use bundle exec What are Gemfile and Gemfile lock for Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Listen to one of Bundler's maintainers talk about managing dependencies in Ruby or alternatively, read the talk More on semantic versioning - perhaps conventional commits will make more sense to you now If you'd like an alternative take on the lesson, Connor Stack's article might be of help",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17158,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\managing_ruby_projects.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "f881234d2d7065e0a79e6bb1e068c6f5",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "Introduction\nCode Code is written for our machines to execute but more importantly it is written for us, humans, to understand You've seen some code by now, especially so if you were diligent and took the time to practice reading code by exploring projects written\nby your peers going through The Odin Project Some of it was good, some of it was bad but probably a lot of it was just confusing That's absolutely fine, of course - you're all still learning But what do professionals do to make sure their code is as best as it can be:\nreadable, predictable and performant They try to come up with best practices How do they enforce them Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What linting and formatting are Where RuboCop takes its various rules from and how one could group them How to install and configure RuboCop How RuboCop interacts with RubyLSP and VSCode What cyclomatic complexity and ABC metrics are Convention time again\nYou have already been exposed to some of the conventions in HTML, CSS, JS and Ruby This is why JS has its variables written likeThis while Ruby's are like_this, why functions are verbs and variables are things like do_something(with_thing, another_thing) Why there exists\na preference for getting rid of if statements, why some languages prefer loops while other prefer iterative approaches Why some features\npresent in languages are strongly discouraged - remember var, eval() or $global_variables There's a lot more of these relating to features of Ruby (or a different language ) that you might never even have heard of The good news is that there exist style guides:\na set of standards for writing and organizing code The bad news Your head would need to store that entire set of standards and be able to recall them whenever working with code Your code has pockets, too\nEnter another set of tools: linters and formatters Those do the remembering job for you - they shall point out that something's wrong Perhaps they might automatically fix\nsome of the issues or at least provide hints or references to the style guide that might help you in writing cleaner code Formatting is all about making your code look neat and tidy without changing code's behavior - think indentation and various spacing, so style Linting is all about making your code easier to reason about - this might change how your code behaves, for example by enforcing that you use #each instead of a for loop",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "ed419e01092292a686234d08734abfd4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "the issues or at least provide hints or references to the style guide that might help you in writing cleaner code Formatting is all about making your code look neat and tidy without changing code's behavior - think indentation and various spacing, so style Linting is all about making your code easier to reason about - this might change how your code behaves, for example by enforcing that you use #each instead of a for loopFor all that, Rubyists have a powerful ally:\nRuboCop A really polished Gem that will make your code shine Before you and RuboCop do a check-up on your Caesar Cipher project, let's talk some more about the Ruby Style Guide, starting with how it introduces itself:\nThis Ruby style guide recommends best practices so that real-world Ruby programmers can write code that can be maintained by other real-world Ruby programmers A style guide that reflects real-world usage gets used, while a style guide that holds to an ideal that has been rejected by the people it is supposed to help risks not getting used at all - no matter how good it is ( )\nThe guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Ruby code As you can see, those are recommendations dictated by real-world usage aimed at improving readability and consistency of Ruby code In the end, it is like the difference between how you send your messages online versus how you'd write an essay One is about communicating quickly, the other is about communicating clearly The various conventions can be grouped based on what aspects of your code they deal with As a starting point, lets use some of RuboCop's departments - Style, Lint and Metrics Perhaps you've anticipated that RuboCop doesn't work alone - it indeed has a whole precinct behind itself The various Cops are interested in making sure that some particular rule is not broken Let the departments speak for themselves:\nStyle Cops check for stylistic consistency of your code Many of the them are based on the Ruby Style Guide Lint Cops check for ambiguities and possible errors in your code Metrics Cops deal with properties of the source code that can be measured, such as class length, method length, etc You'll have an opportunity to dig into particulars of the Ruby Style Guide soon and as for the Cops - they'll make sure to make themselves known On that note, let's begin the investigation, detective",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "bdfb5c3a8c5d7beb71ccb05b7fe70bcf",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "of the them are based on the Ruby Style Guide Lint Cops check for ambiguities and possible errors in your code Metrics Cops deal with properties of the source code that can be measured, such as class length, method length, etc You'll have an opportunity to dig into particulars of the Ruby Style Guide soon and as for the Cops - they'll make sure to make themselves known On that note, let's begin the investigation, detectiveSection where you learn all about code crime\nAs mentioned earlier, RuboCop is a Gem and the project we want to investigate is Caesar Cipher Go back and install RuboCop locally (as in, use Bundler) and then run bundle exec rubocop in your terminal Running it like this makes sure that the local version of RuboCop is used and it will check all the files in the current working directory and its subdirectories In short: everything Whoa Well, at least for me - perhaps you're a savant and a Ruby Style natural, in that case, here's some example output:\n```bash\nInspecting 2 files\nCC\nOffenses:\nGemfile:3:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don\\'t need string interpolation or special symbols source \"https://rubygems org\"\n^^^^^^^^^^^^^^^^^^^^^^\ncaesars_cipher rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment def caesar_cipher(string, shift_factor)\n^\ncaesars_cipher rb:3:5: C: [Correctable] Layout/EmptyLineAfterGuardClause: Add empty line after guard clause return string if shift_factor remainder(26) == 0\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncaesars_cipher rb:3:22: C: [Correctable] Style/NumericPredicate: Use shift_factor remainder(26) zero instead of shift_factor remainder(26) == 0 return string if shift_factor remainder(26) == 0\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncaesars_cipher rb:15:5: C: [Correctable] Style/RedundantReturn: Redundant return detected return character\n^^^^^^\ncaesars_cipher",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "bfaef10b43f4147c7ec82c81c0e11878",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "interpolation or special symbols source \"https://rubygems org\" ^^^^^^^^^^^^^^^^^^^^^^ caesars_cipher rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment def caesar_cipher(string, shift_factor) ^ caesars_cipher rb:3:5: C: [Correctable] Layout/EmptyLineAfterGuardClause: Add empty line after guard clause return string if shift_factor remainder(26) == 0 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ caesars_cipher rb:3:22: C: [Correctable] Style/NumericPredicate: Use shift_factor remainder(26) zero instead of shift_factor remainder(26) == 0 return string if shift_factor remainder(26) == 0 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ caesars_cipher rb:15:5: C: [Correctable] Style/RedundantReturn: Redundant return detected return character ^^^^^^ caesars_cipherrb:16:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don\\'t need string interpolation or special symbols when \"z\"\n^^^\n2 files inspected, 19 offenses detected, 19 offenses autocorrectable\nDuplicate offenses in the same file were truncated ```\nLet's break this down The output starts with telling how many files are to be inspected:\nbash\nInspecting 2 files\nThen, a somewhat mysterious string of capital letters appeared: CC:\nbash\nCC\nEvery letter corresponds to one file So both of the files inspected by RuboCop reported \"convention\" as their most severe issues The other letters that you might want to know are W for warning and F for fatal Finally, the output arrives at the crime scene - offenses:\n```bash\nOffenses:\nGemfile:3:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don\\'t need string interpolation or special symbols source \"https://rubygems org\"\n^^^^^^^^^^^^^^^^^^^^^^\n```\nThe output resembles stack traces a little bit: you get the file, the line and the column, then severity level letter After that you receive information on whether\nRuboCop can fix the problem on its own We'll get back to this very soon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "f3a88bbcd8b5df78420badc7c6374cb4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "Finally, the output arrives at the crime scene - offenses: ```bash Offenses: Gemfile:3:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don\\'t need string interpolation or special symbols source \"https://rubygems org\" ^^^^^^^^^^^^^^^^^^^^^^ ``` The output resembles stack traces a little bit: you get the file, the line and the column, then severity level letter After that you receive information on whether RuboCop can fix the problem on its own We'll get back to this very soonFurther, you learn of the Department/Cop - in this case, you're dealing with StringLiterals Cop from the Style department Obviously, our cybernetic assistants are polite enough to introduce themselves, so you're being told what is wrong Finally, you are directly told what and where is the offending part of code Here, RuboCop pointed out that this string could very well be single-quoted, as that string doesn't use anything that comes with double-quoted strings You could ask why such a foundational Gem as Bundler can run into trouble with the law The answer is that RuboCop is highly customizable to accommodate many standards that programmers\nmight have Remember: what is important in linting and formatting is making sure everyone in a group plays by the same rules, so the code is more readable Before you unleash the automated fury of RuboCop upon your code, you might want to become acquainted with a nifty flag: -S This will provide a link to the Ruby Style Guide\nthat goes over the rationale for the offense, if the Cop has such link when bundle exec rubocop -S is used:\nbash\nGemfile:3:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don\\'t need string interpolation or special symbols (https://rubystyle guide#consistent-string-literals)\nsource \"https://rubygems org\"\n^^^^^^^^^^^^^^^^^^^^^^\nNifty, eh But I hear you - you're here for action So let's go for the -a flag, a for action (Actually, it stands for autocorrect but that's not as fun) bundle exec rubocop -a, go ```bash\nInspecting 2 files C\nOffenses:\ncaesars_cipher rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "577000676f4d4adb557d5261e4ee47f6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "used: bash Gemfile:3:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don\\'t need string interpolation or special symbols (https://rubystyle guide#consistent-string-literals) source \"https://rubygems org\" ^^^^^^^^^^^^^^^^^^^^^^ Nifty, eh But I hear you - you're here for action So let's go for the -a flag, a for action (Actually, it stands for autocorrect but that's not as fun) bundle exec rubocop -a, go ```bash Inspecting 2 files C Offenses: caesars_cipher rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal commentdef caesar_cipher(string, shift_factor)\n^\ncaesars_cipher rb:3:5: C: [Corrected] Layout/EmptyLineAfterGuardClause: Add empty line after guard clause return string if shift_factor remainder(26) == 0\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncaesars_cipher rb:3:22: C: [Correctable] Style/NumericPredicate: Use shift_factor remainder(26) zero instead of shift_factor remainder(26) == 0 return string if shift_factor remainder(26) == 0\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncaesars_cipher rb:15:5: C: [Corrected] Style/RedundantReturn: Redundant return detected return character\n^^^^^^\ncaesars_cipher rb:16:8: C: [Corrected] Style/StringLiterals: Prefer single-quoted strings when you don\\'t need string interpolation or special symbols when \"z\"\n^^^\n2 files inspected, 16 offenses detected, 14 offenses corrected, 2 more offenses can be corrected with rubocop -A\nDuplicate offenses were truncated ```\nSee that That means the first file is now all fine and dandy Some of the offenses were not corrected by RuboCop and that's because -a is for safe autocorrect If you wanted to go through with the [Correctable] offenses, you'd want to use -A as the output helpfully suggests This is due to the fact that some Cops are safe, some are unsafe",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "d601a7b618826dbf100abfc742fe6a59",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "offenses can be corrected with rubocop -A Duplicate offenses were truncated ``` See that That means the first file is now all fine and dandy Some of the offenses were not corrected by RuboCop and that's because -a is for safe autocorrect If you wanted to go through with the [Correctable] offenses, you'd want to use -A as the output helpfully suggests This is due to the fact that some Cops are safe, some are unsafeThe safe Cops promise that they won't have false positives and that their autocorrect won't change the semantics of the code and it will be fully equivalent to what you had written From this it follows that unsafe Cops either have false positives or slightly change the semantics of the code The first characteristic means they tell you something is wrong when actually, everything is alright - for example, you've got a method with the same name as one in standard library in your object and RuboCop treats it as if it were the standard library method The latter means that while your code and the proposed code arrive at the same output, they might change how (but not what) the output is achieved or produce a side-effect that might even break your code You are the code dictator\nDue to Ruby's ecosystem, RuboCop was built with extensive configurability in mind - both in terms of not using some parts of and in terms of adding onto it Every single Cop can be disabled, sometimes Cops offer alternative rules like preferring single- or double-quotes for Strings, you can disable Cops on a per-file basis and much more Since RuboCop is extensible, there exist other departments that you can use - like Performance or RSpec You could even write your own Cop The process of adding an extension is easy Suppose you wanted to add the rubocop-performance Gem to your project You first install the Gem locally from the command line:\nbash\ngem install rubocop-performance\nNext, you must tell Bundler to include the Gem in your project by adding the following line to your GemFile (Gems that are not required for an app to run are usually given the require: false flag):\nruby\ngem 'rubocop-performance', require: false\nThis way the Gem would be installed normally, but for your bundle exec ran code to make use of it, it would need to be explicitly required wherever you'd need it Next, you need to tell RuboCop to load your new extension You can do this by editing a",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "e9168964cc1e29a50b189beb85c2ceae",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "following line to your GemFile (Gems that are not required for an app to run are usually given the require: false flag): ruby gem 'rubocop-performance', require: false This way the Gem would be installed normally, but for your bundle exec ran code to make use of it, it would need to be explicitly required wherever you'd need it Next, you need to tell RuboCop to load your new extension You can do this by editing arubocop yml file, which is the configuration file for RuboCop and it lives in the root directory of your project There you'll change the defaults of RuboCop to your (or most likely, your team's) liking To create the rubocop yml file, run this command from your terminal in your project's directory:\nbash\nbundle exec rubocop --init\nIt won't have anything in it besides a comment describing what it is for Now, all you have to do is add the line require: rubocop-performance to this file and RuboCop will know to use the extension whenever you run bundle exec rubocop RuboCop is still under development, so changes and additions happen New Cops join the precinct and they're not enabled by default - if you'd like them to be enabled by default instead of going through all of them and deciding on your own, you can use:\nyaml\nAllCops:\nNewCops: enable\nin your rubocop yml to enable all the new Cops Power corrupts\nPerhaps you're not interested in tailoring RuboCop to your liking, especially since you're just starting out and have absolutely no idea what's good and what's bad That'd be the correct approach - don't worry about it right now and just go with the RuboCop defaults One of the departments you might be tempted to drop is Metrics It probably is going to be your worst enemy starting out in writing bigger, more object oriented code But being that worst enemy has good reasons: it tries to help you write better code It is fine if you can't always satisfy RuboCop but to shun its guidance during learning is foolish Having said that, seeing those offenses come up again and again in one place that you've already made peace with being non-compliant is distracting",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "223a96fbbce14d5d4c99228e48125dd6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "It probably is going to be your worst enemy starting out in writing bigger, more object oriented code But being that worst enemy has good reasons: it tries to help you write better code It is fine if you can't always satisfy RuboCop but to shun its guidance during learning is foolish Having said that, seeing those offenses come up again and again in one place that you've already made peace with being non-compliant is distractingSince you don't want to disable those Cops altogether, you can use inline comments to turn off what pesters you:\n```ruby\nrubocop: disable Metrics/AbcSize\ndef some_convoluted_method(it_really, is_convoluted)\n# with convoluted code end\nrubocop: enable Metrics/AbcSize\n```\nThis will disable the AbcSize Cop from Metrics department between those comment lines Remember: don't use this to avoid working on your code, use it whenever appropriate - it might really be the case that some method has to be that complicated, or at least that's the current belief Some rules are a lot more arbitrary - the Style department is going to be the prime ground for strong arguments about things that don't really matter - like double-quoting all strings vs making a distinction between plain strings and string interpolation Perhaps you have strong feelings about quotes, so let's help you out by showing you how to show them to RuboCop Start by creating a rubocop yml file using the command bundle exec rubocop --init or manually using touch or nano (nano will open the text editor right away) Don't forget that it must be a dotfile, meaning it needs to have a dot before its name Now, you need to find out what rule you want to change or disable For the possible options always consult the documentation - not every Cop is just a simple on/off, there might be more options As an example, we'll be changing the rules regarding strings, frozen string literals and we'll enable NewCops ```yaml\nThis is rubocop yml in ~/\nAllCops:\nNewCops: enable\nStyle/StringLiterals:\nEnforcedStyle: double_quotes\nStyle/FrozenStringLiteralComment:\nEnforcedStyle: never\n```\nPlacement of rubocop yml in ~ is not accidental - if RuboCop can't find a config file anywhere in the project, it'll look for it in couple of more places, one of them being your home directory",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "4f28f011746ac9945db4781f0b67ea14",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "there might be more options As an example, we'll be changing the rules regarding strings, frozen string literals and we'll enable NewCops ```yaml This is rubocop yml in ~/ AllCops: NewCops: enable Style/StringLiterals: EnforcedStyle: double_quotes Style/FrozenStringLiteralComment: EnforcedStyle: never ``` Placement of rubocop yml in ~ is not accidental - if RuboCop can't find a config file anywhere in the project, it'll look for it in couple of more places, one of them being your home directoryThis config file will make it so every project without own configuration will follow these rules - NewCops being enabled, string literals all being double-quoted and not allowing for a magic comment enabling or disabling frozen string literals - this last thing will make sense after you work with RuboCop for a while But what with your projects that want to use some of the general configuration but not all of it Enter: inherit_from: By adding a line with inherit_from: ~/ rubocop yml into your local rubocop yml makes it use the same rules as defined there You can then overwrite them locally Neater thing You can have directory-specific rubocop ymls that inherit from your project specific configuration file just to make sure every file in that directory is or is not following some rules Let's see an example:\n```yaml\nThis is rubocop yml in ~/my-cool-project/\ninherit_from: ~/ rubocop yml\nStyle/StringLiterals:\nEnforcedStyle: single_quotes\nStyle/FrozenStringLiteralComment:\nEnforcedStyle: always\n```\nAnd now you are back to single-quoting and always having a magic comment regarding frozen string literals Word of caution: if you rely on such global configuration you might forget to include it with your project It would make sense that people who are going to work on the project follow the rules that it has been created in mind with Defaults are absolutely fine, however No need to tinker with anything With time you'll see what rules give you and when it makes sense to break them Actually, there's an amazing talk about that in the assignment so if you're not yet convinced, just hold your horses for a moment So, try your best to deal with RuboCop but accept that your code won't be perfect That's fine Resist the temptation to stray away from the defaults You're still learning - just make an honest attempt to make your code better",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "188e59e479651c799d2c90ba77ca2743",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "what rules give you and when it makes sense to break them Actually, there's an amazing talk about that in the assignment so if you're not yet convinced, just hold your horses for a moment So, try your best to deal with RuboCop but accept that your code won't be perfect That's fine Resist the temptation to stray away from the defaults You're still learning - just make an honest attempt to make your code betterPerhaps reading other's code is going to show you the way, so always remember to spend some time reading code after finishing a project Metrics are useless if not understood\nOur recommendation to stick to the Metrics department requires that we help with explaining the more confusing concepts employed there: ABC metric, cyclomatic complexity and perceived complexity The letters in ABC are not random, they stand for Assignment, Branches and Conditionals Assignment deals with setting or mutating a variable, branches perhaps confusingly, refer to method calls and conditionals are both the usual various conditional statements and comparisons like == or <= ABC's author said that it measures software size and it was created to quote: \"overcome the disadvantages of lines of code and similar measures\" Yep, there was a time when code length, not its complexity was the measure of good software Besides notifying you about going over the allowed value for the metric, RuboCop will also provide you with the total ABC score and its constituent parts:\nbash\nC: Metrics/AbcSize: Assignment Branch Condition size for testing is too high \\[\\<1, 18, 0\\> 18 03/17\\]\nIn this case, there is one assignment, eighteen branches and zero conditionals, after using the formula for calculating the score this ends up being 18 03 while the allowed score is 17 One way to interpret this particular score is to say that this method heavily relies on other methods to do something with data Perhaps this process could be broken down into steps or there exists some design flaw that requires us to manipulate the data so much in this one place Cyclomatic complexity is similar to the conditional measure in ABC It aims at providing insight into program complexity based on how many possible paths the program (method) can go through As you can imagine, this refers to control flow statements like if statements, loops and logical operators like && or || In the Ruby context, instead of loops, you are most likely going to use methods like #each to iterate over your collections - that counts, too",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "fd3dd768ae399ce74e5505d8cf432e6c",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "complexity is similar to the conditional measure in ABC It aims at providing insight into program complexity based on how many possible paths the program (method) can go through As you can imagine, this refers to control flow statements like if statements, loops and logical operators like && or || In the Ruby context, instead of loops, you are most likely going to use methods like #each to iterate over your collections - that counts, tooEvery time code execution can follow one or the other path, one gets added to the score Perceived complexity is very similar to cyclomatic complexity It attempts to measure how hard it is for a human to read the code and where it diverges from cyclomatic complexity is that it uses weights for some control flow statements and counts both if and else instead of just the if statement as one branching path Wouldn't it be nice to have all this in VSC It certainly would Thanks to Ruby-LSP, RuboCop is integrated with Visual Studio Code All you need is a Gemfile set up with RuboCop in your project Thanks to this, RuboCop is continuously ran while you're writing your code, providing you with feedback on the go:\nYou've got the underlines and neatly formatted list of issues listed in the Problems tab Remember that Problems tab is interactive - make sure to play with it When you hover over an underlined piece of code, you will be informed of the offense and be given links to RuboCop documentation - not the Ruby Style guide - and also given shortcuts to View Problems and Quickfix:\nQuickfixes are pretty much rubocop -a but confined to a particular line Take note that from here you can also disable and enable the Cop behind the offense:\nTo write good code you need to write a lot of bad code first\nYou might be wondering why when you were installing Ruby you weren't told about Rubocop If writing clean code is the goal, why not start out with a formatter and a linter Why not go into a style guide right off the bat The reasons for this are many, but some of them would be:\nIf you were to learn about the style guide only, you would have no idea what it is referring to or your lack of experience with Ruby would prevent you from understanding the pros and cons Had RuboCop been with you all this journey you'd never be able to commit all those mistakes and appreciate what it does Also, once again you'd be hit with things that you would have no idea about",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "0694f6e420b4f9004e520d1461236d1b",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "them would be: If you were to learn about the style guide only, you would have no idea what it is referring to or your lack of experience with Ruby would prevent you from understanding the pros and cons Had RuboCop been with you all this journey you'd never be able to commit all those mistakes and appreciate what it does Also, once again you'd be hit with things that you would have no idea aboutYou'd need to take care of a lot more things: Bundler, Ruby LSP, RuboCop You'd drown in inane configuration because of this, not to mention all the potential problems that you would not be equipped to deal with at that point Hope that clears this up Don't forget: RuboCop and the style guide are there to help you write predictable, cleaner code The standards might vary between teams, some of the expectations RuboCop puts on you seem impossible to fulfill and you might feel like some of the rules are too constraining With time, you are going to be better at adhering to rules but perhaps more importantly, you'll understand why and when to break them For now, enjoy the ride on the shoulders of giants Assignment\n1 Learn some more [about what linting is](https://en wikipedia org/wiki/Lint_(software)) 1 Acquaint yourself with [the introduction to Ruby Style Guide](https://rubystyle guide/) and skim it a little 1 Check out [what RuboCop is about](https://docs rubocop org/rubocop/index html) and explore its docs 1 [Watch Sandi Metz' \"Rules\"](https://www youtube com/watch v=npOGOmkxuio) for a lovely exploration of the what, why and how of rules generally and also in the Ruby context Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a style guide What is formatting What is linting How do you install RuboCop How do you run RuboCop in a command line interface How do you read RuboCop's output How do you configure RuboCop Why is Metrics department so important for new Rubyists What is the ABC metric What is cyclomatic complexity What is perceived complexity How do you configure RuboCop in VSCode Additional resources\nThis section contains helpful links to related content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "8ea5fd16256c1dbf2f3ded508970f095",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
    "source_type": "git_repo",
    "title": "Duplicate offenses in the same file were truncated.",
    "content": "What is a style guide What is formatting What is linting How do you install RuboCop How do you run RuboCop in a command line interface How do you read RuboCop's output How do you configure RuboCop Why is Metrics department so important for new Rubyists What is the ABC metric What is cyclomatic complexity What is perceived complexity How do you configure RuboCop in VSCode Additional resources This section contains helpful links to related contentIt isn't required, so consider it supplemental If you're curious about RuboCop's history and how it works Bozhidar Batsov's All About RuboCop talk should be a satisfying listen Vincius Stock's Improving the development experience with language servers talk is great for people who want to know more about Language Server Protocol, specifically the Ruby one Honeybadger's article about Rubocop might give you a different perspective and introduce some features not covered in the lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26402,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\linting_and_rubocop.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "0397b58215ed5d494a0f19b5d24fb6df",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\project_mastermind.md",
    "source_type": "git_repo",
    "title": "project_mastermind",
    "content": "Introduction\nIf you've never played Mastermind, it's a game where you have to guess your opponent's secret code within a certain number of turns (like hangman with colored pegs). Each turn you get some feedback about how good your guess was -- whether it was exactly correct or just the correct color but in the wrong space.\nAssignment\nBuild a Mastermind game from the command line where you have 12 turns to guess the secret code, starting with you guessing the computer's random code.\n1. Think about how you would set this problem up!\n1. Build the game assuming the computer randomly selects the secret colors and the human player must guess them.  Remember that you need to give the proper feedback on how good the guess was each turn!\n1. Now refactor your code to allow the human player to choose whether they want to be the creator of the secret code or the guesser.\n1. Build it out so that the computer will guess if you decide to choose your own secret colors.  You may choose to implement a computer strategy that follows the rules of the game or you can modify these rules.\n1. If you choose to modify the rules, you can provide the computer additional information about each guess.  For example, you can start by having the computer guess randomly, but keep the ones that match exactly.  You can add a little bit more intelligence to the computer player so that, if the computer has guessed the right color but the wrong position, its next guess will need to include that color somewhere.\n1. If you want to follow the rules of the game, you'll need to research [strategies for solving Mastermind](https://puzzling.stackexchange.com/questions/546/clever-ways-to-solve-mastermind).\n1. Post your solution below!\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nNot directly helpful, but here are some Ruby game libraries for fun.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2131,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\project_mastermind.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9f28c8a9900d92b0d7fe3c7dc7dc8367",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\project_tic_tac_toe.md",
    "source_type": "git_repo",
    "title": "project_tic_tac_toe",
    "content": "Introduction\nRemember Tic Tac Toe (also known as \"Noughts and Crosses\")? It involves a couple of players, a board, checking for victory in a game loop... all the conditions that make it a fun little problem to solve using our newfound OOP sea legs. Let's build it!\nAssignment\nBuild a tic-tac-toe game on the command line where two human players can play against each other and the board is displayed in between turns.\n1. Think about how you would set up the different elements within the game... What should be a class? Instance variable?  Method? A few minutes of thought can save you from wasting an hour of coding.\n1. Build your game, taking care to not share information between classes any more than you have to.\n1. Post your solution below, then check out this [example Tic Tac Toe solution from RosettaCode.org](http://rosettacode.org/wiki/Tic-tac-toe#Ruby).\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1274,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\project_tic_tac_toe.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b6c5729ded8adc75055a97924f596498",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\object_oriented_programming.md",
    "source_type": "git_repo",
    "title": "object_oriented_programming",
    "content": "Introduction\nYou've got the building blocks of Ruby out of the way, great Now it's time to get into the fun stuff how do we combine those building blocks in the most efficient and elegant ways to produce the programs we'd like to write The concepts you'll learn here are often less specific to Ruby itself and more widely applicable to any object-oriented language That's because the fundamental concepts are just that fundamental Don't repeat yourself Modularize your code Have your classes and methods only do one thing Show as little of your interfaces to the world as you can Don't make methods or classes heavily dependent on each other These will take some time and practice to implement effectively, but you'll already be taking a big step towards creating high quality code just by finishing up this section There are two projects in this Object Oriented Programming Basics section, but this does not mean that you will only use OOP for these two projects Ruby is a object-oriented language, so it is important to use OOP for all of the remaining projects There is a lot of reading in this lesson, so you are encouraged to code along with each example If you find an example that does not make sense, ask for help in the #ruby-help channel in our Discord server To get the most out of each example, try to apply what you learned by adding similar functionality on your own Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You will learn about classes You will learn about methods You will learn about scope Assignment\n1 Read the [Object Oriented Programming with Ruby](https://launchschool com/books/oo_ruby) online book, by Launch School 1 Read through these reinforcing posts by Erik Trautman to help you answer the questions in the \"Knowledge check\" section:\n- [Ruby Explained: Classes](http://www eriktrautman com/posts/ruby-explained-classes)\n- [Ruby Explained: Inheritance and Scope](http://www eriktrautman com/posts/ruby-explained-inheritance-and-scope)\n1 Read the article [Object Relationships in Basic Ruby](https://medium com/@marcellamaki/object-relationships-in-basic-ruby-1af5773fff48) to see an example of how two classes can interact 1 Read the [Bastard's Chapter on Error Handling](http://ruby bastardsbook com/chapters/exception-handling/) to reinforce your understanding of dealing with errors 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5106,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\object_oriented_programming.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "848e43e8954377eb2cee54eccc0318b4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\object_oriented_programming.md",
    "source_type": "git_repo",
    "title": "object_oriented_programming",
    "content": "by Launch School 1 Read through these reinforcing posts by Erik Trautman to help you answer the questions in the \"Knowledge check\" section: - [Ruby Explained: Classes](http://www eriktrautman com/posts/ruby-explained-classes) - [Ruby Explained: Inheritance and Scope](http://www eriktrautman com/posts/ruby-explained-inheritance-and-scope) 1 Read the article [Object Relationships in Basic Ruby](https://medium com/@marcellamaki/object-relationships-in-basic-ruby-1af5773fff48) to see an example of how two classes can interact 1 Read the [Bastard's Chapter on Error Handling](http://ruby bastardsbook com/chapters/exception-handling/) to reinforce your understanding of dealing with errors 1Do this [quiz on introductory object-oriented programming](http://www codequizzes com/ruby/beginner/intro-object-oriented-programming) and this [quiz on modules, classes, and inheritance](http://www codequizzes com/ruby/beginner/modules-classes-inheritance) from Code Quizzes Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a class What are getters and setters What is inheritance What is a scope When is a new scope defined What is the purpose of instance variables What is the difference between class variables and instance variables Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Kevin Berridge's video presentation covers major themes of practical object-oriented design, with many references to Sandi Metz's book, in about 40 minutes If you want more examples to code along with, check out Zetcode's OOP section and Zetcode's second OOP section until they start talking about exceptions (~80% of the way down) 99 Bottles of OOP is a hands-on workbook that you should code along with to get the most out of it This is a great resource if, after completing several OOP projects, you still feel uncertain about OOP concepts and would like to be guided through some refactoring examples and explanations Practical Object-Oriented Design in Ruby is a traditional technical book with practical examples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5106,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\object_oriented_programming.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f6dae004104643c8d688cc67858e8913",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\object_oriented_programming.md",
    "source_type": "git_repo",
    "title": "object_oriented_programming",
    "content": "section until they start talking about exceptions (~80% of the way down) 99 Bottles of OOP is a hands-on workbook that you should code along with to get the most out of it This is a great resource if, after completing several OOP projects, you still feel uncertain about OOP concepts and would like to be guided through some refactoring examples and explanations Practical Object-Oriented Design in Ruby is a traditional technical book with practical examplesThis is a great resource if, after completing several OOP projects, you still feel uncertain about OOP concepts and would like to be guided through some refactoring examples and explanations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5106,
      "relative_path": "git_repos\\odin-project\\ruby\\object_oriented_programming_basics\\object_oriented_programming.md",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b61680ae980d9a487ad20db999c1ba14",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\project_connect_four.md",
    "source_type": "git_repo",
    "title": "project_connect_four",
    "content": "Introduction\nA good way to get familiar with and begin contributing to a new project is to write tests for it It's also the best way to become familiar with a new code base, something you'll have to do when you start working It's pretty common for test code to ultimately take up twice as many lines of code as the actual project code You still may feel shaky on RSpec at this point (which is totally normal), so let's go back in time and write tests for some of the code you've already done to build up a bit of muscle memory If you've written a good batch, submit them below and we'll include them as part of the original project description to help future students Assignment\n1 Clone our [ruby testing repo](https://github com/TheOdinProject/ruby_testing) and complete the lessons in the spec folder 1 Watch this [helpful video by Sandi Metz](https://www youtube com/watch v=URSWYvyc42M) to learn more about Ruby testing 1 Go back to the [Caesar Cipher Project](/lessons/ruby-caesar-cipher) and write tests for your code It shouldn't take more than a half-dozen tests to cover all the possible cases As always, use the git workflow you learned in [Revisiting Rock Paper Scissors](https://www theodinproject com/lessons/foundations-revisiting-rock-paper-scissors) to work on a new feature so you can work on your new code without fear 1 Write tests for your [Tic Tac Toe project](/lessons/ruby-tic-tac-toe) In this situation, it's not quite as straightforward as just coming up with inputs and making sure the method returns the correct thing You'll need to make sure the tests that determine victory or loss conditions are correctly assessed 1 Start by writing tests to make sure players win when they should, e g when the board reads X X X across the top row, your `#game_over` method (or its equivalent) should trigger 1 Test each of your critical methods to make sure they function properly and handle edge cases 1 Use mocks/doubles to isolate methods to make sure that they're sending back the right outputs Project: TDD Connect Four\nHopefully most people will have played Connect Four at some point It's a basic game where each player takes turns dropping pieces into the cage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4407,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\project_connect_four.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3551c01a7a462d961b521876b4118d94",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\project_connect_four.md",
    "source_type": "git_repo",
    "title": "project_connect_four",
    "content": "X X across the top row, your `#game_over` method (or its equivalent) should trigger 1 Test each of your critical methods to make sure they function properly and handle edge cases 1 Use mocks/doubles to isolate methods to make sure that they're sending back the right outputs Project: TDD Connect Four Hopefully most people will have played Connect Four at some point It's a basic game where each player takes turns dropping pieces into the cagePlayers win if they manage to get 4 of their pieces consecutively in a row, column, or along a diagonal The game rules are fairly straightforward and you'll be building it on the command line like you did with the other games If you want to spice up your game pieces, look up the unicode miscellaneous symbols on Wikipedia The Ruby part of this should be well within your capability by now so it shouldn't tax you much to think about it The major difference here is that you'll be doing this TDD-style So figure out what needs to happen, write a (failing) test for it, then write the code to make that test pass, then see if there's anything you can do to refactor your code and make it better Only write exactly enough code to make your test pass Oftentimes, you'll end up having to write two tests in order to make a method do anything useful That's okay here It may feel a bit like overkill, but that's the point of the exercise Your thoughts will probably be something like \"Okay, I need to make this thing happen How do I test it Okay, wrote the test, how do I code it into Ruby Okay, wrote the Ruby, how can I make this better \"  You'll find yourself spending a fair bit of time Googling and trying to figure out exactly how to test a particular bit of functionality That's also okay You're really learning RSpec here, not Ruby, and it takes some getting used to Assignment continued\n1 Build Connect Four Just be sure to keep it TDD Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Stack Overflow has an RSpec Mock Object example Tutorials Point has an article about RSpec Writing Specs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4407,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\project_connect_four.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "90bd6f873c9047fe23a53bc50d80ed58",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\test_driven_development.md",
    "source_type": "git_repo",
    "title": "test_driven_development",
    "content": "Introduction\nHopefully, you've been having fun developing in Ruby thus far Perhaps one thing you may not have enjoyed as much, though, is having to run your script on the command line, running through each step manually, only to find that it doesn't return what you expected And then comes the part that's even more fun: tugging at your hair a bit, changing a few variables, and running your script all over again, hoping that the results are correct Folks, we're here to tell you there IS a better way Hoping is for that exam you didn't study for and took by the seat of your pants Knowing is test-driven development Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand what test-driven development (TDD) is, and why it's important Understand the three stages of a TDD cycle What is test-driven development Test-Driven Development (TDD) is a process and technique of software development that relies on the repetition of a very short and specific development cycle In each cycle, requirements (i e , what you want your code to do) are turned into specific test cases first These requirements could be anything from an entire feature that requires end-to-end (E2E) testing, such as tests that cover a user logging into your website successfully AND unsuccessfully, to a new Ruby class you've devised, for which unit tests might suffice Either way, the test suite for these requirements fail initially, since actual code hasn't been written yet Once the code is written and passes our test suite, you can move onto refactoring As you might have guessed, running the test suite against the changes we make to our features or units enables us to refactor while making sure everything still works Colloquially, this process is often referred to as the \"red-green-refactor\" cycle That's all it is, in a nutshell: automated tests drive the design of software You don't need to know how the entire architecture of your sweet, new, industry-breaking application will work Your application only has to be broken down, step-by-step, until small units are identified and covered by tests Why is it important Even if TDD intuitively seems like good practice, its utility is hotly debated even today No one is saying that tests aren't useful Testing at all levels is crucial Joël Quenneville's article on the Rails Testing Pyramid provides an overview into the different types and levels of testing that Rails developers routinely use",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6338,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\test_driven_development.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6747fbd066d09aa08d8056224e1566fa",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\test_driven_development.md",
    "source_type": "git_repo",
    "title": "test_driven_development",
    "content": "work Your application only has to be broken down, step-by-step, until small units are identified and covered by tests Why is it important Even if TDD intuitively seems like good practice, its utility is hotly debated even today No one is saying that tests aren't useful Testing at all levels is crucial Joël Quenneville's article on the Rails Testing Pyramid provides an overview into the different types and levels of testing that Rails developers routinely useTesting ensures that your application is working as intended More importantly, and perhaps less obviously, testing ensures developer confidence when it comes time to change existing code Adding new features and dependencies increases the overall instability of your application, and a single misstep can have a cascading, crashing effect in faraway, unintended locations Testing confirms that what you add works with what you already have In a sense, it provides a safety net that leaves your application more open to change, and gives it room to grow and evolve as painlessly as possible The real question is whether or not tests should drive development, or whether or not it's important for them to come first Many developers write tests after they've written their code There is definitely a longer list of pros than cons for having tests in general, no one will disagree with that So should we test first As usual, it depends Still, here are some reasons we think it might be important for you to implement TDD:\nPractice Many employers look for developers who have experience or interest in testing Sure, you can write tests later, but will you really Test first to make sure you get exposure as soon as possible Effectiveness Writing tests before code is like stretching before a workout It's not required, but without it, your workout could suffer Writing tests first ensures that the code that comes after has clearer design, purpose, and quality Efficiency You'll save time in the long run by not having to re-run entire applications just to make sure little parts work Assignment\n1 Read up on the [9 Benefits of Test-Driven Development](https://www madetech com/blog/9-benefits-of-test-driven-development) for additional insight on this practice Note that many of these points are not specific to TDD, but are also applicable to testing in general 1 For a more rounded take, consider DHH's [\"TDD is Dead Long Live Testing\"](https://dhh dk/2014/tdd-is-dead-long-live-testing",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6338,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\test_driven_development.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "86a02c65b4550c410aec3defe6921832",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\test_driven_development.md",
    "source_type": "git_repo",
    "title": "test_driven_development",
    "content": "quality Efficiency You'll save time in the long run by not having to re-run entire applications just to make sure little parts work Assignment 1 Read up on the [9 Benefits of Test-Driven Development](https://www madetech com/blog/9-benefits-of-test-driven-development) for additional insight on this practice Note that many of these points are not specific to TDD, but are also applicable to testing in general 1 For a more rounded take, consider DHH's [\"TDD is Dead Long Live Testing\"](https://dhh dk/2014/tdd-is-dead-long-live-testinghtml), which sparked controversial conversations on what TDD is, what it has become, and what it should be 1 James Sinclair's article explains more about [the why/how and value behind TDD](https://jrsinclair com/articles/2016/one-weird-trick-that-will-change-the-way-you-code-forever-javascript-tdd/) and also includes some great examples of how to apply it While the examples are in JavaScript, the focus is on the value behind the TDD approach Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the \"red-green-refactor\" cycle What is the difference between unit and integration tests How does TDD help in code refactoring Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This video that provides counter arguments for DHH's “TDD is Dead Long Live Testing” article from the assignment For a more rounded taken on TDD, watch or listen to this series of talks on the pros and cons of TDD",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6338,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\test_driven_development.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "68ce4deb2823e349700465d5eeaab672",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
    "source_type": "git_repo",
    "title": "spec/calculator_spec.rb",
    "content": "Introduction\nIn the previous lesson, we established the utility of test-driven development (TDD) in maintaining your code and sanity In this lesson, we'll introduce you to your new best friend, the RSpec testing framework It's one of the most popular testing frameworks, having been downloaded more than 700 million times, at the time of this writing, and having been ported for use in Rails testing Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Know what RSpec is Know how to install RSpec Understand the basic RSpec syntax: describe and it Introduction to RSpec\nWhat is RSpec, and why RSpec At the most basic level, RSpec is a Domain Specific Language written in Ruby, or, for the rest of us, a language specialized for a particular task In this case, the task is testing Ruby code The rspec gem comes packaged with all you need to get started, including five gems: rspec, rspec-core, rspec-expectations, rspec-mocks, and rspec-support At this point, you may be wondering, Why RSpec Surely, there are other frameworks out there, and you'd be right There are In fact, at one point, Ruby came bundled with Test::Unit and later Minitest as part of its standard library, the latter of which lives on in Rails If you tend to be pessimistic (Sorry, we meant realistic), then the Wrong testing framework might be your cup of tea Or perhaps you're hungry and in the mood for something more substantial, in which case a side of Bacon might be what you need At the end of the day, it doesn't matter which framework you choose as long as you cultivate your testing skills RSpec's wider adoption, especially in the Rails community, is certainly reason enough to warrant familiarity with it, but implementing tests should be the end-all and be-all, rather than choosing a particular framework But enough proselytizing Strap your helmet and buckle up; we're going to jump right in Installing RSpec\nBoot up your terminal and punch in gem install rspec to install RSpec Once that's done, you can verify your version of RSpec with rspec --version, which will output the current version of each of the packaged gems Take a minute also to hit rspec --help and look through the various options available",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13399,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "a5f03daa8b4fb0348fdffe3f746e02b6",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
    "source_type": "git_repo",
    "title": "spec/calculator_spec.rb",
    "content": "rather than choosing a particular framework But enough proselytizing Strap your helmet and buckle up; we're going to jump right in Installing RSpec Boot up your terminal and punch in gem install rspec to install RSpec Once that's done, you can verify your version of RSpec with rspec --version, which will output the current version of each of the packaged gems Take a minute also to hit rspec --help and look through the various options availableFinally, cd into a project directory that you wish to configure for use with RSpec and type rspec --init to initialize RSpec within the project This will generate two files, rspec and spec/spec_helper rb, such that your project might look like:\nbash\nproject\n|__lib\n|   |__script rb\n|\n|__spec\n|   |__spec_helper rb\n|\n|__ rspec\nThat's it Within two steps, you're up and running with RSpec That wasn't so hard, was it Basic syntax\nHow 'bout a test to see the syntax Let's create a brand new \"project\" to get going Create a new directory called \"ruby_testing\", change into it, and initiate RSpec bash\nmkdir ruby_testing && cd ruby_testing\nrspec --init\nAs expected, the output will read:\nbash\ncreate rspec\ncreate   spec/spec_helper rb\nRun the tests from your terminal by using the rspec command, which will return \"No examples found \" That really shouldn't surprise you, because we haven't written any tests yet If you're still shocked maybe take a short break, or come say hello to us in our Discord server ```bash\nNo examples found Finished in 0 00037 seconds (files took 0 21108 seconds to load)\n0 examples, 0 failures\n```\nLet's add our first test Let's say we want to create a calculator with a few methods that we want to test True to TDD, we will write the tests prior to the code The spec/ folder is where all your tests will live Using touch on the command line or through your text editor, create calculator_spec rb within the spec/ folder and add the following lines:\n```ruby\nspec/calculator_spec rb\ndescribe Calculator do\ndescribe \"#add\" do\nit \"returns the sum of two numbers\" do\ncalculator = Calculator new\nexpect(calculator add(5, 2))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13399,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "d9b98ba61d7fa47f0ecf940897b6f871",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
    "source_type": "git_repo",
    "title": "spec/calculator_spec.rb",
    "content": "few methods that we want to test True to TDD, we will write the tests prior to the code The spec/ folder is where all your tests will live Using touch on the command line or through your text editor, create calculator_spec rb within the spec/ folder and add the following lines: ```ruby spec/calculator_spec rb describe Calculator do describe \"#add\" do it \"returns the sum of two numbers\" do calculator = Calculator new expect(calculator add(5, 2))to eql(7)\nend\nend\nend\n```\nLet's go line by line First, describe is an RSpec keyword that defines an \"Example Group\", or a collection of tests It takes a class or a string as an argument and is passed a block (do/end) describe blocks can be nested, such as on the second line of our test above When describing a class, the following syntax is also valid:\n```ruby\nspec/calculator_spec rb\ndescribe Calculator do\n# end\n```\nThe it keyword defines an individual example (aka, test) it takes a string argument and is also passed a block This block is where our expectations of a method are expressed In this particular case, when we pass 5 and 2 to the #add method, we expect it to return 7 This is concisely expressed in our expectation clause, which uses one of RSpec's equality matchers, eql:\nruby\nexpect(calculator add(5, 2)) to eql(7)\nThat's basically it One more time, from the top:\ndescribe the class\ndescribe the method example group Conventionally, the string argument for instance methods are written as \"#method\", while string arguments for class methods are written as \" method\" Write your test case/example with it Write your expectation using expect The expect method is also chained with to for positive expectations, or to_not/ not_to for negative expectations We prefer not_to Also, limit one expect clause per test case Passing code\nLet's move on Run rspec from the directory root, and watch the output ```bash\nAn error occurred while loading /spec/calculator_spec rb Failure/Error:\ndescribe Calculator do\ndescribe \"#add\" do\nit \"returns the sum of two numbers\" do\ncalculator = Calculator new\nexpect(calculator add(5, 2)) to eql(7)\nend\nend\nend\nNameError:\nuninitialized constant Calculator /spec/calculator_spec",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13399,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "ee057b17e9f5b5283bb883304bc54ae4",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
    "source_type": "git_repo",
    "title": "spec/calculator_spec.rb",
    "content": "to for positive expectations, or to_not/ not_to for negative expectations We prefer not_to Also, limit one expect clause per test case Passing code Let's move on Run rspec from the directory root, and watch the output ```bash An error occurred while loading /spec/calculator_spec rb Failure/Error: describe Calculator do describe \"#add\" do it \"returns the sum of two numbers\" do calculator = Calculator new expect(calculator add(5, 2)) to eql(7) end end end NameError: uninitialized constant Calculator /spec/calculator_specrb:1:in `'\nNo examples found Finished in 0 0004 seconds (files took 0 16461 seconds to load)\n0 examples, 0 failures, 1 error occurred outside of examples\n```\nSo our first test returned an error This is unsurprising NameError is essentially telling us that RSpec looked for a Calculator class, but couldn't find one So let's create it From your project root, create a lib/ folder, and inside, calculator rb with your class We'll also go ahead and begin the #add method, otherwise RSpec will give us a similar error as the previous one when it looks for it:\n```ruby\nlib/calculator rb\nclass Calculator\ndef add(a,b)\nend\nend\n```\nFinally, we must also tell the spec where the Calculator class is being defined This is easily done with require:\n```ruby\nspec/calculator_spec rb\nrequire ' /lib/calculator'  #=> add this\ndescribe Calculator do\n# end\n```\nIf you were to run rspec this time, you'd get your first failure ```bash\nF\nFailures:\n1) Calculator#add returns the sum of two numbers\nFailure/Error: expect(calculator add(5, 2)) to eql(7)\nexpected: 7\ngot: nil\n(compared using eql )\n# /spec/calculator_spec rb:7:in `block (3 levels) in <top (required)>'\nFinished in 0 28565 seconds (files took 0 6273 seconds to load)\n1 example, 1 failure\nFailed examples:\nrspec /spec/calculator_spec rb:5 # Calculator#add returns the sum of two numbers\n```\nOur first failure is denoted by the F at the top of the output Congratulations You've made it to the \"red\" portion of the \"red-green-refactor\" cycle of TDD",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13399,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "ee90ebfe567f8586a636e31e8b94b405",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
    "source_type": "git_repo",
    "title": "spec/calculator_spec.rb",
    "content": "eql(7) expected: 7 got: nil (compared using eql ) # /spec/calculator_spec rb:7:in `block (3 levels) in <top (required)>' Finished in 0 28565 seconds (files took 0 6273 seconds to load) 1 example, 1 failure Failed examples: rspec /spec/calculator_spec rb:5 # Calculator#add returns the sum of two numbers ``` Our first failure is denoted by the F at the top of the output Congratulations You've made it to the \"red\" portion of the \"red-green-refactor\" cycle of TDDRSpec provides a list of all the failures, with the expected vs actual output of the method being tested At the bottom of your output, RSpec also points to the line of the failing test, which in this case is where our it block started Getting this method to \"green\" shouldn't be too difficult RSpec clearly provides a reason for the failure: it expected the output to be 7 when we provided the method with (5, 2) as the parameters Instead, it returned nil Why might that be Well, our #add does take two parameters but it does nothing with them Add the minimum amount of code necessary to get your test to pass:\n```ruby\nlib/calculator rb\nclass Calculator\ndef add(a,b)\na + b         #=> add this\nend\nend\n```\nThen, run the test again to get a single dot, letting you know that your test has passed:\n```bash Finished in 0 0032 seconds (files took 0 14864 seconds to load)\n1 example, 0 failures\n```\nAt this point, refactoring isn't necessary The #add method is essentially a one line method As you progress in your Ruby learning, however, you might find your methods getting more complex, and you might find that you have to make extra efforts to abide by SOLID principles When that time comes, using RSpec and the \"red-green-refactor\" cycle will allow you to code with confidence, knowing that your classes and their behaviors continue to meet your specified expectations Assignment\nIt's time to put your newfound knowledge to good use Let's break our `Calculator` test 1 Let's implement a new test case for your `#add` method, written out for you below Run the test to see the failure",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13399,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "06a29b0ee917e922f5536f343cb576dc",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
    "source_type": "git_repo",
    "title": "spec/calculator_spec.rb",
    "content": "extra efforts to abide by SOLID principles When that time comes, using RSpec and the \"red-green-refactor\" cycle will allow you to code with confidence, knowing that your classes and their behaviors continue to meet your specified expectations Assignment It's time to put your newfound knowledge to good use Let's break our `Calculator` test 1 Let's implement a new test case for your `#add` method, written out for you below Run the test to see the failureWrite the minimum code necessary to get **both** tests to pass, then refactor if necessary ```ruby\n#spec/calculator_spec rb\ndescribe Calculator do\ndescribe \"#add\" do\nit \"returns the sum of two numbers\" do\n# removed for brevity\nend\n# add this\nit \"returns the sum of more than two numbers\" do\ncalculator = Calculator new\nexpect(calculator add(2, 5, 7)) to eql(14)\nend\nend\nend\n```\n1 Write a test for a new `Calculator` method (`#multiply`, `#subtract`, or `#divide`) using a new `describe` block Include at least one `it` block with an appropriate expectation clause Get it to pass, and refactor if necessary 1 In the terminal, try running your failing or passing tests with `rspec --format documentation` What's different 1 RSpec reads command line configurations from ` rspec`, one of the two files generated when RSpec is initialized in a project If you liked the output you got with `--format documentation`, you can use the ` rspec` file to hold that flag In doing so, you won't have to type it in every time you run your test suite Open the file in your text editor and, on a new line, add `--format documentation` For more information, you can read more about [configuring RSpec](http://rspec info/features/3-12/rspec-core/configuration/) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What do you name the folder that contains your test files What does the keyword describe define What does the keyword it define How many expect clauses can you write for one test case What are some of RSpec's equality matchers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13399,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "7f47939a6227deb70ed2192c9f631f40",
    "source_file": "corpus\\git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
    "source_type": "git_repo",
    "title": "spec/calculator_spec.rb",
    "content": "to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What do you name the folder that contains your test files What does the keyword describe define What does the keyword it define How many expect clauses can you write for one test case What are some of RSpec's equality matchersHow do we tell RSpec where to find the code to be tested Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This Youtube video gives an excellent overview of the fundamentals of Rspec, and gives a brief overview of some concepts that will be mentioned in the next lesson For a more thorough overview of RSpec, read through the RSpec section of Ruby Monsta’s \"Testing for Beginners\" book Briefly look over RSpec's other matchers if you haven't done so already Briefly look over BetterSpecs' recommended RSpec styling and syntax and read through the first six guidelines This RSpec Cheat Sheet should help you avoid Googling every new bit of syntax Getting Started with RSpec Part 1: Solidify these concepts with a shameless plug from another Odin Project contributor",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13399,
      "relative_path": "git_repos\\odin-project\\ruby\\testing_ruby_with_rspec\\introduction_to_rspec.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "7e7fee52ee75d54c467208e6ce63cec0",
    "source_file": "corpus\\git_repos\\odin-project\\react\\class_components\\component_lifecycle_methods.md",
    "source_type": "git_repo",
    "title": "component_lifecycle_methods",
    "content": "Introduction\nIn the previous section, you've learned about a component's lifecycle In functional components, we've primarily used the useEffect hook to perform tasks throughout the lifecycle, but in class components we have to use specific lifecycle methods instead We'll start with a short recap of what a component's lifecycle is There are three stages to a component's life: mounting, updating, and unmounting Each of these have a method assigned to them within class components, which is what we are going to cover in this lesson Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Learn how to use lifecycle methods in a class component render()\nThe render function is the most used lifecycle method, and one that you've come across in the last class components lesson It is the only required lifecycle method in a class component It runs on mount and update of a component Render should be pure, meaning it doesn't modify component state, returns the same thing each time it's called (given the same inputs), and doesn't directly interact with the browser componentDidMount()\nThis method is run after the component is mounted (inserted in the DOM tree) You should make any calls to fetch data that is needed for the component here It is also a good place to do anything that is reliant on the component, such as fetching from an API componentDidUpdate()\nThis method is run after a component re-renders Because of this, you have to be careful about what you update in this method, as if you're updating state indiscriminately, a re-render is caused, and you'll end up in an endless loop You can avoid this issue by using conditional statements about the equality of previous and current props when updating state In this method you should be updating anything that needs to be changed in response to either the DOM changing, or any states that you might want to act on upon change For example, you'd want to refetch user data if the user changes componentWillUnmount()\nThis is the last lifecycle method, which is called before a component is unmounted and destroyed In this method you should be performing cleanup actions, so that would be cancelling network requests, clearing timers, etc How useEffect() combines the lifecycle methods\nNow that we've learnt about class lifecycle methods, it's useful to understand that the useEffect hook used in functional components is essentially a combination of componentDidMount, componentDidUpdate, and componentWillUnmount Which method/methods it relates to varies based on its dependency array, and if it returns anything",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5084,
      "relative_path": "git_repos\\odin-project\\react\\class_components\\component_lifecycle_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1bb8214c1163ead92652534b5fcbdabb",
    "source_file": "corpus\\git_repos\\odin-project\\react\\class_components\\component_lifecycle_methods.md",
    "source_type": "git_repo",
    "title": "component_lifecycle_methods",
    "content": "a component is unmounted and destroyed In this method you should be performing cleanup actions, so that would be cancelling network requests, clearing timers, etc How useEffect() combines the lifecycle methods Now that we've learnt about class lifecycle methods, it's useful to understand that the useEffect hook used in functional components is essentially a combination of componentDidMount, componentDidUpdate, and componentWillUnmount Which method/methods it relates to varies based on its dependency array, and if it returns anythingAn empty dependency array would be equivalent to componentDidMount A dependency array with a value/values in it would be a combination of componentDidMount and componentDidUpdate, but only updating when dependencies change No dependency array would be equivalent to componentDidMount and componentDidUpdate combined A return function inside of a useEffect() hook would be equivalent to componentWillUnmount For example:\njavascript\nuseEffect(() => {\nplaceholderFunction();\nreturn () => cleanupFunction();\n}, [])\nIn this snippet, the useEffect contains the functionality of componentDidMount, and componentWillUnmount via the return function This example doesn't have the componentDidUpdate functionality because of an empty dependency array Assignment\n1 Check out this [component lifecycle diagram](https://projects wojtekmaj pl/react-lifecycle-methods-diagram/) to see a good visual representation of a component's lifecycle methods 1 Read through [component documentation](https://react dev/reference/react/Component) from 'constructor(props)' up to 'componentWillUnmount()' in the Reference section, being mindful of deprecated APIs Consider other APIs as supplementary information Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the only required lifecycle method What lifecycle method should you use for initial data fetching When you want to act upon change of the DOM, or of state, what lifecycle method would you use When performing cleanup actions, what lifecycle method should be used How does the useEffect hook combine some of the lifecycle methods Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5084,
      "relative_path": "git_repos\\odin-project\\react\\class_components\\component_lifecycle_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "badb6a03b9d1325f361e26930a746230",
    "source_file": "corpus\\git_repos\\odin-project\\react\\conclusion\\conclusion_full_stack_javascript.md",
    "source_type": "git_repo",
    "title": "conclusion_full_stack_javascript",
    "content": "Congratulations 🎉\nWoohoo, React has been conquered You are officially a React guru Take a moment to appreciate what you've learned throughout this course and give yourself a round of applause With React under your tool belt, you are well-equipped to tackle complex projects confidently However, your React learning (or learning in general) doesn’t stop here As proponents of a growth mindset, we believe there’s so much more to explore and learn What’s next\nAfter completing The Odin Project, you may be interested in learning about React metaframeworks which build on top of React to allow developers to make full use of React's latest features such as server components, as well as providing first class support for things like routing and data fetching Completing the Node js course will give you the perfect foundation for diving deeper into this stuff You can also keep up with the future of React by following the React RFC GitHub repository, which is where new features and changes to React are proposed, discussed, and eventually accepted or rejected You may also be interested in reading the official React blog, which will also keep you up-to-date on the latest features You're at a point in your React journey where you can begin learning about design patterns and architecture patterns dev is an exceptional resource that will help you build better React apps by leveraging powerful patterns They are worth a bookmark Before you move onto the next section Fill out this React course feedback survey to add your input and experience with the section This helps us improve the section as well as the overall course and is greatly appreciated Using a backend\nAs you've seen, you can get your apps to do a lot of pretty cool things already, just using client-side JavaScript You may have noticed, though, that there is still an important piece of the puzzle missing: unless you use Local Storage, your app 'forgets' the user's preferences, as well as any other changes made, as soon as the page gets reloaded While Local Storage is great, it's not ideal: it only stores data on the computer from which the user is accessing the page This approach does not allow for the app to 'remember' anything when the same user tries to access it again from a different device For that, you're going to need a real backend, which you'll learn all about next in our NodeJS course With Node, we'll be able to add a bunch of cool features to your apps like user authentication, data persistence, and more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3512,
      "relative_path": "git_repos\\odin-project\\react\\conclusion\\conclusion_full_stack_javascript.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "858f1bf78cb5a0522f3a7d14385a2c76",
    "source_file": "corpus\\git_repos\\odin-project\\react\\conclusion\\conclusion_full_stack_javascript.md",
    "source_type": "git_repo",
    "title": "conclusion_full_stack_javascript",
    "content": "on the computer from which the user is accessing the page This approach does not allow for the app to 'remember' anything when the same user tries to access it again from a different device For that, you're going to need a real backend, which you'll learn all about next in our NodeJS course With Node, we'll be able to add a bunch of cool features to your apps like user authentication, data persistence, and moreYou have come very far and you should be proud of yourself for getting to this point Contribute\nThe Odin Project wouldn’t exist if not for contributors sharing their precious time and resources We'd love to hear your ideas and suggestions to improve the React course You can share your thoughts over on our Discord or better yet, open an issue on the The Odin Project's curriculum repository Good luck and happy learning",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3512,
      "relative_path": "git_repos\\odin-project\\react\\conclusion\\conclusion_full_stack_javascript.md",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1bb5f51d2fa89bc33d56f803b83de35a",
    "source_file": "corpus\\git_repos\\odin-project\\react\\class_components\\class_based_components.md",
    "source_type": "git_repo",
    "title": "class_based_components",
    "content": "Introduction\nAll the components so far have been functional in style and syntax This is common now, but you will see a different class based syntax too In this lesson, we explore how a class-based component is written and how concepts like props and state are used in one Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Learn the structure of a class component and how they are written How to use props and state in class components Highlight the uses of this in class components Historical React component patterns\nIn your previous lessons, you have already been introduced to functional components, and the basic patterns in which components get written nowadays However, React components did not look this way when React was introduced If you look into any older React codebase, you'll notice a lot of classes These are known as class-based components Prior to February 2019, functional components were also called state-less, as there was no way to manage state in them This was changed when hooks were introduced, leading to less verbose and 'neater' components In your career, chances are, you will be dealing with legacy code, so there will be days where you would be dealing with class components Let's peek into the intricacies of a class-based component, and how they work Building a class component\nAs we already know about functional components, let us build a class-based component from a functional one Usually, you will want to divide the contents of a component, like the one we use, into smaller, reusable components, but for the purposes of this exercise, we stick to one component Below, we have a sample functional component:\n```jsx\nimport { useState } from \"react\";\nconst FunctionalInput = ({ name }) => {\nconst [todos, setTodos] = useState([\"Just some demo tasks\", \"As an example\"]);\nconst [inputVal, setInputVal] = useState(\"\");\nconst handleInputChange = (e) => {\nsetInputVal(e target value);\n};\nconst handleSubmit = (e) => {\ne preventDefault();\nsetTodos((prevTodos) => [ prevTodos, inputVal]);\nsetInputVal(\"\");\n};\nreturn (\n{name}\nEnter a task:\nSubmit\nAll the tasks {todos map((todo) => (\n{todo}\n))}\n);\n};\nexport default FunctionalInput;\n```\nThat was a solid chunk of code Take a while, sip some water and read it a couple of times",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10659,
      "relative_path": "git_repos\\odin-project\\react\\class_components\\class_based_components.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f4889e9d6d137bb427982f1fc62d43ff",
    "source_file": "corpus\\git_repos\\odin-project\\react\\class_components\\class_based_components.md",
    "source_type": "git_repo",
    "title": "class_based_components",
    "content": "tasks\", \"As an example\"]); const [inputVal, setInputVal] = useState(\"\"); const handleInputChange = (e) => { setInputVal(e target value); }; const handleSubmit = (e) => { e preventDefault(); setTodos((prevTodos) => [ prevTodos, inputVal]); setInputVal(\"\"); }; return ( {name} Enter a task: Submit All the tasks {todos map((todo) => ( {todo} ))} ); }; export default FunctionalInput; ``` That was a solid chunk of code Take a while, sip some water and read it a couple of timesThe start of a class-based component\nNow, let's try to recreate it as a class-based component The first thing it should have is, drumroll, a class But it cannot be just another class, it will need to have certain properties that qualifies it as a React component React provides us with all those properties on a class called Component, and we can write our components by extending the given class, as shown below:\n```jsx\nimport { Component } from \"react\";\nclass ClassInput extends Component {\n// Some code goes here\n}\n/*\nThis can also be written as:\nimport React from 'react';\nclass ClassInput extends React Component {}\nexport default ClassInput;\ninstead of destructuring the Component during import\n*/\nexport default ClassInput;\n```\nThe use of a constructor and props\nA class is generally incomplete without a constructor, so let's add one The props passed into this component are passed to the class's constructor This, along with the super method, allows you to use the props in the context of this, which, in this case, refers to the component If you’re really curious about what super actually does, check out the MDN docs on the super keyword If your component doesn't have any props, it is fine to leave the constructor and the super with no arguments ```jsx\nimport { Component } from \"react\";\nclass ClassInput extends Component {\nconstructor(props) {\nsuper(props);\n}\n// Some more code goes here\n}\nexport default ClassInput;\n```\nHow you can render JSX\nNow that the props can be accessed inside of the class component, the next issue is to find a way to render the JSX Well, you can do that by returning your JSX from a render method You can use the props that you declared in the constructor too",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10659,
      "relative_path": "git_repos\\odin-project\\react\\class_components\\class_based_components.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "910eeb22a6920baaf59e389659682f93",
    "source_file": "corpus\\git_repos\\odin-project\\react\\class_components\\class_based_components.md",
    "source_type": "git_repo",
    "title": "class_based_components",
    "content": "from \"react\"; class ClassInput extends Component { constructor(props) { super(props); } // Some more code goes here } export default ClassInput; ``` How you can render JSX Now that the props can be accessed inside of the class component, the next issue is to find a way to render the JSX Well, you can do that by returning your JSX from a render method You can use the props that you declared in the constructor too```jsx\nimport { Component } from \"react\";\nclass ClassInput extends Component {\nconstructor(props) {\nsuper(props);\n}\n// Some more code goes here\nrender() {\nreturn (\n{this props name}\n{/ The input field to enter Todos /}\nEnter a task:\nSubmit\nAll the tasks {/ The list of all the Todos, displayed /}\n);\n}\n}\nexport default ClassInput;\n```\nNotice how the props get provided by this, unlike the functional component that we saw, initially How to use state and manage context\nNext comes the state In a class-based component, the state gets initialized as a part of the constructor ```jsx\nimport { Component } from \"react\";\nclass ClassInput extends Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ntodos: [],\ninputVal: \"\",\n};\n}\n// Some more code goes here\nrender() {\nreturn (\n{this props name}\nEnter a task:\nSubmit\nAll the tasks );\n}\n}\nexport default ClassInput;\n```\nThe pre-defined setState method can be used to set it again Remember, state must not be mutated, so a new state must be set, every time Now, it is time to finish it off by adding all the functionality It is nearly the same, except for a single difference Whenever a method is declared, you must bind the this of the method to that of the class in order to work with it, as by default, the methods in a class are not bound to it Usually, you do this inside the constructor and not at runtime [in the render method] ```jsx\nimport { Component } from \"react\";\nclass ClassInput extends Component {\nconstructor(props) {\nsuper(props);\nthis state = {\ntodos: [],\ninputVal: \"\",\n};\nthis handleInputChange = this handleInputChange bind(this);\nthis handleSubmit = this handleSubmit bind(this);\n}\nhandleInputChange(e) {\nthis setState((state) => ({ state,\ninputVal: e target value,\n}));\n}\nhandleSubmit(e) {\ne preventDefault();\nthis setState((state) => ({\ntodos: state todos concat(state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10659,
      "relative_path": "git_repos\\odin-project\\react\\class_components\\class_based_components.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "691351c513e1dfcd4b6b74b54acd74a9",
    "source_file": "corpus\\git_repos\\odin-project\\react\\class_components\\class_based_components.md",
    "source_type": "git_repo",
    "title": "class_based_components",
    "content": "you do this inside the constructor and not at runtime [in the render method] ```jsx import { Component } from \"react\"; class ClassInput extends Component { constructor(props) { super(props); this state = { todos: [], inputVal: \"\", }; this handleInputChange = this handleInputChange bind(this); this handleSubmit = this handleSubmit bind(this); } handleInputChange(e) { this setState((state) => ({ state, inputVal: e target value, })); } handleSubmit(e) { e preventDefault(); this setState((state) => ({ todos: state todos concat(stateinputVal),\ninputVal: \"\",\n}));\n}\nrender() {\nreturn (\n{this props name}\nEnter a task:\nSubmit\nAll the tasks {this state todos map((todo) => (\n{todo}\n))}\n);\n}\n}\nexport default ClassInput;\n```\nAnd there we go, we have successfully made our first class-based component, as easy as that Assignment\nFor the purposes of this assignment, we take the class-based component that we built and add additional functionality There is an interactive example provided at the end to build upon 1 Implement a delete button for each task The delete button should remove that specific task from the state array, thus deleting the task itself Styling isn't a priority at this moment, but the button tag should be styled by default 1 Implement a new class component, `Count` that displays the number of todos, at any given time 1 Implement an edit button for each task It should replace the todo with an input field, and change the button itself to 'Resubmit', so the edits can be saved This is a comparatively harder task, kudos for when you finish it Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do props get used in a class-based component How does JSX get displayed How do we deal with state in a class-based component How do you restore the context of this in a method Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10659,
      "relative_path": "git_repos\\odin-project\\react\\class_components\\class_based_components.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "9739dd5fed4565489eb4146ad7a3767c",
    "source_file": "corpus\\git_repos\\odin-project\\react\\conclusion\\conclusion_ruby_on_rails.md",
    "source_type": "git_repo",
    "title": "conclusion_ruby_on_rails",
    "content": "Congratulations 🎉\nWoohoo, React has been conquered! You are officially a React guru. Take a moment to appreciate what you've learned throughout this course and give yourself a round of applause. With React under your tool belt, you are well-equipped to tackle complex projects confidently.\nHowever, your React learning (or learning in general) doesn’t stop here. As proponents of a growth mindset, we believe there’s so much more to explore and learn.\nWhat’s next\nYou may be interested in learning about React metaframeworks which build on top of React to allow developers to make full use of React's latest features such as server components, as well as providing first class support for things like routing and data fetching, such as Next.js.\nYou can also keep up with the future of React by following the React RFC GitHub repository, which is where new features and changes to React are proposed, discussed, and eventually accepted or rejected. You may also be interested in reading the official React blog, which will also keep you up-to-date on the latest features.\nYou're at a point in your React journey where you can begin learning about design patterns and architecture. patterns.dev is an exceptional resource that will help you build better React apps by leveraging powerful patterns. They are worth a bookmark!\nYou have come very far and you should be proud of yourself for getting to this point.\nBefore you move onto the next section. Fill out this React course feedback survey to add your input and experience with the section. This helps us improve the section as well as the overall course and is greatly appreciated.\nContribute\nThe Odin Project wouldn’t exist if not for contributors sharing their precious time and resources. We'd love to hear your ideas and suggestions to improve the React course. You can share your thoughts over on our Discord or better yet, open an issue on the The Odin Project's curriculum repository.\nGood luck and happy learning!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2358,
      "relative_path": "git_repos\\odin-project\\react\\conclusion\\conclusion_ruby_on_rails.md",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "24ef5ca3caf8cd9928bfdc1c13fef1f9",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\keys_in_react.md",
    "source_type": "git_repo",
    "title": "keys_in_react",
    "content": "Introduction\nIn this lesson, we will cover keys in React Keys are special props for our components and we'll learn why they are used Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Learn what keys are in React and why it needs them Identify examples of good and bad key usage in React applications Why does React need keys In the upcoming lessons as you learn more about the internal workings of React, more specifically the re-rendering process, you will understand the importance of keys For now, we will keep it short In the previous lesson on rendering lists, we used the map() method to iterate over an array of data and return a list of elements Now imagine, if any of the items in the list were to change, how would React know which item to update If the list were to change, one of two things should happen:\nwe completely re-render the entire list, or:\nwe hunt down the specific items that were changed and only re-render those Assuming we want to hunt down that one specific item that was changed and NOT re-render the entire list, we need something to track that specific item We can track down a specific item by using a key When the list is updated for whatever reason (either from a server or a user interaction), React matches the keys of each of the previous list items to the updated list If there were any changes, React will only update the items that have changed As long as keys remain consistent and unique, React can handle the DOM effectively and efficiently Using keys\nWe will be using `props` here, and you will learn more about them in the next lesson For now, you just need to know that `props` are arguments that are passed into components Keys are passed into the component or a DOM element as a prop You should already be familiar with the syntax ```jsx\n//or\n```\nNow that we know the syntax, the next question is: what should be used as a key Ideally, there should be some identifier that is unique to each item in the list Most databases assign a unique id to each entry, so you shouldn't have to worry about assigning an id yourself If you are defining data yourself, it is good practice to assign a unique id to each item You can use the crypto randomUUID() function to generate a unique id",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6300,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\keys_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fba18f22a163c3cae9b4df713836ff0e",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\keys_in_react.md",
    "source_type": "git_repo",
    "title": "keys_in_react",
    "content": "the next question is: what should be used as a key Ideally, there should be some identifier that is unique to each item in the list Most databases assign a unique id to each entry, so you shouldn't have to worry about assigning an id yourself If you are defining data yourself, it is good practice to assign a unique id to each item You can use the crypto randomUUID() function to generate a unique idLet's look at an example:\n```jsx\n// a list of todos, each todo object has a task and an id\nconst todos = [\n{ task: \"mow the yard\", id: crypto randomUUID() },\n{ task: \"Work on Odin Projects\", id: crypto randomUUID() },\n{ task: \"feed the cat\", id: crypto randomUUID() },\n];\nfunction TodoList() {\nreturn (\n{todos map((todo) => (\n// here we are using the already generated id as the key {todo task}\n))}\n);\n}\n```\nAdditionally, if you're sure the list will remain unchanged throughout the application's life,  you can use the array index as a key However, this is not recommended since it can lead to confusing bugs if the list changes when items are deleted, inserted, or rearranged You will learn more about this in the assignment section's linked article ```jsx\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nfunction MonthList() {\nreturn (\n{/ here we are using the index as key /}\n{months map((month, index) => ({month}))}\n);\n}\n```\nKeys are straightforward to use, though there is an anti-pattern you should be aware of Keys should never be generated on the fly Using key={Math random()} or key={crypto randomUUID()} while rendering the list defeats the purpose of the key, as now a new key will get created for every render of the list As shown in the above example, key should be inferred from the data itself ```jsx\nconst todos = [\n{ task: \"mow the yard\", id: crypto randomUUID() },\n{ task: \"Work on Odin Projects\", id: crypto randomUUID() },\n{ task: \"feed the cat\", id: crypto randomUUID() },\n];\nfunction TodoList() {\nreturn (\n{todos map((todo) => (\n// DON'T do the following i e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6300,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\keys_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0b59d86a4656e483ef5181b6af68b1cb",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\keys_in_react.md",
    "source_type": "git_repo",
    "title": "keys_in_react",
    "content": "a new key will get created for every render of the list As shown in the above example, key should be inferred from the data itself ```jsx const todos = [ { task: \"mow the yard\", id: crypto randomUUID() }, { task: \"Work on Odin Projects\", id: crypto randomUUID() }, { task: \"feed the cat\", id: crypto randomUUID() }, ]; function TodoList() { return ( {todos map((todo) => ( // DON'T do the following i egenerating keys during render\n{todo task}\n))}\n);\n}\n```\nConclusion\nDon't fret if some of the terms covered in the lesson don't make sense yet What's crucial right now is knowing how to use keys effectively in React As mentioned earlier, the more you learn about React, the more you will understand the importance of keys Furthermore, using keys is not limited to rendering lists You might encounter use cases where keys are needed, we'll leave that for you to discover Assignment\n1 Read this [section on keys in the React docs](https://react dev/learn/rendering-lists#keeping-list-items-in-order-with-key) 1 Watch this short video demonstrating [index as key being an anti-pattern](https://youtu be/xlPxnc5uUPQ) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why does React need keys How do you use keys Where should the key value ideally come from When can we use an array index as the key value What is an anti-pattern when using keys Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This article on React key attribute by Nadia Makarevich takes an in-depth look into keys",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6300,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\keys_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d68be687588872ef7dc64f5f1ece10ba",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\passing_data_between_components.md",
    "source_type": "git_repo",
    "title": "passing_data_between_components",
    "content": "Introduction\nBy now you should be starting to understand just how powerful React and reusable components can be, but you may be left wondering ‘How can I share information between components ’ or ‘Am I able to customize the behavior of my components each time I use them ' In this lesson, we will learn about React props (short for properties) and how to use props to pass data between components Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Passing data between components Using data to create customizable reusable components Data transfer in React\nIn React, data is transferred from parent components to child components via props This data transfer is unidirectional, meaning it flows in only one direction Any changes made to this data will only affect child components using the data, and not parent or sibling components This restriction on the flow of data gives us more explicit control over it, resulting in fewer errors in our application Using props in React\nNow that we know how data transfers between components, let's explore why this might be a useful feature in React Consider the following Button component, which gets rendered multiple times within our App component ```jsx\nfunction Button() {\nreturn (\nClick Me );\n}\nexport default function App() {\nreturn (\n);\n}\n```\nSo far so good right We have a beautiful reusable button that we can use as many times as we like, there is just one small problem What if we wanted the text within our second button to be “Don’t Click Me \" Right now, we would have to create a second button component with this different text ```jsx\nfunction Button() {\nreturn (\nClick Me );\n}\nfunction Button2() {\nreturn (\nDon't Click Me );\n}\nexport default function App() {\nreturn (\n);\n}\n```\nThis may not seem like a huge deal right now, but what if we had 10 buttons Each one having different text, fonts, colors, sizes, and any other variation you can think of Creating a new component for each of these button variations would very quickly lead to a LOT of code duplication Let's see how by using props, we can account for any number of variations with a single button component ```jsx\nfunction Button(props) {\nconst buttonStyle = {\ncolor: props color,\nfontSize: props fontSize + 'px'\n};\nreturn (\n{props text}\n);\n}\nexport default function App() {\nreturn (\n);\n}\n```\nThere are a few things going on here The Button functional component now receives props as a function argument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10004,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\passing_data_between_components.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9f0588134298e3a2236bc73274d5e645",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\passing_data_between_components.md",
    "source_type": "git_repo",
    "title": "passing_data_between_components",
    "content": "a LOT of code duplication Let's see how by using props, we can account for any number of variations with a single button component ```jsx function Button(props) { const buttonStyle = { color: props color, fontSize: props fontSize + 'px' }; return ( {props text} ); } export default function App() { return ( ); } ``` There are a few things going on here The Button functional component now receives props as a function argumentThe individual properties are then referenced within the component via props propertyName When rendering the Button components within App, the prop values are defined on each component Inline styles are dynamically generated and then applied to the button element Prop destructuring\nA very common pattern you will come across in React is prop destructuring Unpacking your props in the component arguments allows for more concise and readable code Check out prop destructuring in action in the example below ```jsx\nfunction Button({ text, color, fontSize }) {\nconst buttonStyle = {\ncolor: color,\nfontSize: fontSize + \"px\"\n};\nreturn {text};\n}\nexport default function App() {\nreturn (\n);\n}\n```\nDefault props\nYou may have noticed in the above examples that there is some repetition when defining props on the Button components within App In order to stop repeating ourselves by re-defining these common values, and to protect our application from undefined values, we can define default parameters to set default values for props ```jsx\nfunction Button({ text = \"Click Me \", color = \"blue\", fontSize = 12 }) {\nconst buttonStyle = {\ncolor: color,\nfontSize: fontSize + \"px\"\n};\nreturn {text};\n}\nexport default function App() {\nreturn (\n);\n}\n```\nAs you can see, we now only need to supply prop values to Button when rendering within App if they differ from the default values defined in the function parameters You may also come across the use of defaultProps in some codebases This was traditionally used to set default values for props, particularly in class components Here’s how it looks:\n```jsx\nfunction Button({ text, color, fontSize }) {\nconst buttonStyle = {\ncolor: color,\nfontSize: fontSize + \"px\"\n};\nreturn {text};\n}\nButton defaultProps = {\ntext: \"Click Me \",\ncolor: \"blue\",\nfontSize: 12\n};\nexport default function App() {\nreturn (\n);\n}\n```\nWhile React now prefers the default parameter approach for function components, understanding defaultProps is still useful, especially when working with class components or older codebases",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10004,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\passing_data_between_components.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9089af2edebbc949bec5fb8b1601860f",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\passing_data_between_components.md",
    "source_type": "git_repo",
    "title": "passing_data_between_components",
    "content": "class components Here’s how it looks: ```jsx function Button({ text, color, fontSize }) { const buttonStyle = { color: color, fontSize: fontSize + \"px\" }; return {text}; } Button defaultProps = { text: \"Click Me \", color: \"blue\", fontSize: 12 }; export default function App() { return ( ); } ``` While React now prefers the default parameter approach for function components, understanding defaultProps is still useful, especially when working with class components or older codebasesFunctions as props\nIn addition to passing variables through to child components as props, you can also pass through functions Consider the following example ```jsx\nfunction Button({ text = \"Click Me \", color = \"blue\", fontSize = 12, handleClick }) {\nconst buttonStyle = {\ncolor: color,\nfontSize: fontSize + \"px\"\n};\nreturn (\n{text}\n);\n}\nexport default function App() {\nconst handleButtonClick = () => {\nwindow location href = \"https://www google com\";\n};\nreturn (\n);\n}\n```\nThe function handleButtonClick is defined in the parent component A reference to this function is passed through as the value for the handleClick prop on the Button component The function is received in Button and is called on a click event There are a few things to note here We only pass through a reference to handleButtonClick, i e we do not include parenthesis when passing the function to Button If we were to do something like handleClick={handleButtonClick()} then the function would be called as the button renders Every Button calling this function will navigate to the same page We can refactor the function and supply an argument within Button to customize this functionality ```jsx\nfunction Button({ text = \"Click Me \", color = \"blue\", fontSize = 12, handleClick }) {\nconst buttonStyle = {\ncolor: color,\nfontSize: fontSize + \"px\"\n};\nreturn (\n{text}\n);\n}\nexport default function App() {\nconst handleButtonClick = (url) => {\nwindow location href = url;\n};\nreturn (\nhandleButtonClick('https://www theodinproject com')} />\n);\n}\n```\nWhen supplying an argument to the function, we can't just write onClick={handleClick('https://www theodinproject com')}, and instead must attach a reference to an anonymous function which then calls the function with the argument Like the previous example, this is to prevent the function being called during the render There are also other ways to implement this behavior Hint: [curried functions ](https://javascript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10004,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\passing_data_between_components.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "20322516b72393909a704c70d62254de",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\passing_data_between_components.md",
    "source_type": "git_repo",
    "title": "passing_data_between_components",
    "content": "{ window location href = url; }; return ( handleButtonClick('https://www theodinproject com')} /> ); } ``` When supplying an argument to the function, we can't just write onClick={handleClick('https://www theodinproject com')}, and instead must attach a reference to an anonymous function which then calls the function with the argument Like the previous example, this is to prevent the function being called during the render There are also other ways to implement this behavior Hint: [curried functions ](https://javascriptinfo/currying-partials)\nHopefully, you can now understand from the examples in this lesson just how incredibly useful props are for writing reusable and customizable React components However, we are still only scratching the surface of what React can offer us Continue on to the next section to learn even more Assignment\n1 Read through the React docs on [Passing Props to a Component](https://react dev/learn/passing-props-to-a-component) Make sure to edit the code examples and experiment with different prop values Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How does data flow between React components From child to parent From parent to child Both Why do we use props in React How do we define default properties on a React component What are some benefits in doing so How can we pass functions as props Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10004,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\passing_data_between_components.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4d9f57da8c415d77e97e8941efa459db",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\react_components.md",
    "source_type": "git_repo",
    "title": "\"I swear by my pretty floral bonnet, I will end you.\"",
    "content": "Introduction\nIn this lesson we'll be going over the basics of React components - what they do, and how to write them Make sure to use the project you set up in the previous lesson, but try not to copy and paste any code while you're coding along Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Learn about React components Understand how to create components Describe where components reside in a React project What are components The beauty of React is that it allows you to break a UI (User Interface) down into independent reusable chunks, which we will refer to as components The following picture should give you an idea of how to do that when building a very basic app For example, this website could be broken into the following components:\nApp, which represents your main application and will be the parent of all other components Navbar, which will be the navigation bar MainArticle, which will be the component that renders your main content NewsletterForm, which is a form that lets a user input their email to receive the weekly newsletter Think of these reusable chunks as JavaScript functions which can take some kind of input and return a React element How to create components\nTo get the feel of working with components, we're going to practice creating functional components What are functional components JavaScript functions Let's have a look jsx\nfunction Greeting() {\nreturn <h1>&quot;I swear by my pretty floral bonnet, I will end you &quot;</h1>;\n}\nThis might look mostly familiar to you - it's a JavaScript function, which returns JSX Open up the project you were working on, create a new file named Greeting jsx, and in that file write your own handmade functional component Name it whatever you wish, and have it return whatever JSX you wish Are you done Check the naming of your function Is it capitalized Keep this key difference in mind React components must be capitalized or they will not function as expected, which is why we capitalized Greeting() More about that later #### HTML escape code\nIn the above example, `\"` is an escape code we use to render `\"` Your linter will greet you with an error if you use regular quotes You can use this [LambdaTest tool for escaping HTML characters](https://www lambdatest com/free-online-tools/html-escape) if you run into such errors, or you can read more about [HTML escape codes](https://www w3 org/wiki/Common_HTML_entities_used_for_typography)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6561,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\react_components.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fef884a92f2c56684785e532998fa5ab",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\react_components.md",
    "source_type": "git_repo",
    "title": "\"I swear by my pretty floral bonnet, I will end you.\"",
    "content": "they will not function as expected, which is why we capitalized Greeting() More about that later #### HTML escape code In the above example, `\"` is an escape code we use to render `\"` Your linter will greet you with an error if you use regular quotes You can use this [LambdaTest tool for escaping HTML characters](https://www lambdatest com/free-online-tools/html-escape) if you run into such errors, or you can read more about [HTML escape codes](https://www w3 org/wiki/Common_HTML_entities_used_for_typography)What is HTML doing in my JavaScript It's JSX It looks jarring at first, but soon we'll realize how cool it is We'll learn all about it in the upcoming lessons Where do components live\nSo remember how our component is just hanging out in its own dedicated file This makes it independent from the rest of the codebase That said, while independence is great, we do want the component to use functionality created elsewhere, and to share itself with other components How can we do this importing and exporting For a very long time in React development, it was necessary to import React in your JavaScript files that used React components, but since React v17 0 it is no longer required Let's export our newly created component so that parent components can use it as a child throughout your project ```jsx\nfunction Greeting() {\nreturn \"I swear by my pretty floral bonnet, I will end you \";\n}\nexport default Greeting;\n```\nAre we done Well let's think about this - we've declared our component, and exported it, but does main jsx know about it yet Nope Let's fix that Let's look at main jsx, we can see that render() is rendering the App component Let's replace that App component with our newly created greeting, which we'll have to make sure is first imported properly The end result should look something like this:\n```jsx\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \" /App jsx\";\nimport Greeting from \" /Greeting jsx\";\nimport \" /index css\";\ncreateRoot(document getElementById(\"root\")) render(\n,\n);\n```\nRemember that <Greeting /> should be capitalized Try using lower case for the import, function name and component and see what happens When the JSX is parsed, React uses the capitalization to tell the difference between an HTML tag and an instance of a React component",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6561,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\react_components.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "02a53da268f1bc7dc33fa6f7eada5bff",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\react_components.md",
    "source_type": "git_repo",
    "title": "\"I swear by my pretty floral bonnet, I will end you.\"",
    "content": "from \"react\"; import { createRoot } from \"react-dom/client\"; import App from \" /App jsx\"; import Greeting from \" /Greeting jsx\"; import \" /index css\"; createRoot(document getElementById(\"root\")) render( , ); ``` Remember that <Greeting /> should be capitalized Try using lower case for the import, function name and component and see what happens When the JSX is parsed, React uses the capitalization to tell the difference between an HTML tag and an instance of a React component<greeting /> would be interpreted as a normal HTML element with no special meaning, instead of your shiny new React component Otherwise, just like that, you've successfully imported and used your first custom-made component, congratulations Assignment\n1 It's time to create some new components Use the same project, but play around with it, try displaying something like your favorite food - While components normally get exported as defaults, try using some named exports instead of default exports If you're unsure how to do this, consult your best friend: [the MDN documentation about export statements](https://developer mozilla org/en-US/docs/web/javascript/reference/statements/export#description)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does a React element look like How would you create a functional component How do you export and then import a component Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Geeks for Geeks has a quick ReactJS Functional Components tutorial It introduces some new ways of calling functional components you can play around with if you feel a burning desire to do so For the time being don't worry too much about Class components, which the resource also goes into",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6561,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\react_components.md",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "38212a8bdd1006a32cc9d671babe3501",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\what_is_jsx.md",
    "source_type": "git_repo",
    "title": "Test title",
    "content": "Introduction\nYou're likely somewhat familiar with JSX from previous React lessons, in this lesson we're going to explain what it is, why we use it, and how to use it in your React apps Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What JSX is Differences between JSX and HTML What is JSX JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file It's not required to use JSX when writing React components, but it does make writing them more concise Essentially, JSX is syntactic sugar for the React createElement function This function creates a React element, which is a plain object, so JSX compiles down to plain JavaScript objects Here you can see the logged value of a div JSX element with some text:\nWhy do we use JSX Most of the time in apps, rendering logic and markup are inherently coupled, but we typically separate them by having our logic and markup in separate files JSX allows React to separate concerns by containing both rendering logic and content in the same place (a component) On top of this, it's a more intuitive, visual way to work with the UI inside your code, and allows React to show more useful error and warning messages Rules of JSX\nIf you were to take some valid HTML and copy it straight into your React component, it would not work This is due to some of the rules JSX implements, that aren't present in HTML Return a single root element If you wish to return multiple elements in a component, you can do so by wrapping them in a parent tag This can be a <div>, or, if you don't want the elements to have a container, you could use a React fragment, like so: <>Children</>\nCorrect:\njsx\nfunction App() {\n// Could replace <></> with <div></div>\nreturn (\n<>\n<h1>Example h1</h1>\n<h2>Example h2</h2>\n</>\n);\n}\nIncorrect:\njsx\nfunction App() {\nreturn (\n<h1>Example h1</h1>\n<h2>Example h2</h2>\n);\n}\nClose all tags In HTML, many tags are self-closing and self-wrapping In JSX however, we must explicitly close and wrap these tags",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7386,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\what_is_jsx.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4892a3cca0fd209f39bf365581ff8e16",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\what_is_jsx.md",
    "source_type": "git_repo",
    "title": "Test title",
    "content": "or, if you don't want the elements to have a container, you could use a React fragment, like so: <>Children</> Correct: jsx function App() { // Could replace <></> with <div></div> return ( <> <h1>Example h1</h1> <h2>Example h2</h2> </> ); } Incorrect: jsx function App() { return ( <h1>Example h1</h1> <h2>Example h2</h2> ); } Close all tags In HTML, many tags are self-closing and self-wrapping In JSX however, we must explicitly close and wrap these tags<input> would become <input />, and <li> would become <li></li>\nCorrect:\njsx\nfunction App() {\nreturn (\n<>\n<input />\n<li></li>\n</>\n);\n}\nIncorrect:\njsx\nfunction App() {\nreturn (\n<>\n<input>\n<li>\n</>\n);\n}\ncamelCase Most things JSX turns into JavaScript, and attributes of elements become keys of JavaScript objects, so you can't use dashes or reserved words such as class Because of this, many HTML attributes are written in camelCase Instead of stroke-width, you'd use strokeWidth, and instead of class you'd use className Correct:\njsx\nfunction App() {\nreturn (\n<div className=\"container\">\n<svg>\n<circle cx=\"25\" cy=\"75\" r=\"20\" stroke=\"green\" strokeWidth=\"2\" />\n</svg>\n</div>\n);\n}\nIncorrect:\njsx\nfunction App() {\nreturn (\n<div class=\"container\">\n<svg>\n<circle cx=\"25\" cy=\"75\" r=\"20\" stroke=\"green\" stroke-width=\"2\" />\n</svg>\n</div>\n);\n}\nConverting HTML to JSX\nNow that we've covered the Rules of JSX, we'll go through the conversion of a chunk of HTML to JSX ```jsx\nTest title\n```\nIf you try to return this from a React component, you would get many errors, so we are going to fix that Make sure to follow along with this example in your local environment Alternatively, you can go to react new to have a quick React environment up and going in your web browser The first issue we get is that this would not return a single root element, so let's give it a container ```jsx\nTest title\n```\nYou should see that another error appears now that we've fixed the initial one",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7386,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\what_is_jsx.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "08c45a7a6e73cf2c13712c10635f06c7",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\what_is_jsx.md",
    "source_type": "git_repo",
    "title": "Test title",
    "content": "are going to fix that Make sure to follow along with this example in your local environment Alternatively, you can go to react new to have a quick React environment up and going in your web browser The first issue we get is that this would not return a single root element, so let's give it a container ```jsx Test title ``` You should see that another error appears now that we've fixed the initial oneThis doesn't mean we created the error with our previous changes, just that React wasn't showing this one yet Now, onto the second issue, which is that we haven't closed the <input> tag ```jsx\nTest title\n```\nIf you are following along, at this point you will stop seeing an error being rendered on-screen, this time it will be in the console The last issue is that we haven't camelCased our attributes, and so are using invalid DOM properties for JSX, specifically the stroke-width ```jsx\nTest title\n```\nNow that we've applied all of the fixes to the errors that React gave us, this is fully fledged JSX code that can be used in a React component without any issues Assignment\nIn the following lessons, you will spend some time reading the React documentation Most of them will have small tasks at the end to test what you have read We will not       mention them explicitly each time, but be sure to do them Practice makes perfect 1 Read through the React docs [Writing Markup with JSX](https://react dev/learn/writing-markup-with-jsx) page to review the content we have covered here 1 Read through the React docs [JavaScript in JSX](https://react dev/learn/javascript-in-jsx-with-curly-braces) page to introduce yourself to writing JavaScript logic and referencing dynamic values inside of your markup Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is JSX Why do we use JSX What are the three rules of JSX How do you reference a dynamic value inside of your JSX Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7386,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\what_is_jsx.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "04ac83fe08beaf96e75501799413e07d",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
    "source_type": "git_repo",
    "title": "Animals:",
    "content": "Introduction\nNow that we have learned how JSX works and how to write it, this lesson will cover how we can render multiple elements and conditionally render UI in JSX Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Render a list of elements/components in JSX Conditionally render UI Rendering a list of elements in JSX\nLet us say we want to create a component that lists multiple animals:\njsx\nfunction App() {\nreturn (\n<div>\n<h1>Animals: </h1>\n<ul>\n<li>Lion</li>\n<li>Cow</li>\n<li>Snake</li>\n<li>Lizard</li>\n</ul>\n</div>\n);\n}\nIt is perfectly acceptable, but what if we want to render more than just four It can be tedious and long, and most of the time, we will be dealing with a data structure (like a list) rather than hard-coding each animal You have previously learned that we can embed expressions inside JSX with curly braces So let us do just that:\n```jsx\nfunction App() {\nconst animals = [\"Lion\", \"Cow\", \"Snake\", \"Lizard\"];\nreturn (\nAnimals:\n{animals map((animal) => {\nreturn {animal};\n})}\n);\n}\n```\nWe define an array called animals Now inside our JSX, we use map to return a new array of li elements, adding animal as its text It should now render the same as the previous snippet we wrote This is because JSX has the ability to automatically render arrays The following code is identical:\n```jsx\nfunction App() {\nconst animals = [\"Lion\", \"Cow\", \"Snake\", \"Lizard\"];\nconst animalsList = animals map((animal) => {animal})\nreturn (\nAnimals:\n{animalsList}\n);\n}\n```\nYou may be curious as to what the key is in our <li> element We will dive into how keys work in the next lesson But, to explain briefly, it is to let React know the identity of each element in the list React must know this information if you are dealing with a dynamic list where you add or remove elements Since we are only dealing with a static list, it does not matter for now Rendering a list of components in JSX\nWe will use `props` here, and you will learn more about them in a future lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "76854ddc1bef401caddbc6d820594265",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
    "source_type": "git_repo",
    "title": "Animals:",
    "content": "lesson But, to explain briefly, it is to let React know the identity of each element in the list React must know this information if you are dealing with a dynamic list where you add or remove elements Since we are only dealing with a static list, it does not matter for now Rendering a list of components in JSX We will use `props` here, and you will learn more about them in a future lessonFor now, you just need to know that `props` are just like function arguments that are passed into components, but to pass them we use a syntax similar to how we pass attributes to HTML elements As you can see in the following short implementation ```jsx\nfunction ListItem(props) {\nreturn {props animal}\n}\nfunction List(props) {\nreturn (\n{props animals map((animal) => {\nreturn ;\n})}\n);\n}\nfunction App() {\nconst animals = [\"Lion\", \"Cow\", \"Snake\", \"Lizard\"];\nreturn (\nAnimals:\n);\n}\n```\nWe have moved our <ul> element to a different component called <List /> It still returns the <ul> element, but we can do a lot more with it as a component This component accepts a props which is an object containing the animals that we defined as a property when we wrote <List animals={animals} /> Do note that you can name it anything, for example, <List animalList={animals} /> You will still need to pass the animals to the property, but now you will use props animalList instead of props animals We have also created a different component for the <li> element called <ListItem />, which also accepts props, and uses props animal to render the text It should now render the same thing #### \"Missing in props validation\"\nYou may notice squiggly lines under your props, for example, under `animal` inside the `` component above Hovering over these will tell you they are `missing in props validation` For now, this can safely be ignored as it is just a default ESLint rule warning about prop types, something that will be covered later in the course You may want to turn off this rule by adding the following to your `eslint config js` file:\n```javascript\nrules: {\n// Your other rules\n\"react/prop-types\": \"off\"\n}\n```\nConditionally rendering UI\nLet us make some decisions within our component What if we only want to render an animal that starts with the letter L",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "8ba68534241dd20406b11b4327cb959f",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
    "source_type": "git_repo",
    "title": "Animals:",
    "content": "as it is just a default ESLint rule warning about prop types, something that will be covered later in the course You may want to turn off this rule by adding the following to your `eslint config js` file: ```javascript rules: { // Your other rules \"react/prop-types\": \"off\" } ``` Conditionally rendering UI Let us make some decisions within our component What if we only want to render an animal that starts with the letter LTo make these decisions, we would use some sort of conditional expression Let us continue using the code above, but for brevity's sake, we will be removing the <ListItem /> component Using the ternary operator\nOne way to conditionally render an element is with a ternary operator, using a boolean value to decide what to render:\n```jsx\nfunction List(props) {\nreturn (\n{props animals map((animal) => {\nreturn animal startsWith(\"L\") {animal} : null;\n})}\n);\n}\nfunction App() {\nconst animals = [\"Lion\", \"Cow\", \"Snake\", \"Lizard\"];\nreturn (\nAnimals:\n);\n}\n```\nWe are using the String method startsWith to check if the animal starts with the letter L This method either returns true or false If the animal starts with the letter L, then we return the <li> element, which renders the particular animal Otherwise, we return null to indicate that no element will be rendered Using the && operator\nAnother quick way of conditionally rendering an element is by using the && operator ```jsx\nfunction List(props) {\nreturn (\n{props animals map((animal) => {\nreturn animal startsWith(\"L\") && {animal};\n})}\n);\n}\nfunction App() {\nconst animals = [\"Lion\", \"Cow\", \"Snake\", \"Lizard\"];\nreturn (\nAnimals:\n);\n}\n```\nWe will leverage the return value of startsWith with the && operator If the result of the startsWith function is true, then it returns the second operand, which is the <li> element, and renders it Otherwise, if the condition is false it just gets ignored #### Numbers with Logical AND (&&) - a common pitfall\nWhen using `&&` for conditional rendering, don't put numbers on the left side The React docs on [conditional rendering](https://react dev/learn/conditional-rendering#logical-and-operator-) provide more details about this in the `Pitfall` box in the section about `&&`",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "1336dc1b43e19fa21b89f09c8d8d493c",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
    "source_type": "git_repo",
    "title": "Animals:",
    "content": "the result of the startsWith function is true, then it returns the second operand, which is the <li> element, and renders it Otherwise, if the condition is false it just gets ignored #### Numbers with Logical AND (&&) - a common pitfall When using `&&` for conditional rendering, don't put numbers on the left side The React docs on [conditional rendering](https://react dev/learn/conditional-rendering#logical-and-operator-) provide more details about this in the `Pitfall` box in the section about `&&`Other ways to render conditionally\nWe can also use if, if/else, and switch to conditionally render something This time we will have two conditions:\nCheck if the animals property is provided\nCheck if the animals length is greater than 0\nWe will frequently be dealing with lists in the future, and we also need to consider what to render if the list is empty or does not exist at all You certainly would not want to see a blank page, would you Let us try to implement that:\n```jsx\nfunction List(props) {\nif ( props animals) {\nreturn Loading ;\n}\nif (props animals length === 0) {\nreturn There are no animals in the list ;\n}\nreturn (\n{props animals map((animal) => {\nreturn {animal};\n})}\n);\n}\nfunction App() {\nconst animals = [];\nreturn (\nAnimals:\n);\n}\n```\nIn our <List /> component, we have two if statements acting as a guard that immediately returns an element based on the condition One is to check if the property animals exists, and the other is to check if the length of the list is greater than 0 In this case, our list is empty, so the second if statement executes, which immediately returns the <div> element that contains the text \"There are no animals in the list\" If we remove the animals property:\n```jsx\nfunction App() {\nconst animals = [];\nreturn (\nAnimals:\n);\n}\n```\nThe first if statement will now execute and return a <div> with the text \"Loading \" This is often the case when you are fetching from an API, since it might take some time to actually retrieve the data, it is good practice to show an indicator for that If none of those checks passed, then we have the data we need to render the list successfully Try it out by adding items to the animals list and adding the property back",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a318bb349fdbe6e93525ed688499a917",
    "source_file": "corpus\\git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
    "source_type": "git_repo",
    "title": "Animals:",
    "content": "execute and return a <div> with the text \"Loading \" This is often the case when you are fetching from an API, since it might take some time to actually retrieve the data, it is good practice to show an indicator for that If none of those checks passed, then we have the data we need to render the list successfully Try it out by adding items to the animals list and adding the property backYou can, of course, also accomplish this with just the ternary and && operators ```jsx\nfunction List(props) {\nreturn (\n<>\n{ props animals (\nLoading ) : props animals length > 0 (\n{props animals map((animal) => {\nreturn {animal};\n})}\n) : (\nThere are no animals in the list )}\n</>\n);\n}\n// or\nfunction List(props) {\nreturn (\n<>\n{ props animals && Loading }\n{props animals && props animals length > 0 && (\n{props animals map((animal) => {\nreturn {animal};\n})}\n)}\n{props animals && props animals length === 0 && There are no animals in the list }\n</>\n);\n}\nfunction App() {\nconst animals = [];\nreturn (\nAnimals:\n);\n}\n```\nNested ternaries and multiple && operators can be intimidating to look at, so be sure to test things out Assignment\n1 The React documentation has an excellent guide to [conditional rendering](https://react dev/learn/conditional-rendering) Strengthen your understanding by reading through it and tackling all of the examples 1 From the same docs, explore more on what you can do with lists by working through the [Rendering Lists article](https://react dev/learn/rendering-lists) You don't have to worry about the last part on keys, since we will be learning about them in the next lesson Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you render a list of elements/components in JSX What are the ways you could render UI conditionally How would you conditionally return JSX Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\react\\getting_started_with_react\\rendering_techniques.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "fad9540d8fe91b627ea4ad0dc9f2d218",
    "source_file": "corpus\\git_repos\\odin-project\\react\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "Introduction\nHello there, and welcome to The Odin Project’s React course. In this course, we'll start by learning about the basics of React and then move on to more advanced concepts. We'll be building projects along the way that you can add to your portfolio to impress recruiters with your React skills.\nMake sure you’ve completed our JavaScript course before starting this one. We can’t emphasize enough how important it is to have a solid understanding of JavaScript before diving into React. At the end of the day, React is vanilla JavaScript, so being able to navigate JavaScript is paramount to building a successful React project.\nThe journey ahead\nAll the lessons follow a similar structure that you'll be accustomed to from prior courses: lesson content followed by assignments. We've also incorporated interactive examples via CodeSandbox to demonstrate the concepts you'll learn in those lessons.\nAs always, we'll preface this by saying that learning a new technology can be a frustrating endeavor, but we're confident you can persevere. There might be times when you think to yourself, “I can do this with vanilla JavaScript, why am I even learning React?” and that's fine. As you work through the lessons, you'll soon realize how convenient React can be in front-end development. Remember the dreaded Todo List project from the JavaScript course? In React, it would typically take less time to build the core functionality. That should get you excited. By the end of the course, you’ll be a React Guru!\nNow then,\nLet’s start Reactin’",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1754,
      "relative_path": "git_repos\\odin-project\\react\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "95b142876319cf3e264309d62587681b",
    "source_file": "corpus\\git_repos\\odin-project\\react\\introduction\\introduction_to_react.md",
    "source_type": "git_repo",
    "title": "introduction_to_react",
    "content": "Introduction\nThis lesson will provide you with information on what React is, its brief history, and why we're choosing to cover it in our curriculum Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand what React is What is React According to the React website, React is \"The library for web and native interfaces \" However, let's break this down a bit further Generally speaking, a JavaScript library is a collection of pre-written code that's designed to make development easier This code can be reused/reimplemented in our own codebases to achieve complex tasks A library should not be confused with a framework, even though the terms are often used interchangeably You'll read about differences between libraries and frameworks later on in the lesson React provides powerful primitives (built-in functions/modules) that allow us to build user interfaces of varying complexities Throughout this course, we'll learn all about the functionality React provides and learn to build cool applications Why cover React React is one of the most powerful, widely used JavaScript libraries The landscape for frontend frameworks has been changing a lot over the last few years, so it's understandable to be worried about choosing the \"wrong\" one This article on the lifecycle of JavaScript frameworks shows the recent development of frontend frameworks well Once you start diving deeper into a framework, you'll begin to love it It makes your code easily scalable, more readable, and possibly a thousand times more efficient (in our modest estimation) To name a few reasons to learn React:\nComponents are reusable It's well-supported due to its popularity and large community It's not opinionated, which means it won't force you to follow any specific design patterns, project organizational structure, or logic It's all up to you There's a smaller learning curve, especially if you already have a good grasp of JavaScript, HTML, and CSS from our previous lessons Assignment\n1 If you haven't already, browse through the [React Website](https://react dev/) Don't go too in-depth or dive into documentation, but do read the introduction/homepage to get an idea of how React works 1 Glance at this article which outlines [the history of React](https://blog risingstack com/the-history-of-react-js-on-a-timeline/) 1 Read this [FreeCodeCamp article discussing the differences between a JavaScript library and a framework](https://www freecodecamp org/news/the-difference-between-a-framework-and-a-library-bd133054023f/) 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3713,
      "relative_path": "git_repos\\odin-project\\react\\introduction\\introduction_to_react.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cd8f121248f9949ae06de7db26d310f9",
    "source_file": "corpus\\git_repos\\odin-project\\react\\introduction\\introduction_to_react.md",
    "source_type": "git_repo",
    "title": "introduction_to_react",
    "content": "a good grasp of JavaScript, HTML, and CSS from our previous lessons Assignment 1 If you haven't already, browse through the [React Website](https://react dev/) Don't go too in-depth or dive into documentation, but do read the introduction/homepage to get an idea of how React works 1 Glance at this article which outlines [the history of React](https://blog risingstack com/the-history-of-react-js-on-a-timeline/) 1 Read this [FreeCodeCamp article discussing the differences between a JavaScript library and a framework](https://www freecodecamp org/news/the-difference-between-a-framework-and-a-library-bd133054023f/) 1Lastly, skim this article which explains the [main advantages of using React](https://www geeksforgeeks org/what-are-the-advantages-of-react-js/) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the purpose of React What are the benefits of using React Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental If you are interested in learning more about React's history, check out this documentary on React's origin story by Honeypot",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3713,
      "relative_path": "git_repos\\odin-project\\react\\introduction\\introduction_to_react.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8178097715ee69f0af7af609f671724e",
    "source_file": "corpus\\git_repos\\odin-project\\react\\introduction\\setting_up_a_react_environment.md",
    "source_type": "git_repo",
    "title": "setting_up_a_react_environment",
    "content": "Introduction\nYou know what React is and you might even have an idea of where to use it Now, it's time to start figuring out how This lesson is going to cover starting a new React project on your machine, as well as some useful tools to help you along the way We'll also explain some of the problems that may arise (and how to avoid them) Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How React projects can be created How to use Vite to create new React projects How to format the code in React projects What React Developer Tools are Many paths\nThere are multiple ways to start using React in your projects, from attaching a set of <script> tags which serve React from a CDN, to robust toolchains and frameworks that are highly configurable and allow for increased scalability and optimization Some examples of these toolchains include:\nVite's React Config\nGatsby\nNextJS\nCreate React App (Deprecated)\nWhy do we need these toolchains Can't we just make our own as we see fit Yes, but it's hard React is a complex beast and there are many moving parts Before you can start writing any sort of code that provides functionality, you would need to configure at least the following:\nPackage Management (NPM, Yarn)\nModule bundling (Webpack, Parcel)\nCompilation (Babel)\nReact itself\nAll of this, and sometimes much more, is required to get a React project and development environment up and running #### A note on Create React App\nCreate React App, or CRA, was the official way to scaffold new React projects since its introduction in 2016 Unfortunately, owing to many reasons, [CRA was deprecated in early 2023](https://github com/reactjs/react dev/pull/5487#issuecomment-1409720741) Due to CRA's popularity, you'll see it mentioned in many tutorials and guides However, it's no longer recommended to use it for new projects Simplifying the process\nNow that you understand what is involved with starting a React project from scratch, you can breathe a sigh of relief to learn that we can get started with a single terminal command Vite builds frontend tools for developers and it leverages the latest technologies under the hood to provide a great developer experience Fortunately, it also caters to the React ecosystem We will use Vite's CLI to quickly create a template React project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9028,
      "relative_path": "git_repos\\odin-project\\react\\introduction\\setting_up_a_react_environment.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "519eaf58205fa3807ac58499e1bca973",
    "source_file": "corpus\\git_repos\\odin-project\\react\\introduction\\setting_up_a_react_environment.md",
    "source_type": "git_repo",
    "title": "setting_up_a_react_environment",
    "content": "the process Now that you understand what is involved with starting a React project from scratch, you can breathe a sigh of relief to learn that we can get started with a single terminal command Vite builds frontend tools for developers and it leverages the latest technologies under the hood to provide a great developer experience Fortunately, it also caters to the React ecosystem We will use Vite's CLI to quickly create a template React projectIt requires minimal configuration and provides extremely useful tools right out of the box, allowing us to get straight to the learning Let's get started Creating a React app\nPlease make sure that you are using the latest LTS version of Node, otherwise errors may occur Open up the terminal and the folder containing your projects Then enter the following command (you can replace my-first-react-app with any name you want):\nbash\nnpm create vite@latest my-first-react-app -- --template react\nIf you see the following output, enter y and then press enter:\nbash\nNeed to install the following packages:\ncreate-vite@5 X X\nOk to proceed (y)\nOnce the command has executed, it should output the next steps for you to follow:\nbash\ncd my-first-react-app\nnpm install\nnpm run dev\nProvided everything has gone according to plan, head over to localhost:5173, where you'll be greeted with the following page:\nCongratulations You've created your first React app To link your local project directory to a GitHub repo, create a new empty repo on GitHub then follow the instructions in the new repo's page to connect it to your local project directory #### Using an existing repo\nAlternatively, if you created a GitHub repo already and cloned it, you can `cd` into your cloned repo then run the above Vite command, using ` ` as the project name:\n```bash\nnpm create vite@latest -- --template react\n```\nThis will tell Vite to use the current directory for the project, instead of creating a new directory with the given project name This cloned directory will already be initialized as a git repo and connected to the right remote Delving deeper\nLet's take a closer look at our new project Inside, you will find some folders, as well as package json, package-lock json, gitignore, and README md files The README md contains some useful information that you should take the time to skim through now The public folder is where all of the static assets related to your app will go",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9028,
      "relative_path": "git_repos\\odin-project\\react\\introduction\\setting_up_a_react_environment.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "026baf89036dae1cafa3817f7fbacea9",
    "source_file": "corpus\\git_repos\\odin-project\\react\\introduction\\setting_up_a_react_environment.md",
    "source_type": "git_repo",
    "title": "setting_up_a_react_environment",
    "content": "will already be initialized as a git repo and connected to the right remote Delving deeper Let's take a closer look at our new project Inside, you will find some folders, as well as package json, package-lock json, gitignore, and README md files The README md contains some useful information that you should take the time to skim through now The public folder is where all of the static assets related to your app will goThis could include images, icons, and information files for the browser Inside the src folder is where you will find the code that runs your app The main jsx file here serves as the entry point of the application Let's open the main jsx file and see if we can understand what's going on:\n```jsx\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \" /App jsx\";\nimport \" /index css\";\ncreateRoot(document getElementById(\"root\")) render(\n,\n);\n```\nWhoa There's quite a lot here You are not expected to recognize much of this (if any) right now Here's a brief rundown of what is happening:\nWe import StrictMode and createRoot from the react and react-dom packages respectively We import the App component from App jsx, so that we may place (render) it within the DOM We import some CSS styling (you may recognize this syntax from the Webpack material) We create a root object by invoking createRoot with an element from our index html We invoke the render method, which is attached to our root object, with some very interesting-looking syntax inside the parentheses All of this may understandably look unlike anything you've seen up until now, but have no fear, once you've spent the time with this course, you'll know exactly what all of this does, and much more Developer tools\nAs you progress with React, your projects will undoubtedly become larger and larger and include more and more components, with increasing levels of functionality When this happens, it's useful to be able to track (and make live changes to) the moving parts inside of your app for understanding and debugging your code To this end, we can use a Chrome extension called React Developer Tools We recommend installing this and becoming comfortable using it as early as possible as it's an invaluable tool for effective React development Assignment\n1 Review this material by reading through [Vite's Getting Started Page](https://vitejs dev/guide/) 1 Check out this [guide for React Developer Tools](https://www",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9028,
      "relative_path": "git_repos\\odin-project\\react\\introduction\\setting_up_a_react_environment.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "140d3dd9012163fd014e2f71452a3d51",
    "source_file": "corpus\\git_repos\\odin-project\\react\\introduction\\setting_up_a_react_environment.md",
    "source_type": "git_repo",
    "title": "setting_up_a_react_environment",
    "content": "track (and make live changes to) the moving parts inside of your app for understanding and debugging your code To this end, we can use a Chrome extension called React Developer Tools We recommend installing this and becoming comfortable using it as early as possible as it's an invaluable tool for effective React development Assignment 1 Review this material by reading through [Vite's Getting Started Page](https://vitejs dev/guide/) 1 Check out this [guide for React Developer Tools](https://wwwdebugbear com/blog/react-devtools) to begin learning how to use it (don't worry if you don't understand some of the details yet) 1 Try to clean up your `my-first-react-app` project so that it no longer displays the default page See if you can get it to display a \"Hello, World \" message instead Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are some of the ways we can start a new React project Why should we initially be using pre-made toolchains instead of making our own What is Vite and why would we use it What command can we run to scaffold a new React project using Vite What is in the public folder What is in the src folder Why are the React Developer Tools useful Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Intro to React Dev Tools gets you up to speed with a quick overview of the basic features of React Dev tools in Chrome",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9028,
      "relative_path": "git_repos\\odin-project\\react\\introduction\\setting_up_a_react_environment.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "17ffc4ae604941437c0355a4a384c7fc",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\reducing_state.md",
    "source_type": "git_repo",
    "title": "reducing_state",
    "content": "Introduction\nYou have probably heard about reducers before In this lesson we are going to\nlearn what they are, when to use them and how to use them in React with the useReducer hook Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What are reducers When to use reducers What is the useReducer hook What are reducers Reducers are pure functions that take a previous state and an action to return a new state The action is an object with a type property describing what the user did This object can also contain\nany other properties that our reducer might need to produce the new state We can define a reducer that updates the state of a counter like this:\njavascript\nfunction reducer(state, action) {\nswitch (action type) {\ncase \"incremented_count\": {\nreturn { count: state count + 1 };\n}\ncase \"decremented_count\": {\nreturn { count: state count - 1 };\n}\ncase \"set_count\": {\nreturn { count: action value };\n}\ndefault: {\nthrow new Error(\"unknown action: \" + action type);\n}\n}\n}\nRemember, reducers are pure functions so we shouldn't mutate the state When to use reducers If a component only needs to update its state in a couple of simple ways, you don't need to use reducers The opposite can be said when a component has become too big, hard to read or debug because of its state logic By using reducers, we can separate the state logic and even store it in a different file or directory, leading\nto smaller components that are easier to read Since reducers use actions, we can easily track any state-related bugs back to the dispatched action,\nand because our reducers are just pure functions, we can test them in isolation The useReducer hook\nReact allows us to use reducers in our components through a hook called useReducer This hook takes a reducer function and\nan initial state as arguments, then returns an array with two values: the current state and a dispatch function This dispatch function receives an action object as argument, which is passed to our reducer function and\nthe returned value from it is used to update the state ```javascript\nconst [state, dispatch] = useReducer(reducer, { count: 0 });\nfunction handleClick() {\ndispatch({ type: \"incremented_count\" });\n}\n```\nSimilarly to the set function in useState, React only updates the state in the next render after calling the dispatch function Keep in mind that these functions use Object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4506,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\reducing_state.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5c3e7d2ca669988672c07d1ace95c6fd",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\reducing_state.md",
    "source_type": "git_repo",
    "title": "reducing_state",
    "content": "This dispatch function receives an action object as argument, which is passed to our reducer function and the returned value from it is used to update the state ```javascript const [state, dispatch] = useReducer(reducer, { count: 0 }); function handleClick() { dispatch({ type: \"incremented_count\" }); } ``` Similarly to the set function in useState, React only updates the state in the next render after calling the dispatch function Keep in mind that these functions use Objectis() to determine if the state has changed, if it hasn't, then the component won't re-render Whether you use useState or useReducer is up to you, they're both equivalent and you might use them both in the same component Assignment\n1 Read through the React docs [Extracting state logic into a reducer](https://react dev/learn/extracting-state-logic-into-a-reducer) to learn more about how to use reducers in React and how to refactor `useState` into `useReducer` Don't forget to complete the challenges at the end 1 Read the [useReducer](https://react dev/reference/react/useReducer) React docs to learn more about this hook Pay close attention to the troubleshooting section for common problems that you might encounter Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are reducers How would you declare a reducer What does the dispatch function do What steps can you follow to migrate from useState to useReducer Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Web Dev Simplified's Learn useReducer In 20 Minutes video explains the useReducer hook with an excellent example",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4506,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\reducing_state.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5dcbafb7b9ee64974e977dfc1e99397d",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
    "source_type": "git_repo",
    "title": "managing_state_with_context_api",
    "content": "Introduction\nThroughout the lessons, we've learned how to manage state, and pass data and props between components However, as our application grows in size, not only will this process of managing states and passing data around become repetitive and inconvenient, but it will also be hard to manage In the React Router lesson, we mentioned how we could use outlet context to pass data from a parent component through an <Outlet /> to a child component This lesson will cover how we can use the Context API to do similar things outside of outlet scenarios Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Using the Context API to pass state and data deep into React components Real-world application of the Context API Drawbacks of using the Context API Why do we need Context API\nThe Context API in React is a feature that allows you to manage the global state of your application without the need to pass data through multiple levels of components using props It provides a way to share data and functionality across different components, regardless of where they are located in the component tree To give a more concrete example, let's go back to a project that we've already built previously In the Shopping Cart project, you might have a Product Detail Page that might or might not look like this very awesome shop:\nYou have a counter in the header that displays the number of items currently in the cart You can add items to the cart through the \"Add to Cart\" button For the examples below, we will omit the routing that we did in the project and other components that are not necessary for our examples We will just look at the code relevant to this lesson As we already know, if we want the state to persist and be shared between components, what we want to do is to Lift the state up to a common ancestor/parent Our application code might look like this:\n```jsx\nimport { useState } from \"react\";\n// other imports for Header and ProductDetail\nexport default function App() {\nconst [cartItems, setCartItems] = useState([\n/ List of Items in Cart /\n]);\nconst products = / some custom hook that fetches products and returns the fetched products /\nconst addToCart = () => {\n// add to cart logic (this adds to cartItems)\n};\nreturn (\n<>\n</>\n);\n}\n```\nLet's focus on the Header and ProductDetail components",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15310,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "09d29ce9fd080c29740c8094bf0d336d",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
    "source_type": "git_repo",
    "title": "managing_state_with_context_api",
    "content": "useState } from \"react\"; // other imports for Header and ProductDetail export default function App() { const [cartItems, setCartItems] = useState([ / List of Items in Cart / ]); const products = / some custom hook that fetches products and returns the fetched products / const addToCart = () => { // add to cart logic (this adds to cartItems) }; return ( <> </> ); } ``` Let's focus on the Header and ProductDetail componentsOur Header might look like this:\n```jsx\n// import for Link\nfunction Links({ cartItemsCount }) {\nreturn (\n{/ Links /}\nCart\n{cartItemsCount}\n);\n}\nexport default function Header({ cartItemsCount }) {\nreturn (\n{/ Other header elements /}\n);\n}\n```\nOur ProductDetail component:\n```jsx\nexport default function ProductDetail({ products, addToCart }) {\nconst product = products find(/ Logic to find the specific product /);\nreturn (\n{/ Image of the product /}\n{/ elements that align with the design /}\naddToCart(product)}>\nAdd to Cart\n);\n}\n```\nGreat This is a very common pattern, we pass data/functions between components, nothing too complicated But there's a lot to micro-manage, a lot of components that you need to pass props to, and there's even a little bit of prop drilling that's happening, where the cartItemsCount is passed from App -> Header -> Links So far, what we've done in the App component is:\nPass products and addToCart down to the ProductDetail component\nPass cartItemsCount down to the Header component and the Links component that is part of the Header\nThis is a very basic application, but imagine the application grows in size as more features are added, say in the Product Detail Page There will be a lot more components to nest, and potentially more nested props What if we have a Cart component and a ProductListing component What if we added more functionalities other than just addToCart It can get repetitive and complex because, as we all know, more features equal more complexities This is especially frequent in component-based frameworks since we're more inclined to create separate reusable components instead of inlining elements, which in turn creates more nesting and passing of props Implementing Context API\nTo simplify our application and reduce complexity, we can implement the Context API There are three key elements in this API that we need to understand:\ncreateContext - This \"creates the context\" Duh",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15310,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "ca9c2f583609069ba1851ab48e20a433",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
    "source_type": "git_repo",
    "title": "managing_state_with_context_api",
    "content": "because, as we all know, more features equal more complexities This is especially frequent in component-based frameworks since we're more inclined to create separate reusable components instead of inlining elements, which in turn creates more nesting and passing of props Implementing Context API To simplify our application and reduce complexity, we can implement the Context API There are three key elements in this API that we need to understand: createContext - This \"creates the context\" DuhBut yes, it's how we can create the context It takes in any value, be it a number, string, or object, which can be referred to as the default value of the context, and returns a context object that can be used to pass down data to components\nuseContext - This hook is used to consume data from a context object created by createContext We can use this hook inside our component to retrieve the data that we need This hook accepts the context object as an argument\nContextObject Provider - The context object comes with the Provider component that accepts a prop called value, which is the context value that's going to be passed down to the components no matter how deeply they're nested In other words, a way to \"provide\" the context value to these components\nWe can start by using the createContext function that can be imported from the react module javascript\nimport { createContext } from \"react\";\nAs we have described earlier, when you create a new context using createContext, you can specify an initial value for the context This is known as the default value of the context The default value can be any type of value - a string, number, boolean, or even an object or array Do note that this default value does not change, it's static In our case, we will be using an object that contains the following shape:\njavascript\nconst ShopContext = createContext({\nproducts: [],\ncartItems: [],\naddToCart: () => {},\n});\nIn this example, our default value is an object with three properties - products, cartItems, and addToCart products and cartItems are arrays that will hold the products and items in the user's cart, respectively addToCart is a function that will allow us to add items to the cart This object that we've defined is not necessary",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15310,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "692c6216b89118ad0098b9c08ce94c00",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
    "source_type": "git_repo",
    "title": "managing_state_with_context_api",
    "content": "object that contains the following shape: javascript const ShopContext = createContext({ products: [], cartItems: [], addToCart: () => {}, }); In this example, our default value is an object with three properties - products, cartItems, and addToCart products and cartItems are arrays that will hold the products and items in the user's cart, respectively addToCart is a function that will allow us to add items to the cart This object that we've defined is not necessaryWe can of course do this as well and it will not be a problem at all:\njavascript\nconst ShopContext = createContext(null);\nHowever, the reason why we're adding the object, is so that even if we somehow use the context inside a component that is not nested inside a Provider, because we have set a default value, our application will not break (This is also good for testing since we don't need to wrap a component in a Provider to get a value) and also take advantage of IDE features like auto-completion when we have an object as the value When we use this context in our components, we will be able to access the properties directly from the context It's basically a bonus It's up to you if you want to set the default value to the object or just null because we're going to overwrite this default value anyway So how do we use this context And that is by using the Provider component of the Context object and nesting the children components inside it In this example, we will remove the props altogether ```jsx\nimport { useState, createContext } from \"react\";\n// other imports for Header and ProductDetail\nexport const ShopContext = createContext({\nproducts: [],\ncartItems: [],\naddToCart: () => {},\n});\nexport default function App() {\nconst [cartItems, setCartItems] = useState([\n/ List of Items in Cart /\n]);\nconst products = / some custom hook that fetches products and returns the fetched products /\nconst addToCart = () => {\n// add to cart logic (this adds to cartItems)\n};\nreturn (\n/ We are going to pass the things that we want to inject to these components using the value prop /\n/ This value prop will overwrite the default value /\n);\n}\n```\nGreat Now let's try to look at our Header component again, we will also remove all the props that we've defined earlier, and to retrieve the data, we'll be using the useContext hook that can be imported in the react module",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15310,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "8c55109fddb0b4431a353ec51ee37632",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
    "source_type": "git_repo",
    "title": "managing_state_with_context_api",
    "content": "( / We are going to pass the things that we want to inject to these components using the value prop / / This value prop will overwrite the default value / ); } ``` Great Now let's try to look at our Header component again, we will also remove all the props that we've defined earlier, and to retrieve the data, we'll be using the useContext hook that can be imported in the react module```jsx\nimport { useContext } from \"react\";\n// import for ShopContext\n// import for Link\nfunction Links() {\nconst { cartItems } = useContext(ShopContext); // We must pass the ShopContext object itself as an argument\nreturn (\n{/ Other links /}\nCart\n{cartItems length}\n);\n}\nexport default function Header() {\nreturn (\n{/ Other header elements /}\n);\n}\n```\nWe've completely removed the prop drill problem, and we can conveniently get the cartItems directly in the Links component itself as we already know that no matter how deeply nested the component is, we can still get the data as long as it's nested inside the Provider Let's also change our ProductDetail component to do the same:\n```jsx\nimport { useContext } from \"react\";\n// import for ShopContext\nexport default function ProductDetail() {\nconst { products, addToCart } = useContext(ShopContext);\nconst product = products find(/ Logic to find the specific product /);\nreturn (\n{/ Image of the product /}\n{/ elements that align with the design /}\naddToCart(product)}>\nAdd to Cart\n);\n}\n```\nIn the Header component, we used useContext() to access cartItems from the ShopContext Similarly, in the ProductDetail component, we can use the products and addToCart function With this implementation, we no longer need to pass down props from the App component to the Header and ProductDetail components The Header and ProductDetail components can access the cartItems state and addToCart function from the ShopContext Overall, the implementation of the Context API has allowed for a more efficient, cleaner, and streamlined way of passing down data across multiple components By using the createContext() function and the useContext() hook, we can easily pass down state and functions to child components without the need for prop drilling It's also more centralized since we're keeping our data in a single location All of these make our code easier to reason about",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15310,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "5e15b43288e46011727b293630e578bf",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
    "source_type": "git_repo",
    "title": "managing_state_with_context_api",
    "content": "from the ShopContext Overall, the implementation of the Context API has allowed for a more efficient, cleaner, and streamlined way of passing down data across multiple components By using the createContext() function and the useContext() hook, we can easily pass down state and functions to child components without the need for prop drilling It's also more centralized since we're keeping our data in a single location All of these make our code easier to reason aboutDrawbacks of using Context API\nAlthough the Context API can be a powerful tool for managing state in larger React applications, it also has some drawbacks that you should be aware of:\nIt can lead to performance issues: When you update the state in a context, it can cause all components that are consuming that context to re-render, even if the state that they are using hasn't changed This can lead to performance issues, especially if you have a lot of components that are consuming the same context It can make your code harder to follow: With the Context API, it's easier to access the state from any component in your application However, this can also make your code harder to follow, especially if you have a lot of nested components that are consuming the same context It's important to keep your code organized and well-structured to avoid confusion Potential solutions\nUse multiple smaller contexts instead of a single large context Instead of using a single large context to manage all of your application states, consider using multiple smaller contexts to manage related pieces of state This can help to reduce the number of components that are consuming the context and minimize unnecessary re-renders Sometimes Context API might not even be the best solution for the problems that we want to deal with Take a look at React Component Composition article by Robin Wieruch You can rely on external state management systems like Zustand and Redux They have a lot of optimizations built-in and are feature rich Unfortunately, they do have a learning curve, and we recommend sticking to the Context API for the rest of this course as it's still reliable for majority of the projects we're going to build Assignment\n1 The React Docs provides more engaging examples and possible optimizations for the Context API You can check it out by going through their [documentation for useContext](https://react dev/reference/react/useContext) Be sure to try out each example 1 Read the short article [Prop Drilling](https://kentcdodds com/blog/prop-drilling) by Kent C Dodds",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15310,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "0af04f76ac9a7a32b29f147466609a4f",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
    "source_type": "git_repo",
    "title": "managing_state_with_context_api",
    "content": "curve, and we recommend sticking to the Context API for the rest of this course as it's still reliable for majority of the projects we're going to build Assignment 1 The React Docs provides more engaging examples and possible optimizations for the Context API You can check it out by going through their [documentation for useContext](https://react dev/reference/react/useContext) Be sure to try out each example 1 Read the short article [Prop Drilling](https://kentcdodds com/blog/prop-drilling) by Kent C DoddsThis is a great article to get more understanding for prop drilling, it features digestible examples Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the benefits of using the Context API over passing props down through multiple levels of components What are the drawbacks in using the Context API What are the ways you can avoid prop drilling Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental For some extra practice/review, check out the React docs lesson on passing data with Context",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15310,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\managing_state_with_context_api.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "3fd7243bad5fe4a562d1d26aae0b92f6",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_and_the_backend\\project_messaging_app.md",
    "source_type": "git_repo",
    "title": "project_messaging_app",
    "content": "Introduction\nThink of your favorite messaging app - Discord, Telegram, WhatsApp, Facebook Messenger, AOL Instant Messenger, etc. - and imagine what it would be like if you could build your own. This project will give you a chance to do just that. You'll be building a web app that allows users to send messages to each other.\nAssignment\n1. Keep in mind that the apps we mentioned earlier have entire teams of developers working on them, so you shouldn't feel the need to go overboard with features in your app. At a minimum, though, your app should include the following core functionality:\n1. Authorization\n1. Sending messages to another user\n1. Customizing a user profile\n1. Spend some time planning out your app. What will the user interface look like? What will the data model look like? What libraries will you need to use?\n1. Start building your app by implementing the core functionality in your backend and frontend.\n1. You may have realized that a REST API backend cannot handle real time updates. It is \"request-response\", so the server can only respond to a request. If a user sends a message to another user, a REST API cannot automatically notify the recipient as the recipient will not have requested that data. Methods for real time server-client updates (particularly when dealing with a split front/backend) have not been taught, so you are not expected to implement any in this app.\n1. Deploy your app to the web and showcase it in the submissions below as well as on our Discord. We'd love to see what you've built!\n#### Extra credit\n- Allow sending images in chat\n- Add a friends list that users can add other users to and see when someone is online (alternative: \"Add a users list to show which users are currently online\"; same thing except maybe a step or two less since it doesn't require adding a friend)\n- Allow users to create and send messages in group chats",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1994,
      "relative_path": "git_repos\\odin-project\\react\\react_and_the_backend\\project_messaging_app.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d8347f26863722dbc9b1d8d1e51d6c7a",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_and_the_backend\\project_wheres_waldo_a_photo_tagging_app.md",
    "source_type": "git_repo",
    "title": "project_wheres_waldo_a_photo_tagging_app",
    "content": "Introduction\nThis project will finally give you a chance to tie together everything you've learned so far It's a project with a lot of complexity so take it one step at a time Working with a backend is pretty straightforward, but you'll be juggling some of the front end functionality too This is entirely within the realm of the kind of thing you might be asked to build on the job (though of course not exactly) Are you ready Have you ever played Where's Waldo If not, that's okay Let us break it down: you are presented with a busy and crowded illustration that contains many different people, objects, and places Your task is to find a particular character named Waldo, who is hidden somewhere in the illustration Your task\nBuild an app that, when it's finished, will feel very similar to a photo tagging app You'll start with a large photograph containing several elements the user is meant to find, e g Waldo, The Wizard, Wilma etc You can even name your own if you'd like to use custom pictures The user will make selections for each character and they will be given feedback on whether they are correct or not To start with, you'll need to choose a photo and identify where exactly each person is using its pixel position and save that to your database When the user clicks the photo, it should place a targeting box around the portion of the photo the user has clicked That box should contain a list of possible characters When the user selects one of these characters, you should check with your backend to see if that character is actually within the targeting box Provide the user with appropriate feedback (e g if wrong, an error message) If correct, place a marker on the photo in the character's location In either case, remove the targeting box until the user clicks again Keep track of how long it takes from when the photo is first loaded to when the user finally identifies all of the characters It is advisable to do this on the server side, otherwise the user could hack their score (but you should know this by now) Once a round is complete, ask the user for their name and record that time This will get a bit tricky since you'll have anonymous users you need to keep track of Assignment\n1 Think about what you'll need to do to get this all working together This is where it's really helpful to think it completely through on paper or a whiteboard ahead of time A few minutes of thought can save you from wasting an hour on coding 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4178,
      "relative_path": "git_repos\\odin-project\\react\\react_and_the_backend\\project_wheres_waldo_a_photo_tagging_app.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9d3736bf50d8f549d49b6b13471ba52c",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_and_the_backend\\project_wheres_waldo_a_photo_tagging_app.md",
    "source_type": "git_repo",
    "title": "project_wheres_waldo_a_photo_tagging_app",
    "content": "ask the user for their name and record that time This will get a bit tricky since you'll have anonymous users you need to keep track of Assignment 1 Think about what you'll need to do to get this all working together This is where it's really helpful to think it completely through on paper or a whiteboard ahead of time A few minutes of thought can save you from wasting an hour on coding 1Build the front end functionality without actually using any calls to the back end yet Specifically, create the functionality that pops the targeting box and dropdown menu on the screen when the user clicks on the photo and removes it when the user clicks away 1 Now hook up the functionality for validating with your backend whether or not the user has clicked the right place for the character they selected from the dropdown **Note:** Depending on how you are getting the coordinates of a user's clicks, different screen sizes may produce different coordinates This could cause your app to record coordinates properly on a large screensize, but not smaller ones Knowing this, you may need to implement methods to your click logic that will normalize coordinates across different screensizes 1 Tie it into your frontend so you can seamlessly select characters, validate them, and place the appropriate markers on the map if the selection was correct 1 Add in the ability to time the user from when they first load the page and then display their \"score\" (time) when they successfully identify all characters Create a popup that asks them to enter their name for the high scores table if they have earned it 1 Play with it 1 Push your solution to GitHub and deploy it to any of the hosting options Additionally, submit your solutions below This is a serious project, congratulations Extra credit\nLoad many images into your database and allow the user to select from among them before starting the game",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4178,
      "relative_path": "git_repos\\odin-project\\react\\react_and_the_backend\\project_wheres_waldo_a_photo_tagging_app.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aec6ba394c14df1ff6bfa0a93276cd2f",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_and_the_backend\\using_ruby_on_rails_for_your_backend.md",
    "source_type": "git_repo",
    "title": "using_ruby_on_rails_for_your_backend",
    "content": "Introduction\nSo, you've now learned a lot of juicy JavaScript, enabling you to make various components of your HTML/CSS page react to user actions and/or input That's great As you've seen, you can get your apps to do a lot of pretty cool things already, just using client-side JavaScript You may have noticed, though, that there is still an important piece of the puzzle missing: unless you use Local Storage, your app 'forgets' the user's preferences, as well as any other changes made, as soon as the page gets reloaded While Local Storage is great, it's not ideal: it only stores data on the computer from which the user is accessing the page This approach does not allow for the app to 'remember' anything when the same user tries to access it again from a different device For that, you're going to need a real backend Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand the various ways to use React in our Rails application Explain how to pass data from your Rails application to React Learn how to integrate React with Rails and handle the CSRF token Building your own backend with Ruby on Rails\nSince you've already learned Ruby on Rails in our full-stack Ruby on Rails path, the next step is obvious: you get to build your own backend with Rails In preparation, reread the Rails lesson on building an API to refresh how to set up a Rails backend that can handle JSON requests Are you done Good Next, it's time to practice allowing your front end JavaScript to talk to your Rails backend using AJAX (asynchronous HTTP requests to a web server using JavaScript without requiring a full page reload) We'll cover some best practices for how to pass data from one to another and different ways to integrate React with Rails, but otherwise it's up to you: you've got everything you need to put together those final pieces of the web development puzzle Assignment\n1 Read thoughtbot's article on [\"How to integrate React with Rails 7\"](https://thoughtbot com/blog/how-to-integrate-react-rails) to get an overview of different possibilities 3 Follow the tutorial in [\"How to Build a fullstack Rails 7 backend with React Frontend\"](https://www digitalocean com/community/tutorials/how-to-set-up-a-ruby-on-rails-v7-project-with-a-react-frontend-on-ubuntu-20-04)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4194,
      "relative_path": "git_repos\\odin-project\\react\\react_and_the_backend\\using_ruby_on_rails_for_your_backend.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e5fd66cab88e2a31eb224b6773cf9d36",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_and_the_backend\\using_ruby_on_rails_for_your_backend.md",
    "source_type": "git_repo",
    "title": "using_ruby_on_rails_for_your_backend",
    "content": "to pass data from one to another and different ways to integrate React with Rails, but otherwise it's up to you: you've got everything you need to put together those final pieces of the web development puzzle Assignment 1 Read thoughtbot's article on [\"How to integrate React with Rails 7\"](https://thoughtbot com/blog/how-to-integrate-react-rails) to get an overview of different possibilities 3 Follow the tutorial in [\"How to Build a fullstack Rails 7 backend with React Frontend\"](https://www digitalocean com/community/tutorials/how-to-set-up-a-ruby-on-rails-v7-project-with-a-react-frontend-on-ubuntu-20-04)It demonstrates how to integrate React with Rails via esbuild, retrieve data from the API layer through an AJAX request using the Fetch API (remember what you learned in the JavaScript lesson [\"Working with APIs\"](https://www theodinproject com/lessons/javascript-working-with-apis)), and handle the CSRF token in non-GET requests Additional resources\nThis section contains helpful links to other content It isn't required, so consider it supplemental Broaden your knowledge about AJAX requests by skimming this article from RailsGuides\nGrabbing your Rails form CSRF token with JavaScript so Rails doesn't yell at you with \"Warning, can't verify CSRF token authenticity\", via SO and another SO post on the CSRF token\nKnowledge check\nWhat possibilities exist to connect a React frontend with a Rails backend How do you integrate React with Rails using esbuild",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4194,
      "relative_path": "git_repos\\odin-project\\react\\react_and_the_backend\\using_ruby_on_rails_for_your_backend.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fc4b42a1e5ce0ff0bf0925ae644f229d",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "Introduction\nHow can we do DOM manipulations that we usually do in vanilla JavaScript Is it even possible in React because of its declarative nature How about performance optimization As we all know, when a state has been changed, React will try to re-render the component, which means that it will destroy all local variables not controlled by React and re-execute them This mental model also works for a regular function that you create, as a component is just a function Since this is the case, wouldn't it slow down the app if we have a very expensive calculation re-executed with each re-render Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explore useRef hook and its use cases Explain memoization and how useCallback and useMemo can be used The useRef hook\nThe useRef hook lets you manage a value that's not needed for rendering They are an alternative to state, as when you want a component to “remember” some information, but you don't want that information to trigger new renders, you can use this hook They are often used when performing imperative actions or accessing specific elements rendered in the DOM Refs can also persist values throughout the component's lifecycle, meaning that the value of the ref will not be destroyed every time a component re-renders This is very useful when you want to store a value that you want to persist throughout the component's lifecycle without storing it in a state DOM manipulation\nWhen building web applications, sometimes you need more direct control over specific elements in the DOM The useRef hook comes to the rescue by providing a way to access and interact with those elements Imagine a button on a web page, and you want to focus on that button when the page loads You could achieve this using the useRef hook Here's how it works:\n```jsx\nimport { useRef, useEffect } from \"react\";\nfunction ButtonComponent() {\nconst buttonRef = useRef(null);\nuseEffect(() => {\nbuttonRef current focus();\n}, []);\nreturn Click Me ;\n}\n```\nThe implementation is straightforward:\nWe imported useRef and useEffect in the react module We created a ref object buttonRef with a current property initially set to null Yes, passing an argument to useRef sets the value of current to null just like useState This argument is ignored in subsequent renders Created a useEffect to be executed once on the mount of the component that will try to call the focus method of the button element We've attached buttonRef to the ref attribute of the button element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "7fca8d897f9728cdc37b551fb656f9f1",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "the react module We created a ref object buttonRef with a current property initially set to null Yes, passing an argument to useRef sets the value of current to null just like useState This argument is ignored in subsequent renders Created a useEffect to be executed once on the mount of the component that will try to call the focus method of the button element We've attached buttonRef to the ref attribute of the button elementThis establishes the connection between the buttonRef and the button in the DOM Whenever your website loads, it will automatically focus on the button element You might ask, how can it have the focus method when the initial value is null You should by now know that rendering and painting of the screen comes first before React runs the useEffect It has already established the connection between the ref and the button before the effect is executed Also, remember that useRef hook isn't just limited to focusing elements It can be used for various other DOM manipulation scenarios, such as scrolling to a specific position, measuring the dimensions of an element, triggering animations, and basically any DOM manipulation that you've done before with vanilla JavaScript The possibilities are endless For example, we can change the useEffect in the above snippet to do the following Change the button's text, and after 2 seconds, change the text back You should not do this and only use useRef for non-destructive DOM operations, but just an example:\n```jsx\nuseEffect(() => {\nbuttonRef current focus();\nbuttonRef current textContent = \"Hey, I'm different \";\nlet timeout = setTimeout(() => {\nbuttonRef current textContent = \"Click Me \";\n}, 2000);\nreturn () => {\nclearTimeout(timeout);\n};\n}, []);\n```\nThe interesting thing about this is that this will never trigger a component re-render Another question that might pop up in your mind is, \"Why not just use querySelector or other DOM manipulation methods that we've done previously in vanilla JavaScript \" Dealing with the DOM ourselves defeats the purpose of using React, and wherever possible we should let React commit to the DOM itself We can also see that it's similar to the useState hook in that it can store some values The main difference is that useRef creates a mutable reference, allowing you to update its value without triggering a re-render But, useState manages an immutable state that triggers re-renders when updated The useMemo hook\nIn all of the examples, we would advise you to use the Profiler component that is provided in the react module",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "8bba90923414228d45a96df8af1cd4fc",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "the DOM itself We can also see that it's similar to the useState hook in that it can store some values The main difference is that useRef creates a mutable reference, allowing you to update its value without triggering a re-render But, useState manages an immutable state that triggers re-renders when updated The useMemo hook In all of the examples, we would advise you to use the Profiler component that is provided in the react moduleIf you want a more interactive alternative, use the Profiler in the React Developer Tools to measure rendering performance Note that sometimes you don't need to optimize anything because of how fast things are already As the famous saying goes in software development:\nPremature optimization is the root of all evil -- The Art of Computer Programming by Donald Knuth\nThe useMemo hook provides a way to add memoization inside our components It's used to optimize expensive or complex calculations where it caches the result of a function call and stores it to be used later without recalculating it The memoized value is, however, recalculated only when the dependencies of the useMemo hook change And yes, this hook's parameters are the same as the useEffect hook you already know The hook takes in two arguments: a calculateValue callback and a dependencies array Memoizing expensive calculations\nIn the previous Shopping Cart Project, you have some logic where you calculate the total price of the products added to the cart You might or might not have a Cart component that functions as a drawer, where the user can open the cart every time they either click on the Add to Cart button or the Cart icon in the header An example of a Cart component:\n```jsx\nfunction Cart({ products }) {\nconst totalPrice = products reduce(\n(total, product) => total + product price * product quantity,\n0\n);\nreturn (\n{/ Some other content in the cart /}\n{/ Products to display /}\nTotal Price: ${totalPrice}\n{/ Some button to checkout /}\n);\n}\n```\nIn our Cart component, we have the total price of the products calculated directly inside the component Every time the component is rendered or updated, the calculation is performed from scratch That doesn't sound good What if the user has added hundreds of thousands of products to the cart Then it will lead to a sluggish user experience The reduce method iterates over each product and performs multiplication and addition for every item in the cart This operation becomes increasingly time-consuming as the number of products increases Now imagine a user who frequently opens/closes the cart",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "24cf9c06d3cf302cd9accfdf08f3dc8e",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "component is rendered or updated, the calculation is performed from scratch That doesn't sound good What if the user has added hundreds of thousands of products to the cart Then it will lead to a sluggish user experience The reduce method iterates over each product and performs multiplication and addition for every item in the cart This operation becomes increasingly time-consuming as the number of products increases Now imagine a user who frequently opens/closes the cartEvery time the drawer is opened, the Cart component is rendered, executing everything inside the component This results in unnecessary recomputations of the same value even if the cart's content hasn't changed Let's see how we can use useMemo to address this:\n```jsx\nimport { useMemo } from \"react\";\nfunction Cart({ products }) {\nconst totalPrice = useMemo(() => {\nreturn products reduce(\n(total, product) => total + product price * product quantity,\n0\n);\n}, [products]);\nreturn (\n{/ Some other content in the cart /}\n{/ Products to display /}\nTotal Price: ${totalPrice}\n{/ Some button to checkout /}\n);\n}\n```\nIn the example above, we can easily memoize the calculated value by wrapping it in a useMemo, as the syntax is pretty much the same as useEffect and almost works the same Where useMemo will also execute the callback on mount, and on subsequent re-renders, it will only re-execute the callback whenever one of the dependencies changes In our case, whenever the products prop changes This way, whenever a user opens/closes the cart multiple times, it will not recalculate the totalPrice and use the cached value as long as products did not change Referential equality checks\nFor this example, we will use the Profiler component in the react module to measure the component's performance We will also introduce memo You do not need to start a React application for this We've already got you covered a bit later, we will be sharing an interactive example, but for now, think through the code on what you think will happen, what could happen, and so on This could also be a great exercise in reading code and visualizing how it works Do note that this is just a very basic example You will encounter a lot of passing of values to other components as props, components that are very heavy to render",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "7611010e35639bb179473efb2dea5515",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "covered a bit later, we will be sharing an interactive example, but for now, think through the code on what you think will happen, what could happen, and so on This could also be a great exercise in reading code and visualizing how it works Do note that this is just a very basic example You will encounter a lot of passing of values to other components as props, components that are very heavy to render```jsx\nimport { useState } from \"react\";\nconst ButtonComponent = ({ children, onClick }) => {\nlet i = 0;\nlet j = 0;\nconst ITERATION_COUNT = 10_000;\nwhile (i < ITERATION_COUNT) {\nwhile (j < ITERATION_COUNT) {\nj += 1;\n}\ni += 1;\nj = 0;\n}\nreturn (\n{children}\n);\n};\nfunction Counter() {\nconst [count, setCount] = useState(0);\nconst handleClick = () => {\nsetCount((prevState) => prevState + 1);\n};\nreturn (\n{count}\nClick me );\n}\n```\nYou will likely want to have a separate button component where you can handle stylings and other things in it So we have created a component called ButtonComponent as an example This component takes the children and onClick props We can see that the click handler is defined in the Counter component, and we've passed it to the onClick prop of the ButtonComponent We know that a component renders whenever either state changes or prop changes Anything inside that is not controlled by React is destroyed and re-executed Functions, variables, etc As a result, the function handleClick is re-created each time, and the prop onClick of the ButtonComponent also changes Alright, so how can useMemo help in here We already know we can memoize a value using useMemo, right Then we can just cache the function reference and use an empty dependency array so that it won't change Let's create a new function and name it memoizedHandleClick:\njsx\nconst memoizedHandleClick = useMemo(() => handleClick, []);\nWe don't need to create a new function, but this is just to test these two functions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "e5ea7ab11d75e710c5dcda02c5cf5afc",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "the ButtonComponent also changes Alright, so how can useMemo help in here We already know we can memoize a value using useMemo, right Then we can just cache the function reference and use an empty dependency array so that it won't change Let's create a new function and name it memoizedHandleClick: jsx const memoizedHandleClick = useMemo(() => handleClick, []); We don't need to create a new function, but this is just to test these two functionsYou can also directly do the following:\n``jsx\n// Syntax might be weird, but just remember thatuseMemocan take any value, and a function is also just a value() => setCount((prevState) => prevState + 1)`\nconst handleClick = useMemo(\n// first arrow function is useMemo's callback\n// second arrow function is our function that will be called later, this one is going to be the cached value and what's going to be stored in handleClick\n() => () => setCount((prevState) => prevState + 1),\n[]\n);\n```\nGreat, useMemo should help us here right It shouldn't possibly re-render the ButtonComponent again correct Nope, it will still re-render because whenever a component's state changes, it will also re-render its children, which could also be said differently - a component will re-render itself if its parent re-renders Is there a way to fix this Yes, there is React in one of its APIs provides the memo wrapper function that lets you skip re-rendering a component when its props are unchanged (yes, even if the parent re-renders) We can use this memo and wrap the ButtonComponent in it ```jsx\nimport { useState, memo } from \"react\";\nconst ButtonComponent = memo(({ children, onClick }) => {\nlet i = 0;\nlet j = 0;\nconst ITERATION_COUNT = 10_000;\nwhile (i < ITERATION_COUNT) {\nwhile (j < ITERATION_COUNT) {\nj += 1;\n}\ni += 1;\nj = 0;\n}\nreturn (\n{children}\n);\n});\n```\nWrapping the component with a memo prevents the downward update that is triggered above the component So, this component will only re-render when its props change or if its own state changes With all that said and done, test and break things in our interactive example:\nThese are the scenarios that could happen:\nIf you've passed handleClick and the ButtonComponent has a memo It will still re-render",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "5c528f0cce7de2fb3a26f5e24726876d",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "= 0; } return ( {children} ); }); ``` Wrapping the component with a memo prevents the downward update that is triggered above the component So, this component will only re-render when its props change or if its own state changes With all that said and done, test and break things in our interactive example: These are the scenarios that could happen: If you've passed handleClick and the ButtonComponent has a memo It will still re-renderReferential equality check fails (previous prop is not equal to the current prop) If you've passed memoizedHandleClick and the ButtonComponent has a memo It will not re-render Referential equality check passes (previous prop is equal to the current prop) This works with all values that will be passed as a prop You might see it being used frequently with the Context API:\n```jsx\nconst value = useMemo(\n() => ({ someState, someFunction }),\n[someState, someFunction]\n);\nreturn {children};\n```\nThe useCallback hook\nThe useCallback hook provides another way to memoize a value, not just any value like useMemo It can only memoize a function Did you see the previous snippet that we have with memoizing a function reference with useMemo jsx\nconst handleClick = useMemo(\n() => () => setCount((prevState) => prevState + 1),\n[]\n);\n// or\nconst memoizedHandleClick = useMemo(() => handleClick, []);\nWith useCallback, we don't need to do that It's specifically made for functions:\n```jsx\nimport { useCallback } from \"react\";\n// Inside a component\n// Without useCallback\nconst handleClick = () => setCount((prevState) => prevState + 1);\n// With useCallback\nconst handleClick = useCallback(\n() => setCount((prevState) => prevState + 1),\n[]\n);\n// or\nconst memoizedHandleClick = useCallback(handleClick, []);\n```\nYay, there's only one arrow function, and it's simpler to read There's nothing extra to useCallback other than it only memoizes functions So the main difference between useMemo and useCallback is just the type of value it returns Which one should we use, then Use useMemo for any value types, and use useCallback specifically for functions At the end of the day, they both do similar things with a tiny difference, so use whatever you prefer Conclusion\nPhew, this was a long lesson Refs and memoization are difficult concepts to grasp, but we're sure you'll understand them with practice",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "c70816cbbfff6dd3e3eade44ca388d3a",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "the main difference between useMemo and useCallback is just the type of value it returns Which one should we use, then Use useMemo for any value types, and use useCallback specifically for functions At the end of the day, they both do similar things with a tiny difference, so use whatever you prefer Conclusion Phew, this was a long lesson Refs and memoization are difficult concepts to grasp, but we're sure you'll understand them with practiceRefs particularly are really useful for some use-cases, as for memoization, only reach out to it when you absolutely need it These topics also make for great interview questions, so make sure you know the difference between useMemo and useCallback Assignment\n1 The article [When to useMemo and useCallback](https://kentcdodds com/blog/usememo-and-usecallback) by Kent C Dodds further introduces more examples of when to use `useMemo` and `useCallback` and when you shouldn't bother using them 1 We've only learned about a basic implementation of the `useRef` hook For more examples about its usage and why we should be wary of using the hook (more on the links they provided in the guide), check out the interactive guide of the React documentation for [useRef hook](https://react dev/reference/react/useRef) 1 The article [useRef instead of querySelector in React](https://meje dev/blog/useref-not-queryselector) by Caleb Olojo briefly tells some unexpected behaviors when trying to manipulate the DOM directly with DOM manipulation methods and why we should prefer `useRef` over other DOM manipulation methods like `querySelector` Check it out 1 As we have learned, the `useRef` hook has other uses other than what we've primarily covered which is DOM Manipulation Get to know more about its use-cases in this great article by Dan Abramov [Making setInterval Declarative with React Hooks](https://overreacted io/making-setinterval-declarative-with-react-hooks/) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why should you prefer useRef hook over other DOM manipulation methods like querySelector What is the difference between useMemo and useCallback How do useMemo and useCallback help optimize the performance of React components When should you memoize a value Additional resources\nThis section contains helpful links to related content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "153e6e8ad0f12f92fccb6ff2b3d7e9c6",
    "source_file": "corpus\\git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
    "source_type": "git_repo",
    "title": "{count}",
    "content": "If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why should you prefer useRef hook over other DOM manipulation methods like querySelector What is the difference between useMemo and useCallback How do useMemo and useCallback help optimize the performance of React components When should you memoize a value Additional resources This section contains helpful links to related contentIt isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18199,
      "relative_path": "git_repos\\odin-project\\react\\more_react_concepts\\refs_and_memoization.md",
      "source_type": "git_repo"
    },
    "token_count": 113,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "1d212ad4ab7a8b023fd28d3295fc0e41",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
    "source_type": "git_repo",
    "title": "Our First Test",
    "content": "Introduction\nWe've learned how to test our vanilla JavaScript applications in a previous section Testing is a powerful tool that allows us to write maintainable and flexible code If you've followed along with our lessons, so far we've been using the Jest framework However, since we're using Vite we'll switch over to Vitest as our test runner since it integrates nicely with Vite We'll add more capabilities to our tests using the React Testing library (RTL) Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to set up a React testing environment How to test UI elements Understanding snapshot tests Setting up a React testing environment\nFollow along Robin Wieruch's guide on setting up Vitest with RTL Once you've completed the setup, let's meet back here Phew, that was a lot of setup But there's one more tiny package to install before we can begin:\nbash\nnpm install @testing-library/user-event --save-dev\nNow that we have everything we need, let's briefly go over what some of those packages do We'll primarily focus on the @testing-library packages @testing-library/react will give us access to useful functions like render which we'll demonstrate later on @testing-library/jest-dom includes some handy custom matchers (assertive functions) like toBeInTheDocument and more (complete list on jest-dom's github) Jest already has a lot of matchers so this package is not compulsory to use @testing-library/user-event provides the userEvent API that simulates user interactions with the webpage Our first query\nFirst, we'll render the component using render The API will return an object and we'll use destructuring syntax to obtain a subset of the methods required You can read all about what render can do in the React Testing Library API docs about render ```jsx\n// App jsx\nconst App = () => Our First Test;\nexport default App;\n```\n```jsx\n// App test jsx\nimport { describe, it, expect } from \"vitest\";\nimport { render, screen } from \"@testing-library/react\";\nimport App from \" /App\";\ndescribe(\"App component\", () => {\nit(\"renders correct heading\", () => {\nrender();\nexpect(screen getByRole(\"heading\") textContent) toMatch(/our first test/i);\n});\n});\n```\n#### Vitest globals and ESLint\nEven if you set `globals: true` in `vite config",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "7644b880afdedf66427dc4bcfab5fde3",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
    "source_type": "git_repo",
    "title": "Our First Test",
    "content": "```jsx // App jsx const App = () => Our First Test; export default App; ``` ```jsx // App test jsx import { describe, it, expect } from \"vitest\"; import { render, screen } from \"@testing-library/react\"; import App from \" /App\"; describe(\"App component\", () => { it(\"renders correct heading\", () => { render(); expect(screen getByRole(\"heading\") textContent) toMatch(/our first test/i); }); }); ``` #### Vitest globals and ESLint Even if you set `globals: true` in `vite configjs` like in the setup tutorial, ESLint will still yell at you, as it will not recognize these globals without some extra configuration in your `eslint config js` file The most straightforward resolution would be to explicitly import the globals you'd need instead You can omit `globals: true` from `vite config js` in this case Execute npm test App test jsx on the terminal and see the test pass getByRole is just one of the dozen query methods that we could've used Essentially, queries are classified into three types: getBy, queryBy and findBy Go through the React Testing Library docs page about queries Pay extra attention to the \"Types of Queries\" and \"Priority\" sections As stated by the React Testing Library docs, ByRole methods are favored methods for querying, especially when paired with the name option For example, we could improve the specificity of the above query like so: getByRole(\"heading\", { name: \"Our First Test\" }) Queries that are done through ByRole ensure that our UI is accessible to everyone no matter what mode they use to navigate the webpage (i e mouse or assistive technologies) Simulating user events\nThere are numerous ways a user can interact with a webpage Even though live user feedback and interaction is irreplaceable, we can still build some confidence in our components through tests Here's a button which changes the heading of the App:\n```jsx\n// App jsx\nimport { useState } from \"react\";\nconst App = () => {\nconst [heading, setHeading] = useState(\"Magnificent Monkeys\");\nconst clickHandler = () => {\nsetHeading(\"Radical Rhinos\");\n};\nreturn (\n<>\nClick Me\n{heading}\n</>\n);\n};\nexport default App;\n```\nLet's test if the button works as intended In this test suite, we'll use a separate utility to query our UI elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ae1ee0482aef210c40ce1f2008ee5287",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
    "source_type": "git_repo",
    "title": "Our First Test",
    "content": "Here's a button which changes the heading of the App: ```jsx // App jsx import { useState } from \"react\"; const App = () => { const [heading, setHeading] = useState(\"Magnificent Monkeys\"); const clickHandler = () => { setHeading(\"Radical Rhinos\"); }; return ( <> Click Me {heading} </> ); }; export default App; ``` Let's test if the button works as intended In this test suite, we'll use a separate utility to query our UI elementsReact Testing Library provides the screen object which has all the methods for querying With screen, we don't have to worry about keeping render's destructuring up-to-date Hence, it's better to use screen to access queries rather than to destructure render ```jsx\n// App test jsx\nimport { describe, it, expect } from \"vitest\";\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport App from \" /App\";\ndescribe(\"App component\", () => {\nit(\"renders magnificent monkeys\", () => {\n// since screen does not have the container property, we'll destructure render to obtain a container for this test\nconst { container } = render();\nexpect(container) toMatchSnapshot();\n});\nit(\"renders radical rhinos after button click\", async () => {\nconst user = userEvent setup();\nrender(<App />);\nconst button = screen getByRole(\"button\", { name: \"Click Me\" });\nawait user click(button);\nexpect(screen getByRole(\"heading\") textContent) toMatch(/radical rhinos/i);\n});\n});\n```\nThe tests speak for themselves In the first test, we utilize snapshots to check whether all the nodes render as we expect them to In the second test, we simulate a click event Then we check if the heading changed toMatch is one of the various assertions we could have made Notice that the callback function for the second test is an async one, as we need this in order to await user click() It's also important to note that after every test, React Testing Library unmounts the rendered components That's why we render for each test For a lot of tests for a component, a custom setup function could prove handy What are snapshots Snapshot testing is just comparing our rendered component with an associated snapshot file For example, the snapshot file which was automatically generated after we ran the \"renders magnificent monkeys\" test was:\n```jsx\n// Vitest Snapshot v1, https://vitest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "2e7e2b81ac0a62e063fd5ae4e5409152",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
    "source_type": "git_repo",
    "title": "Our First Test",
    "content": "important to note that after every test, React Testing Library unmounts the rendered components That's why we render for each test For a lot of tests for a component, a custom setup function could prove handy What are snapshots Snapshot testing is just comparing our rendered component with an associated snapshot file For example, the snapshot file which was automatically generated after we ran the \"renders magnificent monkeys\" test was: ```jsx // Vitest Snapshot v1, https://vitestdev/guide/snapshot html\nexports[App component > renders magnificent monkeys 1] = `\nClick Me\nMagnificent Monkeys\n`;\n```\nIt's an HTML representation of the App component And it will be compared against the App in future snapshot assertions If the App changes even slightly, the test fails Snapshot tests are fast and easy to write One assertion saves us from writing multiple lines of code For example, with a toMatchSnapshot, we're spared of asserting the existence of the button and the heading They also don't let unexpected changes creep into our code Read all about what can be achieved with snapshots in the Vitest snapshot docs Snapshots might seem the best thing that has happened to us while testing thus far But we are forced to wonder, what exactly are we testing What's being validated If a snapshot passes, what does it convey about the correctness of the component Snapshot tests may cause false positives Since we cannot ascertain the validity of the component from a snapshot test, a bug might go undetected Over-reliance on snapshots can make developers more confident about their code than they should be The other issue with snapshots is false negatives Even the most insignificant of changes compel the test to fail Fixing punctuation Snapshot will fail Replacing an HTML tag to a more semantic one Snapshot will fail This might cause us to lose our confidence in the test suite altogether Snapshots aren't inherently bad; they do serve a purpose But it's beneficial to understand when to snapshot, and when not to snapshot Assignment\n#### Focus on the concepts\nEven though some articles use Jest and the Enzyme testing library, the concepts should be transferable 1 [Testing Implementation Details](https://kentcdodds com/blog/testing-implementation-details) by Kent C Dodds shows us how we can reduce false test results and inflexible tests by avoiding testing the implementation of things 1 Take a glance at all of the available query methods on [the React Testing Library's cheatsheet page](https://testing-library com/docs/dom-testing-library/cheatsheet/)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4978f12af5bcb0d1b5e565dddc4cfbce",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
    "source_type": "git_repo",
    "title": "Our First Test",
    "content": "to snapshot, and when not to snapshot Assignment #### Focus on the concepts Even though some articles use Jest and the Enzyme testing library, the concepts should be transferable 1 [Testing Implementation Details](https://kentcdodds com/blog/testing-implementation-details) by Kent C Dodds shows us how we can reduce false test results and inflexible tests by avoiding testing the implementation of things 1 Take a glance at all of the available query methods on [the React Testing Library's cheatsheet page](https://testing-library com/docs/dom-testing-library/cheatsheet/)There's no need to use them all, but it's optimal to employ a specific method for a specific query If none of the query methods suffice, there's an option to use test ids Learn about test ids on [the React Testing Library's test id docs](https://testing-library com/docs/queries/bytestid/) 1 Read [the userEvent API docs](https://testing-library com/docs/user-event/intro) to get a feel of how to achieve user simulation 1 This article on the [Pros and Cons of Snapshot Tests](https://tsh io/blog/pros-and-cons-of-jest-snapshot-tests/) goes in depth regarding the advantages and disadvantages of snapshot testing And this one, [Snapshot Testing: Benefits and Drawbacks](https://www sitepen com/blog/snapshot-testing-benefits-and-drawbacks), does an excellent job of explaining what snapshot testing is for programming in general Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What packages are required for React testing What is the significance of the user-event package What does the render method do What is the most preferred method for querying How would you test for a click event with userEvent What is the advantage of snapshot tests What are the disadvantages of snapshot tests Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This tutorial on Testing React Apps by Academind is a great overview of what you've learned It goes into testing async code and callbacks which we haven't covered yet Though you should be able to follow along using your previous knowledge This Intro to React Testing Library video for a hands-on tutorial",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11674,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\introduction_to_react_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "18e8bac36b7d47e84e7898be5c37aa42",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
    "source_type": "git_repo",
    "title": "mocking_callbacks_and_components",
    "content": "Introduction\nWe've already covered some basics of React testing Now's the time to dive deeper In this lesson, we'll learn about mocking Furthermore, we'll discuss a React component from this (theodinproject com) website and understand how React tests are written in a real world application Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Carry out mocks in the context of React testing What is mocking If you've been following along with our lessons so far, the concept of mocking has already been introduced in an earlier section and you might have even incorporated mocks in your Battleship project Let's look at how mocks will help in testing React components Testing callback handlers\nCallbacks are ubiquitous Every avenue of user interaction involves callbacks Sometimes they're passed in as props to alter state of the parent component Consider this button component:\n```jsx\n// CustomButton jsx\nconst CustomButton = ({ onClick }) => {\nreturn (\nClick me\n);\n};\nexport default CustomButton;\n```\nNothing fancy CustomButton is a component with a prop passed in We're interested in the onClick prop We have no idea what the function does We have no idea how the function will affect the application All we know is it must be called when the user clicks the button Let's test it Notice how we mock and test the onClick function:\n```jsx\n// CustomButton test jsx\nimport { vi, describe, it, expect } from 'vitest'\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport CustomButton from \" /CustomButton\";\ndescribe(\"CustomButton\", () => {\nit(\"should render a button with the text 'Click me'\", () => {\nrender( {}} />);\nconst button = screen getByRole(\"button\", { name: \"Click me\" });\nexpect(button) toBeInTheDocument();\n});\nit(\"should call the onClick function when clicked\", async () => {\nconst onClick = vi fn();\nconst user = userEvent setup()\nrender();\nconst button = screen getByRole(\"button\", { name: \"Click me\" });\nawait user click(button);\nexpect(onClick) toHaveBeenCalled();\n});\nit(\"should not call the onClick function when it isn't clicked\", async () => {\nconst onClick = vi fn();\nrender();\nexpect(onClick) not toHaveBeenCalled();\n});\n});\n```\nThree tests and we are done with this component You should be already familiar with how the first test works",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10237,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "65602f97a4b4d0c59e2cdd9fd603ac2e",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
    "source_type": "git_repo",
    "title": "mocking_callbacks_and_components",
    "content": "() => { const onClick = vi fn(); const user = userEvent setup() render(); const button = screen getByRole(\"button\", { name: \"Click me\" }); await user click(button); expect(onClick) toHaveBeenCalled(); }); it(\"should not call the onClick function when it isn't clicked\", async () => { const onClick = vi fn(); render(); expect(onClick) not toHaveBeenCalled(); }); }); ``` Three tests and we are done with this component You should be already familiar with how the first test worksTake some time to figure out what functions come from which package For the second and third tests, we mock the onClick handler using one of Vitest's functions, vi fn() Then we assert that it is called/not called when the button is clicked or not You could also set up your mocks in a beforeEach block instead of in every test block This may be suitable for some situations However, for better readability, it is recommended that all setups be done in the same test block Doing so eliminates the need to search through the entire file for context, making it easier to review future changes This also reduces the chance of leakage causing problems throughout the test suite Unless your test file is particularly long and the test preparation takes up dozens of lines, it is recommended to set up your mocks in each test block; otherwise, you may use beforeEach It is recommended to invoke userEvent setup() before rendering the component It is discouraged to call renders and userEvent functions outside of the test itself, (for example, in a beforeEach block) If you find yourself repeating the same code in multiple tests, the recommended approach to shorten each test is to write a setup function Mocking child components\nYou might have come across the concept of mocking modules In React, when the component tree gets large, tests can become convoluted Especially for components higher up the tree That's why we mock child components This is not something you'll come across often, nevertheless, it's beneficial to realize the concept in case you might need it in your own testing pursuits React testing in the real world\nIf you're logged in on this (theodinproject com) website, you've probably come across the project submissions list under every project Those components were written in React and tested with the React Testing Library They have since been removed, but they still serve as great examples This'll be fun Your task is:\nRead and try to comprehend the submissions-list jsx component It's okay if you don't understand everything",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10237,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6ce4430d6ed0706921335ce9302d6f4c",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
    "source_type": "git_repo",
    "title": "mocking_callbacks_and_components",
    "content": "own testing pursuits React testing in the real world If you're logged in on this (theodinproject com) website, you've probably come across the project submissions list under every project Those components were written in React and tested with the React Testing Library They have since been removed, but they still serve as great examples This'll be fun Your task is: Read and try to comprehend the submissions-list jsx component It's okay if you don't understand everythingAnd the good news is that we don't have to understand it all to follow along with this lesson submissions-list jsx\nWe start by importing a bunch of stuff like any other decent React component There might be a couple of unfamiliar things on there; we don't have to worry too much about them If we take a glance at the props, there are some functions in there, presumably event handlers Let's look at what the component renders If there's a userSubmission, it renders the Submission component If hasSubmissions is true, sort the submissions and render them with Submission Otherwise, a heading that says \"No Submissions yet, be the first \"\nIf  allSubmissionsPath is true, it renders a <p> tag Just going through the code, it should give us some idea of what to test It will be rewarding if you take a couple of seconds to map out what tests we could need for SubmissionsList Go through its test file, submissions-list test jsx Again, don't worry if all of it doesn't make sense, we'll chew over it shortly #### Note\nWhile the test suite above uses `data-test-id` to identify mocked child components, it must be remembered that the React Testing Library instead uses `data-testid` by default submissions-list test jsx\nWe notice there are two child components of SubmissionsList One of them is from a package called react-flip-move External Code We'll mock it Notice how we mock the Submission component:\njsx\njest mock(' /submission', () => ({ submission, isDashboardView }) => (\n<>\n<div data-test-id=\"submission\">{submission id}</div>\n<div data-test-id=\"dashboard\">{isDashboardView toString()}</div>\n</>\n));\nWe only render the bare minimum to realize the validity of the component we're testing Next, we set up our props with fake data and mocked functions #### Note - Vitest mocks\nThe test here used `jest mock()` If you followed along and set up your test using Vitest, you may use `vi mock()` instead",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10237,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "8d6c67c05d06838248669ca022ff211a",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
    "source_type": "git_repo",
    "title": "mocking_callbacks_and_components",
    "content": "jsx jest mock(' /submission', () => ({ submission, isDashboardView }) => ( <> <div data-test-id=\"submission\">{submission id}</div> <div data-test-id=\"dashboard\">{isDashboardView toString()}</div> </> )); We only render the bare minimum to realize the validity of the component we're testing Next, we set up our props with fake data and mocked functions #### Note - Vitest mocks The test here used `jest mock()` If you followed along and set up your test using Vitest, you may use `vi mock()` insteadSee [`vi mock()` API](https://vitest dev/api/vi html#vi-mock) Let's move toward our first assertion Don't worry too much about the ProjectSubmissionContext Provider In the context of this test, its purpose is to act as a route to pass in the allSubmissionsPath prop We've already identified the three points of interest that we want to test We divide them into three test suites for readability purposes using describe In the first suite, we make some assertions if the user has a submission and then some assertions if the user does not The other suites follow a similar pattern Exploring further\nFeel free to flick through the other components and their tests You'll see mocked functions You'll see some unseen functions like act You'll see custom render functions It's fine if you don't understand it all, the goal is to gain familiarity The other important thing to note is almost all the tests follow a certain pattern in terms of the way they're written They follow the Arrange-Act-Assert pattern It's a good idea to adopt this pattern sooner or later to make your tests more readable and ultimately better Assignment\n1 Read about the [secrets of act( ) api](https://github com/mrdulin/react-act-examples/blob/master/sync md) Especially pay attention to the last bit about testing asynchronous code You won't be using it everyday, but it's nice to be familiar Please note that in the article, the React components are written within the tests 1 Read this article about [mocking child components](https://medium com/@taylormclean15/jest-testing-mocking-child-components-to-make-your-unit-tests-more-concise-18691ef6a0c2) It extensively covers the \"how\" of mocking child components (You might need to sign up to read)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10237,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "c5c71bd094fbaa638e73256616b70849",
    "source_file": "corpus\\git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
    "source_type": "git_repo",
    "title": "mocking_callbacks_and_components",
    "content": "to the last bit about testing asynchronous code You won't be using it everyday, but it's nice to be familiar Please note that in the article, the React components are written within the tests 1 Read this article about [mocking child components](https://medium com/@taylormclean15/jest-testing-mocking-child-components-to-make-your-unit-tests-more-concise-18691ef6a0c2) It extensively covers the \"how\" of mocking child components (You might need to sign up to read) Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How can you mock a callback handler How can you mock a child component Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Dive deeper into act() and understand its most common warning and when act() is not necessary",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10237,
      "relative_path": "git_repos\\odin-project\\react\\react_testing\\mocking_callbacks_and_components.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "fc7c7e36c1cadbcf5fd36a6f2e97ae54",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\introduction_to_state.md",
    "source_type": "git_repo",
    "title": "introduction_to_state",
    "content": "Introduction\nAny exciting application you build is likely to change over the time the user is exploring it The changes could be as basic as toggling a dropdown menu or as complex as fetching data from an API React provides primitives to manipulate the state of your apps, more specifically components, to make them dynamic In this lesson, we will learn how to use state in React Read  What is State by Academind before we get started Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What state in React is How to use state in React What happens in React when state is changed What is state in React We write components in React, A LOT of components, and many times we want them to undergo visual changes as a result of user or computer interactions For this purpose, a component needs to \"remember\" things about itself This is where state comes in State is a component's memory Let's take a look at how we can use state in our code An app that changes its background color based on the clicked button Take your time reading the code as we'll jump right in The useState hook\nThe useState hook is a built-in hook (we'll talk about hooks later) in React that allows you to define state in a functional component It takes an initial value as a parameter and returns an array with two elements that we can destructure to get:\nThe current state value\nA function to update the state value\nState definition with useState commonly follows this pattern:\n```javascript\nconst [stateValue, setStateValue] = useState(initialValue);\n// adapted for our use case:\nconst [backgroundColor, setBackgroundColor] = useState(initialColor);\n```\nEven without much knowledge of React, you can, to some extent, understand what's going on The backgroundColor state is defined with the hook Then on every button, we set up a click event handler that calls the setBackgroundColor function with the corresponding value Then, magically the new color is applied to the background Adding more state variables should be as easy as adding more useState calls Great, you can now use state But, what's going on under the hood How does state work in React Let's hit you with some theory In React, when a component's state or props change, React runs your component function again from the beginning to figure out what should be displayed based on the freshly-set state and props All the calculated changes are then applied to the DOM (committed)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6865,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\introduction_to_state.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "01373102aee4d286d6a30a04decc86ad",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\introduction_to_state.md",
    "source_type": "git_repo",
    "title": "introduction_to_state",
    "content": "be as easy as adding more useState calls Great, you can now use state But, what's going on under the hood How does state work in React Let's hit you with some theory In React, when a component's state or props change, React runs your component function again from the beginning to figure out what should be displayed based on the freshly-set state and props All the calculated changes are then applied to the DOM (committed)That is, the entire component is recreated, in a sense, but this time the latest state value will be returned from useState This process is called rerendering Rerendering is a key feature of React that enables it to efficiently update the user interface in response to changes in the underlying data #### React reconciliation algorithm\nThe process of rerendering generates a new virtual DOM (Document Object Model) tree The virtual DOM is a lightweight representation of the actual DOM that React uses to keep track of the current state of the UI React then compares the new virtual DOM tree to the previous one and calculates the minimal set of changes needed to update the actual DOM This is the reconciliation algorithm Explaining rerendering with the example above\nWhenever setBackgroundColor is called, our App component is rerendered Essentially, the component is recreated which means the onButtonClick function and our div and buttons are recreated as well You might wonder, shouldn't the backgroundColor state be recreated as well Well, React takes the responsibility of keeping track of the latest state and providing it to the component The initial state value is only used for the component's first render and is ignored on subsequent renders What we covered in this section is just a brief overview of a portion of React internals You may be curious to learn more, but be advised, this is a deep rabbit hole What we covered above is enough to get you through the React course Hooks\nHooks are functions that let you use React features All hooks are recognizable by the use prefix For example, useState is a hook We'll use more of these as we get further into the course For now, remember that hooks have rules that we need to abide by:\nHooks can only be called from the top level of a functional component Hooks can't be called from inside loops or conditions Assignment\n1 Read the following articles from the React docs:\n1 [State: A Component's Memory](https://react dev/learn/state-a-components-memory)\n1 [Render and Commit](https://react dev/learn/render-and-commit)\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6865,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\introduction_to_state.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f044b764e3343048494d63d8002f24b6",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\introduction_to_state.md",
    "source_type": "git_repo",
    "title": "introduction_to_state",
    "content": "prefix For example, useState is a hook We'll use more of these as we get further into the course For now, remember that hooks have rules that we need to abide by: Hooks can only be called from the top level of a functional component Hooks can't be called from inside loops or conditions Assignment 1 Read the following articles from the React docs: 1 [State: A Component's Memory](https://react dev/learn/state-a-components-memory) 1 [Render and Commit](https://react dev/learn/render-and-commit) 1Read this [article on React Reconciliation Algorithm](https://medium com/javarevisited/react-reconciliation-algorithm-86e3e22c1b40) for a great explanation 1 Head back to the colour changing background example from earlier in the lesson, and add a new state variable to keep track of the number of times the background color has been changed Display the number of times the background color has been changed on the page You will need to fork the codesandbox to do this, which requires a codesandbox account Click \"Open Editor\" in the top right of the codesandbox embed, then \"Fork\" in the top right of the editor Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is state What is the useState hook and how would you use it What happens to a component when one of its states is changed What are some of the rules of hooks Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental You can go through the GeeksforGeeks article on reconciliation for an in-depth look into the algorithm",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6865,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\introduction_to_state.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ad9de90c3a7646346377376114e177fa",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
    "source_type": "git_repo",
    "title": "how_to_deal_with_side_effects",
    "content": "Introduction\nCertain components in React need to interact with things outside themselves These things can be anything from querying data from a server to finding/changing the position of the component on the webpage or even sending some data to a server when necessary This interaction with the outside world is called a side-effect While we are already familiar with rendering code and adding event handlers, it is not enough for all uses, like when you want to connect to your server and fetch messages to show to a user Effects let you run some code to synchronize your component as necessary, on rendering or a reactive/state value change rather than on a particular event Similar to how we have the useState hook, React offers us a handy useEffect hook to use effects in our components Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand what effects are in React Learn how to use effects in React applications Explore different parts of the useEffect hook Identify when to use an effect in React Using effect saves the day\nThe useEffect hook\nLet us take a component in question We want to make a Clock component that shows how many seconds have passed since the user has loaded the webpage To update it every second, we can use our nifty setInterval function to add one to the counter state variable, every second Let's try putting it in the body of our component ```jsx\nimport { useState } from \"react\";\nexport default function Clock() {\nconst [counter, setCounter] = useState(0);\nsetInterval(() => {\nsetCounter(count => count + 1)\n}, 1000);\nreturn (\n{counter} seconds have passed );\n}\n```\nAlas, we see our counter going berserk This happens because the setInterval function is being called not once, but at every state render When our component first renders, it calls our initial setInterval function That interval updates the state every second, triggering the component to re-render But every re-render calls setInterval again, which triggers more frequent state updates, which each spawn new intervals, and everything quickly spirals out of control This is where the useEffect hook swoops in to save us We can wrap this calculation inside a useEffect hook to move it outside the rendering calculation It accepts a callback function with all the calculations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11121,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "fe27f2795a9fbdbe4ea56c5efb04ef67",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
    "source_type": "git_repo",
    "title": "how_to_deal_with_side_effects",
    "content": "our initial setInterval function That interval updates the state every second, triggering the component to re-render But every re-render calls setInterval again, which triggers more frequent state updates, which each spawn new intervals, and everything quickly spirals out of control This is where the useEffect hook swoops in to save us We can wrap this calculation inside a useEffect hook to move it outside the rendering calculation It accepts a callback function with all the calculations```jsx\nimport { useEffect, useState } from \"react\";\nexport default function Clock() {\nconst [counter, setCounter] = useState(0);\nuseEffect(() => {\nsetInterval(() => {\nsetCounter(count => count + 1)\n}, 1000);\n})\nreturn (\n{counter} seconds have passed );\n}\n```\nBut, it still keeps growing too fast This is where another argument of the useEffect comes in: the dependency array The dependency array\nBy default, useEffect hook runs on every render Since setting state tears the component down, we still get multiple setter calls on every render, which doesn't help us Fortunately, the second argument accepts an array of dependencies allowing the hook to re-render only when those dependencies are changed So if you have a state variable and want to have some side-effect occur any time the state changes, you can use this hook and mention the state variable in the dependency array We pass an empty array in this example because we do not want the useEffect hook to run anytime other than the initial component render ```jsx\nimport { useEffect, useState } from \"react\";\nexport default function Clock() {\nconst [counter, setCounter] = useState(0);\nuseEffect(() => {\nsetInterval(() => {\nsetCounter(count => count + 1)\n}, 1000);\n}, [])\nreturn (\n{counter} seconds have passed );\n}\n```\nUsually, you do not need to add dependencies to your `useEffect`hook manually Your linter should let you know about the dependencies it expects Letting the linter show errors and fixing them instead of suppressing them is usually the best idea On a general note, the following block does a good job of summing this point up",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11121,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "a43dd5294c683636fb4badcf438b1edf",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
    "source_type": "git_repo",
    "title": "how_to_deal_with_side_effects",
    "content": "=> { setCounter(count => count + 1) }, 1000); }, []) return ( {counter} seconds have passed ); } ``` Usually, you do not need to add dependencies to your `useEffect`hook manually Your linter should let you know about the dependencies it expects Letting the linter show errors and fixing them instead of suppressing them is usually the best idea On a general note, the following block does a good job of summing this point up```jsx\nuseEffect(() => {\n// This runs after every render\n});\nuseEffect(() => {\n// This runs only on mount (when the component appears)\n}, []);\nuseEffect(() => {\n// This runs on mount *and also* if either a or b have changed since the last render\n}, [a, b]);\n```\nThe clean-up function\nOh, it's not going berserk anymore We still have an issue with the counter updating twice every second though That can be understood as a behavior caused by the React StrictMode It is supposed to help us catch bugs, so what is that bug here With StrictMode, the App component is mounted, unmounted, then mounted again This behaviour of StrictMode is only in the development environment Notice that every time the useEffect hook runs, a new setInterval is used When the component is unmounted the first time, setInterval is not stopped, it keeps incrementing This unnecessary behavior can be prevented by clearing the interval when the component is unmounted and that is where the third part of our useEffect hook comes in - the cleanup function You can return a function from the callback in the useEffect hook, which will be executed each time before the next effect is run, and one final time when the component is unmounted In this case, let us clean up the interval with a cleanup function ```jsx\nimport { useEffect, useState } from \"react\";\nexport default function Clock() {\nconst [counter, setCounter] = useState(0);\nuseEffect(() => {\nconst key = setInterval(() => {\nsetCounter(count => count + 1)\n}, 1000);\nreturn () => {\nclearInterval(key);\n};\n}, [])\nreturn (\n{counter} seconds have passed );\n}\n```\nPhew It finally works As the counter keeps merrily ticking on, let us sum up what we know about the useEffect hook",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11121,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "b2c107e2613bae933d82e985f7c56cb5",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
    "source_type": "git_repo",
    "title": "how_to_deal_with_side_effects",
    "content": "a cleanup function ```jsx import { useEffect, useState } from \"react\"; export default function Clock() { const [counter, setCounter] = useState(0); useEffect(() => { const key = setInterval(() => { setCounter(count => count + 1) }, 1000); return () => { clearInterval(key); }; }, []) return ( {counter} seconds have passed ); } ``` Phew It finally works As the counter keeps merrily ticking on, let us sum up what we know about the useEffect hookjsx\nuseEffect(\n() => {\n// execute side effect\nreturn () => {\n// cleanup function on unmounting or re-running effect\n}\n},\n// optional dependency array\n[/* 0 or more entries */]\n)\nBut do we need the effect useEffect is a mechanism outside the concepts that React usually applies, allowing you to sync your component with various external systems like a server, API, or browser DOM The single question that you can ask yourself before you use an effect is if there are any such external systems that need to be synced with, apart from props or state Unnecessary useEffect hooks are code-smell, error-prone, and cause unnecessary performance issues Let us address a few cases where useEffect does not need to be used You do not need to use an effect if you are only calculating something based on the state during rendering For a change in a component, due to a change in the props, you can calculate and set it during rendering ```jsx\nimport { useState } from \"react\";\nexport default function AdditionDisplay() {\nconst [number1, setNumber1] = useState(0);\nconst [number2, setNumber2] = useState(0);\n// This is all unnecessary // const [sum, setSum] = useState(0);\n// useEffect(() => {\n//   setSum(number1 + number2);\n// }, [number1, number2]);\nconst sum = number1 + number2;\nreturn (\n{number1} + {number2} = {sum}\n);\n}\n```\nYou do not need effects for events Code that runs when a component is displayed should be in effects, the rest should be in events ```jsx\nimport { useState } from \"react\";\nexport default function App() {\nconst [input, setInput] = useState(\"\");\nconst handleInput = (e) => {\nsetInput(e target value);\n};\n// You should avoid direct manipulation when not necessary\n// useEffect(() => {\n//   document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11121,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "2c28901078f7cc2ab04125f643b7e43e",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
    "source_type": "git_repo",
    "title": "how_to_deal_with_side_effects",
    "content": "( {number1} + {number2} = {sum} ); } ``` You do not need effects for events Code that runs when a component is displayed should be in effects, the rest should be in events ```jsx import { useState } from \"react\"; export default function App() { const [input, setInput] = useState(\"\"); const handleInput = (e) => { setInput(e target value); }; // You should avoid direct manipulation when not necessary // useEffect(() => { // documentgetElementById(\"name\") addEventListener(\"change\", handleInput);\n//   return () => {\n//     document getElementById(\"name\") removeEventListener(\"change\", handleInput);\n//   }\n// });\nreturn (\n<>\n{/  /}\n<input onChange={handleInput} value={input} />\n<p>{ input }</p>\n</>\n);\n}\n```\nYou do not need an effect to reset the state based on a condition most of the time You have learned about keys in React Just like using a key on a list's item, adding one to a component, based on the state on which it should be reset creates a unique version of that component for each change in the value of the state If you are having issues with managing your state and want to use an effect to update the state of a parent or some other non-child component, consider lifting the state As we know, in React, the state flows in one direction, generally down the DOM So the parents know of the data before passing it to the children If multiple children are required to make use of a single state, it should be moved up to the parent that has all of the components that need it, instead of using escape hatches like an effect Assignment\n1 This lesson from the React docs talks about the [lifecycle of a component](https://react dev/learn/lifecycle-of-reactive-effects), the different stages at which rendering takes place, and the role of `useEffect` in it 1 More examples from the React docs about when [you might not need an Effect](https://react dev/learn/you-might-not-need-an-effect) 1 Yet another article that explains a common mistake that beginners make, [the infinite useEffect loop](https://dmitripavlutin com/react-useeffect-infinite-loop) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11121,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "aa2c86762ef94f18b242c765437951dd",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
    "source_type": "git_repo",
    "title": "how_to_deal_with_side_effects",
    "content": "from the React docs talks about the [lifecycle of a component](https://react dev/learn/lifecycle-of-reactive-effects), the different stages at which rendering takes place, and the role of `useEffect` in it 1 More examples from the React docs about when [you might not need an Effect](https://react dev/learn/you-might-not-need-an-effect) 1 Yet another article that explains a common mistake that beginners make, [the infinite useEffect loop](https://dmitripavlutin com/react-useeffect-infinite-loop) Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is an effect What constitutes a useEffect hook What is the one question we can ask to know when to use an effect What do we mean by lifting up the state Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This article from Epic React goes over some common mistakes while using effects This article, again from Epic React, goes into how dependency arrays are supposed to be used",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11121,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\how_to_deal_with_side_effects.md",
      "source_type": "git_repo"
    },
    "token_count": 247,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "82643d0e25ebb0c65813d63c4f9fd8c0",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\project_cv_application.md",
    "source_type": "git_repo",
    "title": "project_cv_application",
    "content": "Introduction\nCongratulations, you have made it to the very first React project In this project, you will be creating a small application where users can input their information and generate a CV/résumé It's a great project to get you started because it includes many of the basic concepts you've learned so far, without a huge overhead of complexity Assignment\n#### Double rendering\nWhile working on this project, you might notice that some parts of your code execute twice (e g , console logs appearing doubled) This is due to [React StrictMode](https://react dev/reference/react/StrictMode) and is intended behavior We will go through this more in the next lesson, so don't worry about it for now 1 Create a new React project 1 Think about how to structure your application into components Your application should include:\n1 A section to add general information like name, email and phone number 1 A section to add your educational experience (school name, title of study and date of study)\n1 A section to add practical experience (company name, position title, main responsibilities of your jobs, date from and until when you worked for that company)\n1 Be sure to include an edit and submit button for each section or for the whole CV The submit button should submit your form and display the value of your input fields in HTML elements The edit button should add back (display) the input fields, with the previously displayed information as values In those input fields, you should be able to edit and resubmit the content You're going to make heavy use of state and props, so make sure you understood those concepts 1 Create a `components` directory under your `src` directory and add your components 1 Include a `styles` directory under your `src` directory for your CSS files You'll need to import these in the component files to use them 1 Push the results and deploy them with any of the options mentioned below At this point of the curriculum, it doesn't matter which platform you choose as long as your project is live on the internet Deploying a React app\nWhile we have been using GitHub Pages to deploy our static webpages till now, and we can definitely continue to do so with hacky ways, it's far easier to let a PaaS (Platform as a Service) do the same for us There are a lot of options to host such sites, and the Vite hosting docs go over the most popular ones among them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\project_cv_application.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d1d3f9e3d681e72aafab5e08ae5b13be",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\project_cv_application.md",
    "source_type": "git_repo",
    "title": "project_cv_application",
    "content": "as your project is live on the internet Deploying a React app While we have been using GitHub Pages to deploy our static webpages till now, and we can definitely continue to do so with hacky ways, it's far easier to let a PaaS (Platform as a Service) do the same for us There are a lot of options to host such sites, and the Vite hosting docs go over the most popular ones among themNot only do some of these get rid of additional steps after pushing our code to GitHub as these services have tools that automatically deploy on push, but you also don't have to worry about other issues further down the curriculum, like routers and build steps We shall use a few selected options for now Once you are done with the assignment, choose one of the following options, and deploy Netlify\nWhile there are many ways to deploy to Netlify, like uploading your dist directly or using Netlify's netlify-cli CLI, the most convenient way would be to directly import your GitHub repository to Netlify Push your React application to GitHub Import your project to Netlify by logging in, and selecting your repository Select the branch to deploy from (the default setting, from main, works) and hit \"Deploy site\" You can access more settings here if you need to Netlify Links\nNetlify Homepage\nNetlify Documentation Website\nVite deployment to Netlify with Git section has a similar brief guide\nVercel\nSimilar to Netlify, Vercel also offers a few ways to deploy, but we will be importing our GitHub repository to get benefits like deploy-on-push Again, push your React application to GitHub Import your project to Vercel Vercel will automatically detect that you are using Vite Set your name as you like, and hit \"Deploy\" Vercel Links\nVercel Homepage\nVercel Documentation Website\nCloudflare pages\nYes, push your React application to GitHub Create a new Cloudflare account and log into it At the top of the page click the blue button \"+\" or \"Add\" and navigate to \"Pages\" in the dropdown On the \"Pages\" tab click \"Connect to Git\" Connect to GitHub and select your GitHub repository Under \"Set up builds and deployments\", set npm run build as the build command, and dist as the build output directory Under \"Environment variables (advanced)\" > \"Add variable\", add a variable named NODE_VERSION and set its value to be the version number of Node that you are using",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\project_cv_application.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "eaf9c01a67acb841b1875fa51228d89a",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\project_cv_application.md",
    "source_type": "git_repo",
    "title": "project_cv_application",
    "content": "blue button \"+\" or \"Add\" and navigate to \"Pages\" in the dropdown On the \"Pages\" tab click \"Connect to Git\" Connect to GitHub and select your GitHub repository Under \"Set up builds and deployments\", set npm run build as the build command, and dist as the build output directory Under \"Environment variables (advanced)\" > \"Add variable\", add a variable named NODE_VERSION and set its value to be the version number of Node that you are usingYou can find this by executing node -v in your terminal Hit \"Save and Deploy\" and watch it come to life Cloudflare Links\nCloudflare Pages Homepage\nCloudflare Pages documentation website\nVite deployment to Cloudflare Pages discusses these very steps",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\project_cv_application.md",
      "source_type": "git_repo"
    },
    "token_count": 143,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "10ec88bc08e0dccca70d4f691cbb6a85",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\project_memory_card.md",
    "source_type": "git_repo",
    "title": "project_memory_card",
    "content": "Introduction\nHere we go again with a new project! Let's make sure you understand the concepts so far. The main goal of this project is to implement the concepts learned so far by using hooks to manage and utilize state while fetching and using data from an external API.\nHow the game works\nGo play around with this student's solution to find out for yourself how the Memory game works. Although this example uses cartoon characters, you can use anything you like for your game.\nAssignment\n1. Create a new React Project.\n1. Take some time to think about the features you want to implement, which components you need, how to structure your application, and how to get the images from an API. Your application should include a scoreboard, which counts the current score, and a \"Best Score\", which shows the highest score you've achieved thus far. There should be a function that displays the cards in a random order anytime a user clicks one. Be sure to invoke that function when the component mounts.\n1. You also need a handful of cards that display images and possibly informational text. These images and texts need to be fetched from an external API. You can use anything from [Giphy](https://giphy.com/) to a [Pokemon API](https://pokeapi.co/).\n1. Now that you've thought about the structure of your application, set up the folder structure and start creating the components.\n1. Style your application so you can show it off!\n1. As always, push the project to GitHub, and don't forget to deploy it.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1647,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\project_memory_card.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aa19d375766a100f04e7c7b2baf16ec1",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
    "source_type": "git_repo",
    "title": "{person.name}",
    "content": "Introduction\nThis lesson will build upon the previous lesson on state and introduce further concepts and techniques to manage state Let's dive in Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to structure state How state updates Learn about controlled components How to structure state\nManaging and structuring state effectively is by far one of the most crucial parts of building your application If not done correctly, it can become a source of bugs and headaches The assignment items go through the topic thoroughly, but as a general rule of thumb: don't put values in state that can be calculated using existing values, state, and/or props State should not be mutated\nMutating state is a no-go area in React as it leads to unpredictable results Primitives are already immutable, but if you are using reference-type values, i e , arrays and objects, never mutate them According to the React documentation, we should treat state as if it was immutable To change state, we should always use the setState function, which in the case of the example below is the setPerson function ```jsx\nfunction Person() {\nconst [person, setPerson] = useState({ name: \"John\", age: 100 });\n// BAD - Don't do this const handleIncreaseAge = () => {\n// mutating the current state object\nperson age = person age + 1;\nsetPerson(person);\n};\n// GOOD - Do this const handleIncreaseAge = () => {\n// copy the existing person object into a new object\n// while updating the age property\nconst newPerson = { person, age: person age + 1 };\nsetPerson(newPerson);\n};\nreturn (\n<>\n{person name}\n{person age}\nIncrease age\n</>\n);\n}\n```\n#### Objects and arrays in state\nIn the above example, notice how we *create* a new object and then copy the existing state values into the new object while providing a new value for `age` That is because if we don't provide a new object to `setState` it is not guaranteed to re-render the page Therefore, we should always provide a new Object for `setState` to trigger a re-render `setState` uses [Object is()](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) to determine if the previous state is the same As for nested objects and arrays, state can get tricky fast since you will have to copy the nested items as well Be careful when using them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10676,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "aea1114ace60ca6038969122a2c6db0f",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
    "source_type": "git_repo",
    "title": "{person.name}",
    "content": "That is because if we don't provide a new object to `setState` it is not guaranteed to re-render the page Therefore, we should always provide a new Object for `setState` to trigger a re-render `setState` uses [Object is()](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) to determine if the previous state is the same As for nested objects and arrays, state can get tricky fast since you will have to copy the nested items as well Be careful when using themHow state updates\nState updates are asynchronous What this implies is that whenever you call the setState function, React will apply the update in the next component render This concept can take a while to wrap your head around With a lot of practice, you'll get the hang of it in no time Remember, state variables aren't reactive; the component is This can be understood by the fact that calling setState re-renders the entire component instead of just changing the state variable on the fly ```jsx\nfunction Person() {\nconst [person, setPerson] = useState({ name: \"John\", age: 100 });\nconst handleIncreaseAge = () => {\nconsole log(\"in handleIncreaseAge (before setPerson call): \", person);\nsetPerson({ person, age: person age + 1 });\n// we've called setPerson, surely person has updated console log(\"in handleIncreaseAge (after setPerson call): \", person);\n};\n// this console log runs every time the component renders\n// what do you think this will print console log(\"during render: \", person);\nreturn (\n<>\n{person name}\n{person age}\nIncrease age\n</>\n);\n}\n```\nThese are the logs:\nUh-oh, what is happening Let's break it down (ignore the double console logs for the render case; this is covered in the upcoming lessons) The component renders for the first time The person state variable is initialized to { name: 'John', age: 100 } The \"during render\" console log prints the state variable The button is clicked invoking handleIncreaseAge Interestingly, the console log before and after the setPerson call prints the same value The component re-renders The person state variable is updated to { name: 'John', age: 101 } The person state stays the same throughout the current render of the component This is what \"state as a snapshot\" refers to",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10676,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "4b7363fb126de8899379c658f5c06fa8",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
    "source_type": "git_repo",
    "title": "{person.name}",
    "content": "is initialized to { name: 'John', age: 100 } The \"during render\" console log prints the state variable The button is clicked invoking handleIncreaseAge Interestingly, the console log before and after the setPerson call prints the same value The component re-renders The person state variable is updated to { name: 'John', age: 101 } The person state stays the same throughout the current render of the component This is what \"state as a snapshot\" refers toThe setState call triggers a component re-render, and the person state is updated to the new value #### The unexpected infinite loop\nThe following is an infinite loop; can you guess why Drop by in the [TOP Discord server](https://discord gg/fbFCkYabZB), tell us why, and score a brownie point ```jsx\nfunction Component() {\nconst [count, setCount] = useState(0);\nsetCount(count + 1);\nreturn {count};\n}\n```\nState updater functions\nA trick question Let's look at another implementation of handleIncreaseAge; what do you think it does jsx\nconst handleIncreaseAge = () => {\nsetPerson({ person, age: person age + 1 });\nsetPerson({ person, age: person age + 1 });\n};\nSurely, it will increase the age by 2 Nope The above code is saying to React:\nHey, replace the current render's person with an increase in age by 1 Then, replace the current render's person with an increase in age by 1 Notice the word \"replace\" When you pass in the value to the setState function, React will replace the current state with the value you passed in You might be wondering, what if I want to update the state multiple times using the latest state This is where the state updater function comes in jsx\nconst handleIncreaseAge = () => {\nsetPerson((prevPerson) => ({ prevPerson, age: prevPerson age + 1 }));\nsetPerson((prevPerson) => ({ prevPerson, age: prevPerson age + 1 }));\n};\nWhen a callback is passed to the setState function, it ensures that the latest state is passed in as an argument to the callback Using an updater is not always necessary If you want to change the state using your previous state and you prefer consistency over verbosity, then you might consider using an updater",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10676,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9c64205d72a9dc9a45d478024aa760f1",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
    "source_type": "git_repo",
    "title": "{person.name}",
    "content": "setPerson((prevPerson) => ({ prevPerson, age: prevPerson age + 1 })); setPerson((prevPerson) => ({ prevPerson, age: prevPerson age + 1 })); }; When a callback is passed to the setState function, it ensures that the latest state is passed in as an argument to the callback Using an updater is not always necessary If you want to change the state using your previous state and you prefer consistency over verbosity, then you might consider using an updater#### React batches state updates\nThere are two `setPerson` calls in the above example, and from what we've learned so far, a `setState` call triggers a component re-render So, the component should re-render twice, right You would say yes, but React is smart Wherever possible, React batches the state updates Here, the component only re-renders once We'd encourage you to use `console log`s to verify this Controlled components\nThere are native HTML elements that maintain their own internal state The input element is a great example You type into an input and it updates its own value on every keystroke For many use-cases, you would like to control the value of the input element, i e , set its value yourself This is where controlled components come in ```jsx\nfunction CustomInput() {\nconst [value, setValue] = useState(\"\");\nreturn (\nsetValue(event target value)}\n/>\n);\n}\n```\nInstead of letting the input maintain its own state, we define our own state using the useState hook We then set the value prop of the input to the state variable and update the state variable on every onChange event Now, every time the user types something in the input, React will ensure you have the latest comment, review, or post (whatever the user was typing) in value This pattern is extremely useful wherever you need user input, i e , typing in a textbox, toggling a checkbox, etc Contrarily, yes, the input element can be left uncontrolled and access its value through some other method You don't need to worry about it yet, as it will be covered later on in the course For now, control your components Assignment\n1 Read the following articles from the React documentation:\n- [State as a Snapshot](https://react dev/learn/state-as-a-snapshot)\n- [Choosing the State Structure](https://react dev/learn/choosing-the-state-structure)\n- [Sharing State Between Components](https://react",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10676,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "8156981a329447a79bb95a27ea0f758e",
    "source_file": "corpus\\git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
    "source_type": "git_repo",
    "title": "{person.name}",
    "content": ", typing in a textbox, toggling a checkbox, etc Contrarily, yes, the input element can be left uncontrolled and access its value through some other method You don't need to worry about it yet, as it will be covered later on in the course For now, control your components Assignment 1 Read the following articles from the React documentation: - [State as a Snapshot](https://react dev/learn/state-as-a-snapshot) - [Choosing the State Structure](https://react dev/learn/choosing-the-state-structure) - [Sharing State Between Components](https://reactdev/learn/sharing-state-between-components)\n1 Update the `Person` component we've been using above - Add two separate input fields for the first name and the last name Either of these should be able to update the full name in the `h1` element with every keystroke - There are many ways you can do this Keep in mind what you've learned in this lesson while coding it out Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What should you keep in mind while declaring state Why should we always use setState to update our state What does \"state as a snapshot\" mean What's the difference between passing a value vs a callback to the setState function Why should we always provide a new Object to setState Why would you want to control a component Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental We intentionally skipped some of the articles pertaining to state from the React documentation We are confident that the concepts covered thus far will equip you with enough knowledge to tackle the projects to come in the course Though if you want to delve into the topic further, you can read all of the articles in the Adding Interactivity and the Managing State section",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10676,
      "relative_path": "git_repos\\odin-project\\react\\states_and_effects\\more_on_state.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "70ac25d4fe51f01b9160f4491072abb7",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\project_shopping_cart.md",
    "source_type": "git_repo",
    "title": "project_shopping_cart",
    "content": "Introduction\nBy now you've come far from your React-baby days You have tools like routers and testing frameworks under your belt but you still have a long way to go Now is a great time to put these concepts to use with a classic project - a mock shopping cart Assignment\n1 Create a new React project 1 Think about the component and the folder structure How could you set up your application Which components or functionalities do you need It's a good idea to note this down somewhere you can easily get to and refer back and add to it to keep track 1 You should have at least two pages (a home page and a shop page, which includes your shopping cart) Let the user navigate between the pages with a navigation bar, which will be shown on both pages 1 To your homepage, you can add whatever you'd like A few images or information will be totally fine; it doesn't have to be something fancy - it's to test the concepts taught thus far 1 On the shopping cart page, you should have the same navigation bar that displays the number of items currently in the cart You should also have a button next to it where you can go to the cart to checkout and pay (however we are not going to implement this logic here) 1 Build individual card elements for each of your products Display an input field on it, which lets a user manually type in how many items they want to buy Also, add an increment and decrement button next to it for fine-tuning You can also display a title for each product as well as an \"Add To Cart\" button 1 Fetch your shop items from [FakeStore API](https://fakestoreapi com) or something similar 1 Once a user has submitted their order, the amount on the cart itself should adjust accordingly 1 Clear out any `missing in props validation` errors in your app 1 Make sure to test your app thoroughly using the React Testing Library Be careful not to test `react-router-dom` directly, since it is an external library and the developers working on it must have tested the library already 1 As usual, style your application so you can show it off You have a host of options provided already 1 Lastly, it's time to deploy it Depending on what hosting solution you're using, you may need some additional configuration so that your routing is handled correctly as a single page application (SPA) 1 **Netlify**: You need to add a `_redirects` file to the `public/` directory of your project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3726,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\project_shopping_cart.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ef20f8506908f1f208d57184e1ad3855",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\project_shopping_cart.md",
    "source_type": "git_repo",
    "title": "project_shopping_cart",
    "content": "it must have tested the library already 1 As usual, style your application so you can show it off You have a host of options provided already 1 Lastly, it's time to deploy it Depending on what hosting solution you're using, you may need some additional configuration so that your routing is handled correctly as a single page application (SPA) 1 **Netlify**: You need to add a `_redirects` file to the `public/` directory of your projectCopy the following to redirect all routes to the index page and let `react-router-dom` handle the rest You can read more about this at the [Netlify documentation on redirects](https://docs netlify com/routing/redirects/) ```text\n/* /index html 200\n```\n1 **Vercel**: You need to add a `vercel json` file at the root of your project and copy the following configuration Similar to Netlify, this redirects all routes to the index page and lets `react-router-dom` handle the rest More information can be found here at the [Vercel documentation for SPAs and Vite](https://vercel com/docs/frameworks/vite#using-vite-to-make-spas) ```json\n{\n\"rewrites\": [\n{\n\"source\": \"/( *)\",\n\"destination\": \"/index html\"\n}\n]\n}\n```\n1 **Cloudflare Pages**: As of the time of writing, unlike Netlify and Vercel, no additional steps are required as the default behaviour will allow `react-router-dom` to correctly handle redirects for SPAs You can learn more about this at the [Cloudflare documentation on serving pages](https://developers cloudflare com/pages/platform/serving-pages/)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3726,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\project_shopping_cart.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aeb199c5d490e4b26595a8900ed71e5f",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
    "source_type": "git_repo",
    "title": "An image",
    "content": "Introduction\nUp to this point, we have been using React to build client-side applications with interactive user interfaces, but what if we want to fetch data from the internet In order to create full-fledged web applications, we need some way to get data from external sources and dynamically display it In this lesson, we'll explore the ins and outs of fetching data in React, starting with the basics of making API calls, managing component state, and handling asynchronous operations using JavaScript's fetch function You've already performed data fetching in earlier projects, so some material covered in the lesson will be familiar to you Revision doesn't hurt Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand how to make fetch requests in React components Catching and handling errors Lifting requests up the component hierarchy A basic fetch request\nBefore we dive into the specifics of fetching data in React, let's briefly revisit how we can use the fetch API to get data from a server javascript\nconst image = document querySelector(\"img\");\nfetch(\"https://jsonplaceholder typicode com/photos\", {\nmode: \"cors\",\n}) then((response) => response json()) then((response) => {\nimage src = response[0] url;\n}) catch((error) => console error(error));\nWe're making a request to the JSONPlaceholder API to retrieve an image, and then setting that URL to the src of an <img> element Using fetch in React components\nNow, let's take a look at how we can incorporate fetch into a React component, similar to our previous example One common use case is to fetch data from an API when a component mounts, so that the data can be displayed on screen Whenever a component needs to make a request as it renders, it's often best to wrap that fetch inside of an effect ```jsx\nimport { useEffect, useState } from \"react\";\nconst Image = () => {\nconst [imageURL, setImageURL] = useState(null);\nuseEffect(() => {\nfetch(\"https://jsonplaceholder typicode com/photos\", { mode: \"cors\" }) then((response) => response json()) then((response) => setImageURL(response[0] url)) catch((error) => console error(error));\n}, []);\nreturn (\nimageURL && (\n<>\nAn image\n</>\n)\n);\n};\nexport default Image;\n```\nuseState lets us add the imageURL state, whereas useEffect allows us to perform side effects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12835,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "021131c9e623391942c48defe72de824",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
    "source_type": "git_repo",
    "title": "An image",
    "content": "an effect ```jsx import { useEffect, useState } from \"react\"; const Image = () => { const [imageURL, setImageURL] = useState(null); useEffect(() => { fetch(\"https://jsonplaceholder typicode com/photos\", { mode: \"cors\" }) then((response) => response json()) then((response) => setImageURL(response[0] url)) catch((error) => console error(error)); }, []); return ( imageURL && ( <> An image </> ) ); }; export default Image; ``` useState lets us add the imageURL state, whereas useEffect allows us to perform side effectsIn this case, the side effect is fetching data from an external API Since we need to fetch the data only once when the component mounts, we pass an empty dependency array Handling errors\nWorking over the network is inherently unreliable The API you're making a request to might be down, there could be network connectivity issues, or the response you receive could contain errors A multitude of things can go wrong, and if you don't preemptively plan for errors, your website can break or appear unresponsive to users To simulate a network error, scroll up to the previous code snippet and change the fetch URL to something random After a refresh of your browser window, the page will remain a blank white screen, without giving the user any indication that the page has finished loading or that there was an error To fix this, we need to check for something before Image component returns JSX We'll call it: error ```jsx\nif (error) return A network error was encountered\nreturn (\nimageURL && (\n<>\nAn image\n</>\n)\n);\n```\nTo set this error, we'll add it to the component's state jsx\nconst [imageURL, setImageURL] = useState(null);\nconst [error, setError] = useState(null);\nAnd finally, to assign error a value when a request fails, we'll add a conditional to check the response status, and set it where our console error line was jsx\nuseEffect(() => {\nfetch(\"https://jsonplaceholder typicode com/photos\", { mode: \"cors\" }) then((response) => {\nif (response status >= 400) {\nthrow new Error(\"server error\");\n}\nreturn response json();\n}) then((response) => setImageURL(response[0] url)) catch((error) => setError(error));\n}, []);\nNotice how we also handle errors in the `then` block",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12835,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2d49a390a11b818b6cf7144059440ecb",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
    "source_type": "git_repo",
    "title": "An image",
    "content": "finally, to assign error a value when a request fails, we'll add a conditional to check the response status, and set it where our console error line was jsx useEffect(() => { fetch(\"https://jsonplaceholder typicode com/photos\", { mode: \"cors\" }) then((response) => { if (response status >= 400) { throw new Error(\"server error\"); } return response json(); }) then((response) => setImageURL(response[0] url)) catch((error) => setError(error)); }, []); Notice how we also handle errors in the `then` blockThis is because the `fetch` request itself might not fail, but rather complete successfully and yield a response However, the response received may not be what our app expected To handle this case, we check the response status codes Now when a bad URL is passed or the API returns an unexpected response, the page will relay that information to the user Loading state\nIn the same way we added an error value in state to check for errors, we can also add a loading value to check whether the request is resolved or not ```jsx\nconst Image = () => {\nconst [imageURL, setImageURL] = useState(null);\nconst [error, setError] = useState(null);\nconst [loading, setLoading] = useState(true);\nuseEffect(() => {\nfetch(\"https://jsonplaceholder typicode com/photos\", { mode: \"cors\" }) then((response) => {\nif (response status >= 400) {\nthrow new Error(\"server error\");\n}\nreturn response json();\n}) then((response) => setImageURL(response[0] url)) catch((error) => setError(error)) finally(() => setLoading(false));\n}, []);\nif (loading) return Loading ;\nif (error) return A network error was encountered;\nreturn (\n<>\nAn image\n</>\n);\n};\n```\nUsing custom hooks\nWe can separate out the fetching logic altogether into a custom hook This will allow us to make the logic reusable and easily testable Recall in the Introduction to state lesson we said that a React hook is just a function that lets you use features of React (like states, effects etc ) and that they follow a naming rule where they begin with use followed by a capital letter (e g useState or useEffect)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12835,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "ad61767d5cc0b60e933d291376d0e918",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
    "source_type": "git_repo",
    "title": "An image",
    "content": "hooks We can separate out the fetching logic altogether into a custom hook This will allow us to make the logic reusable and easily testable Recall in the Introduction to state lesson we said that a React hook is just a function that lets you use features of React (like states, effects etc ) and that they follow a naming rule where they begin with use followed by a capital letter (e g useState or useEffect)If we tried to put a hook such as useEffect inside our own regular helper function like getImageURL, React would not be happy about this since it only wants hooks to be called in the top level of a component or another hook Therefore, we can just turn our helper function into a custom hook by following the hook naming rule - useImageURL Here's how we would do it for our example:\n```jsx\nimport { useState, useEffect } from \"react\";\nconst useImageURL = () => {\nconst [imageURL, setImageURL] = useState(null);\nconst [error, setError] = useState(null);\nconst [loading, setLoading] = useState(true);\nuseEffect(() => {\nfetch(\"https://jsonplaceholder typicode com/photos\", { mode: \"cors\" }) then((response) => {\nif (response status >= 400) {\nthrow new Error(\"server error\");\n}\nreturn response json();\n}) then((response) => setImageURL(response[0] url)) catch((error) => setError(error)) finally(() => setLoading(false));\n}, []);\nreturn { imageURL, error, loading };\n};\nconst Image = () => {\nconst { imageURL, error, loading } = useImageURL();\nif (loading) return Loading ;\nif (error) return A network error was encountered;\nreturn (\n<>\nAn image\n</>\n);\n};\n```\nIf we ever needed to fetch images in different components, instead of rewriting all of that fetching logic we could call useImageURL Managing multiple fetch requests\nIn a full-scale web app, you're often going to be making more than one request, and you need to be careful with how you organize them A common issue that new React developers face when their apps start making multiple requests is called a waterfall of requests Let's look at an example We have two components making fetch requests: Profile and its child component Bio The requests in Profile and Bio are both firing inside of their respective components On the surface this looks like a well-organized separation of concerns, but in this case, it comes at a cost in performance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12835,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "bd236cec5a6dd7beedbb6d4359078c37",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
    "source_type": "git_repo",
    "title": "An image",
    "content": "them A common issue that new React developers face when their apps start making multiple requests is called a waterfall of requests Let's look at an example We have two components making fetch requests: Profile and its child component Bio The requests in Profile and Bio are both firing inside of their respective components On the surface this looks like a well-organized separation of concerns, but in this case, it comes at a cost in performanceNotice how Bio is taking an extra second to display Their fetch requests should both take 1000ms to resolve so what's going on In React, the component is not rendered until it is actually called If JSX has conditional logic, the false branches will never render until they become true Bio has to wait for the request inside of Profile to resolve before it starts rendering, which means the request inside Bio isn't sent If we remove the short-circuiting conditional that waits for imageURL, Bio would send a request immediately, but that would mean abandoning our loading screen Instead of compromising on design, we can lift the request up the component tree and pass its response as a prop to Bio To see this in action, go back to that embedded CodeSandbox and comment out the current Profile and Bio components, and uncomment the currently commented ones Now we have both requests firing as soon as Profile renders The request for imageURL resolves 2 seconds before the bioText request, and our div containing <Bio /> renders When bioText resolves, an update will be made in state which will trigger a rerender in <Bio />, adding that text description to the page In all of the code examples above, we added an artificial `delay` with the `setTimeout` function As you've likely guessed by now, this is to help you walk through the data fetching basics in the lesson We recommend removing these `delay`s and playing around with the code examples to further cement the concepts Data fetching libraries\nWe've only just begun to scratch the surface of data fetching on the frontend Keeping your frontend data up-to-date with the server is a challenging task to accomplish Managing \"async\" state becomes increasingly complex with each added feature You've already tasted the complexity of data fetching in this lesson Each request has to have a minimum of three states to achieve an optimal user experience: data, loading, and error Although some libraries can help you with data fetching and more, it is highly recommended to use vanilla React data fetching for all the projects in this course The lessons you will learn while doing so will be invaluable Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12835,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a8df4386114a8828b9c95f7932fe2ba0",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
    "source_type": "git_repo",
    "title": "An image",
    "content": "with each added feature You've already tasted the complexity of data fetching in this lesson Each request has to have a minimum of three states to achieve an optimal user experience: data, loading, and error Although some libraries can help you with data fetching and more, it is highly recommended to use vanilla React data fetching for all the projects in this course The lessons you will learn while doing so will be invaluable Assignment 1Read [Modern API data fetching methods](https://blog logrocket com/modern-api-data-fetching-methods-react/) until you reach the Axios section for a brief overview of what was discussed in this lesson 1 Read [How to fetch data in React with performance in mind](https://www developerway com/posts/how-to-fetch-data-in-react) to learn more about efficiently handling fetch requests in React components Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How can you fetch data from an API in React Why should you manually throw errors in fetch requests How can you avoid waterfalling requests Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental TanStack Query is a library that handles all the necessary states and offers built-in support for major features, such as caching This article by Nadia Makarevich provides additional information and examples on how to deal with race conditions Do not worry about the useRef hook, as it will be covered later on in the course",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12835,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\fetching_data_in_react.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "8ac14fc893a02f3522ca3edae85869d1",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\styling_react_applications.md",
    "source_type": "git_repo",
    "title": "styling_react_applications",
    "content": "Introduction\nIn the previous courses, you'll have learned a lot of CSS and all of those skills are still applicable to React However, there are a couple of things we'd like to highlight As you've probably already noticed, all of the styles we write share the global scope, which means that as our application grows, it will become increasingly difficult to manage our CSS Some of the tools mentioned below are things people use to help solve this problem Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Know about ways to style React applications CSS modules\nRegular CSS is the simplest way to style CSS Modules let you write CSS style declarations that are scoped locally, which means that we finally no longer have to worry about our class names potentially conflicting with other classes in the global scope CSS in JS\nWhy even write CSS in CSS when you can write it in JavaScript Just kidding, of course CSS-in-JS is a paradigm for styling front-end projects It allows you to entirely take control of CSS with JavaScript and extends it with various features Additionally, it also helps to apply styling in a logical fashion, e g based on state, and also supports modular CSS in the same way that CSS Modules do There are various CSS-in-JS solutions One of the most popular ones in the React ecosystem is styled-components CSS Utility Frameworks\nCSS Utility Frameworks are a popular choice for styling React applications They provide a set of pre-defined classes that you can directly use in your HTML, or JSX in our case Tailwind CSS is by far the most popular choice Component libraries\nWhat if everything's already done for you Styling, behavior, and accessibility are taken care of for you in component libraries As the name suggests, these libraries provide adaptable and reusable components that you can use directly in your project These components include, but are not limited to, dropdowns, drawers, calendars, toggles, tabs, and all other components you can think of Material UI, Radix, and Chakra UI are worth a mention when talking about component libraries There are also icon component libraries like lucide react, which let you include icons in your project as components For learning purposes throughout this course, we strongly recommend that you avoid using CSS frameworks or component libraries (using icon component libraries is fine), and instead implement your component's styling from scratch i e use [CSS Modules](#css-modules) or a [CSS-in-JS](#css-in-js) option Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4193,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\styling_react_applications.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "83d6e66ca472ee350d755bc38b409260",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\styling_react_applications.md",
    "source_type": "git_repo",
    "title": "styling_react_applications",
    "content": "UI, Radix, and Chakra UI are worth a mention when talking about component libraries There are also icon component libraries like lucide react, which let you include icons in your project as components For learning purposes throughout this course, we strongly recommend that you avoid using CSS frameworks or component libraries (using icon component libraries is fine), and instead implement your component's styling from scratch i e use [CSS Modules](#css-modules) or a [CSS-in-JS](#css-in-js) option Assignment 1Read [CSS Modules documentation](https://github com/css-modules/css-modules) and [How to style React components using CSS Modules](https://www makeuseof com/react-components-css-modules-style/) 1 Read [CSS vs CSS-in-JS](https://blog logrocket com/css-vs-css-in-js/) and [a thorough analysis of CSS-in-JS](https://css-tricks com/a-thorough-analysis-of-css-in-js/) 1 Skim through the [styled components documentation](https://styled-components com/) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How can you use CSS Modules in your React app What does CSS-in-JS mean What are component libraries Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Josh Comeau has a nice article on getting the most out of styled-components",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4193,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\styling_react_applications.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4b6e858b7ae52a852c5f336520394a6d",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\type_checking_with_proptypes.md",
    "source_type": "git_repo",
    "title": "type_checking_with_proptypes",
    "content": "Introduction\nType Checking is a process of verifying that a piece of code is using the correct data types for variables, function parameters and return values In the context of React applications, we are going to use PropTypes to do that job PropTypes is a way to type check the props that a React component receives It helps to catch potential type errors during development, making it easier to spot and fix bugs If you have used a linter in your previous React projects, there's a good chance it ended up yelling at you about certain props missing in prop validation, however if that isn't the case- well, lucky you Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Setting up PropTypes Using common PropTypes features Getting started\n#### Important Note on React Version\npropTypes and defaultProps are discontinued from React version 19 Please use React versions lesser than 19 to follow this lesson:\n1 Set up React with Vite as usual It does not matter whether you run `npm install` here or not 1 Change the versions for the following four packages in `package json` to `\"^18\"`:\n- `react`\n- `react-dom`\n- `@types/react`\n- `@types/react-dom`\n1 Run `npm install` To start using PropTypes in our React projects, we first need to install the corresponding library We can do that with npm In your React project run the following command:\nbash\nnpm install --save prop-types\nNext, we want to import the PropTypes package in the component whose props we want to validate javascript\nimport PropTypes from 'prop-types';\nUsing propTypes\nHere is a very basic example of how we would use it in a component that renders out a name prop ```jsx\nimport PropTypes from 'prop-types';\nconst RenderName = (props) => {\nreturn {props name};\n};\nRenderName propTypes = {\nname: PropTypes string,\n};\nexport default RenderName;\n```\nIn this example, the component RenderName expects to receive a prop called name which is a string If this prop is not a string, a warning will be displayed If you want to make sure a prop is being passed in, use isRequired like so:\njavascript\nRenderName propTypes = {\nname: PropTypes string isRequired,\n}\nUsing defaultProps\nAnother cool thing we can do in combination with PropTypes is passing in default props:\n```jsx\nimport PropTypes from 'prop-types';\nconst RenderName = (props) => {\nreturn {props name};\n};\nRenderName",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6077,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\type_checking_with_proptypes.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9cd5bd816ea5dc639f4c2c84f41350c3",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\type_checking_with_proptypes.md",
    "source_type": "git_repo",
    "title": "type_checking_with_proptypes",
    "content": "name which is a string If this prop is not a string, a warning will be displayed If you want to make sure a prop is being passed in, use isRequired like so: javascript RenderName propTypes = { name: PropTypes string isRequired, } Using defaultProps Another cool thing we can do in combination with PropTypes is passing in default props: ```jsx import PropTypes from 'prop-types'; const RenderName = (props) => { return {props name}; }; RenderNamepropTypes = {\nname: PropTypes string,\n};\nRenderName defaultProps = {\nname: 'Zach',\n};\nexport default RenderName;\n```\nIn this example, with the help of the defaultProps property we are defining a default value for the name prop This way, if the RenderName component is called without passing in the name prop, it will default to \"Zach\" When you do pass in props, they will take precedence over the default props What about TypeScript Now is also a good time to mention TypeScript - a strongly typed language that builds on JavaScript We do not cover it in our curriculum and thus do not recommend looking into it now, but in the future, it may be worth learning if you’d like more type safety while writing your code Learning TypeScript can be a lot of overhead when you’re already learning React and the best way to prepare for this is to continue developing your JavaScript fundamentals The TypeScript documentation encourages enhancing JavaScript skills before tackling TypeScript complexities, as highlighted in their discussion on the importance of JavaScript fundamentals In the future however, if you do decide to go in the direction of learning TypeScript, our recommendation would be picking up a previous project and refactoring the components one by one to TypeScript Assignment\n1 Read through the [PropTypes documentation](https://reactjs org/docs/typechecking-with-proptypes html) It shows all of the types you can specify and some other useful things that can be done with it - You may notice this resource suggests using TypeScript over PropTypes in modern React This may well be true for production apps but for our purposes, we are solely interested in the concept of type checking within React, where TypeScript is out of scope 1 You can even set up custom validators in PropTypes For a more in-depth look into the benefits and use cases of PropTypes, read this comprehensive guide [Validating React Props with PropTypes on LogRocket](https://blog logrocket com/validate-react-props-proptypes/) 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6077,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\type_checking_with_proptypes.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4b6eba2358658d00ef1e4b494c31c9fd",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\type_checking_with_proptypes.md",
    "source_type": "git_repo",
    "title": "type_checking_with_proptypes",
    "content": "resource suggests using TypeScript over PropTypes in modern React This may well be true for production apps but for our purposes, we are solely interested in the concept of type checking within React, where TypeScript is out of scope 1 You can even set up custom validators in PropTypes For a more in-depth look into the benefits and use cases of PropTypes, read this comprehensive guide [Validating React Props with PropTypes on LogRocket](https://blog logrocket com/validate-react-props-proptypes/) 1Dive into the nuanced comparison between PropTypes and TypeScript for type safety in React with this [StackOverflow post on differences between PropTypes and TypeScript](https://stackoverflow com/questions/41746028/proptypes-in-a-typescript-react-application) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How would we set up a basic implementation of PropTypes If we pass in a prop to a component that has a defaultProp defined, what would happen What is the difference between PropTypes and TypeScript Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6077,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\type_checking_with_proptypes.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0517d2931a05cb0e55d025bd86fee328",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "Introduction\nUp until this point in the curriculum, we have been building one-page applications However, for any larger scale application, we are going to have multiple pages Thankfully, the browser allows client-side JavaScript to manage the way a user can navigate, with the History API We can leverage the power of this to manage routing in React with the help of a package like React Router Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand what client-side routing is Learn how to use React Router for client-side routing Explore how to create nested and dynamic paths in React Router Discover how to add a 'catch-all' route in React Router Learn how to pass data from a parent component to any child components rendered via an outlet Understand how to implement protected routes in React Router Client-side routing\nClient-side routing is the type of routing where JavaScript takes over the duty of handling the routes in an application Client-side routing helps in building single-page applications (SPAs) without refreshing as the user navigates For example, when a user clicks a navbar element, the URL changes and the view of the page is modified accordingly, within the client Say you are cooking some chicken If you want to cook it well and nice, you will have to:\nPut the chicken in the oven and set it to cook with appropriate time and heating\nWait till the dish gives out that satisfying smell\nStart munching This is common to all websites, you set the oven up for what you want (visit any URL, like https://theodinproject com/), wait for the oven to be done with the cooking (the loading screen), and tada, enjoy your delicious food (your page is ready for use) But what if you forgot to add some spices before you cooked it up You have to repeat this flow again:\nGet up from your seat\nAdd the spices to the chicken\nGo back to the oven, put the chicken back in and set it up to be reheated\nWait for it to be nice and warm\nNow you can eat it Here is where we reiterate, you need to get up from your seat In a general multi-page application (MPAs), the browser reloads every time you click on a link to navigate With client-side routing, you never leave the page you are on - you bring a microwave to the table to ensure that you don't have to get up from your seat should you ever run into the \"missing spices\" issue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "9d5d1d4803970e3feea8bfe286f849af",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "Now you can eat it Here is where we reiterate, you need to get up from your seat In a general multi-page application (MPAs), the browser reloads every time you click on a link to navigate With client-side routing, you never leave the page you are on - you bring a microwave to the table to ensure that you don't have to get up from your seat should you ever run into the \"missing spices\" issueThe link requests are intercepted by the JavaScript that you write, instead of letting them go directly to the server A Reactive solution\nWhile client-side routing allows for nicer, app-like interactions (since you are controlling the routes, you can make fancy CSS animations across route changes), a lot of caveats can be missed When a browser reloads, it notifies screen-readers of new content to read, but in the case of client-side routing, you will need to notify screen-readers of route updates manually However, with the help of a robust library, you can often address these concerns React Router is a standard routing library for React applications By using React Router, we can specify React components, that can be rendered based on the route, and so much more Let's dive in Adding a router\nLet's make a small app to understand how this router is implemented Create a new React project and let's start by adding some mock pages as an example Create a new Profile jsx file with the following component:\n```jsx\nconst Profile = () => {\nreturn (\nHello from profile page So, how are you );\n};\nexport default Profile;\n```\nReplace the App jsx file with some basic content too:\n```jsx\nconst App = () => {\nreturn (\nHello from the main page of the app Here are some examples of links to other pages\nProfile page\n);\n};\nexport default App;\n```\nNow it's time to add the router There's a couple of ways of defining our app's routes, but in React Router v6 7 0 or higher, it is recommended to add routes as objects Let us install the React Router package:\nnpm install react-router-dom\nAdd the following to main jsx, we will talk about what is happening in a little bit ```jsx\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport App from \" /App\";\nimport Profile from \"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "2a5c4a6751687803aaafba6ce7384137",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "our app's routes, but in React Router v6 7 0 or higher, it is recommended to add routes as objects Let us install the React Router package: npm install react-router-dom Add the following to main jsx, we will talk about what is happening in a little bit ```jsx import { StrictMode } from \"react\"; import { createRoot } from \"react-dom/client\"; import { createBrowserRouter, RouterProvider } from \"react-router-dom\"; import App from \" /App\"; import Profile from \"/Profile\";\nconst router = createBrowserRouter([\n{\npath: \"/\",\nelement: ,\n},\n{\npath: \"profile\",\nelement: ,\n},\n]);\ncreateRoot(document getElementById(\"root\")) render(\n);\n```\nOnce this is done, go ahead and run npm run dev and check out both routes: the home route / and the profile route /profile It works But what is happening here We import createBrowserRouter and RouterProvider from React Router createBrowserRouter is used to create the configuration for a router by passing arguments in the form of an array of routes The configuration array contains objects with two mandatory keys, the path and the corresponding element to be rendered This generated configuration is then rendered in, by passing it to the RouterProvider component The link element\nBut you may notice, when we click the links in the navbar, the browser is reloading for the next URL instead of using React Router This isn't what was promised To help with this, React Router exports a custom Link element to be used instead of the regular a tag We can replace the a tag in our navbar with the Link element ```jsx\nimport { Link } from \"react-router-dom\";\nconst App = () => {\nreturn (\nHello from the main page of the app Here are some examples of links to other pages\nProfile page\n);\n};\nexport default App;\n```\nAnd now, we don't get the browser reloading every time we click the link on the navbar Nested routes, outlets and dynamic segments\nNow, what if you want to render a section of a page differently, based on different URLs This is where nested routes come into play We can add routes nested as the children of one another to ensure that the child gets rendered alongside the parent Create a couple of components, Popeye jsx and Spinach jsx ```jsx\nimport { Link } from \"react-router-dom\";\nconst Popeye = () => {\nreturn (\n<>\nHi, I am Popeye I love to eat Spinach",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "9b014e9ab5d16542b196bf418714601f",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "to render a section of a page differently, based on different URLs This is where nested routes come into play We can add routes nested as the children of one another to ensure that the child gets rendered alongside the parent Create a couple of components, Popeye jsx and Spinach jsx ```jsx import { Link } from \"react-router-dom\"; const Popeye = () => { return ( <> Hi, I am Popeye I love to eat SpinachClick here to go back\n</>\n);\n};\nexport default Popeye;\n```\n```jsx\nimport { Link } from \"react-router-dom\";\nconst Spinach = () => {\nreturn (\n<>\nHi, I am Spinach Popeye loves to eat me Click here to go back\n</>\n);\n};\nexport default Spinach;\n```\nNow, we can rewrite the routes as given:\n```jsx\nimport { StrictMode } from \"react\"\nimport { createRoot } from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport App from \" /App\";\nimport Profile from \" /Profile\";\nimport Spinach from \" /Spinach\";\nimport Popeye from \" /Popeye\";\nconst router = createBrowserRouter([\n{\npath: \"/\",\nelement: ,\n},\n{\npath: \"profile\",\nelement: ,\nchildren: [\n{ path: \"spinach\", element:  },\n{ path: \"popeye\", element:  },\n],\n},\n]);\ncreateRoot(document getElementById(\"root\")) render(\n,\n);\n```\nThis allows us to render the child component alongside the parent, through an Outlet component We can rewrite the Profile component to add an Outlet which will get replaced by the various profiles when that route is visited ```jsx\nimport { Outlet } from \"react-router-dom\";\nconst Profile = () => {\nreturn (\nHello from profile page So, how are you The profile visited is here:\n);\n};\nexport default Profile;\n```\nCheck out the /profile page To visit /profile/popeye or /profile/spinach pages, manually add /popeye or /spinach to the end of the current URL The <Outlet /> component gets replaced with the children component when their paths are visited If you want to render something as a default component when no path is added to Profile, you can add an index route to the children Create a DefaultProfile component:\n```jsx\nconst DefaultProfile = () => {\nreturn Oh, nothing to see here",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "26f84f2b6b22b33c1821079ef28a8564",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "To visit /profile/popeye or /profile/spinach pages, manually add /popeye or /spinach to the end of the current URL The <Outlet /> component gets replaced with the children component when their paths are visited If you want to render something as a default component when no path is added to Profile, you can add an index route to the children Create a DefaultProfile component: ```jsx const DefaultProfile = () => { return Oh, nothing to see here;\n};\nexport default DefaultProfile;\n```\nNow, add an index property with the DefaultProfile as a child to the /profile route ```jsx\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport App from \" /App\";\nimport Profile from \" /Profile\";\nimport DefaultProfile from \" /DefaultProfile\";\nimport Spinach from \" /Spinach\";\nimport Popeye from \" /Popeye\";\nconst router = createBrowserRouter([\n{\npath: \"/\",\nelement: ,\n},\n{\npath: \"profile\",\nelement: ,\nchildren: [\n{ index: true, element:  },\n{ path: \"spinach\", element:  },\n{ path: \"popeye\", element:  },\n],\n},\n]);\ncreateRoot(document getElementById(\"root\")) render(\n,\n);\n```\nIf you visit the /profile path now, you should be able to see some default content where the Outlet is rendered when the index path is rendered But this example brings another dilemma Sometimes, we want to render content according to the URLs That, here, would mean that we should be able to render content dynamically, from the component itself Thankfully, you can do so with dynamic segments Change the routes to be the following:\n```jsx\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport App from \" /App\";\nimport Profile from \" /Profile\";\nconst router = createBrowserRouter([\n{\npath: \"/\",\nelement: ,\n},\n{\npath: \"profile/:name\",\nelement: ,\n},\n]);\ncreateRoot(document getElementById(\"root\")) render(\n,\n);\n```\nThe colon (:) turns the path section after it into a \"dynamic segment\" Dynamic segments will match dynamic (changing) values in that position of the URL, like the name",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "86cc86a53e27bea2675b1c8825ed4378",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "\"react\"; import { createRoot } from \"react-dom/client\"; import { createBrowserRouter, RouterProvider } from \"react-router-dom\"; import App from \" /App\"; import Profile from \" /Profile\"; const router = createBrowserRouter([ { path: \"/\", element: , }, { path: \"profile/:name\", element: , }, ]); createRoot(document getElementById(\"root\")) render( , ); ``` The colon (:) turns the path section after it into a \"dynamic segment\" Dynamic segments will match dynamic (changing) values in that position of the URL, like the nameThese can also be called \"URL params\" or \"params\" in short These can be used with the help of the useParams hook We can thus rewrite the Profile component as the following:\n```jsx\nimport { useParams } from \"react-router-dom\";\nimport DefaultProfile from \" /DefaultProfile\";\nimport Spinach from \" /Spinach\";\nimport Popeye from \" /Popeye\";\nconst Profile = () => {\nconst { name } = useParams();\nreturn (\nHello from profile page So, how are you The profile visited is here:\n{name === \"popeye\" (\n) : name === \"spinach\" (\n) : (\n)}\n);\n};\nexport default Profile;\n```\nHandling bad urls\nBut alas, the index path doesn't work with this anymore, as in the /profile path, no params are actually passed Actually, the /profile path doesn't make much sense without an actual name, else whose profile is it supposed to show, right So, the application shows an error This can't be good, so how do you show a default page in case the user visits a wrong or unused path You can pass in an errorElement argument here Create a basic \"Not Found\" page:\n```jsx\nimport { Link } from \"react-router-dom\";\nconst ErrorPage = () => {\nreturn (\nOh no, this route doesn't exist You can go back to the home page by clicking here, though );\n};\nexport default ErrorPage;\n```\nAdd the errorElement to the configuration, and verify that it renders an error page by going to the /profile path or any unmentioned paths We'll wire this back up in the assignment ```jsx\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport App from \" /App\";\nimport Profile from \"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "31474cfb4fbf9f0789bf3a10990ebf50",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "back to the home page by clicking here, though ); }; export default ErrorPage; ``` Add the errorElement to the configuration, and verify that it renders an error page by going to the /profile path or any unmentioned paths We'll wire this back up in the assignment ```jsx import { StrictMode } from \"react\"; import { createRoot } from \"react-dom/client\"; import { createBrowserRouter, RouterProvider } from \"react-router-dom\"; import App from \" /App\"; import Profile from \"/Profile\";\nimport ErrorPage from \" /ErrorPage\";\nconst router = createBrowserRouter([\n{\npath: \"/\",\nelement: ,\nerrorElement: ,\n},\n{\npath: \"profile/:name\",\nelement: ,\n},\n]);\ncreateRoot(document getElementById(\"root\")) render(\n,\n);\n```\nRefactoring the routes\nLet's refactor our array of routes into its own file By refactoring, we can import the routes into main jsx and create a browser router from it, as in the above example What's convenient about this is that we can also import the routes array into any test files, where we might need to create a memory router instead of a browser router Create a new routes jsx file and move the routes array to it:\n```jsx\nimport App from \" /App\";\nimport Profile from \" /Profile\";\nimport ErrorPage from \" /ErrorPage\";\nconst routes = [\n{\npath: \"/\",\nelement: ,\nerrorElement: ,\n},\n{\npath: \"profile/:name\",\nelement: ,\n},\n];\nexport default routes;\n```\nImport the routes to your main jsx file:\n```jsx\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport routes from \" /routes\";\nconst router = createBrowserRouter(routes);\ncreateRoot(document getElementById(\"root\")) render(\n,\n);\n```\nMuch nicer Outlets and state\nAs we learned earlier, you can nest routes as children of a parent route, allowing you to use an <Outlet /> in the parent to render the appropriate element based on the rest of the path If we had data in the parent element, such as a state, that we wanted to pass to any components rendered by that outlet, we would have to use something called context For now, we will focus on context with outlets, but in a later lesson, we will learn more about how to use context without outlets Outlets have a context prop built in",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "e36a6da15bd7ac06efe6e8f9291763d9",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "to render the appropriate element based on the rest of the path If we had data in the parent element, such as a state, that we wanted to pass to any components rendered by that outlet, we would have to use something called context For now, we will focus on context with outlets, but in a later lesson, we will learn more about how to use context without outlets Outlets have a context prop built inWe can pass any value we want into this prop, even an array or object Inside any component that would be rendered within that outlet (even \"grandchild\" components), we can call the useOutletContext() hook which will return whatever we passed into that context prop If we passed in an array or object, we could even destructure it Take a look at React Router's documentation on useOutletContext to learn more about how to pass context through an outlet and access that context in child components Protected routes and navigation\nOften, you will need to decide whether a certain route should be rendered or not One example is authentication, where you render certain routes based on if the user is logged in or not If they are logged in, you show some information about the user like here at The Odin Project dashboard page Otherwise, they are redirected to the sign-in page (this could be any page) While there are many ways to do so, one of the easiest ways is to conditionally create a config for the router You will often come across the need to reroute the user to a different URL programmatically This is where we use the <Navigate />component The <Navigate /> component reroutes the user to the desired URL when it is rendered It is a wrapper around the useNavigate hook that lets you navigate programmatically, to URLs, or even go back down the user's history Conclusion\nYou should now have enough basics to get started with React routing There are a lot more features to react-router-dom which are extremely useful, but out of the scope of this lesson We're confident that the concepts covered above should be enough to get you through the React course If you are interested in learning some more, we recommend you look into the history or match object Definitely go and check out more advanced concepts once you are familiar with the basics Assignment\n1 This article on [SPAs and client-side routing by Ben Holmes](https://bholmes dev/blog/spas-clientside-routing/) goes through a lot of the routing concepts concisely 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "c8fd0d49699d2440c0d4e244a00c86b0",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "of this lesson We're confident that the concepts covered above should be enough to get you through the React course If you are interested in learning some more, we recommend you look into the history or match object Definitely go and check out more advanced concepts once you are familiar with the basics Assignment 1 This article on [SPAs and client-side routing by Ben Holmes](https://bholmes dev/blog/spas-clientside-routing/) goes through a lot of the routing concepts concisely 1Go and fix the `/profile` page to display something more useful than an error page Then, add a few new routes to the application we created above; This was a dense lesson, so take some time to play with the new tools you've learned Consider deleting it completely and rewriting it using what you know 1 The [React Router tutorial](https://reactrouter com/en/main/start/tutorial) goes through a lot of the stuff discussed in this lesson and much more Have a read through the sections up to \"Nested Routes\" 1 Browse through the [React Router documentation](https://reactrouter com/en/main) Again, you don't need to read through all of it, nor understand all of it Just browse through the concepts we discussed here and re-read them Look into the other features that React Router offers This is a great resource to refer back to Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does client-side routing mean How do you set up a basic router What should be used in place of \"a\" tags to enable client-side routing How do you create nested routes What do you mean by dynamic segments or URL params How do you handle errors from bad URLs How do you pass data from parent to child through an <Outlet /> component How do you create protected routes Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This Stack Overflow answer uses a function to generate the route config object passed to createBrowserRouter The function conditionally generates the different paths This demonstration project creates a special Protected Route component that conditionally displays elements as necessary Loaders are a very useful concept in React but are out of scope of this lesson You can learn more about them from the React Router documentation on Loaders and reading this DEV Community article on loaders",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "8c3c34d991fcd053a7d0e93dedb89eaa",
    "source_file": "corpus\\git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
    "source_type": "git_repo",
    "title": "Hello from profile page!",
    "content": "supplemental This Stack Overflow answer uses a function to generate the route config object passed to createBrowserRouter The function conditionally generates the different paths This demonstration project creates a special Protected Route component that conditionally displays elements as necessary Loaders are a very useful concept in React but are out of scope of this lesson You can learn more about them from the React Router documentation on Loaders and reading this DEV Community article on loadersIf you're more into video content, you may find this video on loaders from Net Ninja helpful",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20901,
      "relative_path": "git_repos\\odin-project\\react\\the_react_ecosystem\\react_router.md",
      "source_type": "git_repo"
    },
    "token_count": 102,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "1e07aa38797fe0ca748bb4c8f5d8383b",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\api_basics.md",
    "source_type": "git_repo",
    "title": "api_basics",
    "content": "Introduction\nIn recent years, a new pattern for developing websites has been gaining popularity Instead of creating an app that hosts both the database and view templates, many developers are separating these concerns into separate projects, hosting their backend and database on a server (either on something like Heroku or on a VPS like Digital Ocean), then using a service such as GitHub Pages or Netlify to host their frontend This technique is sometimes referred to as the Jamstack Organizing your project this way can be beneficial because it allows your project to be more modular instead of combining business logic with view logic This also allows you to use a single backend source for multiple frontend applications, such as a website, a desktop app, or a mobile app Other developers enjoy this pattern because they like using frontend frameworks such as React or Vue to create nice frontend-only, single-page applications Frontend and backend applications usually talk to each other using JSON, which you have already encountered if you've gone through our frontend JavaScript course So at this point, all you really need to learn is how to get your Express application to speak JSON instead of HTML The assignment at the end of this lesson will take you through a tutorial, but essentially all you have to do is pass your information into res json() instead of res send() or res render() How easy is that If you think back to the organization of the routes in the Routes lesson, we grouped related routes together and extracted each group into its own file This approach allowed us to more easily modify specific routes without impacting others Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Know what REST stands for Explain the purpose of using REST when structuring an API Detail the REST naming conventions for your API endpoints Have a reinforced understanding of the HTTP Methods/Verbs Describe the Same Origin Policy Explain the purpose of CORS Use CORS as middleware in Express (Globally and on a single route) Configure CORS to only allow certain origins to access our API Explain CORS headers REST\nThe structure of an API can take many forms, for example you could have routes named /api/getAllPostComments/:postid or /api/posts/:postid/comments However, it's conventional to follow REST (an acronym for Representational State Transfer), a popular and common organizational method for your APIs which corresponds with CRUD actions Following established patterns such as REST make your API more maintainable and make it easier for other developers to integrate with your API",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8003,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\api_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6456105472c8a69de69f4b28ef1f4b3c",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\api_basics.md",
    "source_type": "git_repo",
    "title": "api_basics",
    "content": "to access our API Explain CORS headers REST The structure of an API can take many forms, for example you could have routes named /api/getAllPostComments/:postid or /api/posts/:postid/comments However, it's conventional to follow REST (an acronym for Representational State Transfer), a popular and common organizational method for your APIs which corresponds with CRUD actions Following established patterns such as REST make your API more maintainable and make it easier for other developers to integrate with your APISoftware development is often about clear communication which is aided by following expectations The actual technical definition of REST is a little complicated, but for our purposes, most of the elements (statelessness, cacheability, etc ) are covered by default just by using Express to output JSON The piece that we specifically want to think about is how to organize our endpoint URIs (Uniform Resource Identifier) REST APIs are resource based, which basically means that instead of having names like /getPostComments or /savePostInDatabase we refer directly to the resource (in this case, the blog post) and use HTTP verbs such as GET, POST, PUT, and DELETE to determine the action Typically this takes the form of 2 URI's per resource, one for the whole collection and one for a single object in that collection, for example, you might get a list of blog-posts from /posts and then get a specific post from /posts/:postid You can also nest collections in this way To get the list of comments on a single post you would access /posts/:postid/comments and then to get a single comment: /posts/:postid/comments/:commentid Below are some other basic examples of endpoints you could have HTTP Verbs Table\n| Verb   | Action | Example                                       |\n| ------ | ------ | --------------------------------------------- |\n| POST   | Create | POST /posts Creates a new blog post         |\n| GET    | Read   | GET /posts/:postid Fetches a single post    |\n| PUT    | Update | PUT /posts/:postid Updates a single post    |\n| DELETE | Delete | DELETE /posts/:postid Deletes a single post |\nEach part of an API URI specifies the resource For example, GET /posts would return the entire list of blog posts while GET /posts/:postid specifies the exact blog post we want",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8003,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\api_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0250807a76a436941e2b0177b92c127d",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\api_basics.md",
    "source_type": "git_repo",
    "title": "api_basics",
    "content": "| POST /posts Creates a new blog post | | GET | Read | GET /posts/:postid Fetches a single post | | PUT | Update | PUT /posts/:postid Updates a single post | | DELETE | Delete | DELETE /posts/:postid Deletes a single post | Each part of an API URI specifies the resource For example, GET /posts would return the entire list of blog posts while GET /posts/:postid specifies the exact blog post we wantWe could nest further with GET /posts/:postid/comments to return a list of comments for that blog post or even GET /posts/:postid/comments/:commentid for a very specific blog post comment CORS\nThe Same Origin Policy is an important security measure that basically says \"Only requests from the same origin (the same IP address or URL) should be allowed to access this API\" (Look at the link above for a couple of examples of what counts as the 'same origin' ) This is a big problem for us because we are specifically trying to set up our API so that we can access it from different origins, so to enable that we need to set up Cross-origin resource sharing, or CORS Setting up CORS in Express is very easy, there’s a middleware that does the work for us For now, it is acceptable to just allow access from any origin This makes development quite a bit easier but for any real project, once you deploy to a production environment you will probably want to specifically block access from any origin except your frontend website The documentation above explains how to do this Assignment\n1 Read about [RESTful API design](https://stackoverflow blog/2020/03/02/best-practices-for-rest-api-design) If you want to code along with the first article, please note this includes the body-parser middleware to parse JSON data on the request body, however since Express 4 16 0 this parsing functionality has been incorporated directly into the Express package itself 1 Read and code along with this tutorial on [setting up a REST API in Express](https://www robinwieruch de/node-express-server-rest-api/) This is one of the best Express tutorials we've come across, it also talks about modular code organization, writing middleware, and links to some great extra info at the end Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8003,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\api_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "8637005c6f4b62452c94ba808db68379",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\api_basics.md",
    "source_type": "git_repo",
    "title": "api_basics",
    "content": "this parsing functionality has been incorporated directly into the Express package itself 1 Read and code along with this tutorial on [setting up a REST API in Express](https://www robinwieruch de/node-express-server-rest-api/) This is one of the best Express tutorials we've come across, it also talks about modular code organization, writing middleware, and links to some great extra info at the end Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does REST stand for What are HTTP verbs and why are they important to an API What is the Same-Origin Policy How do you enable CORS in your Express app Which HTTP verb does each letter in CRUD (Create, Read, Update, Delete) correspond to Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental A simple example-based definition of REST",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8003,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\api_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 205,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2cb8da07fc12bc74a0179985a17596a9",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\api_security.md",
    "source_type": "git_repo",
    "title": "api_security",
    "content": "Introduction\nSecuring your API is an important step When we were using Express to serve view templates we used PassportJS along with a username and password to authenticate users, but that is not the only way to secure an Express app, and in the context of an API it often makes sense to use a different strategy The username and password session pattern that we learned previously will still work of course, though it is made a little more complicated by the fact that we've separated our front-end code from the back-end Another strategy is to generate and pass a secure token between our back-end and front-end code Doing so will make sure that our user's username and password are not compromised and will also give us the ability to expire our user's session for added security The basic idea is that when a user signs in to our app, a secure token is created, and then for all subsequent requests that token is passed in the header of our request object In the end, the process is straightforward since you should already be comfortable with using passport to authenticate users This strategy, while particularly useful with APIs can be used with a traditional view-template project as well The main difference here is that instead of setting and checking a cookie we're passing a special token in the header of our request In our previous Authentication Tutorial, the Passport middleware checked the cookie that was sent and then either authenticated or denied our user In this case, we're going to do something very similar, but instead of using cookies, we're going to pass the token Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain how token authentication differs from session based authentication What are JSON Web Tokens What is an authorization header How do we use it Identify and explain the methods used to sign and verify tokens Write custom middleware to verify tokens on a given route Have familiarity with token expiration with JWT Expand PassportJS implementations to use JSON Web Tokens Assignment\n1 This video is a great resource that explains everything you need to know about [creating and verifying JSON Web Tokens](https://www youtube com/watch v=7nafaH9SddU) 1 This video presents [different ways in which JWTs can be useful](https://www youtube com/watch v=7Q17ubqLfaM) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3811,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\api_security.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d8b13a8c5054979c966ec16cc517ac8e",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\api_security.md",
    "source_type": "git_repo",
    "title": "api_security",
    "content": "tokens on a given route Have familiarity with token expiration with JWT Expand PassportJS implementations to use JSON Web Tokens Assignment 1 This video is a great resource that explains everything you need to know about [creating and verifying JSON Web Tokens](https://www youtube com/watch v=7nafaH9SddU) 1 This video presents [different ways in which JWTs can be useful](https://www youtube com/watch v=7Q17ubqLfaM) Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a JSON web token What are two things a secure token will do Where in the code is a secure token passed Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This article is a guide for JWT Authentication Using Node js and Express This article is a more concise guide for using JWTs in Express Not everyone agrees that JWTs are the best way to store authentication data This video is one argument against using them, and some of the pitfalls that you may encounter with using them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3811,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\api_security.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9fde86f4bf543d0f0f46266ddf816b50",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\project_blog_api.md",
    "source_type": "git_repo",
    "title": "project_blog_api",
    "content": "Introduction\nDo you know what you need You need a blog Or maybe you don't, or maybe you already have one, in any case, this project will be a great way to practice and see the benefits of creating an API only backend We're actually going to create the backend and two different front-ends for accessing and editing your blog posts One of the front-end sites will be for people that want to read and comment on your posts, while the other one will be just for you to write, edit and publish your posts Why are we setting it up like this Because we can The important exercise here is setting up the API and then accessing it from the outside There are some security benefits to setting up separate websites for blog consumption and blog editing, but really we're just doing it like this to demonstrate the power and flexibility of separating your backend code from your frontend code Assignment\n1 How you structure this project is up to you Some people prefer separate GitHub repos for each of the three apps you will make, to keep them and their commit histories separate Some people prefer a monorepo, with each app in their own directory within the same single repo 1 Begin by designing your back end models and schemas How you design it is up to you, but you might want to think through a few things:\n- Your blog should have posts and comments, so think about the fields you are going to want to include for each of those - Are you going to require users to leave a username or email with their comments - Are you going to display a date or a timestamp for posts and comments - Posts should probably have a title, but should comments - A useful feature for a blog is the ability to have posts that are in the database but not published for the public to read How might you designate published vs unpublished posts in your DB - You will want a user model that will contain any blog authors and any normal user accounts Even if you decide to only have a single author and no normal user accounts, a minimal user model will still be helpful to allow for easier route protection via authentication 1 Set up your Express app, and define the models in Prisma 1 Set up your routes and controllers Think about RESTful organization for this one Most of the examples in the previous lesson were centered around posts and comments so this shouldn't be too tricky - You can test your routes however you want Using `curl` in a terminal is one handy way, but it can be just as effective to use a web browser",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6083,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\project_blog_api.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2b660c10eab27b1460ee5c8ee988a39f",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\project_blog_api.md",
    "source_type": "git_repo",
    "title": "project_blog_api",
    "content": "1 Set up your Express app, and define the models in Prisma 1 Set up your routes and controllers Think about RESTful organization for this one Most of the examples in the previous lesson were centered around posts and comments so this shouldn't be too tricky - You can test your routes however you want Using `curl` in a terminal is one handy way, but it can be just as effective to use a web browserThere are some platforms that allow you to send `PUT` and `POST` requests without needing to set up and fill out HTML forms [Postman](https://www postman com/downloads/) is probably the most popular 1 Certain routes will need to be protected via authentication You wouldn't want any random stranger online to edit your articles If you also implement normal user accounts then you may also want to protect some routes behind being logged in - Though there are many ways you can handle authentication, in this project, use JWTs - You can use [jsonwebtoken](https://github com/auth0/node-jsonwebtoken) to create and verify JWTs You may wish to use [Passport's JWT strategy](https://github com/mikenicholson/passport-jwt) for verifying JWTs, especially if you already have Passport set up with a local strategy to handle logging in - A successful login will grant the user a JWT That user can then attach their JWT to any future requests, where your API can verify the JWT in order to allow or deny access to the rest of the protected route When the user logs out, you can have the client remove the JWT from storage - There are many ways to send and store JWTs, such as via cookies, storing in localStorage, using access/refresh tokens etc Some of these methods are more complicated (though with the right implementation, potentially more secure), especially once you deploy both ends For example, cross-site cookies can be a real headache if you aren't aware of certain extra details You may wish to explore some of these alternatives in the future For now, keep it simple and send your JWTs via an \"Authorization\" header with \"Bearer\" schema, and have the client store a JWT in localStorage 1 Once your API is working you can focus on your front-end code Really, how you go about this is up to you If you are comfortable with React, then go for it If you're happier using plain HTML, CSS and vanilla JavaScript, that's fine too",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6083,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\project_blog_api.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9452756a27d8f45f30dddba85d4f8880",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\apis\\project_blog_api.md",
    "source_type": "git_repo",
    "title": "project_blog_api",
    "content": "these alternatives in the future For now, keep it simple and send your JWTs via an \"Authorization\" header with \"Bearer\" schema, and have the client store a JWT in localStorage 1 Once your API is working you can focus on your front-end code Really, how you go about this is up to you If you are comfortable with React, then go for it If you're happier using plain HTML, CSS and vanilla JavaScript, that's fine tooAll you should have to do to get your posts into a website is to `fetch` the correct API endpoint and then display the results Working with fetch and APIs from a front-end perspective is covered in the [Working with APIs lesson](https://www theodinproject com/lessons/javascript-working-with-apis) 1 Create a second website for authoring and editing your posts You can set this up however you like but the following features might be useful:\n- A list of all posts that shows whether or not they have been published - A button to publish unpublished posts, or to unpublish published ones - A 'NEW POST' form If you want to get fancy, you could use a rich text editor such as [TinyMCE](https://www tiny cloud/docs/tinymce/6/cloud-quick-start/) - The ability to manage comments (i e delete or edit them) 1 How much work you want to put into the front-end code on this one is up to you Technically this is a backend focused course so if you would prefer, feel free to focus on the REST API 1 Deploying your separate apps isn't anything fancy Deploy your API like with your previous projects using a PaaS from the [Deployment lesson](https://www theodinproject com/lessons/node-path-nodejs-deployment), and deploy your front-ends like you would have deployed your front-ends before If you used React, recall several hosting options from the [CV Application project](https://www theodinproject com/lessons/node-path-react-new-cv-application)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6083,
      "relative_path": "git_repos\\odin-project\\nodeJS\\apis\\project_blog_api.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "745755ecaea581c4dc04abe51c6a192b",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\project_members_only.md",
    "source_type": "git_repo",
    "title": "project_members_only",
    "content": "Introduction\nIn this project you'll be building an exclusive clubhouse where your members can write anonymous posts Inside the clubhouse, members can see who the author of a post is, but outside they can only see the story and wonder who wrote it This will be a chance for you to use the authentication skills we learned in the last project, you will also be practicing your database skills so buckle up Assignment\n1 Begin by thinking about how to set up the database models you are going to need to accomplish your goal You will need users with full-names (first and last), usernames (you can use email for this), passwords and membership-status Users should be able to create messages that have a title, a timestamp and some text Your database should keep track of who created each message 1 Setup your database on PostgreSQL and generate or otherwise create your project skeleton, including the models you designed in the last step 1 Start with a sign-up form so you can get some users into your DB Don't forget to sanitize and validate the form fields and secure the passwords with `bcrypt` You should add a confirmPassword field to your sign-up form and then validate it using a [custom validator](https://express-validator github io/docs/guides/customizing) 1 When users sign up, they should not be automatically given membership status What fun is a private club if just anyone can join Add a page where members can \"join the club\" by entering a secret passcode If they enter the passcode correctly then update their membership status 1 Create a login-form using passport js like we did in the last assignment 1 When a user is logged in give them a link to \"Create a new message\" (but only show it if they're logged in ) Create the new-message form 1 Display all member messages on the home page, but only show the author and date of the messages to other club-members 1 Add an optional field to the user model called Admin and then add the ability to delete messages, but only allow users who have `admin == true` to see the delete-button and delete messages You'll need to add a way to actually mark a user as an 'admin' so either add another secret pass-code page, or just put an \"is admin\" checkbox on the sign-up form 1 By this point, anyone who comes to the site should be able to see a list of all messages, with the author's name hidden",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3167,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\project_members_only.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b410e7f3777b42d7258ca6f65e6e0fe7",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\project_members_only.md",
    "source_type": "git_repo",
    "title": "project_members_only",
    "content": "to delete messages, but only allow users who have `admin == true` to see the delete-button and delete messages You'll need to add a way to actually mark a user as an 'admin' so either add another secret pass-code page, or just put an \"is admin\" checkbox on the sign-up form 1 By this point, anyone who comes to the site should be able to see a list of all messages, with the author's name hiddenUsers should be able to sign-up and create messages, but ONLY users that are members should be able to see the author and date of each message Finally, you should have an Admin user that is able to see everything and also has the ability to delete messages Obviously this is a silly little app, but the things you are practicing (creating and authenticating users and giving users different abilities and permissions) are things that will be *very* useful to you 1 When you're satisfied with your work, deploy your project on your chosen PaaS ([list of PaaS providers from the Deployment lesson](https://www theodinproject com/lessons/node-path-nodejs-deployment)) and share it below",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3167,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\project_members_only.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4f01042d2154ae28519e75b16872e4be",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "Introduction\nCreating users and allowing them to log in and out of your web apps is a crucial functionality that we are finally ready to learn There is quite a bit of setup involved here, but thankfully none of it is too tricky You'll be up and running in no time In this lesson, we're going to be using passport js, an excellent middleware to handle our authentication and sessions for us We're going to be building a very minimal express app that will allow users to sign up, log in, and log out For now, we're just going to keep everything except the views in one file to make for easier demonstration, but in a real-world project, it is best practice to split our concerns and functionality into separate modules Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand the use order for the required middleware for Passport js Describe what Passport js Strategies are Use the LocalStrategy to authenticate users Explain the purpose of cookies in authentication Review prior learning material (routes, templates, middleware, async/await, and promises) Use Passport js to set up user authentication with Express Describe what bcrypt is and its use Describe what a hash is and explain the importance of password hashing Describe bcrypt's compare function Set up\nBefore we start, create a new database within psql To begin, let's set up a users table So instead of usernames we will create a users table sql\nCREATE TABLE users (\nid INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\nusername VARCHAR ( 255 ),\npassword VARCHAR ( 255 )\n);\nNext, let's set up a very minimal express app Create a new directory and use npm init to start the package json file then run the following to install all the dependencies we need:\nbash\nnpm install express express-session pg passport passport-local ejs\n#### Securing passwords\nFor the moment we are saving our users with just a plain text password This is a *really* bad idea for any real-world project At the end of this lesson, you will learn how to properly secure these passwords using bcrypt Don't skip that part ```javascript\n/////// app js\nconst path = require(\"node:path\");\nconst { Pool } = require(\"pg\");\nconst express = require(\"express\");\nconst session = require(\"express-session\");\nconst passport = require(\"passport\");\nconst LocalStrategy = require('passport-local') Strategy;\nconst pool = new Pool({\n// add your configuration\n});\nconst app = express();\napp set(\"views\", path",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "1e36e5e0e712a23bb86768d51dcc47a4",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "*really* bad idea for any real-world project At the end of this lesson, you will learn how to properly secure these passwords using bcrypt Don't skip that part ```javascript /////// app js const path = require(\"node:path\"); const { Pool } = require(\"pg\"); const express = require(\"express\"); const session = require(\"express-session\"); const passport = require(\"passport\"); const LocalStrategy = require('passport-local') Strategy; const pool = new Pool({ // add your configuration }); const app = express(); app set(\"views\", pathjoin(__dirname, \"views\"));\napp set(\"view engine\", \"ejs\");\napp use(session({ secret: \"cats\", resave: false, saveUninitialized: false }));\napp use(passport session());\napp use(express urlencoded({ extended: false }));\napp get(\"/\", (req, res) => res render(\"index\"));\napp listen(3000, (error) => {\nif (error) {\nthrow error;\n}\nconsole log(\"app listening on port 3000 \");\n});\n```\nMost of this should look familiar to you by now, except for the newly required modules express-session and passport We are not actually going to be using express-session directly, it is a dependency that is used in the background by passport js You can take a look at what the express-session package does in the Express docs Our view engine is set up to just look in the project directory, and it's looking for a template called index ejs so go ahead and create that:\n```html\nHome\nhello world ```\nCreating users\nThe first thing we need is a sign up form so we can actually create users to authenticate For the sake of brevity, we're going to leave sanitization and validation out here But don't forget about it when you get to that point, we will have the opportunity to apply them later Create a new template called sign-up-form, and a route for /sign-up that points to it:\n```html\nSign Up\nSign Up\nUsername\nPassword\nSign Up\n```\n```javascript\n//// app js\napp get(\"/sign-up\", (req, res) => res render(\"sign-up-form\"));\n```\nNext, create an app post for the sign up form so that we can add users to our database (remember our notes about sanitization, and using plain text to store passwords ) javascript\napp post(\"/sign-up\", async (req, res, next) => {\ntry {\nawait pool",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "0d246e0664c8fabea4c6ad6f359897a0",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "and a route for /sign-up that points to it: ```html Sign Up Sign Up Username Password Sign Up ``` ```javascript //// app js app get(\"/sign-up\", (req, res) => res render(\"sign-up-form\")); ``` Next, create an app post for the sign up form so that we can add users to our database (remember our notes about sanitization, and using plain text to store passwords ) javascript app post(\"/sign-up\", async (req, res, next) => { try { await poolquery(\"INSERT INTO users (username, password) VALUES ($1, $2)\", [\nreq body username,\nreq body password,\n]);\nres redirect(\"/\");\n} catch(err) {\nreturn next(err);\n}\n});\nLet's reiterate: this is not a particularly safe way to create users in your database BUT you should now be able to visit /sign-up, and submit the form If all goes well it'll redirect you to the index and you will be able to go see your newly created user inside your database Open your database in psql and run your query to see your first user Authentication\nNow that we have the ability to put users in our database, let's allow them to log in to see a special message on our home page We're going to step through the process one piece at a time, but first, take a minute to glance at the passport js website The documentation here has pretty much everything you need to set it up You're going to want to refer back to this when you're working on your project Passport js uses what they call Strategies to authenticate users They have over 500 of these strategies, but we're going to focus on the most basic (and most common), the username-and-password, or what they call the LocalStrategy (documentation for the LocalStrategy) We have already installed and required the appropriate modules so let's set it up We need to add 3 functions to our app js file, and then add an app post for our /log-in path Function one: setting up the LocalStrategy\n```javascript\npassport use(\nnew LocalStrategy(async (username, password, done) => {\ntry {\nconst { rows } = await pool query(\"SELECT * FROM users WHERE username = $1\", [username]);\nconst user = rows[0];\nif ( user) {\nreturn done(null, false, { message: \"Incorrect username\" });\n}\nif (user password",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "44525f41f9925c658273b051ae678df5",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "up We need to add 3 functions to our app js file, and then add an app post for our /log-in path Function one: setting up the LocalStrategy ```javascript passport use( new LocalStrategy(async (username, password, done) => { try { const { rows } = await pool query(\"SELECT * FROM users WHERE username = $1\", [username]); const user = rows[0]; if ( user) { return done(null, false, { message: \"Incorrect username\" }); } if (user password== password) {\nreturn done(null, false, { message: \"Incorrect password\" });\n}\nreturn done(null, user);\n} catch(err) {\nreturn done(err);\n}\n})\n);\n```\nThis function is what will be called when we use the passport authenticate() function later Basically, it takes a username and password, tries to find the user in our DB, and then makes sure that the user's password matches the given password If all of that works out (there's a user in the DB, and the passwords match) then it authenticates our user and moves on We will not be calling this function directly, so you won't have to supply the done function This function acts a bit like a middleware and will be called for us when we ask passport to do the authentication later Functions two and three: sessions and serialization\nTo make sure our user is logged in, and to allow them to stay logged in as they move around our app, passport internally calls a function from express-session that uses some data to create a cookie called connect sid which is stored in the user's browser These next two functions define what bit of information passport is looking for when it creates and then decodes the cookie The reason they require us to define these functions is so that we can make sure that whatever bit of data it’s looking for actually exists in our Database passport serializeUser takes a callback which contains the information we wish to store in the session data passport deserializeUser is called when retrieving a session, where it will extract the data we \"serialized\" in it then ultimately attach something to the user property of the request object (req user) for use in the rest of the request For our purposes, the functions that are listed in the passport docs will work just fine:\n```javascript\npassport serializeUser((user, done) => {\ndone(null, user id);\n});\npassport deserializeUser(async (id, done) => {\ntry {\nconst { rows } = await pool",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "cb8fa928306a2d999bf97b80f127b1ec",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "retrieving a session, where it will extract the data we \"serialized\" in it then ultimately attach something to the user property of the request object (req user) for use in the rest of the request For our purposes, the functions that are listed in the passport docs will work just fine: ```javascript passport serializeUser((user, done) => { done(null, user id); }); passport deserializeUser(async (id, done) => { try { const { rows } = await poolquery(\"SELECT * FROM users WHERE id = $1\", [id]);\nconst user = rows[0];\ndone(null, user);\n} catch(err) {\ndone(err);\n}\n});\n```\nWhen a session is created, passport serializeUser will receive the user object found from a successful login and store its id property in the session data Upon some other request, if it finds a matching session for that request, passport deserializeUser will retrieve the id we stored in the session data We then use that id to query our database for the specified user, then done(null, user) attaches that user object to req user Now in the rest of the request, we have access to that user object via req user Again, we aren’t going to be calling these functions on our own and we just need to define them, they’re used in the background by passport Log-in form\nLet's go ahead and add the log-in form directly to our index template The form will look just like our sign-up form, but instead of POSTing to /sign-up we'll add an action to it so that it POSTs to /log-in instead Add the following to your index template:\n```html\nplease log in\nUsername\nPassword\nLog In\n``` and now for the magical part Add this route to your app js file:\njavascript\napp post(\n\"/log-in\",\npassport authenticate(\"local\", {\nsuccessRedirect: \"/\",\nfailureRedirect: \"/\"\n})\n);\nAs you can see, all we have to do is call passport authenticate() This middleware performs numerous functions behind the scenes Among other things, it looks at the request body for parameters named username and password then runs the LocalStrategy function that we defined earlier to see if the username and password are in the database It then creates a session cookie that gets stored in the user's browser and used in all future requests to see whether or not that user is logged in It can also redirect you to different routes based on whether the login is a success or a failure",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "5b288b7bd79ddcc6db328d959710b21d",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "request body for parameters named username and password then runs the LocalStrategy function that we defined earlier to see if the username and password are in the database It then creates a session cookie that gets stored in the user's browser and used in all future requests to see whether or not that user is logged in It can also redirect you to different routes based on whether the login is a success or a failureIf we had a separate login page we might want to go back to that if the login failed, or we might want to take the user to their user dashboard if the login is successful Since we're keeping everything in the index we want to go back to \"/\" no matter what If you fill out and submit the form now, everything should technically work, but you won't actually SEE anything different on the page let's fix that The passport middleware checks to see if there is a user logged in (by checking the cookies that come in with the req object) and if there is, it adds that user to the request object for us So, all we need to do is check for req user to change our view depending on whether or not a user is logged in Edit your app get(\"/\") to send the user object to our view like so:\njavascript\napp get(\"/\", (req, res) => {\nres render(\"index\", { user: req user });\n});\nand then edit your view to make use of that object like this:\n```html\nLog In\n<% if (locals user) {%>\nWELCOME BACK <%= user username %>\nLOG OUT\n<% } else { %>\nplease log in\nUsername\nPassword\nLog In\n<%}%>\n```\nSo, this code checks to see if there is a user defined if so it offers a welcome message, and if NOT then it shows the login form Neat As one last step let's make that log out link actually work for us As you can see it's sending us to /log-out so all we need to do is add a route for that in our app js Conveniently, the passport middleware adds a logout function to the req object, so logging out is as easy as this:\njavascript\napp get(\"/log-out\", (req, res, next) => {\nreq logout((err) => {\nif (err) {\nreturn next(err);\n}\nres",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "0a9a602decc259f4e12fb24b5a38f80b",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "last step let's make that log out link actually work for us As you can see it's sending us to /log-out so all we need to do is add a route for that in our app js Conveniently, the passport middleware adds a logout function to the req object, so logging out is as easy as this: javascript app get(\"/log-out\", (req, res, next) => { req logout((err) => { if (err) { return next(err); } resredirect(\"/\");\n});\n});\nYou should now be able to visit /sign-up to create a new user, then log in using that user's username and password, and then log out by clicking the log out button #### A quick tip\nIn express, you can set and access various local variables throughout your entire app (even in views) with the `locals` object We can use this knowledge to write ourselves a custom middleware that will simplify how we access our current user in our views Middleware functions are functions that take the `req` and `res` objects, manipulate them, and pass them on through the rest of the app ```javascript\napp use((req, res, next) => {\nres locals currentUser = req user;\nnext();\n});\n```\nIf you insert this code somewhere between where you instantiate the passport middleware and before you render your views, you will have access to the `currentUser` variable in all of your views, and you won't have to manually pass it into all of the controllers in which you need it Securing passwords with bcrypt\nNow, let's go back and learn how to securely store user passwords so that if anything ever goes wrong, or if someone gains access to our database, our user passwords will be safe This is insanely important, even for the most basic apps First npm install bcryptjs There is another module called bcrypt that does the same thing, but it is written in C++ and is sometimes a pain to get installed The C++ bcrypt is technically faster, so in the future it might be worth getting it running, but for now, the modules work the same so we can just use bcryptjs Once it's installed you need to require it at the top of your app js and then we are going to put it to use where we save our passwords to the DB, and where we compare them inside the LocalStrategy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "3581eb5e34b043ed791d3aec8ceb23f4",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "pain to get installed The C++ bcrypt is technically faster, so in the future it might be worth getting it running, but for now, the modules work the same so we can just use bcryptjs Once it's installed you need to require it at the top of your app js and then we are going to put it to use where we save our passwords to the DB, and where we compare them inside the LocalStrategyStoring hashed passwords\nPassword hashes are the result of passing the user's password through a one-way hash function, which maps variable sized inputs to fixed size pseudo-random outputs Edit your app post(\"/sign-up\") to use the bcrypt hash function which works like this:\n```javascript\n//Don't forget to import bcrypt const bcrypt = require(\"bcryptjs\");\n// app post(\"/sign-up\", async (req, res, next) => {\ntry {\nconst hashedPassword = await bcrypt hash(req body password, 10);\nawait pool query(\"INSERT INTO users (username, password) VALUES ($1, $2)\", [req body username, hashedPassword]);\nres redirect(\"/\");\n} catch (error) {\nconsole error(error);\nnext(error);\n}\n});\n```\nThe second argument is the length of the \"salt\" to use in the hashing function; salting a password means adding extra random characters to it, the password plus the extra random characters are then fed into the hashing function Salting is used to make a password hash output unique, even for users who use the same password, and to protect against rainbow tables and dictionary attacks Usually, the salt is stored in the database alongside the hashed value However, in our case, there is no need to store the salt separately because the bcryptjs hashing algorithm automatically incorporates the salt within the hash itself The hash function is somewhat slow, so all of the DB storage stuff needs to go inside the callback Check to see if you've got this working by signing up a new user with a password, then go look at your DB entries to see how it's being stored If you've done it right, your password should have been transformed into a really long random string It's important to note that how hashing works, especially in the context of passwords, is beyond the scope of this lesson Comparing hashed passwords\nWe will use the bcrypt compare() function to validate the password input The function compares the plain-text password in the request object to the hashed password Inside your LocalStrategy function we need to replace the user password == password expression with the bcrypt",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "356659e71c807b238204e8f14cdb15f6",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "have been transformed into a really long random string It's important to note that how hashing works, especially in the context of passwords, is beyond the scope of this lesson Comparing hashed passwords We will use the bcrypt compare() function to validate the password input The function compares the plain-text password in the request object to the hashed password Inside your LocalStrategy function we need to replace the user password == password expression with the bcryptcompare() function javascript\nconst match = await bcrypt compare(password, user password);\nif ( match) {\n// passwords do not match return done(null, false, { message: \"Incorrect password\" })\n}\nYou should now be able to log in using the new user you've created (the one with a hashed password) Unfortunately, users that were saved BEFORE you added bcrypt will no longer work, but that's a small price to pay for security (and a good reason to include bcrypt from the start on your next project)\nAssignment\n1 Watch videos 1, 2, 3, 5 and 6 of this [Youtube Playlist on sessions in Express and local strategy authentication with Passport js](https://www youtube com/playlist list=PLYQSCk-qyTW2ewJ05f_GKHtTIzjynDgjK) - You may notice at some points in the videos, the Express app contains the line `app use(passport initialize())` This line is no longer required to include in current versions of Passport - They are using MongoDB and you can replace any instance of it with PostgreSQL - In [video 3: \"Your complete guide to understanding the express-session library\"](https://youtu be/J1qXK66k1y4 list=PLYQSCk-qyTW2ewJ05f_GKHtTIzjynDgjK) and [video 5: \"Passport Local Configuration (Node + Passport + Express)\"](https://youtu be/xMEOT9J0IvI list=PLYQSCk-qyTW2ewJ05f_GKHtTIzjynDgjK), it shows using the `connect-mongo` library to use your MongoDB connection to store sessions, as opposed to storing them in memory However, since we are using PostgreSQL, we need to replace it with a library called `connect-pg-simple` instead You can view the implementation for doing this on the [npm page for connect-pg-simple](https://www npmjs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "d0272048ccef692780fbd5acc737c919",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
    "source_type": "git_repo",
    "title": "Home",
    "content": "\"Your complete guide to understanding the express-session library\"](https://youtu be/J1qXK66k1y4 list=PLYQSCk-qyTW2ewJ05f_GKHtTIzjynDgjK) and [video 5: \"Passport Local Configuration (Node + Passport + Express)\"](https://youtu be/xMEOT9J0IvI list=PLYQSCk-qyTW2ewJ05f_GKHtTIzjynDgjK), it shows using the `connect-mongo` library to use your MongoDB connection to store sessions, as opposed to storing them in memory However, since we are using PostgreSQL, we need to replace it with a library called `connect-pg-simple` instead You can view the implementation for doing this on the [npm page for connect-pg-simple](https://www npmjscom/package/connect-pg-simple) - Do note that the table needed to be used for the session store is not automatically created by default, be sure to check the available options in their npm page 1 In [Passport: The Hidden Manual](https://github com/jwalton/passport-api-docs), you can explore more comprehensive explanations of some of Passport's main functions, gaining a deeper understanding of what each function accomplishes Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Which passport js strategy did we use in the lesson Why does passport js create a cookie What does the bcrypt compare() function do Why should we include bcrypt when we begin a project Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This video provides a broad overview of some of the different methods to store passwords in databases and possible risks If you would like a little more of a deeper dive into password hashing, read the following Wikipedia article to learn more about how cryptographic hash functions work",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21075,
      "relative_path": "git_repos\\odin-project\\nodeJS\\authentication\\authentication_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "a6f7cd23262fb754efe93ed39fbab614",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "Introduction\nThe controller's job is really to act as the ultimate middleman It knows which questions it wants to ask the model, but lets the model do all the heavy lifting for actually solving those questions It knows which view it wants to render and send back to the browser, but lets the view itself take care of putting all that HTML together That's why it's a \"controller\" - it's smart enough to know what to do, then it delegates all the hard work Ultimately, the controller is the brains of the operation ensuring that each component plays its part in delivering the final result and is really just a function with well-defined responsibilities as part of the MVC pattern Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explore various response methods Implement error handling middleware to catch and process errors gracefully Describe common use cases for middleware, such as validation and authentication Handling responses\nWhen it comes to sending responses from our controllers, we have several methods at our disposal Let's explore some of the commonly used methods and their use cases res send - A general-purpose method for sending a response, it is flexible with what data we can send since it will automatically set the Content-Type header based on what data you pass it For example, if we pass in an object, it will stringify it as JSON and set the Content-Type header to application/json res json - This is a more explicit way to respond to a request with JSON This always sets the Content-Type header to application/json and sends the data as JSON res redirect - When we want to redirect the client to a different URL, this method allows for that capability res render - res render lets you render a view template and send the resulting HTML as the response We'll cover this in a later lesson There is also a useful method that we can use to set the status code manually res status - This sets the response's status code but does not end the request-response cycle by itself We can chain other methods through this (e g res status(404) send( ) but note that we can't do res send( ) status(404)) We can omit this if we wish to use the default status code of 200 #### res send and res json\nIf `res send` automatically sets the `Content-Type` based on the data passed, why would we still use `res json` `res json` enforces JSON and will automatically convert non-object values to JSON, but `res send` will not `res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "3778904108cf726357ad81146e6d4e76",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "through this (e g res status(404) send( ) but note that we can't do res send( ) status(404)) We can omit this if we wish to use the default status code of 200 #### res send and res json If `res send` automatically sets the `Content-Type` based on the data passed, why would we still use `res json` `res json` enforces JSON and will automatically convert non-object values to JSON, but `res send` will not `resjson` is just a convenient method that also internally calls `res send` `res send` will only handle things as JSON when dealing with booleans and objects (which includes arrays) So for convenience it's more appropriate to use `res json` instead of `res send`, and if we're sending JSON, we might as well use a method that's literally named \"json\" It's like the perfect match We also need to take note that these response methods only end the request-response cycle They do not end the function execution For example if we do this:\n```javascript\napp use((req, res) => {\n// This works and this ends the request-response cycle\nres send(\"Hello\");\n// However, it does not exit the function so this will still run\nconsole log('will still run ');\n// This will then throw an error that we cannot send again after sending to the client already\nres send(\"Bye\");\n});\n```\nMiddleware\nMiddleware functions are a core concept in Express and play a crucial role in handling requests and responses They operate between the incoming request and the final intended route handler A middleware function typically takes three arguments (however, there is one that we will get into later that has four):\nreq - The request object, representing the incoming HTTP request res - The response object, representing the HTTP response that will be sent back to the client next - The function that passes control to the next middleware function in the chain (we'll get to this later) This is optional #### Naming convention\nNames are just convention, we can name them whatever we want, like `req` -> `request`, `res` -> `response`, etc A middleware function can perform various tasks, such as:\nModifying the request or response objects (some packages for example will do this, like adding a new property in the request object, or setting the res locals that is used in templates rendered with res render)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "8b77d2b9f8fad2567e1e48f42f1d4ffe",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "chain (we'll get to this later) This is optional #### Naming convention Names are just convention, we can name them whatever we want, like `req` -> `request`, `res` -> `response`, etc A middleware function can perform various tasks, such as: Modifying the request or response objects (some packages for example will do this, like adding a new property in the request object, or setting the res locals that is used in templates rendered with res render)Executing additional code (validation middleware functions to validate the request before going to our main logic, authentication middleware functions, and so on) Calling the next middleware function in the chain Ending the request-response cycle (meaning no further middleware functions are called, even if there are more in the chain) Express has a rich ecosystem, so you'll likely find a package that solves the problem you're encountering For example, some packages provide middleware functions to handle authentication, CORS, rate limiting, sessions, logging, validation, and more Throughout this lesson (and the course), we'll introduce middlewares needed to build projects in this course, but you’re welcome to explore on your own Application-level middleware\nApplication-level middleware are bound to an instance of Express using app use or using app METHOD (e g app get, app post) functions Express executes these middleware functions for every incoming request that matches the specified path If we don't specify a path, Express defaults the path to /, matching every incoming request As with any middleware functions, they will not run if the request-response cycle ends before reaching them Typically, these middleware functions are placed on top of our application code to ensure they always run first Express offers several essential built-in middleware functions that we'll frequently use in our applications These include:\nBody parsers (e g express json, express urlencoded) - These allow us to correctly parse the incoming request's body, so that we can use it through req body Serving static files (e g app use(express static('public'))) - This middleware function serves static files like HTML, CSS, JavaScript, and images We can pass an argument to specify which directory to serve the static files Router-level middleware\nRouter-level middleware works similarly to an application-level middleware, but it's bound to an instance of Express router using router use or router METHOD (e g router get) functions Because of this, Express only executes these middleware when the request matches and goes through that router",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "2f025e969646ffc15ebaaf1055de91a0",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "use(express static('public'))) - This middleware function serves static files like HTML, CSS, JavaScript, and images We can pass an argument to specify which directory to serve the static files Router-level middleware Router-level middleware works similarly to an application-level middleware, but it's bound to an instance of Express router using router use or router METHOD (e g router get) functions Because of this, Express only executes these middleware when the request matches and goes through that routerHere is an example of a basic middleware function:\n```javascript\nfunction myMiddleware(req, res, next) {\n// Perform some operations\nconsole log(\"Middleware function called\");\n// Modify the request object\nreq customProperty = \"Hello from myMiddleware\";\n// Call the next middleware/route handler\nnext();\n}\napp use(myMiddleware);\n```\nIn this example, the middleware function logs a message, adds a custom property to the request object, and then calls the next() function to pass control to the next middleware function or route handler We also register the middleware function through the usage of app use which makes this an application-level middleware Middleware functions following myMiddleware in this chain can now access req customProperty, which contains the value \"Hello from myMiddleware\" One thing to note is that Express executes middleware functions in the order we define or register them in our application This means that the sequence in which we define our middleware functions matters, as it determines the order in which they will be invoked during the request-response cycle So we need to make sure and be aware that our middleware functions are placed in the correct order As an example, some packages have middleware functions that changes the Request object, and as a result, these middleware functions should be placed at the very top of our application in order for us to be able to see their changes in all of your middleware functions below it There is also a special type of middleware function that handles errors, which we will discuss shortly Controllers\nAs said earlier, controllers are just functions They also classify as a middleware (at least in the Express world) that are used by route handlers However, it's important to note that controller and middleware are distinct concepts Controllers are a key component of the MVC (Model-View-Controller) pattern, a design approach for organizing software Middleware, on the other hand, is a core feature of Express that allows you to run code, modify requests, or end the cycle at specific points in the request-response cycle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "bca99ab2ab915de16b7b7491e46e6dc6",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "They also classify as a middleware (at least in the Express world) that are used by route handlers However, it's important to note that controller and middleware are distinct concepts Controllers are a key component of the MVC (Model-View-Controller) pattern, a design approach for organizing software Middleware, on the other hand, is a core feature of Express that allows you to run code, modify requests, or end the cycle at specific points in the request-response cycleSo we are using middleware in Express to implement the \"Controller\" part of the MVC pattern A controller comes into play whenever a request hits the server and a route matches the requested HTTP verb and path The route determines which controller should handle the request based on the defined middleware chain The appropriate controller then takes over, performing the necessary actions to fulfill the request This could involve retrieving data from the model, processing the data, making decisions based on business logic, or updating the model with new data Once the controller completes its tasks, it passes the processed data to the view The view then renders this data into a format suitable for sending back to the client Typically, this would be HTML Later, when we cover building APIs, we can also send JSON responses like with the APIs that we've previously used e g Giphy API The naming conventions for these controllers are usually based on the route they will be attached to e g GET route -> getSomething, POST route -> createSomething, DELETE route -> deleteSomething, etc Nonetheless, there is no fixed rule since Express is not opinionated It will always be based on you or someone else's conventions, and the requirements of the function You should already have your application setup in-place from the previous lesson Previously, we've defined a route for /authors/:authorId, but this time we will define a controller for that route and hook it up with sample data But to make the example produce something, let's first create a mock database with a function that we can use to retrieve an author by their ID Create the following file db js at the root of the project, and add the following code:\n```javascript\n// db js\nconst authors = [\n{ id: 1, name: \"Bryan\" },\n{ id: 2, name: \"Christian\" },\n{ id: 3, name: \"Jason\" },\n];\nasync function getAuthorById(authorId) {\nreturn authors find(author => author id === authorId);\n};\nmodule",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "f807562b24079c23b00f8007d3c67a15",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "create a mock database with a function that we can use to retrieve an author by their ID Create the following file db js at the root of the project, and add the following code: ```javascript // db js const authors = [ { id: 1, name: \"Bryan\" }, { id: 2, name: \"Christian\" }, { id: 3, name: \"Jason\" }, ]; async function getAuthorById(authorId) { return authors find(author => author id === authorId); }; moduleexports = { getAuthorById };\n```\nThe file name, content, and location aren't important here This is just a quick mock \"database\" and query function so we can call it in a controller Then for the controller, create the following file authorController js within a controllers folder:\n```javascript\n// controllers/authorController js\nconst db = require(\" /db\");\nasync function getAuthorById(req, res) {\nconst { authorId } = req params;\nconst author = await db getAuthorById(Number(authorId));\nif ( author) {\nres status(404) send(\"Author not found\");\nreturn;\n}\nres send(Author Name: ${author name});\n};\nmodule exports = { getAuthorById };\n```\nIn this example, the getAuthorById function is a controller that handles a specific action related to retrieving an author by their ID We'll use this controller by importing it into the file where we define our routes, and using it like this:\n```javascript\n// routes/authorRouter js\nconst { Router } = require(\"express\");\nconst { getAuthorById } = require(' /controllers/authorController');\nconst authorRouter = Router();\n// other route handlers\nauthorRouter get(\"/:authorId\", getAuthorById);\n```\nLet's break down what's happening in this controller:\nThe route path contains a route parameter (/authors/:authorId) The controller extracts the authorId from req params It then invokes a database query function getAuthorById to retrieve the author data based on the authorId If the controller doesn't find the author, it sends a response with a 404 status code and the message \"Author not found\", using res status(404) send( ) It then returns from the controller function to avoid invoking any other logic in the controller, as sending a response doesn't automatically stop the function execution If the controller finds the author, it sends a response with a 200 status code with the text showing the author name using res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "c26edc67b9337f3770a86eafdd3b75a5",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "the controller doesn't find the author, it sends a response with a 404 status code and the message \"Author not found\", using res status(404) send( ) It then returns from the controller function to avoid invoking any other logic in the controller, as sending a response doesn't automatically stop the function execution If the controller finds the author, it sends a response with a 200 status code with the text showing the author name using ressend( ) Very simple right Handling errors\nWhen building robust applications, it's crucial to handle errors gracefully within our application Implementing proper error handling allows you to provide meaningful error responses to the client and prevent your application from crashing unexpectedly And as we know, errors may occur during async operations, and we are not exactly handling that in our previous code snippets Let's see what we can do to handle these possibilities try/catch\nUsing the same code from earlier, we can quickly handle errors by wrapping our controller logic in a try/catch block ```javascript\nasync function getAuthorById(req, res) {\nconst { authorId } = req params;\ntry {\nconst author = await db getAuthorById(Number(authorId));\nif ( author) {\nres status(404) send(\"Author not found\");\nreturn;\n}\nres send(`Author Name: ${author name}`);\n} catch (error) {\nconsole error(\"Error retrieving author:\", error);\nres status(500) send(\"Internal Server Error\");\n// or we can call next(error) instead of sending a response here\n// Using `next(error)` however will only render an error page in the express' default view and respond with the whole html to the client // So we will need to create a special type of middleware function if we want a different response and we will get to that next }\n};\n```\nWhat if we have many async middleware functions and a lot of them respond the same way just with things like different status codes and response messages Instead of try/catch in each middleware, Express automatically catches any thrown errors and calls next(error), which will pass control over to a special \"error middleware function\", meaning we wouldn't need to catch and handle in the original controller itself Error handler middleware\nAn error handler middleware function handles all errors in our application that come down from other middleware functions We want to place this error middleware function at the very end of the application code to ensure it's the last middleware function executed and only handles errors bubbling down from preceding middleware functions Add the following code in app",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "bc81b9a2b5ad72d80ea5186e5618b30f",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "middleware function\", meaning we wouldn't need to catch and handle in the original controller itself Error handler middleware An error handler middleware function handles all errors in our application that come down from other middleware functions We want to place this error middleware function at the very end of the application code to ensure it's the last middleware function executed and only handles errors bubbling down from preceding middleware functions Add the following code in appjs at the end of all middleware functions in our application:\njavascript\n// Every thrown error in the application or the previous middleware function calling `next` with an error as an argument will eventually go to this middleware function\napp use((err, req, res, next) => {\nconsole error(err);\nres status(500) send(err);\n});\nHowever, take note that this is a middleware function that requires four parameters that we will need to provide even if they are not used If for example we exclude one of the parameters, it will not be recognized as an error middleware function You can try it out yourself ;)\nThis is an odd one where the error object must be the first parameter in the callback This middleware function handles the errors thrown in other middleware functions or something that is sent by a previous middleware function using the next function (e g next(err)) So the way Express distinguishes this middleware function is again through adding four parameters, not a single one missing A route middleware function or a middleware function with fewer than four parameters will always be considered as a request middleware function instead of this error middleware function, even if we place it last ```javascript\napp use((req, res, next) => {\nthrow new Error(\"OH NO \");\n// or next(new Error(\"OH NO \"));\n});\napp use((err, req, res, next) => {\nconsole error(err);\n// You will see an OH NO in the page, with a status code of 500 that can be seen in the network tab of the dev tools\nres status(500) send(err message);\n});\n```\nCreating custom errors\nWith the solutions above, the error middleware function can only really respond with a 500 status code no matter what error it is But what if we actually want to send a 404 A common way to do this is to create our own custom error by extending the Error object Create the following file CustomNotFoundError js within an errors folder:\n```javascript\n// errors/CustomNotFoundError js\nclass CustomNotFoundError extends Error {\nconstructor(message) {\nsuper(message);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "f84fa7dd52c133fb73ea8e550531c4c2",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "custom errors With the solutions above, the error middleware function can only really respond with a 500 status code no matter what error it is But what if we actually want to send a 404 A common way to do this is to create our own custom error by extending the Error object Create the following file CustomNotFoundError js within an errors folder: ```javascript // errors/CustomNotFoundError js class CustomNotFoundError extends Error { constructor(message) { super(message); thisstatusCode = 404;\n// So the error is neat when stringified NotFoundError: message instead of Error: message\nthis name = \"NotFoundError\";\n}\n}\nmodule exports = CustomNotFoundError;\n```\nWe can then use this custom error class and refactor the earlier version of getAuthorById like so:\n```javascript\nconst CustomNotFoundError = require(\" /errors/CustomNotFoundError\");\nconst getAuthorById = async (req, res) => {\nconst { authorId } = req params;\nconst author = await db getAuthorById(Number(authorId));\nif ( author) {\nthrow new CustomNotFoundError(\"Author not found\");\n}\nres send(Author Name: ${author name});\n};\n```\nSince Express will auto-catch any thrown errors in the async middleware function, we don't need to send an error response inside of this function but instead just throw an error Express calls next(), passing in the caught error as an argument, which passes control to our custom error handler It will eventually end up in the error middleware function where we can also modify:\njavascript\napp use((err, req, res, next) => {\nconsole error(err);\n// We can now specify the `err statusCode` that exists in our custom error class and if it does not exist it's probably an internal server error\nres status(err statusCode || 500) send(err message);\n});\nThis is a useful pattern and we can create more custom error classes for different use cases if needed What is the next function\nWe've used the next function a few times now But what exactly is it Well, to put it simply, it is used to pass control to the next middleware function in the application's request-response cycle To give an example:\n```javascript\nfunction middleware1(req, res, next) {\nconsole log(\"Middleware 1\");\nnext(); // Pass control to the next middleware\n};\nfunction middleware2(req, res, next) {\nconsole log(\"Middleware 2\");\nres",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "2afcd0d5c411a11870c65c1b609569a1",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "different use cases if needed What is the next function We've used the next function a few times now But what exactly is it Well, to put it simply, it is used to pass control to the next middleware function in the application's request-response cycle To give an example: ```javascript function middleware1(req, res, next) { console log(\"Middleware 1\"); next(); // Pass control to the next middleware }; function middleware2(req, res, next) { console log(\"Middleware 2\"); ressend(\"Response from Middleware 2\");\n// request-response cycle ends here\n};\nfunction middleware3(req, res, next) {\nconsole log(\"Middleware 3\");\nres send(\"Response from Middleware 3\");\n};\napp use(middleware1);\napp use(middleware2);\napp use(middleware3);\n// will log Middleware 1 -> Middleware 2 and send a response with the text \"Response from Middleware 2\"\n```\nHere we have middleware1, middleware2, and middleware3 middleware1 calls the next function, and since we are not yet sending a response, we pass the control to the next middleware function - middleware2 (as indicated by the order of app use calls) In middleware2, we send a response which ends the request-response cycle Since it has ended, the third middleware function (middleware3) does not run But if we somehow did not call the next function in middleware1, do you know what would happen Perhaps pop in the TOP Discord server and let us know what you think Also, as we've discussed earlier with regards to calling the next function We have the following arguments that we can pass to it:\nNo argument next() - Will pass control to the next middleware function Very simple and straightforward With an error argument next(new Error( )) - Will pass control directly to the error middleware function With the string next('route') - Will pass control to the next route handler with the same matching path (if there is one) This only works for app METHOD or router METHOD Potentially, it can also be the same as just calling next with no argument With the string next('router') - Will skip all middleware functions attached to the specific router instance and pass control back out of the router instance Basically, we exit the router and go back to the parent router, e g app (yes, the Express app is also just a router under the hood)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "c63323dd7355905ac305dd98662813a9",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "one) This only works for app METHOD or router METHOD Potentially, it can also be the same as just calling next with no argument With the string next('router') - Will skip all middleware functions attached to the specific router instance and pass control back out of the router instance Basically, we exit the router and go back to the parent router, e g app (yes, the Express app is also just a router under the hood)Out of the four, we will likely only use the first two, unless we have a very specific need that requires the other two Consolidating what we've learned\nThe following is the folder structure you'd end up with if you had been coding along:\ntext\nexpress-app/\n├─ errors/\n│  ├─ CustomNotFoundError js\n├─ controllers/\n│  ├─ authorController js\n├─ routes/\n│  ├─ authorRouter js\n│  ├─ other routers\n├─ app js\n├─ db js\nAs an exercise, feel free to create more sample data in our db js file and controllers for the other routes we've previously created Assignment\n1 This article [Express Middlewares, Demystified](https://medium com/@viral_shah/express-middlewares-demystified-f0c2c37ea6a1) Written by Viral Shah will help understand how middlewares work in a deeper way The article also encourages you to read the source code of Express which you can likely do by now #### Asynchronous Handlers\nWhile reading the article attached above, you might notice this paragraph:\n>— Express was not built to await on handlers or handle returned promises Hence, when a handler function is an async function, it will return a promise When we throw an error, we are simply rejecting that promise So, the only way to pass an error is via ‘next(err)’ function\nAs of the current version of Express (v5), async route handlers are now natively supported Please note that this article is outdated in this regard 1 Watch this short 10 minutes [video tutorial of the MVC pattern](https://www youtube com/watch v=Cgvopu9zg8Y) There is not much to this other than consolidating what you already know Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "9f747ef666b2aea1c3888132433f881c",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\controllers.md",
    "source_type": "git_repo",
    "title": "controllers",
    "content": "pass an error is via ‘next(err)’ function As of the current version of Express (v5), async route handlers are now natively supported Please note that this article is outdated in this regard 1 Watch this short 10 minutes [video tutorial of the MVC pattern](https://www youtube com/watch v=Cgvopu9zg8Y) There is not much to this other than consolidating what you already know Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the common response methods and their use cases What are the types of middleware How does a middleware get executed In which order What does calling the next function do What if we pass an error argument What are the other arguments you can pass to the next function What is a controller What is the difference between a controller and a middleware What happens if you define a middleware function with four parameters What would you do to create a custom error Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The Express documentation for Using Express Middleware is a short one with the same information, but has more examples that you can run through",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24773,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "54f99d10fbf617abd7cea1b5188f7606",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "Introduction\nBefore continuing our web development journey, we must address one important task - showcasing our hard work to the world Whether it's to share our creations with friends, create a portfolio for future employers, or launch an online business, we need to host our applications somewhere others can publicly access on the internet In this lesson, we will learn how to deploy our apps to a hosting provider, allowing us to run, build, and operate our web applications in the cloud Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand what a hosting provider is Understand the difference between static and dynamic sites Understand what a PaaS is and how they work Know how to deploy to a PaaS provider Know how to troubleshoot common deployment issues What are hosting providers Hosting providers are like server landlords They own servers and rent space on them to customers, who can then use the space to store their websites and make them accessible to anyone on the web You've already had some experience using a hosting provider when you deployed projects to Github pages earlier in the curriculum GitHub pages is great for hosting static web pages for free, but we won't be able to use it for hosting our dynamic Node apps We're going to need something more powerful Static vs dynamic sites\nStatic websites consist of pre-written HTML pages They are \"static\" because everyone who visits them will see the same content To build static sites, you only need HTML, CSS and JavaScript Dynamic websites, on the other hand, are websites that can change content based on the user who is visiting them X (formerly known as Twitter) is a good example; every user sees different content on their homepage feed based on who they follow To build dynamic sites, you still need HTML, CSS and JS But additionally, you need a server-side application and a database This additional tech prohibits us from using GitHub Pages for hosting our Node apps GitHub pages cannot run Node js applications and doesn't have database services we can use Similarly, host providers like Netlify and Vercel, which you may have used back in the React course, do not have the same capabilities to run our Node js servers and databases They're not the right tools for our back ends Luckily, many hosting providers do offer everything we need They range from the big and complex cloud providers like AWS, Google Cloud, and Microsoft Azure to the more beginner-friendly platform as a service (PaaS) providers like Railway and Render We will be focusing on and utilizing these latter providers in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18666,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "990a06169e99d604b2f8c53c8cbb375c",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "course, do not have the same capabilities to run our Node js servers and databases They're not the right tools for our back ends Luckily, many hosting providers do offer everything we need They range from the big and complex cloud providers like AWS, Google Cloud, and Microsoft Azure to the more beginner-friendly platform as a service (PaaS) providers like Railway and Render We will be focusing on and utilizing these latter providers in this lessonWhat is a PaaS Platform as a Service is a specific kind of hosting provider The most important thing to know about them is they are much easier to use and more approachable for beginners than other hosting providers They manage many of the low-level nitty-gritty details with the underlying server infrastructure, which allows us as developers to focus more of our time on building our applications instead of configuring and managing the servers they run on Taking the landlord metaphor we used earlier a little further, a PaaS platform is like having a landlord who takes care of all the utilities, building maintenance and security Meanwhile, you, the developer, focus on furnishing, decorating and living in the space It's an incredibly powerful model and perfect for us right now Using a PaaS provider for deployment, we can focus on learning and mastering Node without taking a significant diversion to learn the specialized knowledge needed to manage and maintain servers ourselves We will provide a list of our recommended PaaS providers later in the lesson First, let us explore from a high level how PaaS providers work How do PaaS services work PaaS providers work by giving you easy access to a few resources that any Node app can't live without to function on the web Instances\nThe first and most crucial thing PaaS providers give you are virtual \"computers\" called instances which run your app Basically, one instance means a single instance of your application running at one time That's like having a single computer run your app like you do on Localhost Multiple instances are like having several copies of your app running simultaneously, which allows you to handle more traffic For most of your apps, one instance is plenty enough You can support a lot of traffic using just a single instance Many of the PaaS providers we will recommend later in this lesson give you your first one for free #### Server instance and database instance\nLearners can keep their server instance and database instance on one PaaS or use separate PaaSes if necessary When you deal with paid plans, it might even reduce hosting costs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18666,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "2c91f05295949c026c005326930fd54b",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "most of your apps, one instance is plenty enough You can support a lot of traffic using just a single instance Many of the PaaS providers we will recommend later in this lesson give you your first one for free #### Server instance and database instance Learners can keep their server instance and database instance on one PaaS or use separate PaaSes if necessary When you deal with paid plans, it might even reduce hosting costsDatabases\nThe second most important thing PaaS providers give you is databases They make it easy to spin up a new database for each app by doing all the setup and configuration for you Many providers even manage the database for you by setting up automatic backups, ensuring the database is constantly updated with the latest critical security patches and ongoing maintenance that keeps your databases up and running smoothly The peace of mind this affords you can't be overstated You never want to be in a position where you're waking at 4 am to multiple alerts Your database is on the fritz because of some security patch you forgot to apply, and there are no backups to fall back on Many PaaS services come with SQL databases included Either choice isn't too difficult to set up, but it's always nice to have a fallback option For now, we encourage you to try and figure out how to deploy your mini-message board project with just what you learn in this lesson Domain names\nPaaS providers will give you a random domain name when you first deploy In Heroku's case, it's usually something zen-like \"afternoon-falls-4209\" If you want to visit the app, you can go directly to http://afternoon-falls-4209 herokuapp com to see your app live on the web in all its glory The domain name will always be yours on a PaaS provider They give each app a unique domain name that's yours as long as your app lives on their platform In the real world, you'll want to link it to your own custom domain, for example, http://mycooldomain com It's worth mentioning that you don't need custom domain names for the portfolio projects you'll be building in this course The random domains your PaaS provider gives you will be good enough However, if you have an itch for tricking out your app with a custom domain name, you'll first need to purchase a domain from a registrar like Porkbun or NameSilo To find a new domain, try using Domainr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18666,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "1f177b83c70d43a53591f56c126a0ac5",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "custom domain, for example, http://mycooldomain com It's worth mentioning that you don't need custom domain names for the portfolio projects you'll be building in this course The random domains your PaaS provider gives you will be good enough However, if you have an itch for tricking out your app with a custom domain name, you'll first need to purchase a domain from a registrar like Porkbun or NameSilo To find a new domain, try using DomainrOnce you have your domain, you need to point it to your project The provider you are using will have exhaustive documentation on using custom domain names on their platform Our recommended PaaS services\nChoosing a PaaS provider was once a simple decision Heroku had a free tier that gave you everything needed to host as many small apps as you wanted, but they unfortunately discontinued it in 2022 Luckily, there are still plenty of other great options out there The downside is that they all have very limited free tiers For this reason, and to accommodate as many of our learners as possible, we're going to recommend a range of options instead of just one You can host most of your projects for free using a combination of the different providers we recommend, but you'll have a bit more leg work to do You'll have to create an account and get familiar with a few different providers If you can pay for hosting, things are more straightforward It will afford you the luxury of choosing one provider you can learn deeply, and you'll be able to manage all your apps from one place Whatever your circumstances, we've got you covered Here are the PaaS providers we recommend Railway app\nCan deploy both servers and databases Railway has a convenient deployment process You link to your project's GitHub repo Pay for what you use model $5 a month should be enough to host four applications Railway app: Free Plan\nYou get a free one-time grant of $5 on their free trial, and the applications are never put to sleep when inactive However, the longevity of your free allowance depends on how many resources you consume More complex apps with more traffic may consume all free resources within a month, whereas simpler apps may last longer Railway app: Links\nRailway homepage\nRailway documentation\nRender\nCan deploy both servers and databases Render allows you to deploy using \"Blueprints\", which link to your project's GitHub repo The free 750-hour allowance is enough to host a few apps without paying anything",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18666,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "a84f6a6dcedf174a8d641169aebe2dca",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "However, the longevity of your free allowance depends on how many resources you consume More complex apps with more traffic may consume all free resources within a month, whereas simpler apps may last longer Railway app: Links Railway homepage Railway documentation Render Can deploy both servers and databases Render allows you to deploy using \"Blueprints\", which link to your project's GitHub repo The free 750-hour allowance is enough to host a few apps without paying anythingHowever, databases are separate on Render, and the lowest spec databases cost $7 each $21 a month is enough to host three applications as each app's database will cost $7 Render: Free Plan\n750 hours of free usage per month Applications are put to sleep automatically after 15 minutes of inactivity, so the 750 free hours should be enough to host a few apps for the entire month Render: Links\nRender homepage\nRender documentation\nGuide: Official getting started with Node/Express on Render guide\nGuide: CodeBrah video guide for deploying Node applications to Render\nKoyeb\nCan deploy both servers and databases Easily Git push to deploy Ability to run web apps, APIs, and workers easily SSL and 10 free custom domains\nKoyeb: Free Plan\nOne free Web service One free Postgres database (50 hours) Doesn't require a credit card to start Pay-per-use by the second for more Koyeb: Links\nKoyeb homepage\nKoyeb documentation\nGuide: Official getting started with Node/Express on Koyeb guide\nNeon\nCan deploy databases only 24/7 for your main database 20 additional hours of database branching Point-in-time restore (24 Hours)\nNo credit card required Neon: Free Plan\n10 projects\n0 5 GiB of storage per project\n24/7 for your main compute\nNo credit card required\nNeon: Links\nNeon homepage\nNeon documentation\nGuide: Connect a Node js application to Neon\nAiven\nCan deploy databases only 24/7 for all database services High availability and automatic backups Point-in-time recovery (varies by service) No credit card required Aiven: Free Plan\n5 GiB of storage 24/7 for all database services One free database for every services including PostgreSQL, MySQL and Redis No credit card required Aiven: Links\nAiven homepage\nAiven documentation\nGuide: Connect a Node js application to Aiven\n#### Keep your secrets safe This guide provides a sample for configuring a database connection",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18666,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "185105a448c2ed8ced88d50469355585",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "only 24/7 for all database services High availability and automatic backups Point-in-time recovery (varies by service) No credit card required Aiven: Free Plan 5 GiB of storage 24/7 for all database services One free database for every services including PostgreSQL, MySQL and Redis No credit card required Aiven: Links Aiven homepage Aiven documentation Guide: Connect a Node js application to Aiven #### Keep your secrets safe This guide provides a sample for configuring a database connectionPlease do not store credentials directly in your code Refer to the [Environment Variables](https://www theodinproject com/lessons/nodejs-environment-variables) section for best practices Debugging and troubleshooting deployments\nErrors are an inevitable part of the software development process They especially have a habit of popping up when deploying to a new environment like a hosting provider When this happens, the key is not to panic and to follow a calm, step-by-step debugging process In most cases, you'll be running into errors that thousands of developers have encountered before These errors are well documented and often have solutions you can find with a little bit of Google-fu There are two stages of the deployment process where you are most likely to encounter problems These are during deployment and right after Node version compatibility\nDepending on the host provider you use, the supported Node versions and default selected version may differ You can refer to the providers' documentation for more information on what is supported and selected, and depending on what features you use in your code, you may need to specify what Node versions your project is compatible with in your package json On deployment\nIf you run into an error while deploying, the first thing to do is to check the build logs Finding the build logs should be easy; it's the stream of output you'll see after kicking off a new deployment Scroll through these logs and find the point where the deployment encountered the error It should stand out from the rest of the output and will often look like the stack traces you've already seen with JavaScript/Node The error output will tell you exactly what went wrong If you don't recognize the error or what might cause it, your next step will be to copy and paste it into your favorite online search engine You'll likely find a Stack Overflow post with a solution You can get support in our Discord server if searching doesn't lead to anything conclusive Most of the errors you'll face during this stage will be related to properly setting up your app with what your hosting provider needs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18666,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "ce43a8b93bf8470062ec1bc950ea8b07",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "If you don't recognize the error or what might cause it, your next step will be to copy and paste it into your favorite online search engine You'll likely find a Stack Overflow post with a solution You can get support in our Discord server if searching doesn't lead to anything conclusive Most of the errors you'll face during this stage will be related to properly setting up your app with what your hosting provider needsDouble-checking the deployment guide for your hosting provider is always a good place to start It's very easy to miss a step or mistype something After deployment\nYou've just deployed your app successfully; everything is going your way, and this will be a great day However, when you visit your app you are greeted with the dreaded 500 page Nothing induces panic in a developer quite like a 500 page It could mean just about anything Error pages in production are deliberately vague to let users know something went wrong without all the overwhelming technical jargon Another important reason is to prevent attackers from using errors in your system to their advantage You have a few tools at your disposal to help you diagnose the problem The first is the application logs The application logs are the output of your application as it's running It tells you what's happening with your app as it's happening All the incoming requests and database queries are recorded, and you can see them being recorded in real-time So if you're getting a 500 error, you can open up the logs and watch them closely as you refresh the page on your app in the browser to reproduce the error This will either tell you exactly what the problem is or generate some leads you can use to dig further Going further with troubleshooting tools\nAs your application grows, you'll want to get more sophisticated with your error-tracking tools For example, you can use services like Sentry to track and monitor errors using a slick, easy-to-use interface and get notified when they happen These services will give you more information about the error and the request that caused it, saving you a ton of time However, setting up and using these services are out of the scope of this lesson You can get by just fine with the logs for your first few apps One final tip\nIf something has broken in your latest deployment after successful deployments in the past, backtrack to the last working version to determine what changes you made and slowly reintroduce those changes again if you need to This will be where the Git skills you've been learning will start to really pay off and save you an immense amount of time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18666,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "25eb7828fd6b1c809b94b476f988b8cd",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\deployment.md",
    "source_type": "git_repo",
    "title": "deployment",
    "content": "can get by just fine with the logs for your first few apps One final tip If something has broken in your latest deployment after successful deployments in the past, backtrack to the last working version to determine what changes you made and slowly reintroduce those changes again if you need to This will be where the Git skills you've been learning will start to really pay off and save you an immense amount of timeYou'll be able to use git log to see the history of your latest changes and git checkout to revert to a previous working version quickly Assignment\n1 Deploy your [Mini Message Board project](https://www theodinproject com/lessons/node-path-nodejs-mini-message-board) to one of the hosting providers we've mentioned Any of the free options will work for curriculum purposes, so it doesn’t matter which you pick for your projects The important thing to take away from this first deployment is getting experience deploying Don’t worry if you don’t understand everything that’s happening That will come with time - Use one of the linked deploy guides for your PaaS provider to help you through the process - If you're having trouble deploying, check out the [Debugging and Troubleshooting Deployments](#debugging-and-troubleshooting-deployments) section for some tips Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What's the difference between static and dynamic websites What does 'PaaS' stand for What are the advantages of using a PaaS hosting provider What is an instance What steps can you take to diagnose an issue that arises during deployment What steps can you take to diagnose an issue that only appears after deployment Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental free-for dev This is a huge repository for list of software such as SaaS, PaaS, IaaS, etc and other offerings with free developer tiers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 18666,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\deployment.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "46d4d61a42c8d332c18adc6b15ccf400",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
    "source_type": "git_repo",
    "title": "installing_postgresql",
    "content": "Introduction\nData persistence is integral to the vast majority of web applications Data persistence is achieved through databases Being able to understand how to structure, build, and query your own database are important skills for any full-stack developer to have For example, consider The Odin Project Where is your username stored Where are project submissions stored Where does this lesson content, the one you're reading right now, get stored Yes, a database We've chosen PostgreSQL as our database of choice for the curriculum All SQL knowledge that you've learned in the earlier course should be transferable to PostgreSQL We'll also learn new PostgreSQL specific things Watch through this fun and short introduction video to PostgreSQL by Fireship Make sure you've completed the [SQL course](https://www theodinproject com/paths/full-stack-javascript/courses/databases) This lesson and all subsequent lessons will assume you understand SQL syntax and concepts In this lesson, we'll install PostgreSQL and in the next lesson we'll learn how to use it in our Express application Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to install PostgreSQL Installing PostgreSQL\nPick your operating system below to get the appropriate steps for installing PostgreSQL Linux\n### Step 1: Make sure the system is up to date\nBefore installing PostgreSQL, it's a good idea to make sure the operating system is up to date To update our system, run this command:\n```bash\nsudo apt update && sudo apt upgrade\n```\n### Step 2: Install the PostgreSQL packages\nAfter our system is up to date, we will install the packages for PostgreSQL ```bash\nsudo apt install postgresql postgresql-contrib libpq-dev\n```\nAfter installation is complete, let's start the server using this command:\n```bash\nsudo systemctl start postgresql service && systemctl status postgresql service\n```\nGot an error, or don't see an active service Come visit [our Discord server](https://discord gg/V75WSQG) for some help If `postgresql` is active, you can press `Q` to quit the status screen and move on to the next step ### Step 3: Setting up PostgreSQL\nPostgreSQL is now running, but we have to configure it in order to be able to use it with our local Express applications #### 3 1 PostgreSQL roles\nPostgreSQL authenticates via roles A role is like a user, which is how we interact with the service",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9548,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ce8f3f8a216a6bda398fd96e3be10d26",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
    "source_type": "git_repo",
    "title": "installing_postgresql",
    "content": "gg/V75WSQG) for some help If `postgresql` is active, you can press `Q` to quit the status screen and move on to the next step ### Step 3: Setting up PostgreSQL PostgreSQL is now running, but we have to configure it in order to be able to use it with our local Express applications #### 3 1 PostgreSQL roles PostgreSQL authenticates via roles A role is like a user, which is how we interact with the serviceThe default PostgreSQL installation has set up a `postgres` role that we can use This is great, but that would mean having to switch to that role every time we wanted to do something with the database server Instead, we will set up our own role to avoid switching to the `postgres` role all the time #### 3 2 Creating a new role\nWe will be creating a new role with the same name as our Linux username If you're not sure of your Linux username, you can run the command `whoami` in your terminal to get it Once you have that information ready, let's create a role in PostgreSQL The command to do so is:\n```bash\nsudo -i -u postgres createuser --interactive\n```\nRemember that we want the role name to be the same as our Linux user name and be sure to make that new role a superuser Setting up a role like this means we can leverage \"peer authentication\" making using the local database very easy #### 3 3 Creating the role database\nOne other important step in setting up PostgreSQL is that each role must have its own database of the same name Without it, the role we just created will not be able to log in or interact with PostgreSQL You can try to run `psql` now, but you will get an error that the database does not exist Not to worry, let's create one to fix this:\nIf your username has any capital letters, you must surround it in quotes when running the below command ```bash\nsudo -i -u postgres createdb\n```\nNow our role is fully set up: we've got `` and that role has a database #### 3 4 Securing our new role\nOne important thing that we have to do is to set up a password for our new role so that the data is protected Now that our role is set up, we can actually use it to administer PostgreSQL",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9548,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d7727edc3f58baa5bacbbef50bd39da7",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
    "source_type": "git_repo",
    "title": "installing_postgresql",
    "content": "in quotes when running the below command ```bash sudo -i -u postgres createdb ``` Now our role is fully set up: we've got `` and that role has a database #### 3 4 Securing our new role One important thing that we have to do is to set up a password for our new role so that the data is protected Now that our role is set up, we can actually use it to administer PostgreSQLAll you have to do is enter this command to get into the PostgreSQL prompt:\n```bash\npsql\n```\nYou should see the PostgreSQL prompt come up with the new role we just created, like so:\n```sql\nrole_name=#\n```\nIf you don't see a similar prompt, then reach out in [our Discord server](https://discord gg/V75WSQG) for some help If you **do** see a similar prompt, then we can create a password for the role like so:\n```sql\n\\password\n```\nYou'll be prompted to enter a password and to verify it Once you are done, the prompt will return to normal Now, we will configure the permissions for our new role (note the semicolon at the end):\n```sql\nGRANT ALL PRIVILEGES ON DATABASE  TO ;\n```\nRemember that you should change the `` and `` (they should both be the same) If you see `GRANT` in response to the command, then you can type `\\q` to exit the prompt #### 3 5 Saving access information in the environment\nAfter finishing our configuration, the last step is save it into the environment to access later In order to save our password to the environment, we can run this command:\n```bash\necho 'export DATABASE_PASSWORD=\"\"' >> ~/ bashrc\n```\nNote here the name we've chosen for our environment variable: `DATABASE_PASSWORD` Also, remember to update `` in the command to what was set above Now, this variable lives in our environment for us to use As the variable is new, we'll want to reload the environment so that we can access it To reload the environment, you can close and re-open your terminal Once that's done, we can move to testing it out macOS\n### Step 1: Make sure the system is up to date\nBefore running commands with homebrew, you'll want to make sure things are up to date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9548,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "2e9b29894b4234d2186712cb87d82463",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
    "source_type": "git_repo",
    "title": "installing_postgresql",
    "content": "Now, this variable lives in our environment for us to use As the variable is new, we'll want to reload the environment so that we can access it To reload the environment, you can close and re-open your terminal Once that's done, we can move to testing it out macOS ### Step 1: Make sure the system is up to date Before running commands with homebrew, you'll want to make sure things are up to dateRun the following commands one by one:\n```bash\nbrew update\nbrew upgrade\n```\nIf your terminal doesn't recognize `brew`, then you'll need to go and install homebrew You can find it and other installs in the [installation appendix](https://www theodinproject com/guides/installations) ### Step 2: Install PostgreSQL via PostgresApp\nInstalling PostgreSQL via Postgres app is simple Visit [Postgres app](https://postgresapp com/) and follow the instructions outlined Importantly, you'll want to configure your `$PATH` so you can access the tooling that comes along with PostgreSQL After installing Postgres app, we can then install a PostgreSQL server We want to install the latest available version of PostgreSQL After installing PSQL via Postgres app, you can run this command to update your path to access all the tooling:\n```bash\nsudo mkdir -p /etc/paths d &&\necho /Applications/Postgres app/Contents/Versions/latest/bin | sudo tee /etc/paths d/postgresapp\n```\nAfter you've run this command and restarted your terminal, you can run `which psql` and we would expect this output:\n```bash\n/Applications/Postgres app/Contents/Versions/latest/bin/psql\n```\nIf you don't see a similar output, come visit [our Discord server](https://discord gg/fbFCkYabZB) for some help Please note that that Postgres app installs servers without any security configured, and will accept all local connections without a password This is fine for our development environment, but be aware that when you move things to production, this will not be a good strategy Postgres app defaults to creating a role and user database that matches your macOS user You can confirm this by running this command after installing Postgres app and updating the path:\n```bash\npsql\n```\nYou should see the PostgreSQL prompt come up like this:\n```bash\n=#\n```\nBecause Postgres",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9548,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "b3183a453ed5f147b0e1cd9c30d30eda",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
    "source_type": "git_repo",
    "title": "installing_postgresql",
    "content": "without a password This is fine for our development environment, but be aware that when you move things to production, this will not be a good strategy Postgres app defaults to creating a role and user database that matches your macOS user You can confirm this by running this command after installing Postgres app and updating the path: ```bash psql ``` You should see the PostgreSQL prompt come up like this: ```bash =# ``` Because Postgresapp has configured trusted authentication for all local connections, we don't need to set up any password authentication for our local development environment Just remember that your `role_name` is the user that appears in the `psql` prompt above You can type `\\q` to exit Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why is data persistence important in web applications Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9548,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\installing_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "331920f88f9a9c51a5a0ee84f1689068",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "Introduction\nIn this lesson, we'll dive into forms and how to manage them using Express We'll explore ways to secure your Node js / Express applications by using express-validator for validation and sanitization Understanding proper form handling is crucial for maintaining data integrity and protecting your web applications from security risks Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understanding HTML form elements and their actions Using express-validator for validation and sanitization Best practices for form design and data integrity HTML forms overview\nFirst, a brief refresher on the actual HTML Let's create a simple HTML form, with a single text field for collecting a full name, and its associated label element The HTML structure would look something like this:\n```html\nFull Name:\nSubmit\n```\nWe have the HTML form element itself, with an action pointing to some resource on our server, and a method defined Notice how the method corresponds to an HTTP verb, typically either GET or POST The form consists of a text input with an associated label and a submit button The input's name attribute plays a key role, as it defines how our input will be identified in the form data sent to our server This is especially important when handling form submissions on the backend The type=\"submit\" button then allows the user to upload the entered data to the server The form attributes define how to communicate with the server:\naction: The resource/URL where data is sent for processing when the form is submitted If this is not set, or is an empty string, the form will be submitted back to the current page URL\nmethod: Defines the HTTP method to use (POST or GET) POST is generally more secure because it keeps sensitive information out of the URL, which means they won't show up in server logs, and is the standard choice for creating or updating data on the server side GET is for forms that don't modify data, such as search forms, or when you want the form submission to be bookmarkable or shareable via URL The form data here is sent as a query string as part of the request url Form handling process\nThe form's action will point to some endpoint on our server, which will allow our controller to handle the request The controller then communicates with the database to handle the data We then generate a new or updated view with the controller's response and redirect the client This is known as the Post/Redirect/Get (PRG) design pattern which helps prevent duplicate POST requests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "ab343f50d4567e4fb877f0460a08fb23",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "sent as a query string as part of the request url Form handling process The form's action will point to some endpoint on our server, which will allow our controller to handle the request The controller then communicates with the database to handle the data We then generate a new or updated view with the controller's response and redirect the client This is known as the Post/Redirect/Get (PRG) design pattern which helps prevent duplicate POST requestsValidation and sanitization\nBefore the data from a form is sent off to our server, we should consider two important steps:\nValidation ensures user input meets the specified criteria (e g required fields, correct format) Sanitization cleans user input to prevent malicious data from being processed by removing or encoding potentially malicious characters We don't always have to sanitize data right when we get it - sometimes it makes sense to sanitize just before we use it instead We'll be using a library called express-validator to help us out with both of these While it makes these processes much simpler, it's important to understand the underlying concepts of these two operations Installing express-validator\nWe start as usual by installing the correct package in the root folder of our project bash\nnpm install express-validator\nTo get started using the package, we first need to require it in our project\njavascript\nconst { body, validationResult } = require(\"express-validator\");\nexpress-validator comes with many functions for just about every form operation you could think of, but for this lesson, we'll be sticking with body() and validationResult() Understanding the body() function\nThe body() function allows you to specify which fields in the request body should be validated and sanitized, as well as how to handle it javascript\n[\nbody(\"birthdate\", \"Must be a valid date \") optional({ values: \"falsy\" }) isISO8601() // Enforce a YYYY-MM-DD format ];\nThis example marks birthdate field as optional, but still enforces the ISO8601 date format on inputs This is because { values: \"falsy\" } means values that aren't undefined, null, false, 0 or empty strings \"\" will still be validated Chaining validations\nYou can also chain multiple validation methods, with unique error messages if the checks fail javascript\n[\nbody(\"name\") trim() notEmpty() withMessage(\"Name can not be empty \") isAlpha() withMessage(\"Name must only contain alphabet letters \"),\n];\nThis ensures that name is not only present and trimmed, but also only contains alphabet letters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "da285dfe5d474ada2002023bba41549a",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "This is because { values: \"falsy\" } means values that aren't undefined, null, false, 0 or empty strings \"\" will still be validated Chaining validations You can also chain multiple validation methods, with unique error messages if the checks fail javascript [ body(\"name\") trim() notEmpty() withMessage(\"Name can not be empty \") isAlpha() withMessage(\"Name must only contain alphabet letters \"), ]; This ensures that name is not only present and trimmed, but also only contains alphabet lettersEscaping user input\nWhile this might work for outputs we know won't have special characters, like names or ages, we also have to consider situations that do allow those characters For example, when writing their \"About Me\" description, what would happen if the client decides to inject JavaScript code instead ```ejs\nAbout Me: <%- description %> // The client then inputs the following as their page's About Me:\n```\nWhen unescaped, this would be rendered into HTML as:\n```html\nAbout Me: ```\nTo prevent this cross-site scripting (XSS) attack, we can escape the output (you may also see this referred to as encoding) Escaped HTML replaces special characters, like <, with their respective HTML entities, in this case &lt; In EJS, we can escape the output using <%= %> ```ejs\nAbout Me: <%= username %> // The escaped output is now rendered harmless:\n// About Me: <script>alert(\"Hacked \");</script> ```\nSo why not escape the data when we receive it by adding escape() to the end of our body() validation chain instead \"Dangerous characters\" are only dangerous at the point of use, and also only in certain contexts What's \"dangerous\" for HTML may not be dangerous for SQL and vice versa, and they won't pose risks until they get used in those contexts Also, if we have data with HTML entities after escaping them, if we used escaped output with (<%= %>), then &lt; wouldn't become < but output literally as the text &lt; We'd need to either unescape them then re-escape them via escaped output, or end up using unescaped output (<%- %>), which, like using innerHTML, is undesirable as shown above Validation results\nOnce the validation rules are applied, you can use validationResult to handle any validation errors:\n```javascript\nconst controller = (req, res, next) => {\nconst errors = validationResult(req);\nif (",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "3992edcc6edfb25bd36a4738ef21aae4",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "with (<%= %>), then &lt; wouldn't become < but output literally as the text &lt; We'd need to either unescape them then re-escape them via escaped output, or end up using unescaped output (<%- %>), which, like using innerHTML, is undesirable as shown above Validation results Once the validation rules are applied, you can use validationResult to handle any validation errors: ```javascript const controller = (req, res, next) => { const errors = validationResult(req); if (errors isEmpty()) {\nreturn res status(400) render(\"index\", {\nerrors: errors array(),\n});\n}\n// do stuff if successful\nres redirect(\"/success\");\n};\n```\nThis setup checks for any failed validation checks, and if there are any (the errors array is NOT empty), then the server sends a 400 status code, along with any errors that may be present, to our index view Otherwise, we're redirected to the /success route in our router Forms and Express routes\nOne final thing to cover is how to handle routes in Express After all, our form needs somewhere to send the data to javascript\nexports userUpdateGet = (req, res, next) => {};\nexports userUpdatePost = (req, res, next) => {};\nInside our router, we can then assign routes which correspond to the controller's functions:\n```javascript\nconst { Router } = require(\"express\");\nconst usersRouter = Router();\nconst usersController = require(\" /controllers/usersController\");\n// User update routes\nusersRouter get(\"/:id/update\", usersController userUpdateGet);\nusersRouter post(\"/:id/update\", usersController userUpdatePost);\nmodule exports = usersRouter;\n```\nIn our form, the action would look something like this:\n```ejs\n```\n/users/:id/update is an endpoint we've created on our Express server Putting it together\nLet's create a quick Express application to demonstrate how clients send data to servers with forms Set up a new Express app with EJS templating:\nbash\nnpm init -y\nnpm install express ejs express-validator\nCreate folders for routes, views, controllers, storages, and an app js file:\n```javascript\n// app js\nconst express = require(\"express\");\nconst app = express();\nconst usersRouter = require(\" /routes/usersRouter\");\napp set(\"view engine\", \"ejs\");\napp use(express urlencoded({ extended: true }));\napp use(\"/\", usersRouter);\nconst PORT = process env",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "0f654554205691bc2fe2f35d09ac26e3",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "application to demonstrate how clients send data to servers with forms Set up a new Express app with EJS templating: bash npm init -y npm install express ejs express-validator Create folders for routes, views, controllers, storages, and an app js file: ```javascript // app js const express = require(\"express\"); const app = express(); const usersRouter = require(\" /routes/usersRouter\"); app set(\"view engine\", \"ejs\"); app use(express urlencoded({ extended: true })); app use(\"/\", usersRouter); const PORT = process envPORT || 3000;\napp listen(PORT, (error) => {\nif (error) {\nthrow error;\n}\nconsole log(Express app listening on port ${PORT} );\n});\n```\nMost simple forms will use the Content-Type: application/x-www-form-urlencoded HTTP header when sending data to the server Express, however, can't natively parse that data We can use the express urlencoded() middleware to handle this for us and automatically set form's data to the req body field When extended is false,  our server will only accept a string or an array of data, so we set it to true for some added flexibility Note that if the Content-Type doesn't match application/x-www-form-urlencoded, then your server will show the data as an empty object {} Let's create a new router called usersRouter js in the routes folder:\n```javascript\n// routes/usersRouter js\nconst { Router } = require(\"express\");\nconst usersController = require(\" /controllers/usersController\");\nconst usersRouter = Router();\nusersRouter get(\"/\", usersController usersListGet);\nusersRouter get(\"/create\", usersController usersCreateGet);\nusersRouter post(\"/create\", usersController usersCreatePost);\nmodule exports = usersRouter;\n```\nNext we'll create two views:\nindex ejs will list all the users we've created createUser ejs will display our user creation form ```ejs\n<%= title %>\n<%= title %>\n<% if (locals users) {%>\n<% users forEach(user => { %>\nID: <%= user id %>, Name: <%= user firstName %> <%= user lastName %>\n<% }); %>\n<% } %>\nCreate a user\n```\n```ejs\n<%= title %>\n<%= title %>\nFirst Name:\nLast Name:\nSubmit\nBack to home\n```\nThe logic for this router will go inside of our controller:\n```javascript\n// controllers/usersController",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "cbc83cb7d1fd9eff387043b53eafae70",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "our user creation form ```ejs <%= title %> <%= title %> <% if (locals users) {%> <% users forEach(user => { %> ID: <%= user id %>, Name: <%= user firstName %> <%= user lastName %> <% }); %> <% } %> Create a user ``` ```ejs <%= title %> <%= title %> First Name: Last Name: Submit Back to home ``` The logic for this router will go inside of our controller: ```javascript // controllers/usersControllerjs\nconst usersStorage = require(\" /storages/usersStorage\");\nexports usersListGet = (req, res) => {\nres render(\"index\", {\ntitle: \"User list\",\nusers: usersStorage getUsers(),\n});\n};\nexports usersCreateGet = (req, res) => {\nres render(\"createUser\", {\ntitle: \"Create user\",\n});\n};\nexports usersCreatePost = (req, res) => {\nconst { firstName, lastName } = req body;\nusersStorage addUser({ firstName, lastName });\nres redirect(\"/\");\n};\n```\nAnd we'll use a storage class to hold the users we create In real-world scenarios, you would almost certainly be using a database for this, which you'll explore further in upcoming lessons This class is just for demonstration purposes before we get there ```javascript\n// storages/usersStorage js\n// This class lets us simulate interacting with a database class UsersStorage {\nconstructor() {\nthis storage = {};\nthis id = 0;\n}\naddUser({ firstName, lastName }) {\nconst id = this id;\nthis storage[id] = { id, firstName, lastName };\nthis id++;\n}\ngetUsers() {\nreturn Object values(this storage);\n}\ngetUser(id) {\nreturn this storage[id];\n}\nupdateUser(id, { firstName, lastName }) {\nthis storage[id] = { id, firstName, lastName };\n}\ndeleteUser(id) {\ndelete this storage[id];\n}\n}\n// Rather than exporting the class, we can export an instance of the class by instantiating it // This ensures only one instance of this class can exist, also known as the \"singleton\" pattern module exports = new UsersStorage();\n```\nWe can test our server with: node --watch app js You'll see we're able to add new users at http://localhost:3000/create, as well as list all existing users at http://localhost:3000/ Let's add a few methods to our usersController js for validating and sanitizing our form to get the type of data we want",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "4160577087ebee17f44830763acf959b",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "it // This ensures only one instance of this class can exist, also known as the \"singleton\" pattern module exports = new UsersStorage(); ``` We can test our server with: node --watch app js You'll see we're able to add new users at http://localhost:3000/create, as well as list all existing users at http://localhost:3000/ Let's add a few methods to our usersController js for validating and sanitizing our form to get the type of data we want```javascript\n// This just shows the new stuff we're adding to the existing contents\nconst { body, validationResult } = require(\"express-validator\");\nconst alphaErr = \"must only contain letters \";\nconst lengthErr = \"must be between 1 and 10 characters \";\nconst validateUser = [\nbody(\"firstName\") trim() isAlpha() withMessage(First name ${alphaErr}) isLength({ min: 1, max: 10 }) withMessage(First name ${lengthErr}),\nbody(\"lastName\") trim() isAlpha() withMessage(Last name ${alphaErr}) isLength({ min: 1, max: 10 }) withMessage(Last name ${lengthErr}),\n];\n// We can pass an entire array of middleware validations to our controller exports usersCreatePost = [\nvalidateUser,\n(req, res) => {\nconst errors = validationResult(req);\nif ( errors isEmpty()) {\nreturn res status(400) render(\"createUser\", {\ntitle: \"Create user\",\nerrors: errors array(),\n});\n}\nconst { firstName, lastName } = req body;\nusersStorage addUser({ firstName, lastName });\nres redirect(\"/\");\n}\n];\n```\nAnd we need to update our createUser ejs view to render these errors Let's create a new partial Inside the views folder, create a new folder called partials and inside it, create errors ejs:\n```ejs\n<% if (locals errors) {%>\n<% errors forEach(function(error) { %>\n<%= error msg %>\n<% }); %>\n<% } %>\n```\nAnd we'll include the partial just above our form in createUser ejs ejs\n<%- include(\"partials/errors ejs\") %>\nIf the form is filled out incorrectly, you'll see the page contains all the errors Now that we can create users, we also need a way to modify them Let's create a form that lets us specify an ID and the values we want to update by making a new view: updateUser ejs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "083d690f719453c70dadf727004972d4",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "}); %> <% } %> ``` And we'll include the partial just above our form in createUser ejs ejs <%- include(\"partials/errors ejs\") %> If the form is filled out incorrectly, you'll see the page contains all the errors Now that we can create users, we also need a way to modify them Let's create a form that lets us specify an ID and the values we want to update by making a new view: updateUser ejs```ejs\n<%= title %>\n<%= title %>\n<%- include(\"partials/errors ejs\") %>\nUpdate User\nBack to home\n```\nWe'll modify index ejs to include a new \"Update\" button next to each user to make our GET request to the route:\n```ejs\nID: <%= user id %>, Name: <%= user firstName %> <%= user lastName %>\nUpdate\n```\nJust like how we added a route for creating users, we'll add routes for updating them:\njavascript\nusersRouter get(\"/:id/update\", usersController usersUpdateGet);\nusersRouter post(\"/:id/update\", usersController usersUpdatePost);\nThen we'll add the logic for the requests into our controller:\n```javascript\nexports usersUpdateGet = (req, res) => {\nconst user = usersStorage getUser(req params id);\nres render(\"updateUser\", {\ntitle: \"Update user\",\nuser: user,\n});\n};\nexports usersUpdatePost = [\nvalidateUser,\n(req, res) => {\nconst user = usersStorage getUser(req params id);\nconst errors = validationResult(req);\nif ( errors isEmpty()) {\nreturn res status(400) render(\"updateUser\", {\ntitle: \"Update user\",\nuser: user,\nerrors: errors array(),\n});\n}\nconst { firstName, lastName } = req body;\nusersStorage updateUser(req params id, { firstName, lastName });\nres redirect(\"/\");\n}\n];\n```\nYou'll see you're now able to update users, and this looks very similar to how we create our users Finally, let's add a way to delete users as well by starting with another form inside our index ejs view:\n```ejs\n<% if (locals users) {%>\n<% users forEach(function(user) { %>\nID: <%= user id %>, Name: <%= user firstName %> <%= user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "2cb2801a0b95155125b6112120780e63",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "body; usersStorage updateUser(req params id, { firstName, lastName }); res redirect(\"/\"); } ]; ``` You'll see you're now able to update users, and this looks very similar to how we create our users Finally, let's add a way to delete users as well by starting with another form inside our index ejs view: ```ejs <% if (locals users) {%> <% users forEach(function(user) { %> ID: <%= user id %>, Name: <%= user firstName %> <%= userlastName %>\nUpdate\nDelete\n<% }); %>\n<% } %>\n```\nThen we add the logic to handle the request into our controller:\njavascript\n// Tell the server to delete a matching user, if any Otherwise, respond with an error exports usersDeletePost = (req, res) => {\nusersStorage deleteUser(req params id);\nres redirect(\"/\");\n};\nDon't forget to add the new route to your router javascript\nusersRouter post(\"/:id/delete\", usersController usersDeletePost);\nYou'll notice we didn't need a GET route here since we're already redirecting to / We could go much deeper into working safely with forms, but we'll stop there By now you can already see how helpful express-validator is, and how you can do almost anything you want with the req body object To give you an overview of what this entire flow looks like visually, here's an example courtesy of MDN:\nAssignment\n#### Add user details\nExpand the `User` model we created to include more details Implement the following fields and validations to your model:\n- Email (required, must be formatted properly)\n- Age (optional, must be a number between 18 and 120)\n- Bio (optional, maximum 200 characters)\nDon't forget to update the view to display these new fields #### Implement searching\nWhat if we want to search for a specific user in a list of thousands We'll need a new route and view that lets clients search our list of users 1 Add a form with a `GET` method (in `createUser ejs` or another view) which accepts a `name` or `email` (or both )\n1 Create a new route `/search` which accepts a `GET` request 1 Add the search logic to your controller which searches your list for a matching user Form data that has been sent via a `GET` request will not be available via `req body` You will need to use `req query` instead",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "7e770578952cc231fa9017120d24e893",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
    "source_type": "git_repo",
    "title": "<%= title %>",
    "content": "users 1 Add a form with a `GET` method (in `createUser ejs` or another view) which accepts a `name` or `email` (or both ) 1 Create a new route `/search` which accepts a `GET` request 1 Add the search logic to your controller which searches your list for a matching user Form data that has been sent via a `GET` request will not be available via `req body` You will need to use `req query` instead- Your `GET` request should handle searching for the user and then render the search result 1 Display the search results in a new view: `search ejs` #### Further Reading\n- This article expands on [what sanitizing and escaping means, and how they can help further secure your web applications](https://blog presidentbeef com/blog/2020/01/14/injection-prevention-sanitizing-vs-escaping/) - [express-validator](https://express-validator github io/docs/) contains the full documentation for `validator`, with some important sections being:\n- [Getting Started with express-validator](https://express-validator github io/docs/guides/getting-started)\n- [Validation Chains](https://express-validator github io/docs/guides/validation-chain)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the attributes of a form element and what do they do How do you install and import express-validator in your project How do you validate and sanitize form input using express-validator What is the difference between validation and sanitization How do you handle validation errors in Express routes What is the importance of escaping HTML characters in a form Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Web Dev Simplified has a tutorial on submitting forms and parsing form data in Express if you want a refresher express-validator's docs has a good write-up on implementing a custom validator in Express",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22552,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\forms_and_data_handling.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "798e4d563b9462fe60950a55ec9998b8",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\project_inventory_application.md",
    "source_type": "git_repo",
    "title": "project_inventory_application",
    "content": "Introduction\nAlright Let's flex our skills a little The section was humongous, and you learned a lot of things The only way to make it stick is to practice For this project you are going to create an Inventory management app for an imaginary store It's up to you what kind of business this is -- you could be managing groceries, car parts, baby-toys, musical-instruments, ponies or anything Your Inventory app should have categories and items, so when the user goes to the home-page they can choose a category to view, and then get a list of every item in that category You should include all of the CRUD methods for both items and categories, so anybody that's visiting the site can Create, Read, Update or Delete any Item or Category Assignment\n1 Set up an Express project and a new PostgreSQL database 1 Before you begin, take a moment to write down all of the database tables and its fields you'll need, as well as the relations between them For example:\n1 In a game management app, there can be a game, genre, and developer entity A game can have one or multiple developers and genres Similarly a developer can develop multiple games 1 In a pokemon management app, there can be a pokemon, trainer and a type entity Each pokemon must be contained in a type While a trainer can have multiple pokemons Any sufficient inventory app will have relations and constraints against its entities Figure out these database particulars for your inventory app 1 Set up the routes and controllers you're going to need 1 Create all of the 'READ' views (i e view category, and view item) 1 Create all the forms and build out the controllers you need for the create and update actions 1 Figure out the delete functionality What happens if you try to delete a category with items in it Should it delete all the items as well Should it just remove the category from the items Or something else This specific behavior will depend on your app's requirements 1 Once you're confident with your project, add dummy data via a script to your local database Do this again when you deploy 1 Deploy it and show off what you've done #### Extra credit\n1 Make it pretty 1 We will learn about creating users with secure passwords in a later lesson, but for now we don't want just *anyone* to be able to delete and edit items in our inventory Figure out how to protect destructive actions (like deleting and updating) by making users enter a secret admin password to confirm the action",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2619,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\project_inventory_application.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "07abcdfa4733ca98668951b5ab5c1d6f",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\introduction_to_express.md",
    "source_type": "git_repo",
    "title": "introduction_to_express",
    "content": "Introduction\nIn the previous section, you got up and running with Node You learned how to read and write data from files on the server, allowing you to serve up a multi-page website You may have found this process somewhat verbose and cumbersome, and may have even wondered how on Earth we would manage more complex use cases In this course, we will be using a backend framework called Express, which will handle many of the implementation details for us Express itself is an intentionally barebones and unopinionated framework; it allows us to do many things how we want, and to extend it with only the features we need However, while this gives us great flexibility in how we do things, it can be a little tricky deciding between multiple viable options at times Going forward, we will be diving into how we can use Express in various ways, such as to create a full-stack application using the Model View Controller (MVC) pattern, as well as to create a REST API just like ones you will have used before for things such as the Weather App or the React Shopping Cart projects There is a lot to take in, so take it steady, and do not be afraid to ask our community for help in the TOP Discord server Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Set up a basic Express server Describe how an incoming request is processed and ultimately responded to by the server Describe what a middleware function is Describe how to automatically restart your application when a change is made Setting up Express\nLet's make a basic Express app Inside a new directory, start by running npm init -y to create a package json Once that's created, we can install the Express dependency bash\nnpm install express\nWe can now create an app js file that will serve as the starting point for our Express server We could name this file anything we want, such as index js or main js, but we will use the same name used in the Express documentation Inside app js, we will have the following:\n```javascript\nconst express = require(\"express\");\nconst app = express();\napp get(\"/\", (req, res) => res send(\"Hello, world \"));\nconst PORT = 3000;\napp listen(PORT, (error) => {\n// This is important // Without this, any startup errors will silently fail\n// instead of giving you a helpful error message if (error) {\nthrow error;\n}\nconsole log(My first Express app - listening on port ${PORT}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9192,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\introduction_to_express.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f6577f0b3fb98a2329d301b9d10ac3b3",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\introduction_to_express.md",
    "source_type": "git_repo",
    "title": "introduction_to_express",
    "content": "the Express documentation Inside app js, we will have the following: ```javascript const express = require(\"express\"); const app = express(); app get(\"/\", (req, res) => res send(\"Hello, world \")); const PORT = 3000; app listen(PORT, (error) => { // This is important // Without this, any startup errors will silently fail // instead of giving you a helpful error message if (error) { throw error; } console log(My first Express app - listening on port ${PORT});\n});\n```\nLet's break this down We import express then call it to initialize the app variable This is our server We then have a route - the line beginning with app get We will come back to this in a moment Finally, we tell our server to listen for incoming requests on whatever port we specify, via localhost (which is basically just the computer's local connection) While port 3000 is the default choice, you can use any unused port (for example, Vite's dev server uses port 5173 by default) Back in your terminal, if you run node app js then all being well, you should see My first Express app - listening on port 3000 logged If something goes wrong, such as the port is already in use, it will throw an error instead Congratulations Your first Express server is now running #### The port variable\nFor demonstration purposes, we hardcoded a fixed port number above Usually, the port number would come from an environment variable with a fallback value in case the environment variable does not exist ```javascript\nconst PORT = process env PORT || 3000;\n```\nIf the specified port is already in use, we can change the environment variable value without editing the source code Also, some hosting services configure their own ports which may differ from a fix value hardcoded in A request's journey\nNow that our server is up and running on port 3000, let's send it a request In a browser, navigate to http://localhost:3000/ (don't worry if you forget the slash / at the end; the browser will silently add it for you if so) This action tells the browser to send a GET request to the / path of whatever server is listening at port 3000 on our localhost (which is our Express server ) and display in the window whatever it receives in response Whenever you navigate to any web URL this way, this is essentially what you are doing Navigating to https://theodinproject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9192,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\introduction_to_express.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "77fe5c275b47f902c0e029ac681d09c3",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\introduction_to_express.md",
    "source_type": "git_repo",
    "title": "introduction_to_express",
    "content": "the slash / at the end; the browser will silently add it for you if so) This action tells the browser to send a GET request to the / path of whatever server is listening at port 3000 on our localhost (which is our Express server ) and display in the window whatever it receives in response Whenever you navigate to any web URL this way, this is essentially what you are doing Navigating to https://theodinprojectcom/paths via the address bar is just telling the browser to send a GET request to the /paths path at https://theodinproject com, then display what it receives in response Once you navigate to http://localhost:3000/, you should see Hello, world appear in the window Magic, right When our server receives our GET request, Express stores the request in a request object This request gets passed through a chain of functions we call middleware functions until eventually, a middleware function tells Express to respond to the request In our example, the request comes through as a GET request to the / path This matches the route we have in our app js file javascript\napp get(\"/\", (req, res) => res send(\"Hello, world \"));\nWe will discuss routes in more detail in a later lesson, but to summarize the above line, it tells Express: \"if a GET request comes through to the / path, pass the request through the following chain of middleware functions\" Here, we only have a single function If we had defined multiple routes, Express would pass the request through the first route that matched the requested HTTP verb (e g GET) and path (/) The order of the routes matters Express takes the callback function we gave it and passes the request object into the first parameter (conventionally named req), and a response object into the second parameter (res) Our callback tells the response object to respond to the request by sending (via res send) the string \"Hello, world \" There is no more code to run and the function returns Since Express has been told to respond to the request, it ends the request-response cycle Meanwhile, the browser receives our server's response and displays it on screen, which is our \"Hello, world \" string We could send nearly anything in our response We could even tell Express to send a file Auto-restarting your server upon file changes\nWhen you run your server with node app",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9192,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\introduction_to_express.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "42265d99b56f01c67bb2b88ecb0e9229",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\introduction_to_express.md",
    "source_type": "git_repo",
    "title": "introduction_to_express",
    "content": "There is no more code to run and the function returns Since Express has been told to respond to the request, it ends the request-response cycle Meanwhile, the browser receives our server's response and displays it on screen, which is our \"Hello, world \" string We could send nearly anything in our response We could even tell Express to send a file Auto-restarting your server upon file changes When you run your server with node appjs, any changes to any JavaScript and JSON files in your project directory won't be reflected automatically unless you manually interrupt and rerun node app js To avoid this manual process, you can use Node's watch mode by adding the --watch flag, e g node --watch app js Node will watch app js for changes, as well as any of the files it ultimately depends on When it detects a change, it will automatically restart the server just like with Webpack and Vite's dev servers You may also come across Nodemon, a highly configurable package that can also watch for changes and restart your server for you Node didn't always have a stable built-in watch mode, so you're likely to see Nodemon around the place Our recommendation would be to stick with Node's built in watch mode via the --watch flag, as this would be by far the simplest method Assignment\n1 Spend a few minutes exploring the [Express documentation](https://expressjs com/en/api html) to get a feel for things We will be referencing a lot of content from the docs in the coming lessons 1 Go back to your [Basic Informational Site project](https://www theodinproject com/lessons/nodejs-basic-informational-site), install Express and rewrite the project using it You should be able to do most of this with just a few `app get()`s Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is Express What happens when a server receives a request What can we use to tell Express to send a file in response to a request What can you use to automatically restart your server when you make changes to a file Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9192,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\introduction_to_express.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "9c5708676d2ffc7c576d6beb2fa142c9",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\project_mini_message_board.md",
    "source_type": "git_repo",
    "title": "project_mini_message_board",
    "content": "Introduction\nAt this point you should know enough to use Express to make some fun interactive web apps We're going to create a message board Assignment\n1 Set up a basic Express app by installing Express and EJS Set up a basic index route and run your server Create the required folders and files as discussed in the previous lessons 1 We are going to have 2 routes, the index (`\"/\"`) and a \"new message\" form (`\"/new\"`) 1 Create an array at the top of your index router called `messages` and put a couple of sample messages inside of it like this:\n```javascript\nconst messages = [\n{\ntext: \"Hi there \",\nuser: \"Amando\",\nadded: new Date()\n},\n{\ntext: \"Hello World \",\nuser: \"Charles\",\nadded: new Date()\n}\n];\n```\n1 Next, in your index template (in the `\"views\"` folder) loop through the messages array and for each one, display the user, text and the date the message was added Don't forget to make your messages available to your template by including it in the `res render` 'locals' object (e g `res render(\"index\", { title: \"Mini Messageboard\", messages: messages })`) 1 Next let's set up the new message form In the router add a `router get()` for the `\"/new\"` route and point it to a template named `\"form\"` In the views directory create your `form` template Add a heading, 2 inputs (one for the author's name and one for the message text) and a submit button To have the form make a network request you will need to define it with both a method and an action like so (we will learn how to handle forms in a later lesson):\n```html\nput your inputs and buttons in here ```\n1 With your form set up like this, when you click on the submit button it should send a POST request to the url specified by the action attribute, so go back to your index router and add a `router post()` for `\"/new\"` 1 In order to get and use the data from your form, you will need to access the contents of your form inside `router post()` as an object called `req body` The individual fields inside the body object are named according to the `name` attribute on your inputs (the value of `` will show up as `req body messageText` inside the `router post` function)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3627,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\project_mini_message_board.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9d8bbdc75c508e46fbd8516de2334a84",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\project_mini_message_board.md",
    "source_type": "git_repo",
    "title": "project_mini_message_board",
    "content": "back to your index router and add a `router post()` for `\"/new\"` 1 In order to get and use the data from your form, you will need to access the contents of your form inside `router post()` as an object called `req body` The individual fields inside the body object are named according to the `name` attribute on your inputs (the value of `` will show up as `req body messageText` inside the `router post` function)For this to work as intended, you'll need to use a app level Express middleware called `express urlencoded()` to parse the form data into `req body` You can set this up by adding the following line to your app setup:\n```javascript\napp use(express urlencoded({ extended: true }));\n```\n1 In your `router post()` take the contents of the form submission and push them into the messages array as an object that looks something like this:\n```javascript\nmessages push({ text: messageText, user: messageUser, added: new Date() });\n```\n1 At the end of the `router post()` function use `res redirect(\"/\")` to send users back to the index page after submitting a new message 1 At this point, you should be able to visit `/new` (it might be a good idea to add a link to that route on your index page), fill out the form, submit it and then see it show up on the index page 1 Add an \"open\" button or link next to every message to open a new page with the message details 1 Push your project to GitHub 1 You'll learn how to deploy your app to the web in the next lesson, don't forget to come back and submit it to the submissions below once you're done",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3627,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\project_mini_message_board.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "af3295c74454f43a266dea228144a075",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "Introduction\nIn the previous lesson, we broke down a basic Express app and a request's journey through it However, in a real app, we'd want to handle many different types of requests for different things Routes essentially just match a request's HTTP verb (e g GET or POST) and URL path to the appropriate set of middleware functions - the controllers We will explore controllers and middleware in more detail in the next lesson For now, let's dive into how we can use routes Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe how routes are defined Explain route parameters and query parameters Set up new routers on a path The anatomy of a route\nLet's return to our sole route from our previous basic Express app javascript\napp get(\"/\", (req, res) => res send(\"Hello, world \"));\napp get(\"/\" tells us that this route will match any GET requests that go through the app router (which is our whole server ) to the / path If instead we had the following:\njavascript\napp post(\"/messages\", (req, res) => res send(\"This is where you can see any messages \"));\nThat would tell us the route matches any POST requests to the /messages path of our app If you sent a GET request to the /messages path, it would not match this route Each HTTP verb has its own Express route method, and you can also use app all() to make a route match all verbs #### HTTP verbs\n[There are many HTTP verbs](https://developer mozilla org/en-US/docs/Web/HTTP/Methods), but for now, we will primarily be using GET (used to retrieve data from the server only) and POST (used to send data to the server e g forms) Later, when we cover REST APIs, you will often also encounter verbs like PUT and DELETE Paths\nThe first argument we pass a route is the path to match, which can either be a string or a regular expression /messages matches that exactly, while /messages/all only matches if the path is /messages/all (not /messages, nor /messages/new) With string paths, we can also use {} to make characters optional",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12324,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "14a2cb2bea3a641feba631d993543eee",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "send data to the server e g forms) Later, when we cover REST APIs, you will often also encounter verbs like PUT and DELETE Paths The first argument we pass a route is the path to match, which can either be a string or a regular expression /messages matches that exactly, while /messages/all only matches if the path is /messages/all (not /messages, nor /messages/new) With string paths, we can also use {} to make characters optionalFor example:\n```javascript\n// Matches both /message and /messages\n\"/message{s}\"\n// Matches both / and /messages\n\"/{messages}\"\n// Matches both /foo/baz and /foo/bar/baz\n\"/foo{/bar}/baz\"\n```\nWith * (a \"splat\" or \"wildcard\"), we can match any number of any characters Splats in Express paths must always be followed by a name A common use case for a splat would be as a catch-all for all otherwise unmatched paths, e g for custom 404 error handling javascript\n// Matches / and /odin as well as /sdds8fjsdifhj98sdfh\n\"/{*splat}\"\n#### Order matters Your routes will be set up in your server in the order they are defined ```javascript\napp get(\"/{*splat}\", (req, res) => {\nres send(\"/{*splat} is a great way to catch all otherwise unmatched paths, e g for custom 404 error handling \");\n});\napp get(\"/messages\", (req, res) => {\nres send(\"This route will not be reached because the previous route's path matches first \");\n});\n```\nIn order for our `GET /messages` request to match the `/messages` route, we will need to reverse the order our routes are defined Doing so will prevent it from reaching the `/{*splat}` route, as it will match the `/messages` route first Route parameters\nWhat if we wanted to have a route for all messages for any username, for example, /odin/messages or /thor/messages, or even /theodinproject79687378/messages Just like with React Router, we can use route parameters, and a path can contain as many of these parameters as we need To denote a route parameter, we start a segment with a : followed by the name of the parameter (which can only consist of case-sensitive alphanumeric characters, or _)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12324,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "c9f8a5d4fee28d103098aa3205644131",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "Route parameters What if we wanted to have a route for all messages for any username, for example, /odin/messages or /thor/messages, or even /theodinproject79687378/messages Just like with React Router, we can use route parameters, and a path can contain as many of these parameters as we need To denote a route parameter, we start a segment with a : followed by the name of the parameter (which can only consist of case-sensitive alphanumeric characters, or _)Whatever we name that route parameter, Express will automatically populate the req params object in any of the following middleware functions with whatever value the path passed into the parameter, using the parameter name as its key ```javascript\n/*\n* GET /odin/messages will have this log\n* { username: \"odin\" }\n*\n* GET /theodinproject79687378/messages would instead log\n* { username: \"theodinproject79687378\" }\n/\napp get(\"/:username/messages\", (req, res) => {\nconsole log(req params);\nres end();\n});\n/*\n* GET /odin/messages/79687378 will have this log\n* { username: \"odin\", messageId: \"79687378\" }\n/\napp get(\"/:username/messages/:messageId\", (req, res) => {\nconsole log(req params);\nres end();\n});\n```\nNow we can easily extract values from the request path for use within our middleware chain Query parameters\nQuery parameters are a unique and optional part of a URL that appear at the end A denotes the start of the query parameters, with each query being a key-value pair with the format key=value, and each query separated by an & They are special as they are not actually considered part of the path itself, but are essentially more like arguments we can pass in to a given path For example, /odin/messages sort=date&direction=ascending will still match the route with the /:username/messages path, but we can access the sort=date and direction=ascending key-value pairs inside the middleware chain Express automatically parses any query parameters in a request and will populate the req query object with any key-value pairs it finds If any keys are repeated, Express will put all values for that key into an array javascript\n/**\n* GET /odin/messages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12324,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "5e94ed87e7bf409c422fb72418408366",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "pass in to a given path For example, /odin/messages sort=date&direction=ascending will still match the route with the /:username/messages path, but we can access the sort=date and direction=ascending key-value pairs inside the middleware chain Express automatically parses any query parameters in a request and will populate the req query object with any key-value pairs it finds If any keys are repeated, Express will put all values for that key into an array javascript /** * GET /odin/messagessort=date&direction=ascending will log\n* Params: { username: \"odin\" }\n* Query: { sort: \"date\", direction: \"ascending\" }\n*\n* GET /odin/messages sort=date&sort=likes&direction=ascending will log\n* Params: { username: \"odin\" }\n* Query: { sort: [\"date\", \"likes\"], direction: \"ascending\" }\n*/\napp get(\"/:username/messages\", (req, res) => {\nconsole log(\"Params:\", req params);\nconsole log(\"Query:\", req query);\nres end();\n});\nYou may have already seen this with websites like YouTube Every YouTube video is given a code and to watch that video, you navigate to https://www youtube com/watch, passing that video code as a query parameter with the v key You could even specify at what timestamp in seconds the video should start at via the t key So appending v=xm3YgoEiEDc&t=424s will request /watch from YouTube for the xm3YgoEiEDc video starting 424 seconds in Routers\nSo far, we've not been using many routes, and all routes we've shown have been attached to app, our server itself In a real application with lots of routes, we'd probably want to organize our routes into groups and extract each group out to their own file We could also then more easily write things that affect only the routes in that file, and not any others Say we were making a library app and we wanted pages that dealt with books and pages that dealt with authors That's on top of the homepage and any other miscellaneous pages like \"about\" or \"contact\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12324,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "8e8f81ed4190236413be07dc2fcc0f04",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "of routes, we'd probably want to organize our routes into groups and extract each group out to their own file We could also then more easily write things that affect only the routes in that file, and not any others Say we were making a library app and we wanted pages that dealt with books and pages that dealt with authors That's on top of the homepage and any other miscellaneous pages like \"about\" or \"contact\"We might want our server to handle the following routes:\n```text\nGET /\nGET /about\nGET /contact\nPOST /contact\nGET /books\nGET /books/:bookId\nGET /books/:bookId/reserve\nPOST /books/:bookId/reserve\nGET /authors\nGET /authors/:authorId\n```\nIt'd be nice if we could extract the route groups to their own files, and we can do that using routers Going back to our basic Express app from before, let's add some routers to handle each of our route groups We'll need a router first, which we can place in a new routes folder For example, routes/authorRouter js:\n```javascript\n// routes/authorRouter js\nconst { Router } = require(\"express\");\nconst authorRouter = Router();\nauthorRouter get(\"/\", (req, res) => res send(\"All authors\"));\nauthorRouter get(\"/:authorId\", (req, res) => {\nconst { authorId } = req params;\nres send(Author ID: ${authorId});\n});\nmodule exports = authorRouter;\n```\nIn the above, we destructure the Express object to get a Router function and use it to create our authorRouter We can use the same get or post methods on this router instead of on the whole server object, meaning we can write routes and middleware scoped to this router (we will dive deeper into these in the next lesson) Since we'll make this router usable only for paths that start with /authors, our route paths here don't need to include it Instead, they extend the parent path (we wouldn't want our route to match /authors/authors/:authorId) Create the other two routers for the other route groups - routes/bookRouter js and routes/indexRouter js Their middleware functions don't need to do much, just send something unique to each route so you know which route is being matched Once you've made the other two routers, let's add them to our server in app js:\n```javascript\n// app",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12324,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "2837063eab7816aeb93161677c785df0",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "need to include it Instead, they extend the parent path (we wouldn't want our route to match /authors/authors/:authorId) Create the other two routers for the other route groups - routes/bookRouter js and routes/indexRouter js Their middleware functions don't need to do much, just send something unique to each route so you know which route is being matched Once you've made the other two routers, let's add them to our server in app js: ```javascript // appjs\nconst express = require(\"express\");\nconst app = express();\nconst authorRouter = require(\" /routes/authorRouter\");\nconst bookRouter = require(\" /routes/bookRouter\");\nconst indexRouter = require(\" /routes/indexRouter\");\napp use(\"/authors\", authorRouter);\napp use(\"/books\", bookRouter);\napp use(\"/\", indexRouter);\nconst PORT = 3000;\napp listen(PORT, (error) => {\nif (error) {\nthrow error;\n}\nconsole log(My first Express app - listening on port ${PORT} );\n});\n```\nWe specify that any requests with paths starting with /authors will be passed through authorRouter for route matching If our request starts with /books, it will skip these author routes and then check the routes in bookRouter instead Any other requests that don't start with either of these will run through indexRouter To test these routes, use Postman which will allow you to send GET and POST requests without the browser (we can't send POST requests from the browser address bar) Assignment\n#### Express v5 changes\nWe are currently using Express v5 and as of writing this, some of the sections in the article below will not work in v5, though they are clearly marked and links provided to more relevant documentation This resource will be updated once a v5-only routing primer exists 1 Read through the Express' [primer on Routing](https://expressjs com/en/guide/routing html) for an overview of this lesson's topics Remember to reference the [Express documentation](https://expressjs com/en/api html) for more information on specific methods Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How can you define a route that will only match a specific HTTP verb How can you define a route that will match all HTTP verbs How can you define path patterns for your routes to match",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12324,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "72105bef1c361b2351affd5847fe0605",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\routing.md",
    "source_type": "git_repo",
    "title": "routing",
    "content": "questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How can you define a route that will only match a specific HTTP verb How can you define a route that will match all HTTP verbs How can you define path patterns for your routes to matchHow does the order of your routes affect which routes get matched What object gets populated with route parameters How do you access query parameters within routes How do you extract routes to an individual router We have a router for paths starting with /users Inside that router, what path should a GET route have to match a GET request to the /users/delete path Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This video about Express Routes offers a comprehensive overview of Express routes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12324,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\routing.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "3e21e17f8bc58b2c3a56892cdb527ba2",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
    "source_type": "git_repo",
    "title": "! /usr/bin/env node",
    "content": "Introduction\nNow that we have PostgreSQL up and running on our machine, it's time to work with it Make sure you've completed the [SQL course](https://www theodinproject com/paths/full-stack-javascript/courses/databases) This lesson and all subsequent lessons will assume you understand SQL syntax and concepts For brevity's sake, we'll refer to database as db from now on Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Setting up a new db in PostgreSQL shell Setting up and querying with node-postgres Using a script to populate the db Setting up an Express app\nLet's start by creating an Express application It will just have one feature - add usernames provided by the user to the db Here are the expected routes and their functionalities:\nGET / - to log available usernames in the DB to the terminal For now, just put in a simple console log(\"usernames will be logged here - wip\") GET /new - to display a HTML form to the user with one username input text field It will submit to the next route POST /new - will save the incoming username data to the DB For now, just log console log(\"username to be saved: \", req body username) Move on to the next section once you have the above functionality working Scope relevant code to the routes and controllers folders Since there's only one view (GET /new) to take care of, it's up to you whether you want to use ejs or make do with plain ol' HTML Setting up the db\nEnter the PostgreSQL shell by running psql in your terminal You can view the current dbs using the \\l command Let's create a new db by running the following SQL statement:\nsql\nCREATE DATABASE top_users;\n\\l again to see if the db was created Now let's connect to the db:\nsql\n\\c top_users\nVerify that the psql prompt should be:\nsql\ntop_users=#\nNow create a table and its columns to store username data:\nsql\nCREATE TABLE usernames (\nid INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\nusername VARCHAR ( 255 )\n);\nVerify that the table has been created by running \\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13292,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "20b70d6dc6e606becdd72ef1a1efd692",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
    "source_type": "git_repo",
    "title": "! /usr/bin/env node",
    "content": "running the following SQL statement: sql CREATE DATABASE top_users; \\l again to see if the db was created Now let's connect to the db: sql \\c top_users Verify that the psql prompt should be: sql top_users=# Now create a table and its columns to store username data: sql CREATE TABLE usernames ( id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY, username VARCHAR ( 255 ) ); Verify that the table has been created by running \\dYou should see the following two tables in the output (we've skipped some output details for brevity):\nbash\n|       Name       |   Type   |\n+ -----------------+----------+\n| usernames        | table    |\n| usernames_id_seq | sequence |\n#### Identity column\nWait a minute, what's this `usernames_id_seq` thing The `GENERATED ALWAYS AS IDENTITY` clause is the culprit It defined the `id` column as an [identity column](https://www postgresql org/docs/current/sql-createtable html#SQL-CREATETABLE-PARMS-GENERATED-IDENTITY) PostgreSQL now automatically generates a value for this column By default it starts at 1 and increments by 1 for each new row Additionally, PostgreSQL implicitly creates `usernames_id_seq`, which is a sequence object, that keeps track of the next value to be used Woohoo, we now have a db and a table a lonely table Not for long:\nsql\nINSERT INTO usernames (username)\nVALUES ('Mao'), ('nevz'), ('Lofty');\nVerify:\nsql\nSELECT * FROM usernames;\nUsing node-postgres in Express\nWe can work with PostgreSQL in our Express application through node-postgres (or pg for short) It is a library that we'll use to interface with the PostgreSQL db Install it with:\nbash\nnpm install pg\nWe can then initialize it in our application with the necessary connection information Create a db folder, and a new file db/pool js with:\n```javascript\nconst { Pool } = require(\"pg\");\n// All of the following properties should be read from environment variables\n// We're hardcoding them here for simplicity\nmodule",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13292,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "d6312013764a9ee49a18b2258ded0537",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
    "source_type": "git_repo",
    "title": "! /usr/bin/env node",
    "content": "node-postgres (or pg for short) It is a library that we'll use to interface with the PostgreSQL db Install it with: bash npm install pg We can then initialize it in our application with the necessary connection information Create a db folder, and a new file db/pool js with: ```javascript const { Pool } = require(\"pg\"); // All of the following properties should be read from environment variables // We're hardcoding them here for simplicity moduleexports = new Pool({\nhost: \"localhost\", // or wherever the db is hosted\nuser: \"\",\ndatabase: \"top_users\",\npassword: \"\",\nport: 5432 // The default port\n});\n```\nRemember that you should change the <role_name> and <role_password> (We have already set them in the previous lesson) An alternative to defining the connection information is through a Connection URI You'll likely be using connection URIs when connecting with a hosted database service Here's what it would look like based on the above properties:\n```javascript\nconst { Pool } = require(\"pg\");\n// Again, this should be read from an environment variable\nmodule exports = new Pool({\nconnectionString: \"postgresql://:@localhost:5432/top_users\"\n});\n```\nPick whichever method you want to use and let's continue #### Two ways of connecting with pg\n`pg` has two ways to connect to a db: a client and a pool Client is an individual connection to the DB, which you manually manage You open a connection, do your query, then close it This is fine for one-off queries, but can become expensive if you're dealing with a lot of queries Wouldn't this problem be alleviated if we could somehow hold onto a client Yes Enter pool As the name suggests, it's a pool of clients A pool holds onto connections And when you query, it'll programmatically open a new connection unless there's an existing spare one Perfect for web servers Querying with pg\nWith our initialized Pool, we can use the query method Create a new db/queries js file Upon revising our project requirements, we understand we need two db interactions: getting all usernames and inserting a new username Let's define these functions:\n```javascript\nconst pool = require(\" /pool\");\nasync function getAllUsernames() {\nconst { rows } = await pool query(\"SELECT * FROM usernames\");\nreturn rows;\n}\nasync function insertUsername(username) {\nawait pool",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13292,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "0168bd9f4741acbf865554b79e10d2ed",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
    "source_type": "git_repo",
    "title": "! /usr/bin/env node",
    "content": "for web servers Querying with pg With our initialized Pool, we can use the query method Create a new db/queries js file Upon revising our project requirements, we understand we need two db interactions: getting all usernames and inserting a new username Let's define these functions: ```javascript const pool = require(\" /pool\"); async function getAllUsernames() { const { rows } = await pool query(\"SELECT * FROM usernames\"); return rows; } async function insertUsername(username) { await poolquery(\"INSERT INTO usernames (username) VALUES ($1)\", [username]);\n}\nmodule exports = {\ngetAllUsernames,\ninsertUsername\n};\n```\n#### Parameterization\nWhat's with the `$1` in the insert query Alternatively, the query could look like:\n```javascript\nawait pool query(\"INSERT INTO usernames (username) VALUES ('\" + username + \"')\");\n```\nWe're passing user entered value i e `username` directly into our query A nefarious user could enter something like `sike'); DROP TABLE usernames; --` and wreak havoc Scary stuff This is called [SQL injection](https://en wikipedia org/wiki/SQL_injection) `pg` provides [query parameterization](https://node-postgres com/features/queries#parameterized-query) to prevent this Instead of passing user input directly, we pass it in an array as the second argument `pg` handles the rest Invoke the above two functions in the specific controllers (you might have different function names etc The important thing is to understand how the db functions are invoked):\n```javascript\nconst db = require(\" /db/queries\");\nasync function getUsernames(req, res) {\nconst usernames = await db getAllUsernames();\nconsole log(\"Usernames: \", usernames);\nres send(\"Usernames: \" + usernames map(user => user username) join(\", \"));\n}\nasync function createUsernameGet(req, res) {\n// render the form\n}\nasync function createUsernamePost(req, res) {\nconst { username } = req body;\nawait db insertUsername(username);\nres redirect(\"/\");\n}\nmodule exports = {\ngetUsernames,\ncreateUsernameGet,\ncreateUsernamePost\n};\n```\nTake your app for a spin, hopefully it works as expected Populate the db via a script\nYou might have noticed how cumbersome it is to create a table and populate it with data Luckily, we have the power of c(n)ode by our side, let's automate it via a script Create a new file db/populatedb js",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13292,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "543cc097b7945ef86f093ad800b4d6b5",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
    "source_type": "git_repo",
    "title": "! /usr/bin/env node",
    "content": "username } = req body; await db insertUsername(username); res redirect(\"/\"); } module exports = { getUsernames, createUsernameGet, createUsernamePost }; ``` Take your app for a spin, hopefully it works as expected Populate the db via a script You might have noticed how cumbersome it is to create a table and populate it with data Luckily, we have the power of c(n)ode by our side, let's automate it via a script Create a new file db/populatedb js```javascript /usr/bin/env node\nconst { Client } = require(\"pg\");\nconst SQL = `\nCREATE TABLE IF NOT EXISTS usernames (\nid INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\nusername VARCHAR ( 255 )\n);\nINSERT INTO usernames (username)\nVALUES\n('Bryan'),\n('Odin'),\n('Damon');\n`;\nasync function main() {\nconsole log(\"seeding \");\nconst client = new Client({\nconnectionString: \"postgresql://:@localhost:5432/top_users\",\n});\nawait client connect();\nawait client query(SQL);\nawait client end();\nconsole log(\"done\");\n}\nmain();\n```\nLogin to the PostgreSQL shell, connect to the top_users db, and drop the usernames table:\nsql\nDROP TABLE usernames;\nYou can then run this script via node db/populatedb js, or add it as a script in package json Do note that the script is designed to be ran only once Local vs production dbs\nGreat You've just learned how to set up and use a local db with PostgreSQL Local databases are ideal for development because they offer faster interactions, easier modifications, and don't require an internet connection This makes them especially useful when prototyping or testing new features When you're ready to make your project public, you'll need to transition to a production database hosted on an external server independent of your local machine A production database allows for global accessibility, scalability and more robust security Most of the hosting providers introduced in the deployment lesson also offer database services Now that we know the difference, lets see how we can populate a production database Populating production dbs\nWe've hardcoded our local db connection information in the script Hence, the script only populates our local db We need a way to populate our production db as well One way to do this is by using environment variables, though this leads to unnecessary hassle Why Because now, the script can only populate the production db on the production server i e we'll need to access the production server's cli to run the script",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13292,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "105d16f6df342f10a0549419b139e5a6",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
    "source_type": "git_repo",
    "title": "! /usr/bin/env node",
    "content": "production dbs We've hardcoded our local db connection information in the script Hence, the script only populates our local db We need a way to populate our production db as well One way to do this is by using environment variables, though this leads to unnecessary hassle Why Because now, the script can only populate the production db on the production server i e we'll need to access the production server's cli to run the scriptOr, we could sneakily edit our environment file to point to the production db and run the script on our machine, and revert it We should aim to make our script as independent from our codebase as possible A far more painless approach is providing the connection information as an argument to the script This way, we can run the script for local db as well as production db on our machine You can access arguments via process argv ```bash\npopulating local db\nnode db/populatedb js\npopulating production db\nrun it from your machine once after deployment of your app & db\nnode db/populatedb js\n```\nAssignment\n1 Skim through [pg's documentation](https://node-postgres com/) The library itself is light, and so is their documentation You don't need to read everything, use it mainly as a reference 1 Update the above project we've been working on 1 Install `dotenv` package and implement environment variables for db connection information 1 Add search functionality via query parameters on the index route For example, `GET / search=sup` should return all usernames containing `sup` DON'T implement this in JavaScript, search should be done in SQL 1 Add a new route `GET /delete` to delete all usernames from the db 1 In our previous Mini Message Board project, we implemented ephemeral messages using an array i e the messages would reset when server restarted We want data persistence Go back to this project and implement it with a PostgreSQL db and `pg` - Deploy a new db on a hosting service you choose, and obtain its connection information - Create a `messages` table, populate it with data if you wish This should be done via a script - Add the necessary environment variables, create a pool, and implement the required db functions Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you create a db and table via PostgreSQL shell",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13292,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "e2d4886a726cca20e776f32e7f5a9936",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
    "source_type": "git_repo",
    "title": "! /usr/bin/env node",
    "content": "This should be done via a script - Add the necessary environment variables, create a pool, and implement the required db functions Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you create a db and table via PostgreSQL shellWhat is node-postgres and how do you use it When should you use a client or a pool in pg How would you integrate db query functions in your Express app How would you populate the db via a script Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13292,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\using_postgresql.md",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "17968d00d67da78a5462582d24d67b81",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\views.md",
    "source_type": "git_repo",
    "title": "Homepage",
    "content": "Introduction\nViews are the user-facing part of the application, in this case, HTML files We've dealt with views in an earlier project where the server would send HTML files to the user These files are static, but many of our use cases require views to be dynamic w r t data Hence, we use template engines to create our views As the name suggests, we write template files in our codebase that get transformed into HTML when we respond to a server request Any variables defined in our template files are replaced with actual data Additionally, we can insert conditional and/or loop logic into our template file, e g render the user's username once they have logged in This would not be possible with plain HTML In this course, we will use EJS EJS's syntax is very similar to that of HTML, meaning that the learning curve is relatively low compared to other template engines Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to setup EJS in an Express project How to use EJS Setting up EJS\nLet's get started with EJS Install EJS into your application by typing the following into your terminal:\nbash\nnpm install ejs\nAt the root of your project, create a subfolder called views Next, we need to let our app know that we intend to use EJS as a template engine, as well as where to look for view files In your app js file, set the following application properties:\njavascript\n// app js\napp set(\"views\", path join(__dirname, \"views\"));\napp set(\"view engine\", \"ejs\");\nAnd import the Path CommonJS module from Node near the top:\njavascript\n// app js\nconst path = require(\"node:path\");\nThis enables EJS as the view engine, and that our app should look for templates in the /views subdirectory EJS syntax\nIn EJS, the <% and %> tags allow us to use JavaScript This lets us write conditional statements, for loops, as well as use variables In order to output a variable as a value, we use the <%= tag Here's a quick example that includes arrays and loop logic ```ejs\n<% const animals = [\"Cat\", \"Dog\", \"Lemur\", \"Hawk\"] %>\n<% animals map((animal) => { %>\n<%= animal %>s are cute\n<% }) %>\n```\nUsing EJS with Express\nLet's use EJS with Express",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10793,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "51923f054b7193699e578c7e771e3494",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\views.md",
    "source_type": "git_repo",
    "title": "Homepage",
    "content": "allow us to use JavaScript This lets us write conditional statements, for loops, as well as use variables In order to output a variable as a value, we use the <%= tag Here's a quick example that includes arrays and loop logic ```ejs <% const animals = [\"Cat\", \"Dog\", \"Lemur\", \"Hawk\"] %> <% animals map((animal) => { %> <%= animal %>s are cute <% }) %> ``` Using EJS with Express Let's use EJS with ExpressFirst, create an EJS template file called index ejs in the views subdirectory, and add the following:\n```ejs\n<%= message %>\n```\nAnd in app js, render this template file in one of your routes:\njavascript\n// app js\napp get(\"/\", (req, res) => {\nres render(\"index\", { message: \"EJS rocks \" });\n});\nIdeally we would define the route in a separate router file, but for the purposes of this lesson we'll be defining it in app js\nStart the server and go to the / route in the browser You should see:\nhtml\nEJS rocks If you inspect the HTML in the browser's dev tools, you can see the HTML is structured exactly like how we wrote the EJS template with the message variable replaced with its value When you hit the / route, res render(\"index\", { message: \"EJS rocks \" }); is the line that sends back the response Since we've already defined the views and view engine app properties, the first argument of res render is programmed to look for \"a template called index in the specified folder\", while the second argument is an object of variables that are to be made available to that specific template The locals variable in EJS\nIn the example above, how did the template file know about the message variable When we render the view, EJS has access to any properties from the object we pass into res render, as well as any properties on Express's res locals object (res locals can be useful if you need to pass values to the view in one middleware function, but won't call res render until later in the middleware chain) EJS will store these properties in an object called locals, which you can access in the view Similarly to the global window object in browsers, this allows you to access the message variable in the view via locals message, or simply just message",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10793,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "42231732a5087f91d05fbdbe14af7aa5",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\views.md",
    "source_type": "git_repo",
    "title": "Homepage",
    "content": "Express's res locals object (res locals can be useful if you need to pass values to the view in one middleware function, but won't call res render until later in the middleware chain) EJS will store these properties in an object called locals, which you can access in the view Similarly to the global window object in browsers, this allows you to access the message variable in the view via locals message, or simply just message#### Undefined variables in locals\nIf we try to access a variable in a rendered template file that was not defined in the `locals` argument of `res render` or `res locals`, this can cause a reference error For instance if we try to access an undefined `foo` variable, `locals foo` will return undefined, while `foo` will result in a reference error Verify this by outputting `locals foo` in `index ejs`, then replacing it with`foo`:\n```ejs\n<%= message %>\n<%= locals foo %>\n```\nReusable templates\nYou may want to include webpage components that are shared across different pages, such as a sidebar or a header To insert such components into your pages, we make use of the include command This requires the name of the file to be inserted, and optionally an object of data you wish to pass Create the following navbar component called \"navbar ejs\":\n```ejs\n<% for (let i = 0; i < links length; i++) { %>\n<%= links[i] text %>\n<% } %>\n```\nNote that the navbar expects a links variable To pass this data into the navbar, pass it as a locals variable when rendering the template file at res render() We will render index ejs to include the navbar To do this, modify app js such that a links object is defined and passed into the render function rendering index ejs in the \"/\" route handler:\n```javascript\n// app js\nconst links = [\n{ href: \"/\", text: \"Home\" },\n{ href: \"about\", text: \"About\" },\n];\napp get(\"/\", (req, res) => {\nres render(\"index\", { links: links });\n});\n```\nThen, modify the previously created index ejs to remove the <%= message %> line and instead include the navbar with the links variable like so:\n```ejs\nHomepage\n<%- include('navbar', {links: links}) %>\n```\nThis will include the navbar with links in index ejs Run your server and see",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10793,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "4d350243ef3c935daaf104fea04a6df9",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\views.md",
    "source_type": "git_repo",
    "title": "Homepage",
    "content": "[ { href: \"/\", text: \"Home\" }, { href: \"about\", text: \"About\" }, ]; app get(\"/\", (req, res) => { res render(\"index\", { links: links }); }); ``` Then, modify the previously created index ejs to remove the <%= message %> line and instead include the navbar with the links variable like so: ```ejs Homepage <%- include('navbar', {links: links}) %> ``` This will include the navbar with links in index ejs Run your server and seeReusable templates can be used to include headers and footers in all of your pages Note the use of the raw output tag <%- with the include which is used to avoid double-escaping the HTML output Let's use include to dynamically render a list of variables a different way In app js, add the following users array just below the links variable, and pass it to the render function when rendering index:\n```javascript\n// app js\nconst links = [\n{ href: \"/\", text: \"Home\" },\n{ href: \"about\", text: \"About\" },\n];\nconst users = [\"Rose\", \"Cake\", \"Biff\"];\napp get(\"/\", (req, res) => {\nres render(\"index\", { links: links, users: users });\n});\n```\nThen create a new view called user ejs in the views directory:\n```ejs\n<%= user %>\n```\nThen add the following block to index ejs:\n```ejs\n<% users forEach((user) => { %>\n<%- include('user', {user: user}); %>\n<% }); %>\n```\nIf successful, Rose, Cake and Biff will be visible when rendering index ejs #### Directories within the views folder\nLet's create nested directories of EJS template files within the views Change the `user ejs` in the `views` directory to `users/user ejs`, and in `index ejs` change the path from `user` to `users/user` in the `users forEach` block:\n```ejs\n<% users forEach((user) => { %>\n<%- include('users/user', {user: user}); %>\n<% }); %>\n```\nServing Static Assets\nServing static assets with EJS is similar to how we served assets previously when working directly with HTML, in that we can add external files to the head of the template file using the link tag",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10793,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "039b0068f21ab5123a712c8f726ffd30",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\express\\views.md",
    "source_type": "git_repo",
    "title": "Homepage",
    "content": "`views` directory to `users/user ejs`, and in `index ejs` change the path from `user` to `users/user` in the `users forEach` block: ```ejs <% users forEach((user) => { %> <%- include('users/user', {user: user}); %> <% }); %> ``` Serving Static Assets Serving static assets with EJS is similar to how we served assets previously when working directly with HTML, in that we can add external files to the head of the template file using the link tagThe main thing to point out is that the app needs to know where to serve assets from Assuming express is installed, set the following lines in app js:\njavascript\n// app js\nconst assetsPath = path join(__dirname, \"public\");\napp use(express static(assetsPath));\nexpress static() is a middleware function that enables the use of static assets, and we tell it to look for assets with the public directory as the root Create the following styles css file in the root of the public directory:\ncss\n/* public/styles css */\nbody {\ncolor: red;\n}\nTo serve styles css in index ejs, set the following link tag like so in the head:\n```ejs\n```\nYour index ejs file should now display red text Assignment\n1 Have another read through the [EJS docs](https://ejs co/#docs) 1 Read through the [Express resource on template engines](https://expressjs com/en/guide/using-template-engines html) The resource uses Pug for the examples which has a different syntax, however the information should still be a useful supplement to this lesson 1 Let's add to the app we've been developing this lesson Add a view for an about page, which should render on the `/about` route 1 Create a reusable footer template and render it in all of the app routes Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you configure EJS for Express projects What is the difference between \"<%\" and \"<%=\" tags How do you render a view in a controller callback How can templates be included in other templates Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental How to Use EJS to Template Your Node js Application",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10793,
      "relative_path": "git_repos\\odin-project\\nodeJS\\express\\views.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "9421f0a87fc99b93ed2fc7d28ad5c867",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\final_project\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "Introduction\nYou've reached the end of the scope of this course and should feel pretty good about your NodeJS skills That doesn't mean you should understand everything quite yet, but now you can build a NodeJS application with the kind of functionality which is actually useful in the real world After all, you just built a social media site This isn't the last course in the curriculum, as there is a Getting Hired course remaining But you're now at that period where you can consider yourself a \"full stack\" developer You've learned how to write beautiful and intuitive front-ends for your applications and now back-end technologies to give those sites some cool features Despite how far you've come, it's up to you to keep building stuff, ask questions, and dig deeper into both NodeJS and best practices of software engineering in general Still, at this point you've got the NodeJS and Express building blocks When you work your first six months on the job as a full stack JavaScript dev, you will learn as much information as you just did Because the point of this course has been to instill these building blocks in you, you're in a place to actually get that first job and build on what you know Next steps\nThis final lesson isn't designed to explicitly teach new material, just point you in the right direction if you'd like to dig a bit deeper before moving on Or maybe you'll bookmark it and come back when you want to see where to head next in your NodeJS journey Node has a very expansive ecosystem and a lot of flexibility in how you write your code For example, there's a million-and-one tools and packages out there you could implement in an Express app The best way to grow as a developer and immerse yourself in the ecosystem is to work for a company that works with NodeJS and pays you to learn If that's not an option, building your own stuff and reading on your own time can be a good substitute There's new information being created every day in blog posts, Stack Overflow posts, and podcasts A great first step is going through the NodeJS documentation and ExpressJS documentation and giving them a front-to-back read Security\nAs you start working on more public-facing applications, security will become more important The ExpressJS documentation includes some advanced security best practices for more information Caching\nCaching makes your application faster by reducing database calls Check out this information on the ExpressJS documentation for more information",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6821,
      "relative_path": "git_repos\\odin-project\\nodeJS\\final_project\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "eebdf1fb2c9e53bc2d35a754804df4fc",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\final_project\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "every day in blog posts, Stack Overflow posts, and podcasts A great first step is going through the NodeJS documentation and ExpressJS documentation and giving them a front-to-back read Security As you start working on more public-facing applications, security will become more important The ExpressJS documentation includes some advanced security best practices for more information Caching Caching makes your application faster by reducing database calls Check out this information on the ExpressJS documentation for more informationYou may want to also introduce yourself to Redis if you see it in a lot of job postings in your area or resources you encounter on caching DevOps\nSometimes, having a little exposure to DevOps can help set you apart as a robust developer There are various platforms out there you can start to learn from, Azure to Amazon Web Services, Heroku to Digital Ocean While some of these offer free services, many of their services are unfortunately paid That being said, this doesn't prevent you from reading documentation or leveraging their free services to start getting some exposure Heroku has extensive resources for you to dive into Another popular provider, Digital Ocean, offers competing Droplets and their new App Platform services A platform we highly encourage you to begin looking into either way is Amazon Web Services This is a platform you will likely see on job postings and on the job itself, and can be an invaluable skill to have in your arsenal Non-relational data\nNow that you have exposure to relational databases with PostgreSQL, you might be considering what other types of databases exist; namely non-relational databases Understanding both types of databases and when to use them can set you up for success down the road After all, not every problem requires a hammer MongoDB is a popular choice for non-relational databases Resources like the Learn MongoDB website offer tutorials and documentation to get you started Other resources\nHere are a few extra resources that will take you a bit deeper into software architecture, JavaScript and Node:\nDesign Patterns: Elements of Reusable Object-Oriented Software\nClean Code\nsyntax fm Podcast\nNodeJS Blog\nIf you find anything you think could go on this list, feel free to improve to this lesson in the TOP curriculum repository on GitHub Contributing\nYou know more than you think Remember when we just said that you should keep building stuff This curriculum is completely open source and needs your help to improve We have a dedicated group of current and former students who help add features and proofread the curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6821,
      "relative_path": "git_repos\\odin-project\\nodeJS\\final_project\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b8d3d7210d07462a88640f84cd173f0c",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\final_project\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "Podcast NodeJS Blog If you find anything you think could go on this list, feel free to improve to this lesson in the TOP curriculum repository on GitHub Contributing You know more than you think Remember when we just said that you should keep building stuff This curriculum is completely open source and needs your help to improve We have a dedicated group of current and former students who help add features and proofread the curriculumThe best part is that it's completely public and free so you can watch or participate at whatever level you're comfortable It's a great way to start learning about agile development methodologies and to start doing meaningful development work in a friendly and supportive environment So check out the channel on our Discord to see what we're up to We'd love to have you get involved Conclusion\nWe want to emphasize again that the learning never really stops but also that you've come a long way Keep up the good work, burn through the Getting Hired course, and get ready to start job hunting Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Additional frameworks built on Express that might be more suited to building certain types of applications Explore more about APIs 90 Days of DevOps is a great repo if you wish to explore more about DevOps",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6821,
      "relative_path": "git_repos\\odin-project\\nodeJS\\final_project\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c607247c5bcba5b621ee3f81424068df",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\debugging_node.md",
    "source_type": "git_repo",
    "title": "debugging_node",
    "content": "Introduction\nUp until this point, you've likely only relied on the browser's DevTools to debug your code. When it comes to debugging Node and server side code, VS Code has a handy built-in debugger that you can use to debug directly in your editor! Additionally, you can also set Google Chrome up to debug Node and get the full benefits of the Chrome DevTools.  Ultimately, this lesson will familiarize you with the Node debugger, which is a critical tool at this point in your learning, and will likely be a key tool you use daily in your professional life.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nUse the VS Code built-in Node debugger.\nUse the Chrome DevTools to debug Node.\nAssignment\n- Watch this [video tutorial about Node.js debugging in VS Code](https://www.youtube.com/watch?v=2oFKNL7vYV8&ab_channel=VisualStudioCode) to see the process in action.\n- Check out the official [VS Code Node debugger documentation](https://code.visualstudio.com/docs/nodejs/nodejs-debugging). Take note of the JavaScript Debug Terminal- this is an easy way to get the debugger running!\n- Read this [article](https://web.archive.org/web/20230923074524/https://www.section.io/engineering-education/debug-node-devtools/) for a tutorial on how to debug Node with Chrome. NOTE: You can ignore anything that refers to debugging remote apps- you'll be debugging local apps.\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nWhat are two ways to debug Node?\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2122,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\debugging_node.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d64d15ab2f74ece1a8b16e56c95d4ea",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\final_project\\project_odin_book.md",
    "source_type": "git_repo",
    "title": "project_odin_book",
    "content": "Introduction\nYou've come a long way, congratulations At this point, you should feel comfortable with building new Express applications and using PostgreSQL to model and store data This project will require you to put all of that knowledge to the test It's not going to be easy, but it should be well within your capabilities and it will be a great portfolio piece You'll be building a clone of a social media site, such as Facebook, X, Myspace, or Threads As with our previous lessons, how much effort you want to put into the styling and front end is up to you The important stuff is the data and backend You'll put together the core features of the platform like users, profiles, posts, following, and \"liking\" You'll also implement some form of authentication Ideally, you'll want to use passport js to support authenticating via the social media site you're cloning, but some sites (such as Facebook), have recently made this process impossible If this is the case for your site, you can use passport js to support authenticating via username and password with passport-local or via Github with passport-github2 There will probably be features you haven't been exposed to such as chat, real-time updates, and notifications You won't be responsible for those unless you're feeling really confident in your skills at this point (e g socket io allows you to use websockets for real-time communication) Assignment\nBuild a social media site You'll build a large portion of the core user functionality of your chosen site in this project You don't have to worry about some of the more flashy front-end stuff unless you want to, but you don't need it to get a nice user experience This project will give you the chance to take a relatively high-level set of requirements and turn it into a functioning website You'll need to do some of your own research and read the documentation for a few of the modules you'll be using in this project #### Getting started\n1 Think about what you need to do It's really helpful to write your plan down on paper or a whiteboard ahead of time A few hours of thought now will save you days of coding Try to lay it ALL out An important part of planning is **scope** You obviously can't build the entire website (which presumably took a full team of engineers years to produce), so you'll need to identify the site's core functionality and the \"nice-to-have\" stuff **Make sure you finish the core functionality BEFORE working on the rest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5831,
      "relative_path": "git_repos\\odin-project\\nodeJS\\final_project\\project_odin_book.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6790c13f487d3da6cbae1d95ac75c8c4",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\final_project\\project_odin_book.md",
    "source_type": "git_repo",
    "title": "project_odin_book",
    "content": "on paper or a whiteboard ahead of time A few hours of thought now will save you days of coding Try to lay it ALL out An important part of planning is **scope** You obviously can't build the entire website (which presumably took a full team of engineers years to produce), so you'll need to identify the site's core functionality and the \"nice-to-have\" stuff **Make sure you finish the core functionality BEFORE working on the rest** If you try to do everything at once, you'll get lost and frustrated Trust us Everything takes longer than you expect 1 Think through the data architecture required to make this work There are lots of models and the relationship between them is more complicated than anything you've done before Take some time to plan your approach before diving in 1 Work your way down the list below Each step will involve a new challenge, but you've got the tools 1 You can populate data like users and posts with fake data using the [Faker](https://github com/faker-js/faker) module from npm To accomplish this create a new JavaScript file named `seeds js` which imports your Prisma models and uses the faker module to generate and save a bunch of new users #### Requirements\nThe following requirements are a very global list of features your app should have Because of the open-ended nature of this project, it's possible that not all of them may apply to your chosen site, and that there might be core features of your site that aren't mentioned here 1 Users must sign in to see anything except the sign-in page 1 Users should be able to sign in using your chosen authentication method 1 Users can send follow requests to other users 1 Users can create posts (begin with text only) 1 Users can like posts 1 Users can comment on posts 1 Posts should always display the post content, author, comments, and likes 1 There should be an index page for posts, which shows all the recent posts from the current user and users they are following 1 Users can create a profile with a profile picture Depending on how you handle authentication, for example via `passport-github2`, you may be able to use their account's existing profile picture If this isn't the case you can use [Gravatar](https://www gravatar com/) to generate them 1 A user's profile page should contain their profile information, profile photo, and posts 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5831,
      "relative_path": "git_repos\\odin-project\\nodeJS\\final_project\\project_odin_book.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b62340db8cf741f903e22dad4a2f6ddd",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\final_project\\project_odin_book.md",
    "source_type": "git_repo",
    "title": "project_odin_book",
    "content": "posts, which shows all the recent posts from the current user and users they are following 1 Users can create a profile with a profile picture Depending on how you handle authentication, for example via `passport-github2`, you may be able to use their account's existing profile picture If this isn't the case you can use [Gravatar](https://www gravatar com/) to generate them 1 A user's profile page should contain their profile information, profile photo, and posts 1There should be an index page for users, which shows all users and buttons for sending follow requests to users the user is not already following or have a pending request 1 Deploy your app to a hosting provider of your choice #### Extra credit\n1 Make posts also allow images (either just via a URL or by uploading one) If you did the extra credit from the [File Uploader project](https://www theodinproject com/lessons/nodejs-file-uploader), then you may recall [Cloudinary](https://cloudinary com/documentation/node_integration) or [Supabase storage](https://supabase com/docs/guides/storage) being good options for hosting user-uploaded images The URLs they provide you can then be stored in your database instead of the raw image binary data 1 Allow users to update their profile photo 1 Create a guest sign-in functionality that allows visitors to bypass the login screen without creating an account or supplying credentials This is especially useful if you are planning on putting this project on your résumé - most recruiters, hiring managers, etc will not take the time to create an account This feature will allow them to look at your hard work without going through a tedious sign-up process 1 Make it pretty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5831,
      "relative_path": "git_repos\\odin-project\\nodeJS\\final_project\\project_odin_book.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "60a7b119339b2b6ce093eb1ca3f67b39",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\environment_variables.md",
    "source_type": "git_repo",
    "title": "environment_variables",
    "content": "Introduction\nWhen you run your code, your code runs in a specific environment Run your code on a different machine Different environment Host your website somewhere like Netlify or Vercel Different environment to your machine Each environment is a unique collection of tools and configurations You will have certainly written many functions that you've called multiple times with different arguments The function may behave differently or return a different value depending on those arguments Just like with function parameters, your applications themselves can make use of environment variables When you run your code, you can pass in values to those environment variables, and different environments can be given different values Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe what environment variables are and their benefits Use dotenv to store and make environment variables available in your code Access environment variables using Node's process env object Environment variables\nEnvironment variables are just variables that have environment-specific values For example, since they are specific to individual environments, we can use them to:\nProvide different values for different environments, such as your machine during development and a website host when deployed, without having to modify the source code Store secrets, such as database URLs and credentials, or API keys For example, a production environment may want additional logging and analytics compared to a development environment The source code may therefore have an environment variable for whether it's running in \"dev\" or \"prod\" mode and do different things based on that This is very common and by convention, this environment variable is named NODE_ENV, though it would still work with any other name Or perhaps you're building an API connected to a database, but you want to use a separate test database during development instead of the production one You can pass your test database's URL and credentials into your app when you develop locally, but the deployment will have the values for the production database On top of this, you can store environment variable values in a file that you add to your gitignore, preventing the contents of that file from being exposed when changes are pushed Loading environment variables\nThere are multiple ways you can load environment variables, though some are more cumbersome or may not have stable support yet in many Node versions One way is by defining the environment variables and their values directly in the command to run your code Instead of running your app with just node index js, you could run the following (note that quotes are optional for values that do not contain certain special characters like spaces or =):\nbash\nNODE_ENV=prod VIDEO_URL=\"https://www youtube com/watch",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9719,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\environment_variables.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5730eff2d2e9622d3a48675d90493d09",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\environment_variables.md",
    "source_type": "git_repo",
    "title": "environment_variables",
    "content": "load environment variables, though some are more cumbersome or may not have stable support yet in many Node versions One way is by defining the environment variables and their values directly in the command to run your code Instead of running your app with just node index js, you could run the following (note that quotes are optional for values that do not contain certain special characters like spaces or =): bash NODE_ENV=prod VIDEO_URL=\"https://www youtube com/watchv=X2CYWg9-2N0\" node index js\nIn the above, we define environment variables called NODE_ENV and VIDEO_URL, and assign them their respective values Now any part of our code that uses those variables will have those values, just like function parameters The convention for naming environment variables is to use UPPER_SNAKE_CASE (sometimes endearingly referred to as SCREAMING_SNAKE_CASE or SHOUTY_CASE) You might see that this could quickly get quite cumbersome though, especially if you had lots of environment variables If you had sensitive data like database credentials, that's even worse since you wouldn't want to push your package json if it contained those values in an npm script export\nInstead of setting environment variables directly in the command for running your code, you can use the shell command export, which will save environment variables and their values to the current shell session bash\nexport NODE_ENV=prod VIDEO_URL=\"https://www youtube com/watch v=X2CYWg9-2N0\"\nThe above command will set the two environment variables in the current shell environment only, meaning if you were to open a new shell, it would not have access to those environment variables since it's a new environment If we ran node index js in the first shell (the one with the environment variables set), anything that used the NODE_ENV environment variable would have the value \"prod\" If we instead ran node index js in the second shell, it would have the value undefined instead since nothing was set in its environment Neat, no This is definitely nicer than the previous directly-in-the-command method, and means we can really keep sensitive data hidden To overwrite any variables, just rerun export with the new values for those variables like above To view all environment variables in the current shell, you can run printenv Hang on, it's showing a lot of stuff we never set ourselves That's because the shell itself has a lot of environment variables already set and loaded when it first loads",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9719,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\environment_variables.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a50c0d3fd6a254d650418d4d7acd4470",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\environment_variables.md",
    "source_type": "git_repo",
    "title": "environment_variables",
    "content": "definitely nicer than the previous directly-in-the-command method, and means we can really keep sensitive data hidden To overwrite any variables, just rerun export with the new values for those variables like above To view all environment variables in the current shell, you can run printenv Hang on, it's showing a lot of stuff we never set ourselves That's because the shell itself has a lot of environment variables already set and loaded when it first loadsThat's a bit annoying, we just want to deal with our app's environment variables Also, our environment variables will be lost when we terminate the shell What if we had lots of variables It'd be a nightmare to try and remember them all and export them again in the new shell Well dotenv\ndotenv is one of the most common ways to load environment variables After installing the npm package, you can create a file called env in the root of your project that will contain all of your environment variables in the format NAME=\"VALUE\" Note that you cannot have spaces around the = in this file, else the values will be read incorrectly For example:\nproperties\nNODE_ENV=prod\nVIDEO_URL=\"https://www youtube com/watch v=X2CYWg9-2N0\"\nThis file must be added to your gitignore file to keep secrets safe from being published All you'd need to do now is import dotenv into your app (as early as possible in the code) so it can load your variables javascript\nrequire(\"dotenv\") config();\nYou can now just run your code with node index js and dotenv will handle all the loading for you Note that dotenv isn't the only way to handle environment variables and security Projects where a whole team needs synced access to the same environment variables, or otherwise more complex applications, may benefit from more robust and flexible options For this course, dotenv should serve our needs more than well #### Environment variables and deployment\nWhen you deploy an app that uses environment variables, your repo will not contain your ` env` file, so you will have to research how your chosen deployment service handles setting environment variable values Typically, there will be a way via their website interface, but otherwise, always check their documentation Awesome You can load environment variables now, but how do you actually access them in your code Accessing environment variables\nEnvironment variables are accessed via Node's built-in process object, more specifically its env property Node will load each environment variable to the process env object, using its name as the property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9719,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\environment_variables.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "3814d28f45a6158990b6cc388dffa792",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\environment_variables.md",
    "source_type": "git_repo",
    "title": "environment_variables",
    "content": "your chosen deployment service handles setting environment variable values Typically, there will be a way via their website interface, but otherwise, always check their documentation Awesome You can load environment variables now, but how do you actually access them in your code Accessing environment variables Environment variables are accessed via Node's built-in process object, more specifically its env property Node will load each environment variable to the process env object, using its name as the propertyYou can then access them like any normal object property ```javascript\nif (process env NODE_ENV === \"prod\") {\n// do production-specific stuff\n}\n// don't want to ruin the surprise by hardcoding the URL // it might even change every few days redirectUserToSuperSecretVideo(process env VIDEO_URL);\n```\nNo hardcoding of those values into the source code If you want to change the value of an environment variable, you can just change it in your env file then rerun the program Do also note that environment variables will always be strings, so you must convert if you want to use any as a number or boolean, for example Assignment\n#### Keep your secrets safe Environment variables aren't only for sensitive data, but you will often need them for that In your projects, if you use environment variables with dotenv, make sure you add ` env` to ` gitignore` so you **do not publish it** 1 Check out [dotenv's documentation](https://www npmjs com/package/dotenv#-documentation) While you may not need many of their other features in this curriculum, like dotenvx or dotenv-vault, it's good to be aware that they exist Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are environment variables What might you want to use environment variables for What npm package could you use to load environment variables from a env file How do you access environment variables in a Node app What data type will an environment variable always be Should you push your env file to GitHub Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9719,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\environment_variables.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a7815c03c8c1c1213654a80d070e386d",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\getting_started.md",
    "source_type": "git_repo",
    "title": "getting_started",
    "content": "Introduction\nLike we learned in the introduction lesson, Node js is really just JavaScript So a basic understanding of JavaScript is necessary in order to understand Node For this reason, it is highly recommended that you take our prerequisite JavaScript course before continuing with this course This lesson will take you through a tutorial that will teach you the basic modules and functions that you need to get up and running with Node js The project that comes at the end of this section will ask you to use Node to create a basic website that will include an Index, About and Contact Me page So while learning the topics in this lesson, be on the lookout for things that might help you complete the project Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain some things that Node js is commonly used for Create and use modules in Node js (both built-in and user created) Set up a basic webserver with Node js using the HTTP module Read, create, update, and delete files from Node js Use the URL module to parse a url address and split it into readable parts Understand how to use NPM Create, fire and listen for your own events Assignment\n#### Important notice\nRecently the NodeJS dev team removed a large amount of content from their website Several of those removed pages were linked to in this lesson Until we find a replacement for that content we will be linking directly to the markdown files on their GitHub repository The formatting may look a bit odd, but the content should still be just as good - Let's dive in and start looking at Node server-side code We will be hopping around lessons in the [NodeJS org](https://nodejs org/en/learn) docs which you should follow along - Learn [how to run Node js scripts from the terminal](https://nodejs org/en/learn/command-line/run-nodejs-scripts-from-the-command-line) - HTTP Module\n- Learn [how to make HTTP requests with Node](https://github com/nodejs/nodejs dev/blob/aa4239e87a5adc992fdb709c20aebb5f6da77f86/content/learn/node-js-web-server/node-make-http-requests en md) - Check out the docs for [Node's http module](https://nodejs org/api/http html) In particular, check out `http createServer` The documentation shows optional parameters it can accept which you may or may not use",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4849,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\getting_started.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f523fe8722e3e8f559aa61bb29c54239",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\getting_started.md",
    "source_type": "git_repo",
    "title": "getting_started",
    "content": "will be hopping around lessons in the [NodeJS org](https://nodejs org/en/learn) docs which you should follow along - Learn [how to run Node js scripts from the terminal](https://nodejs org/en/learn/command-line/run-nodejs-scripts-from-the-command-line) - HTTP Module - Learn [how to make HTTP requests with Node](https://github com/nodejs/nodejs dev/blob/aa4239e87a5adc992fdb709c20aebb5f6da77f86/content/learn/node-js-web-server/node-make-http-requests en md) - Check out the docs for [Node's http module](https://nodejs org/api/http html) In particular, check out `http createServer` The documentation shows optional parameters it can accept which you may or may not useFor now, you just need to know that the `createServer` method creates an HTTP server that accepts handlers that will be executed every time we get a request - File System\n- First, take a look at the [fs module](https://github com/nodejs/nodejs dev/blob/aa4239e87a5adc992fdb709c20aebb5f6da77f86/content/learn/node-js-modules/node-module-fs en md) that we use heavily for working with files in Node - Then, let’s start [writing files with Node](https://nodejs org/en/learn/manipulating-files/writing-files-with-nodejs) - Finally, we’ll learn how to [read files with Node](https://nodejs org/en/learn/manipulating-files/reading-files-with-nodejs) - The URL Class\n- Check out this [documentation on the URL class](https://nodejs org/api/url html#url_the_whatwg_url_api) Play with the code samples to see how it works - Events\n- Follow along the [Event Emitter](https://nodejs org/en/learn/asynchronous-work/the-nodejs-event-emitter) section - Look into the [Node events module](https://github com/nodejs/nodejs dev/blob/aa4239e87a5adc992fdb709c20aebb5f6da77f86/content/learn/node-js-modules/node-module-events en md) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4849,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\getting_started.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "33ebad2da7fcbaf04acf7f02a7e78c9d",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\getting_started.md",
    "source_type": "git_repo",
    "title": "getting_started",
    "content": "with Node](https://nodejs org/en/learn/manipulating-files/writing-files-with-nodejs) - Finally, we’ll learn how to [read files with Node](https://nodejs org/en/learn/manipulating-files/reading-files-with-nodejs) - The URL Class - Check out this [documentation on the URL class](https://nodejs org/api/url html#url_the_whatwg_url_api) Play with the code samples to see how it works - Events - Follow along the [Event Emitter](https://nodejs org/en/learn/asynchronous-work/the-nodejs-event-emitter) section - Look into the [Node events module](https://github com/nodejs/nodejs dev/blob/aa4239e87a5adc992fdb709c20aebb5f6da77f86/content/learn/node-js-modules/node-module-events en md) Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a File System Module How and why would you use it Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This Node crash course video from TraversyMedia is a great code-along for getting into Node js It may seem repetitive after completing the assignment, but practice is repetition This Node crash course playlist of 12 episodes from Net Ninja is a great resource to learn Node js There are 12 videos in this playlist, you can consider them all",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4849,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\getting_started.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b008203c5a68dcd3db05e79b2f9deecb",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\project_basic_informational_site.md",
    "source_type": "git_repo",
    "title": "project_basic_informational_site",
    "content": "Introduction\nBy now you should know enough to be dangerous. There's definitely more to learn but you already know enough about Node to actually make something! So let's do it! You will be creating a very basic informational site that contains 4 pages: index, about, contact-me and 404. Keep in mind that the content of these pages isn't really all that important. So there's no need to spend a lot of time filling them up or trying to make them look pretty.\nIf you get stuck at anytime, feel free to go back to the Getting Started lesson.\nAssignment\n1. Make a project directory and create the following files inside that directory:\n- `index.html`\n- `about.html`\n- `contact-me.html`\n- `404.html`\n1. Create your node.js server file `index.js` and add the code needed to serve the right page according to the url.\n- [localhost:8080](http://localhost:8080) should take users to `index.html`\n- [localhost:8080/about](http://localhost:8080/about) should take users to `about.html`\n- [localhost:8080/contact-me](http://localhost:8080/contact-me) should take users to `contact-me.html`\n- `404.html` should display any time the user tries to go to a page not listed above.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1357,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\project_basic_informational_site.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b23e53d43bec4e67efbbf47a4cf05551",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\introduction_what_is_nodeJS.md",
    "source_type": "git_repo",
    "title": "introduction_what_is_nodeJS",
    "content": "Introduction\nNodeJS (or just 'Node') has been steadily gaining popularity since its creation in 2009 The internet is flooded with courses and articles about it, installing it is a prerequisite for pretty much any back-end development work, and of course the amount of jobs that require knowledge of it are also on the rise Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe the purpose of a server Describe the differences between static and dynamic sites Explain why you might need a back-end for your project Explain when you wouldn't need a back-end for a project Explain the event loop Understand the origin of the Node js runtime Write a basic \"hello world\" application and run it in the console of your machine Understand what Node js really is What is Node The Node js website declares:\nAs an asynchronous event driven JavaScript runtime, Node is designed to build scalable network applications This is a definition that requires a little unpacking The important bit to understand right up front is that Node is a \"JavaScript runtime\" When JavaScript was first created, it was designed to run in the browser This means that it was impossible to use JavaScript to write any kind of program that was not a website Node brings JavaScript out of browser-land This allows developers to use JavaScript to accomplish pretty much anything that other popular server-side languages such as Ruby, PHP, C# and Python can do So, at its most basic level, Node allows you to run JavaScript code on a machine such as your local computer or a server without having to go through a web browser To facilitate this, Node has some added functionality that is not found in browser-based JavaScript, such as the ability to read and write local files, create http connections and listen to network requests Event driven\nBack to the definition from Node's website: Node is an asynchronous event driven JavaScript runtime In this context asynchronous means that when you write your code you do not try to predict the exact sequence in which every line will run Instead you write your code as a collection of smaller functions that get called in response to specific events such as a network request (event driven) For example, let's say you are writing a program and you need it to do the following It should read some text from a file, print that text to the console, query a database for a list of users and filter the users based on their age",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7501,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\introduction_what_is_nodeJS.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3b281501cf661414ac7271f36ffe3fa9",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\introduction_what_is_nodeJS.md",
    "source_type": "git_repo",
    "title": "introduction_what_is_nodeJS",
    "content": "line will run Instead you write your code as a collection of smaller functions that get called in response to specific events such as a network request (event driven) For example, let's say you are writing a program and you need it to do the following It should read some text from a file, print that text to the console, query a database for a list of users and filter the users based on their ageInstead of telling your code to do those steps sequentially like so:\nRead File\nPrint File Contents\nQuery Database\nFilter Database Query results\nYou can break up the task like so:\nRead File AND THEN Print File Contents\nQuery Database AND THEN Filter Database Query Results When you run this program Node will start at the top and begin reading the file but since that is an action that takes some time it will immediately begin running the second step (querying the database) while it's waiting on the file to finish reading While both of these processes are running, Node sits and waits on an event In this case, it is waiting on the completion of both processes, the reading of a file and the database query When either of these tasks are finished, Node will fire off an event that will run the next function we've defined So if the read-file process finishes first, it will print the file contents If the database query finishes first, it will start the filtering process As the programmer, we don't know or care which order the two processes are going to be completed If this code was processed synchronously (rather than asynchronously) we would have to wait for each step in the program before moving on to the next one, which could cause things to slow down considerably If the file that we needed to read was really long then we might have to wait a few seconds before the database query could begin This process is almost exactly like the way that you would use addEventListener in front-end JavaScript to wait for a user action such as a mouse-click or keyboard press The main difference is that the events are going to be things such as network requests and database queries This functionality is facilitated through the use of callbacks Callbacks are incredibly important to Node, so take a minute to read through this article about understanding callbacks to make sure you're up to speed Let's look at a quick real-world example:\njavascript\nhttp createServer(function (req, res) {\nres writeHead(200, {'Content-Type': 'text/html'});\nres end('Hello World ');\n})",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7501,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\introduction_what_is_nodeJS.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "72a4b6d9b0dab31d5563ebbf097ea07f",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\introduction_what_is_nodeJS.md",
    "source_type": "git_repo",
    "title": "introduction_what_is_nodeJS",
    "content": "press The main difference is that the events are going to be things such as network requests and database queries This functionality is facilitated through the use of callbacks Callbacks are incredibly important to Node, so take a minute to read through this article about understanding callbacks to make sure you're up to speed Let's look at a quick real-world example: javascript http createServer(function (req, res) { res writeHead(200, {'Content-Type': 'text/html'}); res end('Hello World '); })listen(8080);\nThis snippet is from the very first lesson in a tutorial that you'll be following very soon Basically this code is creating a server and saying, \"any time we get a network request, run this callback function\" This function happens to respond with the text 'Hello World ' So if you go to a browser and navigate to the correct address and port, you would see that text on your screen #### Using React in the Node js course\nWe will start by focusing on server-side concepts, so client-side things like React will be left for later when you start combining more complex frontends and backends together You should follow the course as it is written; deviating from the directions can make it more difficult than it needs to be Assignment\n1 This [short module on \"The Server Side\" from MDN](https://developer mozilla org/en-US/docs/Learn/Server-side/First_steps) is a great source for the background knowledge you need Read through at least the first two articles posted under the 'Tutorials' section: Introduction to the server side and Client-Server Overview The other two are interesting and worth reviewing, but less relevant to our immediate concerns 1 To gain a little more insight into the nature of Node, and to unpack the rest of the above definition, read this [article about NodeJS](https://medium freecodecamp org/what-exactly-is-node-js-ae36e97449f5) 1 What is the Node Event Loop You may remember about this long, but *really* [fantastic video about event loops](https://www youtube com/watch v=8aGhZQkoFbQ) from an earlier part of the course don't skip it 1 Take a few minutes to go through the \"Getting Started\" section of the new official [Node js website](https://nodejs org/en/learn/getting-started/introduction-to-nodejs) Read up until, but not including, the TypeScript module",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7501,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\introduction_what_is_nodeJS.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b7374fb3be4fabb758414fa6d7ec9e56",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\introduction_what_is_nodeJS.md",
    "source_type": "git_repo",
    "title": "introduction_what_is_nodeJS",
    "content": "unpack the rest of the above definition, read this [article about NodeJS](https://medium freecodecamp org/what-exactly-is-node-js-ae36e97449f5) 1 What is the Node Event Loop You may remember about this long, but *really* [fantastic video about event loops](https://www youtube com/watch v=8aGhZQkoFbQ) from an earlier part of the course don't skip it 1 Take a few minutes to go through the \"Getting Started\" section of the new official [Node js website](https://nodejs org/en/learn/getting-started/introduction-to-nodejs) Read up until, but not including, the TypeScript module1 This [short video about NodeJS](https://www youtube com/watch v=uVwtVBpw7RQ) is a great introduction as well Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is Node Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read this article on 7 awesome things you can build with Node js",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7501,
      "relative_path": "git_repos\\odin-project\\nodeJS\\introduction_to_nodeJS\\introduction_what_is_nodeJS.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "14e08277b5b69e4d0918b0620ca239f9",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\orms\\project_file_uploader.md",
    "source_type": "git_repo",
    "title": "project_file_uploader",
    "content": "Introduction\nIn this project, we'll be building a stripped down version of Google Drive (or any other personal storage service).\nAssignment\n1. Set up a new project using Express and Prisma. Install all the necessary dependencies including Passport etc.\n1. Set up session based authentication using Passport.js. Use the [Prisma session store library](https://github.com/kleydon/prisma-session-store#readme) to persist sessions in the database.\n1. Add a form where authenticated users can upload a file. Save the file in your filesystem for now. You'll need to integrate the [multer middleware](https://github.com/expressjs/multer). We'll upload these files once we have all other features working.\n1. Add folders. Users should be able to CRUD folders and upload files in them. Set up routes and necessary database interactions for this.\n1. Add a route to view specific file details like name, size, and upload time. There should be a download button to allow users to download the file.\n1. Finally, add logic to upload files. You could store it in a database, but it's advised to use a cloud storage service for this usecase. You can use [Cloudinary](https://cloudinary.com/) or [Supabase storage](https://supabase.com/docs/guides/storage). When a file is uploaded, save the file URL in the database.\n#### Extra credit\n- Add a share folder functionality. When a user wants to share a folder (and all of its contents), they should have a form to specify the duration i.e. 1d, 10d etc. This should generate a link that can be shared with anyone (unauthenticated users). For example, the link could be in the following format: `https://yourapp.com/share/c758c495-0705-44c6-8bab-6635fd12cf81`",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1812,
      "relative_path": "git_repos\\odin-project\\nodeJS\\orms\\project_file_uploader.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "780d57eaaef46305cbae2f4063d9285e",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\testing_express\\testing_database_operations.md",
    "source_type": "git_repo",
    "title": "testing_database_operations",
    "content": "Introduction\nWhen the code that you are testing has to touch a database, the amount of setup that you have to do gets quite a bit more complicated Obviously, you don't want to run your testing code on your production database because of the risk of compromising your users' data In this lesson, we'll touch on how to deal with databases in unit and integration testing environments Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Cover unit and integration tests in the context of an Express server Create and use a separate database for integration testing Unit tests - do you even need to Before diving in, you might want to consider whether or not the database operations you're testing even need to be tested in the first place If you are reading and writing straight from a database using pg or some other db module, you might not really need to test that code pg's GitHub repo's tests directory (and presumably all other popular db modules) already has plenty of tests for all of its actions, so if you are just serving up a JSON API and all you're doing is leveraging functions from another module then those operations are already covered If your queries are complicated, you might justify adding unit tests to make sure that you are using them correctly and that the code you have written is doing what you intend it to, and if you are using any of your own code to do some filtering, sorting, or other manipulations of the data you will want to test that as well In the case of your own code, however, it would be better if you could pull those things out into their own modules, separate from your database operations so you can test them without messing with the database Integration tests\nThere are cases, however, when you are going to want to test things that touch your database For example, we performed an integration test on the server in the Testing Routes and Controllers lesson using supertest Create a separate database for testing; prefix it with a test_ for you to easily identify with You might want to run a prisma migrate by swapping out the test database url Afterwards, use a seed script on this database instance, or you could manually insert data in a beforeAll function in your test suite We'll leverage environment variables for your codebase to identify which database to use First, add the test database in your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4203,
      "relative_path": "git_repos\\odin-project\\nodeJS\\testing_express\\testing_database_operations.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cf45225d33b7b7c82eb766c35a84df21",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\testing_express\\testing_database_operations.md",
    "source_type": "git_repo",
    "title": "testing_database_operations",
    "content": "supertest Create a separate database for testing; prefix it with a test_ for you to easily identify with You might want to run a prisma migrate by swapping out the test database url Afterwards, use a seed script on this database instance, or you could manually insert data in a beforeAll function in your test suite We'll leverage environment variables for your codebase to identify which database to use First, add the test database in yourenv file:\nproperties\nNODE_ENV=development\nDATABASE_URL=postgresql://<user>:<password>@localhost:3306/inventory_application\nTEST_DATABASE_URL=postgresql://<user>:<password>@localhost:3306/test_inventory_application\nNext, setup appropriate npm scripts in your package json file:\njson\n{\n// other stuff\n\"scripts\": {\n\"dev\": \"NODE_ENV=development && node app js\",\n\"test\": \"NODE_ENV=test && jest\"\n},\n// even more stuff\n}\nBased on the NODE_ENV, you can programmatically switch out database urls:\n```javascript\nconst databaseUrl = process env NODE_ENV === 'test' process env TEST_DATABASE_URL\n: process env DATABASE_URL;\nconst prisma = new PrismaClient({\ndatasources: {\ndb: {\nurl: databaseUrl,\n},\n},\n});\n```\nVoila, the setup is complete Now shoo go get testin' Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge When should you unit test database operations How do you set up and use a test database for integration testing Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4203,
      "relative_path": "git_repos\\odin-project\\nodeJS\\testing_express\\testing_database_operations.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3dfab90094a44e85e1eaf93d7187e810",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
    "source_type": "git_repo",
    "title": "prisma_orm",
    "content": "Introduction\nTired of writing raw SQL queries in your projects In this lesson, we'll talk about Object Relational Mappers (ORM for short) ORMs are tools that let you manipulate data in your database and are widely used in the software industry We'll dive deep into one ORM popular in the Node js landscape: Prisma ORM Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What ORMs are and why they are used Introduce Prisma ORM Describe the features of Prisma ORM Challenges with raw SQLin'\nWith the couple of projects you've done earlier, you might've run into the tediousness of raw SQL queries Let's briefly discuss some of these challenges So much more code\nYou need a SELECT statement Cool, write a query Need a SELECT statement for a different table Write another query Or if your programmer senses are tingling, you could create a utility function for SELECT But now you need a SELECT statement for specific columns You'll have to modify the utility function What about filters and sorting You get the point Replicate the above for insert queries, and all of its variations Or you could go in a different direction Create modules per entity For example, the books module would have:\njavascript\nclass Book {\nasync getBooks(filters) {}\nasync getBookById(id) {}\nasync createBook(data) {}\nasync updateBook(id, data) {}\nasync deleteBook(id) {}\nasync getBookAuthors(id) {}\nasync getBookGenres(id) {}\n// and so on\n}\nOr you could mix and match the two approaches Create a Database class and inherit from it in your entity classes Or you fancy composition, and just want to deal with pure functions Now do this over and over for each entity, across multiple projects You get the point It can be argued that writing more code is not necessarily bad, as you're learning and practicing, and it isn't It's sufficient for solo projects and we even suggest you explore the above ideas But as you work in teams, and with large scale software, it becomes imperative to have a standard way of interacting with the database, either with an external library or a homegrown solution You'll realize how much an ORM really helps you focus on writing code that's business critical If you haven't applied any of the above paradigms in your previous projects, we highly recommend going back and refactoring You might end up with a very basic mini ORM for your project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10460,
      "relative_path": "git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "111a00c0d1c71f5a92db31a6cd8138dd",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
    "source_type": "git_repo",
    "title": "prisma_orm",
    "content": "and with large scale software, it becomes imperative to have a standard way of interacting with the database, either with an external library or a homegrown solution You'll realize how much an ORM really helps you focus on writing code that's business critical If you haven't applied any of the above paradigms in your previous projects, we highly recommend going back and refactoring You might end up with a very basic mini ORM for your projectThis will help you appreciate a bit more how a proper ORM will make your life easier Navigating the codebase\nWhen all database interactions are done in raw SQL, there's nowhere in the codebase where you can understand the database tables, their relations, and column data types You might have to log in to your database to make sense of what the codebase is doing To attain a technical understanding of the project, you now rely on the codebase as well as access to the database Most ORMs out there solve this problem by bringing database definitions into the codebase This is called a \"schema\" This allows you to quickly glance at the schema of a table and understand what columns it has and so forth Altering production data\nDatabases inevitably change as the requirements of the project evolve You might have to add a new column or populate a new table with existing data In technical terms, this is called a migration Without an ORM or a similar library, you'll be hand rolling these migrations, which will be error-prone and tedious ORMs standardize migrations via changelogs, and have processes to deal with conflicts Granted, you won't be running as many migrations in your curriculum projects, but as you work professionally, you might do it every other day Introducing Prisma ORM\nORMs pretty much solve all of the pain points mentioned above, but it's not all sunshine and roses There can be a learning curve to fully understand the ins and outs of an ORM, and some don't even fully support all SQL features Even with these shortcomings, using an ORM can be extremely worthwhile In the Node js ecosystem, there are a lot of ORMs to choose from, and the community has not landed on a go-to yet We've decided to cover Prisma ORM in the curriculum because of its popularity and community support Prisma ORM has all the features we need to complete this curriculum and then some Prisma ORM consists of several libraries, so we can use npm to install whichever one(s) our application needs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10460,
      "relative_path": "git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "f7bd46d69a6daa74effd7a3850233f5b",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
    "source_type": "git_repo",
    "title": "prisma_orm",
    "content": "be extremely worthwhile In the Node js ecosystem, there are a lot of ORMs to choose from, and the community has not landed on a go-to yet We've decided to cover Prisma ORM in the curriculum because of its popularity and community support Prisma ORM has all the features we need to complete this curriculum and then some Prisma ORM consists of several libraries, so we can use npm to install whichever one(s) our application needsWe'll start by discussing some of its features, and then link to some official Prisma ORM guides to help you get started Prisma Schema\nThe Prisma schema is a file where you will define your models For example, consider a message table in a chat app:\n```text\nmodel Message {\nid        Int      @id @default(autoincrement())\ncontent   String   @db VarChar(255)\ncreatedAt DateTime @default(now())\nauthor    User     @relation(fields: [authorId], references: [id])\nauthorId  Int\n}\nmodel User {\n// user's fields\n}\n```\nThere's a bunch of new stuff up here Prisma schema files are written in Prisma Schema Language You can see how not only are there column definitions for the table, but also a relation to another table defined within the Message model You'll learn more about this in the assignment readings This schema file lives in your codebase and is tracked by version control You can guess by now how useful this is Prisma Client\nThe client is a separate library that you will use to interact with your database The Prisma client is a bit special in that it's customized to your schema Um what ```javascript\n// instantiate the client\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n// when creating a new message\nawait prisma message create({\ndata: {\ncontent: 'Hello, world ',\nauthorId: 1\n}\n})\n// when fetching all messages\nconst messages = await prisma message findMany();\n```\nNotice the prisma message object How did Prisma Client know that there's a message model Once you create or update the schema file, all you have to do is run\nbash\nnpx prisma generate\nin the CLI, and Prisma ORM will generate the client for you The client can handle all sorts of querying: joins, filters, sorting, pagination, and more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10460,
      "relative_path": "git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "930ae8ebc6b4068749a6ac9e9d9c18ca",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
    "source_type": "git_repo",
    "title": "prisma_orm",
    "content": "1 } }) // when fetching all messages const messages = await prisma message findMany(); ``` Notice the prisma message object How did Prisma Client know that there's a message model Once you create or update the schema file, all you have to do is run bash npx prisma generate in the CLI, and Prisma ORM will generate the client for you The client can handle all sorts of querying: joins, filters, sorting, pagination, and moreYou might have a complex query that you just are unable to get right via the Prisma client, or if you feel more comfortable writing a query raw, you can do that too Prisma Client supports raw queries as well Prisma Migrate\nPrisma migrate is a tool that helps you perform database migrations You won't be using it a whole ton in the curriculum, but it's good to be aware of it When you decide to change the schema in any way, you run a Prisma migration to apply the schema changes to the database These changes are tracked in a migrations folder in your codebase #### Prisma ORM limitations\nIn the [Using PostgreSQL lesson](https://www theodinproject com/lessons/nodejs-using-postgresql), we learned about Identity columns PostgreSQL recommends the use of Identity columns, as they comply with the SQL standard Prisma ORM, however, does not support these columns, and will create PostgreSQL specific [Serial Types](https://www postgresql org/docs/16/datatype-numeric html#DATATYPE-SERIAL) instead This most likely will not affect your projects, but it can be important to keep in mind See this Stackoverflow answer for a short description on the [difference between Serial and Identity](https://stackoverflow com/a/55300741/1882858) Assignment\n1 Go through the [get started guide for relational databases](https://www prisma io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql), which covers migrations, schema, and the Prisma client 1 Read the following articles from Prisma's documentation Try to code along with the examples Don't worry if things don't stick yet, we'll be practising *a lot* of Prisma in the coming projects - [What is Prisma ORM ](https://www prisma io/docs/orm/overview/introduction/what-is-prisma)\n- [Prisma schema overview](https://www prisma",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10460,
      "relative_path": "git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "49eb5ea73c7dac81b414d22090d90cc4",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
    "source_type": "git_repo",
    "title": "prisma_orm",
    "content": "description on the [difference between Serial and Identity](https://stackoverflow com/a/55300741/1882858) Assignment 1 Go through the [get started guide for relational databases](https://www prisma io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql), which covers migrations, schema, and the Prisma client 1 Read the following articles from Prisma's documentation Try to code along with the examples Don't worry if things don't stick yet, we'll be practising *a lot* of Prisma in the coming projects - [What is Prisma ORM ](https://www prisma io/docs/orm/overview/introduction/what-is-prisma) - [Prisma schema overview](https://www prismaio/docs/orm/prisma-schema/overview)\n- [Data models](https://www prisma io/docs/orm/prisma-schema/data-model/models)\n- [Relations](https://www prisma io/docs/orm/prisma-schema/data-model/relations)\n- [Prisma client CRUD](https://www prisma io/docs/orm/prisma-client/queries/crud)\n- [Raw SQL](https://www prisma io/docs/orm/prisma-client/using-raw-sql/typedsql)\n- [Prisma migrate getting started](https://www prisma io/docs/orm/prisma-migrate/getting-started)\n- [Prisma migrate mental model](https://www prisma io/docs/orm/prisma-migrate/understanding-prisma-migrate/mental-model)\n- [Data migrations](https://www prisma io/docs/guides/data-migration)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are some of the challenges of using raw sql What is Prisma schema and how is it useful What is the Prisma client How does Prisma client know about the models in your schema What is Prisma migrate How do you define a relation in Prisma schema How can you get all records from a table using Prisma client Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Learn Prisma In 60 Minutes by Web Dev Simplified Prisma Crash Course by Traversy Media",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10460,
      "relative_path": "git_repos\\odin-project\\nodeJS\\orms\\prisma_orm.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e6756877a05511fe67f77ccacd57619f",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\README.md",
    "source_type": "git_repo",
    "title": "TOP Custom Markdownlint Rules",
    "content": "TOP Custom Markdownlint Rules\nThis directory contains documentation for our custom rules for linting Markdown files using the markdownlint tool. These rules supplement the default rules provided by markdownlint to enforce our curriculum's layout style.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 408,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\README.md",
      "source_type": "git_repo"
    },
    "token_count": 43,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "634a6318460a27e6a69a96bf04ded6fc",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP001.md",
    "source_type": "git_repo",
    "title": "TOP001 - Descriptive link text labels",
    "content": "TOP001 - Descriptive link text labels\nTags: accessibility, links\nAliases: descriptive-link-text-labels\nFixable via script: Not fixable due to being context-based\nThis rule is triggered when a link has a text label that meets one of the following criteria:\nUses the words \"this\" or \"here\"\nExactly matches one of our blacklisted link texts (commonly used text labels that are insufficiently descriptive)\nExample of links that have text labels that include \"this\" or \"here\":\nmarkdown\nYou can read more about variables in JavaScript [here](https://example com) [This article](https://example com) provides more information about closures To fix this issue, remove the words \"here\" and \"this\" and use more descriptive text that clearly conveys the purpose or content of the link You may need to also update the surrounding text The following code block demonstrates how the links from above could be fixed:\nmarkdown\nYou can read more about [variables in JavaScript](https://example com) [An in-depth article about closures in JavaScript](https://example com) provides more information Note that even if the text is somewhat descriptive, this rule will still flag occurrences of \"this\" or \"here\":\nmarkdown\n[Here is a comprehensive guide to understanding closures](https://example com) In this case, it's still better to rephrase the link text to be more concise and descriptive:\nmarkdown\n[Comprehensive guide to understanding closures](https://example com)\nAdditionally, consider including relevant keywords in the link text to provide more context:\nmarkdown\nFor more information, refer to the [official documentation on closures in JavaScript](https://example com) This rule is also triggered if the entire link text exactly matches any of our blacklisted texts, which consists of commonly used text labels that are not sufficiently descriptive while not containing \"this\" or \"here\" Examples include (but are not limited to) \"video\", \"article\", \"an article\", \"docs\", \"the docs\", \"documentation\", and \"homepage\":\nmarkdown\nFor more information, watch this [video](https://example com) about the CSS box model You can read more about it in the [documentation](https://example com) The above links can be rephrased to be sufficiently descriptive by themselves:\nmarkdown\nFor more information, watch this [video about the CSS box model](https://example com)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3268,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP001.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "02e7a758e4e6663fc6f75bb0985fdafc",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP001.md",
    "source_type": "git_repo",
    "title": "TOP001 - Descriptive link text labels",
    "content": "that are not sufficiently descriptive while not containing \"this\" or \"here\" Examples include (but are not limited to) \"video\", \"article\", \"an article\", \"docs\", \"the docs\", \"documentation\", and \"homepage\": markdown For more information, watch this [video](https://example com) about the CSS box model You can read more about it in the [documentation](https://example com) The above links can be rephrased to be sufficiently descriptive by themselves: markdown For more information, watch this [video about the CSS box model](https://example com)You can read more about it in the [Proc class documentation](https://example com) Rationale\nDescriptive link text improves accessibility by providing clear and meaningful context about the link's destination Links with text labels using the words \"this\" or \"here\" tend to be less descriptive and may not effectively convey the purpose of the link to users, especially those using assistive technologies Similarly, text labels like \"video\", \"article\" or \"docs\" act in the same way for users of assistive technologies, requiring knowledge of the surrounding non-link text for context By using specific and relevant keywords in the link text, you can enhance the user experience and make it easier for users to understand the context and purpose of the link",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3268,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP001.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "13f09c3b3147eb56ef393745331b1365",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP002.md",
    "source_type": "git_repo",
    "title": "TOP002 - No inline code in headings",
    "content": "TOP002 - No inline code in headings\nTags: headings\nAliases: no-code-headings\nFixable via script: Mostly fixable (see below for clash details)\nThis rule is triggered when a heading contains inline code. For example:\n```markdown\nUsing console.log() for Debugging\n```\nTo fix this issue, remove the inline code from the heading and rephrase it to convey the same meaning without using code:\n```markdown\nUsing console.log for Debugging\n```\nThis rule's fixer currently may not work correctly if there are spaces within inline code blocks. For example, the following scenario would have the default rule MD038 - no spaces in code run its fixer first.\n```markdown\nA spaceinside a heading\nA spaceinside a heading\n```\nNotice how the space has been removed from inside the inline code block, but the code block has not been removed. Running the fix command will remove the inline code, but the space would then be missing between the words \"space\" and \"inside\".\nRationale\nHeadings should be concise and descriptive, providing a clear overview of the section's content. Including inline code in headings can make them less readable and may not effectively convey the purpose of the section to users.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1372,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP002.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1d19d7603660af1b26b9bcdc9f562aa9",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\testing_express\\testing_routes_and_controllers.md",
    "source_type": "git_repo",
    "title": "testing_routes_and_controllers",
    "content": "Introduction\nUnit Testing is important for many reasons that we probably don't need to cover right now If you've already taken our basic JavaScript course you've already encountered Unit Testing, and the point of this lesson is not to teach you the philosophy or mechanics of writing tests, but how they apply to our Express applications and APIs If you haven't finished our front-end JavaScript course, go back and take a look at those lessons before progressing Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Use the supertest module to test Express routes/controllers Describe how SuperTest handles our express application Explain the functionality superagent provides to SuperTest Describe what the done parameter is used for Explain and have a firm understanding of expect() method's functionality Have familiarity with supertest's documentation and methods Routes testing with supertest\nThe most important, basic requirement for testing something in your code is that it must be in an exported module This is true for both custom middleware and your routes/controllers, so the very first thing you need to do is separate those things into their own modules, if they aren't already In the case of routes, you already know how to do this using Express Router Below is a very basic example ```javascript\n//// app js\nconst express = require(\"express\");\nconst app = express();\napp use(express urlencoded({ extended: false }));\nconst indexRouter = require(\" /index\");\napp use(\"/\", indexRouter);\napp listen(3000, (error) => {\nif (error) {\nthrow error;\n}\nconsole log(\"running\");\n});\n```\n```javascript\n//// index js\nconst express = require(\"express\");\nconst index = express Router();\nconst array = [];\nindex get(\"/\", (req, res) => {\nres json({ name: \"frodo\" });\n});\nindex get(\"/test\", (req, res) => res json({ array }));\nindex post(\"/test\", (req, res) => {\narray push(req body item);\nres send('success ');\n});\nmodule exports = index;\n```\nThese two files, app js and index js define a couple of routes and then set up and start our express app For the moment we do not need to test app js because it only contains code that starts and runs an express app It doesn't include any of our own logic so we don't need to test it index js however does include some things that we want to test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8378,
      "relative_path": "git_repos\\odin-project\\nodeJS\\testing_express\\testing_routes_and_controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ac7410ca886b1db9229df1122b5d0689",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\testing_express\\testing_routes_and_controllers.md",
    "source_type": "git_repo",
    "title": "testing_routes_and_controllers",
    "content": "exports = index; ``` These two files, app js and index js define a couple of routes and then set up and start our express app For the moment we do not need to test app js because it only contains code that starts and runs an express app It doesn't include any of our own logic so we don't need to test it index js however does include some things that we want to testTo facilitate actually testing these routes we're going to use a library called SuperTest, so go ahead and npm install supertest --save-dev and while it's installing take a few minutes to look through the readme on their git repo (linked above) In the examples below we're going to use SuperTest inside of a Jest style describe/test block, but the syntax and use of these are common among most testing libraries, so the concepts should be easily replicated in Mocha with Chai or Jasmine or Tape or whatever testing library you prefer Here's our test file:\n```javascript\nconst index = require(\" /index\");\nconst request = require(\"supertest\");\nconst express = require(\"express\");\nconst app = express();\napp use(express urlencoded({ extended: false }));\napp use(\"/\", index);\ntest(\"index route works\", done => {\nrequest(app) get(\"/\") expect(\"Content-Type\", /json/) expect({ name: \"frodo\" }) expect(200, done);\n});\ntest(\"testing route works\", done => {\nrequest(app) post(\"/test\") type(\"form\") send({ item: \"hey\" }) then(() => {\nrequest(app) get(\"/test\") expect({ array: [\"hey\"] }, done);\n});\n});\n```\nLet's step through it piece by piece To begin, we have to import the module we're testing, in this case it's the file index js from above javascript\nconst index = require(\" /index\");\nNext, we include both supertest and express We're setting up a new Express app and then using the index router that we imported previously The reason we have to do this setup here is because we are not actually touching our original app js file The main reason that we're doing it this way is so that we can avoid calling the app listen command and starting our server, but it's also useful because, in larger apps, we can skip some of the optional configuration steps and only include the bits that we need for our testing purposes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8378,
      "relative_path": "git_repos\\odin-project\\nodeJS\\testing_express\\testing_routes_and_controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0af766b40786f3c61f25cefb818a673c",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\testing_express\\testing_routes_and_controllers.md",
    "source_type": "git_repo",
    "title": "testing_routes_and_controllers",
    "content": "imported previously The reason we have to do this setup here is because we are not actually touching our original app js file The main reason that we're doing it this way is so that we can avoid calling the app listen command and starting our server, but it's also useful because, in larger apps, we can skip some of the optional configuration steps and only include the bits that we need for our testing purposesIn a larger test suite, it would probably be useful to abstract this part out to its own file that gets imported into each test file ```javascript\nconst request = require(\"supertest\");\nconst express = require(\"express\");\nconst app = express();\napp use(express urlencoded({ extended: false }));\napp use(\"/\", index);\n```\nThe tests themselves are relatively straightforward, thanks to the SuperTest library Remember that we imported supertest as the function request which we use as seen below We call it on our freshly created express app, pass it our route, and then use it to make sure that the responses match the types and content that we expect Notice the parameter done that is passed into the test callback Most testing libraries use this to signal that the test is complete in the case of asynchronous operations In this case, SuperTest allows us to pass it into the last expect and calls it for us Thanks, SuperTest javascript\ntest(\"index route works\", done => {\nrequest(app) get(\"/\") expect(\"Content-Type\", /json/) expect({ name: \"frodo\" }) expect(200, done);\n});\nOur second test is very similar to the first one, but tests the post method You can (and should) read about all the possible functions on the SuperTest readme, so we won't go into the details of every step here The last bit however is important to us By this point in your JavaScript career, you should be familiar with Promises, so the then() syntax should be familiar In this case we wait for the POST request to finish and then we call the GET request when that promise resolves to check if that item has been pushed into the array javascript\ntest(\"testing route works\", done => {\nrequest(app) post(\"/test\") type(\"form\") send({ item: \"hey\" }) then(() => {\nrequest(app) get(\"/test\") expect({ array: [\"hey\"] }, done);\n});\n});\nIf we were using a real database here, then we would want to do something similar using either a test or a mock database",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8378,
      "relative_path": "git_repos\\odin-project\\nodeJS\\testing_express\\testing_routes_and_controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bb1151181864c42cc93534c6f5f89ae7",
    "source_file": "corpus\\git_repos\\odin-project\\nodeJS\\testing_express\\testing_routes_and_controllers.md",
    "source_type": "git_repo",
    "title": "testing_routes_and_controllers",
    "content": "POST request to finish and then we call the GET request when that promise resolves to check if that item has been pushed into the array javascript test(\"testing route works\", done => { request(app) post(\"/test\") type(\"form\") send({ item: \"hey\" }) then(() => { request(app) get(\"/test\") expect({ array: [\"hey\"] }, done); }); }); If we were using a real database here, then we would want to do something similar using either a test or a mock databaseWe'll talk about setting something like that up in a separate lesson Suffice it to say for now that you do not want to run test code on your production database Assignment\n1 Make sure that you read through the [SuperTest docs](https://github com/forwardemail/supertest)\n1 SuperTest actually pulls from another related project called SuperAgent Any method that you can call in SuperAgent you can also call from SuperTest, so you'll need to take a look through the [SuperAgent docs](https://forwardemail github io/superagent/) as well Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the motivation behind SuperTest What is the purpose of done What convenience does SuperTest provide concerning it What is the difference in handling errors when using end() method in conjunction with expect() provided by SuperTest What are the methods provided by SuperAgent to handle multipart requests and how to use them Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8378,
      "relative_path": "git_repos\\odin-project\\nodeJS\\testing_express\\testing_routes_and_controllers.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bbf8c132f8a6e90d14c1ce71b650bab2",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP003.md",
    "source_type": "git_repo",
    "title": "TOP003 - Default section content",
    "content": "TOP003 - Default section content\nTags: content\nAliases: default-section-content\nFixable via script: Default section content will be added or reworded accordingly This rule is triggered when a section does not have the expected default content or structure The affected sections include:\nLesson Overview\nAssignment\nKnowledge Check\nAdditional Resources\nContains content before or after list\nThere should be no content before or after the unordered list of items in the \"Lesson overview\", \"Knowledge check\", and \"Additional resources\" sections, other than the default content Incorrect (content after the list):\n```markdown\nLesson Overview\nThis section contains a general overview of topics that you will learn in this lesson LO item\nSome additional content\n```\nIncorrect (content before the list):\n```markdown\nLesson Overview\nThis section contains a general overview of topics that you will learn in this lesson Some additional content\nLO item\n```\nCorrect:\n```markdown\nLesson Overview\nThis section contains a general overview of topics that you will learn in this lesson LO item\n```\nContains incorrect default content\nEach section should contain the correct default content Incorrect (wrong default content before the list):\n```markdown\nLesson Overview\nThis section has the incorrect text following the heading LO item\n```\nCorrect:\n```markdown\nLesson Overview\nThis section contains a general overview of topics that you will learn in this lesson LO item\n```\nIncorrect (missing the list after the Additional Resources heading):\n```markdown\nAdditional Resources\nThis section contains helpful links to related content It is not required, so consider it supplemental ```\nCorrect:\n```markdown\nAdditional Resources\nThis section contains helpful links to related content It is not required, so consider it supplemental AR item\n```\nIncorrect (contains a nested list):\n```markdown\nLesson Overview\nThis section contains a general overview of topics that you will learn in this lesson An item\nA nested item\n```\nCorrect:\n```markdown\nLesson Overview\nThis section contains a general overview of topics that you will learn in this lesson An item\nAnother item\n```\nMissing \"Assignment\" section div wrapper\nThe \"Assignment\" section should contain a div with the correct attributes Note that not all assignment content needs to be wrapped in this div, but it must at least exist in this section",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3194,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP003.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0fa395e6fe787558fc7363ffe4f6bd64",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP003.md",
    "source_type": "git_repo",
    "title": "TOP003 - Default section content",
    "content": "topics that you will learn in this lesson An item A nested item ``` Correct: ```markdown Lesson Overview This section contains a general overview of topics that you will learn in this lesson An item Another item ``` Missing \"Assignment\" section div wrapper The \"Assignment\" section should contain a div with the correct attributes Note that not all assignment content needs to be wrapped in this div, but it must at least exist in this sectionIncorrect (missing the div wrapper with the correct attributes):\n```markdown\nAssignment\nAssignment content\n```\nCorrect:\n```markdown\nAssignment\nAssignment content\n```\nRationale\nIncluding default content in specific sections helps maintain consistency across lessons and provides learners with clear expectations It also ensures that essential information is not overlooked and that the curriculum structure remains organized and easy to navigate",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3194,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP003.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5daaef0a84eef7f793db80e365dd036d",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP005.md",
    "source_type": "git_repo",
    "title": "TOP005 - Blanks around multiline HTML tags",
    "content": "TOP005 - Blanks around multiline HTML tags\nTags: html, blank_lines\nAliases: blanks-around-multiline-html-tags\nFixable via script: Blank lines added when needed\nThe rule is triggered when a line containing only an opening or closing HTML tag is surrounded by anything other than a blank line or fenced code block.\n````markdown\n#### An optional title\nA sample note box.\n```markdown\n#### An optional title\nA sample note box.\n```\n````\nIn the above example, the very first opening tag will trigger this rule, as the line immediately after it is not a blank nor a code block delimiter.\nThe first closing tag will not trigger this rule, as there is a blank line on each side.\nThe second opening tag will not trigger this rule, as it is surrounded by a fenced code block delimiter and a blank line, both of which are valid.\nThe same applies for the final closing tag, hence it will not trigger this rule either.\nThis rule is ignored for HTML within html, jsx, erb, ejs, javascript or ruby fenced code blocks, as these do not require being surrounded by blank lines.\n`htmlhtml\nThe linter will be perfectly happy with the HTML here, as we are using an html code block.\n```\n````\n`markdownmarkdown\nSince we are not using an html or jsx codeblock, this rule will be triggered. highlighting all four tags.\n```\n````\nRationale\nDue to the way markdown-it parses HTML blocks, until a blank line is reached, all contents following an HTML opening tag will be included in a single html_block token. This means the text content will not be parsed as their own tokens, thus not triggering any linting errors within them.\nThis means the following markdown would not trigger any lint errors, despite it being full of errors:\n```markdown\n#### This title should trigger the \"blanks around headings\" rule\n1. [this should trigger the \"descriptive links\" rule](#rationale)\n2. this should trigger the \"lazy list numbering\" rule\n```\nBy enforcing blank lines or code block delimiters surrounding HTML tags, all HTML boxes' text content can be separated into the appropriate individual tokens, and parsed correctly to trigger any appropriate rule errors.\nThis will help reduce the chance that maintainers miss linting errors within HTML blocks that are not flagged due to the above.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2635,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP005.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "541fae88d37f9d062504a0bf7e42720a",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP004.md",
    "source_type": "git_repo",
    "title": "TOP004 - Lesson headings",
    "content": "TOP004 - Lesson headings\nTags: headings\nAliases: lesson-headings\nFixable via script: Not fixable due to being context-based\nThe rule is triggered when the headings in the document do not match the specified list of required headings. It compares each heading in the document with the corresponding required heading and reports any mismatches.\nCurrently, the required headings depend on the content's type:\nLesson headings structure\n```markdown\nIntroduction\nLesson Overview\nA Custom Heading\n(Wildcard: Any heading at the same or lower level)\nAssignment\n* (Wildcard: Any subheading at the h4 level)\nKnowledge Check\nAdditional Resources\n```\nThe wildcard symbol * represents any heading text at the specified level. This means that any heading at the specified level will be considered valid, regardless of its actual text content.\nProject headings structure\n```markdown\nIntroduction\n(Wildcard: Any heading at the same level or lower level)\nAssignment\n(Wildcard: Any heading at the same level or lower level)\n```\nSimilar to the lesson headings structure, the wildcard symbol * in the project headings structure allows for any heading text at the specified level.\nRationale\nEnforcing a consistent heading structure improves readability, organization, and navigation. By specifying a required heading structure, authors can ensure that their documents follow a standardized format and include all the necessary sections. This rule helps maintain consistency across multiple documents and makes it easier for readers to locate specific information.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1656,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP004.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "350d4fe30eb4fac17f4aa0f55c9a6281",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP006.md",
    "source_type": "git_repo",
    "title": "TOP006 - Use full language name for fenced code blocks",
    "content": "TOP006 - Use full language name for fenced code blocks\nTags: code, language\nAliases: full-fenced-code-language\nFixable via script: Languages replaced accordingly\nThe rule is triggered when a language is specified for a fenced code block that uses a valid abbreviated name instead of the full language name.\nIn this repo, the expected languages for this to affect are:\njs => javascript\nrb => ruby\nmd => markdown\ntxt => text\nsh => bash\nyml => yaml\nOther languages that have abbreviated names, such as HTML and CSS, are not affected by this rule, as only the abbreviated forms are valid options.\nRationale\nAlongside other rules such as code block delimiters, list styles, and blank lines, the purpose of this rule is to enforce consistency within and between our files.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 849,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP006.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d4f31a8e1067e696bee1c3c9dca5e249",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP007.md",
    "source_type": "git_repo",
    "title": "TOP007 - Use markdown links",
    "content": "TOP007 - Use markdown links\nTags: links, html\nAliases: use-markdown-links\nFixable via script: Replaces anchor tags with markdown links unless excepted (see below).\nThe rule is triggered when an anchor tag with an href attribute is used for a link outside of a code block (whether fenced or inline).\nThese links should be written as markdown links instead of anchors.\n```markdown\nThe Odin Project\nThe Odin Project\n```\nThe knowledge-check-link class is not longer required for knowledge check links.\n```markdown\nText\nText\n```\nExceptions\nAny anchors inside code blocks.\nAny anchors used for a codepen embed, as these do not require changing to markdown links.\nRationale\nmarkdownlint is unable to lint HTML anchors with the same link-based rules as with markdown links. Therefore, anchors that would error with the TOP001 (Descriptive link text) rule would not error as an anchor. Converting to a markdown link will allow such rules to be used on it.\nOther linting rules also cannot be used on most anchors' text, due to the way markdown parsers tokenize HTML elements when no blank lines are included (related to TOP005 (Blanks around multiline HTML tags)). _ emphasis markers (which should be *) will not trigger errors.\nAnchors will also not automatically include target=\"_blank\" or rel=\"noopener noreferrer\" unless they are manually included. Markdown links are automatically converted by the web app to anchors with both of those attributes.\nAnchors that are not used for this purpose (e.g. for Codepen embeds, as code inside code blocks etc.) do not require action.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2149,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP007.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0a9aeb8842c5f86700e18298ac7dd657",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP008.md",
    "source_type": "git_repo",
    "title": "TOP008 - Use backticks for fenced code blocks",
    "content": "TOP008 - Use backticks for fenced code blocks\nTags: code\nAliases: use-backticks-for-fenced-code-blocks\nFixable via script: Tildes replaced with backticks\nThis rule is triggered when a fenced code block uses tildes (~) as its delimiters instead of backticks (`). The rule applies regardless of whether three or four tildes are used.\n````markdown\n~~~text\nThis fenced code block uses tildes, which will flag an error\n~~~\ntext\nYou should use backticks instead\n````\nRationale\nConsistent formatting makes it easier to understand a document.\nMarkdown lint's MD048 rule already covers this check, but does not include fix information, therefore can only be used to raise errors for manual fixing. This custom rule enforces the same style but includes fix information that can be used alongside our fix scripts.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 932,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP008.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "37e5fbc48dd93d93bb988cd1e115b90a",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP010.md",
    "source_type": "git_repo",
    "title": "TOP010 - Use lazy numbering within ordered lists",
    "content": "TOP010 - Use lazy numbering within ordered lists\nTags: ol\nAliases: lazy-numbering-for-ordered-lists\nFixable via script: Replaces prefixes with 1.\nThis rule is triggered when lazy-numbering is not used in ordered lists. Specifically we only want 1. and not other numbers.\n```markdown\n1. ONE\n2. TWO\n1. child one\n2. child two\n3. THREE\nRunning the fix npm script will fix the above example.\nONE\nTWO\nchild one\nchild two\nTHREE\n```\nRationale\nConsistent formatting makes it easier to understand a document.\nMarkdown lint's MD029 rule already covers this check, but does not include fix information, therefore can only be used to raise errors for manual fixing. This custom rule enforces the same style but includes fix information that can be used alongside our fix scripts.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 921,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP010.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5a86039194d686364c8151d09643ee2a",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP009.md",
    "source_type": "git_repo",
    "title": "TOP009: Lesson overview items sentence structure",
    "content": "TOP009: Lesson overview items sentence structure\nTags: content\nAliases: lesson-overview-items-sentence-structure\nFixable via script: Not fixable due to being context-based\nThis rule is triggered when a lesson overview item doesn't end with a period . or doesn't start with a capital letter. For example:\nmarkdown\n- Lesson overview item 1\n- Lesson overview item 2?\n- lesson overview item 3.\nTo fix this issue, make sure that each bullet point ends with a period . and starts with a capital letter, rewording if you need to fix grammar since these should not be questions.\nmarkdown\n- Lesson overview item 1.\n- Lesson overview item 2.\n- Lesson overview item 3.\nRationale\nLesson overview items should follow a consistent structure. They must tell the user what the lesson is about via brief overview statements, and must not be conveyed in the form of a question that the user is expected to be able to answer after completing the lesson.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1000,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP009.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d7fe5b6b359fd1a35643073d55edcf6",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP011.md",
    "source_type": "git_repo",
    "title": "TOP011 - Heading indentation",
    "content": "TOP011 - Heading indentation\nTags: headings, indentation\nAliases: heading-indentation\nFixable via script: Adjusts heading indentation level accordingly\nThis rule is triggered when a heading's indentation level is not correct. All headings must not be indented unless they are a heading for a note box, in which case they must match the note box's indentation level exactly.\n```markdown\nA normal heading must not be indented\n### Indenting a non-note box heading will flag a TOP011 error\n#### Regardless of heading level\n#### If the note box is not indented, the heading must not be indented\n#### 3-space-indented note box? Heading needs 3 spaces\n#### Mismatched indentation will flag a TOP011 error\n```\nRationale\nNormally, markdown headings must not be indented else parsers typically do not parse them as headings. However, The Odin Project's website's markdown converter can register indented headings, and will only register a heading as belonging to a note box if it matches its indentation level.\nTherefore, this rule overwrites the built-in MD023 rule to allow for this exception.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1403,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP011.md",
      "source_type": "git_repo"
    },
    "token_count": 230,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b31230089e831230962f6e9d830dfa20",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\docs\\TOP012.md",
    "source_type": "git_repo",
    "title": "TOP012 - Note box headings",
    "content": "TOP012 - Note box headings\nTags: headings\nAliases: note-box-headings\nFixable via script: The fix script can fix incorrect heading levels but of course cannot add missing headings.\nThis rule is triggered when a note box either does not have a heading or has a heading but it is not a level 4 (####) heading, which is required by our layout style guide.\n```markdown\nNo heading will flag a TOP012 error.\n```\n```markdown\n### Non-level 4 note box heading: Will flag a TOP012 error as it should be level 4\nNote box contents.\n```\nThese can be resolved either by adding a level 4 heading or changing the note box heading to a level 4:\n```markdown\n#### Level 4 note box heading: Correct and will not flag a TOP012 error\nNote box contents.\n```\nIf the error is about the heading level, it is fixable with our fix:* npm scripts, which will convert the heading to be at level 4. The fix:* script cannot do anything about missing headings.\nRationale\nHeadings have IDs that can be linked to. Given the nature of note boxes, enforcing headings for them allows all of them to be more easily linked, while the heading also summarizes the note's intent.\nConsistent use of heading levels for note boxes also looks better on the website, and is less confusing as note boxes are not main sections themselves, so they should not use a level 3 heading.\nThe website also uses specific CSS for when note box headings are hovered over. Having non-level 4 headings in these note boxes causes behavior inconsistent with what we expect.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1823,
      "relative_path": "git_repos\\odin-project\\markdownlint\\docs\\TOP012.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9a15ea66aea4d4faf8cac53a62f61daf",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP002_noCodeInHeadings\\TOP002_noCodeInHeadings.js",
    "source_type": "git_repo",
    "title": "TOP002_noCodeInHeadings",
    "content": "module.exports = {\n  names: [\"TOP002\", \"no-code-headings\"],\n  description: \"No inline code in headings\",\n  tags: [\"headings\"],\n  parser: \"markdownit\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP002.md\"\n  ),\n  function: function TOP002(params, onError) {\n    const headingsWithCode = params.parsers.markdownit.tokens?.filter(\n      (token, currIndex, tokenArray) =>\n        tokenArray[currIndex - 1]?.type === \"heading_open\" &&\n        token.children?.some((child) => child.type === \"code_inline\")\n    );\n\nconst codeContent = [];\n    headingsWithCode.forEach((heading) => {\n      // https://regexr.com/7uk28 to test the following regex\n      const codeMatches = heading.line.match(/`.+?`/g);\n      const codeContentDetails = codeMatches.map((codeMatch) => {\n        const index = heading.line.indexOf(codeMatch);\n\nreturn { text: codeMatch, index, lineNumber: heading.lineNumber };\n      });\n      codeContent.push(...codeContentDetails);\n    });\n\ncodeContent.forEach((content) => {\n      onError({\n        lineNumber: content.lineNumber,\n        detail: `Headings should not contain inline code.`,\n        context: content.text,\n        fixInfo: {\n          lineNumber: content.lineNumber,\n          editColumn: content.index + 1,\n          deleteCount: content.text.length,\n          insertText: content.text.replaceAll(\"`\", \"\"),\n        },\n      });\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1487,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP002_noCodeInHeadings\\TOP002_noCodeInHeadings.js",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "040090fca533d8aaecf9013a2b4c4ff6",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP001_descriptiveLinkTextLabels\\TOP001_descriptiveLinkTextLabels.js",
    "source_type": "git_repo",
    "title": "TOP001_descriptiveLinkTextLabels",
    "content": "const BLACKLISTED_LINK_TEXT = [\n  \"video\",\n  \"videos\",\n  \"a video\",\n  \"playlist\",\n  \"a playlist\",\n  \"article\",\n  \"articles\",\n  \"an article\",\n  \"doc\",\n  \"docs\",\n  \"the docs\",\n  \"their docs\",\n  \"documentation\",\n  \"the documentation\",\n  \"their documentation\",\n  \"resource\",\n  \"library\",\n  \"page\",\n  \"homepage\",\n  \"the homepage\",\n  \"their homepage\",\n];\n\nmodule.exports = {\n  names: [\"TOP001\", \"descriptive-link-text-labels\"],\n  description: \"Links must have descriptive text labels\",\n  tags: [\"accessibility\", \"links\"],\n  parser: \"markdownit\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP001.md\"\n  ),\n  function: function TOP001(params, onError) {\n    const tokensWithLinks = params.parsers.markdownit.tokens?.filter((token) =>\n      token.children?.some((child) => child.type === \"link_open\")\n    );\n    const childrenOfTokensWithLinks = tokensWithLinks\n      .map((tokenWithLink) => tokenWithLink.children)\n      .flat();\n    const linkOpenTokenIndices = childrenOfTokensWithLinks\n      .filter((token) => token.type === \"link_open\")\n      .map((linkToken) => childrenOfTokensWithLinks.indexOf(linkToken));\n\nlinkOpenTokenIndices.forEach((linkOpenIndex) => {\n      const tokensAfterLinkOpen = childrenOfTokensWithLinks.slice(linkOpenIndex);\n      const linkContentTokens = tokensAfterLinkOpen.slice(\n        1,\n        tokensAfterLinkOpen.findIndex((token) => token.type === \"link_close\")\n      );\n      const linkContentString = linkContentTokens\n        .map((token) => (token.type === \"code_inline\" ? `\\`${token.content}\\`` : token.content))\n        .join(\"\");\n\n// https://regexr.com/7sdtj to test the following regex against the link text itself\n      const containsThisOrHere = /.*?(?<!(\\w|`))(this|here)(?!(\\w|`)).*?/i.test(linkContentString);\n      const isBlacklistedLinkText = BLACKLISTED_LINK_TEXT.includes(linkContentString.toLowerCase());",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2639,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP001_descriptiveLinkTextLabels\\TOP001_descriptiveLinkTextLabels.js",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a79bf5839749e88708c88a71efd0a89e",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP001_descriptiveLinkTextLabels\\TOP001_descriptiveLinkTextLabels.js",
    "source_type": "git_repo",
    "title": "TOP001_descriptiveLinkTextLabels",
    "content": "child.type === \"link_open\") ); const childrenOfTokensWithLinks = tokensWithLinks .map((tokenWithLink) => tokenWithLink.children) .flat(); const linkOpenTokenIndices = childrenOfTokensWithLinks .filter((token) => token.type === \"link_open\") .map((linkToken) => childrenOfTokensWithLinks.indexOf(linkToken)); linkOpenTokenIndices.forEach((linkOpenIndex) => { const tokensAfterLinkOpen = childrenOfTokensWithLinks.slice(linkOpenIndex); const linkContentTokens = tokensAfterLinkOpen.slice( 1, tokensAfterLinkOpen.findIndex((token) => token.type === \"link_close\") ); const linkContentString = linkContentTokens .map((token) => (token.type === \"code_inline\" ? `\\`${token.content}\\`` : token.content)) .join(\"\"); // https://regexr.com/7sdtj to test the following regex against the link text itself const containsThisOrHere = /.*?(?<!(\\w|`))(this|here)(?!(\\w|`)).*?/i.test(linkContentString); const isBlacklistedLinkText = BLACKLISTED_LINK_TEXT.includes(linkContentString.toLowerCase());\n\nif (containsThisOrHere || isBlacklistedLinkText) {\n        const linkUrl = tokensAfterLinkOpen[0].attrs[0][1];\n        onError({\n          lineNumber: tokensAfterLinkOpen[0].lineNumber,\n          detail: containsThisOrHere\n            ? `Expected text to not include the words \"this\" or \"here\". Use a more descriptive text that clearly conveys the purpose or content of the link.`\n            : `\"${linkContentString}\" is not sufficiently descriptive by itself. Use a more descriptive label that clearly conveys the purpose or content of the link.`,\n          context: `[${linkContentString}](${linkUrl})`,\n        });\n      }\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2639,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP001_descriptiveLinkTextLabels\\TOP001_descriptiveLinkTextLabels.js",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5f29e0f0262988f4eb17f016580e4334",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\TOP004_lessonHeadings.js",
    "source_type": "git_repo",
    "title": "TOP004_lessonHeadings",
    "content": "// Customized version of https://github.com/DavidAnson/markdownlint/blob/main/lib/md043.js\nconst { basename } = require(\"node:path\");\n\nconst HEADINGS = {\n  lesson: [\n    \"### Introduction\",\n    \"### Lesson overview\",\n    \"*\",\n    \"### Assignment\",\n    \"#### *\",\n    \"### Knowledge check\",\n    \"### Additional resources\",\n  ],\n  project: [\"### Introduction\", \"*\", \"### Assignment\", \"*\"],\n};\n\nfunction isProject(filePath) {\n  const fileName = basename(filePath);\n  // don't include names like \"projections.md\"\n  return fileName.startsWith(\"project_\") || fileName.startsWith(\"project-\");\n}\nfunction addError(onError, lineNumber, detail, context, range, fixInfo) {\n  onError({\n    lineNumber,\n    detail,\n    context,\n    range,\n    fixInfo,\n  });\n}\nfunction addErrorContext(onError, lineNumber, context) {\n  addError(\n    onError,\n    lineNumber,\n    `Missing heading (case sensitive): ${context}`,\n    context\n  );\n}\nfunction addErrorDetailIf(\n  onError,\n  lineNumber,\n  expected,\n  actual,\n  detail,\n  context,\n  range,\n  fixInfo\n) {\n  if (expected !== actual) {\n    addError(\n      onError,\n      lineNumber,\n      \"Expected: \" +\n        expected +\n        \"; Actual: \" +\n        actual +\n        (detail ? \"; \" + detail : \"\"),\n      context,\n      range,\n      fixInfo\n    );\n  }\n}\nfunction forEachHeading(params, handler) {\n  let heading = null;\n  for (const token of params.parsers.markdownit.tokens) {\n    if (token.type === \"heading_open\") {\n      heading = token;\n    } else if (token.type === \"heading_close\") {\n      heading = null;\n    } else if (token.type === \"inline\" && heading) {\n      handler(heading, token.content, token);\n    }\n  }\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 4539,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\TOP004_lessonHeadings.js",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "eb7d63280e6773ebbf6e31cfbe4c283d",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\TOP004_lessonHeadings.js",
    "source_type": "git_repo",
    "title": "TOP004_lessonHeadings",
    "content": "{ addError( onError, lineNumber, \"Expected: \" + expected + \"; Actual: \" + actual + (detail ? \"; \" + detail : \"\"), context, range, fixInfo ); } } function forEachHeading(params, handler) { let heading = null; for (const token of params.parsers.markdownit.tokens) { if (token.type === \"heading_open\") { heading = token; } else if (token.type === \"heading_close\") { heading = null; } else if (token.type === \"inline\" && heading) { handler(heading, token.content, token); } } }\n\nmodule.exports = {\n  names: [\"TOP004\", \"lesson-headings\"],\n  description: \"Required heading structure\",\n  tags: [\"headings\"],\n  parser: \"markdownit\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP004.md\"\n  ),\n  function: function TOP004(params, onError) {\n    const requiredHeadings = isProject(params.name)\n      ? HEADINGS.project\n      : HEADINGS.lesson;\n    const levels = {};\n    for (const level of [1, 2, 3, 4, 5, 6]) {\n      levels[\"h\" + level] = \"######\".substr(-level);\n    }\n    let i = 0;\n    let matchAny = false;\n    let headingToMatch = undefined;\n    let hasError = false;\n    let anyHeadings = false;\n    const getExpected = () => requiredHeadings[i++] || \"[None]\";\n    // https://regexr.com/7rf1o to test the following regex:\n    const wildcardRegex = new RegExp(/^(#*\\s)?\\*$/);\n\nforEachHeading(params, (heading, content) => {\n      if (!hasError) {\n        anyHeadings = true;\n        const actual = levels[heading.tag] + \" \" + content;\n        const expected = getExpected();\n\nif (wildcardRegex.test(expected)) {\n          const nextExpected = getExpected();\n          if (nextExpected !== actual) {\n            if (expected.startsWith(\"#\")) {\n              headingToMatch = `h${\n                expected.slice(0, expected.indexOf(\" \")).length\n              }`;",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 4539,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\TOP004_lessonHeadings.js",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "61b446a75efe47d55e73d48f09bf8f12",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\TOP004_lessonHeadings.js",
    "source_type": "git_repo",
    "title": "TOP004_lessonHeadings",
    "content": "= undefined; let hasError = false; let anyHeadings = false; const getExpected = () => requiredHeadings[i++] || \"[None]\"; // https://regexr.com/7rf1o to test the following regex: const wildcardRegex = new RegExp(/^(#*\\s)?\\*$/); forEachHeading(params, (heading, content) => { if (!hasError) { anyHeadings = true; const actual = levels[heading.tag] + \" \" + content; const expected = getExpected(); if (wildcardRegex.test(expected)) { const nextExpected = getExpected(); if (nextExpected !== actual) { if (expected.startsWith(\"#\")) { headingToMatch = `h${ expected.slice(0, expected.indexOf(\" \")).length }`;\n\naddErrorDetailIf(\n                onError,\n                heading.lineNumber,\n                `${headingToMatch} heading`,\n                `${heading.tag} heading`\n              );\n              hasError = headingToMatch !== heading.tag;\n            } else {\n              matchAny = true;\n            }\n            i--;\n          }\n        } else if (expected === actual) {\n          matchAny = false;\n          headingToMatch = undefined;\n        } else if (matchAny) {\n          i--;\n        } else if (headingToMatch) {\n          if (headingToMatch !== heading.tag) {\n            addError(\n              onError,\n              heading.lineNumber,\n              `Expected: ${headingToMatch} heading; Actual: ${heading.tag} heading`\n            );\n            hasError = true;\n          } else {\n            i--;\n          }\n        } else {\n          addErrorDetailIf(onError, heading.lineNumber, expected, actual);\n          hasError = true;\n        }\n      }\n    });\n\nconst extraHeadings = requiredHeadings.length - i;\n    if (\n      !hasError &&\n      (extraHeadings > 1 ||\n        (extraHeadings === 1 && !wildcardRegex.test(requiredHeadings[i]))) &&\n      (anyHeadings ||\n        !requiredHeadings.every((heading) => wildcardRegex.test(heading)))\n    ) {\n      addErrorContext(onError, params.lines.length, requiredHeadings[i]);\n    }\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 4539,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\TOP004_lessonHeadings.js",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "715de02c65b84b143e49856241ce649c",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP005_blanksAroundMultilineHtmlTags\\TOP005_blanksAroundMultilineHtmlTags.js",
    "source_type": "git_repo",
    "title": "TOP005_blanksAroundMultilineHtmlTags",
    "content": "module.exports = {\n  names: [\"TOP005\", \"blanks-around-multiline-html-tags\"],\n  description: \"Multiline HTML tags should be surrounded by blank lines or code block delimiters\",\n  tags: [\"html\", \"blank_lines\"],\n  parser: \"markdownit\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP005.md\"\n  ),\n  function: function TOP005(params, onError) {\n    /**\n     * HTML code in HTML/JSX code blocks should not be flagged.\n     * We only want to flag HTML tags we use for actual markup,\n     * or md code block examples of such.\n     */\n    const IGNORED_FENCE_TYPES = [\"html\", \"jsx\", \"erb\", \"ejs\", \"ruby\", \"javascript\"];\n    const ignoredFencesLineRanges = params.parsers.markdownit.tokens\n      .filter((token) => {\n        return token.type === \"fence\" && IGNORED_FENCE_TYPES.includes(token.info);\n      })\n      .map((token) => token.map);\n\nconst isWithinIgnoredFence = (lineNumber) => {\n      return ignoredFencesLineRanges.some(\n        (range) => range[0] < lineNumber && lineNumber < range[1]\n      );\n    };\n\nconst isolatedHtmlTagsLineNumbers = params.lines.reduce(\n      (lineNumbers, currentLineText, currentLineNumber) => {\n        // https://regexr.com/7u896 to test the following regex:\n        if (/^<(?!!)\\/?[^>]*>$/.test(currentLineText.trim())) {\n          lineNumbers.push(currentLineNumber);\n        }\n        return lineNumbers;\n      },\n      []\n    );\n\nisolatedHtmlTagsLineNumbers.forEach((lineNumber, i) => {\n      if (isWithinIgnoredFence(lineNumber)) {\n        return;\n      }\n\n// https://regexr.com/7u89c to test the following regex:\n      const blankCodeBlockRegex = /^$|^`{3,4}.*$/;\n      const lineBefore = params.lines[lineNumber - 1] ?? \"\";\n      const lineBeforeIsValid = blankCodeBlockRegex.test(lineBefore);\n      const lineAfter = params.lines[lineNumber + 1] ?? \"\";\n      const lineAfterIsValid = blankCodeBlockRegex.test(lineAfter);\n\nif (lineBeforeIsValid && lineAfterIsValid) {\n        return;\n      }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3392,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP005_blanksAroundMultilineHtmlTags\\TOP005_blanksAroundMultilineHtmlTags.js",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "50ce5bbc841142f53d748555c7e7b6e4",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP005_blanksAroundMultilineHtmlTags\\TOP005_blanksAroundMultilineHtmlTags.js",
    "source_type": "git_repo",
    "title": "TOP005_blanksAroundMultilineHtmlTags",
    "content": "isolatedHtmlTagsLineNumbers = params.lines.reduce( (lineNumbers, currentLineText, currentLineNumber) => { // https://regexr.com/7u896 to test the following regex: if (/^<(?!!)\\/?[^>]*>$/.test(currentLineText.trim())) { lineNumbers.push(currentLineNumber); } return lineNumbers; }, [] ); isolatedHtmlTagsLineNumbers.forEach((lineNumber, i) => { if (isWithinIgnoredFence(lineNumber)) { return; } // https://regexr.com/7u89c to test the following regex: const blankCodeBlockRegex = /^$|^`{3,4}.*$/; const lineBefore = params.lines[lineNumber - 1] ?? \"\"; const lineBeforeIsValid = blankCodeBlockRegex.test(lineBefore); const lineAfter = params.lines[lineNumber + 1] ?? \"\"; const lineAfterIsValid = blankCodeBlockRegex.test(lineAfter); if (lineBeforeIsValid && lineAfterIsValid) { return; }\n\nconst lineAfterIsTheNextHtmlTag = lineNumber + 1 === isolatedHtmlTagsLineNumbers[i + 1];\n      let replacementText = params.lines[lineNumber];\n\n// .trim() !== \"\" prevents interference with MD009 whitespace fixer\n      if (!lineBeforeIsValid && lineBefore.trim() !== \"\") {\n        replacementText = `\\n${replacementText}`;\n      }\n      if (!lineAfterIsValid && !lineAfterIsTheNextHtmlTag && lineAfter.trim() !== \"\") {\n        replacementText = `${replacementText}\\n`;\n      }\n\nlet errorMessage = \"Expected a blank line or a code block delimiter (```)\";\n\nif (!lineBeforeIsValid) {\n        errorMessage = `${errorMessage} before the tag`;\n      }\n      if (!lineBeforeIsValid && !lineAfterIsValid) {\n        errorMessage = `${errorMessage} and`;\n      }\n      if (!lineAfterIsValid) {\n        errorMessage = `${errorMessage} after the tag`;\n      }\n\n/**\n       * lineNumber is params.lines index (0-indexed).\n       * +1 required as file line numbers are 1-indexed.\n       */\n      onError({\n        lineNumber: lineNumber + 1,      \n        detail: errorMessage,\n        context: params.lines[lineNumber],\n        fixInfo: {\n          deleteCount: params.lines[lineNumber].length,\n          insertText: replacementText,\n        },\n      });\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 3392,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP005_blanksAroundMultilineHtmlTags\\TOP005_blanksAroundMultilineHtmlTags.js",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ffccf5ee5c6c78cc32769235aedabf0f",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
    "source_type": "git_repo",
    "title": "TOP003_defaultSectionContent",
    "content": "const sectionsWithDefaultContent = {\n  lessonOverview: \"lesson overview\",\n  assignment: \"assignment\",\n  knowledgeCheck: \"knowledge check\",\n  additionalResources: \"additional resources\",\n};\nconst listSectionsDefaultContent = {\n  [sectionsWithDefaultContent.lessonOverview]:\n    \"This section contains a general overview of topics that you will learn in this lesson.\",\n  [sectionsWithDefaultContent.knowledgeCheck]:\n    \"The following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\",\n  [sectionsWithDefaultContent.additionalResources]:\n    \"This section contains helpful links to related content. It isn't required, so consider it supplemental.\",\n};\n\nfunction createErrorObject(lineNumber, detail, fixInfo = {}) {\n  return {\n    lineNumber,\n    detail,\n    fixInfo,\n  };\n}\n\nfunction getListSectionErrors(sectionTokens, section) {\n  const WHOLE_LINE = -1;\n  const listSectionErrors = [];\n  const listItemsName = `${section}${section.endsWith(\"s\") ? \"\" : \"s\"}`;\n  const tokensAfterHeading = sectionTokens.slice(\n    sectionTokens.findIndex((token) => token.type === \"heading_close\") + 1\n  );\n\nconst listItemTokens = tokensAfterHeading.filter(\n    (token) => token.type === \"list_item_open\"\n  );\n  const nestedListItemTokens = listItemTokens.filter(\n    (token) => token.level > 1\n  );\n  nestedListItemTokens.forEach((nestedListItemToken) => {\n    listSectionErrors.push(\n      // We're not applying a fix because we can't always know whether just un-nesting the list\n      // will resolve the issue. There may be entire list items that need to be removed as well.\n      createErrorObject(\n        nestedListItemToken.lineNumber,\n        `The ${section} section must not contain nested lists.`\n      )\n    );\n  });",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9667,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "3257c73a86af6b7986a014c3db886dd3",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
    "source_type": "git_repo",
    "title": "TOP003_defaultSectionContent",
    "content": "=== \"heading_close\") + 1 ); const listItemTokens = tokensAfterHeading.filter( (token) => token.type === \"list_item_open\" ); const nestedListItemTokens = listItemTokens.filter( (token) => token.level > 1 ); nestedListItemTokens.forEach((nestedListItemToken) => { listSectionErrors.push( // We're not applying a fix because we can't always know whether just un-nesting the list // will resolve the issue. There may be entire list items that need to be removed as well. createErrorObject( nestedListItemToken.lineNumber, `The ${section} section must not contain nested lists.` ) ); });\n\n// https://regexr.com/80hjf to test following regex. Note that we don't test nested lists due to\n  // the fact that whitespaces won't precede the token marker, e.g. \"1.\", in the token object\n  const orderedListItemRegex = /^\\d+\\.\\s*/;\n  const orderedListItemTokens = listItemTokens.filter((token) =>\n    orderedListItemRegex.test(token.line)\n  );\n  orderedListItemTokens.forEach((orderedListItemToken) => {\n    listSectionErrors.push(\n      createErrorObject(\n        orderedListItemToken.lineNumber,\n        `The ${section} section must not include any ordered lists.`,\n        {\n          lineNumber: orderedListItemToken.lineNumber,\n          deleteCount:\n            orderedListItemToken.line.match(orderedListItemRegex)[0].length,\n          insertText: \"- \",\n        }\n      )\n    );\n  });\n\nconst defaultContentOpenTokenIndex = tokensAfterHeading.findIndex(\n    (token) => token.line === listSectionsDefaultContent[section]\n  );",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9667,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "8b76db2f5f9a7fcdc783730c2f28d9ba",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
    "source_type": "git_repo",
    "title": "TOP003_defaultSectionContent",
    "content": "test following regex. Note that we don't test nested lists due to // the fact that whitespaces won't precede the token marker, e.g. \"1.\", in the token object const orderedListItemRegex = /^\\d+\\.\\s*/; const orderedListItemTokens = listItemTokens.filter((token) => orderedListItemRegex.test(token.line) ); orderedListItemTokens.forEach((orderedListItemToken) => { listSectionErrors.push( createErrorObject( orderedListItemToken.lineNumber, `The ${section} section must not include any ordered lists.`, { lineNumber: orderedListItemToken.lineNumber, deleteCount: orderedListItemToken.line.match(orderedListItemRegex)[0].length, insertText: \"- \", } ) ); }); const defaultContentOpenTokenIndex = tokensAfterHeading.findIndex( (token) => token.line === listSectionsDefaultContent[section] );\n\nif (defaultContentOpenTokenIndex > 0) {\n    const defaultContentToken =\n      tokensAfterHeading[defaultContentOpenTokenIndex];\n    listSectionErrors.push(\n      createErrorObject(\n        defaultContentToken.lineNumber,\n        `Expected default section content to come immediately after the ${section} heading.`\n      )\n    );\n  }\n  if (defaultContentOpenTokenIndex === -1) {\n    const sectionStartsWithList = tokensAfterHeading[0].line.startsWith(\"- \");\n    const errorDetail = sectionStartsWithList\n      ? `Expect default content to precede unordered list of ${listItemsName}: \"${listSectionsDefaultContent[section]}\"`\n      : `Expected: \"${listSectionsDefaultContent[section]}\"; Actual: \"${tokensAfterHeading[0].line}\",`;\n    let replacementText = listSectionsDefaultContent[section];\n\nif (sectionStartsWithList) {\n      replacementText += `\\n\\n${tokensAfterHeading[0].line}`;\n    }\n\nlistSectionErrors.push(\n      createErrorObject(tokensAfterHeading[0].lineNumber, errorDetail, {\n        lineNumber: tokensAfterHeading[0].lineNumber,\n        deleteCount: tokensAfterHeading[0].line.length,\n        insertText: replacementText,\n      })\n    );\n  }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9667,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "34c71db7e46af9d06cd0eb174d1d465f",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
    "source_type": "git_repo",
    "title": "TOP003_defaultSectionContent",
    "content": "{ const defaultContentToken = tokensAfterHeading[defaultContentOpenTokenIndex]; listSectionErrors.push( createErrorObject( defaultContentToken.lineNumber, `Expected default section content to come immediately after the ${section} heading.` ) ); } if (defaultContentOpenTokenIndex === -1) { const sectionStartsWithList = tokensAfterHeading[0].line.startsWith(\"- \"); const errorDetail = sectionStartsWithList ? `Expect default content to precede unordered list of ${listItemsName}: \"${listSectionsDefaultContent[section]}\"` : `Expected: \"${listSectionsDefaultContent[section]}\"; Actual: \"${tokensAfterHeading[0].line}\",`; let replacementText = listSectionsDefaultContent[section]; if (sectionStartsWithList) { replacementText += `\\n\\n${tokensAfterHeading[0].line}`; } listSectionErrors.push( createErrorObject(tokensAfterHeading[0].lineNumber, errorDetail, { lineNumber: tokensAfterHeading[0].lineNumber, deleteCount: tokensAfterHeading[0].line.length, insertText: replacementText, }) ); }\n\nconst tokensAfterFirstContent = tokensAfterHeading.slice(\n    tokensAfterHeading.findIndex(\n      (token, _index, arr) =>\n        token.type === arr[0].type.replace(\"_open\", \"_close\")\n    ) + 1\n  );\n  const bulletListOpenTokenIndex = sectionTokens.findIndex(\n    (token) => token.type === \"bullet_list_open\"\n  );\n  if (\n    (defaultContentOpenTokenIndex === 0 && !tokensAfterFirstContent.length) ||\n    bulletListOpenTokenIndex === -1\n  ) {\n    const isAdditionalResources =\n      section === sectionsWithDefaultContent.additionalResources;\n    const tokenLineNumber = (\n      tokensAfterFirstContent[0] || tokensAfterHeading[0]\n    ).lineNumber;\n    const errorDetail = isAdditionalResources\n      ? `Expected section to include unordered list item: \"It looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.\"`\n      : `Must include an unordered list of ${listItemsName} in the \"${section}\" section`;\n    listSectionErrors.push(\n      createErrorObject(\n        tokenLineNumber,\n        errorDetail,\n        isAdditionalResources\n          ? {\n              lineNumber: !tokensAfterFirstContent.length\n                ? tokenLineNumber + 1\n                : tokenLineNumber,\n              insertText:\n                \"\\n- It looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.\",\n            }\n          : {}\n      )\n    );\n  }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9667,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
      "source_type": "git_repo"
    },
    "token_count": 536,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "e4a7884d0153908d0e4e734d8ddba460",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
    "source_type": "git_repo",
    "title": "TOP003_defaultSectionContent",
    "content": "looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.\"` : `Must include an unordered list of ${listItemsName} in the \"${section}\" section`; listSectionErrors.push( createErrorObject( tokenLineNumber, errorDetail, isAdditionalResources ? { lineNumber: !tokensAfterFirstContent.length ? tokenLineNumber + 1 : tokenLineNumber, insertText: \"\\n- It looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.\", } : {} ) ); }\n\nif (\n    defaultContentOpenTokenIndex === 0 &&\n    tokensAfterFirstContent.length &&\n    !tokensAfterFirstContent[0].type.endsWith(\"_list_open\")\n  ) {\n    listSectionErrors.push(\n      createErrorObject(\n        tokensAfterFirstContent[0].lineNumber,\n        `Only an unordered list of ${listItemsName} can follow the default content.`,\n        {\n          lineNumber: tokensAfterFirstContent[0].lineNumber,\n          deleteCount: WHOLE_LINE,\n        }\n      )\n    );\n  }\n\nconst lastBulletListCloseIndex = sectionTokens.findLastIndex(\n    (token) => token.type === \"bullet_list_close\"\n  );\n\nif (\n    bulletListOpenTokenIndex !== -1 &&\n    lastBulletListCloseIndex !== sectionTokens.length - 1\n  ) {\n    const tokensAfterBulletListClose = sectionTokens.slice(\n      lastBulletListCloseIndex + 1\n    );\n\nlistSectionErrors.push(\n      createErrorObject(\n        tokensAfterBulletListClose[0].lineNumber,\n        `There should be no additional content after the unordered list of ${listItemsName}`,\n        {\n          lineNumber: tokensAfterBulletListClose[0].lineNumber,\n          deleteCount: WHOLE_LINE,\n        }\n      )\n    );\n  }\n\nreturn listSectionErrors;\n}",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9667,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "14cf32f973867cf35b1f958a4a9ad080",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
    "source_type": "git_repo",
    "title": "TOP003_defaultSectionContent",
    "content": "unordered list of ${listItemsName} can follow the default content.`, { lineNumber: tokensAfterFirstContent[0].lineNumber, deleteCount: WHOLE_LINE, } ) ); } const lastBulletListCloseIndex = sectionTokens.findLastIndex( (token) => token.type === \"bullet_list_close\" ); if ( bulletListOpenTokenIndex !== -1 && lastBulletListCloseIndex !== sectionTokens.length - 1 ) { const tokensAfterBulletListClose = sectionTokens.slice( lastBulletListCloseIndex + 1 ); listSectionErrors.push( createErrorObject( tokensAfterBulletListClose[0].lineNumber, `There should be no additional content after the unordered list of ${listItemsName}`, { lineNumber: tokensAfterBulletListClose[0].lineNumber, deleteCount: WHOLE_LINE, } ) ); } return listSectionErrors; }\n\nfunction getAssignmentSectionErrors(sectionTokens) {\n  const assignmentErrors = [];\n  const divBlockTokens = sectionTokens.filter(\n    (token) => token.type === \"html_block\" && token.content.startsWith(\"<div\")\n  );\n  const hasAssignmentDiv = divBlockTokens.some(\n    (token) =>\n      token.content.includes(`class=\"lesson-content__panel\"`) &&\n      token.content.includes(`markdown=\"1\"`)\n  );\n  if (!divBlockTokens || !hasAssignmentDiv) {\n    assignmentErrors.push(\n      createErrorObject(\n        sectionTokens[0].lineNumber,\n        `Assignment sections must include an HTML div element with class=\"lesson-content__panel\" and markdown=\"1\" attributes`\n      )\n    );\n  }\n\nreturn assignmentErrors;\n}\n\nmodule.exports = {\n  names: [\"TOP003\", \"default-section-content\"],\n  description: \"Sections have default content\",\n  tags: [\"content\"],\n  parser: \"markdownit\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP003.md\"\n  ),\n  function: function TOP003(params, onError) {\n    const { tokens } = params.parsers.markdownit;\n    const headingTokenIndices = tokens\n      .filter((token) => token.type === \"heading_open\")\n      .map((headingToken) => tokens.indexOf(headingToken));\n    const totalErrors = [];",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9667,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "dc5ca2cba540feea5847e47eba376994",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
    "source_type": "git_repo",
    "title": "TOP003_defaultSectionContent",
    "content": "token.content.includes(`markdown=\"1\"`) ); if (!divBlockTokens || !hasAssignmentDiv) { assignmentErrors.push( createErrorObject( sectionTokens[0].lineNumber, `Assignment sections must include an HTML div element with class=\"lesson-content__panel\" and markdown=\"1\" attributes` ) ); } return assignmentErrors; } module.exports = { names: [\"TOP003\", \"default-section-content\"], description: \"Sections have default content\", tags: [\"content\"], parser: \"markdownit\", information: new URL( \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP003.md\" ), function: function TOP003(params, onError) { const { tokens } = params.parsers.markdownit; const headingTokenIndices = tokens .filter((token) => token.type === \"heading_open\") .map((headingToken) => tokens.indexOf(headingToken)); const totalErrors = [];\n\nheadingTokenIndices.forEach(\n      (tokenIndexValue, arrIndex, tokenIndicesArr) => {\n        const headingContent = tokens[tokenIndexValue].line\n          .replace(/\\#+\\s/g, \"\")\n          .toLowerCase();\n        if (\n          !Object.values(sectionsWithDefaultContent).includes(headingContent)\n        ) {\n          return;\n        }\n\nconst tokensBetweenHeadings = tokens.slice(\n          tokenIndexValue,\n          tokenIndicesArr[arrIndex + 1]\n        );\n        const isSectionEmpty =\n          tokensBetweenHeadings.at(-1).type === \"heading_close\";\n\nif (isSectionEmpty) {\n          totalErrors.push(\n            createErrorObject(\n              tokensBetweenHeadings[0].lineNumber,\n              `The ${headingContent} section cannot be empty`,\n            )\n          );\n        } else {\n          switch (headingContent) {\n            case sectionsWithDefaultContent.lessonOverview:\n            case sectionsWithDefaultContent.knowledgeCheck:\n            case sectionsWithDefaultContent.additionalResources:\n              totalErrors.push(\n                ...getListSectionErrors(tokensBetweenHeadings, headingContent)\n              );\n              break;\n            case sectionsWithDefaultContent.assignment:\n              totalErrors.push(\n                ...getAssignmentSectionErrors(tokensBetweenHeadings)\n              );\n              break;\n          }\n        }\n      }\n    );\n\ntotalErrors.forEach((error) => {\n      onError(error);\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 9667,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\TOP003_defaultSectionContent.js",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "9427f58dd3b5e7364e020ba049d9330f",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP006_fullFencedCodeLanguage\\TOP006_fullFencedCodeLanguage.js",
    "source_type": "git_repo",
    "title": "TOP006_fullFencedCodeLanguage",
    "content": "const LANGUAGES_WITH_ABBREVIATIONS = new Map()\n  .set(\"js\", \"javascript\")\n  .set(\"rb\", \"ruby\")\n  .set(\"txt\", \"text\")\n  .set(\"md\", \"markdown\")\n  .set(\"sh\", \"bash\")\n  .set(\"yml\", \"yaml\");\n\nmodule.exports = {\n  names: [\"TOP006\", \"full-fenced-code-language\"],\n  description:\n    \"Fenced code blocks must use the full name for a language if both full and abbreviated options are valid.\",\n  tags: [\"code\", \"language\"],\n  parser: \"markdownit\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP006.md\"\n  ),\n  function: function TOP006(params, onError) {\n    const fencesWithAbbreviatedName = params.lines.reduce((fences, currentLine, index) => {\n      // https://regexr.com/7v119 to test the following regex:\n      const fenceWithLanguageRegex = /^[`~]{3,4}[^`~]+$/;\n      if (!fenceWithLanguageRegex.test(currentLine.trim())) {\n        return fences;\n      }\n\nconst fenceDelimiter = currentLine.trim()[0];\n      const delimiterEndColumn = currentLine.lastIndexOf(fenceDelimiter) + 1;\n      const language = currentLine.substring(delimiterEndColumn);\n\nif (LANGUAGES_WITH_ABBREVIATIONS.has(language)) {\n        fences.push({\n          text: currentLine,\n          languageStartingColumn: delimiterEndColumn + 1,\n          abbreviatedName: language,\n          fullName: LANGUAGES_WITH_ABBREVIATIONS.get(language),\n          lineNumber: index + 1,\n        });\n      }\n      return fences;\n    }, []);\n\nfencesWithAbbreviatedName.forEach((fence) => {\n      onError({\n        lineNumber: fence.lineNumber,\n        detail: `Expected: ${fence.fullName}; Actual: ${fence.abbreviatedName} `,\n        context: fence.text,\n        fixInfo: {\n          editColumn: fence.languageStartingColumn,\n          deleteCount: fence.abbreviatedName.length,\n          insertText: fence.fullName,\n        },\n      });\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1929,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP006_fullFencedCodeLanguage\\TOP006_fullFencedCodeLanguage.js",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b0f0037f5c270043a73d6dd6939e1dba",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP007_useMarkdownLinks\\TOP007_useMarkdownLinks.js",
    "source_type": "git_repo",
    "title": "TOP007_useMarkdownLinks",
    "content": "function extractHref(link) {\n  // https://regexr.com/7v3ci to test this regex\n  return link.match(/(?<=href=(\"|'))[^\"']+/)?.[0];\n}\n\nfunction extractLinkText(link) {\n  const textStart = link.indexOf(\">\") + 1;\n  const textEnd = link.lastIndexOf(\"<\");\n  return link.substring(textStart, textEnd);\n}\n\nmodule.exports = {\n  names: [\"TOP007\", \"use-markdown-links\"],\n  description:\n    \"Links used to navigate to external content or other landmarks in the page should use markdown links instead of HTML anchor tags.\",\n  tags: [\"links\", \"html\"],\n  parser: \"markdownit\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP007.md\"\n  ),\n  function: function TOP007(params, onError) {\n    const fencesLineRanges = params.parsers.markdownit.tokens\n      .filter((token) => token.type === \"fence\")\n      .map((token) => token.map);\n\nconst codepenLineRanges = params.lines.reduce((lineRanges, currentLine, index) => {\n      const lineNumber = index + 1;\n      const isCodepenOpeningTag = currentLine.includes('class=\"codepen\"');\n      const isCodepenClosingTag =\n        currentLine.trim().startsWith(\"</p>\") && lineRanges.at(-1)?.length < 2;\n\nif (isCodepenOpeningTag) {\n        lineRanges.push([lineNumber]);\n      } else if (isCodepenClosingTag) {\n        lineRanges.at(-1).push(lineNumber);\n      }\n\nreturn lineRanges;\n    }, []);\n\nconst isWithinIgnoredLineRange = (lineNumber) => {\n      return [...fencesLineRanges, ...codepenLineRanges].some(\n        (range) => range[0] < lineNumber && lineNumber < range[1]\n      );\n    };\n\nconst anchorsToFlag = params.lines.reduce((anchors, currentLine, index) => {\n      if (\n        isWithinIgnoredLineRange(index) ||\n        !currentLine.includes(\"<a \") ||\n        !currentLine.includes(\"</a>\")\n      ) {\n        return anchors;\n      }",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2971,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP007_useMarkdownLinks\\TOP007_useMarkdownLinks.js",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c89f2304eedff4e1b06bd293b4cfdc3b",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP007_useMarkdownLinks\\TOP007_useMarkdownLinks.js",
    "source_type": "git_repo",
    "title": "TOP007_useMarkdownLinks",
    "content": "=> { const lineNumber = index + 1; const isCodepenOpeningTag = currentLine.includes('class=\"codepen\"'); const isCodepenClosingTag = currentLine.trim().startsWith(\"</p>\") && lineRanges.at(-1)?.length < 2; if (isCodepenOpeningTag) { lineRanges.push([lineNumber]); } else if (isCodepenClosingTag) { lineRanges.at(-1).push(lineNumber); } return lineRanges; }, []); const isWithinIgnoredLineRange = (lineNumber) => { return [...fencesLineRanges, ...codepenLineRanges].some( (range) => range[0] < lineNumber && lineNumber < range[1] ); }; const anchorsToFlag = params.lines.reduce((anchors, currentLine, index) => { if ( isWithinIgnoredLineRange(index) || !currentLine.includes(\"<a \") || !currentLine.includes(\"</a>\") ) { return anchors; }\n\n// https://regexr.com/7v3bb to test this regex\n      const anchorsWithHrefRegex = /(?<!`)<a\\s[^>]*href=[^>]+>.+?<\\/a>(?!`)/g;\n      const anchorsInCurrentLine = currentLine.match(anchorsWithHrefRegex);\n\nanchorsInCurrentLine?.forEach((anchor) => {\n        anchors.push({\n          original: anchor,\n          href: extractHref(anchor),\n          text: extractLinkText(anchor),\n          length: anchor.length,\n          lineNumber: index + 1,\n          columnNumber: currentLine.indexOf(anchor) + 1,\n        });\n      });\n\nreturn anchors;\n    }, []);\n\nanchorsToFlag.forEach((anchor) => {\n      const replacementText = `[${anchor.text}](${anchor.href})`;\n\nonError({\n        lineNumber: anchor.lineNumber,\n        detail: `\\n  Expected: \"${replacementText}\"\\n  Actual: \"${anchor.original}\"\\n`,\n        fixInfo: {\n          lineNumber: anchor.lineNumber,\n          editColumn: anchor.columnNumber,\n          deleteCount: anchor.length,\n          insertText: replacementText,\n        },\n      });\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2971,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP007_useMarkdownLinks\\TOP007_useMarkdownLinks.js",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "efcd58d92c0d1ac58c1367e2506ea5d0",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP008_useBackticksForFencedCodeBlocks\\TOP008_useBackticksForFencedCodeBlocks.js",
    "source_type": "git_repo",
    "title": "TOP008_useBackticksForFencedCodeBlocks",
    "content": "module.exports = {\n  names: [\"TOP008\", \"use-backticks-for-fenced-code-blocks\"],\n  description: \"Fenced code blocks should use backticks instead of tildes\",\n  tags: [\"code\"],\n  parser: \"markdownit\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP008.md\"\n  ),\n  function: function TOP008(params, onError) {\n    const fencedCodeBlocks = params.lines.reduce((codeBlocks, currentLine, index) => {\n      const trimmedLine = currentLine.trim();\n\nif (trimmedLine.startsWith(\"~~~\")) {\n        codeBlocks.push({\n          lineNumber: index + 1,\n          text: currentLine,\n          tildeCount: trimmedLine.lastIndexOf(\"~\") + 1,\n          startingColumn: currentLine.indexOf(\"~\") + 1,\n        });\n      }\n\nreturn codeBlocks;\n    }, []);\n\nfencedCodeBlocks.forEach((codeBlock) => {\n      const backtickReplacement = \"`\".repeat(codeBlock.tildeCount);\n\nonError({\n        lineNumber: codeBlock.lineNumber,\n        detail: `Expected: \"${backtickReplacement}\"; Actual: \"${\"~\".repeat(\n          codeBlock.tildeCount\n        )}\"`,\n        context: codeBlock.text,\n        fixInfo: {\n          lineNumber: codeBlock.lineNumber,\n          editColumn: codeBlock.startingColumn,\n          deleteCount: codeBlock.tildeCount,\n          insertText: backtickReplacement,\n        },\n      });\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1405,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP008_useBackticksForFencedCodeBlocks\\TOP008_useBackticksForFencedCodeBlocks.js",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "39433d8986673f9a59222ac877a70d1a",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP010_useLazyNumbering\\TOP010_useLazyNumbering.js",
    "source_type": "git_repo",
    "title": "TOP010_useLazyNumbering",
    "content": "module.exports = {\n  names: [\"TOP010\", \"lazy-numbering-for-ordered-lists\"],\n  description: \"Ordered lists must always use 1. as a prefix (lazy numbering)\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP010.md\"\n  ),\n  tags: [\"ol\"],\n  parser: \"markdownit\",\n  function: function TOP010(params, onError) {\n    params.parsers.markdownit.tokens.forEach((token) => {\n      // https://regexr.com/80oan to test this regex\n      const digit = /^\\s*\\d+/;\n      if (\n        token.tag === \"li\" && \n        digit.test(token.line) && \n        token.info !== \"1\"\n      ) {\n        const lineNumber = token.lineNumber;\n        const tokenLine = token.line.split(\".\");\n        const lazyNumbering = tokenLine[0].replace(/\\d+/, \"1\");\n\nonError({\n          lineNumber: lineNumber,\n          detail: `\\n  Expected: \"${lazyNumbering}\"\\n  Actual: \"${tokenLine[0]}\"\\n`,\n          fixInfo: {\n            lineNumber: lineNumber,\n            deleteCount: tokenLine[0].length,\n            insertText: lazyNumbering,\n          },\n        });\n      }\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1138,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP010_useLazyNumbering\\TOP010_useLazyNumbering.js",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "193ca6472efd0595ab047ab04d134572",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP009_lessonOverviewItemsSentenceStructure\\TOP009_lessonOverviewItemsSentenceStructure.js",
    "source_type": "git_repo",
    "title": "TOP009_lessonOverviewItemsSentenceStructure",
    "content": "function isolateBulletList(tokens) {\n  const bulletList = [];\n  let inBulletList = false;\n  let inLessonOverview = false;\n  tokens.forEach((token, index, tokensArr) => {\n    if (\n      tokensArr[index - 1]?.type === \"heading_open\" &&\n      /lesson overview/i.test(token.content)\n    ) {\n      inLessonOverview = true;\n    } else if (token.type === \"bullet_list_open\") {\n      inBulletList = true;\n    } else if (tokensArr[index - 1]?.type === \"bullet_list_close\") {\n      inLessonOverview = false;\n      inBulletList = false;\n    }\n\nif (inBulletList && inLessonOverview) {\n      bulletList.push(token);\n    }\n  });\n\n// Only consider tokens that have text in them.\n  return bulletList.filter((token) => token.type === \"inline\");\n}\n\nfunction getListItemData(bulletPoint) {\n  const lineNumber = bulletPoint.lineNumber;\n  const context = bulletPoint.content.trim();\n  const firstCharacter = context.at(0);\n  const lastCharacter = context.at(-1);\n  return {\n    firstCharacter,\n    lastCharacter,\n    lineNumber,\n    context,\n  };\n}\n\nmodule.exports = {\n  names: [\"TOP009\", \"lesson-overview-items-sentence-structure\"],\n  description:\n    \"Lesson overview items must be statements, not questions, and must begin with a capital letter and end with a period.\",\n  tags: [\"content\"],\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP009.md\",\n  ),\n  function: function TOP009(params, onError) {\n    const bulletPoints = isolateBulletList(params.tokens);\n    bulletPoints.forEach((bulletPoint) => {\n      const { firstCharacter, lastCharacter, lineNumber, context } =\n        getListItemData(bulletPoint);\n      const firstCharacterIsValid =\n        firstCharacter === firstCharacter.toUpperCase();\n      const lastCharacterIsValid = lastCharacter === \".\";\n      if (!firstCharacterIsValid || !lastCharacterIsValid) {\n        onError({\n          lineNumber: lineNumber,\n          detail:\n            \"Lesson overview items must be statements, not questions, and must begin with a capital letter and end with a period.\",\n          context: context,\n        });\n      }\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2199,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP009_lessonOverviewItemsSentenceStructure\\TOP009_lessonOverviewItemsSentenceStructure.js",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2b9c2eda2e745d74905666f42d9b510b",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP012_noteBoxHeadings\\TOP012_noteBoxHeadings.js",
    "source_type": "git_repo",
    "title": "TOP012_noteBoxHeadings",
    "content": "function isNoteBoxOpenTag(token) {\n  return token?.type === \"html_block\" && token?.content.includes(\"lesson-note\");\n}\n\nfunction lacksHeading(token, index, tokens) {\n  return isNoteBoxOpenTag(token) && tokens[index + 1]?.type !== \"heading_open\";\n}\n\nfunction getNoteBoxHeadings(headings, currentToken, index, tokens) {\n  const previousToken = tokens[index - 1];\n  if (\n    currentToken.type !== \"heading_open\" ||\n    !isNoteBoxOpenTag(previousToken)\n  ) {\n    return headings;\n  }\n\nheadings.push({\n    text: currentToken.line,\n    hashes: currentToken.markup,\n    lineNumber: currentToken.lineNumber,\n  });\n  return headings;\n}\n\nmodule.exports = {\n  names: [\"TOP012\", \"note-box-headings\"],\n  description: \"Note boxes have appropriate headings\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP012.md\",\n  ),\n  tags: [\"headings\"],\n  parser: \"markdownit\",\n  function: function TOP012(params, onError) {\n    const { tokens } = params.parsers.markdownit;\n    const noteBoxesWithoutHeadings = tokens.filter(lacksHeading);\n    const noteBoxHeadings = tokens.reduce(getNoteBoxHeadings, []);\n\nnoteBoxesWithoutHeadings.forEach((noteBox) => {\n      onError({\n        lineNumber: noteBox.lineNumber,\n        detail:\n          \"Note box is missing a heading. Note boxes must start with a level 4 heading (####).\",\n      });\n    });\n\nnoteBoxHeadings.forEach((heading) => {\n      if (heading.hashes.length === 4) {\n        return;\n      }\n\nconst hashesStartColumn = heading.text.indexOf(heading.hashes) + 1;\n\nonError({\n        lineNumber: heading.lineNumber,\n        detail: `Expected a level 4 heading (####) but got a level ${heading.hashes.length} heading (${heading.hashes}) instead.`,\n        fixInfo: {\n          editColumn: hashesStartColumn,\n          deleteCount: heading.hashes.length,\n          insertText: \"####\",\n        },\n      });\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 1990,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP012_noteBoxHeadings\\TOP012_noteBoxHeadings.js",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cb63d8df77d881942ef1399368f96a55",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP011_headingIndentation\\TOP011_headingIndentation.js",
    "source_type": "git_repo",
    "title": "TOP011_headingIndentation",
    "content": "function isNoteBoxOpenTag(token) {\n  return token?.type === \"html_block\" && token?.content.includes(\"lesson-note\");\n}\n\nfunction categoriseHeadings(headingTypes, currentToken, index, tokens) {\n  if (currentToken.type !== \"heading_open\") {\n    return headingTypes;\n  }\n\nconst previousToken = tokens[index - 1];\n  if (isNoteBoxOpenTag(previousToken)) {\n    headingTypes.noteBoxHeadings.push({\n      ...currentToken,\n      noteBoxLine: previousToken.line,\n    });\n  } else {\n    headingTypes.normalHeadings.push(currentToken);\n  }\n  return headingTypes;\n}\n\nfunction countLeadingSpaces(str) {\n  // https://regexr.com/8g1j2 to test this regex\n  return str.search(/[^ ]/);\n}\n\nmodule.exports = {\n  names: [\"TOP011\", \"heading-indentation\"],\n  description: \"Headings must not be indented unless they are for a note box.\",\n  information: new URL(\n    \"https://github.com/TheOdinProject/curriculum/blob/main/markdownlint/docs/TOP011.md\",\n  ),\n  tags: [\"headings\", \"indentation\"],\n  parser: \"markdownit\",\n  function: function TOP011(params, onError) {\n    const { tokens } = params.parsers.markdownit;\n    const headings = tokens.reduce(categoriseHeadings, {\n      noteBoxHeadings: [],\n      normalHeadings: [],\n    });\n\nheadings.noteBoxHeadings.forEach((heading) => {\n      const headingIndentation = countLeadingSpaces(heading.line);\n      const noteBoxIndentation = countLeadingSpaces(heading.noteBoxLine);\n\nif (headingIndentation !== noteBoxIndentation) {\n        onError({\n          lineNumber: heading.lineNumber,\n          detail: `Note box heading indented ${headingIndentation} spaces but should be indented ${noteBoxIndentation} spaces instead to match the containing note box.`,\n          fixInfo: {\n            lineNumber: heading.lineNumber,\n            deleteCount: headingIndentation,\n            insertText: \" \".repeat(noteBoxIndentation),\n          },\n        });\n      }\n    });",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2398,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP011_headingIndentation\\TOP011_headingIndentation.js",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5e39f3eac0e4630bdf22207fdd12754d",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP011_headingIndentation\\TOP011_headingIndentation.js",
    "source_type": "git_repo",
    "title": "TOP011_headingIndentation",
    "content": "\"indentation\"], parser: \"markdownit\", function: function TOP011(params, onError) { const { tokens } = params.parsers.markdownit; const headings = tokens.reduce(categoriseHeadings, { noteBoxHeadings: [], normalHeadings: [], }); headings.noteBoxHeadings.forEach((heading) => { const headingIndentation = countLeadingSpaces(heading.line); const noteBoxIndentation = countLeadingSpaces(heading.noteBoxLine); if (headingIndentation !== noteBoxIndentation) { onError({ lineNumber: heading.lineNumber, detail: `Note box heading indented ${headingIndentation} spaces but should be indented ${noteBoxIndentation} spaces instead to match the containing note box.`, fixInfo: { lineNumber: heading.lineNumber, deleteCount: headingIndentation, insertText: \" \".repeat(noteBoxIndentation), }, }); } });\n\nheadings.normalHeadings.forEach((heading) => {\n      const headingIndentation = countLeadingSpaces(heading.line);\n      if (headingIndentation) {\n        onError({\n          lineNumber: heading.lineNumber,\n          detail: `Normal headings must not be indented.`,\n          fixInfo: {\n            lineNumber: heading.lineNumber,\n            deleteCount: headingIndentation,\n          },\n        });\n      }\n    });\n  },\n};",
    "metadata": {
      "file_extension": ".js",
      "file_type": "javascript",
      "file_size": 2398,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP011_headingIndentation\\TOP011_headingIndentation.js",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9954243503e87a0fc7eadf418e0adedb",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP011_headingIndentation\\tests\\TOP011_test.md",
    "source_type": "git_repo",
    "title": "TOP011_test",
    "content": "Introduction\nText content.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item.\nThis heading is not indented so should NOT be flagged\nSome more content.\nHeading level makes no difference to indent expectations\nSome content.\n### This heading is indented so will flag an error\n#### The note box is not indented so this heading must also not be indented\nList item\nList item child.\n#### The note box and heading are both indented 3 spaces so should NOT be flagged\nList item child UL.\nUL item child.\n#### The note box and heading are both indented 5 spaces so should NOT be flagged\n#### The note box and heading do not match indentation levels (7v9) so this should flag\n#### The note box and heading do not match indentation levels (0v2) so this should flag\nAssignment\nAssignment content\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1737,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP011_headingIndentation\\tests\\TOP011_test.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d4e470a93d9889ae7c6a692168997166",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP012_noteBoxHeadings\\tests\\TOP012_test.md",
    "source_type": "git_repo",
    "title": "TOP012_test",
    "content": "Introduction\nThis file should flag with TOP012 errors, and no other linting errors.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nA LESSON OVERVIEW ITEM.\nCustom section\nNon-note box level 4 headings will not flag this error\nCustom subsection contents.\n#### Level 4 note box heading: Correct and will not flag error\nNote box contents.\n### Level 3 note box heading: Will flag error as it should be level 4\nNote box contents.\n## Level 2 note box heading: Will flag error as it should be level 4\nNote box contents.\nNote boxes without a heading will flag a missing heading error\nAssignment\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nA KNOWLEDGE CHECK QUESTION\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1564,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP012_noteBoxHeadings\\tests\\TOP012_test.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "273483bf753ac9b0a4525f2af22a1214",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP009_lessonOverviewItemsSentenceStructure\\tests\\TOP009_capital_letter.md",
    "source_type": "git_repo",
    "title": "TOP009_capital_letter",
    "content": "Introduction\nThis file should be marked with an error because one of the lesson overview items is not properly capitalized.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLesson overview item 1.\nlesson overview item 2.\nLesson overview item 3.\nLesson overview item 4.\nCustom section\nText content\nAssignment\nAssignment content\n#### Extra credit\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 931,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP009_lessonOverviewItemsSentenceStructure\\tests\\TOP009_capital_letter.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "68b28054d9bf4fb79b41627c41489299",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP010_useLazyNumbering\\tests\\TOP010_test.md",
    "source_type": "git_repo",
    "title": "TOP010_test",
    "content": "Introduction\nThis file should flag with TOP010 errors, and no other linting errors.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nA LESSON OVERVIEW ITEM.\nCUSTOM SECTION HEADING\nCUSTOM SECTION CONTENT.\nAssignment\n#### OPTIONAL CUSTOM ASSIGNMENT HEADING\n1. A RESOURCE OR EXERCISE ITEM\n- AN INSTRUCTION ITEM\n1. Item One\n2. Item Two\n1. Child of Item Two\n2. Child of Item Two\n3. Item Three\n1. Item One\n1. Item Two\n1. Child of Item Two\n1. Child of Item Two\n1. Item Three\n1. *foo*\n2. *Bar*\n- This is an unordered list item to test TOP010\n- This is another unordered list item\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nA KNOWLEDGE CHECK QUESTION\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1357,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP010_useLazyNumbering\\tests\\TOP010_test.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "68967a75ce7cfe0da2e886d1add9a6a3",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP009_lessonOverviewItemsSentenceStructure\\tests\\TOP009_invalid_punctuation.md",
    "source_type": "git_repo",
    "title": "TOP009_invalid_punctuation",
    "content": "Introduction\nThis file should be marked with an error because one of the lesson overview items is a question.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLesson overview item 1.\nLesson overview item 2.\nLesson overview item 3?\nLesson overview item 5.\nLesson overview item 6\nLesson overview item 7.\nCustom section\nText content\nAssignment\nAssignment content\n#### Extra credit\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 970,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP009_lessonOverviewItemsSentenceStructure\\tests\\TOP009_invalid_punctuation.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "51836c8151be75df370e02f773a78f43",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP009_lessonOverviewItemsSentenceStructure\\tests\\TOP009_test_valid.md",
    "source_type": "git_repo",
    "title": "TOP009_test_valid",
    "content": "Introduction\nThis file should not be flagged with any errors.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLesson overview item 1.\nLesson overview item 2.\nLesson overview item 3.\nLesson overview item 4.\nCustom section\nText content\nAssignment\nAssignment content\n#### Extra credit\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 869,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP009_lessonOverviewItemsSentenceStructure\\tests\\TOP009_test_valid.md",
      "source_type": "git_repo"
    },
    "token_count": 147,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "705538b7c60b96d6cadd1e400c5564aa",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP008_useBackticksForFencedCodeBlocks\\tests\\TOP008_test.md",
    "source_type": "git_repo",
    "title": "TOP008_test",
    "content": "Introduction\nThis file should flag with TOP008 errors, and no other linting errors.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item\nAssignment\nAssignment section\nCustom section\n~~~text\nThis codeblock should flag an error as it uses tildes instead of backticks.\n~~~\n~~~~markdown\n~~~text\nParent and nested code blocks should both individually flag if tildes are used instead of backticks.\n~~~\n~~~~\nList item\n~~~text\nIndented code blocks are treated all the same.\n~~~\ntext\nBackticks are valid and will not flag errors.\nmarkdown\n```text\nAs will backticked parent and nested code blocks.\n```\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1228,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP008_useBackticksForFencedCodeBlocks\\tests\\TOP008_test.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c8939e5edee3a89182f01df723fea258",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP007_useMarkdownLinks\\tests\\TOP007_test.md",
    "source_type": "git_repo",
    "title": "TOP007_test",
    "content": "Introduction\nThis file should flag with TOP007 errors, and no other linting errors.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item\nAssignment\nAssignment section\nCustom section\n```html\nThe following  </p> should be ignored by this rule as it does not belong to a codepen embed.\n```\nMarkdown links are desired in most cases\nLink should flag as we should be using a markdown link instead.\nWill flag if multiple anchors in same line.\n<a href=\"#custom-section\">Anchors inside an inline code block are ignored</a>\nhtml\n<a href=\"#custom-section\">Anchors inside fenced code blocks are ignored</a>\nSee the Pen\nflex-alignment example by TheOdinProject (@TheOdinProjectExamples)\non CodePen.\n@TheOdinProjectExamples\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nFlags with and omits non-href attributes\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2298,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP007_useMarkdownLinks\\tests\\TOP007_test.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "250a7a11c83e9ffbcf54ebd90679d308",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP006_fullFencedCodeLanguage\\tests\\TOP006_test.md",
    "source_type": "git_repo",
    "title": "TOP006_test",
    "content": "Introduction\nThis file should flag with TOP006 errors, and no other linting errors.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item\nAssignment\nValid div due to each tag being surrounded by blank lines.\nCustom section\njs\nconsole.log(\"This code block should flag an error as it uses \"js\" instead of \"javascript\".\");\n~~~js\nconsole.log(\"The rule will still flag even if tilde delimiters are used\");\n~~~\njavascript\nconsole.log(\"This code block is valid as it uses the appropriate full name.\");\nmarkdown\nThe rule catches the following languages, as they are they ones expected to be seen in this repo's files\nmd => markdown\nrb => ruby\njs => javascript\ntxt => text\nsh => bash\nyml => yaml\nrb\nputs \"Example of rb flagging.\"\nruby\nputs \"Use the full name!\"\ntxt\nAs does txt.\nyml\ndescription: This will flag\nyaml\ndescription: Unless you use the full name\nsh\nprefer --bash-over-sh\nbash\nlike --this\n```html\nHTML is not considered as only the abbreviated name is a valid option.\nThe same applies to similar languages like CSS and JSX.\n```\ncss\n.error {\ndisplay: none;\n}\njsx\n{isExempt && <p>No error here!</p>}\nmd\n```js\nconsole.log(\"Flags abbreviated names even with nested code blocks.\");\n```\nList item\njs\nconsole.log(\"Flags abbreviated names even with indented code blocks.\");\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2066,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP006_fullFencedCodeLanguage\\tests\\TOP006_test.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b6f136ab41d5f675d70e3f2c434ac0ba",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\project-TOP004-test-invalid.md",
    "source_type": "git_repo",
    "title": "project-TOP004-test-invalid",
    "content": "Introduction\nThis file should not be flagged with any errors.\nCustom section\nText content\nAnother custom section\nNo assignment section!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 164,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\project-TOP004-test-invalid.md",
      "source_type": "git_repo"
    },
    "token_count": 26,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "509d20cb9b26fe1e50ef7f0a07b35663",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\project-TOP004-test-valid.md",
    "source_type": "git_repo",
    "title": "project-TOP004-test-valid",
    "content": "Introduction\nThis file should not be flagged with any errors.\nCustom section\nText content\nAssignment\nAssignment content\n#### Extra credit\nCustom post-assignment section\nText content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 285,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\project-TOP004-test-valid.md",
      "source_type": "git_repo"
    },
    "token_count": 35,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b3eaf3dec9eb06218a4c27c1d91b7820",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\project_TOP004_test_invalid.md",
    "source_type": "git_repo",
    "title": "project_TOP004_test_invalid",
    "content": "Introduction\nThis file should not be flagged with any errors.\nCustom section\nText content\nAnother custom section\nNo assignment section!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 164,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\project_TOP004_test_invalid.md",
      "source_type": "git_repo"
    },
    "token_count": 26,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cc46ea7b320a4034426fe2c594d38108",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\project_TOP004_test_valid.md",
    "source_type": "git_repo",
    "title": "project_TOP004_test_valid",
    "content": "Introduction\nThis file should not be flagged with any errors.\nCustom section\nText content\nAssignment\nAssignment content\n#### Extra credit\nCustom post-assignment section\nText content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 285,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\project_TOP004_test_valid.md",
      "source_type": "git_repo"
    },
    "token_count": 35,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46650c363d006edf3b16130f3a3d212b",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP005_blanksAroundMultilineHtmlTags\\tests\\TOP005_test.md",
    "source_type": "git_repo",
    "title": "TOP005_test",
    "content": "Introduction\nThis file should flag with TOP005 errors, and no other linting errors Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson LO item\nAssignment\nValid div due to each tag being surrounded by blank lines Custom section\nValid single-line div\nValid single-line div\nMight even have other paragraph content with it The opening tag is invalid due to not being surrounded by blank lines Until a blank line is encountered, if there are any unrelated linting errors, the vast majority of them will not be caught due to how `markdown-it` parses `html_block` tokens The closing tag is valid as it is surrounded by blank lines Non-empty/codeblock line\nThe opening tag is invalid due to not being surrounded by blank lines or codeblock delimiters The blank line after it does allow the linter to correctly flag and unrelated linting errors in these lines if there are any Also invalidates when HTML blocks are chained without blank lines between them Also invalidates when HTML blocks are chained without blank lines between them ```markdown\nThe only exception to blank lines is a code block delimiter ```\n```markdown\nThis line above the closing tag is not a blank line nor a code block delimiter, so the closing tag errors ```\n```html\nDoes not flag when used in an HTML example\n```\n```jsx\nAlso does not flag when used in JSX code blocks\n```\n```erb\n<%= if language isErb %>\nAlso does not flag when used in erb code blocks\n<% end %>\n```\n```ejs\n<% if (isEjs) { %>\nAlso does not flag when used in ejs code blocks\n<% } %>\n```\nruby\nif ruby html_fragment = <<~HTML\n<p>Does not flag when used in ruby code blocks</p>\nHTML\nend\n``javascript\nconst htmlString =\nDoes not flag when used in JavaScript code blocks, e g template literals `;\n```\n```markdown\nBut does not like it if done in a non-HTML/JSX code block\nTOP005 doesn't care it the tag is indented or not ```\nWill not flag ignore comments which require being directly followed by the line to ignore\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3020,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP005_blanksAroundMultilineHtmlTags\\tests\\TOP005_test.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e1fd9570cb72e01686d10dd350ba7948",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP005_blanksAroundMultilineHtmlTags\\tests\\TOP005_test.md",
    "source_type": "git_repo",
    "title": "TOP005_test",
    "content": "HTML end ``javascript const htmlString = Does not flag when used in JavaScript code blocks, e g template literals `; ``` ```markdown But does not like it if done in a non-HTML/JSX code block TOP005 doesn't care it the tag is indented or not ``` Will not flag ignore comments which require being directly followed by the line to ignore Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge KC item\nAdditional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental AR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3020,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP005_blanksAroundMultilineHtmlTags\\tests\\TOP005_test.md",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "031eda0d92c7af76f1e5de97f41fbdf4",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\TOP004_test_valid.md",
    "source_type": "git_repo",
    "title": "TOP004_test_valid",
    "content": "Introduction\nThis file should not be flagged with any errors.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item\nCustom section\nText content\nAssignment\nAssignment content\n#### Extra credit\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 772,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\TOP004_test_valid.md",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "654301cc3e1c2e2a5fc06fd31a33ce50",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\TOP004_test_missing_heading.md",
    "source_type": "git_repo",
    "title": "TOP004_test_missing_heading",
    "content": "Introduction\nText content\nCustom section\nText content\nAssignment\nAssignment content\nAn invalid wildcard heading\nThe heading for this section must be a level 4 heading.\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 536,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\TOP004_test_missing_heading.md",
      "source_type": "git_repo"
    },
    "token_count": 86,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12dd4cc81f355b9543ef12888d0a0c08",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\TOP004_test_wrong_wildcard_level.md",
    "source_type": "git_repo",
    "title": "TOP004_test_wrong_wildcard_level",
    "content": "Introduction\nText content\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item\nCustom section\nText content\nAssignment\nAssignment content\nAn invalid wildcard heading\nThe heading for this section must be a level 4 heading.\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 809,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP004_lessonHeadings\\tests\\TOP004_test_wrong_wildcard_level.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff75c6fe86071747a52e9801f0881f68",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_content-around-list.md",
    "source_type": "git_repo",
    "title": "TOP003_test_content-around-list",
    "content": "Introduction\nText content\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nSome additional content before the list that should flag an error.\nLO item\nSome additional content after the list that should flag an error.\nCustom section\nText content\nAssignment\nAssignment content\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 854,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_content-around-list.md",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0de4b8c980b323f3e25b3ed92dff547c",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_incorrect-content.md",
    "source_type": "git_repo",
    "title": "TOP003_test_incorrect-content",
    "content": "Introduction\nText content\nLesson overview\nThis section has the wrong text following the heading that should flag an error.\nLO item\nCustom section\nText content\nAssignment\nAssignment content\nKnowledge check\nKC item that should flag an error\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 504,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_incorrect-content.md",
      "source_type": "git_repo"
    },
    "token_count": 72,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9862d96413f5e02f47993a798af666e0",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_empty-section.md",
    "source_type": "git_repo",
    "title": "TOP003_test_empty-section",
    "content": "Introduction\nThis file should flag 3 errors due to the \"Lesson overview\", \"Knowledge check\", and \"Additional resources\" sections being empty.\nLesson overview\nCustom section\nText content\nAssignment\nAssignment content\nKnowledge check\nAdditional resources",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 364,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_empty-section.md",
      "source_type": "git_repo"
    },
    "token_count": 48,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "be9fca76a89195ae7d1d53808a015193",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_missing-list.md",
    "source_type": "git_repo",
    "title": "TOP003_test_missing-list",
    "content": "Introduction\nThis file should flag 3 errors due to the \"Lesson overview\", \"Knowledge check\", and \"Additional resources\" sections not containing unordered lists.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nCustom section\nText content\nAssignment\nAssignment content\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 811,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_missing-list.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "078d4f7f4de3ea7e94567df15712f895",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_missing-wrapper.md",
    "source_type": "git_repo",
    "title": "TOP003_test_missing-wrapper",
    "content": "Introduction\nText content\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item\nCustom section\nText content\nAssignment\nAssignment content which should flag an error due to no div wrapper with the applicable attributes being present.\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 748,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_missing-wrapper.md",
      "source_type": "git_repo"
    },
    "token_count": 131,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a6671be7abe53306444aaecb53e55c72",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_nested-and-ordered-list.md",
    "source_type": "git_repo",
    "title": "TOP003_test_nested-and-ordered-list",
    "content": "Introduction\nText content\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nAn item\nA nested item that should flag an error\nUnnested list item\nCustom section\nText content\nAssignment\nAssignment content\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item that should flag an error\nAnother KC item that should flag an error\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 855,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP003_defaultSectionContent\\tests\\TOP003_test_nested-and-ordered-list.md",
      "source_type": "git_repo"
    },
    "token_count": 143,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "78aaaf104cff590eb5f794ae362d2643",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP002_noCodeInHeadings\\tests\\TOP002_test.md",
    "source_type": "git_repo",
    "title": "TOP002_test",
    "content": "Introduction\nText content.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item\nThis heading should NOT be flagged\nSome more content.\nThis heading SHOULD be flagged\nSome content.\nThis other heading will get flagged twice\nAssignment\nAssignment content\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 852,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP002_noCodeInHeadings\\tests\\TOP002_test.md",
      "source_type": "git_repo"
    },
    "token_count": 137,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7233807f295d3459e4789761cc521354",
    "source_file": "corpus\\git_repos\\odin-project\\markdownlint\\TOP001_descriptiveLinkTextLabels\\tests\\TOP001_test.md",
    "source_type": "git_repo",
    "title": "TOP001_test",
    "content": "Introduction\nText content\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nLO item\nThe following links should NOT be flagged\nSome descriptive link text\nHe replied\nWith is\nWhere\nHeresy\nSome text with the word video\nSome text with the words documentation, an article, docs, the docs, page, a video, articles, resource, their docs\nThe following links SHOULD be flagged\nthis\nThis video\nvideo\nvideos\na video\ndocs\nthe documentation\ntheir documentation\npage\ntheir homepage\nplaylist\na playlist\nhere\nClick here\nThis other thing\nThis blog post about flex-grow will be flagged as a false positive, but could still be updated\nThis will get caught and so will this as separate matches\nAssignment\nAssignment content\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nKC item\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nAR item",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1583,
      "relative_path": "git_repos\\odin-project\\markdownlint\\TOP001_descriptiveLinkTextLabels\\tests\\TOP001_test.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c11f05eb8c05c575dab5f29763187525",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\asynchronous_code.md",
    "source_type": "git_repo",
    "title": "asynchronous_code",
    "content": "Introduction\nSince JavaScript is the language of the web, there are some functions that by necessity are going to take a decent amount of time to complete, such as fetching data from a server to display on your site For this reason, JavaScript includes support for asynchronous functions, or to put it another way, functions that can happen in the background while the rest of your code executes Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what a callback is Explain what a promise is Explain the circumstances under which promises are better than callbacks Explain what the then() function does Callbacks\nIn the recent past, the way that these were most commonly handled were with callbacks, and even now they are still used quite a lot in certain circumstances A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action (MDN documentation on callback functions) Callbacks are functions that get passed into other functions For example:\njavascript\nmyDiv addEventListener(\"click\", function(){\n// do something })\nHere, the function addEventListener() takes a callback (the \"do something\" function) and then calls it when myDiv gets clicked You will likely recognize this pattern as something that happens all the time in JavaScript code Unfortunately, though they are useful in situations like the above example, using callbacks can get out of hand, especially when you need to chain several of them together in a specific order The rest of this lesson discusses patterns and functions that will help keep you out of Callback hell Take a moment to read the section on callbacks in this article before moving on Or, if you prefer to watch a video of Callback functions Promises\nThere are multiple ways that you can handle asynchronous code in JavaScript, and they all have their use cases Promises are one such mechanism, and they're one you will see somewhat often when using other libraries or frameworks Knowing what they are and how to use them is quite useful Essentially, a promise is an object that might produce a value at some point in the future Here's an example:\nLet's say getData() is a function that fetches some data from a server and returns it as an object that we can use in our code:\njavascript\nconst getData = function() {\n// go fetch data from some API",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6367,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\asynchronous_code.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ed8d69d3df2488bed5ee55860cdcf286",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\asynchronous_code.md",
    "source_type": "git_repo",
    "title": "asynchronous_code",
    "content": "using other libraries or frameworks Knowing what they are and how to use them is quite useful Essentially, a promise is an object that might produce a value at some point in the future Here's an example: Let's say getData() is a function that fetches some data from a server and returns it as an object that we can use in our code: javascript const getData = function() { // go fetch data from some API// clean it up a bit and return it as an object:\nreturn data\n}\nThe issue with this example is that it takes some time to fetch the data, but unless we tell our code that, it assumes that everything in the function happens essentially instantly So, if we try to do this:\njavascript\nconst myData = getData()\nconst pieceOfData = myData['whatever']\nWe're going to run into trouble because when we try to extract pieceOfData out of the returned data, the function getData() will most likely still be fetching, so myData will not be the expected data, but will be undefined Sad We need some way to solve this problem, and tell our code to wait until the data is done fetching to continue Promises solve this issue We'll leave learning the specific syntax for the articles you're about to read, but essentially Promises allow you to do this:\n```javascript\nconst myData = getData() // if this is refactored to return a Promise myData then(function(data){ // then() tells it to wait until the promise is resolved\nconst pieceOfData = data['whatever'] // and THEN run the function inside\n})\n```\nOf course, there are many more occasions where one would want to use Promises beyond fetching data, so learning these things now will be very useful to you Assignment\n1 Read this [Promises article](https://davidwalsh name/promises) It's a good starting place and it's short and to the point 1 Watch this [video about promises](https://youtu be/DHvZLI7Db8E) It's a good place to get a feel for how one might actually use promises in the wild 1 Watch this [video titled \"What is Event Loop \"](https://www youtube com/watch v=8aGhZQkoFbQ) to understand how asynchronous code works in JavaScript 1 Watch this [video visualizing the Event loop](https://www youtube com/watch",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6367,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\asynchronous_code.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b41dc5a9b41b399ff2150b67cfd47ac6",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\asynchronous_code.md",
    "source_type": "git_repo",
    "title": "asynchronous_code",
    "content": "you Assignment 1 Read this [Promises article](https://davidwalsh name/promises) It's a good starting place and it's short and to the point 1 Watch this [video about promises](https://youtu be/DHvZLI7Db8E) It's a good place to get a feel for how one might actually use promises in the wild 1 Watch this [video titled \"What is Event Loop \"](https://www youtube com/watch v=8aGhZQkoFbQ) to understand how asynchronous code works in JavaScript 1 Watch this [video visualizing the Event loop](https://www youtube com/watchv=eiC58R16hb8) to further understand the Event Loop 1 Watch this [video visualizing promises](https://www youtube com/watch v=Xs1EMmBLpn4) to understand Promise Execution in JavaScript 1 Read this [promise basics article](https://javascript info/promise-basics), which is an excellent resource for beginners Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a callback What is a promise When should you use promises over callbacks What does the then() function do Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The Promises by ColorCode video is a nice introduction to Promises if you need additional information For a more interactive explanation and example, try a Scrim on asynchronous coding Read \"You Don't Know JavaScript\" Chapter 2: Callbacks and Chapter 3: Promises Both chapters dive deep into their respective topics, which may make for a difficult - but worthwhile - read",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6367,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\asynchronous_code.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7b1b4b7655de7fd90d3d02366b403341",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\async_and_await.md",
    "source_type": "git_repo",
    "title": "async_and_await",
    "content": "Introduction\nAsynchronous code can become difficult to follow when it has a lot of things going on async and await are two keywords that can help make asynchronous code read more like synchronous code This can help code look cleaner while keeping the benefits of asynchronous code For example, the two code blocks below do the exact same thing They both get information from a server, process it, and return a promise javascript\nfunction getPersonsInfo(name) {\nreturn server getPeople() then(people => {\nreturn people find(person => { return person name === name });\n});\n}\njavascript\nasync function getPersonsInfo(name) {\nconst people = await server getPeople();\nconst person = people find(person => { return person name === name });\nreturn person;\n}\nThe second example looks much more like the kind of functions you are used to writing However, did you notice the async keyword before the function declaration How about the await keyword before server getPeople() If you'd like to try running these functions on your own, paste the following code block representing a server before the function definitions How this \"server\" works is not important and is just an abstraction The goal here is so that you can see that both functions behave exactly the same and return a promise ```javascript\nconst server = {\npeople: [\n{\nname: \"Odin\",\nage: 20,\n},\n{\nname: \"Thor\",\nage: 35,\n},\n{\nname: \"Freyja\",\nage: 29,\n},\n],\ngetPeople() {\nreturn new Promise((resolve, reject) => {\n// Simulating a delayed network call to the server\nsetTimeout(() => {\nresolve(this people);\n}, 2000);\n});\n},\n};\n```\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain how you declare an async function Explain what the async keyword does Explain what the await keyword does Explain what an async function returns Explain what happens when an error is thrown inside an async function Explain how you can handle errors inside an async function The async keyword\nThe async keyword is what lets the JavaScript engine know that you are declaring an asynchronous function This is required to use await inside any function When a function is declared with async, it automatically returns a promise; returning in an async function is the same as resolving a promise Likewise, throwing an error will reject the promise An important thing to understand is async functions are just syntactical sugar for promises",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10614,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\async_and_await.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "92cea7052fb93739c6a8741eeea78988",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\async_and_await.md",
    "source_type": "git_repo",
    "title": "async_and_await",
    "content": "function The async keyword The async keyword is what lets the JavaScript engine know that you are declaring an asynchronous function This is required to use await inside any function When a function is declared with async, it automatically returns a promise; returning in an async function is the same as resolving a promise Likewise, throwing an error will reject the promise An important thing to understand is async functions are just syntactical sugar for promisesThe async keyword can also be used with any of the ways a function can be created Said differently: it is valid to use an async function anywhere you can use a normal function Below you will see some examples that may not be intuitive If you don't understand them, come back and take a look when you are done with the assignments javascript\nconst yourAsyncFunction = async () => {\n// do something asynchronously and return a promise\nreturn result;\n}\njavascript\nanArray forEach(async item => {\n// do something asynchronously for each item in 'anArray'\n// one could also use map here to return an array of promises to use with 'Promise all()'\n});\njavascript\nserver getPeople() then(async people => {\npeople forEach(person => {\n// do something asynchronously for each person\n});\n});\nThe await keyword\nawait does the following: it tells JavaScript to wait for an asynchronous action to finish before continuing the function It's like a 'pause until done' keyword The await keyword is used to get a value from a function where you would normally use then() Instead of calling then() after the asynchronous function, you would assign a variable to the result using await Then you can use the result in your code as you would in your synchronous code Error handling\nHandling errors in async functions is very easy Promises have the catch() method for handling rejected promises, and since async functions just return a promise, you can call the function, and append a catch() method to the end javascript\nasyncFunctionCall() catch(err => {\nconsole error(err)\n});\nBut there is another way: the mighty try/catch block If you want to handle the error directly inside the async function, you can use try/catch with async/await syntax If JavaScript throws an error in the try block, the catch block code will run instead (this can also be used for synchronous code) javascript\nasync function getPersonsInfo(name) {\ntry {\nconst people = await server getPeople();\nconst person = people find(person => { return person",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10614,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\async_and_await.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "195e6fc6081a0af599db9520f303eace",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\async_and_await.md",
    "source_type": "git_repo",
    "title": "async_and_await",
    "content": "error(err) }); But there is another way: the mighty try/catch block If you want to handle the error directly inside the async function, you can use try/catch with async/await syntax If JavaScript throws an error in the try block, the catch block code will run instead (this can also be used for synchronous code) javascript async function getPersonsInfo(name) { try { const people = await server getPeople(); const person = people find(person => { return personname === name });\nreturn person;\n} catch (error) {\n// Handle the error any way you'd like\n}\n}\nDoing this can look messy, but it is a very easy way to handle errors without appending catch() after your function calls How you handle the errors is up to you, and which method you use should be determined by how your code was written You will get a feel for what needs to be done over time The assignments will also help you understand how to handle your errors Practice\nRemember the Giphy API practice project (If not, you should go back and complete the API lesson) We are going to convert the promise based code into async/await compatible code Here's a refresher of the code we are starting with:\n```javascript\n```\nSince await does not work in the top level of a non-module script, we will have to create an async function that wraps our API call to Giphy ```javascript\n```\nNow that we have a function that is asynchronous, we can then start refactoring from using promises to using await:\n```javascript\n```\nSince response is still the same object we have passed to the then() block at the start, we still need to use the json() method, which in turn returns a promise Because json() returns a promise, we can use await to assign the response to a variable ```javascript\n```\nTo use this function, we just need to call it with getCats() in our code ```javascript\n```\nThis code will behave exactly like the code from the last lesson; it just looks a bit different after refactoring async/await are very useful tools when it comes to cleaning up asynchronous JavaScript code It is important to remember async/await are just promises written in a different way Do the assignments below, and dive deeper into the understanding of async/await Assignment\n1 Read this [Async and Await article](https://javascript info/async-await) for a solid introduction to async/await",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10614,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\async_and_await.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f1cfa6899de884c072e44e8fb7ac3ec3",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\async_and_await.md",
    "source_type": "git_repo",
    "title": "async_and_await",
    "content": "``` This code will behave exactly like the code from the last lesson; it just looks a bit different after refactoring async/await are very useful tools when it comes to cleaning up asynchronous JavaScript code It is important to remember async/await are just promises written in a different way Do the assignments below, and dive deeper into the understanding of async/await Assignment 1 Read this [Async and Await article](https://javascript info/async-await) for a solid introduction to async/awaitThis [Async and Await examples article](https://codeburst io/javascript-es-2017-learn-async-await-by-example-48acc58bad65) also has some good examples of its use 1 Watch this [Async and Await video by Wes Bos](https://www youtube com/watch v=9YkUCxvaLEk) for a good overview on async/await and its purpose, along with a special trick Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you declare an async function What does the async keyword do What does the await keyword do What is returned from an async function What happens when an error is thrown inside an async function How can you handle errors inside an async function Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This Change promises to async/await video is an example of how you can change callbacks, to promises, to async/await This Promises, Async and Await video gives a comprehensive view of Promises, async, and await For a more interactive explanation and example, try a Scrim on async and await This blog post about Promises From The Ground Up delves into how Promises work",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10614,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\async_and_await.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "32999f59d998cc7feda3400d7b006005",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\project_weather_app.md",
    "source_type": "git_repo",
    "title": "project_weather_app",
    "content": "Introduction\nUse everything we've been discussing to create a weather forecast site using the Visual Crossing API from previous lessons You should be able to search for a specific location and toggle displaying the data in Fahrenheit or Celsius You should change the look of the page based on the data, maybe by changing the color of the background or by adding images that describe the weather (You could even use the Giphy API to find appropriate weather-related gifs and display them) Feel free to use promises or async/await in your code, though you should try to become comfortable with both API keys, secrets, and security\nNot all APIs are free, and depending on how they're set up, they can cost money per use This makes them a prime target for people looking to use the API without paying by using your API key They can also be rate-limited, and if someone has access to your API key they can use up all of your uses One way to prevent this issue is to store your API keys on the server and never send them to the frontend in the first place, this is often done using environment variables and it makes the key available only on the server the code is deployed to When talking about API keys and security you'll often hear \"Never trust the client\" (client meaning the frontend) Often this means not to trust that data coming from the client is valid, but it also means that you cannot trust anything we send to the client Because of this, when you leak an API key, GitHub will alert you that you have committed an API key publicly After following this project, and indeed exposing the API key, you may notice that GitHub will send you this alert This is totally OK for this project as this API key is publicly available and there is no consequence for exposing it This is not to say ALL keys are this way Later during the backend courses you will learn ways to securely deal with these topics Assignment\n1 Set up a blank HTML document with the appropriate links to your JavaScript and CSS files 1 Write the functions that hit the API You're going to want functions that can take a location and return the weather data for that location For now, just `console log()` the information 1 Write the functions that *process* the JSON data you're getting from the API and return an object with only the data you require for your app 1 Set up a form that will let users input their location and will fetch the weather info (still just `console log()` it) 1 Display the information on your webpage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3347,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\project_weather_app.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5e1c740023498556d110875d2f5cc2c8",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\project_weather_app.md",
    "source_type": "git_repo",
    "title": "project_weather_app",
    "content": "can take a location and return the weather data for that location For now, just `console log()` the information 1 Write the functions that *process* the JSON data you're getting from the API and return an object with only the data you require for your app 1 Set up a form that will let users input their location and will fetch the weather info (still just `console log()` it) 1 Display the information on your webpage- While you don't have to, if you wish to display weather icons then there can be a lot of them to import, so have a look at the [dynamic import() function](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Operators/import) Unlike plain template strings without an import, [Webpack can read dynamic imports](https://webpack js org/api/module-methods/#dynamic-expressions-in-import) and still bundle all the relevant assets 1 Add any styling you like 1 Optional: add a 'loading' component that displays from the time the form is submitted until the information comes back from the API Use DevTools to simulate network speeds 1 Push that baby to GitHub and share your solution below",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3347,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\project_weather_app.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1cf1425544a2f787cc6fb206ac85eed4",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\a_very_brief_intro_to_cs.md",
    "source_type": "git_repo",
    "title": "a_very_brief_intro_to_cs",
    "content": "Introduction\nYou've learned how to build some cool stuff already and, frankly, you could probably make some decent websites without a crazy amount of additional formal education However, just because you can write English at a grade school level doesn't mean you will be editing the New York Times anytime soon In the world of programming, there's a difference between solving a problem the brute force way and solving a problem WELL We touched on the first layer of this when we covered basic programming and how you should break apart your code into well-organized chunks If you assume those lessons were all about learning how to write good code, these next few lessons are going to be about training yourself to figure out the best code to write -- the most elegant solution to the problem at hand It becomes particularly important whenever you start working with large data sets, like when your website becomes highly successful We're taking a look at some more Computer Science-y concepts here because they are fundamental for a reason Some problems require you to use tools beyond just arrays and iterators There's no sense reinventing the wheel when others have already figured out good methods for solving certain types of problems If that doesn't get you interested, remember that this curriculum is meant to prepare you for life beyond the web page If you're interested in applying for a job, you'll be asked questions that directly touch on some of this stuff It's going to require you to put on your thinking cap (sorry, it had to happen sometime), but we won't be doing anything too crazy We'll stick to the practical side of this material as opposed to getting too stuck in theory Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What is an algorithm What is pseudo-code Assignment\n1 Watch [Introduction to Algorithms by David Malan](https://www youtube com/watch v=6hfOvs8pY1k) on TedEd to see how to think about algorithms 1 Watch [What is an Algorithm ](https://youtu be/e_WfC8HwVB8) on YouTube for a more structured look at solving problems using algorithms 1 Read this Quora answer about the [importance of algorithms in web development](https://qr ae/py3NAc) to get some context for why we're going over this stuff 1 Watch [What is pseudocode ](https://www youtube com/watch v=Rg-fO7rDsds)\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3580,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\a_very_brief_intro_to_cs.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f12b22e1acd55aa7809a9837334b6a14",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\a_very_brief_intro_to_cs.md",
    "source_type": "git_repo",
    "title": "a_very_brief_intro_to_cs",
    "content": "Assignment 1 Watch [Introduction to Algorithms by David Malan](https://www youtube com/watch v=6hfOvs8pY1k) on TedEd to see how to think about algorithms 1 Watch [What is an Algorithm ](https://youtu be/e_WfC8HwVB8) on YouTube for a more structured look at solving problems using algorithms 1 Read this Quora answer about the [importance of algorithms in web development](https://qr ae/py3NAc) to get some context for why we're going over this stuff 1 Watch [What is pseudocode ](https://www youtube com/watch v=Rg-fO7rDsds) 1Watch the first section (from 0:00 - 7:01) of [Telusko's video on data structures and algorithms](https://www youtube com/watch v=xWLxhF3b5P8) for a quick overview of DSA, and why companies may be interested in hiring candidates familiar with DSA Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is an Algorithm What is the importance of algorithms in web development What is pseudocode Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Wikipedia on Computer Science\nWikipedia on Algorithms\nMap of Computer Science",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3580,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\a_very_brief_intro_to_cs.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ea0ae0ac1b637220de9238c49527fbf5",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\common_data_structures_algorithms.md",
    "source_type": "git_repo",
    "title": "common_data_structures_algorithms",
    "content": "Introduction\nThe basic idea of a data structure is to store data in a way that meets the needs of your particular application You might be inclined to store a particular kind of data in one giant array, but it would be rather time consuming to locate a specific value if you had a significant number and depth of items So you need to look to other options Depending on the application, there are a batch of other basic data structures available to help you out The differences between them typically have to do with trade-offs between how long it takes to first populate the structure, how long it takes to add or find elements, and how large the structure is in memory We'll save the specifics of data structures for more computer-science-oriented courses, but this introduction should again expand your toolbox slightly so you can identify and solve certain problems where plain old Arrays, Hashes and Sets don't quite cut it New structures and strategies will be particularly relevant, for instance, when you're trying to search through a large batch of data for a particular value or plan out a strategy several moves in advance You've already had a brief introduction to algorithms over some of the other lessons and you even got to write your own Merge Sort algorithm in the last project You'll find that sorting algorithms are quite common Another major area for algorithms is in search, where milliseconds count When you're searching through enormous troves of data, the quality of your search algorithm is incredibly important Traversing a data tree looking for a particular element is a related problem that's common in data intensive applications Luckily for you, these complex algorithmic problems have all been solved many times in the past Understanding how they are solved will give you some great tools to apply to other (similar) problems on your own Algorithms are really just ways of solving problems systematically In this brief introduction, we'll focus on a couple of algorithms that you may run into when coding on your own -- breadth-first-search and depth-first-search Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What is a data structure What are stacks and queues What's the best way to implement stacks and queues in JavaScript Why bother having many different search algorithms What are breadth-first-search (BFS) and depth-first-search (DFS) What situations would you want to use BFS What situations would you want to use DFS instead Assignment\n1 Glance over the [Wikipedia entry on Data Structures](http://en wikipedia org/wiki/Data_structure) for a high level overview of things 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5981,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\common_data_structures_algorithms.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d7cdd8214a0a3da3532e65dabc3f0530",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\common_data_structures_algorithms.md",
    "source_type": "git_repo",
    "title": "common_data_structures_algorithms",
    "content": "learn in this lesson What is a data structure What are stacks and queues What's the best way to implement stacks and queues in JavaScript Why bother having many different search algorithms What are breadth-first-search (BFS) and depth-first-search (DFS) What situations would you want to use BFS What situations would you want to use DFS instead Assignment 1 Glance over the [Wikipedia entry on Data Structures](http://en wikipedia org/wiki/Data_structure) for a high level overview of things 1Watch the first 10 minutes of [Why Study Algorithms](https://www youtube com/watch v=u2TwK3fED8A) The rest is more mathematical if you're interested 1 Read [What is an Algorithm and How Does it Make You a Better Programmer](https://web archive org/web/20231223233808/http://blog thefirehoseproject com/posts/what-is-an-algorithm/) for another basic look at what algorithms are 1 Learn about [how binary search works](https://www youtube com/watch v=DSffdCT5Cx4) from Harvard’s CS50 on YouTube 1 Now, we're going to focus on learning about binary search trees Start by watching this video to learn [how a binary search tree is constructed from an unordered array](https://www youtube com/watch v=FvdPo8PBQtc) 1 Next, learn about the [principles of queues and stacks](https://www youtube com/watch v=6QS_Cup1YoI), which are concepts used in breadth-first search and depth-first search respectively 1 Finally, learn about breadth-first search and depth-first search of binary search trees from this series of videos on YouTube:\n- [Binary tree traversal](https://www youtube com/watch v=9RHO6jU--GU)\n- [Breadth-first traversal](https://www youtube com/watch v=86g8jAQug04)\n- [Depth-first traversal](https://www youtube com/watch v=gm8DUJJhmY4)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between a stack and a queue What are the enqueue and dequeue properties What is a linked list What is a node Which recursive problem-solving method/algorithm design principle does binary search implement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5981,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\common_data_structures_algorithms.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f29a7eb8f07eb3dacf6666e33b90100e",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\common_data_structures_algorithms.md",
    "source_type": "git_repo",
    "title": "common_data_structures_algorithms",
    "content": "following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between a stack and a queue What are the enqueue and dequeue properties What is a linked list What is a node Which recursive problem-solving method/algorithm design principle does binary search implementWhat abstract data type would you use to defer/store nodes in a breadth-first tree traversal What abstract data type would you use to defer/store nodes in a depth-first tree traversal Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Khan Academy's great Algorithms Course\nStanford's Coursera 4-Part Algorithm Course\nVisualizing Algorithms from Mike Bostock\nAnother free course on algorithms by Udacity\nA more detailed video on stacks and queues\nA stack overflow discussion on the relative strengths of BFS and DFS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5981,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\common_data_structures_algorithms.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6debc3f1c6b9c0a0e179cad1caa5630b",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "Introduction\nOne of the most powerful things a web developer can do is fetching data from a server and displaying it creatively on their site In many cases, the server solely exists for that specific site The server could contain blog posts, user data, high scores for a game or anything else In other cases, the server is an open service that serves data to anyone that wants to use it (i e weather data or stock prices) In either case, the methods of accessing and then using that data are essentially the same Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what an API is Explain broadly how access to an API works Explain how to fetch and extract data from an API Explain why your API request might be blocked by the browser, and how to fix this APIs\nServers that are created for serving data for external use (in websites or apps) are often referred to as APIs or 'Application Programming Interfaces' There are multiple ways of requesting data from an API, but all of them basically do the same thing For the most part, APIs are accessed through URLs, and the specifics of how to query these URLs change based on the specific service you are using For example, Visual Crossing has a weather API that has several types of data you can request To get the current weather in a specific location, you can pass in the name of a city into the path of the URL, like so:\ntext\nhttps://weather visualcrossing com/VisualCrossingWebServices/rest/services/timeline/london\nThe specifics for using any API are usually documented on the service's website Check out the Visual Crossing API Documentation If you haven't already, go ahead and paste the weather URL above, with the city of your choice, into your browser (we'll wait) You'll probably get an error like this:\ntext\nNo API key or session found Please verify that your API key parameter is correct This brings us to another point about APIs In most cases, you will have to create an account and request an \"API key\" from the API service before attempting to fetch data from their endpoints (specific URLs that you use to access a particular function or data within the API) Once obtained, an API key will usually have to be included with every data request With Visual Crossing, that's as a query string parameter:\ntext\nhttps://weather visualcrossing com/VisualCrossingWebServices/rest/services/timeline/london",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "0d87a862be3cd46d0e21fc0701c010ca",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "us to another point about APIs In most cases, you will have to create an account and request an \"API key\" from the API service before attempting to fetch data from their endpoints (specific URLs that you use to access a particular function or data within the API) Once obtained, an API key will usually have to be included with every data request With Visual Crossing, that's as a query string parameter: text https://weather visualcrossing com/VisualCrossingWebServices/rest/services/timeline/londonkey=11111111111111111\nAs you can imagine, an API key is random and unique to you As such, services like Visual Crossing can correlate your API key to your requests of their data, including how much and how often you are requesting it Issuing API keys allows an API service to better track abuse of their systems and data Additionally, it can also be a way for those services to mitigate and recuperate operating costs Visual Crossing, for example, provides not only a free tier but a variety of paid tiers that can cost up to 150 USD/month After all, running servers costs money, and APIs are no exception While a single request to an API might cost a fraction of a penny, imagine using that API to create an amazing weather app that gets used all over the world you could easily have thousands of people accessing that data every minute The cost to handle that traffic could quickly balloon up to significant sums for the API service As such, you'll find that most API services, if not all, provide paid tiers that come with the ability to make more frequent requests, or provide access to more information unavailable in lower tiers For example, Visual Crossing's free version allows 1000 calls/requests per day with a limited amount of information (albeit sufficient for a pet project) On the other hand, the Enterprise version provides unlimited API calls per month, has Energy data, Maritime data all those bells and whistles (details about Visual Crossing's pricing if you're curious) So, if your app becomes successful and needs additional features, you'll probably need to pay for a better account Because your API key is your key to these services and data, securing them is an important habit, especially if you are using a paid tier There are plenty of bots that crawl GitHub repositories solely for hardcoded/unsecured API keys, allowing bad agents to then access and utilize the services and data you've paid for",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "1ecb0508587afb4fe309b3aa9326fd03",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "you're curious) So, if your app becomes successful and needs additional features, you'll probably need to pay for a better account Because your API key is your key to these services and data, securing them is an important habit, especially if you are using a paid tier There are plenty of bots that crawl GitHub repositories solely for hardcoded/unsecured API keys, allowing bad agents to then access and utilize the services and data you've paid forIn fact, the more eagle-eyed readers may have noticed a problem with the demonstration above: The API key is right there in the URL request It would not take much for an internet traffic sniffer to pick up on the API key, least of all someone looking over your shoulder At this point in the curriculum, though, this point is largely moot After all, we're leveraging free access to APIs, and the majority of our apps are only going to be used by us and the people that view our portfolios Just make a note of the severe limitations of using API keys as demonstrated above for now Securing API keys requires handling things server-side, and we are only focusing on the frontend concepts here If you are in the Full Stack JavaScript pathway, the backend will be covered later in the curriculum Back to Visual Crossing Go ahead and create a free Visual Crossing account to obtain an API key You can find your API key in your account profile page Once you have your key, try making a new request with the city of your choice, and the API key passed in as query string parameters, like the example above You'll hopefully see a proper response, something like:\nJSON\n{\"queryCost\":1,\"latitude\":51 5064,\"longitude\":-0 12721,\"resolvedAddress\":\"London, England, United Kingdom\",\"address\":\"london\",\"timezone\":\"Europe/London\",\"tzoffset\":1 0,\"description\":\"Similar temperatures continuing with a chance of rain tomorrow, Tuesday & Thursday \",\"days\":[{\"datetime\":\"2024-07-06\",\"datetimeEpoch\":1720220400,\"tempmax\":61 4,\"tempmin\":53 1,\"temp\":57 8,\"feelslikemax\":61 4,\"feelslikemin\":53 1,\"feelslike\":57 8,\"dew\":51 3,\"humidity\":79 7,\"precip\":0 457,\"precipprob\":100 0,\"precipcover\":75 0,\"preciptype\":[\"rain\"],\"snow\":0 0,\"snowdepth\":0 0,\"windgust\":35 3,\"windspeed\":21",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 515,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "e413d78ef0adf607ae4fddf0becf5bfc",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "your account profile page Once you have your key, try making a new request with the city of your choice, and the API key passed in as query string parameters, like the example above You'll hopefully see a proper response, something like: JSON {\"queryCost\":1,\"latitude\":51 5064,\"longitude\":-0 12721,\"resolvedAddress\":\"London, England, United Kingdom\",\"address\":\"london\",\"timezone\":\"Europe/London\",\"tzoffset\":1 0,\"description\":\"Similar temperatures continuing with a chance of rain tomorrow, Tuesday & Thursday \",\"days\":[{\"datetime\":\"2024-07-06\",\"datetimeEpoch\":1720220400,\"tempmax\":61 4,\"tempmin\":53 1,\"temp\":57 8,\"feelslikemax\":61 4,\"feelslikemin\":53 1,\"feelslike\":57 8,\"dew\":51 3,\"humidity\":79 7,\"precip\":0 457,\"precipprob\":100 0,\"precipcover\":75 0,\"preciptype\":[\"rain\"],\"snow\":0 0,\"snowdepth\":0 0,\"windgust\":35 3,\"windspeed\":219,\"winddir\":262 6,\"pressure\":1001 8,\"cloudcover\":70 5,\"visibility\":8 3,\"solarradiation\":147 5,\"solarenergy\":12 9,\"uvindex\":6 0,\"severerisk\":10 0,\"sunrise\":\"04:52:02\",\"sunriseEpoch\":1720237922,\"sunset\":\"21:18:20\",\"sunsetEpoch\":1720297100,\"moonphase\":0 02,\"conditions\":\"Rain, Partially cloudy\",\"description\":\"Partly cloudy throughout the day with a chance of rain throughout the day \",\"icon\":\"rain\",\"stations\":[\"EGWU\",\"EGLL\",\"D5621\",\"EGLC\"]}]}\n(This preview above is just the tip of the iceberg, the actual response is a lot longer )\n#### Visual Crossing's query builder\nCurious how to construct queries Check out [Visual Crossing's query builder](https://www visualcrossing com/weather/weather-data-services) This will help you build a query with the region as the only input Play around with the location and query options Neat, isn't it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "75313140948ef0ee872b27e497eb060a",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "Partially cloudy\",\"description\":\"Partly cloudy throughout the day with a chance of rain throughout the day \",\"icon\":\"rain\",\"stations\":[\"EGWU\",\"EGLL\",\"D5621\",\"EGLC\"]}]} (This preview above is just the tip of the iceberg, the actual response is a lot longer ) #### Visual Crossing's query builder Curious how to construct queries Check out [Visual Crossing's query builder](https://www visualcrossing com/weather/weather-data-services) This will help you build a query with the region as the only input Play around with the location and query options Neat, isn't itThe output uses the \"Grid\" tab, but our query is in the \"API\" tab, and we want to learn *how* the query was structured Click on the \"API\" tab and it will show the query that led to the grid format you just saw Congratulations on making your first API request Fetching data\nSo how do we actually get the data from an API into our code A couple of years ago the main way to access API data in your code was using an XMLHttpRequest This function still works in all browsers, but unfortunately, it is not particularly nice to use The syntax looks something like this:\n```javascript\n// Just getting XHR is a mess if (window XMLHttpRequest) { // Mozilla, Safari, request = new XMLHttpRequest();\n} else if (window ActiveXObject) { // IE\ntry {\nrequest = new ActiveXObject('Msxml2 XMLHTTP');\n}\ncatch (e) {\ntry {\nrequest = new ActiveXObject('Microsoft XMLHTTP');\n}\ncatch (e) {}\n}\n}\n// Open, send request open('GET', 'https://url com/some/url', true);\nrequest send(null);\n```\nOuch That was painful Developers, feeling the pain of having to write that stuff out, began writing 3rd party libraries to take care of this and make it much easier to use Some of the more popular libraries are axios and superagent, both of which have their strengths and weaknesses More recently, however, web browsers have begun to implement a new native function for making HTTP requests, and that's the one we're going to use and stick with for now Meet fetch:\njavascript\n// URL (required), options (optional)\nfetch('https://url com/some/url') then(function(response) {\n// Successful response :)\n})",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "6f809b17815dc4b052d9d39310661319",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "take care of this and make it much easier to use Some of the more popular libraries are axios and superagent, both of which have their strengths and weaknesses More recently, however, web browsers have begun to implement a new native function for making HTTP requests, and that's the one we're going to use and stick with for now Meet fetch: javascript // URL (required), options (optional) fetch('https://url com/some/url') then(function(response) { // Successful response :) })catch(function(err) {\n// Error :(\n});\nIn case you've forgotten, scroll back up and look at how you would use XHR to do the same thing While you're admiring how nice and clean that code is, notice the then() and catch() functions there Do you remember what those are (PROMISES )\nLet's change up our API for this example We're going to walk through an example using fetch with the giphy API to display a random gif on a webpage The API requires you sign up to giphy and get a free API key Giphy has several methods for searching and finding GIFs which you can read about in their documentation Today we're just going to use the 'translate' endpoint because it's the simplest one for our purposes You can find the appropriate URL in their documentation by scrolling down to the translate endpoint information from Giphy What it tells us is that the correct URL is api giphy com/v1/gifs/translate and that it requires 2 parameters, your api_key and a search term If you put it all together correctly (with YOUR API key) you should get something like this:\njavascript\n'https://api giphy com/v1/gifs/translate api_key=YOUR_KEY_HERE&s=cats'\n// of course we're searching for cats\nGo ahead and try that URL (with YOUR API key) in a browser If everything goes well you should get a relatively long string of data and no errors CORS\nA side note before we start putting this into our code For security reasons, by default, browsers restrict HTTP requests to outside sources (which is exactly what we're trying to do here) There's a very small amount of setup that we need to do to make fetching work Learning about this is outside our scope right now, but if you want to learn a bit about it this Wikipedia article about CORS and this JavaScript info article on CORS are good starting points",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "e75efde6f78ffc9f7e7b53dcb844c3e1",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "this into our code For security reasons, by default, browsers restrict HTTP requests to outside sources (which is exactly what we're trying to do here) There's a very small amount of setup that we need to do to make fetching work Learning about this is outside our scope right now, but if you want to learn a bit about it this Wikipedia article about CORS and this JavaScript info article on CORS are good starting pointsWhether or not you took the detour to learn all about Cross Origin Resource Sharing (CORS) the fix is straightforward With fetch, you are able to easily supply a JavaScript object for options It comes right after the URL as a second parameter to the fetch function:\njavascript\nfetch('url url com/api', {\nmode: 'cors'\n});\nAdding the {mode: 'cors'} after the URL, as shown above, will solve our problems for now In the future, however, you may want to look further into the implications of this restriction Let's do this\nFor now, we're going to keep all of this in a single HTML file So go ahead and create one with a single blank image tag and an empty script tag in the body ```html\nDocument\n```\nIn the script tag, let's start by selecting the image and assigning it to a variable so that we can change the URL once we've received it from the Giphy API ```html\n```\nAdding fetch with our URL from above is also relatively easy:\n```html\n```\nYou should now be able to open the HTML file in your browser, and while you won't see anything on the page, you should have something logged in the console The trickiest part of this whole process is deciphering how to get to the data you desire from the server's response In this case, inspecting the browser's console will reveal that what's being returned is another Promise to get the data we need another then() function ```html\n```\nNow we have a JavaScript object and if you inspect it closely enough you'll find that the data we need (an image URL) is nested rather deeply inside the object:\nTo get to the data we need to drill down through the layers of the object until we find what we want ```html\n```\nRunning the file should now log the URL of the image",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "3e2a364f7697fe0238c55eda0d224ec3",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "to get the data we need another then() function ```html ``` Now we have a JavaScript object and if you inspect it closely enough you'll find that the data we need (an image URL) is nested rather deeply inside the object: To get to the data we need to drill down through the layers of the object until we find what we want ```html ``` Running the file should now log the URL of the imageAll that's left to do is set the source of the image that's on the page to the URL we've just accessed:\n```html\n```\nIf all goes well, you should see a new image on the page every time you refresh If you've gotten lost along the way, check out this jsbin project demonstrating fetching from giphy Besides the glorious styling, this is what your version should look like While we are pushing this API key to the frontend, this isn't something you should do with any key that is not free Keys used on the client-side are considered public knowledge, so caution must be taken with sensitive and non-free keys Handling keys without pushing them to the frontend will be taught in later sections if you haven't already learned it in the Ruby course Assignment\n1 Read the [Fetch documentation on MDN](https://developer mozilla org/en-US/docs/Web/API/Fetch_API/Using_Fetch) It's not all that complicated to use, but we've only really scratched the surface at this point 1 Check out this [list of Public APIs](https://github com/n0shake/Public-APIs) and let your imagination go wild 1 Expand on our little project here by adding a button that fetches a new image without refreshing the page 1 Add a search box so users can search for specific gifs You should also investigate adding a ` catch()` to manage some errors (i e invalid URL) Keep in mind that Giphy responds with a status code of 200 with an empty data array when it doesn't find any gifs with the searched keyword, in other words the ` catch()` won't be executed Adjust your code to effectively handle such scenarios, displaying a default image or an error message if the search fails Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is an API How is access to an API restricted How do you fetch and extract data from an API",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "06aefbc8cce5ca7a5bdf1213d88aa8de",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "displaying a default image or an error message if the search fails Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is an API How is access to an API restricted How do you fetch and extract data from an APIWhy might your API request be blocked by the browser, and how might you fix it Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This article on APIs by Ryan Thelin covers some extra topics like API release policies, API protocols and API architectural styles",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17515,
      "relative_path": "git_repos\\odin-project\\javascript\\asynchronous_javascript_and_apis\\working_with_apis.md",
      "source_type": "git_repo"
    },
    "token_count": 141,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "3319f8ace73164e504c47e76821268d8",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_binary_search_trees.md",
    "source_type": "git_repo",
    "title": "project_binary_search_trees",
    "content": "Introduction\nYou have learned about binary search trees, where you take a group of data items and turn them into a tree full of nodes, with each left node being \"lower\" than each right node The tree starts with the \"root node\" and any node with no children is called a \"leaf node\" You have also learned about tree traversal algorithms like breadth-first and depth-first Now, let's take a look at balanced binary search trees (BST) A BST allows fast operations for lookup, insertion, and deletion of data items Read this article on building balanced BSTs Here is a video on building balanced BSTs as well Although the last resource does not use JavaScript, you should understand it well enough to develop your own pseudocode Assignment\nYou'll build a balanced BST in this assignment Do not use duplicate values because they make it more complicated and result in trees that are much harder to balance Therefore, be sure to always remove duplicate values or check for an existing value before inserting 1 Build a `Node` class/factory It should have an attribute for the data it stores as well as its left and right children 1 Build a `Tree` class/factory which accepts an array when initialized The `Tree` class should have a `root` attribute, which uses the return value of `buildTree` which you'll write next 1 Write a `buildTree(array)` function that takes an array of data (e g , `[1, 7, 4, 23, 8, 9, 4, 3, 5, 7, 9, 67, 6345, 324]`) and turns it into a balanced binary tree full of `Node` objects appropriately placed (don't forget to sort and remove duplicates ) The `buildTree` function should return the level-0 root node **Tip:** If you would like to visualize your binary search tree, here is a `prettyPrint()` function that will `console log` your tree in a structured format This function will expect to receive the root of your tree as the value for the `node` parameter ```javascript\nconst prettyPrint = (node, prefix = '', isLeft = true) => {\nif (node === null) {\nreturn;\n}\nif (node right == null) {\nprettyPrint(node right, `${prefix}${isLeft '│   ' : '    '}`, false);\n}\nconsole log(`${prefix}${isLeft",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_binary_search_trees.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a50f0b2c6ba98c994cac13b9bdc0e3d3",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_binary_search_trees.md",
    "source_type": "git_repo",
    "title": "project_binary_search_trees",
    "content": "visualize your binary search tree, here is a `prettyPrint()` function that will `console log` your tree in a structured format This function will expect to receive the root of your tree as the value for the `node` parameter ```javascript const prettyPrint = (node, prefix = '', isLeft = true) => { if (node === null) { return; } if (node right == null) { prettyPrint(node right, `${prefix}${isLeft '│ ' : ' '}`, false); } console log(`${prefix}${isLeft'└── ' : '┌── '}${node data}`);\nif (node left == null) {\nprettyPrint(node left, `${prefix}${isLeft '    ' : '│   '}`, true);\n}\n};\n```\n1 Write `insert(value)` and `deleteItem(value)` functions that insert/delete the given value You'll have to deal with several cases for delete, such as when a node has children or not If you need additional resources, check out these two articles on [inserting](https://www geeksforgeeks org/insertion-in-binary-search-tree/ ref=lbp) and [deleting](https://www geeksforgeeks org/binary-search-tree-set-2-delete/ ref=lbp), or this [video on BST inserting/removing](https://youtu be/wcIRPqTR3Kc) with several visual examples You may be tempted to implement these methods using the original input array used to build the tree, but it's important for the efficiency of these operations that you don't do this If we refer back to the [Big O Cheatsheet](https://www bigocheatsheet com/), we'll see that binary search trees can insert/delete in `O(log n)` time, which is a significant performance boost over arrays for the same operations To get this added efficiency, your implementation of these methods should traverse the tree and manipulate the nodes and their connections 1 Write a `find(value)` function that returns the node with the given value 1 Write a `levelOrderForEach(callback)` function that accepts a callback function as its parameter `levelOrderForEach` should traverse the tree in breadth-first level order and call the callback on each node as it traverses, passing the whole node as an argument, similarly to how `Array prototype forEach` might work for arrays `levelOrderForEach` may be implemented using either iteration or recursion (try implementing both )",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_binary_search_trees.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8e0f4714a67b7a4793d0e2f3f6abf98b",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_binary_search_trees.md",
    "source_type": "git_repo",
    "title": "project_binary_search_trees",
    "content": "connections 1 Write a `find(value)` function that returns the node with the given value 1 Write a `levelOrderForEach(callback)` function that accepts a callback function as its parameter `levelOrderForEach` should traverse the tree in breadth-first level order and call the callback on each node as it traverses, passing the whole node as an argument, similarly to how `Array prototype forEach` might work for arrays `levelOrderForEach` may be implemented using either iteration or recursion (try implementing both )If no callback function is provided, [throw an Error](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Statements/throw) reporting that a callback is required **Tip:** You will want to use an array acting as a queue to keep track of all the child nodes that you have yet to traverse and to add new ones to the list ([video on level order traversal](https://www youtube com/watch v=86g8jAQug04)) 1 Write `inOrderForEach(callback)`, `preOrderForEach(callback)`, and `postOrderForEach(callback)` functions that also accept a callback as a parameter Each of these functions should traverse the tree in their respective depth-first order and pass each node to the provided callback The functions should throw an Error if no callback is given as an argument, like with `levelOrderForEach` The video [Binary Tree Traversal: Preorder, Inorder, Postorder](https://www youtube com/watch v=gm8DUJJhmY4) explains the topic clearly 1 Write a `height(value)` function that returns the height of the node containing the given value Height is defined as the number of edges in the longest path from that node to a leaf node If the value is not found in the tree, the function should return null 1 Write a `depth(value)` function that returns the depth of the node containing the given value Depth is defined as the number of edges in the path from that node to the root node If the value is not found in the tree, the function should return null 1 Write an `isBalanced` function that checks if the tree is balanced A binary tree is considered balanced if, for every node in the tree, the height difference between its left and right subtrees is no more than 1, and both the left and right subtrees are also balanced #### Pitfall with checking balance\nA common mistake is only checking the height difference between the root's left and right children",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_binary_search_trees.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f652cd57dcff726484ad8255a760f139",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_binary_search_trees.md",
    "source_type": "git_repo",
    "title": "project_binary_search_trees",
    "content": "tree, the function should return null 1 Write an `isBalanced` function that checks if the tree is balanced A binary tree is considered balanced if, for every node in the tree, the height difference between its left and right subtrees is no more than 1, and both the left and right subtrees are also balanced #### Pitfall with checking balance A common mistake is only checking the height difference between the root's left and right childrenThat is not enough — you must check the balance condition for every node 1 Write a `rebalance` function that rebalances an unbalanced tree **Tip:** You'll want to use a traversal method to provide a new array to the `buildTree` function #### Tie it all together\nWrite a driver script that does the following:\n1 Create a binary search tree from an array of random numbers < 100 You can create a function that returns an array of random numbers every time you call it if you wish 1 Confirm that the tree is balanced by calling `isBalanced` 1 Print out all elements in level, pre, post, and in order 1 Unbalance the tree by adding several numbers > 100 1 Confirm that the tree is unbalanced by calling `isBalanced` 1 Balance the tree by calling `rebalance` 1 Confirm that the tree is balanced by calling `isBalanced` 1 Print out all elements in level, pre, post, and in order Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Yicheng Gong has some excellent videos that help visualize the call stack when traversing binary search trees: In-order, Post-order, and Pre-order Traversal Algorithms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_binary_search_trees.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "167ff105681d7ce636b52d9cdd71dce9",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "Introduction\nOne of the most used data structures across programming languages is a hash table, aka hash map A hash map is similar to a conventional array, except it uses \"keys\" as indices rather than meaningless sequential numbering of the values With the data organized in this way, we get quick search speeds for keys in the structure If you've worked with JavaScript Object Literals ({}), Set, or Map, then you have used structures based on hash tables But how do they work internally How can we save key value pairs and later retrieve them In this lesson, you will learn how it all works, and even implement your own hash map in the next project To start, here is a brief description of a hash map: a hash map takes in a key value pair, produces a hash code, and stores the pair in a bucket Hash codes Buckets What Don't fret, we'll learn all about these concepts and more Buckle up and let's dive in Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Hash codes and how to generate them Hash maps and how they work internally What is a hash code Let's start by learning what it means to hash a value Hashing involves taking an input in and generating a corresponding output A hash function should be a pure function Hashing the same input should always return the same hash code, and there should be no random generation component For example, let's look at a hashing function that takes a name and gives us the first letter of that name:\njavascript\nfunction hash(name) {\nreturn name charAt(0);\n}\nWe created our first basic hashing function There is a key difference between hashing and ciphering (encryption): reversibility Hashing is a one-way process Using the above example, you can make a hash code from a name, but you cannot take a hash code and revert it back to a name If you have a name \"Carlos\", we can hash it to \"C\" But it's impossible to reverse it from \"C\" back to its original form You cannot know if it's \"Carlos\", maybe it's \"Carla\" or \"Carrot\" We don't know Hashing is very good for security Given a password, you can save the hash of that password rather than the password's plain text If someone steals your hashes, they cannot know the original passwords since they are unable to reverse the hash back to the password Use cases\nWhat can we do with those hashes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15657,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "382fb95cd72c055b41f254218baa0ad8",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "from \"C\" back to its original form You cannot know if it's \"Carlos\", maybe it's \"Carla\" or \"Carrot\" We don't know Hashing is very good for security Given a password, you can save the hash of that password rather than the password's plain text If someone steals your hashes, they cannot know the original passwords since they are unable to reverse the hash back to the password Use cases What can we do with those hashesYou have probably seen it in school where a folder is organized into smaller folders, and each folder holds information about people with the same first letter:\ntext\nC:\ncarlos txt\ncarla txt\nB:\nbryan txt\nbob txt\nbeatrice txt\nbella txt\nbenjamin txt\nbianca txt\nIf we get a new student in our school with the name \"Carlos\", we can run our hash function to find out which folder to place them in hash(\"Carlos\") -> \"C\" so we put \"Carlos\" in the directory labeled C You might have spotted a problem: what if our school is populated with many people whose names share the same first letter C Then we will have a directory labeled C that holds too many names while other directories could be empty To eliminate this duplication and better separate our students, we need to rework our hash function javascript\nfunction hash(name, surname) {\nreturn name charAt(0) + surname charAt(0);\n}\nInstead of just taking the first name letter, we take the first name and last name letters \"Carlos Smith\" will have a hash code of \"CS\" This will spread our students among more directories and will eliminate many duplicate hash codes from being generated But it still doesn't solve our problem What if we have a common combination of first letters in students' names Then we will still have an imbalance in the size of the directories We need to make it easier to find the person we're looking for, so let's rework our hash code ```javascript\nfunction stringToNumber(string) {\nlet hashCode = 0;\nfor (let i = 0; i < string length; i++) {\nhashCode += string charCodeAt(i);\n}\nreturn hashCode;\n}\nfunction hash(name, surname) {\nreturn stringToNumber(name) + stringToNumber(surname);\n}\n```\nWe not only consider the first letters with this technique Instead, we take the entire name and convert it into numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15657,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "9cccc437aff850409616139cb2f28faa",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "need to make it easier to find the person we're looking for, so let's rework our hash code ```javascript function stringToNumber(string) { let hashCode = 0; for (let i = 0; i < string length; i++) { hashCode += string charCodeAt(i); } return hashCode; } function hash(name, surname) { return stringToNumber(name) + stringToNumber(surname); } ``` We not only consider the first letters with this technique Instead, we take the entire name and convert it into numbersYou might be thinking, wouldn't it just be better to save the whole name as a hash code That is true This would make it unique for each name, but in the context of hash maps, we need the hash code to be a number This number will serve as the index to the bucket that will store the key value pair More on buckets in the next section Buckets\nBuckets are storage that we need to store our elements We can consider each index of an array to have a bucket For a specific key, we decide which bucket to use for storage through our hash function The hash function returns a number that serves as the index of the array at which we store this specific key value pair Let's say we wanted to store a person's full name as a key \"Fred\" with a value of \"Smith\":\nPass \"Fred\" into the hash function to get the hash code which is 385 Find the bucket at index 385 Store the key value pair in that bucket In this case, the key would be \"Fred\" and the value would be \"Smith\" What if the bucket at index 385 already contains an item with the same key \"Fred\" We check if it's the same item by comparing the keys, then we overwrite the value with our new value This is how we can only have unique values inside a Set A Set is similar to a hash map but the key difference (pun intended) is that a Set will have nodes with only keys and no values This is an oversimplified explanation; we'll discuss more internal mechanics later in the lesson Now if we wanted to get a value using a key:\nTo retrieve the value, we hash the key and calculate the index of its bucket If the bucket is not empty, then we go to that bucket Now we compare if the node's key is the same key that was used for the retrieval If it is, then we can return the node's value Otherwise, we return null",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15657,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "375a2686eeaa725905869f04c12681d8",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "more internal mechanics later in the lesson Now if we wanted to get a value using a key: To retrieve the value, we hash the key and calculate the index of its bucket If the bucket is not empty, then we go to that bucket Now we compare if the node's key is the same key that was used for the retrieval If it is, then we can return the node's value Otherwise, we return nullMaybe you are wondering, why are we comparing the keys if we already found the index of that bucket Remember, a hash code is just the location Different keys might generate the same hash code We need to make sure the key is the same by comparing both keys that are inside the bucket This is it, making this will result in a hash map with has, set and get Insertion order is not maintained\nA hash map does not guarantee insertion order when you iterate over it The translation of hash codes to indexes does not follow a linear progression from the first to the last index Instead, it is more unpredictable, irrespective of the order in which items are inserted That means if you are to retrieve the array of keys and values to iterate over them, then they will not be in order of when you inserted them Some libraries implement hash maps with insertion order in mind such as JavaScript's own Map For the coming project however we will be implementing an unordered hash map Example: if we insert the values Mao, Zach, Xari in this order, we may get back [\"Zach\", \"Mao\", \"Xari\"] when we call an iterator If iterating over a hash map frequently is your goal, then this data structure is not the right choice for the job A simple array would be better Collisions\nWe have another problem that we need to deal with: collisions A collision occurs when two different keys generate the exact same hash code Because they have the same hash code, they will land in the same bucket Let's take an example: hashing the name \"Sara\" and the name \"raSa\" will generate the same hash code That is because the letters in both names are the same, just arranged differently We can rework our stringToNumber function so that it can give us unique hash codes that depend on where the letters appear in the name using an algorithm ```javascript\nfunction stringToNumber(string) {\nlet hashCode = 0;\nconst primeNumber = 31;\nfor (let i = 0; i < string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15657,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "8464767fc0a553d3f98efd11e9abc53f",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "hashing the name \"Sara\" and the name \"raSa\" will generate the same hash code That is because the letters in both names are the same, just arranged differently We can rework our stringToNumber function so that it can give us unique hash codes that depend on where the letters appear in the name using an algorithm ```javascript function stringToNumber(string) { let hashCode = 0; const primeNumber = 31; for (let i = 0; i < stringlength; i++) {\nhashCode = primeNumber * hashCode + string charCodeAt(i);\n}\nreturn hashCode;\n}\n```\nWith our new function we will have different hash codes for the names \"Sara\" and \"raSa\" This is because even if both names have the same letters, some of the letters appear in different locations The hash code started to change because we are multiplying the old hash with every new iteration and then adding the letter code Notice the usage of a prime number We could have chosen any number we wanted, but prime numbers are preferable Multiplying by a prime number will reduce the likelihood of hash codes being evenly divisible by the bucket length, which helps minimize the occurrence of collisions Even though we reworked our hash function to avoid the \"Sara\"/\"raSa\" collision, there is always the possibility for collisions Since we have a finite number of buckets, there is no way to eliminate collisions entirely Let's try to minimize them Dealing with collisions\nUp until now, our hash map is a one-dimensional data structure What if each Node inside the bucket can store more than one value Enter Linked Lists Now, each bucket will be a Linked List When inserting into a bucket, if it's empty, we insert the head of Linked List If a head exists in a bucket, we follow that Linked List to add to the end of it You probably understand by this point why we must write a good hashing function which eliminates as many collisions as possible Most likely you will not be writing your own hash functions, as most languages have it built in, but understanding how hash functions work is important Growth of a hash map\nLet's talk about our number of buckets We don't have infinite memory, so we can't have an infinite amount of them We need to start somewhere, but starting too big is also a waste of memory if we're only going to have a hash map with a single value in it So to deal with this issue, we should start with a small array for our buckets",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15657,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "e5b12db296ec8504fce21e5e9350de32",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "functions work is important Growth of a hash map Let's talk about our number of buckets We don't have infinite memory, so we can't have an infinite amount of them We need to start somewhere, but starting too big is also a waste of memory if we're only going to have a hash map with a single value in it So to deal with this issue, we should start with a small array for our bucketsWe'll use an array of size 16 Most programming languages start with the default size of `16` because it's a power of 2, which helps with some techniques for performance that require bit manipulation for indexes How are we going to insert into those buckets when our hash function generates big numbers like 20353924 We make use of the modulo % operation given any number modulo by 16 we will get a number between 0 and 15 For example, if we are to find the bucket where the value \"Manon\" will land, then we do the following:\nAs we continue to add nodes into our buckets, collisions get more and more likely Eventually, however, there will be more nodes than there are buckets, which guarantees a collision (check the additional resources section for an explanation of this fact if you're curious) Remember we don't want collisions In a perfect world, each bucket will either have 0 or 1 node only, so we grow our buckets array to have more chance that our nodes will spread and not stack up in the same buckets To grow our array, we create a new one that is double its size and then copy all existing nodes over to the buckets of this new array, hashing their keys again When do we know that it's time to grow our buckets array To deal with this, our hash map class needs to keep track of two new fields, the capacity and the load factor The capacity is the total number of buckets we currently have The load factor is a number that we assign our hash map to at the start It's the factor that will determine when it is a good time to grow our buckets array Hash map implementations across various languages use a load factor between 0 75 and 1 The product of these two numbers gives us a number, and we know it's time to grow when there are more entries in the hash map than that number For example, if there are 16 buckets, and the load factor is 0 8, then we need to grow the buckets array when there are more than 16 * 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15657,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "464129f7651b013372d6877fa6b8ae82",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "buckets array Hash map implementations across various languages use a load factor between 0 75 and 1 The product of these two numbers gives us a number, and we know it's time to grow when there are more entries in the hash map than that number For example, if there are 16 buckets, and the load factor is 0 8, then we need to grow the buckets array when there are more than 16 * 08 = 12 8 entries - which happens on the 13th entry Setting it too low will consume too much memory by having too many empty buckets, while setting it too high will allow our buckets to have many collisions before we resize the array Computation complexity\nA hash map is very efficient in its insertion, retrieval and removal operations This is because we use array indexes to do these operations A hash map has an average case complexity of O(1) for the following methods:\nInsertion\nRetrieval\nRemoval\nAssuming we have a good hash map written The worst case of those operations would be O(n) and that happens when we have all our data hashes to the same exact bucket The complexity itself surfaces because of the linked list, and O(n) is because we are traversing the linked list to insert yet again another node into the same bucket, which happens specifically because of collisions The growth of our hash map has the complexity of O(n) at all times Assignment\n- Read [What are Hash Functions and How to choose a good Hash Function](https://www geeksforgeeks org/what-are-hash-functions-and-how-to-choose-a-good-hash-function) for a more technical overview of a hash function - Watch this video from CS50 that explains the concept of [hash maps using buckets](https://www youtube com/watch v=btT4bCOvqjs) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does it mean to hash What are buckets What is a collision When is it a good time to grow our buckets array Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This discussion goes through the usages of prime numbers in hash functions The pigeonhole principle mathematically guarantees collisions when there are more nodes than boxes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15657,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "64e459fb3affd67675e98e96dc75a15a",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
    "source_type": "git_repo",
    "title": "hash_map_data_structure",
    "content": "you are not expected to memorize or master this knowledge What does it mean to hash What are buckets What is a collision When is it a good time to grow our buckets array Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental This discussion goes through the usages of prime numbers in hash functions The pigeonhole principle mathematically guarantees collisions when there are more nodes than boxesCheck out Hashing if you want to get a better fundamental understanding of hash functions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15657,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\hash_map_data_structure.md",
      "source_type": "git_repo"
    },
    "token_count": 99,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "97135f1de0f4668f1e2412eb38c20497",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_knights_travails.md",
    "source_type": "git_repo",
    "title": "project_knights_travails",
    "content": "Introduction\nNow you're a pro with DFS and BFS Let's try using our search algorithms on a real problem For this project, you'll need to use a graph, a data structure that's similar (but not identical) to a binary tree For a good introduction on what graphs are, reference Khan Academy's \"Describing Graphs\" Don't forget to look at the section on representing graphs, as it should give you some good ideas on how to actually implement graphs in your code Given enough turns, a knight on a standard 8x8 chess board can move from any square to any other square Its basic move is two steps forward and one step to the side or one step forward and two steps to the side It can face any direction All the possible places you can end up after one move look like this:\nNote: The picture is only to explain the problem, There is no need to create a GUI In this problem, the chessboard can be represented as a graph:\nEach square on the board is a node (or vertex) A knight’s valid moves from any square represent the edges (or connections) between the vertices Thus, the problem of finding the shortest path for the knight’s movement becomes a graph traversal problem The goal is to traverse the graph (the chessboard) to find the shortest route between two nodes (the start and end positions) Vertices and Edges\nThe vertices in this graph are each of the possible positions on the chessboard, represented by a pair of coordinates like [x, y], where x and y are between 0 and 7 The edges are the valid knight moves between vertices For example, from [0,0], a knight can move to [2,1], [1,2], and so on Each of these moves represents a connection between the vertex [0,0] and the other reachable vertices Graph Representation\nWhile solving this problem, you don’t need to explicitly create a graph object with vertices and edges Instead, you can think of the graph as implicit The knight starts on a specific vertex, and the algorithm will dynamically explore all possible moves (edges) to other vertices (positions on the board) as it traverses the board Helpful Concepts Before You Begin\nYou’ve worked with BFS on binary trees in the previous lesson, but applying it on a chessboard (a grid) can feel like a big leap — and that’s totally normal",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5157,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_knights_travails.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5654c25b902eab23498061f0f2bd8480",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_knights_travails.md",
    "source_type": "git_repo",
    "title": "project_knights_travails",
    "content": "vertices and edges Instead, you can think of the graph as implicit The knight starts on a specific vertex, and the algorithm will dynamically explore all possible moves (edges) to other vertices (positions on the board) as it traverses the board Helpful Concepts Before You Begin You’ve worked with BFS on binary trees in the previous lesson, but applying it on a chessboard (a grid) can feel like a big leap — and that’s totally normalHere are some core ideas to keep in mind:\nRepresent positions as coordinates: Each square can be written as [x, y], where both values range from 0 to 7 Use a queue: Like in tree BFS, you’ll use a queue to keep track of the next positions to explore Track visited positions: Unlike trees, graphs can revisit the same position through different paths — so be sure to track visited positions to avoid loops or unnecessary repeats Thinking of the board as a grid-based graph instead of a tree will help you apply BFS much more effectively here Assignment\nYour task is to build a function knightMoves that shows the shortest possible way to get from one square to another by outputting all squares the knight will stop on along the way You can think of the board as having 2-dimensional coordinates Calling your function would therefore look like:\nknightMoves([0,0],[1,2]) // returns [[0,0],[1,2]]\nSometimes *there is more than one fastest path* Examples of this are shown below Any answer is correct as long as it follows the rules and gives the shortest possible path - `knightMoves([0,0],[3,3])` may return `[[0,0],[2,1],[3,3]]` or `[[0,0],[1,2],[3,3]]` - `knightMoves([3,3],[0,0])` may return `[[3,3],[2,1],[0,0]]` or `[[3,3],[1,2],[0,0]]` - `knightMoves([0,0],[7,7])` may return `[[0,0],[2,1],[4,2],[6,3],[4,4],[6,5],[7,7]]` or `[[0,0],[2,1],[4,2],[6,3],[7,5],[5,6],[7,7]]` 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5157,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_knights_travails.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4466711527efa2b436b529044d9488dc",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_knights_travails.md",
    "source_type": "git_repo",
    "title": "project_knights_travails",
    "content": "the way You can think of the board as having 2-dimensional coordinates Calling your function would therefore look like: knightMoves([0,0],[1,2]) // returns [[0,0],[1,2]] Sometimes *there is more than one fastest path* Examples of this are shown below Any answer is correct as long as it follows the rules and gives the shortest possible path - `knightMoves([0,0],[3,3])` may return `[[0,0],[2,1],[3,3]]` or `[[0,0],[1,2],[3,3]]` - `knightMoves([3,3],[0,0])` may return `[[3,3],[2,1],[0,0]]` or `[[3,3],[1,2],[0,0]]` - `knightMoves([0,0],[7,7])` may return `[[0,0],[2,1],[4,2],[6,3],[4,4],[6,5],[7,7]]` or `[[0,0],[2,1],[4,2],[6,3],[7,5],[5,6],[7,7]]` 1Think about the rules of the board and knight, and make sure to follow them 1 From every square, multiple moves are possible Choose a data structure that will allow you to work with them Don't allow any moves to go off the board 1 Decide which search algorithm is best to use for this case Hint: one of them could be a potentially infinite series 1 Use the chosen search algorithm to find the shortest path between the starting square (or node) and the ending square Output what that full path looks like, e g :\n```bash\n> knightMoves([3,3],[4,3])\n=> You made it in 3 moves Here's your path:\n[3,3]\n[4,5]\n[2,4]\n[4,3]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5157,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_knights_travails.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "017c059d74126ad47a0bdc280b1b912b",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_hash_map.md",
    "source_type": "git_repo",
    "title": "project_hash_map",
    "content": "Introduction\nYou already know the magic behind hash maps Now it's time to write your own implementation Limitation\nBefore we get started, we need to lay down some ground rules JavaScript's dynamic nature of arrays allows us to insert and retrieve indexes that are outside our array size range Example: if we create an array of size 16 to represent our buckets, nothing stops us from storing items at index 500 This defeats the purpose of limiting storage size in hash maps, so we need to enforce some restrictions Use the following snippet whenever you access a bucket through an index We want to throw an error if we try to access an out-of-bounds index:\njavascript\nif (index < 0 || index >= buckets length) {\nthrow new Error(\"Trying to access index out of bounds\");\n}\nAssignment\nStart by creating a `HashMap` class or factory function It's up to you which you want to use It should have at least two variables for `load factor` and `capacity` Then proceed to create the following methods:\n1 `hash(key)` takes a key and produces a hash code with it We already implemented a fairly good `hash` function in the previous lesson As a reminder:\n```javascript\nfunction hash(key) {\nlet hashCode = 0;\nconst primeNumber = 31;\nfor (let i = 0; i < key length; i++) {\nhashCode = primeNumber * hashCode + key charCodeAt(i);\n}\nreturn hashCode;\n}\n```\nYou are free to use that, or you can conduct your own research on hashing algorithms Beware, this is a deep, deep rabbit hole However, there is one edge case our `hash` function still needs to address For very long keys, our hash code will exceed the maximum integer value allowed by JavaScript Once that happens, calculations become inaccurate, and the chance of collisions significantly increases One way to avoid this issue is to apply the modulo `%` operator on *each iteration* instead of outside the loop at the end You may remember from the [previous lesson](https://www theodinproject com/lessons/javascript-hashmap-data-structure#growth-of-a-hash-map) that we used modulo % operator at the end of the hash function to fit the final hash into the bucket array This approach still works for sizing, but placing modulo % operator inside the loop helps avoid integer overflow for long keys while still keeping the result within bucket range You might find yourself confusing keys with hash codes while accessing key-value pairs later",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7727,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_hash_map.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "200031cff02b04f2334bce36216d4499",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_hash_map.md",
    "source_type": "git_repo",
    "title": "project_hash_map",
    "content": "the end You may remember from the [previous lesson](https://www theodinproject com/lessons/javascript-hashmap-data-structure#growth-of-a-hash-map) that we used modulo % operator at the end of the hash function to fit the final hash into the bucket array This approach still works for sizing, but placing modulo % operator inside the loop helps avoid integer overflow for long keys while still keeping the result within bucket range You might find yourself confusing keys with hash codes while accessing key-value pairs laterWe would like to stress that the key is what your `hash` function will take as an input In a way, we could say that the key is important for us *only* inside the `hash` function, as we never access a bucket directly with the key Instead, we always do so with the hash code In the real world, hash maps can accommodate various data types as keys, including numbers, strings, or objects However, for this project, we will only handle keys of type `string` 1 `set(key, value)` takes two arguments: the first is a key, and the second is a value that is assigned to this key If a key already exists, then the old value is overwritten, and we can say that we *update* the key's value (e g `Carlos` is our key but it is called twice: once with value `I am the old value `, and once with value `I am the new value ` Following this logic, `Carlos` should contain only the latter value) Recall that collisions occur when *TWO DIFFERENT* keys generate the same hash code and get assigned to the same bucket (e g `Rama` and `Sita` are both hashed to `3`, so `3` becomes a location for `Rama` AND `Sita` However, we know that this is not an update because the keys are different) Review the [dealing with collisions](https://www theodinproject com/lessons/javascript-hashmap-data-structure#collisions) section of the previous lesson to find a way to handle our collisions - Remember to grow your buckets to double their capacity when your hash map reaches the `load factor` The methods mentioned later in this assignment can help you handle the growth logic, so you may want to implement this feature near the end However, we mention this with `set()` because it's important to grow buckets exactly as they are being expanded 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7727,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_hash_map.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c6d696c5eafef8e7fa914b43fc234b1a",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_hash_map.md",
    "source_type": "git_repo",
    "title": "project_hash_map",
    "content": "com/lessons/javascript-hashmap-data-structure#collisions) section of the previous lesson to find a way to handle our collisions - Remember to grow your buckets to double their capacity when your hash map reaches the `load factor` The methods mentioned later in this assignment can help you handle the growth logic, so you may want to implement this feature near the end However, we mention this with `set()` because it's important to grow buckets exactly as they are being expanded 1`get(key)` takes one argument as a key and returns the value that is assigned to this key If a key is not found, return `null` 1 `has(key)` takes a key as an argument and returns `true` or `false` based on whether or not the key is in the hash map 1 `remove(key)` takes a key as an argument If the given key is in the hash map, it should remove the entry with that key and return `true` If the key isn't in the hash map, it should return `false` 1 `length()` returns the number of stored keys in the hash map 1 `clear()` removes all entries in the hash map 1 `keys()` returns an array containing all the keys inside the hash map 1 `values()` returns an array containing all the values 1 `entries()` returns an array that contains each `key, value` pair Example: `[[firstKey, firstValue], [secondKey, secondValue]]`\nRemember that a hash map does not preserve insertion order when you are retrieving your hash map's data It is normal and expected for keys and values to appear out of the order you inserted them in #### Test Your Hash Map\n1 Create a new JavaScript file 1 Create a new instance of your hash map and set the load factor to be `0 75` ```javascript\nconst test = new HashMap() // or HashMap() if using a factory\n```\n1 Populate your hash map using the `set(key, value)` method by copying the following:\n```javascript\ntest set('apple', 'red')\ntest set('banana', 'yellow')\ntest set('carrot', 'orange')\ntest set('dog', 'brown')\ntest set('elephant', 'gray')\ntest set('frog', 'green')\ntest set('grape', 'purple')\ntest set('hat', 'black')\ntest set('ice cream', 'white')\ntest set('jacket', 'blue')\ntest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7727,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_hash_map.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "270b9ba7be0adf86d22901e15a50ec19",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_hash_map.md",
    "source_type": "git_repo",
    "title": "project_hash_map",
    "content": "new instance of your hash map and set the load factor to be `0 75` ```javascript const test = new HashMap() // or HashMap() if using a factory ``` 1 Populate your hash map using the `set(key, value)` method by copying the following: ```javascript test set('apple', 'red') test set('banana', 'yellow') test set('carrot', 'orange') test set('dog', 'brown') test set('elephant', 'gray') test set('frog', 'green') test set('grape', 'purple') test set('hat', 'black') test set('ice cream', 'white') test set('jacket', 'blue') testset('kite', 'pink')\ntest set('lion', 'golden')\n```\n1 After populating your hash map with the data above, your hash map's current load levels should now be at `0 75` (full capacity) 1 Now with a full hash map, try overwriting a few nodes using `set(key, value)` This should only overwrite the existing `values` of your nodes and not add new ones, so `length()` should still return the same value and `capacity` should remain the same 1 After that, populate your hash map with the last node below This will make your load levels exceed your `load factor`, triggering your hash map's growth functionality and doubling its `capacity`:\n```javascript\ntest set('moon', 'silver')\n```\n1 If you have implemented your hash map correctly, the load levels of your expanded hash map should drop well below your load factor, and the entries should be spread evenly among the expanded buckets 1 With your new hash map, try overwriting a few nodes using `set(key, value)` Again, this should only overwrite existing `values` of your nodes 1 Test the other methods of your hash map, such as `get(key)`, `has(key)`, `remove(key)`, `length()`, `clear()`, `keys()`, `values()`, and `entries()`, to check if they are still working as expected after expanding your hash map #### Extra Credit\n- Create a `HashSet` class or factory function that behaves the same as a `HashMap` but only contains `keys` with no `values`",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7727,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_hash_map.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d25c8b1cd0ebdb3d67b4dc1b0cb2832e",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_linked_lists.md",
    "source_type": "git_repo",
    "title": "project_linked_lists",
    "content": "Introduction\nIn Computer Science, one of the most basic and fundamental data structures is the\nlinked list, which functions similarly to an array The principal benefit of a linked\nlist over a conventional array is that the list elements can easily be inserted or\nremoved without reallocation of any other elements In some programming languages, the size of an array is a concern and one of the ways\nto overcome that problem and allow dynamically allocated data is using linked lists Luckily in JavaScript, arrays aren't limited to a certain size, and both insertion and deletion can be done trivially at any index using the appropriate built in array method, so you don't have to think about overcoming those limitations So if array size, array insertion and array deletion are not limitations in JavaScript, are linked lists really necessary The short answer to that is no; however, it's the simplest of the dynamic data\nstructures and it will give you a solid foundation, so you can understand more\ncomplex data structures like graphs and binary trees with more ease Structure of a linked list\nA linked list is a linear collection of data elements called nodes that \"point\"\nto the next node by means of a pointer Each node holds a single element of data and a link or pointer to the next node in the list A head node is the first node in the list, a tail node is the last node in the list Below is a basic representation of a linked list:\n[ NODE(head) ] -> [ NODE ] -> [ NODE(tail) ] -> null\nFor a more thorough explanation, use these resources:\nLinked Lists in Plain English\nWhat's a Linked List, Anyway A more verbose explanation with plenty of diagrams\nAssignment\n#### Running ES6 modules in Node\nNode v22 (which became LTS in October 2024) can now automatically detect ES6 modules and run them without any further configuration If you are using ES6 modules and run into errors due to Node not recognising the syntax, make sure you [update Node to the latest LTS version](https://www theodinproject com/lessons/foundations-installing-node-js#installing-node) You will need two classes or factories:\n1 `LinkedList` class / factory, which will represent the full list 1 `Node` class / factory, containing a `value` property and a `nextNode` property, set both as `null` by default Build the following functions in your linked list class / factory:\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4798,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_linked_lists.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "79a5606690bbbc2556992e2f76897473",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_linked_lists.md",
    "source_type": "git_repo",
    "title": "project_linked_lists",
    "content": "are using ES6 modules and run into errors due to Node not recognising the syntax, make sure you [update Node to the latest LTS version](https://www theodinproject com/lessons/foundations-installing-node-js#installing-node) You will need two classes or factories: 1 `LinkedList` class / factory, which will represent the full list 1 `Node` class / factory, containing a `value` property and a `nextNode` property, set both as `null` by default Build the following functions in your linked list class / factory: 1`append(value)` adds a new node containing `value` to the end of the list\n1 `prepend(value)` adds a new node containing `value` to the start of the list\n1 `size` returns the total number of nodes in the list\n1 `head` returns the first node in the list\n1 `tail` returns the last node in the list\n1 `at(index)` returns the node at the given `index`\n1 `pop` removes the last element from the list\n1 `contains(value)` returns true if the passed in value is in the list and otherwise returns false 1 `find(value)` returns the index of the node containing value, or null if not found 1 `toString` represents your LinkedList objects as strings, so you can print them out and preview them in the console The format should be: `( value ) -> ( value ) -> ( value ) -> null`\n#### Extra credit\n1 `insertAt(value, index)` that inserts a new node with the provided `value` at the given `index` 1 `removeAt(index)` that removes the node at the given `index` **Extra Credit Tip:** When you insert or remove a node, consider how it will affect the existing nodes Some of the nodes will need their `nextNode` link updated #### Test it out\nLet's test out the Linked List you made 1 Create a `main js` file and make sure it imports your `LinkedList` class or factory This is where we'll test the list 1 Create an instance of your `LinkedList` and populate it with nodes:\n```javascript\n// example uses class syntax - adjust as necessary\nconst list = new LinkedList();\nlist append(\"dog\");\nlist append(\"cat\");\nlist append(\"parrot\");\nlist append(\"hamster\");\nlist append(\"snake\");\nlist append(\"turtle\");\n```\n1 Add `console log(list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4798,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_linked_lists.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ba28303b78d4c54872fbf2e24339391e",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_linked_lists.md",
    "source_type": "git_repo",
    "title": "project_linked_lists",
    "content": "out Let's test out the Linked List you made 1 Create a `main js` file and make sure it imports your `LinkedList` class or factory This is where we'll test the list 1 Create an instance of your `LinkedList` and populate it with nodes: ```javascript // example uses class syntax - adjust as necessary const list = new LinkedList(); list append(\"dog\"); list append(\"cat\"); list append(\"parrot\"); list append(\"hamster\"); list append(\"snake\"); list append(\"turtle\"); ``` 1 Add `console log(listtoString());` to the end of the file and run it 1 If everything is working, the output should be:\n```text\n( dog ) -> ( cat ) -> ( parrot ) -> ( hamster ) -> ( snake ) -> ( turtle ) -> null\n```\nFeel free to use different values to test if you like",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4798,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_linked_lists.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b8ba561574f5ce1dbdf12ea74d0ee9e3",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_recursion.md",
    "source_type": "git_repo",
    "title": "project_recursion",
    "content": "Introduction\nUse what you have learnt about recursion so far to tackle two classic problems that can leverage recursion: Fibonacci and Merge Sort Fibonacci\nThe Fibonacci Sequence, is a numerical sequence where each number is the sum of the two numbers before it Eg 0, 1, 1, 2, 3, 5, 8, 13 are the first eight digits in the sequence You should already be thinking that perhaps this can be solved iteratively rather than recursively, and you would be correct Nevertheless generating the sequence recursively is an excellent way to better understand recursion You can watch this video from Khan Academy on recursive Fibonacci to understand it further Merge sort\nA significant part of computer science is dedicated to sorting data An algorithm which uses the 'divide and conquer' approach of recursion is able to reduce a sorting problem to smaller and smaller sub-problems Merge sort is one such sorting algorithm, and can be much faster than other algorithms such as bubble sort on the right data sets Essentially merge sort recurses through an array of unsorted data until it reaches its smallest sub-set, a single item Of course an array with a single item is considered sorted Merge sort then merges the single items back together in sorted order Pretty clever To understand what the merge sort algorithm is doing check out these resources:\nWatch this introductory video on merge sort from Harvard's CS50x course Watch another explanation of how merge sort works (watch only until 2:04:05), this time from a part of a Harvard CS50x lecture The concept of merging and Merge Sort -- How it Works part on YouTube give you a more formal look at this problem if you're still unclear (Optional) Play with this Merge Sort Visualizer to get a better feel for exactly what is happening during a Merge Sort #### Running your project code\nYou will need a way to run the scripts you create for this project Because there is no GUI component to this project it should be run in the command line rather than the browser JavaScript files can be run directly from the command line using the node command installed with nodejs You can learn about the common ways to do this by reading the [documentation for the Node CLI](https://github com/nodejs/nodejs dev/blob/aa4239e87a5adc992fdb709c20aebb5f6da77f86/content/learn/command-line/node-run-cli en md) Assignment\nFirst up create a file and tackle the fibonacci sequence:\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5571,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_recursion.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fc9fbc9595c4847a89179921599e0ea6",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_recursion.md",
    "source_type": "git_repo",
    "title": "project_recursion",
    "content": "create for this project Because there is no GUI component to this project it should be run in the command line rather than the browser JavaScript files can be run directly from the command line using the node command installed with nodejs You can learn about the common ways to do this by reading the [documentation for the Node CLI](https://github com/nodejs/nodejs dev/blob/aa4239e87a5adc992fdb709c20aebb5f6da77f86/content/learn/command-line/node-run-cli en md) Assignment First up create a file and tackle the fibonacci sequence: 1Using iteration, write a function `fibs` which takes a number and returns an array containing that many numbers from the Fibonacci sequence Using an example input of `8`, this function should return the array `[0, 1, 1, 2, 3, 5, 8, 13]` 1 Now write another function `fibsRec` which solves the same problem recursively 1 Test both versions of your functions by passing in various lengths as arguments Hopefully you were able to solve the problem with recursion If you need some help understanding what's going on with this function, the \"Test it out\" section below will help If you're still a bit confused, there are some additional resources linked at the end of this page Once you have a firm grasp on solving Fibonacci with recursion, create a new file and work on a merge sort:\n1 Build a function `mergeSort` that takes in an array and returns a sorted array, using a recursive merge sort methodology An input of `[3, 2, 1, 13, 8, 5, 0, 1]` should return `[0, 1, 1, 2, 3, 5, 8, 13]`, and an input of `[105, 79, 100, 110]` should return `[79, 100, 105, 110]` Tips:\n- Think about what the base case is and what behavior is happening again and again and can actually be delegated to someone else (e g that same function ) - It may be helpful to check out the background videos again if you don't quite understand what should be going on #### Test it out\nTo showcase the recursive effect implemented in your Fibonacci function, do the following:\n1 Add the following to the start of the function:\n```javascript\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5571,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_recursion.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "82a4ce39ede4400c73c6ce7ddfafc206",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\project_recursion.md",
    "source_type": "git_repo",
    "title": "project_recursion",
    "content": "base case is and what behavior is happening again and again and can actually be delegated to someone else (e g that same function ) - It may be helpful to check out the background videos again if you don't quite understand what should be going on #### Test it out To showcase the recursive effect implemented in your Fibonacci function, do the following: 1 Add the following to the start of the function: ```javascript consolelog(\"This was printed recursively\");\n```\n1 Call the function with `8` as the argument 1 If the function is implemented correctly, you should see that sentence printed around 8 times (keep in mind that, depending on the way you implemented the function, you may see 7 instead of 8 This isn't a bug It simply depends on how many times the function is *actually* repeated) Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental An extensive written JavaScript solution for recursive Fibonacci\nAnother look at merge sort\nVisualize and understand the memory allocation for recursive functions For more attempts at recursion try the first 5 problems in Project Euler",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5571,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\project_recursion.md",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f52acaa5ff7909ab4e93400058059be4",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\recursive_methods.md",
    "source_type": "git_repo",
    "title": "recursive_methods",
    "content": "Introduction\nRecursion is the idea that a function calls itself That is all there is to it It's used to take a big problem and start breaking it down into smaller and smaller pieces (\"Divide and Conquer\") and continuing to feed their solutions back into the original function until some sort of answer is achieved and the whole chain unwinds From the Wikipedia entry on Divide and Conquer Algorithms:\nIn computer science, divide and conquer (D&C) is an important algorithm design paradigm based on multi-branched recursion A divide and conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same (or related) type, until these become simple enough to be solved directly The solutions to the sub-problems are then combined to give a solution to the original problem There's also a right and wrong way to use recursion The fact is, any problem you can solve recursively, you can also solve using the iterators that you know and love If you find yourself saying \"why didn't I just use a while loop here \" then you probably should have You won't often end up using a recursive solution to a problem, but you should get a feel for when it might be a good idea Some problems also break down into far too many pieces and totally overwhelm your computer's memory There's a balance In this brief lesson, you'll get a chance to learn more about when and how to use recursion and then in the next project you will get the chance to apply some of that (since it probably won't really stick until you've had a chance to try it) Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Why is recursion a useful technique for solving a big problem What are the limitations of using recursive solutions What types of problems are more suited for loops than recursion What is meant by \"recursive depth\" What is a \"stack overflow\" (the concept, not the website) Why is that relevant to a recursive problem Assignment\n1 Read this [intro to recursion](https://javascript info/recursion) You do *not* need to complete the exercises at the end of the article 1 Watch this [explanation of recursion by Web Dev Simplified](https://www youtube com/watch v=6oDQaB2one8) and this additional [example of recursion by DevSage](https://youtu be/LteNqj4DFD8 t=340) 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5225,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\recursive_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "48030124f635bfe9be1d79d647b0b068",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\recursive_methods.md",
    "source_type": "git_repo",
    "title": "recursive_methods",
    "content": "more suited for loops than recursion What is meant by \"recursive depth\" What is a \"stack overflow\" (the concept, not the website) Why is that relevant to a recursive problem Assignment 1 Read this [intro to recursion](https://javascript info/recursion) You do *not* need to complete the exercises at the end of the article 1 Watch this [explanation of recursion by Web Dev Simplified](https://www youtube com/watch v=6oDQaB2one8) and this additional [example of recursion by DevSage](https://youtu be/LteNqj4DFD8 t=340) 1Watch this [Video on Recursion](https://www youtube com/watch v=mz6tAJMVmfM) from CS50 1 Read the [\"Implementation Issues\" section of the wiki article](http://en wikipedia org/wiki/Divide_and_conquer_algorithm#Implementation_issues) to get an overview of some of the limitations of recursion Test yourself\n1 Solve each of the questions from this [Code Quiz](https://www codingame com/playgrounds/5422/js-interview-prep-recursion) on Recursion It is not important to have recursive algorithms committed to memory at this point; just understand how to create and use them The solution for \"Question 6: Search JS object\" is incomplete See [a more accurate solution for `contains()`](https://gist github com/JoshDevHub/b00125f483d4a1ecc257eaa030916973) after you solve it Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How would you briefly define a recursive function What is the point of recursion Is it more efficient than using a plain loop What are the 2 essential parts in a recursive function Why is \"stack overflow\" relevant to a recursive problem Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Efficient Recursion from U of Alberta\nA good resource of recursion by example\nVisualize how recursion works on factorials\nYou may want to watch this nice FreeCodeCamp course on recursion 5 Simple Steps for Solving Any Recursive Problem",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5225,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\recursive_methods.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b3684c0ae3c5a9858b35a9d54013e651",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "Introduction\nIn the last lesson, we focused on measuring complexity from the perspective of time We learned about the various ways in which algorithm complexity can be measured and why Big O was the preferred way We also showed some examples of how this applied to measuring the time complexity of an algorithm In this lesson, we'll focus on space complexity and see how the same notations we've already learned can be used to measure how a change in input for our algorithms can affect the amount of memory it uses When we talk about memory, we mean primary memory, which is the working memory available to your system to execute algorithms You can read more about the topic in this GeeksforGeeks Primary Memory article Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What do we mean by space complexity Why is it important to consider how our algorithm uses memory space How do we measure space complexity What do we mean by space complexity Space complexity can be considered to be the total space used by an algorithm relative to the size of the input Thinking back to the previous lesson, you'll recall that we don't consider the efficiency of an algorithm in how it performs in one specific instance of that algorithm running Instead, we want to know how the efficiency changes when the size of the input changes Measuring space complexity considers the space used by your algorithm input and auxiliary space Auxiliary space is the extra space used by the algorithm These can be things like temporary variables created during the execution of the algorithm They won't have a lasting impact on memory space but during the execution of the algorithm will need to be considered Therefore, you can consider the space complexity to be the total amount of working memory our algorithm needs The importance of considering space complexity\nIf you do any of your own research into algorithm efficiency, you'd be forgiven for assuming that space complexity isn't all that important Most articles you'll read on the subject spend all or the majority of the time covering time complexity and if they do mention space complexity at all, it's pretty much a footnote There are some fair arguments for why Memory these days is pretty cheap compared to processing power, and therefore it's often easier to get around space constraints by increasing primary memory, for example by buying more RAM It's also fair to say that most algorithms you write will probably deal with very manageable input sizes, and therefore space doesn't really become a problem You'll invariably run into an issue with your program being slow before you have any issues with memory being used up",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12444,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "ad48b2fd3415f96e4b76fa05d59962dd",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "these days is pretty cheap compared to processing power, and therefore it's often easier to get around space constraints by increasing primary memory, for example by buying more RAM It's also fair to say that most algorithms you write will probably deal with very manageable input sizes, and therefore space doesn't really become a problem You'll invariably run into an issue with your program being slow before you have any issues with memory being used upOn the flip side, although memory is cheap, your hardware will usually have a fixed amount You can't expand memory easily on the fly in most scenarios When the problem is one of time, you can just allow the program to run for longer and it will eventually come back with a result You can't do this with space On balance, you'll probably come across problems in which the time it takes to execute is more important than the space it uses, but knowing about measuring space complexity will mean when you do run into a situation where there are space constraints, you'll be prepared to handle it Measuring space complexity\nThe good news is that we measure space complexity in exactly the same way as time complexity You already learned about Big O in the last lesson, so you already know how to measure the efficiency of your code The difference is that you'll need to think about how your algorithm is utilizing memory rather than time The first thing to know is that, like time complexity, we measure space complexity by considering all steps including any constants, and then we drop the constants when applying a Big O Notation to the algorithm So we may have an algorithm that uses memory in Linear Complexity as the input changes, and in doing so creates 3 temporary variables So we can think of the complexity of our algorithm as O(N) + 3 auxiliary variables using memory Because those 3 variables are the same no matter our input size, we don't concern ourselves with them when considering the space complexity of our algorithm So we'd say the space complexity is O(N) This should be familiar to you from the time complexity lesson As a reminder the Big O Notations are:\nO(1) - Constant Complexity\nO(log N) - Logarithmic Complexity\nO(N) - Linear Complexity\nO(N log N) - N x log N Complexity\nO(n²) - Quadratic Complexity\nO(n³) - Cubic Complexity\nO(2ⁿ) - Exponential Complexity\nO(N ) - Factorial Complexity\nLet's work through some examples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12444,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "1018d0c8ff0641e2d2e89ba167fbd583",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "space complexity of our algorithm So we'd say the space complexity is O(N) This should be familiar to you from the time complexity lesson As a reminder the Big O Notations are: O(1) - Constant Complexity O(log N) - Logarithmic Complexity O(N) - Linear Complexity O(N log N) - N x log N Complexity O(n²) - Quadratic Complexity O(n³) - Cubic Complexity O(2ⁿ) - Exponential Complexity O(N ) - Factorial Complexity Let's work through some examplesWe won't go through every possible complexity because most don't apply for the data structures you'll be familiar with and use the most We'll cover the most common ones O(1) - Constant complexity\nConsider this example\njavascript\nfunction multiply(num1, num2) {\nreturn num1 * num2;\n}\nHere it should hopefully be clear that no matter the arguments we pass to the function call, only a single value is created (the product of the numbers) It doesn't change Therefore, we can consider the space this takes is always O(1) O(N) - Linear complexity\nMost data structures you come across will have a space complexity of O(N) That makes sense - when you increase the number of items in your data structure, it increases the space that data structure occupies in a linear way javascript\nfunction sumArr(arr) {\nconst copyArr = arr slice();\nlet sum = 0;\ncopyArr forEach((number) => {\nsum += number;\n});\nreturn sum;\n}\nWe wrote this in a slightly more verbose way than you'd normally write it in JavaScript to make it a little clearer Here we have a method which accepts an array Within, we have two variables One called sum and the other copyArr which holds a copy of the array passed in We then have a forEach loop that iterates over the array The amount of space that this algorithm takes depends on the array that is passed to it It could be 3 elements in the array or 300 When we don't know the length of the array, we refer to it as N, so we have N + 1 variable called sum We know that we drop constants with Big O, so we are left with N, or O(N) for its Big O notation Why did we make a copy of the array That will be discussed in a later section",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12444,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "6b498cdcfa41d67deedf354398ede6f8",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "passed to it It could be 3 elements in the array or 300 When we don't know the length of the array, we refer to it as N, so we have N + 1 variable called sum We know that we drop constants with Big O, so we are left with N, or O(N) for its Big O notation Why did we make a copy of the array That will be discussed in a later sectionThe complexity is replicated no matter the data structure:\njavascript\nfunction sumObjectValues(obj) {\nconst copyObject = { obj };\nlet sum = 0;\nObject values(copyObject) forEach((value) => {\nsum += value\n});\nreturn sum;\n}\nHere as the object size increases, the space it uses grows in a linear way Other complexities\nAs we've stated, many data structures share O(N) space complexity, and therefore you won't write many algorithms with a space complexity that differs You do find some recursive functions that may have a different space complexity and some sorting algorithms You normally won't have much reason to consider anything else though In the last lesson one of the assignments was a link to the Big-O cheat sheet If you take another look at it now, you may have a better appreciation for just how amazing it is as a reference for space and time complexity If you scroll down to the data structures and then the sorting algorithms section, you'll see it gives you the time and space complexities Notice just how many are O(N), especially for data structures Many sorting algorithms have just O(1) space complexity, something to keep in mind as you come across different sorting algorithms during your learning That's why we won't be diving into examples for other Big O notations with space complexity We'd have to come up with convoluted examples that wouldn't represent most code you'll write If you do come across a good real world example in your own code, then do let us know and we may consider adding it here for others to consider Other considerations\nOne of the common areas that causes confusion when considering space complexity is what constitutes using space in the context of an algorithm In an earlier example we wrote methods that duplicated an array and object argument We did that to be explicit But what if we'd written the method as:\njavascript\nfunction sumArr(arr) {\nlet sum = 0;\narr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12444,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "515a2692502786ffea0a8d1d6b1830d0",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "let us know and we may consider adding it here for others to consider Other considerations One of the common areas that causes confusion when considering space complexity is what constitutes using space in the context of an algorithm In an earlier example we wrote methods that duplicated an array and object argument We did that to be explicit But what if we'd written the method as: javascript function sumArr(arr) { let sum = 0; arrforEach((number) => {\nsum += number;\n});\nreturn sum;\n}\nWhen a data structure is passed in as the argument, especially for languages that pass arrays by reference rather than value, it can be a bit unclear if that method considers the space used by that data structure when calculating its space complexity If we didn't count it, then it would be easy for all our methods to have great space usage on paper because we put the onus on the caller to allocate that space If we did count it, but the data structure was created for use by many different methods, then the space complexity for all those methods is O(N) when they aren't utilizing additional space Then consider that if your method receives an array as an input and loops it, an index must be created for the loop which uses additional space The first answer to analyzing space complexity provides some great context to the question and gives some thought-provoking answers Ultimately when you consider Big O measures the worst-case scenario, it would be easier to err on the side of caution and do consider the space of arguments passed to your method Wrapping up\nMeasuring the complexity of your algorithms, whether time or space, can be difficult It takes practice and consideration For most practice code you write, it's not something that will cross your mind, especially as you wrestle with getting your code to work Once your code is working though, and you might be looking to refactor it, it's definitely worth taking a moment to consider if the code is as efficient as it could be Are you creating unnecessary variables Or does your algorithm use a data structure with a worse time complexity for what it's mostly used for than another data structure would have been On top of these considerations, you also need to balance the readability of your code If you start introducing memoization in order to make your code more efficient, does it mean it's much harder to understand Is that trade-off worth it Ultimately, you need to make a call on it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12444,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "fb5ed416dea06c91fe6567e9d2c3226d",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
    "source_type": "git_repo",
    "title": "space_complexity",
    "content": "Or does your algorithm use a data structure with a worse time complexity for what it's mostly used for than another data structure would have been On top of these considerations, you also need to balance the readability of your code If you start introducing memoization in order to make your code more efficient, does it mean it's much harder to understand Is that trade-off worth it Ultimately, you need to make a call on itOur advice would be to consider the readability first, and look to refactor for better efficiency if there is a clear impact on performance Assignment\n1 Read this [article on big O and space complexity](https://dev to/mwong068/big-o-space-complexity-lcm) It isn't detail heavy but does a good job explaining things clearly, and does lightly cover recursive functions The code examples are in Ruby, but you should be able to follow along 1 This [article on recursion and space complexity](https://dev to/elmarshall/recursion-and-space-complexity-13gc) offers a little more context to recursive functions and their space complexity Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is space complexity How do we measure space complexity What are the main considerations we should take into account when optimising code Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12444,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\space_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "409ce279aeda4007d3a58f1a8ea78eb8",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\finishing_up_with_javascript\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "The end of the JavaScript course!\nCompleting the JavaScript course is a major milestone! Congratulations! You've learned a lot of major JavaScript concepts like prototypes, closures, promises, and event loops. Take a moment to reflect on how far you've come.\nAt this point, you can create phenomenal and dynamic frontends, all using vanilla JavaScript. However, the frontend isn't over yet. You'll be learning about accessibility, responsive design and about React, a library for creating interfaces, in the upcoming courses. You've already experienced the pain of manually updating the DOM with respect to your underlying data changes, and that's where React simplifies the process.\nGive your feedback\nBefore you move on to the next section, please fill out this feedback form for the JavaScript course. Your feedback is important to improve the curriculum and understand users' experience.\nParting thoughts\nAt the end we'd like to reiterate that learning doesn't stop here. Embrace a growth mindset and explore! Good luck!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1195,
      "relative_path": "git_repos\\odin-project\\javascript\\finishing_up_with_javascript\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "88a1273eb9da86686763789d42f87691",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\introduction\\a_quick_review.md",
    "source_type": "git_repo",
    "title": "a_quick_review",
    "content": "Introduction\nThis course assumes that you have a decent grasp on the fundamentals of JavaScript. If you just finished our Foundations course then you should skip this review and move on to the next lesson. If it's been a while and you're coming from the Ruby courses, you will probably want to take a day or two to refresh your knowledge of the basics.\nReview\nRunning through \"part 1\" of MDN's JavaScript basics course is a great idea for a refresher on the syntax. If you just want a quick reference to skim, try LearnXinY.\nTry not to worry too much about forgetting past materials after not using them for a while. As you progress through the curriculum, you will almost certainly find yourself needing to look up topics covered in Foundations that you haven't touched upon in a while. This isn't indicative of any shortcoming on your end; it's just part of being a developer.\njQuery?\nBefore you press on, a note about jQuery. We occasionally get questions about why we don't include jQuery in our curriculum. jQuery was very popular in the past, but has fallen out of the limelight in recent years. One of the biggest reasons it has begun to fall out of favor is that you don't need it anymore. When it became popular, doing things like DOM manipulation and AJAX calls were difficult in plain JavaScript, but that is no longer the case.\nA quick web-search on the topic will be more useful than any explanations here, and if you still want to learn it (many older codebases still use it, and you will see it on many older Stack Overflow posts) we are confident that you can pick it up quite easily by reading the jQuery documentation.\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2200,
      "relative_path": "git_repos\\odin-project\\javascript\\introduction\\a_quick_review.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "91059a1e8c0bf3cd084dadc74a6e0548",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "Introduction\nJavaScript is the future of the web More and more of the logic is making its way to the client side in order to facilitate lightning-fast user experiences JavaScript is even moving to the server side with Node js That's why in this course we'll be diving deep into it to make sure you come out with a good understanding of how it works You've already completed the Foundations course, right Good, because now we'll be moving at warp speed into new frontiers This section will cover a lot of ground and your brain may melt down a few times, but don't worry, that's just a flesh wound Patch 'er up and keep going When in doubt, build something The path\nHow is this course set up It depends a bit on the path you have selected:\nRuby Track\nIt starts with a deeper look at the basics, just like the [Ruby Programming course](/paths/full-stack-ruby-on-rails/courses/ruby-programming) did with Ruby You don't need to have completed the Ruby Programming course or [the Ruby on Rails course](/paths/full-stack-ruby-on-rails/courses/ruby-on-rails) to understand these basics JavaScript Track\nIt starts with a deep look at JavaScript code organization and basic computer science concepts, finishing with a primer on creating and using a test suite for your project We won't be focusing deeply on the really basic coding items, so it will move quickly You should, however, already have completed the Foundations course -- specifically, the JavaScript Basics section -- before starting this course The last thing you'll do is a project which integrates everything you've learned so far in all the courses of this curriculum This is the kind of project that you'll consider including in your portfolio as an example to demonstrate your web-development skills to prospective employers Format\nThere is a lot to cover, but this course has been broken up into bite-sized lessons and their accompanying projects These projects will give you a chance to apply what you have learned and to show what you are capable of After a few of them, you'll really start getting the hang of things In each lesson\nWe will introduce the topic briefly and provide you with a list of things you should pay attention to (\"Points to Ponder\") You will be asked to do readings, watch videos, do online courses or otherwise consume content to initially learn the material Every few lessons you will be asked to build a larger project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3058,
      "relative_path": "git_repos\\odin-project\\javascript\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "700b1837136facb3ed8ace902bb87bdc",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "what you are capable of After a few of them, you'll really start getting the hang of things In each lesson We will introduce the topic briefly and provide you with a list of things you should pay attention to (\"Points to Ponder\") You will be asked to do readings, watch videos, do online courses or otherwise consume content to initially learn the material Every few lessons you will be asked to build a larger projectFinally, we will include supplemental resources and other potentially useful tidbits at the end of each lesson Enough talk - get learning",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3058,
      "relative_path": "git_repos\\odin-project\\javascript\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 107,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f5bdc92ba01e8a6ced3cf30b9cac3861",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\dynamic_user_interface_interactions.md",
    "source_type": "git_repo",
    "title": "dynamic_user_interface_interactions",
    "content": "Introduction\nJavaScript is a very powerful language It is capable of creating complex web applications that work everywhere But it is just as often used on a smaller scale JavaScript is the glue that holds even less flashy websites together- it makes drop-downs drop down and image sliders slide Fortunately, at this point, you already have all the tools you need to make these items without resorting to using a bloated framework like Bootstrap (Nothing against Bootstrap you just do not need it Good for you )\nWe aren't presenting any new content in this lesson - just giving you the chance to practice some of the techniques that you're going to be using on a daily basis as a JavaScript programmer Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson General techniques that are used by JavaScript programmers everyday Drop-down menus\nA dropdown is something you've most likely encountered on various other websites you've visited or apps you've used Imagine any time you've clicked a button (usually one that contained an icon of 3 horizontal or vertical dots or lines) and a list of items suddenly appeared (you could even say these items dropped down from the button) Dropdowns are typically comprised of two main parts:\nA button that toggles the dropdown content's visibility The dropdown content itself The dropdown toggle button should typically only trigger the visibility of the dropdown content on click, while the dropdown contents should typically only contain items that will trigger an action upon clicking them Actions can include things like \"Edit\", \"Copy\", or \"Delete\", or linking you to another part of the site, such as in a navbar Image carousel\nImage carousels are very common across various types of websites, including online stores, news sites, and many more They're great for advertising, showcasing things, showing several things using limited screen size, and can actually be made using things you've already learned They are also highly customizable - you can make them auto-scroll, allow users to manually cycle between slides, skip to certain slides, etc Typically, they consist of a div that acts as the \"picture frame\", where behind that div, there is another much wider div containing the carousel's images This strip of images can then move behind the picture frame, showing a different image depending on what part of the strip is visible Any additional controls or features can then be placed on top of the entire thing Assignment\n#### Build a dropdown menu\n1 You can allow the menu to show up either on click or on hover 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5935,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\dynamic_user_interface_interactions.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "001c830abdadd25a350d6a033be0c1a5",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\dynamic_user_interface_interactions.md",
    "source_type": "git_repo",
    "title": "dynamic_user_interface_interactions",
    "content": "frame\", where behind that div, there is another much wider div containing the carousel's images This strip of images can then move behind the picture frame, showing a different image depending on what part of the strip is visible Any additional controls or features can then be placed on top of the entire thing Assignment #### Build a dropdown menu 1 You can allow the menu to show up either on click or on hover 1You should hard-code the menu items into your HTML but hide/reveal them using JavaScript You can do this either by adding a class (`visible` or something) or by manually setting the style in JS 1 Make sure the JavaScript code is reusable You should be able to create multiple drop-downs on a page using HTML and reuse the JavaScript logic to hide/reveal them 1 If you bundle your code into a module you can [publish your package to npm](https://docs npmjs com/getting-started/publishing-npm-packages), and then install and use it anytime you like Nothing like publishing your own modules to make you feel like a pro 😎 #### Build an image carousel\nCreate an image carousel It should contain arrows on each side to advance the image forward or backward It should automatically move forward every 5 seconds It should contain the little navigation circles at the bottom that indicate which slide you are on (and they should be clickable to advance to that particular slide) Don't spend too much time worrying about getting your images to display at the correct size -- it's more important to get the carousel rotating 1 This one is a little more involved than the previous task, so think about how you would set up the different elements within the site 1 Set up a very wide `div` which will contain the individual \"slides\" of each image By appropriately positioning that `div` inside a container `div` (which acts like a picture frame), you can choose which slide is visible at any given time 1 Once you have the slider positioned properly, build functions for \"next\" and \"previous\" which will advance to the next or previous slide accordingly The transition *doesn't* need to be smooth or animated Only make it switch to the correct slide 1 Set up arrow buttons which activate those functions and play with cycling through the images 1 Add in some navigation dots at the bottom of the slides Make a horizontal series of empty circles with CSS immediately below the slideshow",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5935,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\dynamic_user_interface_interactions.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8f4d49aa21c33883b324f7c845890bc7",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\dynamic_user_interface_interactions.md",
    "source_type": "git_repo",
    "title": "dynamic_user_interface_interactions",
    "content": "positioned properly, build functions for \"next\" and \"previous\" which will advance to the next or previous slide accordingly The transition *doesn't* need to be smooth or animated Only make it switch to the correct slide 1 Set up arrow buttons which activate those functions and play with cycling through the images 1 Add in some navigation dots at the bottom of the slides Make a horizontal series of empty circles with CSS immediately below the slideshowEach circle represents a slide, so whenever a new slide is activated, its corresponding circle gets filled in so you can tell where in the show you are Make each circle link to that particular slide, so you can click on the circle and it will jump to that slide 1 Add a timeout which advances the slides every 5 seconds 1 Play around with your slideshow Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the two main parts that a dropdown menu consists of When might you want to use dropdown menus in a website What are the benefits of using image carousels Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5935,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\dynamic_user_interface_interactions.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "abaddf5b7673993ed0eb7808aa25e01b",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\form_validation_with_javascript.md",
    "source_type": "git_repo",
    "title": "form_validation_with_javascript",
    "content": "Introduction\nForms are a crucial part of most websites Almost every major site has sign-up forms, contact forms, search forms and more Luckily HTML5 and JavaScript have some handy built-in methods You've already learned about validation with HTML and styling validations with CSS in our Form Validations lesson in the Intermediate HTML and CSS course In this lesson, we'll cover the Constraint Validation API: a way to validate forms on the frontend with JavaScript Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand the importance of validation in HTML forms Understand Constraint Validation API for more control over form validation Add validation using only JavaScript Assignment\n1 This [tutorial on Form Validation](https://developer mozilla org/en-US/docs/Learn/Forms/Form_validation#validating_forms_using_javascript) covers how we can use JavaScript to validate forms, including the constraint validation API 1 It'll also prove beneficial to go through the [Constraint Validation docs](https://developer mozilla org/en-US/docs/Web/HTML/Constraint_validation) 1 For reference, [W3Schools' page on the JavaScript validation API](https://www w3schools com/js/js_validation_api asp) covers things in a more concise format These functions were explained in the previous article Typically, with HTML forms, the inputs are validated upon form submission, but you can use these functions to check validity whenever you like (such as when a user clicks or tabs out of a specific input field) #### Warmup\nGo back to your 'Library' project and add validation to that form Don't let your users submit without filling in all the fields Don’t forget to use the git branch workflow you learned in [Revisiting Rock Paper Scissors](https://www theodinproject com/lessons/foundations-revisiting-rock-paper-scissors) from Foundations to work on a new feature #### A little more practice\nBuild a browser form which collects Email, Country, Postal Code, Password and Password Confirmation fields It should use live inline validation to inform the user whether a field is properly filled in or not That means validating as you type, not only upon form submission When a field is invalid, it should be highlighted in red and show an error message to guide the user The form doesn't need to actually submit, but you should give an error message if the button is pushed with any active errors or unfilled required fields",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4948,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\form_validation_with_javascript.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fad735fbdaa0b97a057e8776b83fa69f",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\form_validation_with_javascript.md",
    "source_type": "git_repo",
    "title": "form_validation_with_javascript",
    "content": "should use live inline validation to inform the user whether a field is properly filled in or not That means validating as you type, not only upon form submission When a field is invalid, it should be highlighted in red and show an error message to guide the user The form doesn't need to actually submit, but you should give an error message if the button is pushed with any active errors or unfilled required fieldsFor the sake of this lesson, make sure the `` element has the [`novalidate` attribute](https://developer mozilla org/en-US/docs/Web/HTML/Element/form#novalidate) which will allow you to do **all** of your validation in your JavaScript files You can still use different `` types, but you will need to use JavaScript to check and report their validity If all is well and the form is \"submitted\", give the user a high five 1 Set up a blank HTML document\n1 Think about how you would set up the different form elements and their accompanying validators What objects and functions will you need A few minutes of thought can save you from wasting an hour of coding The best thing you can do is whiteboard the entire solution before even touching the computer 1 Write the form elements 1 Add the JavaScript code that checks validation as the user progresses through the form When a user leaves a form field, it should automatically validate that field 1 Test out all possible cases 1 Don't forget to style validations with CSS by using the `:valid` and `:invalid` pseudo-classes Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the importance of validating HTML forms before submitting them to a server What are the two types of client-side form validation How does JavaScript Constraint Validation API provide more control and customization of form validation Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4948,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\form_validation_with_javascript.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3369a19b7d9c80fe8c1631edfca877d3",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "Introduction\nYou've written a lot of code up to this point, and you've hopefully moved on from just trying to write code that works, to now considering code readability and maintainability You might spend some time considering how you can create the necessary abstractions so that your code stays easy to work with even as the requirements for it grow Code readability and maintainability are super important After all, you will likely spend as much, if not more, time reading code than writing it You need to make sure new features are integrated with ease However, there is another consideration that can be just as important when writing code Efficiency You need to understand how the code you write will perform You also need to understand how the choices you make impact performance so that you can choose the right data structure and algorithm for your requirement In programming, there are two ways we can measure the efficiency of our code We can measure the time complexity or the space complexity In this lesson, we'll introduce the core concepts around measuring the time efficiency of the code you write Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How the efficiency of an algorithm is measured What is Big O What are the Big O notations used to measure an algorithm's efficiency How else can we measure an algorithm's efficiency What to do when two algorithms have the same complexity Efficiency basics\nThe very first step in mastering efficient code is to understand how to measure it Let's take a look at a little program that prints out all odd numbers between 1 and 10 ```javascript\nfunction oddNumbersLessThanTen() {\nlet currentNumber = 1;\nwhile (currentNumber < 10) {\nif (currentNumber % 2 == 0) {\nconsole log(currentNumber);\n}\ncurrentNumber += 1;\n}\n}\n```\nIf you were to run this in your terminal, you should get the numbers 1, 3, 5, 7 and 9 printed to the console It probably took a fraction of a second to run If you were to run it again, it might take the same time, or it might be faster or slower depending on what else your computer is doing If you were to run it on a different computer, it would again run faster or slower Therefore it's important to understand that you never measure the efficiency of an algorithm by how long it takes to execute So how do we measure it The way to measure code efficiency is to evaluate how many 'steps' it takes to complete",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "d763f510656c07605d25b7ff411f1a1c",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "time, or it might be faster or slower depending on what else your computer is doing If you were to run it on a different computer, it would again run faster or slower Therefore it's important to understand that you never measure the efficiency of an algorithm by how long it takes to execute So how do we measure it The way to measure code efficiency is to evaluate how many 'steps' it takes to completeIf you know that one algorithm you write takes 5 steps and another one takes 20 steps to accomplish the same task, then you can say that the 5-step algorithm will always run faster than the 20-step algorithm on the same computer Let's go back to our oddNumbersLessThanTen function How many steps does our algorithm take We assign the number 1 to a variable That's one step We have a loop For each iteration of the loop, we do the following:\nCompare currentNumber to see if it is less than 10 That is 1 step We then check if currentNumber is odd That is 1 step If it is then we output it to the terminal That's 1 step every 2 iterations We increase currentNumber by 1 That is 1 step To exit the loop, we need to compare currentNumber one last time to see that it is not less than ten any more That is one last step So there are 3 steps for every loop iteration and it iterates 9 times which is 27 steps Then we have one step which iterates for only half the loop iteration which is 5 steps Assigning an initial value to currentNumber and checking the exit condition of the loop is one step each 27 + 5 + 1 + 1 = 34 steps Therefore, we can say our algorithm takes 34 steps to complete While this is useful to know, it isn't actually helpful for comparing algorithms To see why, let's slightly modify our initial algorithm to take in a number instead of setting a hard default of 10 ```javascript\nfunction oddNumbers(maxNumber) {\nlet currentNumber = 1;\nwhile (currentNumber < maxNumber) {\nif (currentNumber % 2 == 0) {\nconsole log(currentNumber);\n}\ncurrentNumber += 1;\n}\n}\n```\nHow many steps does this algorithm take You've probably realised the answer is it depends",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "10636debbc87ba2abaf73cb6c8253dfa",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "useful to know, it isn't actually helpful for comparing algorithms To see why, let's slightly modify our initial algorithm to take in a number instead of setting a hard default of 10 ```javascript function oddNumbers(maxNumber) { let currentNumber = 1; while (currentNumber < maxNumber) { if (currentNumber % 2 == 0) { console log(currentNumber); } currentNumber += 1; } } ``` How many steps does this algorithm take You've probably realised the answer is it dependsIf you set maxNumber to be 10, like we did before, the number of steps is 34, but if you enter another number then the number of steps changes There is no concrete number we can use to measure the efficiency of our code because it changes based on an external input So what we really want to be able to measure is how the number of steps of our algorithm changes when the data changes This helps us answer the question of whether the code we write will scale To do that, we need to delve into a new concept: Asymptotic Notations and, in particular, Big O Asymptotic notations\nAsymptotic Notations are used to describe the running time of an algorithm Because an algorithm's running time can differ depending on the input, there are several notations that measure that running time in different ways The 3 most common are as follows:\nBig O Notation - represents the upper bound of an algorithm This means the worst-case scenario for how the algorithm will perform Omega Notation - represents the lower bound of an algorithm This is the best-case scenario Theta Notation - represents both the upper bound and lower bound and therefore analyses the average case complexity of an algorithm Big O is the one you'll most commonly see referenced because you need to be sure the worst-case scenario for any code you write is scalable as the inputs grow in your application It's also worth noting that the Notations given below for Big O also apply to Omega and Theta notations The differences are in how they look to measure the efficiency of the algorithm and therefore which Notation should apply This should become clearer as you read on What is Big O Big O gives us a consistent way to measure the efficiency of an algorithm It gives us a measurement for the time it takes for an algorithm to run as the input grows so that you can directly compare the performance of two algorithms and pick the best one",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "6f69a6fc9c808993bc23b62691d98e6b",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "they look to measure the efficiency of the algorithm and therefore which Notation should apply This should become clearer as you read on What is Big O Big O gives us a consistent way to measure the efficiency of an algorithm It gives us a measurement for the time it takes for an algorithm to run as the input grows so that you can directly compare the performance of two algorithms and pick the best oneBig O is not a piece of code you can put your algorithm into and it tells you how efficient it is You will need to measure how the number of steps changes as the data grows, and using this you can apply a Big O Notation to it and measure it against other algorithms In many cases you'll be using a data structure in which the ways you interact with it are well known, and in that case it's easier to judge how it will scale as the input changes Firstly, we'll summarise the Big O Notations and then provide a little more context for each one The reading materials will dive into greater detail Big O notation\nThe Big O Notations in the order of speed from fastest to slowest are:\nO(1) - Constant Complexity\nO(log N) - Logarithmic Complexity\nO(N) - Linear Complexity\nO(N log N) - N x log N Complexity\nO(n²) - Quadratic Complexity\nO(n³) - Cubic Complexity\nO(2ⁿ) - Exponential Complexity\nO(N ) - Factorial Complexity\nO(1) - Constant complexity\nTo understand Constant Complexity, let's use an array javascript\narr = [1, 2, 3, 4, 5];\nIf we want to look up what is at index 2, we can get to the element using arr[2] which would give us back 3 This takes just one step If we double our array javascript\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nWe can still access any element in just one step arr[7] gives us 8 in a single step Our array can keep growing and we can always access any element in a single step It's constant Hence we have O(1) Looking up something in one step is as good as it gets for time complexity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "f2247ca2e6d26fb815e41589f55f3808",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "just one step If we double our array javascript arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; We can still access any element in just one step arr[7] gives us 8 in a single step Our array can keep growing and we can always access any element in a single step It's constant Hence we have O(1) Looking up something in one step is as good as it gets for time complexityWhile we're looking at the simplest form of Big O, let's take a look at one of its little gotchas to keep in mind You may have thought a moment ago, is it really just one step The answer is technically no, in reality the computer must first look up where the array is in memory, then from the first element in the array it needs to jump to the index argument provided That's at least a couple of steps So you wouldn't be wrong for writing something like O(1 + 2(steps)) However, the 2 steps are merely incidental With an array of 10,000 elements, it still takes the same amount of steps as if the array was 2 elements Because of this, Big O doesn't concern itself with these incidental numbers They don't provide any context to how the complexity grows when the data size changes, because they are constant, and so in Big O they are dropped Big O only wants to tell us an algorithm's complexity relative to the size of the input Do the number of steps matter Yes, they might We'll touch on when this may be the case a little later O(log N) - Logarithmic complexity\nLogarithmic Complexity tells us that the number of steps an algorithm takes increases by 1 as the data doubles That's still pretty efficient when you think about it Going from 5,000 to 10,000 data elements and only taking one additional step can scale really well One such algorithm that does this is Binary Search It only works on sorted arrays, but if you have an array of 10 items in sorted order:\njavascript\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTo find out if the array contains the number 7, Binary Search calculates the middle index using the formula:\njavascript\nlet middleIndex = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "06ba5e07f11c39870157913e0c0d5660",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "data elements and only taking one additional step can scale really well One such algorithm that does this is Binary Search It only works on sorted arrays, but if you have an array of 10 items in sorted order: javascript arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] To find out if the array contains the number 7, Binary Search calculates the middle index using the formula: javascript let middleIndex = Mathfloor((startIndex + endIndex) / 2)\nHere, startIndex is the beginning of the array (initially 0), and endIndex is the last element of the array (initially 9 for a 10-element array) The middle element at index 4 would be 5 Because the array is sorted and 7 is greater than 5, we can eliminate 5 and everything to its left, as those numbers are all less than 7 javascript\narr = [-, -, -, -, -, 6, 7, 8, 9, 10]\nIn just one step, we've eliminated half of the array Now, we recalculate the middle index with the new startIndex and endIndex values The middle index would now be 7, and the number at this index is 8 Since 7 is less than 8, we can eliminate 8 and everything to its right javascript\narr = [6, 7, -, -, -]\nWe repeat this process until we have an array of just one item If that item matches the number we're looking for, we've found it If not, the number isn't in the array The below table summarises the size of an array doubling and how many steps in Big O terms we would need to arrive at one element to see if it matches what we're looking for:\n| Size | Steps |\n| ---- | ----- |\n| 1    | 1     |\n| 2    | 2     |\n| 4    | 3     |\n| 8    | 4     |\n| 16   | 5     |\n| 32   | 6     |\nPretty impressive eh O(N) - Linear complexity\nThis one is pretty easy to wrap your head around Linear Complexity just tells us that as the number of items grows, the number of steps grows at exactly the same rate Every time you iterate over an array is an example of Linear Complexity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "eb7c93bbbe95428d97133bb584150e5d",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "2 | 2 | | 4 | 3 | | 8 | 4 | | 16 | 5 | | 32 | 6 | Pretty impressive eh O(N) - Linear complexity This one is pretty easy to wrap your head around Linear Complexity just tells us that as the number of items grows, the number of steps grows at exactly the same rate Every time you iterate over an array is an example of Linear ComplexityIf you have an array of 5 items, then we can iterate every element in 5 steps An array of 10 items can be iterated in 10 steps If you come across any algorithm with a Big O efficiency of O(N), you know that the number of steps will increase in line with the number of elements in your data structure O(N log N) - N x log N complexity\nYou can't say this one isn't appropriately named This notation usually implies we have an algorithm which initially is O(log N) such as our example earlier of Binary Search where it repeatedly breaks an array in half, but with O(N log N) each of those array halves is processed by another algorithm with a complexity of O(N) One such algorithm is the merge sort algorithm from our previous lesson :)\nHowever, not all O(N log N) situations are built this way There are special cases, like constructing a Cartesian tree, where the algorithm naturally behaves like O(N log N) without using smaller parts with O(N) or O(log N) complexities inside The keen amongst you may wish to have a peek at how this algorithm works This shows that while nested complexities can be common, they're not the only way an algorithm can achieve a particular time complexity O(n²) - Quadratic complexity\nYou've probably written code with a Quadratic Complexity on your programming journey It's commonly seen when you loop over a data set and within each loop you loop over it again For example, if our array has 3 items, the nested loops require 3² = 9 sub-steps Adding just one more item to the array almost doubles this number to 4² = 16 Adding a 5th item takes us to 5² = 25 sub-steps Then doubling the array size to 10 items increases the sub-steps from 25 to 100, so 4 times as much work needed We hope you can see where we're going with this O(n³) - Cubic complexity\nThink triple nested loops baby",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "191ca024b51419f8f5dbe6d8d2b4eb2d",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "the nested loops require 3² = 9 sub-steps Adding just one more item to the array almost doubles this number to 4² = 16 Adding a 5th item takes us to 5² = 25 sub-steps Then doubling the array size to 10 items increases the sub-steps from 25 to 100, so 4 times as much work needed We hope you can see where we're going with this O(n³) - Cubic complexity Think triple nested loops babyIf looping over an array with n items, 1 extra item adds an extra outer loop, an extra middle loop, and an extra innermost loop When using such triply nested loops on an array of size n, we require a total of n³ sub-steps For example, if our array has 3 items, the triply-nested loops require a total of 3³ = 27 sub-steps Adding one more item more than doubles this number to 4³ = 64 sub-steps The task almost doubles again for 5 items, with 5³ = 125 sub-steps Doubling our array size to 10 items means we require 10³ = 1000 sub-steps in total, 8 times as many as before 100 items in the array require a total of 1,000,000 sub-steps Ouch O(2ⁿ) - Exponential complexity\nExponential Complexity means that with each item added to the data size, the number of steps doubles from the previous number of steps Let's provide a little table to see how quickly this can get out of hand | Size | Steps |\n| ---- | ----- |\n| 1    | 2     |\n| 2    | 4     |\n| 3    | 8     |\n| 4    | 16    |\n| 5    | 32    |\n| 6    | 64    |\n| 7    | 128   |\n| 8    | 256   |\n| 9    | 512   |\n| 10   | 1024  |\nYou want to avoid this if at all possible, otherwise you won't be processing much data quickly O(N ) - Factorial complexity\nThe factorial of a number is the product of all numbers between 1 and that number The factorial of 4(4 ) is 4 * 3 * 2 * 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "63e9f64eb979890c0093bf3f31166dcf",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "| 6 | 64 | | 7 | 128 | | 8 | 256 | | 9 | 512 | | 10 | 1024 | You want to avoid this if at all possible, otherwise you won't be processing much data quickly O(N ) - Factorial complexity The factorial of a number is the product of all numbers between 1 and that number The factorial of 4(4 ) is 4 * 3 * 2 * 1You will come across Factorial Complexity if you ever need to calculate permutations or combinations If you have an array and have to work out all the combinations you can make from the array, that is a Factorial complexity It's manageable for a small number of items, but the leap with each new item in a dataset can be huge The factorial of 3 is 6 (3 * 2 * 1) The factorial of 4 is 24 The factorial of 10 3,628,800 So you can see how quickly things can get out of hand Alternatives to Big O\nIf Big O gives us the worst-case scenario of how our algorithm will scale, what alternatives are there Big Ω (Omega notation)\nOmega Notation gives us the best-case scenario for an algorithm To understand where this might be, let's look at a method and discuss how we can measure its complexity javascript\nfunction findValue(arr) {\nfor (let i = 0; i < arr length; i++) {\nlet item = arr[i];\nif (item === 1) {\nreturn item;\n}\n}\n}\nIn the worst case (Big O), which occurs if the item is not in the array or is the last item in the array, the algorithm has linear complexity O(N) This happens because, in both cases, the code must iterate through every element As the input size doubles, the number of iterations required in the worst case also doubles However, in the best-case scenario the value we are looking for will be the first item in the array In this case our algorithm takes just one step This has a complexity of O(1) This is its Omega Complexity Omega Notation isn't considered as useful because it is unlikely our item will often be the first item in our data structure search, so it doesn't give us any idea how well the algorithm will scale",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "326c791f71e96d0dc5673724f1421b71",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "doubles However, in the best-case scenario the value we are looking for will be the first item in the array In this case our algorithm takes just one step This has a complexity of O(1) This is its Omega Complexity Omega Notation isn't considered as useful because it is unlikely our item will often be the first item in our data structure search, so it doesn't give us any idea how well the algorithm will scaleBig-Θ (Big-Theta notation)\nWhile Omega Notation measures the best-case scenario for an algorithm's efficiency, and Big O measures the worst case, Theta looks to give the exact value or a useful range between narrow upper and lower bounds If we had some code that looped every item in an array, then it doesn't matter the size of the array Our algorithm will always run in O(N) time in its best-case and worst-case scenarios In that case we know its exact performance in all scenarios is O(N), and that is the Theta performance of our algorithm For other algorithms, Theta may represent both the lower and upper bound of an algorithm that has different complexities We won't get into this more here because Big O is the primary notation used for general algorithm time complexity This is just a simplistic explanation to try to make the topic approachable If you do happen to be mathematically minded, then you'll find more detailed explanations with a quick search online Why Big O\nNow that we've touched on the different ways of quantifying an algorithm's efficiency, hopefully it's clear why we choose to use the worst-case scenario when measuring the efficiency of that algorithm Using a worst-case scenario we can make sure our algorithm will scale in all outcomes If we write an algorithm that could potentially run in constant time, but could also run in linear time in the worst case, it can only scale as the input grows if it still works when the worst case does happen You need to be confident your code won't lock up and leave users frustrated if you suddenly get an input of a million items instead of 10 Algorithms with the same complexity\nIf we write two algorithms with the same complexity, does that mean they're equally good to use We'll answer this question with two code examples which we'll then discuss a bit further to try and answer the question The first example is some code we've seen already, our oddNumbers function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "0dbda168f3cac3f8d55f5b6f07cc02d9",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "code won't lock up and leave users frustrated if you suddenly get an input of a million items instead of 10 Algorithms with the same complexity If we write two algorithms with the same complexity, does that mean they're equally good to use We'll answer this question with two code examples which we'll then discuss a bit further to try and answer the question The first example is some code we've seen already, our oddNumbers function```javascript\nfunction oddNumbers(maxNumber) {\nlet currentNumber = 1;\nwhile (currentNumber < maxNumber) {\nif (currentNumber % 2 == 0) {\nconsole log(currentNumber);\n}\ncurrentNumber += 1;\n}\n}\n```\nThe time complexity of this algorithm is O(N) As the data size increases, the number of steps of our algorithm increases at the same rate Let's look at another version:\n```javascript\nfunction oddNumbers(maxNumber) {\nlet currentNumber = 1;\nwhile (currentNumber < maxNumber) {\nif (currentNumber % 2 == 0) {\nconsole log(currentNumber);\n}\ncurrentNumber += 2;\n}\n}\n```\nNot much of a change, but this time we increase currentNumber by 2 How does this affect our algorithm runtime Well, for an input of n, the number of steps is approximately half as we iterate by 2 each time This is an algorithm of O(N/2) but as I've mentioned earlier, Big O doesn't concern itself with constants because they aren't relative to how an algorithm scales as the input changes and it wouldn't be fun or easy to have to compare an algorithm of O(N/2 + 5 N) against O(N + 5 / 2N) Therefore, the Big O efficiency of both algorithms is O(N) They scale at the same rate as the input grows Therefore, you also need to ensure the code you write is as efficient as it can be within its time complexity Assignment\n1 Read through [Big O Notation in JavaScript by Doable Danny](https://www doabledanny com/big-o-notation-in-javascript) It covers the common complexities with graphs and examples 1 The [Big-O cheat sheet](https://www bigocheatsheet com/) is an amazing resource It gives a complexity chart where you can see how the different algorithms perform as the data size increases and also gives the time complexity for common data structure operations along with those for common sorting algorithms 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "aab6e3b7388849dde213c23eed4fb2d4",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
    "source_type": "git_repo",
    "title": "time_complexity",
    "content": "within its time complexity Assignment 1 Read through [Big O Notation in JavaScript by Doable Danny](https://www doabledanny com/big-o-notation-in-javascript) It covers the common complexities with graphs and examples 1 The [Big-O cheat sheet](https://www bigocheatsheet com/) is an amazing resource It gives a complexity chart where you can see how the different algorithms perform as the data size increases and also gives the time complexity for common data structure operations along with those for common sorting algorithms 1Read the [Step-by-step Big O Complexity Analysis Guide, using JavaScript](https://www sahinarslan tech/posts/step-by-step-big-o-complexity-analysis-guide-using-javascript) It has a section on Space Complexity at the end which you can skip for now Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is Big O What are the Big O Notations Why use Big O What is Big Omega and why isn't it as useful Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It's not a free resource but A common sense guide to data structures and algorithms does a great job making these topics approachable to people not familiar with some of the mathematical terminology used In this video, Introduction to Big O Notation and Time Complexity, the author provides a step-by-step process for how to analyze and understand time complexity for various algorithms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 21830,
      "relative_path": "git_repos\\odin-project\\javascript\\computer_science\\time_complexity.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "fdfb4fa14ea071da115f6b3793ede1bc",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\what_is_es6.md",
    "source_type": "git_repo",
    "title": "what_is_es6",
    "content": "Introduction\nWe've been throwing around the term ES6 since our very first lessons, but we haven't taken the time to properly explain what it means or to investigate the implications of it in our code Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe what ES6 is Describe the current ECMAScript release system Explain some potential issues with browser support for newer JavaScript features Explain what Babel is ECMAScript\nJavaScript is just a programming language that conforms to the ECMAScript standard, made by Ecma International, and ES6 is a version of JavaScript that was officially released in the summer of 2015 It included many new features that make writing JavaScript much easier and cleaner In this curriculum, you have already been learning many of these new features because, well, ES6 is just JavaScript Release schedule\nYou have probably also come across articles talking about features in ES7 or ES8 or ES2015 or ES2017 etc Part of the confusion here is that right after the release of ES6, the committee that makes these decisions (known as TC39) changed the naming scheme from version numbers (ES5, ES6, ES7 etc ) to release years ES6 is also known as ES2015, and what some articles refer to as ES7 is also known as ES2016 etc Instead of a single new version containing a huge number of new features (as was the case with ES6 and before), versions are now released annually with a smaller set of additions per version Browser support\nThe problem with JavaScript constantly updating and adding features is that it sometimes takes web browsers a while to catch up and implement new features once they've been released It often takes a couple of years for a new feature to become \"widely available\" (supported across the majority of modern browsers and browser versions in use) This means, unfortunately, that if you write code using brand new features, it will not run in browsers that do not support it For most of us, this has not been an issue because you are almost definitely using a new browser that automatically updates itself when a new version is released But in the real world, if you're selling products to customers, you can't control which browsers people will use to connect to your site Babel\nFortunately there is a solution to this problem Babel is a tool that takes your modern JavaScript code and transpiles it to code that older browsers can understand",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4884,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\what_is_es6.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8ea4a6cd666dc8d6add19765c5c12655",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\what_is_es6.md",
    "source_type": "git_repo",
    "title": "what_is_es6",
    "content": "not been an issue because you are almost definitely using a new browser that automatically updates itself when a new version is released But in the real world, if you're selling products to customers, you can't control which browsers people will use to connect to your site Babel Fortunately there is a solution to this problem Babel is a tool that takes your modern JavaScript code and transpiles it to code that older browsers can understandIt can be set to transpile to meet any number of targets (e g minimum browser versions across various browsers), where the necessary targets depend on things like the product's purpose, its target audience etc Some products may be fine with more recent browser support only whereas others may need to be much stricter and ensure support for much older browsers In all honesty, this is not something that you are going to need to worry about on every project you're starting, since the point of curriculum projects is to get practical experience with things and not delivering production-level products to customers Still, it helps to be aware of the situation and what things may be necessary in the real world Assignment\n1 To satisfy your curiosity, have a look at all the new [features that showed up in ES6 (a k a ES2015)](https://github com/lukehoban/es6features) Though you'll already have been using many of these, there are a few we haven't specifically covered yet (you do not need to explore these yet) 1 Have a brief look at the [timeline of the various ECMAScript releases](https://en wikipedia org/wiki/ECMAScript_version_history#14th_Edition_%E2%80%93_ECMAScript_2023) which includes small summaries of the annual versions since ES6 Again, some things you may have already used and others you will not recognise nor need to explore yet Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is ES6 Since ES6, what release schedule has been used for new ECMAScript versions Why might someone need to be careful about using brand new JavaScript features What tool can be used to transpile newer JavaScript for older browser support Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4884,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\what_is_es6.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "36f60f402e9d0c15e8101bca793b9b4d",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\what_is_es6.md",
    "source_type": "git_repo",
    "title": "what_is_es6",
    "content": "expected to memorize or master this knowledge What is ES6 Since ES6, what release schedule has been used for new ECMAScript versions Why might someone need to be careful about using brand new JavaScript features What tool can be used to transpile newer JavaScript for older browser support Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yetHelp us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4884,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\what_is_es6.md",
      "source_type": "git_repo"
    },
    "token_count": 96,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ca440b9f6b135deeeaa18f0065525f30",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\linting.md",
    "source_type": "git_repo",
    "title": "linting",
    "content": "Introduction\nBefore we dive further into code, we are going to take a moment to improve your editor setup and overall productivity Doing this now will make things much easier for you going forward This lesson will give you some information about code style, and then give you some tools to help you maintain consistent code-style throughout your projects In some cases it can even help adjust things like indentation for you Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Learn about style guides and why they are important Set up a linter and prettier to make your code better Style guides\nCode style is important Having a consistent set of style rules for things such as indentation, preferred quote style or general code structure practices, makes your code more maintainable and easier to read There are several popular JavaScript style guides on the net that set standards for these types of things and you'll find they often differ in what they enforce None are \"right\" or \"wrong\", only that they enforce something to promote consistency across a codebase Here are a few examples of style guides, including ones used by specific companies:\nThe Airbnb Style Guide is one of the most popular There is also a JavaScript style guide used at Google The JavaScript Standard Style Linting\nThe style guides we mentioned above are full of really helpful advice for formatting, organizing and composing your code But there are a lot of rules - it can be difficult to internalize them all Linters are tools that will scan your code with a set of style rules and will report any errors to you that they find In some cases, they can even auto-fix the errors There are many linters that exist for JavaScript but by far the most common one is ESLint ESLint is installed as a dev dependency in your project which will allow you to run checks on any of your files via the command line ESLint's official \"Getting Started\" page is a good place to start which covers installation and basic configuration The default rule set covers many of the most common scenarios with sensible default settings You will also want to look at the docs on configuring ESLint for a list of options that you can change, such as including or excluding certain folders or files, and details about specific rules Formatters\nFormatters are awesome They are similar to linters, but serve a slightly different function Formatters take your JavaScript code and then automatically format it according to a set of rules",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7556,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\linting.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8090e5c4144ae516140d97fd9eeaf7d1",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\linting.md",
    "source_type": "git_repo",
    "title": "linting",
    "content": "many of the most common scenarios with sensible default settings You will also want to look at the docs on configuring ESLint for a list of options that you can change, such as including or excluding certain folders or files, and details about specific rules Formatters Formatters are awesome They are similar to linters, but serve a slightly different function Formatters take your JavaScript code and then automatically format it according to a set of rulesUnlike linters, they do not look for style errors, but specifically target the layout of your code, making intelligent decisions about things like spaces, indentation levels and line-breaks As usual, there are multiple formatters out there Prettier is a very popular choice that is highly opinionated Besides a few options, most of its formatting decisions are not customizable Since many of these decisions have been made for you, this reduces the time spent deciding on things like indentation size or spacing, and more time on the problems that actually matter Like with ESLint, Prettier is installed as a dev dependency in your project, so read Prettier's installation guide for instructions on how to do this While it normally runs with its default rules, you can also change any of its settings in a Prettier configuration file Using Prettier makes coding faster and easier You don't have to worry about nailing things like indentation, or remembering every semi-colon because it will take care of those details for you IDE extensions for linting and formatting\nLinters and formatters are typically packages you install in a project and use via the command line However, many popular tools also have IDE extensions, and ESLint and Prettier both have extensions for Visual Studio Code that can make linting and formatting much more convenient on your machine For example, when installed, the ESLint extension can provide linter warnings and errors as color-coded squiggly lines directly in the open file and even give you details about the specific rule(s) broken, all without you having to run ESLint in the command line The Prettier extension allows you to format a file with an IDE command or custom keyboard shortcut, again without having to run a command in the terminal It is important that you still have the packages installed as dependencies in your project along any configuration files The extensions can have fallback rules set, but if they detect the respective package and configuration file in your project, they will use those rules and the package version installed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7556,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\linting.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "eaca566aed5c1cad7ed9aa727ef81003",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\linting.md",
    "source_type": "git_repo",
    "title": "linting",
    "content": "The Prettier extension allows you to format a file with an IDE command or custom keyboard shortcut, again without having to run a command in the terminal It is important that you still have the packages installed as dependencies in your project along any configuration files The extensions can have fallback rules set, but if they detect the respective package and configuration file in your project, they will use those rules and the package version installedThat way, projects always hold the source of truth for what linting and formatting rules should be applied, and should you ever work on other projects, you're less likely to introduce unwanted style changes from your local settings In summary, the extensions are great tools for convenience but they should not be used as the source of truth for a project's linting or formatting setup #### Adding setup to template repositories\nRecall [template repositories](https://www theodinproject com/lessons/node-path-javascript-revisiting-webpack#template-repositories) You can include linter and formatter setup in any of your templates to make things quicker and easier in the future Assignment\n1 Read this article that goes more into [the value of linters and how they work](https://hackernoon com/how-linting-and-eslint-improve-code-quality-fa83d2469efe) 1 Watch this [short intro to Prettier](https://www youtube com/watch v=hkfBvpEfWdA) by its creator 1 Go to [Prettier's online playground](https://prettier io/playground) and give it a test drive Go ahead and copy/paste some of your old JavaScript code into that editor and see what happens Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is linting Which problems can linting prevent What are some of the benefits of using a formatter What is Prettier Why should you install linters and/or formatters as dev dependencies in your project Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7556,
      "relative_path": "git_repos\\odin-project\\javascript\\javascript_in_the_real_world\\linting.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "882feb638b7a079e0b2d023c90477416",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\classes.md",
    "source_type": "git_repo",
    "title": "classes",
    "content": "Introduction\nJavaScript does not have classes in the same sense as other object-oriented languages like Java or Ruby ES6, however, did introduce a syntax for object creation that uses the class keyword It is basically a new syntax that does the exact same thing as the object constructors and prototypes we learned about in the constructor lesson Historically, especially when ES6 was released, there was some controversy with class syntax precisely because it looks like classes from languages like Java, but in reality is only syntactic sugar over constructors and prototypes The underlying mechanisms have not changed despite the different syntax (no classical inheritance going on) but often trips people up since the syntax isn't as explicit about what's really going on with these objects Plenty of time has passed though and class syntax now exists in many code bases There aren't many new mechanisms to learn here, mainly just new syntax for mostly familiar concepts Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain the differences between an object constructor and a class Explain what getters and setters are Describe basic class syntax Use inheritance with classes Explain how to implement private class fields and methods Explain what static properties and methods are Assignment\n1 Read about [getters and setters](https://javascript info/property-accessors) (don't worry about the \"accessor descriptors\" section as we have not covered them before) While the article doesn't show classes yet, classes can use getters and setters via the same syntax (without `Object defineProperty`) 1 Read JavaScript info's [primer on class syntax](https://javascript info/class) for an overview of class syntax 1 [MDN's docs on classes](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Classes) are, as usual, a great resource for going a little deeper There are lots of individual syntax features but these can be explored over time As usual, you're not required to memorize anything just from reading docs here and now Some good features to have a little look at include:\n- [Extending classes](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Classes/extends) (like having a Player class that extends a Person class, adding `Person prototype` to the prototype chain) - [Private properties](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields), allowing you to have properties or methods that are not accessible outside of the class, like with private variables in factory functions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5006,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\classes.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8b2f12659f499fd4efbafafe6b266e87",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\classes.md",
    "source_type": "git_repo",
    "title": "classes",
    "content": "over time As usual, you're not required to memorize anything just from reading docs here and now Some good features to have a little look at include: - [Extending classes](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Classes/extends) (like having a Player class that extends a Person class, adding `Person prototype` to the prototype chain) - [Private properties](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields), allowing you to have properties or methods that are not accessible outside of the class, like with private variables in factory functions- [Static properties and methods](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Classes/static) which are properties and methods (public or private) that are accessed on the class itself and not on the instance of a class This is similar to how some string methods are accessed on the instance of a string itself e g `someString slice(0, 5)` whereas some methods are called on the String constructor directly e g `String fromCharCode(79, 100, 105, 110)` #### Practice\nGo back to your [Library project](https://www theodinproject com/lessons/node-path-javascript-library) and refactor it to use `class` instead of plain constructors Don't forget to use the git branch workflow you learned in [Revisiting Rock Paper Scissors](https://www theodinproject com/lessons/foundations-revisiting-rock-paper-scissors) to work on a new feature You should get used to working like this Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What differences are there between object constructors and classes What are getters and setters How is inheritance used with classes What are some private class features What are static properties Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Stephen Mayeux has a Youtube playlist on ES6 classes and some of their methods with easy to follow examples w3resource provides a comprehensive collection of exercises on classes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5006,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\classes.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "21a5e46eca0635749d02eee8795f2f03",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
    "source_type": "git_repo",
    "title": "es6_modules",
    "content": "Introduction\nWe've learned about the module pattern in a previous lesson and played around with using them to help organize our variables and functions At some point in the last few projects, you may have even wondered, \"How would we manage more complex projects Files would get too long It would be great if we could split our code up into multiple files for organization \" Using multiple files would be extremely handy for this exact reason While the module pattern used to play a big part in helping us manage this, the release of ES6 (sometimes referred to as ES2015) gave us actual \"modules\" and thus they are often referred to as \"ES6 modules\" or \"ESM\" Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what ES6 modules are and how to import and export from them Describe the difference between default and named exports Explain the main differences between CommonJS modules and ES6 modules Before ES6 modules: The global scope problem\nEven though `let`/`const` and arrow functions were not around before ES6, we will still use them in our pre-ES6 examples They won't change how things work regarding the global scope and the module pattern, which is the main focus of this section Let's say we have two scripts, one js and two js, and we link them in our HTML as separate scripts ```html\n```\njavascript\n// one js\nconst greeting = \"Hello, Odinite \";\njavascript\n// two js\nconsole log(greeting);\nWhen we open the HTML, we see \"Hello, Odinite \" getting logged to the console, even though greeting was never defined in two js That's because the two scripts were loaded one after the other into the same global scope, as if we wrote only one file with the two lines in that order If we put the two js script tag first, we would instead get an error that greeting is not defined, as it would try to do the console log before we define the variable This means that even if we use multiple JavaScript files, they will still end up sharing the same global scope Our top-level variables are not safe Before ESM, we could wrap some things in an IIFE, which would cause it to run just the same, but now any variables inside them are scoped to that function and not globally javascript\n// one js\n(() => {\nconst greeting = \"Hello, Odinite",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14617,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "d3701a7f5ddbb1598cbe2573e3f203e4",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
    "source_type": "git_repo",
    "title": "es6_modules",
    "content": "before we define the variable This means that even if we use multiple JavaScript files, they will still end up sharing the same global scope Our top-level variables are not safe Before ESM, we could wrap some things in an IIFE, which would cause it to run just the same, but now any variables inside them are scoped to that function and not globally javascript // one js (() => { const greeting = \"Hello, Odinite\";\n})();\nNow, we get an error in the console that greeting is not defined, because there is no global variable called greeting for us to log But what if we wanted only some things to be exposed to other files We can return those things from our IIFE into the global scope and keep the other things private javascript\n// one js\nconst greeting = (() => {\nconst greetingString = \"Hello, Odinite \";\nconst farewellString = \"Bye bye, Odinite \";\nreturn greetingString;\n})();\nNow, the global variable greeting will contain \"Hello, Odinite \" and so our code from two js successfully logs this to the console However, our private farewellString variable is not global, so that cannot be accessed anywhere in two js Through this, we are able to choose what to expose from one file to be made available to all files that follow it This is why IIFEs were often called the \"module pattern\", because they allowed us to write modular code across multiple files before we were given \"real modules\" But now, with ESM, we no longer need to use IIFEs for this specific purpose ES6 modules\nWith ESM, we have a little more control over things Each file has its own private scope by default, and not only can we choose what things we export from that file, we can also choose what things we import into other files So just because we export something, it doesn't mean it's automatically available elsewhere; it will only be available in another file if we explicitly import it there Lots of control #### Module scope is not the global scope\nWhen using ESM, each module has its own private scope, where we use import/export to communicate between files A top-level variable in a module will not be accessible in the global scope Import and export\nHow do we actually import and export In true JavaScript fashion, we don't have just one but two types of importing and exporting: default and named, and they essentially do the same kind of thing but very slightly differently They can even be mixed and matched in the same file",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14617,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "cd5cd9e7af4861cb53e42d4473cc1958",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
    "source_type": "git_repo",
    "title": "es6_modules",
    "content": "scope, where we use import/export to communicate between files A top-level variable in a module will not be accessible in the global scope Import and export How do we actually import and export In true JavaScript fashion, we don't have just one but two types of importing and exporting: default and named, and they essentially do the same kind of thing but very slightly differently They can even be mixed and matched in the same fileFirstly, we'll just show you the different import/export syntaxes but the code won't work yet, as you'll also need to link the scripts as ES6 modules We will cover that after this section Named exports\nLet's use our one js and two js examples from before First, we'll need to export our greeting and farewell strings from one js To export something as a named export, we can either stick the export keyword in front of its declaration, or add an export { } somewhere in the file (typically the end), where the curly braces contain a list of the names of the things to export Either method is fine to use, and we can export as many things as we liked as named exports javascript\n// one js\nexport const greeting = \"Hello, Odinite \";\nexport const farewell = \"Bye bye, Odinite \";\nOr on a separate line:\njavascript\n// one js\nconst greeting = \"Hello, Odinite \";\nconst farewell = \"Bye bye, Odinite \";\nexport { greeting, farewell };\nNow to import these variables in two js Remember that we can control what we import, so if we only need the greeting variable, we could just import that on its own If another file needed the farewell variable (or both), then that file could import what it needs Don't import it Can't use it To do named imports, we must specify the names of the things we want to import inside { } and provide the path to the file we're importing from (when we deal with importing third-party libraries later, you can just use the name of the library instead of a full file path) Note that you cannot use template strings for the file path, only single or double-quoted strings ```javascript\n// two js\nimport { greeting, farewell } from \" /one js\";\nconsole log(greeting); // \"Hello, Odinite \"\nconsole log(farewell); // \"Bye bye, Odinite \"\n```\n#### Named imports/exports aren't the same as object literals",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14617,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "ee882af51b7048883c4ac1e146e5769d",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
    "source_type": "git_repo",
    "title": "es6_modules",
    "content": "from (when we deal with importing third-party libraries later, you can just use the name of the library instead of a full file path) Note that you cannot use template strings for the file path, only single or double-quoted strings ```javascript // two js import { greeting, farewell } from \" /one js\"; console log(greeting); // \"Hello, Odinite \" console log(farewell); // \"Bye bye, Odinite \" ``` #### Named imports/exports aren't the same as object literalsUsing `{ }` with named imports/exports is special syntax and is not related in any way to declaring object literals or [destructuring objects](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring) ```javascript\nexport { greeting, farewell };\nimport { greeting, farewell } from \" /one js\";\n```\nIn the above, we are not exporting an object containing `greeting` and `farewell` keys, nor are we destructuring an object with those keys when importing We are just using named import/export syntax Default exports\nIn contrast to named exports, a file can only default export a single thing Something exported this way does not have a name attached to it, so when you import it somewhere, you can decide what name to give it To export something from a file as a default export, we can also do it inline by prepending export default to the appropriate declaration, or we can export it at the end of the file, this time without any curly braces Again, either way is perfectly fine Note that if you want to inline default export a variable, the default keyword replaces the variable declaration so you export the expression directly Let's default export our greeting string from one js javascript\n// one js\nexport default \"Hello, Odinite \";\nOr on a separate line:\njavascript\n// one js\nconst greeting = \"Hello, Odinite \";\nexport default greeting;\nNow in our two js, we can default import that string Remember, since we're importing something that was default exported, we can name it whatever we want Even though the variable was called greeting in one js, we don't have to call it that in two js if we don't want to When default importing, we don't use curly braces, which are for named importing ```javascript\n// two js\nimport helloOdinite from \" /one js\";\nconsole log(helloOdinite); // \"Hello, Odinite",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14617,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "f242bef7bfa806a2301b85c1cb7ace14",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
    "source_type": "git_repo",
    "title": "es6_modules",
    "content": "js, we can default import that string Remember, since we're importing something that was default exported, we can name it whatever we want Even though the variable was called greeting in one js, we don't have to call it that in two js if we don't want to When default importing, we don't use curly braces, which are for named importing ```javascript // two js import helloOdinite from \" /one js\"; console log(helloOdinite); // \"Hello, Odinite\"\n```\nYou can use both default and named exports in the same file Confusingly enough, there isn't really a universally agreed-upon rule for when to use either, outside of the fact that a file can have multiple named exports but only one default export When it comes to only needing to export a single thing from a module, some people prefer using a default export whereas some prefer using a single named export Both work so use whatever you prefer, or if working in a team, whatever the team prefers Let's default export the greeting string from one js, and export the farewell string as a named export javascript\n// one js\nexport default \"Hello, Odinite \";\nexport const farewell = \"Bye bye, Odinite \";\nWe can then import them both in two js We need to default import the greeting string (which also means we can name it whatever we want) and named import the farewell string ```javascript\n// two js\nimport greeting, { farewell } from \" /one js\";\nconsole log(greeting); // \"Hello, Odinite \"\nconsole log(farewell); // \"Bye bye, Odinite \"\n```\nEntry points\nWhen we use ESM, instead of adding every JavaScript file to our HTML in order, we only need to link a single file - the entry point ```html\n```\nWhy is two js our entry point Well, in our above examples, two js imports variables from one js, meaning two js depends on one js, so we have the following dependency graph:\ntext\nimporter  depends on  exporter\ntwo js <-------------- one js\nWhen we load two js as a module, the browser will see that it depends on one js and load the code from that file as well If we instead used one js as our entry point, the browser would see that it does not depend on any other files, and so would do nothing else Our code from two js would not be used, and nothing would get logged",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14617,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "7d5900d855c308f104f91ddd03a73b65",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
    "source_type": "git_repo",
    "title": "es6_modules",
    "content": "exporter two js <-------------- one js When we load two js as a module, the browser will see that it depends on one js and load the code from that file as well If we instead used one js as our entry point, the browser would see that it does not depend on any other files, and so would do nothing else Our code from two js would not be used, and nothing would get loggedIf we had another file, three js, that exported something and two js imported from it, then two js would still be our entry point, now depending on both one js and three js text\ntwo js <-------------- one js\n└------- three js\nOr perhaps instead of two js, one js imports from three js In which case, two js would still be our entry point and depend on three js indirectly through one js text\ntwo js <-------------- one js <-------------- three js\nNote that we only needed the one script tag, as the browser will handle the additional file dependencies for us We also did not need to add the defer attribute, as type=\"module\" will automatically defer script execution for us If you had coded along with the IIFE example at the start of the lesson, try rewriting the JavaScript to use import and export, and link only the entry point as a module script Due to browser security reasons, ES6 modules cannot be loaded if you open the HTML file directly in the browser, so make sure you use Visual Studio Code's Live Preview extension if you aren't already CommonJS\nAlong the way, you may have bumped into something called CommonJS (CJS), which uses syntax like require and module exports instead of import and export You may remember seeing this in our JavaScript exercises in the Foundations course (you've come a long way) This is a module system that was designed for use with Node js that works a little differently than ESM, and is not something that browsers will be able to understand CJS is still used quite a lot in Node js code, though in recent years, ESM in Node js has been gaining popularity For the time being, we are focused on writing code to run in the browser, so we will be spending time with ESM If you are taking the Full Stack JavaScript pathway, then we will cover CJS in more detail later in the Node js course Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14617,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "dfc517e8543c369b4523598d5d2d744d",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
    "source_type": "git_repo",
    "title": "es6_modules",
    "content": "will be able to understand CJS is still used quite a lot in Node js code, though in recent years, ESM in Node js has been gaining popularity For the time being, we are focused on writing code to run in the browser, so we will be spending time with ESM If you are taking the Full Stack JavaScript pathway, then we will cover CJS in more detail later in the Node js course Assignment 1As per usual, you can learn most about JavaScript keywords and concepts from the MDN docs, so check out the [docs on export](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Statements/export) and [docs on import](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Statements/import) There are little extras about them we have not covered in this lesson, such as aliases and namespace imports Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Before ES6 modules, how would you privatize a variable from being accessible in other files Before ES6 modules, how would you expose variables to be accessible in later files What are some benefits of writing code in modules What is the difference between default and named exports What is an entry point How do you link a module script in HTML Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This video on ES6 Modules by Web Dev Simplified summarizes much of the ESM topics discussed in this lesson At the end, he mentions nomodule and support for older browsers that were unable to support ESM Nowadays, this is not a concern as ESM is supported by basically every browser in common use Here is a brief comparison of CommonJS modules and ES6 modules",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14617,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\es6_modules.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "17d7c8edcf8a556d6210fbfe93061bee",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\json.md",
    "source_type": "git_repo",
    "title": "json",
    "content": "Introduction\nJSON (JavaScript Object Notation) is a standardized format for structuring data. It is heavily based on the syntax for JavaScript objects. You will often encounter JSON formatted data when working with external servers or APIs - it is essentially the universal format for transmitting data on the web.\nFortunately, there isn't much to learn here. We're only including a lesson on it because some formatting rules can cause confusion if you aren't aware of them. Spend 10-15 minutes going through the following resources and you'll be good to go.\nAssignment\n1. This [JSON MDN tutorial]( https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON) is probably all you need...\n2. Read about the 2 JavaScript methods that you'll most often be using when dealing with JSON - [JSON.parse()](https://www.w3schools.com/js/js_json_parse.asp) and [JSON.stringify()](https://www.w3schools.com/js/js_json_stringify.asp).\n3. Mis-formatted JSON is a common cause of errors. This [JSON formatter website](https://jsonformatter.curiousconcept.com/) lets you paste in JSON code and will search it for formatting errors.\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1485,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\json.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "713a555c560e939fbd231ff6e8dab017",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "Introduction\nWe have discussed object constructors in the previous lesson However, they are one of the many ways to organize your code While they are fairly common and a fundamental building block of the JavaScript language, they have their flaws Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe the scope of a variable Explore what closures are Briefly consider the disadvantages of using constructors Discuss Factory functions with examples Discuss Private variables and functions concerning factory functions Showcase object inheritance with the help of factory functions Describe what module pattern and IIFEs are Discuss encapsulation and how the module pattern helps with namespacing Scoopfuls of scopes\nThe word \"scoping\" essentially asks, \"Where is a certain variable available to me \" - it indicates the current context of a variable When a variable is not declared within any functions, existing outside any { curly braces }, they are said to be in the global scope, meaning that they are available everywhere If they are within a function or { curly braces }, they are known to be locally scoped Before ECMAScript 6, JavaScript had a single keyword to declare a variable, var These variables can be redefined and updated, and are said to be defined within the function scope, meaning, they are only available within the function they are declared in In ECMAScript 6, the keywords let and const were introduced While var variables were function scoped, these allow you to define variables that are block scoped - basically, scoping the variable to only be available within the closest set of { curly braces } in which it was defined These braces can be those of a for loop, if-else condition, or any other similar construct, and are called, a block Let's see an example to sum this all up ```javascript\nlet globalAge = 23; // This is a global variable\n// This is a function - and hey, a curly brace indicating a block\nfunction printAge (age) {\nvar varAge = 34; // This is a function scoped variable\n// This is yet another curly brace, and thus a block\nif (age > 0) {\n// This is a block-scoped variable that exists\n// within its nearest enclosing block, the if's block\nconst constAge = age * 2;\nconsole log(constAge);\n}\n// ERROR We tried to access a block scoped variable\n// not within its scope\nconsole log(constAge);\n}\nprintAge(globalAge);\n// ERROR",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "cf26d712c1685f9a0252b344e1a018a9",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "(age) { var varAge = 34; // This is a function scoped variable // This is yet another curly brace, and thus a block if (age > 0) { // This is a block-scoped variable that exists // within its nearest enclosing block, the if's block const constAge = age * 2; console log(constAge); } // ERROR We tried to access a block scoped variable // not within its scope console log(constAge); } printAge(globalAge); // ERRORWe tried to access a function scoped variable\n// outside the function it's defined in\nconsole log(varAge);\n```\nTake a while to brew on that example In the end, it's not some mind-blowing concept but there's a whole bunch of terms in there - it'll all help us understand the next mammoth - closures Closures aren't scary\nThe best way to approach this would be to start with an example - take a look at this piece of code below ```javascript\nfunction makeAdding (firstNumber) {\n// \"first\" is scoped within the makeAdding function\nconst first = firstNumber;\nreturn function resulting (secondNumber) {\n// \"second\" is scoped within the resulting function\nconst second = secondNumber;\nreturn first + second;\n}\n}\n// but we've not seen an example of a \"function\"\n// being returned, thus far - how do we use it const add5 = makeAdding(5);\nconsole log(add5(2)) // logs 7\n```\nA lot going on, so let's break it down:\nThe makeAdding function takes an argument, firstNumber, declares a constant first with the value of firstNumber, and returns another function When an argument is passed to the returned function, which we have assigned to add5, it returns the result of adding up the number passed earlier to the number passed now (first to second) Now, while it may sound good at first glance, you may already be raising your eyebrows at the second statement As we've learned, the first variable is scoped within the makeAdding function When we declare and use add5, however, we're outside the makeAdding function How does the first variable still exist, ready to be added when we pass an argument to the add5 function This is where we encounter the concept of closures Functions in JavaScript form closures A closure refers to the combination of a function and the surrounding state in which the function was declared",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "364cc753f99942eb73962a67634cc10f",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "we've learned, the first variable is scoped within the makeAdding function When we declare and use add5, however, we're outside the makeAdding function How does the first variable still exist, ready to be added when we pass an argument to the add5 function This is where we encounter the concept of closures Functions in JavaScript form closures A closure refers to the combination of a function and the surrounding state in which the function was declaredThis surrounding state, also called its lexical environment, consists of any local variables that were in scope at the time the closure was made Here, add5 is a reference to the resulting function, created when the makeAdding function is executed, thus it has access to the lexical environment of the resulting function, which contains the first variable, making it available for use This is a crucial behavior of functions - allowing us to associate data with functions and manipulate that data anywhere outside of the enclosing function If you're still confused, read the MDN documentation on Closures, but only the sections \"Lexical scoping\", \"Closure\" and \"Practical closures\" The other sections refer to concepts that will be discussed later in this lesson So, what's wrong with constructors The biggest problem with constructors is that they don't provide automatic safeguards that prevent from using them wrong One of the key arguments is how they look like regular JavaScript functions, even though they do not behave like regular functions As we warned in the object constructors lesson, if you try to use a constructor function without the new keyword, and you didn't include additional safeguards in the constructor not only does your program fail to work, but it also produces error messages that are hard to track down and understand Yet another issue stems from misusing instanceof In other programming languages, the keyword is a reliable way to know the code with which an object was made; but in JavaScript, it checks the presence of a constructor's prototype in an object's entire prototype chain - which does nothing to confirm if an object was made with that constructor since the constructor's prototype can even be reassigned after the creation of an object Because of that, constructors have become unpopular in favor of a pattern that is similar but addresses a ton of these problems by not relying on those troublesome features: Factory Functions Factory functions 🏭\nThese fancy-sounding functions work very similar to how constructors did, but with one key difference - they levy the power of closures",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "df8778505d624e98eca4ca811d05d183",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "object was made with that constructor since the constructor's prototype can even be reassigned after the creation of an object Because of that, constructors have become unpopular in favor of a pattern that is similar but addresses a ton of these problems by not relying on those troublesome features: Factory Functions Factory functions 🏭 These fancy-sounding functions work very similar to how constructors did, but with one key difference - they levy the power of closuresInstead of using the new keyword to create an object, factory functions set up and return the new object when you call the function They do not use the prototype, which incurs a performance penalty - but as a general rule, this penalty isn’t significant unless you’re creating thousands of objects Let's take a basic example to compare them to constructor functions ```javascript\nconst User = function (name) {\nthis name = name;\nthis discordName = \"@\" + name;\n}\n// hey, this is a constructor -\n// then this can be refactored into a factory function createUser (name) {\nconst discordName = \"@\" + name;\nreturn { name, discordName };\n}\n// and that's very similar, except since it's just a function,\n// we don't need a new keyword\n```\n### The object shorthand notation\nSome may get confused by the way the returned object is written in the factory function example In 2015, a shortcut to creating objects was added to JavaScript Say we wanted to create an object with a name, age, and color, we would write it as follows:\n```javascript\nconst name = \"Bob\";\nconst age = 28;\nconst color = \"red\";\nconst thatObject = { name: name, age: age, color: color };\n```\nHowever, now, if we have a variable with the same name as that of the property to which we are assigning it, then we can write it once ```javascript\nconst nowFancyObject = { name, age, color };\n```\nAn added advantage to this is that it's now possible to console log values neatly ```javascript\n// If you wanted to log these values, earlier,\n// you would have done the following\nconsole log(name, age, color);\n// which would have resulted in a mess - Bob 28 red\n// Try wrapping it in some { curly braces } now,\n// which makes it an object console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "9ee8916296dee32d274bc4d8bb691d99",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "```javascript const nowFancyObject = { name, age, color }; ``` An added advantage to this is that it's now possible to console log values neatly ```javascript // If you wanted to log these values, earlier, // you would have done the following console log(name, age, color); // which would have resulted in a mess - Bob 28 red // Try wrapping it in some { curly braces } now, // which makes it an object consolelog({ name, age, color });\n// now it logs as - { name: \"Bob\", age: 28, color: \"red\" }\n```\n### Destructuring\nYet another expression allows you to \"unpack\" or \"extract\" values from an object (or array) This is known as **destructuring** When you have an object, you can extract a property of an object into a variable of the same name, or any named variable for an array Take a look at the example below:\n```javascript\nconst obj = { a: 1, b: 2 };\nconst { a, b } = obj;\n// This creates two variables, a and b,\n// which are equivalent to\n// const a = obj a;\n// const b = obj b;\nconst array = [1, 2, 3, 4, 5];\nconst [ zerothEle, firstEle ] = array;\n// This creates zerothEle and firstEle, both of which point\n// to the elements in the 0th and 1st indices of the array\n```\nThe [MDN documentation on destructuring assignment](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) has some great examples and should be a good read for this concept Private variables and functions\nNow you may be thinking - where does closure come into all of this Factories seem to be returning an object This is where we can extend our User factory to add a few more variables and introduce \"private\" ones Take a look at this, now:\n```javascript\nfunction createUser (name) {\nconst discordName = \"@\" + name;\nlet reputation = 0;\nconst getReputation = () => reputation;\nconst giveReputation = () => reputation++;\nreturn { name, discordName, getReputation, giveReputation };\n}\nconst josh = createUser(\"josh\");\njosh giveReputation();\njosh giveReputation();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "a84ae5a2031ec35fca91f95de2364aa9",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "Factories seem to be returning an object This is where we can extend our User factory to add a few more variables and introduce \"private\" ones Take a look at this, now: ```javascript function createUser (name) { const discordName = \"@\" + name; let reputation = 0; const getReputation = () => reputation; const giveReputation = () => reputation++; return { name, discordName, getReputation, giveReputation }; } const josh = createUser(\"josh\"); josh giveReputation(); josh giveReputation(); consolelog({\ndiscordName: josh discordName,\nreputation: josh getReputation()\n});\n// logs { discordName: \"@josh\", reputation: 2 }\n```\nWe’ve introduced a new metric for a new user - a reputation Notice that the object we return in the factory function does not contain the reputation variable itself, nor any copy of its value Instead, the returned object contains two functions - one that reads the value of the reputation variable, and another that increases its value by one The reputation variable is what we call a \"private\" variable, since we cannot access the variable directly in the object instance - it can only be accessed via the closures we defined Concerning factory functions, a private variable or function uses closures to create smaller, dedicated variables and functions within a factory function itself - things that we do not need to return in the object itself This way we can create neater code, without polluting the returned object with unnecessary variables that we create while creating the object itself Often, you do not need every single function within a factory to be returned with the object, or expose an internal variable You can use them privately since the property of closures allows you to do so In this case, we did not need control of the reputation variable itself To avoid foot guns, like accidentally setting the reputation to -18000, we expose the necessary details in the form of getReputation and giveReputation #### Constructors and closure\nNote that you could technically also use closure in constructors, by defining the methods to access a \"private property\" inside the constructor, instead of on the prototype But that would make them non-inheritable, which defies the purpose of constructors Prototypal inheritance with factories\nIn the lesson with constructors, we looked deeply into the concept of prototype and inheritance, and how to give our objects access to the properties of another With factory functions too, there are easy ways to do that",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "9e7e846042c6b69bf3922f6a42158b6c",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "also use closure in constructors, by defining the methods to access a \"private property\" inside the constructor, instead of on the prototype But that would make them non-inheritable, which defies the purpose of constructors Prototypal inheritance with factories In the lesson with constructors, we looked deeply into the concept of prototype and inheritance, and how to give our objects access to the properties of another With factory functions too, there are easy ways to do thatTake another hypothetical scenario into consideration We need to extend the User factory into a Player factory that needs to control some more metrics - there are some ways to do that:\n```javascript\nfunction createPlayer (name, level) {\nconst { getReputation, giveReputation } = createUser(name);\nconst increaseLevel = () => level++;\nreturn { name, getReputation, giveReputation, increaseLevel };\n}\n```\nAnd there you go You can create your User, extract what you need from it, and re-return whatever you want to - hiding the rest as some private variables or functions In case you want to extend it, you can also use the Object assign method to add on the properties you want ```javascript\nfunction createPlayer (name, level) {\nconst user = createUser(name);\nconst increaseLevel = () => level++;\nreturn Object assign({}, user, { increaseLevel });\n}\n```\nThe module pattern: IIFEs\nECMAScript 6 introduced a new JavaScript feature called \"modules\" - which are a set of syntax for importing and exporting code between different JavaScript files While they are important and powerful, they are covered a bit later in the curriculum We are not talking about them in this section Oftentimes, you do not need a factory to produce multiple objects - instead, you are using it to wrap sections of code together, hiding the variables and functions that you do not need elsewhere as private This is easily achievable by wrapping your factory function in parentheses and immediately calling (invoking) it This immediate function call is commonly referred to as an Immediately Invoked Function Expression (duh) or IIFE in short This pattern of wrapping a factory function inside an IIFE is called the module pattern",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "c7843d8d1ccd727beeb47a75f7c4fc22",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "objects - instead, you are using it to wrap sections of code together, hiding the variables and functions that you do not need elsewhere as private This is easily achievable by wrapping your factory function in parentheses and immediately calling (invoking) it This immediate function call is commonly referred to as an Immediately Invoked Function Expression (duh) or IIFE in short This pattern of wrapping a factory function inside an IIFE is called the module pattern```javascript\nconst calculator = (function () {\nconst add = (a, b) => a + b;\nconst sub = (a, b) => a - b;\nconst mul = (a, b) => a * b;\nconst div = (a, b) => a / b;\nreturn { add, sub, mul, div };\n})();\ncalculator add(3,5); // 8\ncalculator sub(6,2); // 4\ncalculator mul(14,5534); // 77476\n```\nIn this example, we have a factory function creating some basic operations that we need only once We can wrap it in parentheses and immediately call it by adding () - returning the result object that we store in calculator In this way we can write code, wrapping away things that we do not need as private variables and functions inside our factory function and while they are tucked inside of our module, we can use the returned variables and functions outside the factory, as necessary Encapsulating with the module pattern\nAt first glance, this does not seem particularly useful If we have some code that we use only once, why not write it in the main section of our JavaScript file itself After all, the power of factory functions lies in being, well, a factory to make multiple objects, right This is where we encounter the word encapsulation - bundling data, code, or something into a single unit, with selective access to the things inside that unit itself While it sounds general, this is what happens when we wrap, or encapsulate our code into modules - we don't expose everything to the body of our program itself This encapsulation leads to an effect called namespacing Namespacing is a technique that is used to avoid naming collisions in our programs Take the calculator example into consideration It's very easy to imagine a scenario where you can accidentally create multiple functions with the name add What does add do - does it add two numbers Strings Does it take its input directly from the DOM and display the result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "a333da086f558539c60c00a010714a83",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "the body of our program itself This encapsulation leads to an effect called namespacing Namespacing is a technique that is used to avoid naming collisions in our programs Take the calculator example into consideration It's very easy to imagine a scenario where you can accidentally create multiple functions with the name add What does add do - does it add two numbers Strings Does it take its input directly from the DOM and display the resultWhat would you name the functions that do these things Instead, we can easily encapsulate them inside a module called calculator which generates an object with that name, allowing us to explicitly call calculator add(a, b) or calculator sub(a, b) Assignment\n1 WesBos has a beautiful and in-depth section on scopes and closures Please check out these sections under \"Module 3 - The Tricky Bits\":\n- [The article on scope](https://wesbos com/javascript/03-the-tricky-bits/scope)\n- [The article on closures](https://wesbos com/javascript/03-the-tricky-bits/closures)\n1 Read this article on [module pattern in JavaScript](https://dev to/tomekbuszewski/module-pattern-in-javascript-56jm) by Tomek Buszewski 1 As an optional alternative, in case you prefer video lessons, this [YouTube series on module pattern](https://www youtube com/playlist list=PLoYCgNOIyGABs-wDaaxChu82q_xQgUb4f) covers most of the content that we have discussed Note that the videos include jQuery, but you don't need to understand the jQuery syntax since the focus is on the module pattern concept Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How does scope work in JavaScript What are closures and how do they help in creating private variables What common issues can you face when working with constructors What are private variables in factory functions and how can they be useful How can we implement prototypal inheritance with factory functions How does the module pattern work What does IIFE stand for and what are they What is the concept of namespacing and how do factory functions help with encapsulation Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This video explains a good example of closures",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "3c6d72396185c11726fca2e6c8ff5aec",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
    "source_type": "git_repo",
    "title": "factory_functions_and_module_pattern",
    "content": "What are private variables in factory functions and how can they be useful How can we implement prototypal inheritance with factory functions How does the module pattern work What does IIFE stand for and what are they What is the concept of namespacing and how do factory functions help with encapsulation Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental This video explains a good example of closuresHere is an interactive scrim on factory functions This article discusses three different kinds of prototypal inheritance with some good examples Learning JavaScript Design Patterns by Addy Osmani and Lydia Hallie",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19132,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\factory_functions_and_module_pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 120,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "d878b790c1f8de26c3df713a8e565e6a",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\npm.md",
    "source_type": "git_repo",
    "title": "npm",
    "content": "Introduction\nIn the previous lesson, we learned about ES6 modules and the syntax used for importing and exporting things between modules As we build bigger, more complex applications, we may not want to write everything ourselves We may want to import third party code to handle some things for us, which can range from helper functions other people wrote, to entire frameworks for us to build our application within To find and import these third party packages with ease, we need the help of a package manager such as npm Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand what npm is Understand the purpose of the package json file npm\nnpm (no capitals ) is a package manager - a gigantic repository of plugins, libraries, and other tools, which provides us with a command-line tool we can use to install these tools (that we call \"packages\") in our applications We will then have all our installed packages' code locally, which we can import into our own files We could even publish our own code to npm You may recall installing npm in the Foundations course in order to install the Jest testing framework to do the JavaScript exercises Funnily enough, npm does not stand for \"Node Package Manager\", though you will often see it referred to as such If you are in the Full Stack Ruby on Rails pathway, you will have already been introduced to Yarn, another JavaScript package manager For this course, we will be using npm As our applications get more complex and more and more files are needed (whether they are our own files or files from packages we've installed and imported), managing many of these dependencies can become rather troublesome, especially when packages get updated This can get even more troublesome when we consider that we may end up sending many JavaScript files to the browser to download In the next lesson, we will introduce bundlers, tools that lets us write multiple files that are better for us to work with, then bundle them together into fewer smaller files which will ultimately be sent to the browser instead package json\nnpm revolves around a file called package json It's a JSON file containing information about our project, such as its name or any dependencies and their version numbers npm can read this file and do things such as install all of the listed dependencies with the correct versions, and running commands that you've set as an npm script (we will cover npm scripts in a later lesson) For example, here is the package",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6202,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\npm.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "069c2687a80bef701a8ad611898e5f3c",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\npm.md",
    "source_type": "git_repo",
    "title": "npm",
    "content": "instead package json npm revolves around a file called package json It's a JSON file containing information about our project, such as its name or any dependencies and their version numbers npm can read this file and do things such as install all of the listed dependencies with the correct versions, and running commands that you've set as an npm script (we will cover npm scripts in a later lesson) For example, here is the packagejson file for The Odin Project's curriculum repo that houses all of the lesson files (including this lesson you are doing right now):\njson\n{\n\"name\": \"curriculum\",\n\"version\": \"1 0 0\",\n\"description\": \"[The Odin Project](https://www theodinproject com/) (TOP) is an open-source curriculum for learning full-stack web development Our curriculum is divided into distinct courses, each covering the subject language in depth Each course contains a listing of lessons interspersed with multiple projects These projects give users the opportunity to practice what they are learning, thereby reinforcing and solidifying the theoretical knowledge learned in the lessons Completed projects may then be included in the user's portfolio \",\n\"scripts\": {\n\"lint\": \"markdownlint-cli2\",\n\"fix\": \"markdownlint-cli2 --fix\"\n},\n\"license\": \"CC BY-NC-SA 4 0\",\n\"devDependencies\": {\n\"markdownlint-cli2\": \"^0 12 1\"\n}\n}\nThere's a lot of stuff here and we don't need to understand it all yet The point is that if you were to clone the curriculum repo, if you ran npm install, npm would read this package json file and see that it needs to install the markdownlint-cli2 package Once this package is installed, you'll be able to run either of the scripts that use that package The curriculum repo itself does not actually contain the code for the markdownlint-cli2 package, as anyone cloning the repo can just run npm install to let npm grab the code for them In our own projects, as we use npm to install new packages (or uninstall any ), it will automatically update our package json with any new details We will see this in action in the next lesson when we introduce module bundling using a package called Webpack Assignment\n1 Read a bit more about npm, packages, and dependencies:\n1 [Installing packages with npm](https://docs npmjs com/downloading-and-installing-packages-locally) 1 Read about [the `package json` file](https://docs npmjs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6202,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\npm.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7f3eb9d2c90ded2a4e681fed0f7a39e9",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\npm.md",
    "source_type": "git_repo",
    "title": "npm",
    "content": "code for them In our own projects, as we use npm to install new packages (or uninstall any ), it will automatically update our package json with any new details We will see this in action in the next lesson when we introduce module bundling using a package called Webpack Assignment 1 Read a bit more about npm, packages, and dependencies: 1 [Installing packages with npm](https://docs npmjs com/downloading-and-installing-packages-locally) 1 Read about [the `package json` file](https://docs npmjscom/creating-a-package-json-file), the file that stores much of the information for our application 1 Any packages we install are called \"dependencies\", but if any packages are only used during the development process and their code is not needed for the user-facing app (such as the Jest testing framework), we call them [development dependencies](https://dev to/mshertzberg/demystifying-devdependencies-and-dependencies-5ege) 1 Here is a great little [history lesson about JavaScript and managing packages across multiple files](https://peterxjang com/blog/modern-javascript-explained-for-dinosaurs html) Only read up to \"Using a JavaScript module bundler (webpack)\", as we will cover bundlers and webpack in the next lesson Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is npm What file does npm use that contains all information about dependencies Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6202,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\npm.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "976ee682a358299f173c81b9b43d44b4",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\oop_principles.md",
    "source_type": "git_repo",
    "title": "oop_principles",
    "content": "Introduction\nBy this point, you will have learned and had a chance to practice the most common object-creation and organization patterns in JavaScript But that is just the tip of the iceberg More important than learning the syntax for factory functions or modules is figuring out how to use them effectively This whole series of lessons has been about the \"Object Oriented Programming\" paradigm (OOP) The basics of creating objects and classes are relatively straightforward But it is not straightforward to decide what to put in each object, or when to make a new object, or when to let an object 'inherit' from another one Luckily there are several concepts and principles that can guide us into making good decisions when it comes to our objects This lesson is an introduction to the most important of those concepts Keep in mind that there is not usually a very clear answer to your application design questions Some patterns and ideas are obviously better than others, but there is often some trade-off when deciding where to put a specific function In other words these principles are not rules- they're helpful guidelines As you read these resources, it might help to go back to some projects you've already done and think about how what you've written measures up to the examples you see And of course, as you move on, keep these things in mind when crafting new projects Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain the \"Single Responsibility Principle\" Briefly explain the additional SOLID principles Explain what \"tightly coupled\" objects are and why we want to avoid them Understand why composition is generally preferred to inheritance Single responsibility\nAs you craft your objects, one of the most important things to remember is the Single Responsibility Principle which states that a class (or object or module you get the point) should only have one responsibility This doesn't mean that an object can only do one thing, but it does mean that everything an object does should be part of one responsibility Here's a really common example Most of our code has functions to update and write things to the DOM in addition to our application logic It's a really good idea to separate your DOM stuff from the application logic Here we have a function that should check if a game over condition has been met There are two issues with this:\n```javascript\nfunction isGameOver() {\n// game over logic goes here if (gameOver) {\nconst gameOverDiv = document createElement('div');\ngameOverDiv classList add('game-over');\ngameOverDiv textContent = ${this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8107,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\oop_principles.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "98a7698691ca19fec45e0f3bfc7bf206",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\oop_principles.md",
    "source_type": "git_repo",
    "title": "oop_principles",
    "content": "functions to update and write things to the DOM in addition to our application logic It's a really good idea to separate your DOM stuff from the application logic Here we have a function that should check if a game over condition has been met There are two issues with this: ```javascript function isGameOver() { // game over logic goes here if (gameOver) { const gameOverDiv = document createElement('div'); gameOverDiv classList add('game-over'); gameOverDiv textContent = ${thiswinner} won the game ;\ndocument body appendChild(gameOverDiv);\n}\n}\n```\nThe first issue is that the function (and the module it's in) should not directly be the one to manipulate the DOM You should extract all the DOM manipulation into its own module and use it like so:\n```javascript\nfunction isGameOver() {\n// game over logic goes here if (gameOver){\nDOMStuff gameOver(this winner);\n}\n}\n```\nThe second issue remaining is that the isGameOver function should only be responsible for checking if the gameOver condition is met Based on isGameOver return value, the function that handles the game loop should be responsible for deciding whether to call DOMStuff gameOver(this winner) or not Another way to think about the Single Responsibility Principle is that a given method/class/component should have a single reason to change Otherwise, if an object is trying to have multiple responsibilities, changing one aspect might affect another The Single Responsibility Principle is the first of a commonly found set of 5 design principles called the SOLID principles You will read more about these principles in the assignment articles below Loosely coupled objects\nObviously, all of our objects are intended to work together to form our final application You should take care, however, to make sure that your individual objects can stand alone as much as possible Tightly coupled objects are objects that rely so heavily on each other that removing or changing one will mean that you have to completely change another one - a real bummer This one is related pretty strongly to 'Single Responsibility' but takes a different angle As an example, if we were writing a game and wanted to completely change how the User Interface worked, we should be able to do that without completely reworking the game logic So we should be able to start off writing our game using primarily console log()s and then add in a bunch of DOM functions later without touching the game logic Assignment\n1 The following article and videos mention the acronym **SOLID** before going on to talk about Single Responsibility",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8107,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\oop_principles.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5a5faea59bd5ea72c4bac60cd8a2073a",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\oop_principles.md",
    "source_type": "git_repo",
    "title": "oop_principles",
    "content": "were writing a game and wanted to completely change how the User Interface worked, we should be able to do that without completely reworking the game logic So we should be able to start off writing our game using primarily console log()s and then add in a bunch of DOM functions later without touching the game logic Assignment 1 The following article and videos mention the acronym **SOLID** before going on to talk about Single ResponsibilitySingle Responsibility is definitely the most relevant of the 5, but feel free to dig into the rest of the SOLID principles, if you like 1 Read this article about [SOLID principle #1: Single responsibility (JavaScript)](https://duncan-mcardle medium com/solid-principle-1-single-responsibility-javascript-5d9ce2c6f4a5) It simplifies that which is covered in more detail in the SOLID videos below 1 Watch [The SOLID Design Principles by WDS](https://www youtube com/playlist list=PLZlA0Gpn_vH9kocFX7R7BAe_CvvOCO_p9) to see code examples for each principle 1 [How to Write Highly Scalable and Maintainable JavaScript: Coupling](https://web archive org/web/20170215102316/http://www innoarchitech com:80/scalable-maintainable-javascript-coupling) explains loosely coupled objects pretty well 1 FunFunFunction has a great video on [favoring composition over inheritance](https://www youtube com/watch v=wfMtDGfHWpA) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the \"Single Responsibility Principle\" What are the additional SOLID principles What are \"tightly coupled\" objects and why do we want to avoid them Why is favoring composition over inheritance suggested Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The best book we've ever read on the subject of loose coupling is Practical Object-Oriented Design In Ruby Unfortunately, it is not free and not JavaScript We feel confident in recommending it anyway",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8107,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\oop_principles.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ece5d1d3b793a9435d93bd6d99b132e7",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\oop_principles.md",
    "source_type": "git_repo",
    "title": "oop_principles",
    "content": "What are the additional SOLID principles What are \"tightly coupled\" objects and why do we want to avoid them Why is favoring composition over inheritance suggested Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental The best book we've ever read on the subject of loose coupling is Practical Object-Oriented Design In Ruby Unfortunately, it is not free and not JavaScript We feel confident in recommending it anywayIf you don't know Ruby, it is a clear enough language that you don't really need to learn it to follow the examples and the content of the book is sincerely fantastic Alternatively, 99 Bottles of OOP is written in both JavaScript and Ruby It is written by the same author and may be a better option if you are brand new to OOP (it is not free either) Building a house from the inside out will walk you through the process of separating your core logic and DOM logic This brief video by Coderized covers the SOLID programming principles and more, within the context of embracing clean coding practices and establishing a maintainable code structure You may find it helpful if you are still confused about why these principles exist and how they can work together to improve your code, code architecture, and your skills as a programmer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8107,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\oop_principles.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7cc5cbe091693f02fdf76f14a36274e7",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\organizing_your_javascript_code_introduction.md",
    "source_type": "git_repo",
    "title": "organizing_your_javascript_code_introduction",
    "content": "Organizing your JavaScript code\nOne of the most daunting parts of JavaScript is learning how to organize your code. The reason this subject can be so overwhelming is not because JavaScript is so much more complex than other languages, but because it is incredibly forgiving! Many languages force you into using specific patterns and data structures in your code, but that is not true in JavaScript.\nIn the beginning, this is a great thing! For example, if you just want to make a button on your webpage do something, you can set that up in a couple lines of code. However, as your program becomes more complex, it can become hard to maintain unless you take care to organize your code, and because JavaScript is such a flexible language, how you do that is entirely up to you. For many coders, making decisions about design patterns is crippling, so we're here to help.\nThis lesson series is going to cover a few of the most common design patterns that occur in modern JavaScript code. We will discuss some pros and cons of each pattern and will give you a chance to practice using each pattern in a project.\nThe patterns we'll be covering in this series are:\nPlain Old JavaScript Objects and Object Constructors\nFactory Functions and the Module Pattern\nClasses\nES6 Modules\nGoing through these will give us a chance to learn about a few other important concepts in JavaScript such as \"closure\", \"prototypes\", \"IIFEs\" and more! This series covers the most important parts of JavaScript after learning the basics of the language... are you ready?\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1853,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\organizing_your_javascript_code_introduction.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d42ab23df753c163b290be86e702e2d3",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_library.md",
    "source_type": "git_repo",
    "title": "project_library",
    "content": "Introduction\nLet's extend the 'Book' example from the previous lesson and turn it into a small Library app Assignment\n1 If you haven’t already, set up a Git repository for your project with skeleton HTML/CSS and JS files From here on out, we'll assume that you have already done this 1 All of your book objects are going to be stored in an array, so you'll need a constructor for books Then, add a separate function to the script (not inside the constructor) that can take some arguments, create a book from those arguments, and store the new book object into an array Also, all of your book objects should have a unique `id`, which can be generated using `crypto randomUUID()` This ensures each book has a unique and stable identifier, preventing issues when books are removed or rearranged Your code should look something like this (we're showing only a basic skeleton without function parameters):\n```javascript\nconst myLibrary = [];\nfunction Book() {\n// the constructor }\nfunction addBookToLibrary() {\n// take params, create a book then store it in the array\n}\n```\n1 Write a function that loops through the array and displays each book on the page You can display them in some sort of table, or each on their own \"card\" It might help for now to manually add a few books to your array so you can see the display 1 While it might look easier to manipulate the display of the books directly rather than store their data in an array first, from here forward, you should think of these responsibilities separately We'll delve deeper into this concept later, but when developing applications, we want the flexibility to recreate elements (like our library and its books) in various ways using the same underlying data Therefore, consider the logic for displaying books to the user and the book structures that hold all information as distinct entities This separation will enhance the maintainability and scalability of your code 1 Add a \"New Book\" button that brings up a form allowing users to input the details for the new book and add it to the library: author, title, number of pages, whether it's been read and anything else you might want How you decide to display this form is up to you For example, you may wish to have a form show in a sidebar or you may wish to explore [dialogs and modals](https://developer mozilla org/en-US/docs/Web/HTML/Element/dialog) using the `` tag",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3723,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_library.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fb0ae1bf4772a076487851bbe84bfebe",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_library.md",
    "source_type": "git_repo",
    "title": "project_library",
    "content": "button that brings up a form allowing users to input the details for the new book and add it to the library: author, title, number of pages, whether it's been read and anything else you might want How you decide to display this form is up to you For example, you may wish to have a form show in a sidebar or you may wish to explore [dialogs and modals](https://developer mozilla org/en-US/docs/Web/HTML/Element/dialog) using the `` tagHowever you do this, you will most likely encounter an issue where submitting your form will not do what you expect it to do That's because the `submit` input tries to send the data to a server by default This is where `event preventDefault();` will come in handy Check out the [documentation for event preventDefault](https://developer mozilla org/en-US/docs/Web/API/Event/preventDefault) and see how you can solve this issue 1 Add a button on each book's display to remove the book from the library 1 You will need to associate your DOM elements with the actual book objects in some way One easy solution is giving them a [data-attribute](https://developer mozilla org/en-US/docs/Learn_web_development/Howto/Solve_HTML_problems/Use_data_attributes) that corresponds to the unique `id` of the respective book object 1 Add a button on each book's display to change its `read` status 1 To facilitate this you will want to create `Book` prototype function that toggles a book instance's `read` status You're not required to add any type of storage to save the information between page reloads",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3723,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_library.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8f6f2ba383c89776e6e93f5162908626",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_restaurant_page.md",
    "source_type": "git_repo",
    "title": "project_restaurant_page",
    "content": "Introduction\nLet's use what we've learned and take a chance to continue practicing DOM manipulation by dynamically rendering a restaurant homepage By the end, we are going to be using JavaScript alone to generate the entire contents of the website Note: DOM elements should be created using JavaScript but styling can be done in a separate CSS file #### gitignore\nWhen working with packages that are installed with npm, you don't need to track the contents of `node_modules` with git, nor push those files to GitHub As we learned in the [npm lesson](https://www theodinproject com/lessons/node-path-javascript-npm), the `package json` file contains all the dependency information, so that anyone can clone your project and install them on their machine with `npm install` You can make a ` gitignore` file in the root of the project, and by writing file or directory names in it, you can tell git what things you don't want to track It's customary to add `node_modules` to ` gitignore`, since it can get really big Similarly, `dist` is often ignored as it can be generated when someone runs the command to bundle/build the application When creating a new repo on GitHub, there is an option to specify a ` gitignore` template There are many templates out there that include common files and directories that are not typically tracked based on the type of project or language used For JavaScript projects, there is a `node` template that includes `node_modules` and `dist` Assignment\n1 Start the project the same way you began the webpack tutorial project, by creating the `package json` file and setting up Webpack - Remember, you only need to install and configure the things you need for your project For example, if you do not plan to have local image files linked in your HTML template, you will not need to install and configure `html-loader` 1 Create a ` gitignore` file in the root of your project It should contain the text `node_modules` and `dist` on separate lines ```text\nnode_modules\ndist\n```\n1 Set up an HTML skeleton inside of `src/template html` Inside the body, add a `` element that contains a `` with buttons (not links ) for different \"tabs\" (for example buttons for \"Home\", \"Menu\" or \"About\" etc) Below the ``, add a single `` 1 Inside of `src/index js` write a `console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5903,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_restaurant_page.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "40d48df0ffcffcf32e6af472752bcc6a",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_restaurant_page.md",
    "source_type": "git_repo",
    "title": "project_restaurant_page",
    "content": "gitignore` file in the root of your project It should contain the text `node_modules` and `dist` on separate lines ```text node_modules dist ``` 1 Set up an HTML skeleton inside of `src/template html` Inside the body, add a `` element that contains a `` with buttons (not links ) for different \"tabs\" (for example buttons for \"Home\", \"Menu\" or \"About\" etc) Below the ``, add a single `` 1 Inside of `src/index js` write a `consolelog` or `alert` statement and then run `npx webpack serve` Open [http://localhost:8080](http://localhost:8080) in your browser and check your JavaScript is running 1 Inside `div#content`, create a homepage for your restaurant You might want to include an image, headline, and some text about how wonderful the restaurant is; you do not have to make this look too fancy It’s okay to hard-code these into the HTML for now just to see how they look on the page 1 Now remove everything inside `div#content` from the HTML (so you still have the `` and `` with an empty `` below it) and instead create them by using JavaScript only, e g by appending each new element to `div#content` once the page is first loaded Since we're all set up to write our code in multiple files, let's write this initial page-load function inside of its own module and then import and call it inside of `index js` 1 Next, set up your restaurant site to use tabbed browsing to access the Menu and Contact pages Look at the behavior of this [student's live preview site](https://web archive org/web/20221024060550/https://eckben github io/bearysBreakfastBar/) for visual inspiration 1 Put the contents of each \"tab\" inside of its own module Each module will export a function that creates a div element, adds the appropriate content and styles to that element and then appends it to the DOM 1 Write the tab-switching logic inside of `index js` You should have event listeners for each button in the header navbar that wipes out the current contents of `div#content` and then runs the correct 'tab module' to populate it with the new contents again #### Deployment\nLet's deploy your project to GitHub pages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5903,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_restaurant_page.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "92368976760403468d76d76f38c9dea2",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_restaurant_page.md",
    "source_type": "git_repo",
    "title": "project_restaurant_page",
    "content": "a function that creates a div element, adds the appropriate content and styles to that element and then appends it to the DOM 1 Write the tab-switching logic inside of `index js` You should have event listeners for each button in the header navbar that wipes out the current contents of `div#content` and then runs the correct 'tab module' to populate it with the new contents again #### Deployment Let's deploy your project to GitHub pagesThis is a little more work than it has been for previous projects, because GitHub Pages tries to look for an `index html` *in the root of your project*, but yours is inside `dist` We will need to do a few steps to push *the contents* of your `dist` directory to its own branch on GitHub, which will then have a root-level `index html` for GitHub pages to serve You don't need to know exactly what all the commands do - as long as you follow the instructions below carefully you should be fine You can use these instructions to deploy your project initially, and also redeploy it again if you make more changes to your project later 1 Make a new branch to deploy from by running `git branch gh-pages` You only need to do this the first time you deploy The rest of the steps should be done every time you deploy or redeploy your project 1 Make sure you have all your work committed You can use `git status` to see if there's anything that needs committing 1 Run `git checkout gh-pages && git merge main --no-edit` to change branch and sync your changes from `main` so that you're ready to deploy 1 Now let's bundle our application into `dist` with your build command For now, that's `npx webpack` 1 Now there are a few more commands Run each of these in order:\n```bash\ngit add dist -f && git commit -m \"Deployment commit\"\ngit subtree push --prefix dist origin gh-pages\ngit checkout main\n```\n1 Recall that the **source branch** for GitHub Pages is set in your repository's settings Get this changed to the `gh-pages` branch That should be everything",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5903,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_restaurant_page.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ca917ef2cd430a9ae44be3cb01058ede",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_tic_tac_toe.md",
    "source_type": "git_repo",
    "title": "project_tic_tac_toe",
    "content": "Introduction\nWe're making a Tic Tac Toe game you can play in your browser Assignment\n1 Set up your project with HTML, CSS and JavaScript files and get the Git repo all set up 1 You’re going to store the gameboard as an array inside of a Gameboard object, so start there Your players are also going to be stored in objects, and you’re probably going to want an object to control the flow of the game itself 1 Your main goal here is to have as little global code as possible Try tucking as much as you can inside factories If you only need a single instance of something (e g the gameboard, the displayController etc ) then wrap the factory inside an IIFE (module pattern) so it cannot be reused to create additional instances 1 In this project, think carefully about where each bit of logic should reside Each little piece of functionality should be able to fit in the game, player or gameboard objects Take care to put them in “logical” places Spending a little time brainstorming here can make your life much easier later 1 If you’re having trouble, [Building a house from the inside out](https://www ayweb dev/blog/building-a-house-from-the-inside-out) is a great article that lays out a highly applicable example both of how you might approach tackling this project as well as how you might organize and structure your code 1 Focus on getting a working game in the console first Make sure you include logic that checks for when the game is over You should be checking for all winning 3-in-a-rows and ties Try to avoid thinking about the DOM and your HTML/CSS until your game is working Don't worry about taking user input at this point either You can call your functions and pass arguments to them to play the game yourself and check if everything is working as intended 1 Once you have a working console game, create an object that will handle the display/DOM logic Write a function that will render the contents of the gameboard array to the webpage (for now, you can always just fill the gameboard array with `\"X\"`s and `\"O\"`s just to see what's going on) 1 Write the functions that allow players to add marks to a specific spot on the board by interacting with the appropriate DOM elements (e g letting players click on a board square to place their marker) Don't forget the logic that keeps players from playing in spots that are already taken 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2664,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_tic_tac_toe.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "27547dff95e6bfc8b43366a534716eeb",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_tic_tac_toe.md",
    "source_type": "git_repo",
    "title": "project_tic_tac_toe",
    "content": "to the webpage (for now, you can always just fill the gameboard array with `\"X\"`s and `\"O\"`s just to see what's going on) 1 Write the functions that allow players to add marks to a specific spot on the board by interacting with the appropriate DOM elements (e g letting players click on a board square to place their marker) Don't forget the logic that keeps players from playing in spots that are already taken 1Clean up the interface to allow players to put in their names, include a button to start/restart the game and add a display element that shows the results upon game end",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2664,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_tic_tac_toe.md",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2ad05d4e28651af3dc2e9d34f2227ba8",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "Introduction\nIn our JavaScript fundamentals course, you should have learned the basics of using objects to store and retrieve data Let's start with a little refresher There are multiple ways to define objects but in most cases, it is best to use the object literal syntax as follows:\njavascript\nconst myObject = {\nproperty: 'Value ',\notherProperty: 77,\n\"obnoxious property\": function() {\n// do stuff }\n};\nThere are also 2 ways to get information out of an object: dot notation and bracket notation ```javascript\n// dot notation\nmyObject property; // 'Value '\n// bracket notation\nmyObject[\"obnoxious property\"]; // [Function]\n```\nWhich method you use will depend on context Dot notation is cleaner and is usually preferred, but there are plenty of circumstances when it is not possible to use it For example, myObject \"obnoxious property\" won't work because that property is a string with a space in it Likewise, you cannot use variables in dot notation:\n```javascript\nconst variable = 'property';\nmyObject variable; // this gives us 'undefined' because it's looking for a property named 'variable' in our object\nmyObject[variable]; // this is equivalent to myObject['property'] and returns 'Value '\n```\nIf you are feeling rusty on using objects, now might be a good time to go back and review the content in our object basics lesson from our JavaScript Basics course Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to write an object constructor and instantiate the object Describe what a prototype is and how it can be used Explain prototypal inheritance Understand the basic do's and don't's of prototypal inheritance Explain what the this keyword is Objects as a design pattern\nOne of the simplest ways you can begin to organize your code is by grouping things into objects Take these examples from a 'tic tac toe' game:\n```javascript\n// example one\nconst playerOneName = \"tim\";\nconst playerTwoName = \"jenn\";\nconst playerOneMarker = \"X\";\nconst playerTwoMarker = \"O\";\n// example two\nconst playerOne = {\nname: \"tim\",\nmarker: \"X\"\n};\nconst playerTwo = {\nname: \"jenn\",\nmarker: \"O\"\n};\n```\nAt first glance, the first doesn't seem so bad",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "0dc7cd2d53aaa944e505e3852a3d44cd",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "the simplest ways you can begin to organize your code is by grouping things into objects Take these examples from a 'tic tac toe' game: ```javascript // example one const playerOneName = \"tim\"; const playerTwoName = \"jenn\"; const playerOneMarker = \"X\"; const playerTwoMarker = \"O\"; // example two const playerOne = { name: \"tim\", marker: \"X\" }; const playerTwo = { name: \"jenn\", marker: \"O\" }; ``` At first glance, the first doesn't seem so badand it actually takes fewer lines to write than the example using objects, but the benefits of the second approach are huge Let me demonstrate:\njavascript\nfunction printName(player) {\nconsole log(player name);\n}\nThis is something that you just could NOT do with the example one setup Instead, every time you wanted to print a specific player's name, you would have to remember the correct variable name and then manually console log it:\njavascript\nconsole log(playerOneName);\nconsole log(playerTwoName);\nAgain, this isn't that bad but what if you don't know which player's name you want to print javascript\nfunction gameOver(winningPlayer){\nconsole log(\"Congratulations \");\nconsole log(winningPlayer name + \" is the winner \");\n}\nOr, what if we aren't making a 2 player game, but something more complicated such as an online shopping site with a large inventory In that case, using objects to keep track of an item's name, price, description and other things is the only way to go Unfortunately, in that type of situation, manually typing out the contents of our objects is not feasible either We need a cleaner way to create our objects, which brings us to Object constructors\nWhen you have a specific type of object that you need to duplicate like our player or inventory items, a better way to create them is using an object constructor, which is just a regular function that by convention is named with an uppercase initial letter It looks like this:\njavascript\nfunction Player(name, marker) {\nthis name = name;\nthis marker = marker;\n}\nand you can use it by calling the function with the keyword new javascript\nconst player = new Player('steve', 'X');\nconsole log(player name); // 'steve'\nJust like with objects created using the Object Literal method, you can add functions to the object:\n```javascript\nfunction Player(name, marker) {\nthis name = name;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "14344b9acbbc5acfd45d163795bc515b",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "named with an uppercase initial letter It looks like this: javascript function Player(name, marker) { this name = name; this marker = marker; } and you can use it by calling the function with the keyword new javascript const player = new Player('steve', 'X'); console log(player name); // 'steve' Just like with objects created using the Object Literal method, you can add functions to the object: ```javascript function Player(name, marker) { this name = name; thismarker = marker;\nthis sayName = function() {\nconsole log(this name)\n};\n}\nconst player1 = new Player('steve', 'X');\nconst player2 = new Player('also steve', 'O');\nplayer1 sayName(); // logs 'steve'\nplayer2 sayName(); // logs 'also steve'\n```\n#### Safeguarding constructors\nNote that, as constructors are just regular functions, they could be called without using `new` by mistake, which would cause hard-to-track errors To prevent that, you can use the `new target` meta-property like this:\n```javascript\nfunction Player(name, marker) {\nif ( new target) {\nthrow Error(\"You must use the 'new' operator to call the constructor\");\n}\nthis name = name;\nthis marker = marker;\nthis sayName = function() {\nconsole log(this name)\n};\n}\n```\nExercise\nWrite a constructor for making \"Book\" objects We will revisit this in the next project Your book objects should have the book's title, author, the number of pages, and whether or not you have read the book Put a function into the constructor that can report the book info like so:\njavascript\ntheHobbit info(); // \"The Hobbit by J R R Tolkien, 295 pages, not read yet\"\nNote: It is almost always best to return things rather than putting console log() directly into the function In this case, return the info string and log it after the function has been called:\njavascript\nconsole log(theHobbit info());\nThe prototype\nBefore we go much further, there's something important you need to understand about JavaScript objects All objects in JavaScript have a prototype The prototype is another object that the original object inherits from, which is to say, the original object has access to all of its prototype's methods and properties Let's break it down 1 All objects in JavaScript have a prototype\nPretty straightforward sentence here Every object in JavaScript has a prototype",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "8077557910e7a500d406b2a034c169a4",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "info()); The prototype Before we go much further, there's something important you need to understand about JavaScript objects All objects in JavaScript have a prototype The prototype is another object that the original object inherits from, which is to say, the original object has access to all of its prototype's methods and properties Let's break it down 1 All objects in JavaScript have a prototype Pretty straightforward sentence here Every object in JavaScript has a prototypeSo for example, the player1 and player2 objects from before, (created with the Player(name, marker) object constructor) also have a prototype Now, what does having a prototype mean What even is a prototype of an object 2 The prototype is another object\nThis sentence also seems pretty straightforward The prototype is just another object - again, like the player1 and the player2 objects The prototype object can have properties and functions, just as these Player objects have properties like name, marker, and functions like sayName() attached to them 3 that the original object inherits from, and has access to all of its prototype's methods and properties\nHere, the \"original object\" refers to an object like player1 or player2 These objects are said to \"inherit\", or in other words, these objects have access to the prototype's properties or functions, if they have been defined For example, if there was a sayHello() function defined on the prototype, player1 can access the function just as if it was its own function - player1 sayHello() But it's not just player1 who can call the sayHello() function, even player2 can call it, since it's defined on the prototype Read on to know the details of how it works and how you could do this yourself Accessing an object's prototype\nConceptually, you now might feel like you know, or at least have an idea of what a prototype of an object is But how do you know or actually see what the prototype of an object is Let's find out You can try running the following code in the developer console of your browser (Make sure you've created the player1 and player2 objects from before )\njavascript\nObject getPrototypeOf(player1) === Player prototype; // returns true\nObject getPrototypeOf(player2) === Player prototype; // returns true\nNow, to understand this code, let's use the three points from earlier:\nAll objects in JavaScript have a prototype:\nYou can check the object's prototype by using the Object getPrototypeOf() function on the object, like Object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "f0c6629e36c5b22648e6b2951e4eb6a9",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "running the following code in the developer console of your browser (Make sure you've created the player1 and player2 objects from before ) javascript Object getPrototypeOf(player1) === Player prototype; // returns true Object getPrototypeOf(player2) === Player prototype; // returns true Now, to understand this code, let's use the three points from earlier: All objects in JavaScript have a prototype: You can check the object's prototype by using the Object getPrototypeOf() function on the object, like ObjectgetPrototypeOf(player1) The return value (result) of this function refers to the prototype property of the Object Constructor (i e , Player(name, marker)) - Object getPrototypeOf(player1) === Player prototype The prototype is another object The value of the Object Constructor's prototype property (i e , Player prototype) contains the prototype object The reference to this value of Player prototype is stored in every Player object, every time a Player object is created Hence, you get a true value returned when you check the Objects prototype - Object getPrototypeOf(player1) === Player prototype that the original object inherits from, and has access to all of its prototype's methods and properties:\nAs said in the earlier point, every Player object has a value which refers to Player prototype So: Object getPrototypeOf(player1) === Object getPrototypeOf(player2) (returns true) So, any properties or methods defined on Player prototype will be available to the created Player objects The last sub-item needs a little more explanation What does defining 'on the prototype' mean Consider the following code:\n```javascript\nPlayer prototype sayHello = function() {\nconsole log(\"Hello, I'm a player \");\n};\nplayer1 sayHello(); // logs \"Hello, I'm a player \"\nplayer2 sayHello(); // logs \"Hello, I'm a player \"\n```\nHere, we defined the sayHello function 'on' the Player prototype object It then became available for the player1 and the player2 objects to use Similarly, you can attach other properties or functions you want to use on all Player objects by defining them on the objects' prototype (Player prototype) Object getPrototypeOf() vs __proto__ vs [[Prototype]]\nUnlike what we have done so far using Object getPrototypeOf() to access an object's prototype, the same thing can also be done using the __proto__ property of the object However, this is a non-standard way of doing so, and deprecated",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "f86de13b01d51bbefb52a960146453d2",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "the player2 objects to use Similarly, you can attach other properties or functions you want to use on all Player objects by defining them on the objects' prototype (Player prototype) Object getPrototypeOf() vs __proto__ vs [[Prototype]] Unlike what we have done so far using Object getPrototypeOf() to access an object's prototype, the same thing can also be done using the __proto__ property of the object However, this is a non-standard way of doing so, and deprecatedHence, it is not recommended to access an object's prototype by using this property However, the same code can thus be rewritten to become:\njavascript\n// Don't do this player1 __proto__ === Player prototype; // returns true\nplayer2 __proto__ === Player prototype; // returns true\nIn some places, like legacy code, you might also come across [[Prototype]], which is just another way of talking about the __proto__ property of an object, like player1 [[Prototype]] This explanation about the prototype might have been a lot, so remember to take a breather before moving on Prototypal inheritance\nNow, you may also have a question - what use is an object's prototype What is the purpose of defining properties and functions on the prototype We can narrow it down to two reasons:\nWe can define properties and functions common among all objects on the prototype to save memory Defining every property and function takes up a lot of memory, especially if you have a lot of common properties and functions, and a lot of created objects Defining them on a centralized, shared object which the objects have access to, thus saves memory The second reason is the name of this section, Prototypal Inheritance, which we've referred to in passing earlier, in the introduction to the Prototype In recap, we can say that the player1 and player2 objects inherit from the Player prototype object, which allows them to access functions like sayHello Let's now try to do the following:\n```javascript\n// Player prototype proto\nObject getPrototypeOf(Player prototype) === Object prototype; // true\n// Output may slightly differ based on the browser\nplayer1 valueOf(); // Output: Object { name: \"steve\", marker: \"X\", sayName: sayName() }\n```\nWhat's this valueOf function, and where did it come from if we did not define it It comes as a result of Object getPrototypeOf(Player prototype) having the value of Object prototype This means that Player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "2390851f9e60cb948532e6b60815223c",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "try to do the following: ```javascript // Player prototype proto Object getPrototypeOf(Player prototype) === Object prototype; // true // Output may slightly differ based on the browser player1 valueOf(); // Output: Object { name: \"steve\", marker: \"X\", sayName: sayName() } ``` What's this valueOf function, and where did it come from if we did not define it It comes as a result of Object getPrototypeOf(Player prototype) having the value of Object prototype This means that Playerprototype is inheriting from Object prototype This valueOf function is defined on Object prototype just like sayHello is defined on Player prototype How do we know that this valueOf function is defined on Object prototype We make use of another function called hasOwnProperty:\njavascript\nplayer1 hasOwnProperty('valueOf'); // false\nObject prototype hasOwnProperty('valueOf'); // true\nNow where did this hasOwnProperty function come from A quick check helps:\njavascript\nObject prototype hasOwnProperty('hasOwnProperty'); // true\nEssentially, this is how JavaScript makes use of prototype - by having the objects contain a value - to point to prototypes and inheriting from those prototypes, and thus forming a chain This kind of inheritance using prototypes is hence named as Prototypal inheritance JavaScript figures out which properties exist (or do not exist) on the object and starts traversing the chain to find the property or function, like so:\nIs the valueOf function part of the player1 object No, it is not (Remember, only the name, marker and sayName properties are part of the Player objects )\nIs the function part of the player1's prototype (the Object getPrototypeOf(player1) value, i e , Player prototype) No, only the sayHello function is a part of it Well, then, is it part of Object getPrototypeOf(Player prototype) (=== Object prototype) Yes, valueOf is defined on Object prototype However, this chain does not go on forever, and if you have already tried logging the value of Object getPrototypeOf(Object prototype), you would find that it is null, which indicates the end of the chain And it is at the end of this chain that if the specific property or function is not found, undefined is returned Note:\nEvery prototype object inherits from Object prototype by default An object's Object getPrototypeOf() value can only be one unique prototype object Recommended method for prototypal inheritance\nNow, how do you utilize Prototypal Inheritance What do you need to do to use it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "a87d772999ecfa53675e555c98818e59",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "that it is null, which indicates the end of the chain And it is at the end of this chain that if the specific property or function is not found, undefined is returned Note: Every prototype object inherits from Object prototype by default An object's Object getPrototypeOf() value can only be one unique prototype object Recommended method for prototypal inheritance Now, how do you utilize Prototypal Inheritance What do you need to do to use itJust as we use Object getPrototypeOf() to 'get' or view the prototype of an object, we can use Object setPrototypeOf() to 'set' or mutate it Let's see how it works by adding a Person Object Constructor to the Player example, and making Player inherit from Person ```javascript\nfunction Person(name) {\nthis name = name;\n}\nPerson prototype sayName = function() {\nconsole log(Hello, I'm ${this name} );\n};\nfunction Player(name, marker) {\nthis name = name;\nthis marker = marker;\n}\nPlayer prototype getMarker = function() {\nconsole log(My marker is '${this marker}');\n};\nObject getPrototypeOf(Player prototype); // returns Object prototype\n// Now make Player objects inherit from Person\nObject setPrototypeOf(Player prototype, Person prototype);\nObject getPrototypeOf(Player prototype); // returns Person prototype\nconst player1 = new Player('steve', 'X');\nconst player2 = new Player('also steve', 'O');\nplayer1 sayName(); // Hello, I'm steve player2 sayName(); // Hello, I'm also steve player1 getMarker(); // My marker is 'X'\nplayer2 getMarker(); // My marker is 'O'\n```\nFrom the code, we can see that we've defined a Person from whom a Player inherits properties and functions, and that the created Player objects are able to access both the sayName and the getMarker functions, in spite of them being defined on two separate prototype objects This is enabled by the use of the Object setPrototypeOf() function It takes two arguments - the first is the one which inherits and the second argument is the one which you want the first argument to inherit from This ensures that the created Player objects are able to access the sayName and getMarker functions through their prototype chain Note:\nThough it seems to be an easy way to set up Prototypal Inheritance using Object setPrototypeOf(), the prototype chain has to be set up using this function before creating any objects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "50809752c9c8a3501fe42b322556547e",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "- the first is the one which inherits and the second argument is the one which you want the first argument to inherit from This ensures that the created Player objects are able to access the sayName and getMarker functions through their prototype chain Note: Though it seems to be an easy way to set up Prototypal Inheritance using Object setPrototypeOf(), the prototype chain has to be set up using this function before creating any objectsUsing setPrototypeOf() after objects have already been created can result in performance issues A warning this doesn't work:\njavascript\nPlayer prototype = Person prototype;\nbecause it will set Player prototype to directly refer to Person prototype (i e not a copy), which could cause problems if you want to edit something in the future Consider one more example:\n```javascript\nfunction Person(name) {\nthis name = name;\n}\nPerson prototype sayName = function() {\nconsole log(Hello, I'm ${this name} );\n};\nfunction Player(name, marker) {\nthis name = name;\nthis marker = marker;\n}\n// Don't do this // Use Object setPrototypeOf(Player prototype, Person prototype)\nPlayer prototype = Person prototype;\nfunction Enemy(name) {\nthis name = name;\nthis marker = '^';\n}\n// Not again // Use Object setPrototypeOf(Enemy prototype, Person prototype)\nEnemy prototype = Person prototype;\nEnemy prototype sayName = function() {\nconsole log('HAHAHAHAHAHA');\n};\nconst carl = new Player('carl', 'X');\ncarl sayName(); // Uh oh this logs \"HAHAHAHAHAHA\" because we edited the sayName function ```\nIf we had used Object setPrototypeOf() in this example, then we could safely edit the Enemy prototype sayName function without changing the function for Player as well Assignment\n1 Read up on the concept of the prototype from the articles below 1 Read the article [Understanding Prototypes and Inheritance in JavaScript](https://www digitalocean com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript) from Digital Ocean This is a good review of prototype inheritance and constructor functions, featuring some examples 1 To go a bit deeper into both the chain and inheritance, spend some time with [JavaScript Info's article on Prototypal Inheritance](http://javascript info/prototype-inheritance) As usual, doing the exercises at the end will help cement this knowledge in your mind Don't skip them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "4bba3dd1a649d511ebcca3a24143e919",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "prototype from the articles below 1 Read the article [Understanding Prototypes and Inheritance in JavaScript](https://www digitalocean com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript) from Digital Ocean This is a good review of prototype inheritance and constructor functions, featuring some examples 1 To go a bit deeper into both the chain and inheritance, spend some time with [JavaScript Info's article on Prototypal Inheritance](http://javascript info/prototype-inheritance) As usual, doing the exercises at the end will help cement this knowledge in your mind Don't skip themImportant note: This article makes heavy use of `__proto__` which is not generally recommended The concepts here are what we're looking for at the moment We will soon learn another method or two for setting the prototype 1 You might have noticed us using the `this` keyword in object constructors and prototype methods in the examples above 1 [JavaScript Tutorial's article on the `this` keyword](https://www javascripttutorial net/javascript-this/) covers how `this` changes in various situations Pay special attention to the pitfalls mentioned in each section 1 Read the article [`[[Prototype]]` vs `__proto__` vs ` prototype` in JavaScript](https://medium com/@eamonocallaghan/prototype-vs-proto-vs-prototype-in-javascript-6758cadcbae8)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you write an object constructor and instantiate the object How can you prevent that an object constructor is called without using the keyword new What is a prototype and how can it be used What is prototypal inheritance What are the basic do's and don't's of prototypal inheritance How does this behave in different situations Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This Object create method video by techsith provides another point of view on how to use Object create to extend objects by setting the prototype The first answer on this StackOverflow question regarding defining methods via the prototype vs in the constructor helps explain when you might want to use one over the other Interactive Scrim on objects and object constructors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "6323cd1216b71b89091bb4595437233a",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
    "source_type": "git_repo",
    "title": "objects_and_object_constructors",
    "content": "This section contains helpful links to related content It isn't required, so consider it supplemental This Object create method video by techsith provides another point of view on how to use Object create to extend objects by setting the prototype The first answer on this StackOverflow question regarding defining methods via the prototype vs in the constructor helps explain when you might want to use one over the other Interactive Scrim on objects and object constructorsCheck out this video explanation on the  this keyword from DevSage that gives a different perspective on how its context changes, as well as scenarios in which this behaves unexpectedly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22058,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\objects_and_object_constructors.md",
      "source_type": "git_repo"
    },
    "token_count": 116,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "6c02fc40b22f6e5c29ff15fee3f7d052",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_todo_list.md",
    "source_type": "git_repo",
    "title": "project_todo_list",
    "content": "Introduction\nAt this point you've already had a fair amount of practice using the various techniques we've shown you But we've been throwing a lot of information your way, so before we move on we're going to take a minute to slow down and work on another great project that ties these techniques together You should have the chance to show off most (if not all) of your newfound skills The todo list\nTodo lists are a staple in beginning webdev tutorials, the implementation can be basic There is, however, a lot of room for improvement and many features that can be added Before diving into the code, take a minute to think about how you are going to want to organize your project Assignment\n1 Your 'todos' are going to be objects that you'll want to dynamically create, which means either using factories or constructors/classes to generate them 1 Brainstorm what kind of properties your todo-items are going to have At a minimum they should have a `title`, `description`, `dueDate` and `priority` You might also want to include `notes`  or even a `checklist` 1 Your todo list should have `projects` or separate lists of `todos` When a user first opens the app, there should be some sort of 'default' project to which all of their todos are put Users should be able to create new projects and choose which project their todos go into 1 You should separate your application logic (i e creating new todos, setting todos as complete, changing todo priority etc ) from the DOM-related stuff, so keep all of those things in separate modules 1 The look of the User Interface is up to you, but it should be able to do the following:\n1 View all projects 1 View all todos in each project (probably just the title and duedate perhaps changing color for different priorities) 1 Expand a single todo to see/edit its details 1 Delete a todo 1 For inspiration, check out the following great todo apps (look at screenshots, watch their introduction videos etc )\n1 [Todoist](https://en todoist com/)\n1 [Things](https://culturedcode com/things/)\n1 [any do](https://www any do/)\n1 Since you are probably already using webpack, adding external libraries from npm is a cinch You might want to consider using the following useful library in your code:\n1 [date-fns](https://github",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4453,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_todo_list.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fc689216e72c69340e26a0c01945d6d0",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_todo_list.md",
    "source_type": "git_repo",
    "title": "project_todo_list",
    "content": "priorities) 1 Expand a single todo to see/edit its details 1 Delete a todo 1 For inspiration, check out the following great todo apps (look at screenshots, watch their introduction videos etc ) 1 [Todoist](https://en todoist com/) 1 [Things](https://culturedcode com/things/) 1 [any do](https://www any do/) 1 Since you are probably already using webpack, adding external libraries from npm is a cinch You might want to consider using the following useful library in your code: 1 [date-fns](https://githubcom/date-fns/date-fns) gives you a bunch of handy functions for formatting and manipulating dates and times 1 We haven't learned any techniques for actually storing our data anywhere, so when the user refreshes the page, all of their todos will disappear You should add some persistence to this todo app using the Web Storage API 1 [localStorage](https://developer mozilla org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API) allows you to save data on the user's computer The downside here is that the data is ONLY accessible on the computer that it was created on Even so, it's pretty handy Set up a function that saves the projects (and todos) to localStorage every time a new project (or todo) is created, and another function that looks for that data in localStorage when your app is first loaded Additionally, here are a couple of quick tips to help you not get tripped up:\n- Make sure your app doesn't crash if the data you may want to retrieve from localStorage isn't there - You can inspect data you saved in localStorage using DevTools To do this, open the `Application` tab in DevTools and click on the `Local Storage` tab under `Storage` Every time you add, update and delete data from localStorage in your app, those changes will be reflected in DevTools - localStorage uses [JSON](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON) to send and store data, and when you retrieve the data, it will also be in JSON format Keep in mind you *cannot store functions in JSON*, so you'll have to figure out how to add methods back to your object properties once you fetch them Good luck Additional Resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4453,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_todo_list.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3ecc0d3a24790c127dba6a97c9a4afd6",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_todo_list.md",
    "source_type": "git_repo",
    "title": "project_todo_list",
    "content": "will be reflected in DevTools - localStorage uses [JSON](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON) to send and store data, and when you retrieve the data, it will also be in JSON format Keep in mind you *cannot store functions in JSON*, so you'll have to figure out how to add methods back to your object properties once you fetch them Good luck Additional Resources This section contains helpful links to related content It isn't required, so consider it supplementalUsing local storage in modern applications provides more details on using localStorage if you want to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4453,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\project_todo_list.md",
      "source_type": "git_repo"
    },
    "token_count": 122,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d7249dabc6a977608373948503761717",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\revisiting_webpack.md",
    "source_type": "git_repo",
    "title": "revisiting_webpack",
    "content": "Introduction\nGreat job working through the Restaurant Page Setting up and using Webpack with all of its loaders and plugins may have seemed tedious, and you may even still wonder what the point of it all is As you keep going, a lot of this will become more natural to you, and hopefully these fundamental concepts can help you with problems that are yet to come Now that you've played around with Webpack a little, let's have a look at a few things that can help to improve the setup experience and your development workflow Some of these things aren't just limited to Webpack, but are things you can continue to use with other tools as you progress Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to write and run npm scripts What Webpack modes are and how to automate switching between modes as required How to create and use template repositories npm scripts\nWhile npx webpack and npx webpack serve aren't particularly long commands to type, you will have encountered git subtree push --prefix dist origin gh-pages in the Restaurant Page project's deployment instructions You surely won't want to be typing that out every time you need to use it Fortunately, we can write npm scripts in our package json file by adding a \"scripts\" property containing an object of scripts Scripts can be written in the form \"name\": \"command\", and are executed by running npm run <name> in the terminal For example:\njson\n{\n// other package json stuff\n\"scripts\": {\n\"build\": \"webpack\",\n\"dev\": \"webpack serve\",\n\"deploy\": \"git subtree push --prefix dist origin gh-pages\"\n},\n// other package json stuff\n}\nWe have three npm scripts here In this case, running npm run build would be the same as running npx webpack (which you may have seen in the Webpack guides from the previous Webpack lesson), npm run dev would be the same as npx webpack serve, and npm run deploy would run git subtree push --prefix dist origin gh-pages for us Not only can we often save time, it's also nice to have sensible and somewhat standardized names for our commands npm run build often contains a tool's command for building/bundling/compiling npm run dev is often used to start a dev server, etc Names might not always be the same, but they can explain their purposes better than npx webpack",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7752,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\revisiting_webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "0590392a169ddf58997e06175e361d76",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\revisiting_webpack.md",
    "source_type": "git_repo",
    "title": "revisiting_webpack",
    "content": "webpack serve, and npm run deploy would run git subtree push --prefix dist origin gh-pages for us Not only can we often save time, it's also nice to have sensible and somewhat standardized names for our commands npm run build often contains a tool's command for building/bundling/compiling npm run dev is often used to start a dev server, etc Names might not always be the same, but they can explain their purposes better than npx webpackNote that we drop the npx from the start of the webpack and webpack serve commands when setting them as scripts, as we only needed npx to run them directly in the terminal without npm scripts Webpack modes\nSo far, we've stuck with using Webpack in development mode, which is naturally most suitable for when we're working on development However, when we come to build our projects for deployment, the dedicated production mode does some different optimizations for us Try it You can go to your Restaurant Page project, change the mode to \"production\" in webpack config js, then run your build command again Have a look at the JavaScript bundle in dist to see an even more glorious jumble of characters We really do not need to know exactly what optimizations have been applied, nor do we need to know about any other specifics of production mode, but it's nice to be aware that the two modes exist and are designed for specific things To save you from having to manually edit your configuration file every time you wish to switch modes, such as before bundling into dist or before going back to use your dev server, you can have two different configuration files (e g webpack dev js and webpack prod js), and then have your build and dev npm scripts specify which configuration files to use (omitting the --config option makes Webpack search for webpack config js by default):\njson\n\"build\": \"webpack --config webpack prod js\",\n\"dev\": \"webpack serve --config webpack dev js\"\nIn the assignment, we will introduce a tool called webpack-merge that can make using multiple Webpack configuration files easier to deal with and with minimal duplication Doing it this way is nice We set it up once, then we can forget about it since each script will use the appropriate configuration file and mode Template repositories\nOne thing you might have noticed already is that setting up Webpack involves multiple files and directories, and a fair bit of configuration",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7752,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\revisiting_webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1f50f314fce1d40e809cf1afc72de947",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\revisiting_webpack.md",
    "source_type": "git_repo",
    "title": "revisiting_webpack",
    "content": "we will introduce a tool called webpack-merge that can make using multiple Webpack configuration files easier to deal with and with minimal duplication Doing it this way is nice We set it up once, then we can forget about it since each script will use the appropriate configuration file and mode Template repositories One thing you might have noticed already is that setting up Webpack involves multiple files and directories, and a fair bit of configurationEach time you set up a new project with Webpack, you may have to look at what you configured before to copy and paste the configuration you want to reuse You may have also noticed that whenever you create a new repository on Github, there is an option near the top for a Repository template This is where template repositories can really come in handy Any of your existing repositories can be converted to a template in its settings (right under where you can rename the repository, there is a checkbox for whether the repository is a template or not) If you check this box, congratulations That's all you need to do Now, when you go to create a new repository, the Repository template dropdown will list any templates for you to select Selecting one will mean your new repository will be a copy of the chosen template, not an empty one You may not know for sure what you might want or need in a template, but when you find yourself reusing a lot of setup code for multiple projects, you can make a new repository with all of the setup code you need and mark it as a template, then update it as necessary Now you can select that template when creating a new project repository to save time, letting you dive into working on the project itself sooner Assignment\n1 Read [a little more about npm scripts](https://www knowledgehut com/blog/web-development/package-json-scripts-node-js) This article goes a little further than what you might find yourself needing to use for a while, such as pre/post and lifecycle scripts, but it's good to be aware of what things are possible with the tools you have 1 Read through [Webpack's \"Production\" guide](https://webpack js org/guides/production/) where they walk you through how to use `webpack-merge` and split your configuration file",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7752,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\revisiting_webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7a691b83bea113c3624d4b368dde772e",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\revisiting_webpack.md",
    "source_type": "git_repo",
    "title": "revisiting_webpack",
    "content": "project itself sooner Assignment 1 Read [a little more about npm scripts](https://www knowledgehut com/blog/web-development/package-json-scripts-node-js) This article goes a little further than what you might find yourself needing to use for a while, such as pre/post and lifecycle scripts, but it's good to be aware of what things are possible with the tools you have 1 Read through [Webpack's \"Production\" guide](https://webpack js org/guides/production/) where they walk you through how to use `webpack-merge` and split your configuration fileThe exact code examples they've used in that guide follow on from a previous part of a longer tutorial they have, but the main parts about `webpack-merge` and splitting the configuration file should still be followable with a new project, or you can even try converting your Restaurant Page project to do things this way - You can ignore the \"Specify the Mode\" section and its examples Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Where do npm scripts live How do you define and run npm scripts What are the two Webpack modes What tool allows you to split your Webpack configuration file with minimal duplication What is a template repository, and how would you create one Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7752,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\revisiting_webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "9a8f8a774e4720b3ad61bc920dc11ae4",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\more_testing.md",
    "source_type": "git_repo",
    "title": "more_testing",
    "content": "Introduction\nAn important basic concept in testing is isolation You should only test one method at a time, and your tests for one function should not depend upon an external function behaving correctly - especially if that function is being tested elsewhere The main reason for this is that when your tests fail, you want to be able to narrow down the cause of this failure as quickly as possible If you have a test that depends on several functions, it can be hard to tell exactly what is going wrong Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what tightly coupled code is Describe a pure function and how it relates to TDD Explain what mocking is Pure functions\nThere are many benefits to using TDD when you write your code One of the biggest benefits is less obvious at first - it helps you to write better code If you look back at some of your early projects you will probably notice how tightly coupled everything is All of your functions include references to functions in other parts of your code, and the whole thing is filled with DOM methods or console log() Tightly coupled code is hard to test Imagine trying to write tests for a function like this:\njavascript\nfunction guessingGame() {\nconst magicNumber = 22;\nconst guess = prompt('guess a number between 1 and 100 ');\nif (guess > magicNumber) {\nalert('YOUR GUESS IS TOO BIG');\n} else if (guess < magicNumber) {\nalert('YOUR GUESS IS TOO SMALL');\n} else if (guess == magicNumber) {\nalert('YOU DID IT 🎉');\n}\n}\nMaking this testable requires us to split up all the different things that are happening First, we do not need to test the functions prompt and alert because they are built in to the browser They are external to our program and whoever wrote them has already tested them What we do need to test is the number logic, which is much easier if we untangle it from the other functions:\n```javascript\nfunction evaluateGuess(magicNumber, guess) {\nif (guess > magicNumber) {\nreturn 'YOUR GUESS IS TOO BIG';\n} else if (guess < magicNumber) {\nreturn 'YOUR GUESS IS TOO SMALL';\n} else if (guess == magicNumber) {\nreturn 'YOU DID IT 🎉';\n}\n}\nfunction guessingGame() {\nconst magicNumber = 22;\nconst guess = prompt('guess a number between 1 and 100",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6957,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\more_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "de0895c904ae5ebfa325a0126481700a",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\more_testing.md",
    "source_type": "git_repo",
    "title": "more_testing",
    "content": "is the number logic, which is much easier if we untangle it from the other functions: ```javascript function evaluateGuess(magicNumber, guess) { if (guess > magicNumber) { return 'YOUR GUESS IS TOO BIG'; } else if (guess < magicNumber) { return 'YOUR GUESS IS TOO SMALL'; } else if (guess == magicNumber) { return 'YOU DID IT 🎉'; } } function guessingGame() { const magicNumber = 22; const guess = prompt('guess a number between 1 and 100');\nconst message = evaluateGuess(magicNumber, guess);\nalert(message);\n}\nguessingGame();\n```\nIn this example, the only thing we really need to test is the evaluateGuess function, which is much easier to test because it has a clear input and output and doesn't call any external functions This implementation is much nicer as well because it's much easier to extend If we wanted to switch out the prompt and alerts for methods that manipulate the DOM we can do that easier now and if we want to make our game more advanced by letting the user make multiple guesses, that is also easier If we had written this program with TDD it is very likely that it would have looked more like the second example to begin with Test driven development encourages better program architecture because it encourages you to write Pure Functions Mocking\nThere are two solutions to the 'tightly coupled code' problem The first, and best option is to remove those dependencies from your code as we did above, but that is not always possible The second option is mocking - writing \"fake\" versions of a function that always behaves exactly how you want For example, if you're testing a function that gets information from a DOM input, you really don't want to have to set up a webpage and dynamically insert something into the input just to run your tests With a mock function, you could just create a fake version of the input-grabbing function that always returns a specific value and use THAT in your test Assignment\n1 Read this quick article about [the value of \"pure functions\"](https://medium com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c) 1 Watch this [video about mocks in testing](https://www youtube com/watch v=ajiAl5UNzBU&t=3024s) 1 Too much mocking can be a bad thing",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6957,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\more_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ac78b69504e8a7cad25c4a6c7656694e",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\more_testing.md",
    "source_type": "git_repo",
    "title": "more_testing",
    "content": "set up a webpage and dynamically insert something into the input just to run your tests With a mock function, you could just create a fake version of the input-grabbing function that always returns a specific value and use THAT in your test Assignment 1 Read this quick article about [the value of \"pure functions\"](https://medium com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c) 1 Watch this [video about mocks in testing](https://www youtube com/watch v=ajiAl5UNzBU&t=3024s) 1 Too much mocking can be a bad thingIt *is* sometimes necessary, but if you have to set up an elaborate system of mocks to test any bit of your code, that means your code is too tightly coupled While it is quite in-depth, the following article contains several really good points about [program architecture and testing](https://medium com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a) 1 Now that you have some practice and context for TDD, the [Jest docs section on \"Setup and Teardown\"](https://jestjs io/docs/setup-teardown) will probably make good sense to you 1 Read about [Jest's really handy mocking functions](https://jestjs io/docs/mock-functions) 1 Watch this amazing video that covers [what to test in your codebase](https://www youtube com/watch v=URSWYvyc42M) The video is specifically about testing the Ruby language, but that doesn't matter *at all* The concepts here ring true in any language, and luckily Ruby is a clear enough language that you will be able to follow along just fine Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is tightly coupled code What are the two requirements for a function to be pure What are side effects and why is it important to identify them when testing a function What should you try before testing tightly coupled code How can you test code that can't be decoupled What is mocking When would you use a mock function How should you test incoming query messages Why should you not test implementation Should you test private methods Why should you not test outgoing messages with no side effects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6957,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\more_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "57c28d75bd9a9422d5151b3aa49c3b89",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\more_testing.md",
    "source_type": "git_repo",
    "title": "more_testing",
    "content": "to be pure What are side effects and why is it important to identify them when testing a function What should you try before testing tightly coupled code How can you test code that can't be decoupled What is mocking When would you use a mock function How should you test incoming query messages Why should you not test implementation Should you test private methods Why should you not test outgoing messages with no side effectsAdditional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This jest cheat sheet walks you quickly through all the frequently used methods",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6957,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\more_testing.md",
      "source_type": "git_repo"
    },
    "token_count": 112,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "92aff09f6ca7cfd1e6856963fa58cb08",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\project_battleship.md",
    "source_type": "git_repo",
    "title": "project_battleship",
    "content": "Introduction\nIt's time to really flex your muscles Test Driven Development (TDD) can certainly feel uncomfortable at first, but becomes more natural with practice We're going to implement the classic game 'Battleship' If you've never played it, or need a refresher, you can read about Battleship's rules and you can play an online version of Battleship Since we're doing TDD, it's important that you don't get overwhelmed Take it one step at a time Write a test, then make it pass We have not yet discussed testing the appearance of a webpage, which requires a separate set of tools and is outside the scope of this unit, but this is something we will cover later in the curriculum Therefore, you should not test the DOM for this assignment Instead, do your best to isolate every bit of application functionality from the actual DOM manipulation bits Assignment\nRemember that Jest does not have built-in stable support for ESM Refer back to [Jest's instructions for \"Using Babel\"](https://jestjs io/docs/getting-started#using-babel) from the Testing Practice project to make it compatible with your ESM source code You do not need to do the steps in \"Making your Babel config jest-aware\", nor do you need to do the steps in the \"Using webpack\" section, as we are not testing bundled code or assets/CSS etc 1 Begin your app by creating the `Ship` class/factory (your choice) 1 Your 'ships' will be objects that include their length, the number of times they've been hit and whether or not they've been sunk 1 **REMEMBER** you only have to test your object's public interface Only methods or properties that are used outside of your 'ship' object need unit tests 1 Ships should have a `hit()` function that increases the number of 'hits' in your ship 1 `isSunk()` should be a function that calculates whether a ship is considered sunk based on its length and the number of hits it has received 1 Create a `Gameboard` class/factory 1 Note that we have not yet created any User Interface We should know our code is coming together by running the tests You shouldn't be relying on `console log` or DOM methods to make sure your code is doing what you expect it to 1 Gameboards should be able to place ships at specific coordinates by calling the ship factory or class 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5662,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\project_battleship.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "263218398196c4f266eabdf274c9c7c3",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\project_battleship.md",
    "source_type": "git_repo",
    "title": "project_battleship",
    "content": "the number of hits it has received 1 Create a `Gameboard` class/factory 1 Note that we have not yet created any User Interface We should know our code is coming together by running the tests You shouldn't be relying on `console log` or DOM methods to make sure your code is doing what you expect it to 1 Gameboards should be able to place ships at specific coordinates by calling the ship factory or class 1Gameboards should have a `receiveAttack` function that takes a pair of coordinates, determines whether or not the attack hit a ship and then sends the 'hit' function to the correct ship, or records the coordinates of the missed shot 1 Gameboards should keep track of missed attacks so they can display them properly 1 Gameboards should be able to report whether or not all of their ships have been sunk 1 Create a `Player` class/factory 1 There will be two types of players in the game, 'real' players and 'computer' players 1 Each player object should contain its own gameboard 1 Import your classes/factories into another file, and drive the game using event listeners to interact with your objects Create a module that helps you manage actions that should happen in the DOM 1 At this point it is appropriate to begin crafting your User Interface 1 Set up a new game by creating Players For now just populate each player's Gameboard with predetermined coordinates You are going to implement a system for allowing players to place their ships later 1 We’ll leave the HTML implementation up to you for now, but you should display both the player’s boards and render them using information from the Gameboard class/factory - You'll need methods to render each player's Gameboard, so put them in an appropriate module 1 Your event listeners should step through the game turn by turn using only methods from other objects If at any point you are tempted to write a new function, step back and figure out which class or module that function should belong to 1 For attacks, let the user click on a coordinate in the enemy Gameboard Send the user input to methods on your objects, and re-render the boards to display the new information - Players should take turns playing the game by attacking the enemy Gameboard If you feel the need to keep track of the current player's turn, it's appropriate to manage that in this module, instead of another mentioned object - The game is played against the computer, so make the ‘computer’ players capable of making random plays",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5662,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\project_battleship.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "202028370977c3e7336a53175bf3c542",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\project_battleship.md",
    "source_type": "git_repo",
    "title": "project_battleship",
    "content": "Gameboard Send the user input to methods on your objects, and re-render the boards to display the new information - Players should take turns playing the game by attacking the enemy Gameboard If you feel the need to keep track of the current player's turn, it's appropriate to manage that in this module, instead of another mentioned object - The game is played against the computer, so make the ‘computer’ players capable of making random playsThe computer does not have to be smart, but it should know whether or not a given move is legal (i e it shouldn’t shoot the same coordinate twice) 1 Create conditions so that the game ends once one player’s ships have all been sunk This function is also appropriate for this module 1 Finish it up by implementing a system that allows players to place their ships For example, you can let them type coordinates for each ship or have a button to cycle through random placements #### Extra credit\nMake your battleship project more impressive by introducing any of these modifications - Implement drag and drop to allow players to place their ships - Create a 2-player option that lets users take turns by passing the laptop back and forth, or by spinning the monitor around on a desktop Implement a 'pass device' screen so that players don't see each other's boards - Polish the intelligence of the computer player by having it try adjacent slots after getting a 'hit'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5662,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\project_battleship.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ebdbe3076288dd93d300f8f5bbf6ec59",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\project_testing_practice.md",
    "source_type": "git_repo",
    "title": "project_testing_practice",
    "content": "Introduction\nLet's practice This testing thing really is not that difficult, but it is quite new The only way to get comfortable with it is to spend some time doing it Using ES6 import statements with Jest\nBy default, the current version of Jest will not recognize ES6 import statements In order for you to be able to use ES6 modules for this project you may follow the two steps in Jest's instructions for \"Using Babel\" (ignore the \"Making your Babel config jest-aware\" section) Assignment\nWrite tests for the following, and then make the tests pass 1 A `capitalize` function that takes a string and returns it with the first character capitalized 1 A `reverseString` function that takes a string and returns it reversed 1 A `calculator` object that contains functions for the basic operations: `add`, `subtract`, `divide`, and `multiply` Each of these functions should take two numbers and return the correct calculation 1 A `caesarCipher` function that takes a string and a shift factor and returns it with each character \"shifted\" Read more about [how a Caesar cipher works](https://crypto interactive-maths com/caesar-shift-cipher html) 1 Don’t forget to test wrapping from `z` to `a` For example, `caesarCipher('xyz', 3)` should return `'abc'` 1 Don’t forget to test case preservation The shifted lettercase should follow the original lettercase For example, `caesarCipher('HeLLo', 3)` should return `'KhOOr'` 1 Don't forget to test punctuation Punctuation, spaces, and other non-alphabetical characters should remain unchanged For example, `caesarCipher('Hello, World ', 3)` should return `'Khoor, Zruog '` 1 For this one, you may want to split the final function into a few smaller functions One concept of Testing is that you don't need to explicitly test *every* function you write Just the public ones So in this case you only need tests for the final `caesarCipher` function If it works as expected you can rest assured that your smaller helper functions are doing what they're supposed to 1 An `analyzeArray` function that takes an array of numbers and returns an object with the following properties: `average`, `min`, `max`, and `length`",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2538,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\project_testing_practice.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "00791ffb121581ca96da83b6eafeba8f",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\project_testing_practice.md",
    "source_type": "git_repo",
    "title": "project_testing_practice",
    "content": "One concept of Testing is that you don't need to explicitly test *every* function you write Just the public ones So in this case you only need tests for the final `caesarCipher` function If it works as expected you can rest assured that your smaller helper functions are doing what they're supposed to 1 An `analyzeArray` function that takes an array of numbers and returns an object with the following properties: `average`, `min`, `max`, and `length````javascript\nconst object = analyzeArray([1,8,3,4,2,6]);\nobject == {\naverage: 4,\nmin: 1,\nmax: 8,\nlength: 6\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2538,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\project_testing_practice.md",
      "source_type": "git_repo"
    },
    "token_count": 143,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a6320454c9fcf4042f388b97de089e40",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "Introduction\nIn the previous lesson, we introduced ES6 modules (ESM) and npm The introduction of ESM greatly mitigated some of the issues with managing individual script files and dependencies However, downloading a large number of module files individually can reduce performance, especially as more third party files are imported Fortunately, more recent web technologies have greatly improved these aspects, but bundlers still provide us with a lot of power to process and optimize our code in various ways This power, however, does come with the small cost of needing to configure a bundler For now, our needs are few and simple, and we can look at the basic things one at a time Awareness of bundlers and basic experience with them is valuable While in recent years, new build tools have come out that handle a lot of basic configuration for us, in the real world, you may not always get a chance to use these shiny new tools It's very reasonable to end up working with codebases that use tools that require more manual configuration Even if you did get to work with tools that handle more things for you, it's useful to understand what those tools are actually doing for you Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain the purpose of bundlers and how they work Configure Webpack to bundle JavaScript modules Configure Webpack to handle non-JavaScript files during bundling, including using HtmlWebpackPlugin Set up Webpack's development server Bundling\nIn the ES6 modules lesson, we learned what an entry point is, what a dependency graph is, and how to add an entry point file to HTML as a module script With bundling, the same concepts of entry points and dependency graphs apply: we provide the bundler with an entry point It then builds a dependency graph from that file, combines all relevant files together, and then outputs a single file with all the necessary code included While it does this, we could also get it to do a whole bunch of other things, such as minifying our code, image optimizations, or even \"tree shaking\" Most of these extra optimizations are out of the scope of this course; we will instead be focusing on basic bundling of JavaScript, and handling HTML, CSS, and images Webpack\nWebpack is one of the most popular JavaScript bundlers, if not the most popular one, and has been for a long time Let's get started with bundling",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "79ca84ea7948ebc9489916c4365ad2da",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "to do a whole bunch of other things, such as minifying our code, image optimizations, or even \"tree shaking\" Most of these extra optimizations are out of the scope of this course; we will instead be focusing on basic bundling of JavaScript, and handling HTML, CSS, and images Webpack Webpack is one of the most popular JavaScript bundlers, if not the most popular one, and has been for a long time Let's get started with bundlingWe'll first need to make a new directory for our practice app, then create a package json file in it for npm to record information about packages we use (like Webpack) Run the following in your terminal:\nbash\nmkdir webpack-practice &&\ncd webpack-practice &&\nnpm init -y\nInside your new directory, before we install anything, open package json If you see \"type\": \"commonjs\" or \"type\": \"module\" inside, remove it, otherwise Webpack will start throwing errors at us due to clashing module issues Once we've made sure package json does not contain a \"type\" property, we can go ahead and install Webpack, which involves two packages bash\nnpm install --save-dev webpack webpack-cli\nNote that we included the --save-dev flag (you can also use -D as a shortcut), which tells npm to record our two packages as development dependencies We will only be using Webpack during development The actual code that makes Webpack run will not be part of the code that the browser will run Also notice that when these finished installing, npm created a node_modules directory and a package-lock json file for us node_modules is where Webpack's actual code (and a whole bunch of other stuff) lives, and package-lock json is just another file npm uses to track more specific package information #### src and dist\nWhen dealing with Webpack (and often with any other bundler or build tool), we have two very important directories: `src` (short for \"source\") and `dist` (short for \"distribution\") We could technically call these directories whatever we want, but these names are conventions `src` is where we keep all of our website's source code, essentially where all of our work will be done (with an exception being altering any configuration files in the root of the project) When we run Webpack to bundle our code, it will output the bundled files into the `dist` directory",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "a3c05d88999022e032a0db45fb5909e5",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "directories: `src` (short for \"source\") and `dist` (short for \"distribution\") We could technically call these directories whatever we want, but these names are conventions `src` is where we keep all of our website's source code, essentially where all of our work will be done (with an exception being altering any configuration files in the root of the project) When we run Webpack to bundle our code, it will output the bundled files into the `dist` directoryThe idea is that if someone were to fork or clone the project, they would not need the `dist` directory, as they'd just be able to run Webpack to build from `src` into their own `dist` Similarly, to deploy our website, we would only need the `dist` code and nothing else Keep that in mind Work inside `src`, build into `dist`, then deploy from there Bundling JavaScript\n#### Import file extensions\nNormally, with ESM, we need to specify file extensions when we import from other files (e g `\" /greeting js\"`) With Webpack and many other bundlers, some file extensions like ` js` are optional, as Webpack will automatically check extensionless file paths for ` js` files by default (e g `\" /greeting\"`) This is a feature of Webpack, not ESM In this lesson, examples with imports will always include the file extension where appropriate to be explicit Now that we've installed Webpack in our project directory, let's create a src directory with two JavaScript files inside it: index js and greeting js bash\nmkdir src && touch src/index js src/greeting js\nInside our two JavaScript files, we'll have the following:\n```javascript\n// index js\nimport { greeting } from \" /greeting js\";\nconsole log(greeting);\n```\njavascript\n// greeting js\nexport const greeting = \"Hello, Odinite \";\nGreat, now we have an index js that imports from, and so depends on, greeting js In order to bundle this, we'll also want a Webpack configuration file, which will contain all the details we need for bundling, such as the entry point, the output destination, and anything like plugins and loaders (which we will cover shortly) Back in your project root (so outside of src), create a webpack config js file that contains the following:\n```javascript\n// webpack config js\nconst path = require(\"path\");\nmodule",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "eb7d898caf5f441ab353c457197f04f0",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "and so depends on, greeting js In order to bundle this, we'll also want a Webpack configuration file, which will contain all the details we need for bundling, such as the entry point, the output destination, and anything like plugins and loaders (which we will cover shortly) Back in your project root (so outside of src), create a webpack config js file that contains the following: ```javascript // webpack config js const path = require(\"path\"); moduleexports = {\nmode: \"development\",\nentry: \" /src/index js\",\noutput: {\nfilename: \"main js\",\npath: path resolve(__dirname, \"dist\"),\nclean: true,\n},\n};\n```\nYes, you may have noticed this file uses CommonJS (CJS) syntax instead of ESM That's because this file (and Webpack itself) runs in NodeJS and not the browser By default, NodeJS uses CJS syntax, and the configuration file also contains some CJS-specific things We need not worry about this - this is just stuff we need for Webpack to do its thing You'll notice the exported object contains a few key sections:\nmode: For now, we will just leave this in development mode, as it will be more useful to us We will revisit this and production mode in a later lesson entry: A file path from the config file to whichever file is our entry point, which in this case is src/index js output: An object containing information about the output bundle filename: The name of the output bundle - it can be anything you want path: The path to the output directory, in this case, dist If this directory doesn't already exist when we run Webpack, it will automatically create it for us as well Don't worry too much about why we have the path resolve part - this is just the way Webpack recommends we specify the output directory clean: If we include this option and set it to true, then each time we run Webpack to bundle, it will empty the output directory first before bundling the files into it This helps us keep dist clean, so it only contains the files produced by the most recent bundling With these files all in place, let's run Webpack and see what happens bash\nnpx webpack\nYou should see that Webpack has created a dist directory for us containing a main js file Inside this file is a lot of stuff Don't worry, most of this stuff is just for development tools we will use later",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "431cc0c1ac8ff845b28c557e18a23deb",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "into it This helps us keep dist clean, so it only contains the files produced by the most recent bundling With these files all in place, let's run Webpack and see what happens bash npx webpack You should see that Webpack has created a dist directory for us containing a main js file Inside this file is a lot of stuff Don't worry, most of this stuff is just for development tools we will use laterIf you go ahead and run this file with node dist/main js, you should see Hello, Odinite logged in the terminal Congratulations You've just made your first bundle with Webpack Handling HTML\nLet's actually include some HTML After all, we're interested in making websites Since HTML isn't JavaScript, Webpack can't just bundle it straight away, but there's a nifty tool we can use called HtmlWebpackPlugin that's just perfect for us Run the following command to install HtmlWebpackPlugin (also as a dev dependency):\nbash\nnpm install --save-dev html-webpack-plugin\nWe should also create a template html inside src (you can name this file whatever you want) and fill that with the usual HTML boilerplate We do not need to put a script tag in this file HtmlWebpackPlugin will automatically add our output bundle as a script tag We wouldn't want to double up by including our own one as well Inside our webpack config js, we can add a few little bits ```javascript\n// webpack config js\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule exports = {\nmode: \"development\",\nentry: \" /src/index js\",\noutput: {\nfilename: \"main js\",\npath: path resolve(__dirname, \"dist\"),\nclean: true,\n},\nplugins: [\nnew HtmlWebpackPlugin({\ntemplate: \" /src/template html\",\n}),\n],\n};\n```\nAll we're doing here is making sure our Webpack configuration has access to HtmlWebpackPlugin, then adding it as a plugin to the configuration object Inside the HtmlWebpackPlugin constructor call, we pass in any options For now, we're only interested in the template option If we provide the path to our src/template html file as a template, when we run npx webpack again, you'll notice our dist directory not only contains a main js file but an index html file as well (it can't combine them into one file) You'll also notice that HtmlWebpackPlugin has automatically added a deferred script tag to our index html file - what a darling",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "6cd4f081fc501b94eeae392e796b410d",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "options For now, we're only interested in the template option If we provide the path to our src/template html file as a template, when we run npx webpack again, you'll notice our dist directory not only contains a main js file but an index html file as well (it can't combine them into one file) You'll also notice that HtmlWebpackPlugin has automatically added a deferred script tag to our index html file - what a darlingIf you open this file in the browser and check the browser console, you should see our lovely \"Hello, Odinite \" string logged We've now successfully configured Webpack to handle our HTML file and inject the appropriate script tag Any changes to HTML we make, we can just rerun Webpack to generate fresh dist code Let's see how we'd handle CSS Loading CSS\nWe don't just need one new package for CSS, we need two Gosh, what a greedy little thing Let's install them bash\nnpm install --save-dev style-loader css-loader\ncss-loader will read any CSS files we import in a JavaScript file and store the result in a string style-loader then takes that string and actually adds the JavaScript code that will apply those styles to the page Therefore, we need both Back in our webpack config js, we need to add these loaders so Webpack knows what to do Since these aren't plugins, they go in a separate section:\n```javascript\n// webpack config js\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule exports = {\nmode: \"development\",\nentry: \" /src/index js\",\noutput: {\nfilename: \"main js\",\npath: path resolve(__dirname, \"dist\"),\nclean: true,\n},\nplugins: [\nnew HtmlWebpackPlugin({\ntemplate: \" /src/template html\",\n}),\n],\nmodule: {\nrules: [\n{\ntest: / css$/i,\nuse: [\"style-loader\", \"css-loader\"],\n},\n],\n},\n};\n```\nAll this does is tell Webpack that if it encounters an imported file ending with css, it should use the listed loaders to process that CSS file #### Loader order matters for CSS Notice how we put `css-loader` **at the end** of the array We **must** set this order and not the reverse Webpack will run the loaders starting at the end, so we want it to read the CSS file into a string with `css-loader` first, then use `style-loader` to inject the JavaScript that applies the CSS in that string to the page",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "8c690170a983270f0333f2b8ecb00c3d",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "use the listed loaders to process that CSS file #### Loader order matters for CSS Notice how we put `css-loader` **at the end** of the array We **must** set this order and not the reverse Webpack will run the loaders starting at the end, so we want it to read the CSS file into a string with `css-loader` first, then use `style-loader` to inject the JavaScript that applies the CSS in that string to the pageIt wouldn't work the same the other way round Now that Webpack knows what to do with imported CSS files, let's add some CSS Create a src/styles css with the following:\ncss\n/* styles css */\nbody {\nbackground-color: rebeccapurple;\n}\nYou can now import your CSS file into one of your JavaScript files src/index js makes sense We don't need anything from the imported CSS file itself Since our CSS and style loaders will handle all of that for us, we can just use a side effect import ```javascript\n// src/index js\nimport \" /styles css\";\nimport { greeting } from \" /greeting js\";\nconsole log(greeting);\n```\nOnce again, bundle with Webpack using npx webpack, then open dist/index html and enjoy the beautiful purple screen What about link tags Notice how we don't link our CSS file in our HTML template like we would've done before While you could do this with one of the loaders from the next section, in the real world, projects often contain many moving parts and many modules Eventually, it becomes easier to work with multiple smaller CSS files that you import in the modules they're needed There are even ways those files can be scoped only to those modules and not globally We're only introducing the minimum to allow you to import your CSS into your JavaScript, but many build tools and more sophisticated bundler configurations will do a lot more to imported CSS than what we're showing here Loading images\nWe're nearly done with the main Webpack configuration If we have any local image files we want to include within our website, they will also require a little extra configuration since they're not JavaScript files There are three different ways you could be dealing with local image files:\nImage files used in our CSS inside url()\nLucky us css-loader already handles this for us, so there's nothing extra to do for image paths in CSS Image files we reference in our HTML template, e g",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "111eb21691598d1752459270747b9ce8",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "we have any local image files we want to include within our website, they will also require a little extra configuration since they're not JavaScript files There are three different ways you could be dealing with local image files: Image files used in our CSS inside url() Lucky us css-loader already handles this for us, so there's nothing extra to do for image paths in CSS Image files we reference in our HTML template, e gas the src of an <img>\nWe need to install and tell Webpack to use something called html-loader, which will detect image file paths in our HTML template and load the right image files for us Without this, /odin png would just be a bit of text that will no longer reference the correct file once we run Webpack to build into dist Let's install it:\nbash\nnpm install --save-dev html-loader\nThen, add the following object to the module rules array within webpack config js:\njavascript\n// webpack config js\n{\ntest: /\\ html$/i,\nloader: \"html-loader\",\n}\nImages we use in our JavaScript, where we will need to import the files\nIf we need to use a local image file in our JavaScript (such as when manipulating the DOM to create or edit img elements and set their src attribute), we need to import the images into our JavaScript module Since images aren't JavaScript, we need to tell Webpack that these files will be assets by adding an asset/resource rule No need to install anything here Just add the following object to the module rules array within webpack config js:\njavascript\n// webpack config js\n{\ntest: /\\ (png|svg|jpg|jpeg|gif)$/i,\ntype: \"asset/resource\",\n}\nYou can always edit the regex in the test property to remove any file extensions you don't need or add any extensions you do need What's shown above is straight from Webpack's Asset Management guide and will recognize most of the common image file extensions Then, in whatever JavaScript module we want to use that image in, we just have to default import it ```javascript\n// src/index js\nimport odinImage from \" /odin png\";\nconst image = document createElement(\"img\");\nimage src = odinImage;\ndocument body appendChild(image);\n```\nWe have to import it so that the odinImage variable contains the correct file path, even when we bundle into dist If we just wrote image src = \" /odin",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "c80171d06821dceef0a90d0acf19ecd0",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "common image file extensions Then, in whatever JavaScript module we want to use that image in, we just have to default import it ```javascript // src/index js import odinImage from \" /odin png\"; const image = document createElement(\"img\"); image src = odinImage; document body appendChild(image); ``` We have to import it so that the odinImage variable contains the correct file path, even when we bundle into dist If we just wrote image src = \" /odinpng\";, then the \"file path\" would just be a plain string When we bundle into dist, Webpack will not magically recognize that this string in our JavaScript references a file and so will not include it in the bundle When we import it and set the correct asset/resource rule, Webpack will recognize the import, include the image file when we bundle, and also make sure the imported variable contains the correct file path at the end After all that, if we added both html-loader and the image asset/resource rule, our webpack config js would look something like this:\n```javascript\n// webpack config js\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule exports = {\nmode: \"development\",\nentry: \" /src/index js\",\noutput: {\nfilename: \"main js\",\npath: path resolve(__dirname, \"dist\"),\nclean: true,\n},\nplugins: [\nnew HtmlWebpackPlugin({\ntemplate: \" /src/template html\",\n}),\n],\nmodule: {\nrules: [\n{\ntest: / css$/i,\nuse: [\"style-loader\", \"css-loader\"],\n},\n{\ntest: / html$/i,\nloader: \"html-loader\",\n},\n{\ntest: / (png|svg|jpg|jpeg|gif)$/i,\ntype: \"asset/resource\",\n},\n],\n},\n};\n```\nYou might notice that when images are included when bundling, the output image file in dist has a different file name (it will likely be some jumble of numbers and letters) By default, Webpack gives your bundled image files a new name by hashing their contents You do not need to know how this works, nor do you need to dig into the details of why, nor how to change it You just need to be aware that this is expected behavior (it's to do with preventing issues with the browser cache and matching file names) #### You only need to configure what you need\nYou may not need everything we've mentioned",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "46c53fe044551f2bccbdd542f56edbfe",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "bundled image files a new name by hashing their contents You do not need to know how this works, nor do you need to dig into the details of why, nor how to change it You just need to be aware that this is expected behavior (it's to do with preventing issues with the browser cache and matching file names) #### You only need to configure what you need You may not need everything we've mentionedIf your project does not have images with local file path sources in your HTML template, you do not need `html-loader` set up If you aren't using any local images in your JavaScript, you won't need the image `asset/resource` rule set up Similarly, in the future, you may end up working with things that need a special loader or plugin, such as custom fonts or preprocessors You can always use Google or reference Webpack's documentation for instructions on what you'd need when that time comes Webpack dev server\nDuring this lesson, did you get a bit annoyed with having to run npx webpack to rebundle with every change Fortunately, there are multiple solutions for this, and we will focus on what we think is the most useful option: webpack-dev-server Install it as follows:\nbash\nnpm install --save-dev webpack-dev-server\nYou may have used something like the Live Preview VSCode extension before, where it automatically refreshes your web page whenever you save a change webpack-dev-server is very similar, meaning we won't have to keep running npx webpack after each change we make It works by bundling your code behind the scenes (as if we ran npx webpack, but without saving the files to dist), and it does this every time you save a file that's used in the bundle We can also use something called a source map so that any error messages reference files and lines from our development code and not the jumbled mess inside our single bundled js file Once installed, in our webpack config js, we only need to add a couple more properties somewhere in the configuration object (the order of these properties does not matter):\n```javascript\n// webpack config js\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule exports = {\nmode: \"development\",\nentry: \" /src/index js\",\noutput: {\nfilename: \"main js\",\npath: path resolve(__dirname, \"dist\"),\nclean: true,\n},\ndevtool: \"eval-source-map\",\ndevServer: {\nwatchFiles: [\" /src/template",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "fb56f023c21339d331111559106f4b5f",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "our single bundled js file Once installed, in our webpack config js, we only need to add a couple more properties somewhere in the configuration object (the order of these properties does not matter): ```javascript // webpack config js const path = require(\"path\"); const HtmlWebpackPlugin = require(\"html-webpack-plugin\"); module exports = { mode: \"development\", entry: \" /src/index js\", output: { filename: \"main js\", path: path resolve(__dirname, \"dist\"), clean: true, }, devtool: \"eval-source-map\", devServer: { watchFiles: [\" /src/templatehtml\"],\n},\nplugins: [\nnew HtmlWebpackPlugin({\ntemplate: \" /src/template html\",\n}),\n],\nmodule: {\nrules: [\n{\ntest: / css$/i,\nuse: [\"style-loader\", \"css-loader\"],\n},\n{\ntest: / html$/i,\nloader: \"html-loader\",\n},\n{\ntest: / (png|svg|jpg|jpeg|gif)$/i,\ntype: \"asset/resource\",\n},\n],\n},\n};\n```\nFirstly, we add a source map by setting eval-source-map as a devtool option If we don't do this, any error messages we get won't necessarily match up to the correct files and line numbers from our development code In the devtools \"Sources\" tab, we also won't be able to find our original untouched code, making the Chrome debugger harder to use Adding this source map will solve both of these problems for us Secondly, by default, webpack-dev-server will only auto-restart when it detects any changes to files we import into our JavaScript bundle, so our HTML template will be ignored All we need to do is add it to the dev server's array of watched files - nice and simple Once set up, we can start up the dev server using the following command:\nbash\nnpx webpack serve\nOur site will then be available via http://localhost:8080/ by default Note that the webpack-dev-server only reads your webpack configuration when you start it If you change the webpack config file while the dev server is running, it will not reflect those config changes Use Ctrl + C in the terminal to kill it then rerun `npx webpack serve` to apply the new config Rounding up\nYes, yes, this all might seem like a lot You've gone from just having some basic HTML, CSS and JS files, and not needing much else to suddenly needing this loader, that plugin, this configuration file, etc",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "17334f84e15ef9d4a606e00536cbe2b0",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "the webpack config file while the dev server is running, it will not reflect those config changes Use Ctrl + C in the terminal to kill it then rerun `npx webpack serve` to apply the new config Rounding up Yes, yes, this all might seem like a lot You've gone from just having some basic HTML, CSS and JS files, and not needing much else to suddenly needing this loader, that plugin, this configuration file, etcIn the real world, as apps get more complex, we need tools that can improve our development experience while optimizing things in production Even though we're not using all of the features available to us right now, a general understanding of what these sorts of tools are doing for us is valuable Later in the curriculum, you will use different tools that abstract a lot of these underlying mechanisms away from us Using them and having no clue what they're actually doing for you can make things harder for you when you eventually encounter a situation that actually needs some kind of manual configuration In a later lesson, we will introduce some extra things that can make setting up and working with Webpack much quicker and more straightforward For now, however, it's good to get a little manual practice in Assignment\n1 Start by reading the [Webpack concepts](https://webpack js org/concepts/) page to get a general understanding of some of the main terms 1 [Webpack's Asset Management guide](https://webpack js org/guides/asset-management/) goes through some examples of how to handle various kinds of assets, like CSS, images, and fonts You'll see that its examples use `npm run build` to bundle the files; in these examples, that's the equivalent of `npx webpack` We will go through npm scripts in a later lesson Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a bundler What is Webpack How do you bundle JavaScript How do you load CSS using Webpack How do you automatically build HTML files in dist using Webpack How would you handle assets like local image files What Webpack tool could you use during development to view changes to your website live How does using a source map help with development Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "a82fbcc6b777cf68e68b13634bf9231e",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
    "source_type": "git_repo",
    "title": "webpack",
    "content": "What is Webpack How do you bundle JavaScript How do you load CSS using Webpack How do you automatically build HTML files in dist using Webpack How would you handle assets like local image files What Webpack tool could you use during development to view changes to your website live How does using a source map help with development Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalIt looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 25548,
      "relative_path": "git_repos\\odin-project\\javascript\\organizing_your_javascript_code\\webpack.md",
      "source_type": "git_repo"
    },
    "token_count": 104,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "5cddeeb12f5073a7bef713fbb58b258f",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\testing_basics.md",
    "source_type": "git_repo",
    "title": "testing_basics",
    "content": "Introduction\nTest Driven Development, or TDD for short, is a big deal in the modern development landscape This is a concept that we introduced way back in our Fundamentals section with our JavaScript Exercises The main idea is that you start working on your code by writing automated tests before writing the code that is being tested There are tons of benefits to working like this, all of which will be discussed in the resources below There are many test-running systems available in JavaScript: Mocha, Jasmine, Tape and Jest to name a few Fortunately, the syntax for each one is very similar They all have their own set of special features, but the basic syntax is almost identical, so in the end it doesn't matter which one you use In fact, picking which library to use for this curriculum has been quite tricky This lesson is going to center around Jest We have found that it has one of the best resources for explaining JavaScript testing, as well as fantastic documentation In the end, writing tests is less about the syntax and more about the TDD philosophy The most important issues are knowing why we write tests and what we test rather than how Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain the basics of TDD Get up and running with Jest Write basic tests Assignment\n1 Read about the [basic process and the benefits of TDD](https://web archive org/web/20211123190134/http://godswillokwara com/index php/2016/09/09/the-importance-of-test-driven-development/) 1 Watch at least the first 3 videos of [the Unit Testing in JavaScript video series](https://www youtube com/playlist list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr) 1 Follow along to [Jest's Getting Started tutorial](https://jestjs io/docs/getting-started) For the upcoming testing practice and project, you only need to follow the instructions for installing jest 1 Read and follow the [Using Matchers](https://jestjs io/docs/using-matchers) document on the main Jest website This one demonstrates some of the other useful functions you can use in your tests 1 This article explains more about [the why/how and value behind TDD](https://jrsinclair",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3424,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\testing_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9553535051d9798e4d187101f0887cb9",
    "source_file": "corpus\\git_repos\\odin-project\\javascript\\testing_javascript\\testing_basics.md",
    "source_type": "git_repo",
    "title": "testing_basics",
    "content": "Unit Testing in JavaScript video series](https://www youtube com/playlist list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr) 1 Follow along to [Jest's Getting Started tutorial](https://jestjs io/docs/getting-started) For the upcoming testing practice and project, you only need to follow the instructions for installing jest 1 Read and follow the [Using Matchers](https://jestjs io/docs/using-matchers) document on the main Jest website This one demonstrates some of the other useful functions you can use in your tests 1 This article explains more about [the why/how and value behind TDD](https://jrsinclaircom/articles/2016/one-weird-trick-that-will-change-the-way-you-code-forever-javascript-tdd/) and also includes some great examples of how to apply it Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the benefits of TDD What are some common jest matchers Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Watch this TDD introduction for an additional explanation of Test Driven Development as well as some useful examples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3424,
      "relative_path": "git_repos\\odin-project\\javascript\\testing_javascript\\testing_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2a5666db14d691caa7f836c0084e2ed7",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
    "source_type": "git_repo",
    "title": "form_validations",
    "content": "Introduction\nValidations allow us to set specific constraints or rules that determine what data users can enter into an input When a user enters data that breaks the rules, a message will appear, providing feedback on what was wrong with the entered data and how to fix it Validations are a vital ingredient in well-designed forms They help protect our backend systems from receiving incorrect data, and they help make the experience of interacting with our form as dead-stupid-simple as possible for our users This lesson will explore some of the built-in validations you can use with HTML forms We will also dive into styling validations with CSS Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what form validations are Know how to use a few of the basic built-in HTML validations Know how to build custom validations Required validation\nWe will often want to ensure specific fields have been filled in before submitting the form, for example, the email and password in a login form To make a field required, we add the required attribute to it:\nSee the Pen\nforms-required-validation by TheOdinProject (@TheOdinProjectExamples)\non CodePen To ensure a good user experience and to meet accessibility guidelines, we should always indicate which fields are required This will often be done by adding an asterisk(*) to the required field label like we have done in the example You could also add a message that makes the meaning of the asterisk(*) clear to the user Text length validations\nSometimes we will want users to enter a minimum or a maximum amount of text into a field Real-world examples of using these validations would be the old 140 character limit that X (formerly known as Twitter) used to have in its status field or having minimum and maximum length constraints on a username field Minimum length validation\nTo add the minimum length validation, we give the form control a minlength attribute with an integer value that represents the minimum number of characters we want to allow in the form control:\nSee the Pen\nforms-min-length-validation by TheOdinProject (@TheOdinProjectExamples)\non CodePen Try entering less than three characters into the text area and clicking the post button to see the validation in action",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16686,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4681c25602b72e7de3a1f47a45f13d56",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
    "source_type": "git_repo",
    "title": "form_validations",
    "content": "having minimum and maximum length constraints on a username field Minimum length validation To add the minimum length validation, we give the form control a minlength attribute with an integer value that represents the minimum number of characters we want to allow in the form control: See the Pen forms-min-length-validation by TheOdinProject (@TheOdinProjectExamples) on CodePen Try entering less than three characters into the text area and clicking the post button to see the validation in actionMaximum length validation\nTo add a maximum length validation, we give the form control a maxlength attribute with an integer value which represents the maximum number of characters we want to allow in the form control:\nSee the Pen\nforms-maximum-length-validations by TheOdinProject (@TheOdinProjectExamples)\non CodePen With the maximum length validation, the browser will prevent users from entering more characters than the max length attribute value Try this for yourself in the example above Combining validations\nHTML allows us to apply as many validations as we wish to a form control For example, we can give our post <textarea> both minlength and maxlength validations:\nSee the Pen\nforms-combining-validations by TheOdinProject (@TheOdinProjectExamples)\non CodePen This gives us much more scope to control what users input Number range validations\nJust like we often need to control the length of text-based form controls, there will be many situations where we will want to control the range of values users can enter into number based form controls We can do this with the min and max attributes, which allows us to set the lower and upper bounds of the value entered into the form control The min and max attributes only work with number-based form controls such as the number, dates and time inputs You can view the complete list of supported elements on MDN's documentation on the max attribute Some real-world use cases for using these validations would be limiting the quantity on a product order form or choosing the number of passengers on a flight booking form Min validation\nTo add a minimum value validation, we give the form control a min attribute with an integer value which represents the minimum number we want the form control to accept:\nSee the Pen\nforms-min-validation by TheOdinProject (@TheOdinProjectExamples)\non CodePen Try submitting the form with a quantity of 0 to see the validation in action",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16686,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "bf3139bd8a700551598fd60a32c463e9",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
    "source_type": "git_repo",
    "title": "form_validations",
    "content": "be limiting the quantity on a product order form or choosing the number of passengers on a flight booking form Min validation To add a minimum value validation, we give the form control a min attribute with an integer value which represents the minimum number we want the form control to accept: See the Pen forms-min-validation by TheOdinProject (@TheOdinProjectExamples) on CodePen Try submitting the form with a quantity of 0 to see the validation in actionMax validation\nTo add a maximum value validation, we give the form control a max attribute with an integer value which represents the maximum number we want the form control to accept:\nSee the Pen\nforms-max-validation by TheOdinProject (@TheOdinProjectExamples)\non CodePen Try submitting the form with seven passengers to see the validation in action Pattern validations\nTo ensure we get the correct information from users, we will often want to ensure data matches a particular pattern Real-world applications would be checking if a credit card number or a zipcode is in the correct format To add a pattern validation, we give the form control a pattern attribute with a regular expression as the value In our example we are using the pattern validation to ensure a US zip code is in the correct format (5 numbers followed by an optional dash and 4 more numbers):\nSee the Pen\nforms-pattern-basic-validation by TheOdinProject (@TheOdinProjectExamples)\non CodePen Entering an incorrect zip code and submitting the form will display the following validation error in the browser \"Please match the requested format\" This isn't very useful since it doesn't communicate how to fix the issue It is good practice to use a placeholder attribute to show users an example of the expected pattern they need to enter:\nSee the Pen\nforms-pattern-with-placeholder-validation by TheOdinProject (@TheOdinProjectExamples)\non CodePen The pattern attribute can only be used on <input> elements Some input elements already validate data that matches a certain pattern For example, the email input field will make sure a valid email is entered and the url input element will check to ensure the URL starts with http or https:\nSee the Pen\nforms-built-in-pattern-validations by TheOdinProject (@TheOdinProjectExamples)\non CodePen Styling validations\nWe can target form controls that have passed or failed validations using the :valid and :invalid pseudo-classes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16686,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "e04442996f0d9cc767cb824d77a74c12",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
    "source_type": "git_repo",
    "title": "form_validations",
    "content": "can only be used on <input> elements Some input elements already validate data that matches a certain pattern For example, the email input field will make sure a valid email is entered and the url input element will check to ensure the URL starts with http or https: See the Pen forms-built-in-pattern-validations by TheOdinProject (@TheOdinProjectExamples) on CodePen Styling validations We can target form controls that have passed or failed validations using the :valid and :invalid pseudo-classesTo see this in action, we will be using our email and website example that we looked at previously:\nSee the Pen\nforms-styling-validations by TheOdinProject (@TheOdinProjectExamples)\non CodePen First of all, we target any valid inputs and give them a green border Our email and URL inputs initially have a green border since they are not required fields and are valid When a field is invalid, we give it a red border instead Try entering an invalid email address and URL to see how this looks Conclusion\nThe built-in validations will take you far with ensuring your users enter the correct data They are quick and easy to add However, they have their limitations Sometimes you will need to include validations that the built-in validations won't be able to do For example, validating that a password input and password confirmation input have the same value or validating that a username has not already been taken We are also limited with what we can do with styling the validation messages and the content within them In this case, we will need to get creative and make custom validations using JavaScript and CSS We'll dive into how to achieve validation via JavaScript in a future lesson It's also worth noting client-side validations are not a silver bullet for ensuring users enter the correct data To ensure the integrity of any user data coming into our systems, we should also have server-side validations in place We will cover this side of validations later in the curriculum Assignment\n1 Read and follow along to [MDN's Client-Side Form Validation Guide](https://developer mozilla org/en-US/docs/Learn/Forms/Form_validation)\n- Skip the section on \"Validating forms using JavaScript\" This will be covered in a future lesson 1 Go through SitePoint's [Complete Guide to HTML Forms and Constraint Validation Guide](https://www sitepoint com/html-forms-constraint-validation-complete-guide/) You can skip the section on \"JavaScript and the Constraint Validation API\" and \"Creating a Custom Form Validator\" 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16686,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "8c2cabae6553c03aaae2b2d2550b8629",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
    "source_type": "git_repo",
    "title": "form_validations",
    "content": "We will cover this side of validations later in the curriculum Assignment 1 Read and follow along to [MDN's Client-Side Form Validation Guide](https://developer mozilla org/en-US/docs/Learn/Forms/Form_validation) - Skip the section on \"Validating forms using JavaScript\" This will be covered in a future lesson 1 Go through SitePoint's [Complete Guide to HTML Forms and Constraint Validation Guide](https://www sitepoint com/html-forms-constraint-validation-complete-guide/) You can skip the section on \"JavaScript and the Constraint Validation API\" and \"Creating a Custom Form Validator\" 1Read Silo Creativo's article [Improving UX in forms](https://www silocreativo com/en/css-rescue-improving-ux-forms/) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What does the required validation do What validations can you use for checking text length How can you validate the minimum and maximum of numeric inputs What can you use the pattern validation for What pseudo CSS selectors are available for styling valid and invalid inputs Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Look through this X thread of the do’s and don’ts for form validation UX Check out these 10 Guidelines for form validation design Learn Regex: A Beginner’s Guide is a great resource for understanding how regex patterns are built and shows how to use a fantastic tool for creating them Demystifying Regex with Practical Examples contains some practical examples in detail so you can understand how they work rather than copying and pasting One last resource on regular expressions that can be helpful is MDN's regular expression syntax cheatsheet This cheatsheet does a great job explaining the syntax of regular expressions in more detail",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16686,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_validations.md",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "8aced924339eaf5ed0bb07916437814a",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\project_sign_up_form.md",
    "source_type": "git_repo",
    "title": "project_sign_up_form",
    "content": "Introduction\nThis project is intended to give you a chance to flex some of the new items you've been absorbing over the past few lessons This time it's a sign-up form for an imaginary service Assignment\n#### Step 1: Set up and planning\n1 Set up your git repository (refer to past projects if you need a refresher) 1 Set up your HTML and CSS files with some dummy content, just to make sure you have everything linked correctly 1 Download a full-resolution copy of [the design file](https://cdn statically io/gh/TheOdinProject/curriculum/afdbabfab03fbc34783c6b6f3920aba4a4d3b935/intermediate_html_css/forms/project_sign_up_form/imgs/sign-up-form png), and get a general idea for how you're going to need to lay things out in your HTML document #### Step 2: Gather assets\n1 The design has a large background-image, so go find and download an image you want to use for that section The one in the design can be found on [unsplash com](https://unsplash com/photos/25xggax4bSA), but feel free to select your own Be sure to credit the creator of your image 1 Pick an external font for the 'logo' section We've used [Norse Bold](https://cdn statically io/gh/TheOdinProject/theodinproject/efdc2888072f409e687d31dc580595dbe4fe0ff4/app/assets/fonts/Norse-Bold otf), but you can use any font you like 1 For the image-sidebar, we've used this [Odin logo](https://cdn statically io/gh/TheOdinProject/curriculum/5f37d43908ef92499e95a9b90fc3cc291a95014c/html_css/project-sign-up-form/odin-lined png) #### Step 3: Some tips 1 How you attack this project is mostly up to you, but it is wise to begin by scaffolding out the structure of the page, and then tackle the various sections one by one 1 The area behind the \"ODIN\" logo is a div that has a dark, but semi-transparent background color This enhances the readability of the text against the busy background image 1 The color we've chosen for the 'Create Account' button is similar to tones found in the background image",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2913,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\project_sign_up_form.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1784513b6f2bfd2b2d16261de14c84ba",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\project_sign_up_form.md",
    "source_type": "git_repo",
    "title": "project_sign_up_form",
    "content": "mostly up to you, but it is wise to begin by scaffolding out the structure of the page, and then tackle the various sections one by one 1 The area behind the \"ODIN\" logo is a div that has a dark, but semi-transparent background color This enhances the readability of the text against the busy background image 1 The color we've chosen for the 'Create Account' button is similar to tones found in the background imageSpecifically, it is `#596D48` 1 The inputs, by default have a very light border (`#E5E7EB`), but we’ve included 2 variations For starters, the password inputs should have a red border if they contain an invalid password This can be handled with the `:invalid` pseudo-class you've learned in the previous lesson 1 The other variation is the selected input, which should have a blue border and subtle box-shadow This can be done with the `:focus` pseudo-class you've learned about in an earlier lesson 1 Do not worry about making your project look nice on mobile Responsive design isn't covered until later in the curriculum 1 Validating that the password fields match each other requires JavaScript Using JavaScript to validate forms is covered in a future lesson For now, just validate each field separately",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2913,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\project_sign_up_form.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9743b3d12787462228eefc286fefc530",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "Introduction\nForms are one of the most critical parts of your site They are your user's gateway into your backend – the user provides data in a form, and you do stuff with it You need to specify the proper types of inputs for each possible data item since there are often multiple ways to collect a piece of data, but only one way is easiest for your user In this lesson, we will explore the basics of HTML forms and some of the different types of inputs available to you Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Create forms with HTML Have a basic idea of how to style forms The form element\nThe form element is a container element like the div element we learned earlier in the curriculum The form element wraps all of the inputs a user will interact with on a form The form element accepts two essential attributes; the first is the action attribute which takes a URL value that tells the form where it should send its data to be processed Later in the curriculum, we will learn to hook backend systems up to frontend forms using this attribute For now, it's only essential to know what the action attribute is used for The second is the method attribute which tells the browser which HTTP request method it should use to submit the form The GET and POST request methods are the two you will find yourself using the most We use GET when we want to retrieve something from a server For example, Google uses a GET request when you search as it gets the search results POST is used when we want to change something on the server, for example, when a user makes an account or makes a payment on a website The markup for creating a form element looks like this:\n```html\n```\nForm controls\nTo start collecting user data, we need to use form control elements These are all the elements users will interact with on the form, such as text boxes, dropdowns, checkboxes and buttons In the following few sections, we will explore some of the form controls you will use most commonly The input element\nThe input element is the most versatile of all the form control elements It accepts a type attribute which tells the browser what type of data it should expect and how it should render the input element A text input looks like this:\n```html\n```\nText inputs accept any text input For example, you would use it to collect things like users' first and last names",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "dbecac1f4a500f157dcc697c69461dd8",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "form controls you will use most commonly The input element The input element is the most versatile of all the form control elements It accepts a type attribute which tells the browser what type of data it should expect and how it should render the input element A text input looks like this: ```html ``` Text inputs accept any text input For example, you would use it to collect things like users' first and last namesLabels\nAn input on its own isn't very useful since the user will not know what kind of data they are supposed to provide Instead, we can give our inputs a label to inform users what type of data they are expected to enter To create a label, we use the <label> element The text we want displayed in the label will go between its opening and closing tags:\n```html\nFirst Name:\n```\nLabels accept a for attribute, which associates it with a particular input The input we want to associate with a label needs an id attribute with the same value as the label's for attribute When a label is associated with an input and is clicked, it will focus the cursor on that input, ready for the user to input some data This helps make our forms more accessible to users who rely on assistive technologies Placeholder attribute\nTo guide users on what to enter in form elements, we can include placeholder text in input fields This is done by adding a placeholder attribute to an input The value will be the placeholder text we want to display in the input:\nhtml\n<label for=\"first_name\">First Name:</label>\n<input type=\"text\" id=\"first_name\" placeholder=\"Bob \">\nUse placeholder text to demonstrate how text should be entered and formatted The name attribute\nWe need to use labels so that users understand what the data entered into an input field will represent Just like that, we also need to let the backend, where we send our data, know what each piece of data represents We do this by adding a name attribute to our inputs:\nhtml\n<label for=\"first_name\">First Name:</label>\n<input type=\"text\" id=\"first_name\" name=\"first_name\">\nThe name attribute serves as a reference to the data inputted into a form control after submitting it You can think of it as a variable name for the input Form input should always have a name attribute; otherwise, it will be ignored when the form is submitted To get a better understanding of what this looks like we can submit a form to httpbin",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "98a0a7e247b424f5c0bdbdd6afd7fe60",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "to our inputs: html <label for=\"first_name\">First Name:</label> <input type=\"text\" id=\"first_name\" name=\"first_name\"> The name attribute serves as a reference to the data inputted into a form control after submitting it You can think of it as a variable name for the input Form input should always have a name attribute; otherwise, it will be ignored when the form is submitted To get a better understanding of what this looks like we can submit a form to httpbinThis service will send back a response which will let us view what data was submitted Fill in the form below and click submit:\nSee the Pen\nform-basics-name-attribute by TheOdinProject (@TheOdinProjectExamples)\non CodePen The output we care about from the response is the \"form\" object It should look something like this:\njson\n\"form\": {\n\"age\": \"33\",\n\"first_name\": \"John\",\n\"last_name\": \"Doe\"\n},\nTry changing the name attributes of some of the input fields in the form and removing the attribute entirely, then submit the form again to see how the form data in the response changes Using form controls outside of forms\nIt's worth mentioning that you can use any of the form controls HTML provides outside of the <form> element, even when you don't have a backend server where you can send data For example you might want to have an input that gets some data from a user and display that somewhere else on the page with JavaScript:\nSee the Pen\nusing-form-controls-outside-of-form by TheOdinProject (@TheOdinProjectExamples)\non CodePen We will need to manipulate data from form controls like this in projects later in the curriculum The type attribute\nEmail inputs are specialized text inputs just for email addresses They are different from text inputs in that they will display a different keyboard which will include the @ symbol on mobile devices to make entering email addresses easier They also validate that the user has entered a correctly formatted email address, but there will be more on validations later To create an email input, we use an input element with type attribute of \"email\":\nhtml\n<label for=\"user_email\">Email Address:</label>\n<input type=\"email\" id=\"user_email\" name=\"email\" placeholder=\"you@example com\">\nPassword inputs are another specialized text input",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "4ff0b18c9666be134c5f5269a42b8860",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "in that they will display a different keyboard which will include the @ symbol on mobile devices to make entering email addresses easier They also validate that the user has entered a correctly formatted email address, but there will be more on validations later To create an email input, we use an input element with type attribute of \"email\": html <label for=\"user_email\">Email Address:</label> <input type=\"email\" id=\"user_email\" name=\"email\" placeholder=\"you@example com\"> Password inputs are another specialized text inputThey differ from regular text inputs in that they mask the inputted data with another character – usually an asterisk (*) or bullet point (•) – to prevent anyone from seeing what has been entered A password input can be created using an input element with a type of \"password\":\nhtml\n<label for=\"user_password\">Password:</label>\n<input type=\"password\" id=\"user_password\" name=\"password\">\nThe number input only accepts number values and ignores any other characters the user tries to enter We create a number input using the input element with a type attribute of \"number\":\nhtml\n<label for=\"amount\">Amount:</label>\n<input type=\"number\" id=\"amount\" name=\"amount\">\nTo collect dates from a user, we can use a date input This input is unique because it provides a better user experience for choosing dates by rendering a date picker calendar To create a date input, we use the input element with a type attribute of \"date\":\nhtml\n<label for=\"dob\">Date of Birth:</label>\n<input type=\"date\" id=\"dob\" name=\"dob\">\nText area\nWhile technically not an input element, the text area element provides an input box that can accept text that spans multiple lines like user comments and reviews It can also be resized by clicking and dragging the bottom right corner to make it bigger or smaller To create a text area, we use the <textarea> element:\n```html\n```\nUnlike input elements, Textarea elements do have a closing tag This allows you to wrap some initial content you want the text area to display:\n```html\nSome initial content\n```\nText area elements accept a couple of unique attributes that other form controls do not These are the rows and cols attributes They allow you to control the initial height (rows) and width (cols) of the text area:\n```html\n```\nSelection elements\nSometimes you will want users to select a value from a predefined list This is where select elements will be useful",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "7cc0c3a190f2bf03a6aebe8e11a31c52",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "content you want the text area to display: ```html Some initial content ``` Text area elements accept a couple of unique attributes that other form controls do not These are the rows and cols attributes They allow you to control the initial height (rows) and width (cols) of the text area: ```html ``` Selection elements Sometimes you will want users to select a value from a predefined list This is where select elements will be usefulSelect dropdown\nThe select element renders a dropdown list where users can select an option Syntactically, select elements have similar markup to unordered lists The select element wraps option elements which are the options that can be selected To create a select dropdown, we use the <select> element Any options we want to display within the select element are defined using <option> elements:\n```html\nMercedes\nTesla\nVolvo\nBMW\nMini\nFord\n```\nAll the option elements should have a value attribute (otherwise the text content inside is used) This value will be sent to the server when the form is submitted We can set one of the options to be the default selected element when the browser first renders the form by giving one of the options the selected attribute:\n```html\nMercedes\nTesla\nVolvo\nBMW\nMini\nFord\n```\nWe may also split the list of options into groups using the <optgroup> element The optgroup element takes a label attribute which the browser uses as the label for each group:\nhtml\n<select name=\"fashion\">\n<optgroup label=\"Clothing\">\n<option value=\"t_shirt\">T-Shirts</option>\n<option value=\"sweater\">Sweaters</option>\n<option value=\"coats\">Coats</option>\n</optgroup>\n<optgroup label=\"Foot Wear\">\n<option value=\"sneakers\">Sneakers</option>\n<option value=\"boots\">Boots</option>\n<option value=\"sandals\">Sandals</option>\n</optgroup>\n</select>\nRadio buttons\nSelect dropdowns are great for saving space on the page when we have an extensive list of options we want users to choose from However, when we have a smaller list of 5 or fewer options to choose from, it is often a better user experience to have them displayed on the page instead of hidden behind a dropdown In this case, we can use radio buttons Radio buttons allow us to create multiple options that the user can choose one of",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "55b396a875df97ab42203395c3bfb986",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "space on the page when we have an extensive list of options we want users to choose from However, when we have a smaller list of 5 or fewer options to choose from, it is often a better user experience to have them displayed on the page instead of hidden behind a dropdown In this case, we can use radio buttons Radio buttons allow us to create multiple options that the user can choose one ofTo create radio buttons, we use the ever adaptable input element again with a type attribute of \"radio\":\n```html\nTicket Type\nChild\nAdult\nSenior\n```\nWhen we select one of the radio buttons and then select another, it will deselect the first one Radio buttons know to do this because they have the same name attribute This is how the browser knows these elements are part of the same group of options We can set the default selected radio button by adding the checked attribute to it:\n```html\nTicket Type\nChild\nAdult\nSenior\n```\nCheckboxes\nCheckboxes are similar to radio buttons in that they allow users to choose from a set of predefined options But unlike radio buttons, they allow multiple options to be selected at once To create a checkbox, we use the input element with a type attribute of \"checkbox\":\n```html\nPizza Toppings\nSausage\nOnions\nPepperoni\nMushrooms\n```\nWe can also have a single checkbox when we want users to toggle if they want something to be true or false Like signing up to a newsletter when they create an account for example:\n```html\nSend me the news letter\n```\nWe can set checkboxes to be checked by default on page load by giving them a checked attribute:\n```html\nSend me the news letter\n```\nButtons\nThe button element creates clickable buttons that the user can interact with to submit forms and trigger other actions To create a button, we use the <button> element The content or text we want to have displayed inside the button will go within the opening and closing tags:\nhtml\n<button>Click Me</button>\nThe button element also accepts a type attribute that tells the browser which kind of button it is dealing with There are three types of buttons available to us Submit buttons\nOnce a user is finished filling in a form, they will need a way to submit it There is a specialized button for this; the submit button When a submit button is clicked, it will submit the form it is contained within",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "5151348c977da18d40971536ac0461c7",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "html <button>Click Me</button> The button element also accepts a type attribute that tells the browser which kind of button it is dealing with There are three types of buttons available to us Submit buttons Once a user is finished filling in a form, they will need a way to submit it There is a specialized button for this; the submit button When a submit button is clicked, it will submit the form it is contained withinThe type attribute has a value of submit by default, i e if the type is not specified or the value provided is invalid To create a submit button, we use the button element with a type attribute of \"submit\":\nhtml\n<button type=\"submit\">Submit</button>\nReset button\nA reset button clears all the data the user has entered into the form and sets all the inputs in the form back to what they were initially To create a reset button, we use the button element with a type attribute of \"reset\":\nhtml\n<button type=\"reset\">Reset</button>\nGeneric button\nThe third and final button type is a generic button that can be used for anything It's commonly used with JS for creating interactive UI's To create a generic button, we use the button element with a type attribute of \"button\":\nhtml\n<button type=\"button\">Click to Toggle</button>\nIt is important to remember that a button within a form with the `type` value of submit (which happens to be the default value) will always try to make a new request and submit data back to the server Hence, for buttons that are used within a form for different purposes other than submitting the data, the `type` attribute should always be specified to avoid unwanted effects of submitting a form Organizing form elements\nUsing the correct inputs for the data we want users to enter goes a long way towards making our forms user friendly However, in larger forms, users can easily get overwhelmed and discouraged if there are many inputs to fill in Luckily, HTML provides a couple of elements that make it easy to organize forms into sections that are visually distinct and manageable to digest Fieldset element\nThe fieldset element is a container element that allows us to group related form inputs into one logical unit To create a fieldset, we use the <fieldset> element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "27410f03ffee11867af9743672dfeb95",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "forms user friendly However, in larger forms, users can easily get overwhelmed and discouraged if there are many inputs to fill in Luckily, HTML provides a couple of elements that make it easy to organize forms into sections that are visually distinct and manageable to digest Fieldset element The fieldset element is a container element that allows us to group related form inputs into one logical unit To create a fieldset, we use the <fieldset> elementWhatever form inputs we want to group together go within the opening and closing fieldset tags:\n```html\nFirst Name\nLast Name\n```\nLegend\nThe legend element is used to give field sets a heading or caption so the user can see what a grouping of inputs is for To create a legend, we use the <legend> element with the text we want to display within its opening and closing tags A legend should always come right after an opening fieldset tag:\n```html\nContact Details\nName:\nPhone Number:\nEmail:\nDelivery Details\nStreet Address:\nCity:\nZip Code:\n```\nA common use-case for these elements is using a fieldset to group radio buttons and using a legend to communicate to the user what each of the options is ultimately for:\n```html\nWhat would you like to drink Coffee\nTea\nSoda\n```\nA note on styling forms\nWe will provide resources that go deep into styling forms in the assignment section that comes next However, before we get to the assignment, we should talk about some of the challenges with styling HTML forms and how we can get around them:\nDefault browser styles\nEach browser has its own default styles for form controls, making your forms visually different for users depending on what browser they are using To have a consistent design among all browsers, we have to override these default styles and style them ourselves Tricky and downright impossible to style form controls\nText-based form controls like text, email, password and text areas are reasonably straightforward to style They operate like any other HTML element, and most CSS properties can be used on them Things get more tricky when creating custom styles for radio buttons and checkboxes But there are many guides out there you can use to achieve your desired design, such as this guide on custom checkbox styling There have also been new CSS properties made available in recent times to make styling radio buttons and checkboxes much easier Certain aspects of other elements are downright impossible to style, for example, calendar or date pickers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "b845cf4d5025cf2eadf8a20cc8f7b378",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
    "source_type": "git_repo",
    "title": "Ticket Type",
    "content": "used on them Things get more tricky when creating custom styles for radio buttons and checkboxes But there are many guides out there you can use to achieve your desired design, such as this guide on custom checkbox styling There have also been new CSS properties made available in recent times to make styling radio buttons and checkboxes much easier Certain aspects of other elements are downright impossible to style, for example, calendar or date pickersIf we want custom styles for these, we will have to build custom form controls with JavaScript or use one of the many JavaScript libraries that provide us with ready-made solutions Assignment\n#### Form basics\n1 Read and follow along with [MDN's Introductory Guides to Forms](https://developer mozilla org/en-US/docs/Learn/Forms#introductory_guides) - complete [Your first form](https://developer mozilla org/en-US/docs/Learn/Forms/Your_first_form) and [How to structure a web form](https://developer mozilla org/en-US/docs/Learn/Forms/How_to_structure_a_web_form)\n1 Read and follow along with [MDN's The Different Form Controls Guides](https://developer mozilla org/en-US/docs/Learn/Forms#the_different_form_controls)\n#### Styling forms\n1 Read and follow along with [MDN's Form Styling Tutorials](https://developer mozilla org/en-US/docs/Learn/Forms#form_styling_tutorials)\n1 Read and follow along with [the internetingishard guide to forms](https://internetingishard netlify app/html-and-css/forms/index html)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Explain what the form element is for and what two attributes it should always include Explain what form controls are at a high level What is the name attribute for What are the three most common form controls you can use for allowing users to select predefined options What are the three types of buttons in HTML What are the two most challenging aspects of styling forms Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Web dev's Form Course",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23607,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\forms\\form_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "2aecf4e4afadd6c9105bd6b7dfad3336",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
    "source_type": "git_repo",
    "title": "creating_a_grid",
    "content": "Introduction\nNow that you know what CSS Grid Layout is, you’ll learn how to create your own grid This lesson will cover making a grid container, adding columns and rows, the explicit and implicit concept behind Grid and how to space out grid gaps Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Make a grid container Define grid tracks Explain the difference between an implicit and explicit grid Set gaps between grid cells Setting up a grid\nThis lesson will show you how easy it is to make a grid layout without much work In upcoming lessons, you will find out more about positioning and how to make complex grids, but for now we’ll start with something basic Grid container\nWe can think about CSS Grid in terms of a container and items When you make an element a grid container, it will “contain” the whole grid In CSS, an element is turned into a grid container with the property display: grid or display: inline-grid See the Pen\nMy First Grid | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen In this example, the parent element marked class=\"container\" becomes a grid container and each of the direct child elements below it automatically become grid items What’s easy about CSS Grid is that you don’t have to assign each child element a property Note that only the direct child elements will become grid items here If we had another element as a child under one of these child elements, it would not be a grid item In the example below, the paragraph element is not a grid item:\n```html\nItem 1\nItem 2\nI am not a grid item Item 3\nItem 4\n```\nBut just as you learned in the flexbox lessons, grid items can also be grid containers So you could make grids inside of grids if you wanted Lines and tracks in grids, oh my Since you’re coding along with our example (right ) you will notice it doesn’t look very grid-ish yet A lot of resources on CSS Grid like to show you boxes and outlined grid tables right from the start But if your grid container and grid items don’t have any borders you won't actually see these lines on the page So don’t worry, they’re still there If you inspect these elements on a webpage using developer tools, you will notice grid badges on the grid elements in the code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14814,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "b9d6990f281f474cc12c76f075add533",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
    "source_type": "git_repo",
    "title": "creating_a_grid",
    "content": "it doesn’t look very grid-ish yet A lot of resources on CSS Grid like to show you boxes and outlined grid tables right from the start But if your grid container and grid items don’t have any borders you won't actually see these lines on the page So don’t worry, they’re still there If you inspect these elements on a webpage using developer tools, you will notice grid badges on the grid elements in the codeThe Layout options of the dev tools allows you to select an overlay that can show these invisible lines, tracks and areas of the grid You will read about using a browser’s developer tools in the assignment below and learn more about lines, tracks, and areas in the next lesson Columns and rows\nNow that we have our grid container with several grid items all set up, it’s time to specify our columns and rows This will define the grid track (the space between lines on a grid) So we could set a column track to give us space between our columns and a row track to give us space between our rows We will get into the specifics on tracks and lines in the next lesson, but for now let’s just make some columns and rows The properties grid-template-columns and grid-template-rows make defining column and row tracks easy For this lesson, we’ll stick to defining our columns and rows using pixels In the upcoming lessons, you’ll learn more about defining with percentages and fractional units too Going back to our grid container from above, let’s define two columns and two rows to place our four grid items:\nSee the Pen\nColumns and Rows 1 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen If we want to add more columns or rows to our grid, we can define these values to make another track Let's say we wanted to add a third column to our example:\nSee the Pen\nColumns and Rows 2 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen CSS Grid also includes a shorthand property for defining rows and columns In our previous example we can replace the properties for grid-template-rows and grid-template-columns with the shorthand grid-template property Here we can define our rows and columns all at once For this property, rows are defined before the slash and columns are defined after the slash Let’s keep the same column and row values, but use the shorthand property instead:\n```css\n/ styles css /",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14814,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0c69ed0e624d717d6fdc4616105b1103",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
    "source_type": "git_repo",
    "title": "creating_a_grid",
    "content": "CSS Grid also includes a shorthand property for defining rows and columns In our previous example we can replace the properties for grid-template-rows and grid-template-columns with the shorthand grid-template property Here we can define our rows and columns all at once For this property, rows are defined before the slash and columns are defined after the slash Let’s keep the same column and row values, but use the shorthand property instead: ```css / styles css /container {\ndisplay: grid;\ngrid-template: 50px 50px / 50px 50px 50px;\n}\n```\nColumns and rows don’t have to share all the same values either Let’s change the property values of our columns so that the first column is five times as wide as the others:\nSee the Pen\nColumns and Rows 3 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Explicit vs implicit grid\nLet's go back to our original example of a 2x2 layout for four grid items What happens if we add a fifth item to our container without changing our grid-template-columns or grid-template-rows properties See the Pen\nImplicit Grid | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen You’ll notice our fifth item was placed on the grid and it’s been slotted into a third row we did not define This is because of the implicit grid concept and it’s how CSS Grid is able to automatically place grid items when we haven’t explicitly defined the layout for them When we use the grid-template-columns and grid-template-rows properties, we are explicitly defining grid tracks to lay out our grid items But when the grid needs more tracks for extra content, it will implicitly define new grid tracks Additionally, the size values established from our grid-template-columns or grid-template-rows properties are not carried over into these implicit grid tracks But we can define values for the implicit grid tracks We can set the implicit grid track sizes using the grid-auto-rows and grid-auto-columns properties In this way we can ensure any new tracks the implicit grid makes for extra content are set at values that we defined Let’s say we want any new rows to stay the same value as our explicit row track sizes:\n```css\n/ styles css /",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14814,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ae42d09724e5515a20756bb3aeac1209",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
    "source_type": "git_repo",
    "title": "creating_a_grid",
    "content": "over into these implicit grid tracks But we can define values for the implicit grid tracks We can set the implicit grid track sizes using the grid-auto-rows and grid-auto-columns properties In this way we can ensure any new tracks the implicit grid makes for extra content are set at values that we defined Let’s say we want any new rows to stay the same value as our explicit row track sizes: ```css / styles css /container {\ndisplay: grid;\ngrid-template-columns: 50px 50px;\ngrid-template-rows: 50px 50px;\ngrid-auto-rows: 50px;\n}\n```\nBy default, CSS Grid will add additional content with implicit rows This means the extra elements would keep being added further down the grid in a vertical fashion It would be much less common to want extra content added horizontally along the grid, but that can be set using the grid-auto-flow: column property and those implicit track sizes can be defined with the grid-auto-columns property Gap\nThe gap between grid rows and columns is known as the gutter or alley Gap sizes can be adjusted separately for rows and columns using the column-gap and row-gap properties Furthermore, we can use a shorthand property called gap to set both row-gap and column-gap Before adding our grid gap properties let’s make things a little easier to see without relying on developer tools We’ll go ahead and add a border around our grid items so we can get a better sense of their placement around each other:\nSee the Pen\nGap 1 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Next we’ll use a slight grid column gap to space out our two columns a bit:\nSee the Pen\nGap 2 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Finally we’ll add a lot of gap to our rows to highlight the difference:\nSee the Pen\nGap 3 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen You can also try playing with the shorthand gap to set both the row-gap and column-gap in the above CodePen Wrapping up our first grid\nNow that you’ve made a grid you can start to see how easy it is to control the layout of your elements with CSS Grid You may also realize how CSS Grid can solve common layout problems In the next couple lessons we will cover positioning elements and advanced grid attributes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14814,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "fcc944c97d75477946d51ffc3f776af9",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
    "source_type": "git_repo",
    "title": "creating_a_grid",
    "content": "You can also try playing with the shorthand gap to set both the row-gap and column-gap in the above CodePen Wrapping up our first grid Now that you’ve made a grid you can start to see how easy it is to control the layout of your elements with CSS Grid You may also realize how CSS Grid can solve common layout problems In the next couple lessons we will cover positioning elements and advanced grid attributesBut first, check out the links below that cover making the basics of a grid in more detail Assignment\n- Read Parts I, II and III from [CSS-Tricks Complete Guide to Grid ](https://css-tricks com/snippets/css/complete-guide-grid/)\n- Watch this short [video on implicit vs explicit tracks](https://www youtube com/watch v=8_153Zz4YI8&ab_channel=WesBos) from the Wes Bos CSS Grid course - Look through the developer tools docs on [inspecting CSS Grid in Chrome DevTools](https://developer chrome com/docs/devtools/css/grid/) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How does an HTML element become a grid item What is the space between lines on the grid How do you set gutters (also known as alleys) in the grid Describe what happens when you have more content than defined tracks How could you change the size for those undefined tracks Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The MDN Basic Concepts of grid layout reviews many of the basics and introduces some additional concepts Watch this short video on grid terminology from PeterSommerhoff",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14814,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\creating_a_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e3f13262023b91fad0074f6301c253b7",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "Introduction\nSo far, you've learned how to create a grid, adjust the sizes of the tracks, and position grid elements in specific rows and columns Right now, you have all the tools you need to be able to create any kind of static grid layout, but what do you do when you want your grid to be more responsive, dynamic, or reusable In this lesson, you will learn about some more advanced Grid properties that can help you do this Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Create multiple grid tracks more easily using the repeat function Create grid tracks using fr units instead of an explicit size Set minimum, maximum, and ideal track size boundaries Use auto-fit and auto-fill to create a grid with a dynamic number of rows or columns Use auto-fit/auto-fill along with minmax() to create responsive grids Setup\nWe're going to approach this lesson hands-on Let's set up a grid with five columns and two rows and apply some styling so everything is easy to see See the Pen\nAdvanced Properties | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen In this example, the HTML is pretty straightforward, but let's talk really quick about some of the CSS being used that isn't related to the lesson so you can understand why it is being used grid-item, p, img selectors\nAll the properties here are to make our grid items look a bit nicer They are all relatively straightforward, so no need to dive into specifics grid-container\nFor our container, we are obviously using display: grid to render the container as a CSS Grid But the next property might be unfamiliar to you: resize: both This is a property that allows the user to resize the container by clicking and dragging from the bottom right corner This will be beneficial to us when we start using properties that resize our grid tracks based on the size of the grid Change zoom levels: Make sure to view the CodePen embeds at 0 5x or 0 25x so that there's room to resize the container We use overflow: auto to enable scrolling if we resize the container to be smaller than our grid can accommodate We use the properties gap and padding to establish a \"gutter\" area to be able to visualize the grid items better The border and background-color are included to make the container look nicer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "c1afbfeea22b79ce21816569f1c39ec5",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "zoom levels: Make sure to view the CodePen embeds at 0 5x or 0 25x so that there's room to resize the container We use overflow: auto to enable scrolling if we resize the container to be smaller than our grid can accommodate We use the properties gap and padding to establish a \"gutter\" area to be able to visualize the grid items better The border and background-color are included to make the container look nicercss\ngrid-template-rows: 150px 150px;\ngrid-template-columns: 150px 150px 150px 150px 150px;\nHere is where we want to begin our focus for this lesson In order to make two rows and five columns, we manually define each row and column's track size individually Ugh, so tedious Okay, so maybe it wasn't THAT tedious But in this case, we only made a 2x5 grid, which can hold a total of ten items Imagine using this method of defining every column and row for a grid that can hold hundreds of items Enter, repeat() Repeat\nrepeat() is a CSS function available to the CSS Grid template properties that allows us to define a number of rows or columns and the size we want them to be without having to manually type out each individual track's size For example, in our setup above:\ncss grid-container {\ngrid-template-rows: 150px 150px;\ngrid-template-columns: 150px 150px 150px 150px 150px;\n}\ncan be rewritten as:\ncss grid-container {\ngrid-template-rows: repeat(2, 150px);\ngrid-template-columns: repeat(5, 150px);\n}\nCheck it out for yourself See the Pen\nrepeat | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Fractional units\nNow that we know how to quickly create many grid tracks, it's time to learn how to start making them dynamic Dynamic, in this context means \"flexible\" or \"responsive in some way \" The opposite of dynamic is static, or fixed at a certain defined height, like 150px, which we used in the setup of this sample grid The most basic way to make our grid items dynamic is by using fractional units, also known as fr The fr unit is a way of distributing whatever remaining space is left in the grid",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "a8a4273be2106590025bd0115148aafe",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "start making them dynamic Dynamic, in this context means \"flexible\" or \"responsive in some way \" The opposite of dynamic is static, or fixed at a certain defined height, like 150px, which we used in the setup of this sample grid The most basic way to make our grid items dynamic is by using fractional units, also known as fr The fr unit is a way of distributing whatever remaining space is left in the gridFor example, if we have a four-column grid with a total width of 400px and four grid items each on a column track assigned 1fr as their size, all of the grid items should be given one fraction of that 400px of space, which is 100 pixels Let's take a look at what happens if we give our column and row tracks in the sample grid we created a dynamic width of 1fr instead of a static width of 150px:\nSee the Pen\nfr Unit 1 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Notice how all of our grid items now fill up the entire width and height of the grid Neat, right Now, try resizing that example and see what happens Even cooler We can also tell our grid items to distribute the remaining space disproportionately For example, if we divide the 5 columns up by giving the first two a track size of 2fr and the remaining three a track size of 1fr, the first two tracks will be given twice as much remaining space as the others Compare this example to the previous one:\nSee the Pen\nfr Unit 2 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen In this example, there's a lot going on in our grid-template-columns, but take a minute to understand what is written:\ncss\ngrid-template-columns: repeat(2, 2fr) repeat(3, 1fr);\nWe continue to use the `repeat()` function here, but this could be written the old-fashioned way too The key here is that the first two columns are assigned 2fr units and the remaining three are assigned 1fr This means that as the grid grows and shrinks dynamically, the space will be distributed in different amounts between these columns, specifically, twice as many pixels to the first two columns as the remaining three Notice that when you resize, the grid items grow proportionately to how many fr units they are allocated, as mentioned above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "2006a5da8632c9d82a9bd3d237098f71",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "The key here is that the first two columns are assigned 2fr units and the remaining three are assigned 1fr This means that as the grid grows and shrinks dynamically, the space will be distributed in different amounts between these columns, specifically, twice as many pixels to the first two columns as the remaining three Notice that when you resize, the grid items grow proportionately to how many fr units they are allocated, as mentioned aboveYou can also mix static units (like px) and dynamic units (like fr):\nSee the Pen\nfr and px Units | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen You may have noticed at this point that when you resize the grid as large as possible, there is no limit to how large the grid items will become However, when you resize it as small as possible, there is a distinct \"smallest\" size the grid will allow its items to go In this case, it's the smallest size either the <p> or <img> element can be without overflowing This breakpoint is the item's min-content value This CSS keyword is very useful, but it is beyond the scope of this lesson For more info, check out the docs Minimum and maximum track sizes: min() and max()\nWhen we resize our grid super small, it is reassuring to know that the browser will stop the item from shrinking beyond the min-content value However, we really don't want to rely on that most of the time It's much better for you to explicitly decide as a developer how small and large your content should be, even in the most extreme situations We learned about min() and max() in our previous lesson on CSS functions, but a bit of review can't hurt Both of these functions will return a value based on the arguments you supply them min() will return the smallest of all the values passed in, and max() will return the largest For example, min(100px, 200px) will return a value of 100px every time, while max(100px, 200px) will return a value of 200px every time You can supply as many arguments to these functions as you want:\ncss",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "da61ef0a1931e158998c0c2f4e63c078",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "functions, but a bit of review can't hurt Both of these functions will return a value based on the arguments you supply them min() will return the smallest of all the values passed in, and max() will return the largest For example, min(100px, 200px) will return a value of 100px every time, while max(100px, 200px) will return a value of 200px every time You can supply as many arguments to these functions as you want: cssgrid-container {\ngrid-template-rows: repeat(2, min(100px, 200px, 300px, 400px, 500px));\ngrid-template-columns: repeat(5, max(100px, 200px, 300px, 400px, 500px));\n}\nOf course, it's silly to give these functions static units because the calculation is meaningless: the smallest or largest value will always be returned In the above example, the grid rows will always have a size of 100px (the smallest of the five values) and the grid columns will always have a size of 500px (the largest of the five) But when we provide a dynamic value as one of these arguments, we unlock the real potential of these functions, especially in the context of Grid:\ncss grid-container {\ngrid-template-rows: repeat(2, min(200px, 50%));\ngrid-template-columns: repeat(5, max(120px, 15%));\n}\nIn this case, the grid row size will be calculated from the values 200px and 50% grid container's height In realtime, the browser will compare both of these values and apply whichever is smallest to the size of our grid row Essentially, what this tells this grid is that the track size should be 50% of the grid's total vertical space (because we are defining a row size), unless that number would exceed 200px Essentially, you're setting a max-height for the track Conversely, the grid column size will be calculated based on the larger of the two values 120px and 15% of the grid container's width In doing so, we are essentially setting a minimum width of our grid column size at 120px",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "ecda3e5d4881246324ee5588cb742c0b",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "is that the track size should be 50% of the grid's total vertical space (because we are defining a row size), unless that number would exceed 200px Essentially, you're setting a max-height for the track Conversely, the grid column size will be calculated based on the larger of the two values 120px and 15% of the grid container's width In doing so, we are essentially setting a minimum width of our grid column size at 120pxCheck out the example here, and try clicking and dragging to change the grid's dimensions to see how the grid items respond:\nSee the Pen\nmin and max | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Dynamic minimum and maximum sizes\nminmax()\nminmax() is a CSS function that is specifically used with Grid It can only be used with the following CSS properties:\ngrid-template-columns\ngrid-template-rows\ngrid-auto-columns\ngrid-auto-rows\nIt is a relatively straightforward function that only takes in two arguments:\nThe minimum size the grid track can be\nThe maximum size the grid track can be\nUnlike min() and max(), it can make sense to use static values for both arguments Here is an example of the grid we've been using written with minmax() and some static values:\ncss grid-container {\ngrid-template-rows: repeat(2, 1fr);\ngrid-template-columns: repeat(5, minmax(150px, 200px));\n}\nWith our grid-template-columns set with minmax() values, each grid item's width will grow and shrink with the grid container as it resizes horizontally However, as the grid shrinks, the column tracks will stop shrinking at 150px, and as the grid grows, they will stop growing at 200px Talk about flexibility Check it out for yourself below:\nSee the Pen\nminmax | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen clamp()\nUnlike minmax(), clamp() is a CSS function that can be used anywhere, not just within a grid container As with min() and max(), we learned about it in a previous lesson, but let's do a quick review The syntax is as follows:\nclamp(minimum-size, ideal-size, maximum-size)\nWhat this does is allow our item to resize itself until it reaches one of the minimum or maximum threshold values",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "6ff9bcf2aa60fc3a70d8052e85c9e383",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "minmax | CSS Grid by TheOdinProject (@TheOdinProjectExamples) on CodePen clamp() Unlike minmax(), clamp() is a CSS function that can be used anywhere, not just within a grid container As with min() and max(), we learned about it in a previous lesson, but let's do a quick review The syntax is as follows: clamp(minimum-size, ideal-size, maximum-size) What this does is allow our item to resize itself until it reaches one of the minimum or maximum threshold valuesSince clamp()'s purpose is to create a flexibly sized track with constraints, we want to use a dynamic value for the \"ideal size\" argument, and typically a static size for the minimum and maximum size, although it is possible to use a dynamic value here too Here is a non-grid example We will look back at our grid in a moment:\ncss non-grid-example {\nwidth: clamp(500px, 80%, 1000px);\n}\nThis element, which we can pretend is just a div, will render with a width equal to 80% of its parent's width, unless that number is lower than 500px or higher than 1000px, in which case it will use those numbers as its width Okay, now back to our grid:\ncss grid-container {\ngrid-template-columns: repeat(5, clamp(150px, 20%, 200px));\n}\nSee the Pen\nclamp | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Notice how the tracks stay at 20% of the width of the container until they hit the minimum or maximum thresholds Using clamp() and minmax() are fantastic methods for making grids more responsive while ensuring we don't hit critical breakpoints that make our website look bad This is imperative when using images and elements that may have a tendency to overflow or render in undesirable ways when pushed to extreme sizes auto-fit and auto-fill\nThese two values are actually a part of the repeat() function specification, but they were saved for the end of the lesson because their usefulness is not apparent until after you understand the minmax() function Here's the use case: You want to give your grid a number of columns that is flexible based on the size of the grid For example, if our grid is only 200px wide, we may only want one column If it's 400px wide, we may want two, and so on",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "c43074bac190d3b9d46f6db2f44053ad",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "repeat() function specification, but they were saved for the end of the lesson because their usefulness is not apparent until after you understand the minmax() function Here's the use case: You want to give your grid a number of columns that is flexible based on the size of the grid For example, if our grid is only 200px wide, we may only want one column If it's 400px wide, we may want two, and so onThankfully, auto-fit and auto-fill are here to save the day According to the W3 specification on auto-fill and auto-fit, both of these functions will return \"the largest possible positive integer\" without the grid items overflowing their container Here is an example:\ncss example {\ndisplay: grid;\nwidth: 1000px;\ngrid-template-columns: repeat(auto-fit, 200px);\n}\nFor this grid, we have a set width of 1000px and we are telling it to fill in our columns with tracks of 200px each As long as there are at least five grid items, this will result in a 5-column layout no matter what In this case, auto-fill would actually do the same thing We will get into the difference soon The real magic of auto-fit and auto-fill comes when we incorporate minmax() into the equation With minmax(), we can tell our grid that we want to have as many columns as possible, using the constraints of our minmax() function to determine each column's size, without it overflowing our grid Check out how cool our grid looks when we resize it now css grid-container {\ngrid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n}\nSee the Pen\nautofit 1 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Notice how when we resize, the columns automatically know how many will fit across If you don't think that's cool, you better check your pulse So what's going on here specifically with repeat(auto-fit, minmax(150px, 1fr)); Remember that auto-fit will return the highest positive integer without overflowing the grid So first, the browser has to know how wide our grid is: in this case, it's just the window's width (minus margins) because we didn't explicitly set it For the sake of this example, let's pretend like our window is currently 500px wide",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "53d7bfdc8d6e001a6c7a09a017eff845",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "you don't think that's cool, you better check your pulse So what's going on here specifically with repeat(auto-fit, minmax(150px, 1fr)); Remember that auto-fit will return the highest positive integer without overflowing the grid So first, the browser has to know how wide our grid is: in this case, it's just the window's width (minus margins) because we didn't explicitly set it For the sake of this example, let's pretend like our window is currently 500px wideSecond, the browser needs to know how many grid column tracks could possibly fit in that width To do this, it uses the minimum value in our minmax() function, since that will yield the highest number of items, which is 150px If our window is 500px wide, this means our grid will render 3 columns But wait, there's more Once the browser has determined how many columns we can fit, it then resizes our columns up to the maximum value allowed by our minmax() function In this case, our max size is 1fr, so all three columns will be given an equal allotment of the space available As we resize our window, these calculations happen in realtime and the result is what you see in the above example What about auto-fill In most cases, auto-fill is going to work exactly the same way as auto-fit The difference is only noticeable when there are fewer items than can fill up the entirety of the grid row once When the grid is expanded to a size where another grid item could fit, but there aren't any left, auto-fit will keep the grid items at their max size Using auto-fill, the grid items will snap back down to their min size once the space becomes available to add another grid item, even if there isn't one to be rendered They will continue their pattern of growing to max and snapping back to their min as the grid expands and more room becomes available for new grid tracks To see this in action, look at the following 2 examples, the first with auto-fit and the second with auto-fill and see what happens when you resize the grid horizontally:\nSee the Pen\nautofit 2 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen See the Pen\nautofill | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen And that's about it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "26ebf99368d90452af818b2a4bc3028f",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "back to their min as the grid expands and more room becomes available for new grid tracks To see this in action, look at the following 2 examples, the first with auto-fit and the second with auto-fill and see what happens when you resize the grid horizontally: See the Pen autofit 2 | CSS Grid by TheOdinProject (@TheOdinProjectExamples) on CodePen See the Pen autofill | CSS Grid by TheOdinProject (@TheOdinProjectExamples) on CodePen And that's about itCongratulations, if you've made it this far, you are well on your way to becoming a Grid Master Assignment\n1 Review [Part 4 on Grid Properties](https://css-tricks com/snippets/css/complete-guide-grid/#grid-properties) from CSS-Tricks 1 Do the exercises in our [CSS exercises repository's `intermediate-html-css/advanced-grid` directory](https://github com/TheOdinProject/css-exercises/tree/main/intermediate-html-css/advanced-grid) (remember that the instructions are in the README) in the order:\n- `01-responsive-holy-grail`\n- `02-holy-grail-mockup`\nNote: When doing these exercises, please use all the documentation and resources you need to accomplish them You are *not* intended to have any of this stuff memorized at this point Check the docs, use Google, do what you need to do (besides checking the solutions) to get them done Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you create several grid tracks of the same size without manually typing each one out What is the difference between a static and dynamic size value How can you assign a grid track a flexible value that changes depending on the remaining space available in the grid How can you assign grid tracks an uneven distribution of the remaining space in a grid Which CSS functions will return the smallest or largest value supplied to them Which CSS Grid-only function allows you to supply a minimum and maximum track size that is calculated in realtime Which global CSS function allows you to supply a minimum, ideal, and maximum value that is calculated in realtime What attribute of repeat() can be used to fill in as many grid tracks as possible, given certain constraints What is the difference between auto-fit and auto-fill",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "510b7344cb4138268e0e115374b1cb31",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
    "source_type": "git_repo",
    "title": "advanced_grid_properties",
    "content": "functions will return the smallest or largest value supplied to them Which CSS Grid-only function allows you to supply a minimum and maximum track size that is calculated in realtime Which global CSS function allows you to supply a minimum, ideal, and maximum value that is calculated in realtime What attribute of repeat() can be used to fill in as many grid tracks as possible, given certain constraints What is the difference between auto-fit and auto-fillAdditional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Learn more about the differences between auto-fit and auto-fill If videos are more your speed, check out this video on auto-fit and auto-fill by Kevin Powell This video provides a summary of CSS grid in a concise format Check out this beautiful interactive guide to grid",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26379,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\advanced_grid_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 154,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "f99820bac4cbd46ad14133e0a8597a5b",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\introduction_to_grid.md",
    "source_type": "git_repo",
    "title": "introduction_to_grid",
    "content": "Introduction\nOver the next few lessons we will cover CSS Grid and make page layouts much easier First we’ll take a quick look back at Flexbox (remember Flexbox ) and then learn about Grid The following lessons will show you how to create a grid, position grid items and use some advanced properties Then we will take a deeper look between Flexbox and Grid Ultimately we are working towards building a dashboard project using Grid Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Compare the basics between Flexbox and Grid Describe a situation for using Grid over Flexbox A look back at flex\nIn the Foundations course you learned a lot about Flexbox If you’ve been using Flex here and there along the way, this section will be a quick refresher before we get into Grid If you’re completely lost on Flex, then it might be helpful to go back through the Flex lessons again to get up to speed The Flex lessons covered positioning items along the two flex axes (main and cross) and how to set their flex alignment You also learned how to make your flex items grow, shrink or change their size This is the real beauty of Flexbox as items can, well, “flex” to stretch out or shrink down You’ll remember you can line up a nice row of flex items like this:\nSee the Pen\nSingle Row | CSS Flexbox by TheOdinProject (@TheOdinProjectExamples)\non CodePen Or a column like this:\nSee the Pen\nSingle Column | CSS Flexbox by TheOdinProject (@TheOdinProjectExamples)\non CodePen For one-dimensional layouts, Flex offers a convenient tool without having to rely on floats or CSS hacks to align your items properly For two-dimensional layouts, you learned a little bit about flex-wrap, which allows you to take your flex items and wrap them to the next line This can be done with either a row that wraps to another row, or a column that wraps to another column Remember how much fun you had solving the card layout in this exercise We know that was a frustrating one, but it's part of the point While Flexbox allows you to build a layout of rows and columns together, it isn’t always easy But setting up a two-dimensional layout of cards would be much easier using CSS Grid:\nSee the Pen\n2D Layout | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen What is grid",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7606,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\introduction_to_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c534e24c10c812ddf9e7107ef6583054",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\introduction_to_grid.md",
    "source_type": "git_repo",
    "title": "introduction_to_grid",
    "content": "another column Remember how much fun you had solving the card layout in this exercise We know that was a frustrating one, but it's part of the point While Flexbox allows you to build a layout of rows and columns together, it isn’t always easy But setting up a two-dimensional layout of cards would be much easier using CSS Grid: See the Pen 2D Layout | CSS Grid by TheOdinProject (@TheOdinProjectExamples) on CodePen What is gridAlthough Grid is a newer module to CSS, this layout tool has long been in development Fun fact, CSS co-creator Dr Bert Bos (no relation to Wes Bos) started working on this layout model in 1996 The idea was inspired by the use of grid-like layouts in other forms of media like newspapers and magazines After years of thorough demonstrations and development, CSS Grid was finally introduced to all major browsers in 2017 As shown above, Grid is often praised for easy placement of items in a two-dimensional layout But Grid can be used for one-dimensional layouts too One advantage for developers is if they start off with only one row of items, they can add additional rows later You will notice a lot of similarities between Flex and Grid Both use parent containers with child items They have similar property names for alignment and positioning But you will also come across a lot of differences between the two and opinions on how each module should be used For example, if you’ve been struggling to get your Flex items to all match evenly in size, Grid can make this type of layout much easier When reviewing older resources, keep in mind that differences between Flex and Grid can also change as these modules get updated One of the big highlights for CSS Grid was the use of the gap property, which we will cover in the next lesson This used to only be available to Grid, but is now supported with Flex too While some people thought CSS Grid was here to replace Flexbox, you will learn by the end of these lessons that Grid is just another tool for the bag In fact, not only do each of these modules have their own use cases, but you will also find it helpful to pair Flex and Grid together But we’ll be covering all of that in the concluding lesson First you will learn how to actually make a grid Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7606,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\introduction_to_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ad1ce86dd87a95ab56ca6d7bc105d269",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\introduction_to_grid.md",
    "source_type": "git_repo",
    "title": "introduction_to_grid",
    "content": "of these lessons that Grid is just another tool for the bag In fact, not only do each of these modules have their own use cases, but you will also find it helpful to pair Flex and Grid together But we’ll be covering all of that in the concluding lesson First you will learn how to actually make a grid Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How can you use Flex to make a two-dimensional layout Why was CSS Grid introduced Which CSS layout module would you use to easily make equal sized items in a container Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Watch Flexbox vs CSS Grid — Which is Better for a visual representation of the use cases for Flexbox vs CSS Grid\nRead CSS Tricks' quick take on the differences between flex and grid Check out The Story of CSS Grid",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7606,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\introduction_to_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6e6c23969deaa8e702693bbe915af618",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
    "source_type": "git_repo",
    "title": "living-room {",
    "content": "Introduction\nIn this lesson we will examine the different parts of a grid and explore common properties that can be used to position grid items Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe the differences between tracks, lines, and cells Position items by defining their start and end lines Use shorthand notation Reviewing tracks\nBefore we dive straight into positioning, let's establish some terminology to better understand the different parts of a grid In the previous lesson you learned that when you define a grid using grid-template, you are defining the tracks the grid will have You can think of a grid track as any single row or column on a grid To give an example, if we wanted to create a 3x3 grid with 100 pixel rows and 100 pixel columns, we need to define 3 horizontal tracks with a height of 100 pixels and 3 vertical tracks with a width of 100 pixels:\nSee the Pen\n3x3 Layout | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen You will notice two CSS lines have been commented out in this CodePen Uncomment the property in the first-row class selector to see the grid track between the first and second-row grid lines Next, uncomment the property in the last-column class selector to see the grid track between the third and fourth-column grid lines Lines\nWhenever we create grid tracks, grid lines are created implicitly This is important Grid lines are only created after our grid tracks have been defined We can not explicitly create grid lines Every track has a start line and an end line The lines are numbered from left to right and top to bottom starting at 1 So our 3x3 grid above has vertical lines for columns ranging from 1 to 4 and horizontal lines for rows ranging from 1 to 4 Grid lines are what we use to position grid items We'll get to that in a minute, but first let's take a deeper look at grid lines using our developer tools If you open up developer tools in Chrome, you can navigate to the Layout pane and find the Grid overlay display settings Make sure that show line numbers is enabled Select the correct element from the Grid overlays (e g this might be our div container if you are inspecting our CodePen ) You should now see an overlay of the grid lines Notice that the developer tools also show negative lines opposite from the positive lines",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14542,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "da770be8a8d38fb6a4c9eb24ff359b36",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
    "source_type": "git_repo",
    "title": "living-room {",
    "content": "you open up developer tools in Chrome, you can navigate to the Layout pane and find the Grid overlay display settings Make sure that show line numbers is enabled Select the correct element from the Grid overlays (e g this might be our div container if you are inspecting our CodePen ) You should now see an overlay of the grid lines Notice that the developer tools also show negative lines opposite from the positive linesYou don't have to worry about the negative lines for now, but know that this gives you another option to use when positioning the grid items Cells\nThe space in a grid shared by a single row track and a single column track is called a grid cell You can think of a grid cell like a cell in a spreadsheet: a space defined by a row, column coordinate By default, each child element of a grid container will occupy one cell In the example above, we have 9 cells in our grid (3 rows x 3 columns), each with one automatically positioned child element inside The element marked with the letter \"A\" is occupying a cell that lies in row track 1 (between row grid lines 1 and 2) and column track 1 (between column grid lines 1 and 2) The item marked with the letter \"H\" is in a cell at row track 3 (between row grid lines 3 and 4) and column track 2 (between column grid lines 2 and 3) But what happens if we wanted to change the order of our grid items Or if we want items to occupy more than one cell Positioning\nTo get a feel for how items can be positioned we will create a mock floor plan for an apartment Let's start with a total area of our apartment (the grid container) divided into a 5x5 grid To make this example a little clearer, we'll use a background color to distinguish our container space Note that we're also using display: inline-grid here so that our container does not stretch to take up space the way a block-level box would This will just help us better visualize the space See the Pen\nPositioning 1 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen As it stands this is a pretty sad unit To make it less of an empty box and more of a home we are going to add some items to our grid container that will represent different rooms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14542,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "cd4abe5eeb82efd072264e2518084aea",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
    "source_type": "git_repo",
    "title": "living-room {",
    "content": "that our container does not stretch to take up space the way a block-level box would This will just help us better visualize the space See the Pen Positioning 1 | CSS Grid by TheOdinProject (@TheOdinProjectExamples) on CodePen As it stands this is a pretty sad unit To make it less of an empty box and more of a home we are going to add some items to our grid container that will represent different roomsSee the Pen\nPositioning 2 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Most of our rooms represent a single grid cell But we have given ourselves a large living room (Yay ) We positioned this item using grid-column-start and grid-column-end Their property values represent the column grid lines we wish it to start and end with You will also notice we have commented out property values for this item's grid row positioning Uncomment the grid-row-start and grid-row-end properties to see how our living room can get even bigger by taking up the grid track between the first and third-row grid lines These properties allow us to use our existing grid lines to tell items how many rows and columns each item should span across Take a minute to play around with the property values here If the line numbers are confusing, inspect the container using your dev tools to show the grid overlay Next, we need to use our space more efficiently We will make the rest of our rooms span multiple grid cells and fill out the rest of our apartment See the Pen\nPositioning 3 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Now we have the blueprints for our full apartment If you take a look at the #kitchen selector you will see we used shorthand properties here grid-column is just a combination of grid-column-start and grid-column-end with a slash between the two values And grid-row is the shorthand version for setting an item's row positioning One problem with our floor plan is that the bathroom and kitchen are on opposite ends of the apartment We would save money on the plumbing by placing these two rooms back to back Take a minute now and see if you can change the starting and ending positions for the bathroom, bedroom and closet so that the bathroom is right next to the kitchen You can use either the long or shorthand properties here grid-area\nYou now know how to position your grid items using row and column lines But there are other ways to position items and this is where things can get a little confusing",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14542,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "d59b32db5afff8f7f49a20e2f9b43651",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
    "source_type": "git_repo",
    "title": "living-room {",
    "content": "to back Take a minute now and see if you can change the starting and ending positions for the bathroom, bedroom and closet so that the bathroom is right next to the kitchen You can use either the long or shorthand properties here grid-area You now know how to position your grid items using row and column lines But there are other ways to position items and this is where things can get a little confusingThere is an even shorter shorthand for positioning grid items with start and end lines You can combine grid-row-start / grid-column-start / grid-row-end / grid-column-end into one line using grid-area Our living room above can be written out like this:\n```css\n/ styles css /\nliving-room {\ngrid-area: 1 / 1 / 3 / 6;\n}\n```\nBut grid-area can also refer to a few different things Instead of using the grid lines to position all the items in a grid, we can create a visual layout of the grid in words To do this we give each item on the grid a name using grid-area So our living room can be written just like this:\n```css\n/ styles css /\nliving-room {\ngrid-area: living-room;\n}\n```\nWe could do this to all of our grid items and give each room a grid-area value as a name Then we can map out the whole structure with the grid container using grid-template-areas See the Pen\ngrid-template-areas 1 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen Wow You might want to open up the CodePen browser and make it large enough to really read the grid-template-areas layout line by line But this tool gives us a completely different way to position items We can even use to indicate empty cells Say our apartment might be getting a water heater and washer/dryer We might not be sure of the exact layout but we can visualize some space easily by removing more room in the bathroom and kitchen:\nSee the Pen\ngrid-template-areas 2 | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen So now you know two very different ways of using grid-area on a grid item You might even see the term \"grid area\" refer to a group of cells For example, all the grid cells of the living room together is a grid area The apartment analogy should help A grid item can take up multiple cells forming an area of the grid much like a room with four walls in an apartment",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14542,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "52bcf988d488c65e9c1823d28fa5368a",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
    "source_type": "git_repo",
    "title": "living-room {",
    "content": "(@TheOdinProjectExamples) on CodePen So now you know two very different ways of using grid-area on a grid item You might even see the term \"grid area\" refer to a group of cells For example, all the grid cells of the living room together is a grid area The apartment analogy should help A grid item can take up multiple cells forming an area of the grid much like a room with four walls in an apartmentWrapping up\nAs you go through the assignments you will come across more terminology like span and auto when positioning grid items across tracks There are also properties to justify and align grid items similar to Flexbox The best way to learn all this terminology and how to position items is with lots of practice Assignment\n1 Read MDN's [Line-based Placement with CSS Grid](https://developer mozilla org/en-US/docs/Web/CSS/CSS_Grid_Layout/Line-based_Placement_with_CSS_Grid) 1 Do the exercise in our [CSS exercises repository's `intermediate-html-css/positioning-grid` directory](https://github com/TheOdinProject/css-exercises/tree/main/intermediate-html-css/positioning-grid) (don't forget that the instructions are in the README):\n- `01-basic-holy-grail`\nNote: When doing this exercise, please use all the documentation and resources you need to accomplish it You are *not* intended to have any of this stuff memorized at this point Check the docs, use Google, do what you need to do (besides checking the solutions) to get them done Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Explain the difference between a track and a line What is the smallest unit on a grid What kind of value do we give to the grid-column-start or grid-column-end properties Which property can we use to combine all the start and end values for a grid item Which grid container property can map out a visual structure of grid items Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Play through levels 1 - 17 of CSS Grid Garden to practice positioning items Note the rest of the levels go beyond the scope of this lesson If you want to know more about using grid-template-areas check out this Smashing Magazine article from Rachel Andrew",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14542,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "853af382ea6b355965faea2880e1cc6f",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
    "source_type": "git_repo",
    "title": "living-room {",
    "content": "item Which grid container property can map out a visual structure of grid items Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental Play through levels 1 - 17 of CSS Grid Garden to practice positioning items Note the rest of the levels go beyond the scope of this lesson If you want to know more about using grid-template-areas check out this Smashing Magazine article from Rachel AndrewTo learn more about alignment and centering items read through these MDN Docs on Box Alignment in CSS Grid Layout",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14542,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\positioning_grid_elements.md",
      "source_type": "git_repo"
    },
    "token_count": 106,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "d9b937b7a79b5c141f337bfba01653f6",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\project_admin_dashboard.md",
    "source_type": "git_repo",
    "title": "project_admin_dashboard",
    "content": "Introduction\nNow that you've had plenty of practice using Grid, we are going to build a full dashboard design For this project, use whatever tools you need to get it done, but try to lean on Grid for the majority of the layout work Go back through the lessons or practice assignments if you need a refresher Assignment\n#### Step 1: Set up and planning\n1 Set up your Git repository (refer to past projects if you need a refresher) 1 Set up your HTML and CSS files with some dummy content, just to make sure you have everything linked correctly 1 Download a full-resolution copy of the [project design file](https://cdn statically io/gh/TheOdinProject/curriculum/43cc6ab69fdfbef40d431a65677d2144668930ac/intermediate_html_css/grid/project_admin_dashboard/imgs/dashboard-project png) and get a general idea for how you're going to need to lay things out in your HTML document #### Step 2: Layout\n1 Start by writing out the HTML elements for the sidebar, header and main-content containers 1 In your CSS file, apply Grid properties until you have this basic layout built #### Step 3: Nesting\n1 Taking it one section at a time, begin nesting child elements under the parent elements in the HTML Remember that you can keep making grid containers within grid containers 1 In the sidebar, use more grids to lay out the navigation and branding sections 1 In the header, use more grids to lay out the search bar, user info and buttons 1 For the main-content, use more grids to lay out the projects, announcements and trending items 1 Fill out some dummy content and placeholder images so you can position all of your grid items #### Step 4: Gather assets\n1 Once you have your grid layout complete you can either recreate the dashboard example above or style your own design 1 All of the icons and more can be downloaded as SVGs from [Material Design Icons](https://pictogrammers com/library/mdi/) 1 Choose your own fonts The design example uses `Roboto`, which is available with Google fonts (You may want to review the [More Text Styles Lesson](https://www theodinproject com/lessons/intermediate-html-and-css-more-text-styles) for information about how to include external fonts in your projects) #### Step 5: Some tips 1 When building the layout, apply background colors or borders to your containers to help you visualize your grid 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3439,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\project_admin_dashboard.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "463808bfdb655f42c39f3829670d9ed0",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\project_admin_dashboard.md",
    "source_type": "git_repo",
    "title": "project_admin_dashboard",
    "content": "and more can be downloaded as SVGs from [Material Design Icons](https://pictogrammers com/library/mdi/) 1 Choose your own fonts The design example uses `Roboto`, which is available with Google fonts (You may want to review the [More Text Styles Lesson](https://www theodinproject com/lessons/intermediate-html-and-css-more-text-styles) for information about how to include external fonts in your projects) #### Step 5: Some tips 1 When building the layout, apply background colors or borders to your containers to help you visualize your grid 1It's up to you whether to use pixels, `fr` units or both for your grid tracks 1 This project does not have to be responsive, but if you'd like to you can expand or shrink the project cards section when resizing the browser window 1 You don't have to make a pixel perfect match with the design example Consider this an opportunity to practice your CSS skills with your own designs 1 Don't forget to push your finished dashboard to GitHub Use GitHub Pages to publish it to the world #### Step 6: Section feedback\n1 Before you move on, we would love it if you could [submit your feedback on the Intermediate HTML and CSS course](https://docs google com/forms/d/e/1FAIpQLSf_hNwIjvqcPZyl9Lx41mgJNQKp04qOro03SI8ABw4Zp7U_4w/viewform usp=sf_link)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3439,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\project_admin_dashboard.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ba5b4465bb5c7dbbd60635e1cf5a94e4",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\using_flexbox_and_grid.md",
    "source_type": "git_repo",
    "title": "using_flexbox_and_grid",
    "content": "Introduction\nSome may tell you there is a debate on the use of Grid vs Flexbox and whether or not one is superior to the other The reality is these are complementary tools that can work together, and each has its own place in the world of CSS Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Know when you might want to use Flexbox over Grid Know when you might want to use Grid over Flexbox Know when you might want to use the two together Content first vs layout first design\nA way to decide between Grid and Flexbox is to consider if your design starts from the content, or from the layout In Content First Design, you begin with clarity of how the content should be, and the layout follows This is a great opportunity to use Flexbox Its flexible nature gives you control of the behavior of items through logical rules How they grow, shrink, their ideal size and position in relation to each other, all make the layout dynamic While Flexbox gives you control over its content, the final layout is only a consequence Depending on the dimensions of the flex container, the general layout can change a lot In Layout First Design, you decide how you want the pieces arranged, then fill in the content That is when Grid shines Defining grid row and column tracks gives you full control of layout Content in a grid can only fill the spaces of explicit or implicit tracks So, when you have an idea of how the big picture of a container should look like, Grid is the clear choice Content or Layout First Design do not force us to use either Flexbox or Grid Let's try laying out a one dimensional set of items – a task many reserve for Flexbox – using Grid See the Pen\n1-Dimensional Grid | CSS Grid by TheOdinProject (@TheOdinProjectExamples)\non CodePen It works and looks absolutely beautiful But imagine we would like to move these boxes around in the future Or, for instance, we wanted the third box to stretch in a second row so that the boxes didn't shrink too much to fit in only one Both of these things would be possible in Grid But if controlling the layout isn't our priority, Flexbox is more intuitive and fit for the task Combining flexbox and grid\nIf you have one-dimensional content, Flexbox can make it easier to control how that content is positioned in a Flex container",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6184,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\using_flexbox_and_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "31dc337506d4ad3593a0883e69285d7b",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\using_flexbox_and_grid.md",
    "source_type": "git_repo",
    "title": "using_flexbox_and_grid",
    "content": "instance, we wanted the third box to stretch in a second row so that the boxes didn't shrink too much to fit in only one Both of these things would be possible in Grid But if controlling the layout isn't our priority, Flexbox is more intuitive and fit for the task Combining flexbox and grid If you have one-dimensional content, Flexbox can make it easier to control how that content is positioned in a Flex containerIf, on the other hand, you want to accurately place content on a complex layout in two-dimensions, Grid can be easier to use Say you want your overall layout to be a grid, but you want the grid items to act as flex parents This way, the grid items can be moved around using the precise two-dimensional placement Grid allows for, while also allowing the content inside the grid items to be capable of freely moving around using Flex Check out this example from CSS-Tricks See the Pen\nCombine Grid and Flexbox by TheOdinProject (@TheOdinProjectExamples)\non CodePen Closing opinion\nThis lesson includes recommendations, not the \"right\" or \"wrong\" way of using Flexbox or Grid Ultimately, it comes down to personal preference and what a developer feels is easier for whatever the given task might be At this point you have both of these tools in your toolbox and got a sneak peek at how they can be used together or one in place of the other The best way to learn Flexbox and Grid is to build many projects with both of them and develop your own opinion about which to use in different circumstances Assignment\n1 Read about how [CSS Grid does not replace flexbox](https://css-tricks com/css-grid-replace-flexbox/) 1 This video by Kevin Powell demonstrates [real-world use cases for Grid and Flexbox](https://www youtube com/watch v=3elGSZSWTbM) 1 Read up on [when to use Grid or Flexbox and why](https://webdesign tutsplus com/flexbox-vs-css-grid-which-should-you-use--cms-30184a) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge When might you use Flexbox over Grid When might you use Grid over Flexbox When might you use the two of these tools together",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6184,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\using_flexbox_and_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "86d332441161264895e67decc40343ad",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\grid\\using_flexbox_and_grid.md",
    "source_type": "git_repo",
    "title": "using_flexbox_and_grid",
    "content": "to use Grid or Flexbox and why](https://webdesign tutsplus com/flexbox-vs-css-grid-which-should-you-use--cms-30184a) Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge When might you use Flexbox over Grid When might you use Grid over Flexbox When might you use the two of these tools togetherAdditional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental MDN wrote an in-depth article on the relationship between Grid and other layout methods If you are a visual learner, Flexbox30 is a great resource for quick visual reference",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6184,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\grid\\using_flexbox_and_grid.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7ad6f589d9ff58dadf5ace8872664e1a",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\browser_compatibility.md",
    "source_type": "git_repo",
    "title": "browser_compatibility",
    "content": "Introduction\nAs you continue your web development journey, it is important to keep in mind that the end users of your work might be using a variety of browsers: Chrome, Microsoft Edge, Firefox, and Safari to name a few At the same time, the number of users using mobile operating systems is growing rapidly, therefore you should also consider mobile versions of different browsers Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand browser compatibility and its history Know how new CSS features make their way into browsers Know how to check for compatibility Browser history\nThe history of modern browsing began back in December of 1990 with the release of WorldWideWeb browser It was written by Tim Berners-Lee while working for the European nuclear research agency known as CERN It was later renamed to Nexus, to avoid confusion with the World Wide Web Nexus was the first of its kind, and allowed users to view basic style sheets, read newsgroups, and even had spellcheck It might not seem like a lot today, but at that time it was truly groundbreaking The release of Nexus was just the beginning though, as in the next decade people witnessed the first releases of browsers such as Mosaic Browser, which quickly gained popularity and became the most popular browser on the globe From there, the growth of the World Wide Web exploded with the releases of Opera and Netscape Navigator browsers In 1995 the world got introduced to the first version of Internet Explorer, which became the dominant player in the market At some point, Internet Explorer was used by more than 90% of all users To counter this dominance, Netscape launched what would become Mozilla Foundation which develops and maintains Firefox Soon after that, in 2003, Apple launched Safari, and in 2008, Google launched Chrome You're most likely familiar with most, if not all these names There is a lot of competition among browsers still to this day, even though Chrome (and Chromium) is the dominant player in the market What is browser compatibility Today, it is impossible to imagine the Web without the use of browsers We have witnessed a shift from standalone applications to HTML5 and Progressive Web Apps that allow applications to fully function within a browser For example, Microsoft Word and Excel for the longest time could only be executed via a standalone application Now, you can utilize those applications through any browser without the need to install any files As companies compete for market share, different browsers are using different engines to display information on web pages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8994,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\browser_compatibility.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "db376a7948473b120846ba01858b4d34",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\browser_compatibility.md",
    "source_type": "git_repo",
    "title": "browser_compatibility",
    "content": "browsers We have witnessed a shift from standalone applications to HTML5 and Progressive Web Apps that allow applications to fully function within a browser For example, Microsoft Word and Excel for the longest time could only be executed via a standalone application Now, you can utilize those applications through any browser without the need to install any files As companies compete for market share, different browsers are using different engines to display information on web pagesFor example, Chrome and Chromium utilize Blink, while Safari uses WebKit Because of these differences, your applications may behave differently in the browser Due to Chrome dominance, the vast majority of applications are designed to work smoothly with Chromium, and providing as good a level of performance in other browsers is secondary For your web development projects to have a broader reach, you must make sure that you're testing your web applications against browsers which are most likely to be used by users Chrome, Safari, Firefox, and other Chromium-based browsers (Microsoft Edge, Brave, etc ) are more common among regular users But you may find you need to support less common ones as well depending on the user base or the company you work for For Chromium browsers, if it works in Chrome, it should work in other related browsers as well Browser releases and new CSS features\nW3C World Wide Web Consortium is the authority behind developing web standards to maximize accessibility and consistency of the web experience W3C is also the authority to develop new features in CSS This is a closely collaborative approach with the Web as a community as well as companies developing web browsers When web browsers such as Nexus and Netscape were released, there was no such organization as W3C to help create more compatibility Your application could look and function differently in each browser Even worse, your application could've been completely unusable Web developers had to make specific adjustments for each browser, and not every developer had enough resources to make that work for everyone Today, as standards around the web evolve and change, and web developers begin implementing new features in their codebase, browsers must provide support for those new features If the user experience is impacted by a lack of support in browsers, users might find their way to a competitor When is it safe to use new features As exciting as it is to implement new features, there is a risk of rushing It would not be a positive experience for your users to find that, for example, your application used to work well in Firefox, but due to changes in the codebase it is now unusable in Firefox but works well in Safari",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8994,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\browser_compatibility.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "94f8c8540f24b50e89ad72777ce5929c",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\browser_compatibility.md",
    "source_type": "git_repo",
    "title": "browser_compatibility",
    "content": "of support in browsers, users might find their way to a competitor When is it safe to use new features As exciting as it is to implement new features, there is a risk of rushing It would not be a positive experience for your users to find that, for example, your application used to work well in Firefox, but due to changes in the codebase it is now unusable in Firefox but works well in SafariThankfully, there is a tool that can help you prevent this situation \"Can I Use\" is a great resource to help you validate if new features are supported by browsers It provides statistics on which browsers and platforms are supporting new technologies, and even which versions of those browsers support specific features It is generally good advice to implement new features when they are supported by most common browsers This way you're less likely to encounter an issue that a lot of users will face Mobile browsers\nTraditionally, the Web was desktop computer first The application was successful if it worked well on desktop browsers But as smartphones have become more popular, each year more and more users are using mobile devices as their main Web-facing device In some areas of the world, mobile users are a vast majority Mobile devices mostly consist of smartphones and tablets The most popular mobile operating systems are Android and Apple's iOS As you're developing your applications, you must also consider whether your application should be fully mobile compatible There are a couple of specifics about mobile browsers that you need to keep in mind On iOS and iPadOS, Safari is technically the only supported browser Yes, you can install Chrome or Firefox, and you can even set them as a default, but they are not full browsers They are still using the Safari rendering engine (WebKit) Therefore, for your web application to work for Apple users, you have to ensure support for WebKit and other technologies used in Safari It's important to remember that mobile browsers are not one-to-one with their desktop counterparts A project that works in the desktop version of Safari might still need adjustments to work properly on the mobile version of the same browser Another consideration for mobile browsers is the magnitude of different screen sizes It is virtually impossible to have every physical device available to test, and thankfully browsers provide a way to emulate other devices The important piece to remember is that when, for example, you emulate an iPhone in Chrome, all that you're emulating is the screen size Keep in mind that any specific considerations of the operating system will not be reproducible",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8994,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\browser_compatibility.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ec574b1258d0242248081b2978455006",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\browser_compatibility.md",
    "source_type": "git_repo",
    "title": "browser_compatibility",
    "content": "the same browser Another consideration for mobile browsers is the magnitude of different screen sizes It is virtually impossible to have every physical device available to test, and thankfully browsers provide a way to emulate other devices The important piece to remember is that when, for example, you emulate an iPhone in Chrome, all that you're emulating is the screen size Keep in mind that any specific considerations of the operating system will not be reproducibleWhich means that even though everything functions well in Chrome when emulating a device, it could behave differently on the actual phone or tablet device Assignment\n- Review [Can I Use](https://caniuse com/) Are all technologies you have encountered so far supported by popular browsers - Read this article [about browsers on iOS](https://adactio com/journal/17428) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the most used browser currently What was the original name of the first web browser How are mobile browsers different on Apple mobile operating systems from Android Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read more about the history of web browsers Take a look at \"How Web Works\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8994,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\browser_compatibility.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0af2b9446f19d9a0d93f7e47b29451d6",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_functions.md",
    "source_type": "git_repo",
    "title": "iconHolder {",
    "content": "Introduction\nYou may have noticed that some property values you’ve worked with in CSS have a slightly different syntax When the value is a word followed by a pair of parentheses () containing information between them - as in background-color: rgb(0, 0, 0) - you’re using CSS functions In this lesson, we’ll cover the basics of what a function is and some common ways they’re used in CSS Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Recognize the basic parts of a CSS function Learn about the calc(), min(), max(), and clamp() functions and how to use each one What is a function and how are they used in CSS Similar to programming languages, functions in CSS are reusable pieces of code which perform specific tasks Functions are passed “arguments” between parentheses, each of which is used by the function in a specific way Some common examples are:\ncss\ncolor: rgb(0, 42, 255);\nbackground: linear-gradient(90deg, blue, red);\nHere, the value of color is the function rgb(), which accepts arguments in the form of numbers It processes those numbers to calculate the rgb color corresponding to the three values given Similarly, the background property has a value of linear-gradient(90deg, blue, red) linear-gradient generates a gradient image using the parameters it's been given It needs at least two color arguments: colors to transition between Additionally, you can set the angle of direction of the gradient line (like we've done in the example), add more color values, etc Unlike programming languages you’ll use in TOP, CSS does not allow us to create our own functions Instead, the language comes bundled with a list of premade functions that will help you solve the most common styling problems Besides defining colors, there are several CSS functions that are useful when designing a website’s layout and sizing These become important when thinking about responsive design Let’s go over a few of these functions: calc(), min(), max(), and clamp() calc()\nThe most powerful use cases for calc include:\nMixing units\nThe ability to nest calc( calc () - calc () )\nSee the Pen\ncalc() | CSS Functions by TheOdinProject (@TheOdinProjectExamples)\non CodePen",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8971,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_functions.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ccd0e377e698ee617c8883f2052aad17",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_functions.md",
    "source_type": "git_repo",
    "title": "iconHolder {",
    "content": "common styling problems Besides defining colors, there are several CSS functions that are useful when designing a website’s layout and sizing These become important when thinking about responsive design Let’s go over a few of these functions: calc(), min(), max(), and clamp() calc() The most powerful use cases for calc include: Mixing units The ability to nest calc( calc () - calc () ) See the Pen calc() | CSS Functions by TheOdinProject (@TheOdinProjectExamples) on CodePenTake a look at how calc() is being used here:\ncss\n:root {\n--header: 3rem;\n--footer: 40px;\n--main: calc(100vh - calc(var(--header) + var(--footer)));\n}\n--header, --footer, and --main are all examples of CSS variables You will be learning about these in the next lesson Setting main to equal the outcome of: 100vh - (3rem + 40px) To put it another way:  main = 100vh - (header + footer) calc() is handling the math for us even though we are mixing vh, rem and px units Combined with CSS variables, calc() can save us from the headache of repeating CSS rules You should be able to grasp how calc() is used in the above CodePen embed We encourage you to play around with different units and sizes of the elements to see what results you get before moving on The above is just an example of how `calc()` can affect a layout, but keep in mind that `calc()` is likely not the best way to go about it We will talk more about layouts in future lessons min()\nmin() does an excellent job of helping us create responsive websites Take a look at this example:\nSee the Pen\nmin() | CSS Functions by TheOdinProject (@TheOdinProjectExamples)\non CodePen ```css\niconHolder {\nwidth: min(150px, 100%);\nheight: min(150px, 100%);\nbox-sizing: border-box;\nborder: 6px solid blue;\n}\n```\nFocus on this line width: min(150px, 100%); we can make several observations:\nIf there are 150px available to the image, it will take up all 150px If there are not 150px available, the image will switch to 100% of the parent's width",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8971,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_functions.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e756f71b01e7eb587a963b46f5c8a6c6",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_functions.md",
    "source_type": "git_repo",
    "title": "iconHolder {",
    "content": "a look at this example: See the Pen min() | CSS Functions by TheOdinProject (@TheOdinProjectExamples) on CodePen ```css iconHolder { width: min(150px, 100%); height: min(150px, 100%); box-sizing: border-box; border: 6px solid blue; } ``` Focus on this line width: min(150px, 100%); we can make several observations: If there are 150px available to the image, it will take up all 150px If there are not 150px available, the image will switch to 100% of the parent's widthIn the first case min() selects 150px, since 150px is the smaller (the minimum) between 150px and 100% of the parent's width; in the second, it chooses 100% min() behaves as a boundary for the maximum allowed value, which in this example is 150px You are able to do basic math inside a min ( ) => for example: width: min(80ch, 100vw - 2rem);\nmax()\nMax works the same way as min, only in reverse It will select the largest possible value from within the parentheses You can think of max() as ensuring a minimum allowed value for a property Consider the following property of a given element:\ncss\nwidth: max(100px, 4em, 50%);\nFrom this list of given sizes, max() will select the largest one As long as 4em or 50% result in lengths longer than 100px, max() will select (the bigger) one of them If they are smaller than 100px (maybe as a cause of user's font size preferences, or their browser's window size or zoom level), then 100px will win out as the largest You can think of 100px in this example as a guard value: width here won't ever be set to less than 100px The max function is most useful when the viewing window is either exceptionally small, or the user increases the content size by using the browser’s zoom feature You may not find a lot of use for max at first, but it is a good tool to be aware of for projects where accessibility is important clamp()\nclamp() is a great way to make elements fluid and responsive",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8971,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_functions.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "981fb1e15d8a162ba85c5f8bf51ed8da",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_functions.md",
    "source_type": "git_repo",
    "title": "iconHolder {",
    "content": "here won't ever be set to less than 100px The max function is most useful when the viewing window is either exceptionally small, or the user increases the content size by using the browser’s zoom feature You may not find a lot of use for max at first, but it is a good tool to be aware of for projects where accessibility is important clamp() clamp() is a great way to make elements fluid and responsiveclamp() takes 3 values:\ncss\nh1 {\nfont-size: clamp(320px, 80vw, 60rem);\n}\nthe smallest value (320px)\nthe ideal value (80vw)\nthe largest value (60rem)\nThe clamp() CSS function uses these values to set the smallest value, ideal value and largest value In the above example, this would mean the smallest acceptable font-size would be 320px and the largest would be 60rem The ideal font-size would be 80vw Assignment\n1 Take a look at the [complete list of CSS functions](https://developer mozilla org/en-US/docs/Web/CSS/CSS_Functions) and how they are used so you have an idea of what is possible 1 Have a more in-depth look at the [`min`, `max` and `clamp` CSS functions](https://web dev/min-max-clamp/) in action Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the four CSS math functions we covered above How do we use CSS math functions in our CSS How can CSS functions help make websites and applications more responsive Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Steve Griffith's video on CSS Math functions gives a good visual overview of these functions Here are some specific use cases for min, max, clamp and calc, including color palette generation, background size responsiveness, and accessibility settings Ahmad Shadeed writes about more real world use cases for CSS Math functions with more detailed explanations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8971,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_functions.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e9100784fa4ebb94a761fe6040bc7235",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
    "source_type": "git_repo",
    "title": "advanced_selectors",
    "content": "Introduction\nBy now you should be comfortable with basic CSS selectors and have no trouble grabbing things by their type, class or ID But to be a real CSS surgeon, sometimes you need more specialized tools In this lesson we'll look at advanced CSS selectors and show you how to target elements in a more specific and finely grained way These selectors can be especially useful when you can't (or don't want to) change your HTML markup There are a lot of advanced selectors, so going through every single one is outside the scope of this lesson However, we'll go through some of the most useful and common ones, as well as arm you with the concepts and vocabulary to learn more on your own As always feel free to open up your code editor and run your own experiments with these selectors - practice makes perfect Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand how to use parent and sibling selectors Recognize the difference between pseudo classes and pseudo elements Learn about some of the most useful and common pseudo elements and pseudo classes Learn about the different ways to select an attribute or its parts Child and sibling combinators\nLet's have a look at some more ways we can access different elements without referring to their classes Here are three new selectors to do just that > - the child combinator\n+ - the adjacent sibling combinator\n~ - the general sibling combinator\nWe'll tackle some practical examples using this sample markup ```html\n```\nBy now, you should be pretty comfortable writing rules using the descendant combinator you learned about in Intro to CSS For instance, if we wanted to select all the child and grand-child divs inside of main, we could write:\ncss\nmain div {\n/* Our cool CSS */\n}\nBut what if we wanted to be more specific and select only the child or grand-child divs That's where the child combinator > comes in handy Unlike the descendant combinator, it will only select direct children ```css\n/ The divs with the class \"child\" will get selected by this /\nmain > div {\n/ Our cool CSS /\n}\n/ The divs with the class \"grand-child\" will get selected by this /\nmain > div > div {\n/ More cool CSS /\n}\n```\nPhrased another way, the child selector will select an element that is one level of indentation down",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17491,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "b8313565e9f1953d7406281f15369aa0",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
    "source_type": "git_repo",
    "title": "advanced_selectors",
    "content": "the descendant combinator, it will only select direct children ```css / The divs with the class \"child\" will get selected by this / main > div { / Our cool CSS / } / The divs with the class \"grand-child\" will get selected by this / main > div > div { / More cool CSS / } ``` Phrased another way, the child selector will select an element that is one level of indentation downIn order to select an element that is adjacent (immediately following) to our target, or on the same level of indentation, we can use the adjacent sibling combinator + ```css\n/ Only the div with the classes \"child group2\" will get selected by this / group1 + div {\n/ Our cool CSS /\n}\n/ Only the div with the classes \"child group3\" will get selected by this / group1 + div + div {\n/ More cool CSS /\n}\n```\nFinally, if we want to select all of the siblings following an element and not just the first one, we can use the general sibling combinator ~ css\n/* All of group1's div siblings - in this case the 2nd and 3rd child divs, will get selected by this */ group1 ~ div {\n/* Our cool CSS */\n}\nJust like the descendant combinator, these selectors don't have any special specificity rules - their specificity score will just be made up of their component parts This MDN article on combinators provides a good overview if you want to learn more about them You don't have to do the \"Test your skills \" at the bottom of the article as it covers concepts not yet discussed Don't worry, more on those later in the lesson Pseudo-selectors\nBefore diving into pseudo-selectors, a quick note on the difference between pseudo-classes and pseudo-elements Pseudo-class selectors are prefixed with a single colon and are a different way to target elements that already exist in HTML Pseudo-elements are prefixed with two colons and are used to target elements that don't normally exist in the markup If that doesn't make sense straight away, don't worry - we'll explore some examples below Pseudo-classes\nPseudo-classes offer us different ways to target elements in our HTML There are quite a lot of them, and they come in a couple of different flavors Some are based on their position or structure within the HTML",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17491,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "cb70bf515fffef05ce3a1fc5f33142dd",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
    "source_type": "git_repo",
    "title": "advanced_selectors",
    "content": "exist in HTML Pseudo-elements are prefixed with two colons and are used to target elements that don't normally exist in the markup If that doesn't make sense straight away, don't worry - we'll explore some examples below Pseudo-classes Pseudo-classes offer us different ways to target elements in our HTML There are quite a lot of them, and they come in a couple of different flavors Some are based on their position or structure within the HTMLOthers are based on the state of a particular element, or how the user is currently interacting with it There are too many to cover in detail here but we'll have a look at some of the most useful ones Pseudo-classes share the same specificity as regular classes (0, 0, 1, 0) Just like regular classes, most can be chained together The (0,0,1,0) above is the notation for calculating specificity To find out more about how it works, glance over the \"Calculating CSS Specificity Value\" section from this [article on CSS Specificity](https://css-tricks com/specifics-on-css-specificity/) As always don't forget to check MDN's docs on pseudo-classes to see a complete picture of what's available Dynamic and user action pseudo-classes\nThese types of useful pseudo-classes can make your page feel much more dynamic and interactive :focus applies to an element that is currently selected by the user either through selecting it with their cursor or using their keyboard :hover will affect anything under the user's mouse pointer It can be used to give extra oomph to buttons and links to highlight that they're interactable, or to trigger a drop-down menu :active applies to elements that are currently being clicked, and is especially useful for giving your user feedback that their action had an effect This is a great one to give your buttons and other interactive elements more 'tactile' feedback Have you ever wondered why links are blue but turn purple when clicked in unstyled HTML It's because browsers implement that styling by default To implement your own custom styling for links, take advantage of the :link and :visited pseudo-classes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17491,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "6c3409dd7f55843d3bb5f8215495b18f",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
    "source_type": "git_repo",
    "title": "advanced_selectors",
    "content": "that are currently being clicked, and is especially useful for giving your user feedback that their action had an effect This is a great one to give your buttons and other interactive elements more 'tactile' feedback Have you ever wondered why links are blue but turn purple when clicked in unstyled HTML It's because browsers implement that styling by default To implement your own custom styling for links, take advantage of the :link and :visited pseudo-classesA simplified version of default browser styling might look something like this:\n```css\n/ This rule will apply to all links /\na {\ntext-decoration: underline;\n}\n/ This will apply to unvisited links /\na:link {\ncolor: blue;\n}\n/ And you guessed it, this applies to all links the user has clicked on /\na:visited {\ncolor: purple;\n}\n```\nStructural pseudo-classes\nStructural pseudo-classes are a powerful way to select elements based on their position within the DOM :root is a special class that represents the very top level of your document - the one element that has no parents Generally when working with the web, this is equivalent to the html element, but there are a few subtle differences between :root and html :root is generally the place where you will place your 'global' CSS rules that you want available everywhere - such as your custom properties and CSS variables, or rules such as box-sizing: border-box; :first-child and :last-child will match elements that are the first or last sibling Similarly, :empty will match elements that have no children at all, and :only-child will match elements that don't have any siblings For a more dynamic approach we can use :nth-child This is a flexible pseudo-class with a few different uses ```css myList:nth-child(5) {/ Selects the 5th element with class myList /} myList:nth-child(3n) { / Selects every 3rd element with class myList /} myList:nth-child(3n + 3) { / Selects every 3rd element with class myList, beginning with the 3rd /} myList:nth-child(even) {/ Selects every even element with class myList /}\n```\nPseudo-elements\nWhile pseudo-classes give us an alternative way to interact with our HTML elements based on their state or structure, pseudo-elements are more abstract They allow us to affect parts of our HTML that aren't elements at all",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17491,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "e4f1c5f7ca9c40babd25e6386ee873ef",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
    "source_type": "git_repo",
    "title": "advanced_selectors",
    "content": "{ / Selects every 3rd element with class myList /} myList:nth-child(3n + 3) { / Selects every 3rd element with class myList, beginning with the 3rd /} myList:nth-child(even) {/ Selects every even element with class myList /} ``` Pseudo-elements While pseudo-classes give us an alternative way to interact with our HTML elements based on their state or structure, pseudo-elements are more abstract They allow us to affect parts of our HTML that aren't elements at allThese special elements share the same specificity as regular elements (0, 0, 0, 1) There are a number of useful pseudo-elements that can be utilized in any number of creative ways ::marker allows you to customize the styling of your <li> elements' bullets or numbers ::first-letter and ::first-line allow you to (you guessed it ) give special styling to the first letter or line of some text ::selection allows you to change the highlighting when a user selects text on the page ::before and ::after allow us to add extra elements onto the page with CSS, instead of HTML Using it to decorate text in various ways is one common use case ```html\nLet's emojifythis span ```\nUsing these pseudo-elements this way would give us this result:\nLet's 😎 😄 🤓 emojify 🤓 😄 😎 this span There are lots more Have a quick browse through the pseudo-element docs to see a complete list of what's possible Attribute selectors\nThe last tool we're going to add to the box is attribute selectors Recall that an attribute is anything in the opening tag of an HTML element - such as src='picture jpg' or href=\"www theodinproject com\" Since we write our own values for attributes, we need a slightly more flexible system to be able to target specific values Attribute selectors have the same specificity as classes and pseudo-classes (0, 0, 1, 0) Let's look at some examples for basic usage [attribute] - This general selector will select anything where the given attribute exists Its value doesn't matter selector[attribute] - Optionally we can combine our attribute selectors with other types of selectors, such as class or element selectors [attribute=\"value\"] - To get really specific, we can use = to match a specific attribute with a specific value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17491,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "14c168802bbe2f6d728c3d3cb2590fd8",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
    "source_type": "git_repo",
    "title": "advanced_selectors",
    "content": "have the same specificity as classes and pseudo-classes (0, 0, 1, 0) Let's look at some examples for basic usage [attribute] - This general selector will select anything where the given attribute exists Its value doesn't matter selector[attribute] - Optionally we can combine our attribute selectors with other types of selectors, such as class or element selectors [attribute=\"value\"] - To get really specific, we can use = to match a specific attribute with a specific value```css\n[src] {\n/ This will target any element that has a src attribute /\n}\nimg[src] {\n/ This will only target img elements that have a src attribute /\n}\nimg[src=\"puppy jpg\"] {\n/ This will target img elements with a src attribute that is exactly \"puppy jpg\" /\n}\n```\nSometimes we need to be more general in how we access these attributes For example, perhaps we're only interested in img elements where the src attribute's value ends in jpg For cases like this we have some attribute selectors that allow us to match a part of the attribute's value If you've ever come across regular expressions before, these attributes use a similar syntax [attribute^=\"value\"] - ^= Will match strings from the start [attribute$=\"value\"] - $= Will match strings from the end [attribute*=\"value\"] - *= The wildcard selector will match anywhere inside the string ```css\n[class^='aus'] {\n/ Classes are attributes too This will target any class that begins with 'aus':\nclass='austria'\nclass='australia'\n/\n}\n[src$=' jpg'] {\n/ This will target any src attribute that ends in ' jpg':\nsrc='puppy jpg'\nsrc='kitten jpg'\n/\n}\n[for='ill'] {\n/ This will target any for attribute that has 'ill' anywhere inside it:\nfor=\"bill\"\nfor=\"jill\"\nfor=\"silly\"\nfor=\"ill\"\n*/\n}\n```\nTo see what other things you can achieve with attribute selectors, such as searching case insensitivity, or sub-strings separated by hyphens, have a browse through MDN's docs on attribute selectors Assignment\n1 Complete [CSS Diner](https://flukeout github io/) You should be familiar with most of the content in the first couple of exercises, but practice and review never hurt Don't forget to read the examples and explanations on the right 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17491,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "994697c35ab5bba77647585083b993a2",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
    "source_type": "git_repo",
    "title": "advanced_selectors",
    "content": "for=\"jill\" for=\"silly\" for=\"ill\" */ } ``` To see what other things you can achieve with attribute selectors, such as searching case insensitivity, or sub-strings separated by hyphens, have a browse through MDN's docs on attribute selectors Assignment 1 Complete [CSS Diner](https://flukeout github io/) You should be familiar with most of the content in the first couple of exercises, but practice and review never hurt Don't forget to read the examples and explanations on the right 1Read [Shay Howe's article on Complex Selectors](https://learn shayhowe com/advanced-html-css/complex-selectors/) This covers most of the content of this lesson in a bit more detail As stated in their article, they sometimes use a single colon instead of a double one for pseudo-elements Please keep in mind that the double colon is now the standard 1 Do this [Selectors Assessment](https://developer mozilla org/en-US/docs/Learn_web_development/Core/Styling_basics/Basic_selectors/Selectors_Tasks) from MDN It'd help you put your newly learned knowledge of selectors to practice Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between the child combinator and the descendant combinator How does the syntax of pseudo-classes and pseudo-elements differ Do pseudo-classes exist somewhere in HTML Do pseudo-elements Name two ways you could select every second child of an element, starting with the first What is the difference between div:first-child and div:last-child What will each select What selector would you use to style a button a user is currently hovering over How about one that is currently being clicked on How could you select all input elements with a type of text How could you select all classes that begin with thunder Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Kevin Powell has a variety of videos on several of these topics if you'd like a deeper dive The CSS Tricks Almanac has a great reference for all pseudo-elements and selectors It includes examples, extra resources and browser support charts W3 Schools also has a solid, more concise reference list Includes an interactive selector tool if you'd like to play around with some hands-on examples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17491,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "10590373e20de1782d77bf35adab513c",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
    "source_type": "git_repo",
    "title": "advanced_selectors",
    "content": "links to related content It isn't required, so consider it supplemental Kevin Powell has a variety of videos on several of these topics if you'd like a deeper dive The CSS Tricks Almanac has a great reference for all pseudo-elements and selectors It includes examples, extra resources and browser support charts W3 Schools also has a solid, more concise reference list Includes an interactive selector tool if you'd like to play around with some hands-on examplesThe Free Code Camp Selector Cheat Sheet has a solid summary of some of the most common selectors A nice concise article on the differences between pseudo-classes and pseudo-elements Also provides a solid summary of the different kinds of selectors Smashing Magazine on Taming Advanced CSS Selectors\nCSS Tricks on Attribute Selectors will help if you need a deeper look at attributes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17491,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\advanced_selectors.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "5043d82e5ddc7c6ccf1016d09e4361bf",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_units.md",
    "source_type": "git_repo",
    "title": "css_units",
    "content": "Introduction\nThere are many different units that you can use to define sizes in CSS This lesson will introduce the most important to you, and show you where to learn about the rest of them Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You'll learn the difference between relative and absolute units You'll learn when it's appropriate to use the different units Absolute units\nAbsolute units are those that are always the same in any context px is an absolute unit because the size of a pixel doesn't change relative to anything else on the page In fact, px is the only absolute unit you should be using for web projects The rest of them make more sense in a print setting because they are related to physical units such as in (inch) and cm (centimeter) Relative units\nRelative units are units that can change based on their context There are several of them that you are likely to encounter and want to use em and rem\nem and rem both refer to a font size, though they are often used to define other sizes in CSS You'll see both of them often so we're going to explain both, but as a rule-of-thumb, prefer rem 1em is the font-size of an element (or the element's parent if you're using it to set font-size) So, for example, if an element's font-size is 16px, then setting its width to 4em would make its width 64px (16 * 4 == 64) 1rem is the font-size of the root element (either :root or html) The math works the same with rem as it did with em, but without the added complexity of keeping track of the parent's font size Relying on em could mean that a particular size could change if the context changes, which is very likely not the behavior you want Using a relative size like rem to define font sizes across your website is recommended Many browsers allow users to change the base font-size to increase readability If at all possible, it is advisable to respect a user's wishes regarding font size You'll learn more about this from the reading assignments Viewport units\nThe units vh and vw relate to the size of the viewport Specifically, 1vh is equal to 1% of the viewport height and 1vw is equal to 1% of the viewport width",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4136,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_units.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fc11393d9057522fc4fcfa9a0d9249fe",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_units.md",
    "source_type": "git_repo",
    "title": "css_units",
    "content": "sizes across your website is recommended Many browsers allow users to change the base font-size to increase readability If at all possible, it is advisable to respect a user's wishes regarding font size You'll learn more about this from the reading assignments Viewport units The units vh and vw relate to the size of the viewport Specifically, 1vh is equal to 1% of the viewport height and 1vw is equal to 1% of the viewport widthThese can be useful any time you want something to be sized relative to the viewport, examples including full-height heroes, full-screen app-like interfaces Assignment\n1 [CSS values and units](https://developer mozilla org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units) covers all the available units 1 The article [CSS units](https://codyloyd com/2021/css-units/) goes in depth on how and when you might want to use `em`, `rem`, or `px` 1 [Fun with Viewport Units](https://css-tricks com/fun-viewport-units/) demonstrates some interesting things you can do with `vh` and `vw` Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why would you want to use em or rem for font-size instead of px What are some instances where you might want to use vh and vw What are some instances where you might want to use px instead of a relative unit Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Watch are you using the right CSS unit if you'd like to learn Kevin Powells general rules of thumb when it comes to choosing the correct CSS units for different situations Watch Learn CSS Units & When To Use Them from Slaying The Dragon if you would like to learn best practices of basic units mentioned in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4136,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\css_units.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8c1c686eef0cf89f022c7d8f45f8ee35",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
    "source_type": "git_repo",
    "title": "custom_properties",
    "content": "Introduction\nCustom properties (also known as CSS variables) can be a really useful and powerful tool when writing our CSS files In short, they allow us to reference a CSS value however many times we want throughout a file By using custom properties, instead of having to update every single instance of a specific value (\"This shade of red is too light, let's change the shade on all seven of these selectors\"), we only need to update a single instance: the custom property itself Not only that, but custom properties can help us keep colors consistent throughout a project, something that will be really helpful as projects get larger We can even redefine custom properties under different contexts, which is incredibly useful for creating themes, such as the dark and light themes you see on many websites these days Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to declare custom properties How to use a custom property in a rule declaration The scope of custom properties The root selector Using media queries Using custom properties\nThe syntax for declaring and accessing a custom property is not too different from how we write normal rule declarations:\n```css error-modal {\n--color-error-text: red;\n--modal-border: 1px solid black;\n--modal-font-size: calc(2rem + 5vw);\ncolor: var(--color-error-text);\nborder: var(--modal-border);\nfont-size: var(--modal-font-size);\n}\n```\nThat's it First, we declare our custom property with a double hyphen followed by a case-sensitive, hyphen-separated property name (color-error-text wouldn't be the same as Color-Error-Text) which can be whatever name we want The use of Kebab case (single hyphens to separate words) is very important here because spaces are not valid (--color error text would not work) Then we can store any valid CSS value in our newly declared custom property, whether it be a color value, shorthand values, or even a more complex function, just to give you a few examples When we want to access a custom property, we use the var() function as the value of a CSS property, and then place our custom property inside of the parenthesis (including the double hyphen at the beginning) Fallback values\nThe var() function actually accepts two parameters The first parameter we've already gone over, which is the custom property we want to assign The second parameter is an optional fallback value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11260,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "b023230b8e69a48c7b6a4880b2b487c6",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
    "source_type": "git_repo",
    "title": "custom_properties",
    "content": "to give you a few examples When we want to access a custom property, we use the var() function as the value of a CSS property, and then place our custom property inside of the parenthesis (including the double hyphen at the beginning) Fallback values The var() function actually accepts two parameters The first parameter we've already gone over, which is the custom property we want to assign The second parameter is an optional fallback valueWhen a fallback value is provided in addition to a custom property, the fallback value will be used if the custom property is invalid or hasn't been declared yet We can even pass in another custom property as a fallback, which can have its own fallback value as well ```css fallback {\n--color-text: white;\nbackground-color: var(--undeclared-property, black);\ncolor: var(--undeclared-again, var(--color-text, yellow));\n}\n```\nIn the above example, our background-color property would have a value of black and our color property would have a value of white If the --color-text custom property was invalid or didn't exist, the fallback to our fallback would take over and the color property would have a value of yellow Scope\nIn the first example above, you may have noticed that we declared and then accessed our custom properties within the same declaration block That's because the scope of a custom property is determined by the selector This scope includes the selector the custom property was declared for as well as any descendants of that selector If you're familiar with how scope works in JavaScript, this sort of behavior should feel a little similar In the example below, only the element with the cool-paragraph class would get styled with a red background since it's a descendant of the element where our custom property is declared ```html\nCheck out my cool, red background I'm not in scope so I'm not cool ```\n```css cool-div {\n--main-bg: red;\n} cool-paragraph {\nbackground-color: var(--main-bg);\n} boring-paragraph {\nbackground-color: var(--main-bg);\n}\n```\nThe :root selector\nWhile there may be times where you will want to limit the scope of a custom property, you may want to be able to use other custom properties on many, unrelated selectors One workaround would be declaring the same custom property on a bunch of selectors, but that defeats one of the purposes of using custom properties in the first place (the ease of changing multiple instances of a value at once)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11260,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "add0ee2846a550a1f029ebfaae5c66ac",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
    "source_type": "git_repo",
    "title": "custom_properties",
    "content": "``` The :root selector While there may be times where you will want to limit the scope of a custom property, you may want to be able to use other custom properties on many, unrelated selectors One workaround would be declaring the same custom property on a bunch of selectors, but that defeats one of the purposes of using custom properties in the first place (the ease of changing multiple instances of a value at once)A better solution is declaring those custom properties on the :root selector, which is essentially the same thing as the html selector except it has a higher specificity ```html\nLorem ipsum dolor sit amet Lorem ipsum dolor sit amet ```\n```css\n:root {\n--main-color: red;\n} cool-paragraph {\ncolor: var(--main-color);\n} exciting-paragraph {\nbackground-color: var(--main-color);\n}\n```\nBy declaring our custom property on the :root selector in the example above, we can access it on any other valid selector within our CSS file, since any other selector would be considered a descendant of the :root selector Creating themes with custom properties\nBeyond allowing us to access custom properties more globally, the :root selector gives us one way to add themes to our pages:\nSee the Pen\nTheme Toggle | CSS Custom Properties by TheOdinProject (@TheOdinProjectExamples)\non CodePen First, since we don’t have direct access to the root element in the HTML tab on codepen, we’ve applied a default class of dark using the settings menu Feel free to open the pen and change this setting to see how it behaves Next in our CSS we created two scopes for our custom properties on the :root selector, one for when our html (or root) element has a class of dark and another for when it has a class of light Our other selectors then use the values of any custom properties depending on which class is currently present on our root element Media queries\nGiving users the ability to toggle a theme themselves is great, but there's another option for setting a theme that you may have come across on certain sites or applications: using the user's theme setting from their operating system or user agent (like a browser) This can be done using the prefers-color-scheme media query, which lets you apply different styles based on the user's device or settings, like screen size or theme preference (light/dark mode) The prefers-color-scheme query checks if the user has selected a theme on their OS or browser",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11260,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "799e8860836b75d2d18623e5ff3da68c",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
    "source_type": "git_repo",
    "title": "custom_properties",
    "content": "for setting a theme that you may have come across on certain sites or applications: using the user's theme setting from their operating system or user agent (like a browser) This can be done using the prefers-color-scheme media query, which lets you apply different styles based on the user's device or settings, like screen size or theme preference (light/dark mode) The prefers-color-scheme query checks if the user has selected a theme on their OS or browserDon’t worry, we’ll cover media queries in more detail later For now, try changing your OS or browser theme to see the example update in real time See the Pen\nTheme Query | CSS Custom Properties by TheOdinProject (@TheOdinProjectExamples)\non CodePen We first added custom properties on the :root element outside of the media query This gives us a default theme in case a user doesn't have a preference set on their OS or user agent, or if a browser doesn't support the media query In this case, we're using our \"light\" theme colors as the default Then we added a prefers-color-scheme media query for when a user has a dark theme set in their preferences Using the prefers-color-scheme media query can be pretty helpful for users since it doesn't require them to manually change the theme to their preferred one That said, you need to be aware of a few things when it comes to using this media query:\nOnly dark and light are valid values for the media query, so you can't use it to implement any themes beyond these two basic ones The light value for the media query is actually for when a user has a light theme specified or when they have no preference set It doesn't allow users to change the theme themselves, which can still be important in cases where a user might want to use the theme opposite of their OS/user agent preferred one for whatever reason Assignment\n1 This [video on CSS custom properties](https://www youtube com/watch v=PHO6TBq_auI) is a great introduction Go ahead and watch it 1 Read through MDN's [Using CSS custom properties](https://developer mozilla org/en-US/docs/Web/CSS/Using_CSS_custom_properties#inheritance_of_custom_properties) page starting at the \"Inheritance of custom properties\" section 1 Read the CSS Tricks article for a [comprehensive overview of custom properties and what you can do with them](https://css-tricks com/a-complete-guide-to-custom-properties/) 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11260,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "dc4e66eebae23e5ed173b9223b8a7d32",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
    "source_type": "git_repo",
    "title": "custom_properties",
    "content": "want to use the theme opposite of their OS/user agent preferred one for whatever reason Assignment 1 This [video on CSS custom properties](https://www youtube com/watch v=PHO6TBq_auI) is a great introduction Go ahead and watch it 1 Read through MDN's [Using CSS custom properties](https://developer mozilla org/en-US/docs/Web/CSS/Using_CSS_custom_properties#inheritance_of_custom_properties) page starting at the \"Inheritance of custom properties\" section 1 Read the CSS Tricks article for a [comprehensive overview of custom properties and what you can do with them](https://css-tricks com/a-complete-guide-to-custom-properties/) 1Open the inspector on this page to inspect the styles and see how Odin uses some custom properties Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How would you declare a custom property with a name of text-color How would you access a custom property with a name of background-color Where would you declare a custom property to have its scope be global and accessible by all other selectors Where would you declare a custom property so that a user's theme setting from their OS or browser was taken into account Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Using CSS custom properties by Kevin Powell is a great video showing neat ways to use custom properties",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11260,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\custom_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "393b5cf3120e811f13773fb433f970c0",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\default_styles.md",
    "source_type": "git_repo",
    "title": "default_styles",
    "content": "Introduction\nBrowsers apply a set of default styles to every webpage You may not have thought about this directly, but you have undoubtedly encountered it Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You'll learn about default browser styles You'll learn how to use a CSS reset to remove or change those default styles What are default styles and where do they come from As you have worked on projects, you likely observed default styles applied to certain elements, such as larger and bolder headings on h1 elements, and blue, underlined links on a elements There is also a good chance you struggled with things like default margins and padding These styles are part of the user-agent stylesheets, ensuring basic styling for webpages without CSS Each browser has its own set of user-agent stylesheets so the default styles do vary slightly between browsers What if I don't like the defaults With very few exceptions you can simply write your own CSS rules The rules you write in your stylesheet have higher precedence than the user-agents rules, and therefore overwrite the defaults However, there is another option To address inconsistencies across browsers and establish a consistent starting point for styling, some developers started using CSS resets These resets are stylesheets containing CSS rules aimed at altering or removing the defaults set by user-agent stylesheets Using them can help achieve consistency, and can provide a clean slate for developers to apply their styles without interference While CSS resets are still commonly used, they are not mandatory Some developers opt not to use them, while others create their own or utilize prebuilt resets It's important to understand that resets are subjective and opinionated, reflecting the preferences of the developer who created them You can decide how you wish to do things yourself Assignment\n1 Read [Reboot, Resets, and Reasoning](https://css-tricks com/reboot-resets-reasoning/) for an excellent history of resets and what it means for a reset to be opinionated 1 Read [Making the case for CSS normalize and reset stylesheets in 2023](https://mattbrictson com/blog/css-normalize-and-reset) It does an excellent job of discussing the differences in various resets and why you might choose to use them 1 [Josh Comeau's custom CSS reset](https://www joshwcomeau com/css/custom-css-reset/) also includes a great breakdown of his thought process behind each rule he uses, giving you an idea of how to reason about these ideas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3581,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\default_styles.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8c4a6e84d472072cf25c36bdbcf0254b",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\default_styles.md",
    "source_type": "git_repo",
    "title": "default_styles",
    "content": "what it means for a reset to be opinionated 1 Read [Making the case for CSS normalize and reset stylesheets in 2023](https://mattbrictson com/blog/css-normalize-and-reset) It does an excellent job of discussing the differences in various resets and why you might choose to use them 1 [Josh Comeau's custom CSS reset](https://www joshwcomeau com/css/custom-css-reset/) also includes a great breakdown of his thought process behind each rule he uses, giving you an idea of how to reason about these ideasKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why would you want to use a CSS reset Are resets required Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Browser Default Styles allows you to view the user-agent applied rules for each element The Fabulous Styleboard contains a few resets you can select and deselect to see how they affect various HTML elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3581,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\default_styles.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "883692d055b4bc332d95cc6f14c8e498",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_css_properties.md",
    "source_type": "git_repo",
    "title": "more_css_properties",
    "content": "Introduction\nBy now, you probably have a strong grasp of the important foundational concepts of CSS, but there is a lot more that you can do with CSS to make some truly spectacular looking websites It's time to cover those useful little CSS features you can use to add some shine to your projects There are a lot of CSS properties Luckily, you don't have to memorize them all: the amount of properties you're actually going to use on a daily basis is much smaller This lesson is going to cover most of the items you'll end up using on a regular basis The format of this lesson is a little different since it's essentially just a list of CSS properties We'll give a little description of the property and then link you to some documentation where you can see all the available options Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You'll learn about a lot of useful CSS properties Background\nYou've likely already experimented with setting background colors on things, but the background property can do quite a bit more The background property is actually a shorthand for 8 different background-related properties, all of which you can read about in the linked docs Beyond changing background-colors, you can also specify background images, change the position and size of background images, and change how background images repeat or tile if they are too small to fill their container It is also possible to have multiple background layers One thing to note is that it is possible to use these properties individually, and in some cases it might be easier and more clear to do that than defaulting to the shorthand This is in contrast to some other shorthand properties where it is almost always preferable to default to using the shorthand (flex, margin, padding etc )\nThere's a lot of information in the docs on this shorthand and all the associated properties As we've mentioned before, you do NOT need to memorize the exact order and syntax of each property It's enough to know that they exist and have a general idea of what they do One more note, the Formal Syntax section here is crazy Don't let it deter you The basic syntax is somewhat hard to define because many of the properties that make up the shorthand are optional, or can come in different places in the definition Read the MDN docs on background Borders\nAt this point, you've probably already encountered border and border-radius The border property is another shorthand, but it is much less complicated than the background shorthand",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5854,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_css_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "dff90606444abfb754fadcd0070944a6",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_css_properties.md",
    "source_type": "git_repo",
    "title": "more_css_properties",
    "content": "more note, the Formal Syntax section here is crazy Don't let it deter you The basic syntax is somewhat hard to define because many of the properties that make up the shorthand are optional, or can come in different places in the definition Read the MDN docs on background Borders At this point, you've probably already encountered border and border-radius The border property is another shorthand, but it is much less complicated than the background shorthandFor borders, basically you just need to define a size, style and color border-radius is the property that is used to create rounded corners on things As you'll see in the docs, it's possible to get fancy and define different radii for each corner of an element, but this is rarely useful Store that information in the category of \"things I'll look up if I ever need it\" Read the MDN docs for border and border-radius box-shadow\nAs you might expect from the property name, box-shadow adds a shadow effect around an element This is useful to create a sense of depth on your page and to add subtle separation between elements In usage it's straightforward, but keep in mind that it's best used sparingly, and subtly Prefer lighter, barely visible shadows to darker or brighter colors Read the box-shadow docs Overflow\nIt is possible, using overflow, to define what happens to an element when its content is too big to fit The most common usage is likely to add scrollbars to an element inside a webpage, for example a card style element with scrollable content Check out the overflow docs Opacity\nOpacity is another easy one that can be very useful in some circumstances Check out opacity for a definition and some examples Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Which property would you use to make an element transparent Which property would you use to make a background image tile Which property would you use to add scrollbars to an element Which property would you use to add a shadow behind an element Which property would you use to create rounded corners on an element How would you use border-radius to make a circular element Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental CSS Tricks has some really great content Some of it feels less formal and official than the MDN docs, but that means they can be easier to digest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5854,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_css_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4007a9179eaf84104df35dc93d270408",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_css_properties.md",
    "source_type": "git_repo",
    "title": "more_css_properties",
    "content": "you use to add a shadow behind an element Which property would you use to create rounded corners on an element How would you use border-radius to make a circular element Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental CSS Tricks has some really great content Some of it feels less formal and official than the MDN docs, but that means they can be easier to digestSometimes their examples can be more useful For example, check out their pages on the background shorthand, or overflow W3 Schools is another fine resource We (the Odin authors) tend to prefer MDN, but there is nothing wrong with W3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5854,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_css_properties.md",
      "source_type": "git_repo"
    },
    "token_count": 129,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3c6944329853ab36ebb085c817530557",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\frameworks_and_preprocessors.md",
    "source_type": "git_repo",
    "title": "frameworks_and_preprocessors",
    "content": "Introduction\nAt this point, you have written quite a bit of vanilla HTML and CSS, and learned many design techniques that you will continue to use as you grow as a developer Throughout your experiences, you may have come across information on CSS frameworks and preprocessors (aka precompilers) Both of these types of tools can make writing CSS more streamlined and less tedious A useful reason to be aware about CSS frameworks and preprocessors is that they are commonly found in the workplace Whilst interviewers for entry-level positions are likely to focus more on CSS fundamentals (even if the job uses a particular framework or preprocessor), it's helpful for you to know what these tools are, and where to look for them once you've determined you need to learn them You should be aware that at this point in your learning, it is advised to continue using vanilla CSS in your projects All of these frameworks and preprocessors are based around CSS and so developing strong fundamentals makes it significantly easier to learn and switch between any framework or preprocessor in the future Trying to learn one during this course will not be as productive or valuable in the long run as improving your fundamental CSS skills Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Know what a CSS framework is Know some of the available frameworks Know what a preprocessor is Know some of the available preprocessors Frameworks overview\nDifferent frameworks have different goals Frameworks like Bootstrap do a lot of the heavy lifting of packaging up commonly used CSS code for you, even icons and interactions (like menu dropdowns) They are designed to abstract away the process of coding intuitive, reusable, and responsive elements Things like Tailwind aim to change how we apply CSS through a different syntax, by supplying pre-named classes that typically only apply a single line of CSS each A CSS framework is ultimately just a bundle of CSS that you can use and access, using the classes defined by the framework For example, many frameworks provide a class called btn that will add all the needed styles to your buttons, without you having to write any CSS In general, to use a framework, you need to understand how it expects you to structure your website and which classes it uses to apply its specific set of styles You should be aware that there are quite a few frameworks available Two other frameworks you may come across are Bulma and Foundation but there are many more out there Disadvantages of frameworks\nFrameworks are great for rapidly producing sites with interfaces that end users can easily interact with",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6632,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\frameworks_and_preprocessors.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a1d0d36897cd018eaf552a827ba71ed3",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\frameworks_and_preprocessors.md",
    "source_type": "git_repo",
    "title": "frameworks_and_preprocessors",
    "content": "use a framework, you need to understand how it expects you to structure your website and which classes it uses to apply its specific set of styles You should be aware that there are quite a few frameworks available Two other frameworks you may come across are Bulma and Foundation but there are many more out there Disadvantages of frameworks Frameworks are great for rapidly producing sites with interfaces that end users can easily interact withHowever, once you've taken a tour through some of the more popular frameworks, you'll start noticing an awful lot of similarities between a lot of sites you encounter, due to similar use of frameworks In addition to that issue, too many new developers also jump into learning frameworks too early in their education; the prospect of not having to practice writing vanilla CSS is very tempting As a result, many developers do not get enough CSS practice under their belts to solidify the fundamentals of this very important language Additionally, the process of overriding a framework's styling or debugging style issues on your page becomes very difficult if you have weaker CSS fundamentals It is imperative to understand what a framework is doing \"under the hood\" so that you are equipped to handle these issues later (and trust us, you will have to) Ultimately, frameworks can help you get up and running quickly - but they can constrain you in the long run Once you've started a project using a framework it can be difficult to remove it In the future, you (or your employer ) may have to decide whether or not to use a framework for a project and if so, which one Preprocessors overview\nPreprocessors (aka precompilers) are languages that help you write CSS more easily They can reduce code repetition and provide all sorts of time-saving and code-saving features, for example by allowing you to write loops and conditionals, and join multiple stylesheets CSS preprocessors are essentially extensions to vanilla CSS that provide some extra functionality When you run the processor, it takes your code and turns it into vanilla CSS that you can import into your project Preprocessors do have some unique and helpful tools, but many of their most helpful features have been implemented in vanilla CSS, so it might not be worth the overhead of learning one unless you think you really need these features For example, you have already learned about custom properties which used to be something only possible with preprocessors CSS nesting also used to be a common advantage of some preprocessors but has now made its way into vanilla CSS and has recently started getting more browser support",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6632,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\frameworks_and_preprocessors.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d3c7fa38e029016278d6b92c252eaf49",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\frameworks_and_preprocessors.md",
    "source_type": "git_repo",
    "title": "frameworks_and_preprocessors",
    "content": "their most helpful features have been implemented in vanilla CSS, so it might not be worth the overhead of learning one unless you think you really need these features For example, you have already learned about custom properties which used to be something only possible with preprocessors CSS nesting also used to be a common advantage of some preprocessors but has now made its way into vanilla CSS and has recently started getting more browser supportSome of the standard preprocessors in use are SASS, LESS and Stylus Assignment\n1 Read this [brief overview of CSS frameworks](https://medium com/html-all-the-things/what-is-a-css-framework-f758ef0b1a11) 1 Skim this [overview of SASS, LESS and Stylus](https://www lambdatest com/blog/css-preprocessors-sass-vs-less-vs-stylus-with-examples/) 1 Read about [some disadvantages to using a CSS preprocessor](https://adamsilver io/blog/the-disadvantages-of-css-preprocessors/) Note that since the article was written, CSS now has nesting and variables via custom properties Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are CSS frameworks What are CSS preprocessors Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Bootstrap documentation\nTailwind documentation\nSASS documentation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6632,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\frameworks_and_preprocessors.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0e122083d7cd69d5d0ec8e7ae955102f",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\positioning.md",
    "source_type": "git_repo",
    "title": "positioning",
    "content": "Introduction\nBy now you have had quite a bit of practice moving elements around the screen using things like margin, padding, and flexbox These techniques have all relied on CSS's default \"positioning-mode\" This default positioning-mode is intuitive, and you'll continue using it for almost all of your layout needs However, there are other methods at your disposal that can be very useful in some situations Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You'll learn how to use absolute positioning You'll learn how to use fixed positioning You'll learn how to use sticky positioning You'll know the difference between each property and how to combine them Static and relative positioning\nThe default positioning mode that you've gotten used to is position: static The difference between static and relative is fairly simple Static is the default position of every element, and properties top, right, bottom, and left do not affect the position of the element Relative on the other hand is pretty much the same as static, but properties top, right (etc ) displace the element relative to its normal position in the flow of the document Absolute positioning\nposition: absolute allows you to position something at an exact point on the screen without disturbing the other elements around it More specifically, using absolute positioning on an element will remove that element from the normal document flow while being positioned relative to an ancestor element To put it in other words: elements that are removed from the normal flow of the document don't affect other elements and are also not affected by other elements Using absolute positioning allows you to position elements anywhere on the screen using top, right, bottom, and left properties This property is really useful when you want to position something at an exact point on the screen, without disturbing any of the other elements A couple of good use cases for absolute positioning are:\nmodals\nimage with a caption on it\nicons on top of other elements\nIn the following example, we are using absolute positioning to display text over an image See the Pen\nAbsolute Position | CSS Positioning by TheOdinProject (@TheOdinProjectExamples)\non CodePen Disclaimer: absolute positioning has very specific use cases and if possible, using flexbox or grid should be prioritized Absolute positioning shouldn't be used to do entire page layouts Fixed positioning\nFixed elements are also removed from the normal flow of the document and are positioned relative to the viewport",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6012,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\positioning.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9e6ce5193afc9110c8f34420ab9699b7",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\positioning.md",
    "source_type": "git_repo",
    "title": "positioning",
    "content": "the following example, we are using absolute positioning to display text over an image See the Pen Absolute Position | CSS Positioning by TheOdinProject (@TheOdinProjectExamples) on CodePen Disclaimer: absolute positioning has very specific use cases and if possible, using flexbox or grid should be prioritized Absolute positioning shouldn't be used to do entire page layouts Fixed positioning Fixed elements are also removed from the normal flow of the document and are positioned relative to the viewportYou basically use top, right, bottom, and left properties to position it, and it will stay there as the user scrolls This is especially useful for things like navigation bars and floating chat buttons Sticky positioning\nSticky elements will act like normal elements until you scroll past them, then they start behaving like fixed elements They are also not taken out of the normal flow of the document It might sound confusing, so check out this sticky positioning example that might clear things up for you It's useful for things like section-headings Remember being able to still see what category you're looking at while scrolling through a shop This is how it's done Assignment\n1 Web Dev Simplified's [Learn CSS Position](https://www youtube com/watch v=jx5jmI0UlXU) video is fast-paced but provides a good visual representation of different positioning behaviors Go ahead and watch it 1 [MDN's docs on `position`](https://developer mozilla org/en-US/docs/Web/CSS/position) covers all of the conceptual details about positioning 1 CSS trick's page [Absolute, Relative, Fixed Positioning](https://css-tricks com/absolute-relative-fixed-positioining-how-do-they-differ/) should give you a different insight on the topic You should read it as well 1 Finally, Kevin Powell's article discusses the [difference between fixed and sticky positioning](https://www kevinpowell co/article/positition-fixed-vs-sticky/) It’s a great read to understand the difference better Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between static and relative positioning What is absolute positioning useful for What is the difference between fixed and sticky positioning Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6012,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\positioning.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "09e6c59125eb8ee205493f35f4e4a219",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\positioning.md",
    "source_type": "git_repo",
    "title": "positioning",
    "content": "to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between static and relative positioning What is absolute positioning useful for What is the difference between fixed and sticky positioning Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalUnderstand the CSS Position Property With Practical Examples provides some different CSS methods for positioning elements You can check out this helpful video resource on CSS positioning from Slaying the Dragon for clear explanations and practical examples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6012,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\positioning.md",
      "source_type": "git_repo"
    },
    "token_count": 122,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "465ae13f78d6bbb99b2701e96a686ddf",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
    "source_type": "git_repo",
    "title": "more_text_styles",
    "content": "Introduction\nYou've already done a bit of text-manipulation in our Foundations lessons This lesson will cover a few more useful CSS properties that can be used when working with text Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You'll learn how to use custom fonts on your web projects You'll learn some more text-related CSS properties Fonts\nIn our Foundations lesson, we covered changing the font-family of an element, but there is some nuance and detail that we left out at the time The system font stack\nIf you use the font-family property to change to a font like Impact or Times New Roman, and those fonts do not happen to be installed on your user's computer, then a fallback font will be displayed If you have not defined a fallback, then the default HTML font will be used, which is often somewhat ugly For this reason, it's common to see somewhat long stacks of fonts listed on projects One popular stack is CSS Tricks' system font stack css\nbody {\nfont-family: system-ui, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n}\nThe point of this somewhat ridiculous string of font-families is to try using the default font of the system's user interface It will go through each of those fonts until it finds one that is installed on the system, and then use that Using a stack like this often produces pleasing results, especially if you're going for a somewhat 'neutral' font style Web fonts\nIf you want to use a font that will not be available on the user's device, you will need to import the font from an online source, either a font library or an asset on your site Both methods will import the font and make it accessible in your CSS font-family property Keep in mind that it's important to add a fallback font If you're linking to an external API, you have no guarantee that the URL won't change, or that the external API won't go down at some point Having a reasonable fallback means that if something goes wrong, at least your site won't look completely broken There are performance issues with using imported files, which you will read more about in the assignments Therefore, it is best to use a font stack instead of imported fonts if your design allows for it However, there are times you will want to use an imported font",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "db5c38937791c5e5a6b7a2e49c1fb6a5",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
    "source_type": "git_repo",
    "title": "more_text_styles",
    "content": "that the external API won't go down at some point Having a reasonable fallback means that if something goes wrong, at least your site won't look completely broken There are performance issues with using imported files, which you will read more about in the assignments Therefore, it is best to use a font stack instead of imported fonts if your design allows for it However, there are times you will want to use an imported fontOnline font libraries\nOne popular and easy method to get fonts that are not installed on a user's device is to use an online font library To use a font from one of these libraries, go to the website, select a font and then copy a snippet from the website to import that font from their server into your website You'll be given either a <link> tag to put in your HTML like so html\n<link rel=\"preconnect\" href=\"https://fonts googleapis com\">\n<link rel=\"preconnect\" href=\"https://fonts gstatic com\" crossorigin>\n<link href=\"https://fonts googleapis com/css2 family=Roboto&display=swap\" rel=\"stylesheet\"> or an @import tag that can be dropped at the top of a CSS file css\n@import url('https://fonts googleapis com/css2 family=Roboto&display=swap');\nAn important consideration when using a font library is the library's privacy policies and any regulations you may need to comply with For example, using the Google Fonts API violates the European GDPR If you are concerned about complying with such regulations, you can download the font from the library and host it yourself Self hosted fonts\nIt is also possible to use a font that you have downloaded from the web In your CSS file, you import and define a custom font using the @font-face rule, and then use it as you would any other font-family There are multiple types of font file formats and you can read more in depth about them on fileinfo com's page on Font File Formats Please take care when choosing a font file format however, because some are not universally supported by browsers A list of browsers and the font formats they support can be found on W3 Schools' page on CSS Web Fonts ```css\n@font-face {\nfont-family: my-cool-font;\nsrc: url( /fonts/the-font-file woff);\n}\nh1 {\nfont-family: my-cool-font, sans-serif;\n}\n```\nThis method may be more reliable than relying on a third-party font API, but it is always wise to include a fallback",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "2804206f8b0b575f3c5fb4f540d65a86",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
    "source_type": "git_repo",
    "title": "more_text_styles",
    "content": "care when choosing a font file format however, because some are not universally supported by browsers A list of browsers and the font formats they support can be found on W3 Schools' page on CSS Web Fonts ```css @font-face { font-family: my-cool-font; src: url( /fonts/the-font-file woff); } h1 { font-family: my-cool-font, sans-serif; } ``` This method may be more reliable than relying on a third-party font API, but it is always wise to include a fallbackText styles\nYou learned the basics of manipulating fonts in our Foundations lessons, but there is quite a bit more that you can do with CSS when it comes to manipulating text styles These rules are all relatively simple and self-explanatory You can refer to the docs for any questions you might have font-style\nTypically used to make a font italic You learned about the HTML <em> tag, which uses an italic font, but <em> also signifies that the text it wraps is significant or should be emphasized in some way A good rule of thumb to follow is that if you just want text to be italic (or bold, underlined, highlighted, etc ), use a CSS property Otherwise, if text should have some sort of semantic emphasis, use the correct HTML element For example, if you want all your header text to be italic you should use font-style to accomplish this If you want some text in the middle of a sentence to appear italic in order to emphasize that text, it is appropriate to use an em element The MDN doc on the Emphasis Element puts stress on our point above We should use font-style: italic; if italics is required for styling purposes css\nh1 {\nfont-style: italic;\n}\nWe should use the em element if italics is required for emphasis ```html\nI never said he stole your money\nI never said he stole your money\nI never said he stole your money\n```\nletter-spacing\nLetter spacing does what you would expect it changes the space between letters in a word This can be useful for adjusting custom fonts that you feel have too much or too little space It can also be aesthetically pleasing in some cases, like headers See the Pen\nLetter Spacing | CSS Text Styles by TheOdinProject (@TheOdinProjectExamples)\non CodePen Obviously, use this sparingly and with care Do not make your site hard to read",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "38abbed3b08d2c0b1fc86a88281c42ea",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
    "source_type": "git_repo",
    "title": "more_text_styles",
    "content": "``` letter-spacing Letter spacing does what you would expect it changes the space between letters in a word This can be useful for adjusting custom fonts that you feel have too much or too little space It can also be aesthetically pleasing in some cases, like headers See the Pen Letter Spacing | CSS Text Styles by TheOdinProject (@TheOdinProjectExamples) on CodePen Obviously, use this sparingly and with care Do not make your site hard to readline-height\nLine height adjusts the space between lines in wrapped text Adding a little line-height can increase readability See the Pen\nLine Height | CSS Text Styles by TheOdinProject (@TheOdinProjectExamples)\non CodePen text-transform\nText transform changes the case of the given text You can use this, for example, to force your heading tags to be all uppercase, or to capitalize every word Usage can be seen in the clear example on these MDN web docs text-shadow\nAs you might expect, text-shadow adds a shadow around the text in the selected element This one is best used sparingly, but can be used to great effect in headings or other presentational text The examples on the MDN reference page for text-shadow show how to use it ellipsis\nThis one isn't a single property, but it's a useful trick to keep in your toolbox With the text-overflow property, you can truncate overflowing text with an ellipsis Making an overflow happen, however, requires the use of a couple other properties because the default behavior of text printing outside its container isn't technically considered an overflow (that's confusing, we know Sorry )\nThe full snippet is:\ncss overflowing {\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\n}\nYou can see more detail and an example in this CSS Tricks article on ellipsis overflow (Be ready to go look that article up every time you want to use this )\nAssignment\n1 Read [MDN's article on web fonts](https://developer mozilla org/en-US/docs/Learn/CSS/Styling_text/Web_fonts) and do the exercises 1 Read [Font Best Practices](https://web dev/articles/font-best-practices) to understand some of the performance considerations of imported fonts and how to mitigate issues with them 1 Read [web dev Typography](https://web dev/learn/design/typography) to understand some important considerations for developers with typography Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "564f4e4619ef7d88c0accd25f982414e",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
    "source_type": "git_repo",
    "title": "more_text_styles",
    "content": "every time you want to use this ) Assignment 1 Read [MDN's article on web fonts](https://developer mozilla org/en-US/docs/Learn/CSS/Styling_text/Web_fonts) and do the exercises 1 Read [Font Best Practices](https://web dev/articles/font-best-practices) to understand some of the performance considerations of imported fonts and how to mitigate issues with them 1 Read [web dev Typography](https://web dev/learn/design/typography) to understand some important considerations for developers with typography Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the 2 ways to add fonts that are not installed on a user's computer What is the 'system font stack' and why would you want to use it Which property would you use to increase or decrease the space between letters in a word Which property would you use to increase or decrease the space between lines in a paragraph Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Modern CSS Techniques To Improve Legibility by Edoardo Cavazza is a great article that covers some additional text styles and techniques that can be utilized to improve websites legibility Modern Font Stacks lists common font stacks and provides demonstrations of them There are many online font libraries; some of the most common are: Font Library, Google Fonts, Font Bunny - a GDPR compliant drop-in replacement for Google Fonts, and Adobe Fonts - a premium font library",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11706,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_css_concepts\\more_text_styles.md",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b08dc5f8afd792eacfae0b2c866ed787",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\introduction.md",
    "source_type": "git_repo",
    "title": "introduction",
    "content": "Introduction\nThis is the first of the two part course where we dig deeper into HTML and CSS.\nOur foundations lessons by design only scratched the surface of what's possible. We wanted to give you all of the bare necessities for getting started so you could move on and be somewhat productive as quickly as possible, but now it's time to slow down and dig in!\nYou have probably realized by now that there are many more HTML elements than we mentioned in our foundations content. Throughout this course, we'll be hitting the rest of the important elements such as forms and tables.\nThere is also a lot more that you can do with CSS that you'll learn throughout this course, such as variables, functions, shadows and of course grid layouts! So buckle up! By the time you finish this course, you'll be able to recreate just about any web design you can find on the internet... which is an important skill to carry forward. Even if you are not shooting for a front-end specific job, being able to make your portfolio pieces look nice is important when it comes to making yourself stand out.\nYou'll learn about animations, accessibility, and responsive design in the second part of this course later in the curriculum.\nAssignment\n1. Read through this [HTML elements reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) to get an overview of what other HTML elements are available to you. No need to commit this to memory because you'll be learning the important parts as we go, but having a glance now will help the content stick later.\n2. Take a glance at a somewhat overwhelming looking [CSS Cheat Sheet](https://htmlcheatsheet.com/css/).  Again, we don't need you to learn anything specific, or memorize anything from this list. Just use it to get a feel for what you still have left to learn!\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nIt looks like this lesson doesn't have any additional resources yet. Help us expand this section by contributing to our curriculum.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2171,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\introduction.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3b998c5ca795bc9bb19753bfa2c510a8",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\emmet.md",
    "source_type": "git_repo",
    "title": "emmet",
    "content": "Introduction\nEmmet is a plugin, built into VS Code, that helps you write HTML and CSS more efficiently by providing a bunch of clever shortcuts By now, you have written a good amount of HTML and CSS, and if you have been using VS Code there's a big chance that you have already encountered Emmet in some way Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Use some of Emmet's most useful shortcuts Set up custom Emmet keybindings in VS Code Emmet\nEmmet is a really useful tool for anyone that works a lot with HTML and CSS Luckily, Emmet does not have that big of a learning curve, and if you already know how to write HTML and CSS you'll have no trouble picking up Emmet abbreviations Let's start off by generating an HTML boilerplate with Emmet Opening up an empty HTML file in VS Code and entering should trigger Emmet suggestions like so:\nPressing Enter should generate the following text:\nWe have just used one of many Emmet abbreviations There are lots of useful Emmet abbreviations that you should check out, like Wrap with Abbreviation and Remove Tag Definitely go through those before moving forward Considering how useful these two are, we will be setting up VS Code shortcuts for them Start off by opening the keyboard shortcuts window You can do so by clicking the cog icon on the bottom left and selecting keyboard shortcuts, or by pressing Cmd + K followed by Cmd + S on Mac, or Ctrl + K followed by Ctrl + S on Windows/Linux After entering the keyboard shortcuts window, you should be able to access all of the Emmet actions by searching for Emmet:<action> In our case, it will be Emmet:Wrap With Abbreviation\nYou can now add a shortcut to it by clicking the plus sign and entering whichever key combination you would like for that specific action You can do the same for Remove Tag by searching for Emmet:Remove tag Assignment\n1 This [video about Emmet](https://www youtube com/watch v=V8vizNQKtx0) showcases some of the ways we can use Emmet to enhance productivity Go ahead and watch it up to `11:37` as it demonstrates some content we haven't covered yet We'll get there eventually 1 Take a look at the [Emmet cheat sheet](https://docs emmet io/cheat-sheet/)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4952,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\emmet.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e6961efb03cd1516e3ee452e28a62888",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\emmet.md",
    "source_type": "git_repo",
    "title": "emmet",
    "content": "whichever key combination you would like for that specific action You can do the same for Remove Tag by searching for Emmet:Remove tag Assignment 1 This [video about Emmet](https://www youtube com/watch v=V8vizNQKtx0) showcases some of the ways we can use Emmet to enhance productivity Go ahead and watch it up to `11:37` as it demonstrates some content we haven't covered yet We'll get there eventually 1 Take a look at the [Emmet cheat sheet](https://docs emmet io/cheat-sheet/)You don't have to memorize it, but it's good that you get familiar with the different ways it can be used Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why should you use Emmet What are some useful Emmet abbreviations What syntax would you use to create the element <p class=\"text\"></p> What syntax expands to an element with a child element inside of it For example: <div><p></p></div>\nWhat syntax would you use to create three elements that have the same class name Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Emmet Keybindings by Andrés Gutiérrez, is a set of Emmet keybinds for Visual Studio Code It can be used as a pre-defined group of keybinds, in case you don't know what to map to which keys Emmet Live by Yurii Semeniuk, is another extension in Visual Studio Code It can continually generate the corresponding HTML structure while you're editing Emmet abbreviations For the desired outcome, try selecting a random piece of text before calling out this extension",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4952,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\emmet.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "875c2798755171e011f1f112baf22317",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\tables.md",
    "source_type": "git_repo",
    "title": "tables",
    "content": "Introduction\nHTML Tables allow you to create two-dimensional tables made of rows and columns In this lesson, you will learn everything you need to know about HTML Tables Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Create advanced HTML tables HTML tables\nSome data just really needs to be displayed in a table HTML tables might be less commonly used than buttons, links, lists and everything else you've learned so far, but there are some cases where they're the perfect tool Some of the more advanced features can get a little tricky to set up correctly but getting started with tables is pretty easy You create a table with <table></table> tags and then put the elements for rows, columns, headers, or anything else that's possible inside those table elements For example:\nSee the Pen\nHTML Tables Example by TheOdinProject (@TheOdinProjectExamples)\non CodePen In this codepen example we created a table element, containing two table row elements The first row has two headings while the second row has 2 data cells Assignment\n1 Read these [Tables Basics](https://developer mozilla org/en-US/docs/Learn/HTML/Tables/Basics) and [Tables Advanced](https://developer mozilla org/en-US/docs/Learn/HTML/Tables/Advanced) tutorials from MDN They should teach you all the syntax behind HTML tables It's pretty straightforward Make sure to code along 1 Read through CSS Tricks' [full guide to the table element](https://css-tricks com/complete-guide-table-element/), which goes very in-depth about what you have already learned and touches on a few extra things Skip any sections that involve jQuery, advanced JavaScript, or SASS, as they go beyond the scope of this lesson 1 Do this [Tables Assessment](https://developer mozilla org/en-US/docs/Learn/HTML/Tables/Structuring_planet_data) from MDN It's good to put your newly learned skills to practice Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a table Why is it a bad idea to use HTML Tables for page layout What are caption elements useful for What is the scope attribute Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4033,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\tables.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "00cfc2206c07beff0a1653a1e9d59baf",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\tables.md",
    "source_type": "git_repo",
    "title": "tables",
    "content": "topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a table Why is it a bad idea to use HTML Tables for page layout What are caption elements useful for What is the scope attribute Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalPencil & Paper published a great article about things you can achieve with tables if you dare to spend some time giving them some love They suggest some good habits on how you should format your data which makes a huge difference These are not a list of must dos to a table, but ideas worth keeping in mind for the next time a table is bothering you with how it looks",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4033,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\tables.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5814069b31136ec958e3a035106fcdbf",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\svgs.md",
    "source_type": "git_repo",
    "title": "svgs",
    "content": "Introduction\nSVGs are a very common image format on the web They can be a little confusing at first, but once you know how to use them, they are an incredibly powerful tool for creating high-quality, dynamic images for your website In this lesson, we will learn exactly what SVGs are, what they're used for, and how you can embed them in your websites Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What SVGs, Vector Graphics, and XML are How to create simple SVGs and add them to your websites When to use SVGs, and when a different image format would be more appropriate What are SVGs SVGs are a scalable image format, which means they will easily scale to any size and retain their quality without increasing their filesize They're also very useful if you need to create or modify your images programmatically, because you can change their properties through CSS and JavaScript SVGs are often used for:\nIcons\nGraphs/Charts\nLarge, simple images\nPatterned backgrounds\nApplying effects to other elements via SVG filters\nOkay, but what are they \"SVG\" stands for \"Scalable Vector Graphics\" Vector graphics are images defined by math, as opposed to traditional \"raster graphics\", where your image is defined by a grid of pixels With raster graphics, the detail is limited to the size of that pixel grid If you want to increase the size of the image (scale it), you have to increase the size of that grid How do you decide what all those new pixels should look like There's no simple solution Additionally, the larger the grid, the bigger your filesize grows With vector graphics on the other hand, there's no grid Instead, you have formulas for different shapes and lines Since these are just formulas, it doesn't matter how large or small you want them to appear--they can scale to any size you want, and it will have no effect on the quality or the size of the file SVGs have another interesting aspect to them: they're defined using XML XML (aka, \"Extensible Markup Language\") is an HTML-like syntax which is used for lots of things, from APIs, to RSS, to spreadsheet and word editor software The fact that SVG source-code is XML has a few key benefits First, it means that it is human-readable If you were to open up a JPEG in a text editor, it would just look like gobbledygook",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9188,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\svgs.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d17bcf5853340ecb868e6b2ab20b0b01",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\svgs.md",
    "source_type": "git_repo",
    "title": "svgs",
    "content": "the file SVGs have another interesting aspect to them: they're defined using XML XML (aka, \"Extensible Markup Language\") is an HTML-like syntax which is used for lots of things, from APIs, to RSS, to spreadsheet and word editor software The fact that SVG source-code is XML has a few key benefits First, it means that it is human-readable If you were to open up a JPEG in a text editor, it would just look like gobbledygookIf you were to open up an SVG, however, it would look something like this:\nhtml\n<svg xmlns=\"http://www w3 org/2000/svg\" viewBox=\"0 0 100 100\">\n<rect x=0 y=0 width=100 height=50 />\n<circle class=\"svg-circle\" cx=\"50\" cy=\"50\" r=\"10\"/>\n</svg>\nIt might still be confusing, but hey--those are words Tags Attributes Compared to binary file formats like JPEG, we're definitely in familiar territory The second benefit of XML is that it's designed to be interoperable with HTML, which means you can put the above code directly in an HTML file, without any changes, and it should display the image And because these can become elements in the DOM just like HTML elements, you can target them with CSS and create them using the Element WebAPI you've already been using Drawbacks\nSo, clearly SVGs are awesome Time to go convert all of our images to SVG, right Well, not quite SVGs are great for relatively simple images, but because every single detail of the image needs to be written out as XML, they are extremely inefficient at storing complex images If your image is supposed to be photo-realistic, or it has fine detail or texture (\"grunge textures\" are a great example), then SVGs are the wrong tool for the job Anatomy of an SVG\nTypically, you will not want to create SVGs from scratch in your code Most often, you will download the file or copy the code either from a website or from an image editor that can create them (Adobe Illustrator and Figma are two popular apps that can create SVGs) However, it's pretty common to download an SVG and want to tweak or adjust it just a little bit, so knowing what all the bits and pieces are, and how they work is very useful",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9188,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\svgs.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a1fedcf0f01283c898a5242c2873539b",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\svgs.md",
    "source_type": "git_repo",
    "title": "svgs",
    "content": "from scratch in your code Most often, you will download the file or copy the code either from a website or from an image editor that can create them (Adobe Illustrator and Figma are two popular apps that can create SVGs) However, it's pretty common to download an SVG and want to tweak or adjust it just a little bit, so knowing what all the bits and pieces are, and how they work is very usefulSee the Pen\nSimple SVG Example by TheOdinProject (@TheOdinProjectExamples)\non CodePen xmlns - stands for \"XML NameSpace\" This specifies what dialect of XML you're using In our case, that dialect is the SVG language spec Without it, some browsers will not render your image or will render it incorrectly viewBox - defines the bounds of your SVG When you have to define the positions of different points of the elements in your SVG, this is what that's referencing It also defines the aspect ratio and the origin of your SVG So it's doing quite a lot Be sure to play around with different values in the example above to get a feel for how it affects the shapes class, id - these attributes function just like they do in HTML Using these in SVGs allows you to easily target an element via CSS or JavaScript, or to reuse an element via the use element Elements such as <circle>, <rect>, <path>, and <text> are defined by the SVG namespace These are our basic building-blocks Although you can make extremely complex images with SVG, they are mostly created with just a dozen or so of these basic elements Here is a complete list of SVG elements Many SVG attributes, such as fill and stroke, can be changed in your CSS Learn more in this article on SVG properties and CSS Play around with the code above and try to get a feel for what's happening What happens when you change the viewBox dimensions Or the attributes of an element Embedding SVGs\nThere are two main approaches when deciding how to actually place the SVG in your document: linked, and inline Linking SVGs works basically the same way as linking any other image You can use an HTML image element such as <img>, or link it in your CSS using background-image: url( /my-image svg) They will still scale properly, but the contents of the SVG will not be accessible from the webpage The alternative is to inline your SVGs by pasting their contents directly into your webpage's code, rather than linking to it as an image",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9188,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\svgs.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9bc90d9b810c5b1a22c7aa7c195968a3",
    "source_file": "corpus\\git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\svgs.md",
    "source_type": "git_repo",
    "title": "svgs",
    "content": "inline Linking SVGs works basically the same way as linking any other image You can use an HTML image element such as <img>, or link it in your CSS using background-image: url( /my-image svg) They will still scale properly, but the contents of the SVG will not be accessible from the webpage The alternative is to inline your SVGs by pasting their contents directly into your webpage's code, rather than linking to it as an imageIt will still render correctly, but the SVG's properties will be visible to your code, which will allow you to alter the image dynamically via CSS or JavaScript Inlining SVGs allows you to unlock their full potential, but it also comes with some serious drawbacks: it makes your code harder to read, makes your page less cacheable, and if it's a large SVG it might delay the rest of your HTML from loading Some of the drawbacks of inlining SVG code can be avoided once you've learned a front-end JavaScript library like React, or a build-tool like webpack We aren't quite ready to get into those yet, so just keep that in the back of your mind For now, just do whichever works best for your use-case Linking is generally cleaner and simpler, so prefer that unless you need to tweak the SVG code alongside your HTML Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the xmlns attribute What are some situations where you wouldn't want to use SVG What are the benefits of \"inlining\" your SVGs What are the drawbacks Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental There are lots of great free SVG icon libraries, such as Material icons and Feather icons If you want to get started making your own or editing SVGs, you'll want some sort of visual editor like Yann Armelin's SVG path editor It's great for tinkering around with simpler SVGs but not designed for complex graphics",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9188,
      "relative_path": "git_repos\\odin-project\\intermediate_html_css\\intermediate_html_concepts\\svgs.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "51a7a746a5466dcd1f69a5d21e2d8be9",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\commit_messages.md",
    "source_type": "git_repo",
    "title": "commit_messages",
    "content": "Introduction\nThis lesson will explain the importance of good commit messages, how to write them, when to commit, and why having a history of good commits is so important Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to write a meaningful commit message Why meaningful commit messages are important When to commit Are commit messages so important they deserve their own lesson Yes Let me give you a quick list of reasons why:\nWhen you are applying for jobs, employers will look through your projects on GitHub and they will look through your commit history Having good commits as a novice developer will help you stand out Having a good commit message history will allow you (or other developers working on your code) to quickly see what changes were made and why This is useful if a bug is found in the code that needs to be fixed Having a good commit message history will also be helpful if you come back to a project you were working on after stepping away from it for a while You likely won't remember your thought process and changes made when initially writing out the code Bad vs good commits\nWhen it comes to writing commits, it is crucial to know how to write them effectively Here's an example of a bad commit message:\ntext\nfix a bug\nEven though it describes what you did, the message is too vague, which leaves the other developers on your team confused A good commit message will explain the why behind your changes In other words, a commit message describes what problem your changes solve and how it solves them Effective commits consist of two separate parts: a subject, and a body:\nSubject\nA brief summary of the change you made to the project text\nThis is the change I made to the codebase\nGitHub has a 72-character limit, so we recommend keeping your commits' subjects within this amount Body\nA concise yet clear description of what you did text\nDescribe the problem your commit solves and how Now that we learned the secret to creating a good commit message, let's try and fix the commit message from earlier:\n```git\nAdd missing link and alt text to the company's logo\nScreen readers won't read the images to users with disabilities without this information ```\nAhh, that's better :) Now, developers can gain a better understanding of this commit message because it does the following:\nProvides a subject that specifies your code's action (e g , \"Add missing link and alt text to the company's logo\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7147,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\commit_messages.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "eb61dbb725534792c8e89ccaccca5ff8",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\commit_messages.md",
    "source_type": "git_repo",
    "title": "commit_messages",
    "content": "message, let's try and fix the commit message from earlier: ```git Add missing link and alt text to the company's logo Screen readers won't read the images to users with disabilities without this information ``` Ahh, that's better :) Now, developers can gain a better understanding of this commit message because it does the following: Provides a subject that specifies your code's action (e g , \"Add missing link and alt text to the company's logo\")Contains a body that provides a concise yet clear description of why the commit needed to be made (e g , \"Screen readers won't read the images to users with disabilities without this information \") Separates the subject from the body with a new/blank line This is a best practice we highly recommend following It makes commit messages easier for other developers to read How to commit with a subject and body in the message\nUp until now, you've been told to commit with git commit -m <message> To make a commit with subject and body in message, the simplest way is to type git commit without the -m flag and message argument Doing so will open a new Visual Studio Code tab if you had set Visual Studio Code as the Git editor You can remove any comments and enter your multi-line messages When you save and close the tab, your commit will be created When to commit\nA good way to view a commit is like a “snapshot” of your code at the moment that it was made That version of your code up to that point will be saved for you to revert back to or look back at When writing code, it's considered best practice to commit every time you have a meaningful change in the code This will create a timeline of your progress and show that your finished code didn't appear out of nowhere In other words, make a commit if you get a piece of code you are working on to function like you want it to, fix a typo, or fix a bug As you gain experience, you will develop a better feel for what should be committed There will come a time when you are working on a project and you FINALLY get something just right (this would be a good time to commit), and then maybe 30 seconds to a few days later it breaks You have no idea what you changed, everything looks to be the same and you don’t remember editing that line, but alas, it isn’t working how you want it anymore",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7147,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\commit_messages.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a0994f286920d80c9941f471af03a7c1",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\commit_messages.md",
    "source_type": "git_repo",
    "title": "commit_messages",
    "content": "better feel for what should be committed There will come a time when you are working on a project and you FINALLY get something just right (this would be a good time to commit), and then maybe 30 seconds to a few days later it breaks You have no idea what you changed, everything looks to be the same and you don’t remember editing that line, but alas, it isn’t working how you want it anymoreYou’d be able to go back through your commit history and either revert your code back to the last commit you made when you first got that part working or go back and see what your code looked like at that point in time Assignment\n1 This article, [How to Write a Git Commit Message](https://cbea ms/git-commit), covers all the main bases on how to write good commit messages The whole article is great and informative but the meat of the article is “The seven rules of a great commit message ”\nTips and things to remember\nUsing VSCode as your text editor (you should have set this up in the Git Basics section) will allow you to easily make multi-line commit messages, easily see the character length of each line, and will allow you to use VSCode spell check extensions to make sure your spelling is correct Use an active voice: \"Fix card generator\" Avoid using vague commit messages such as \"saved\" or \"updated\" Commit early and often Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are two benefits of having well-written commit messages and a good commit history How many characters should the subject line of your commit message be Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental One way to formulate high-information commit messages is to follow a template Conventional commits is one of many commit message templates that you can explore Explore this amazing tutorial video on Conventional Commits ➔ Full Video Link The video showcases the Conventional Commits template from the resource above It also mentions creating releases and shows using something called \"Yarn\" These two parts are out of scope for this part of the course, so don't worry about them and instead focus on the commit template",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7147,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\commit_messages.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8452f99951e22a40a6ac4bdc84cf9555",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\introduction_to_git.md",
    "source_type": "git_repo",
    "title": "introduction_to_git",
    "content": "Introduction\nGit is like a really epic save button for your files and directories Officially, Git is a version control system A save in a text editor records all of the words in a document as a single file You are only ever given one record of the file, such as essay doc, unless you make duplicate copies (which is difficult to remember to do and keep track of):\nessay-draft1 doc, essay-draft2 doc, essay-final doc\nHowever, a save in Git records differences in the files and folders AND keeps a historical record of each save This feature is a game changer As an individual developer, Git enables you to review how your project grows and to easily look at or restore file states from the past Once connected to a network, Git allows you to push your project to GitHub or other alternatives such as: Bitbucket, Beanstalk, or GitLab for sharing and collaborating with other developers Please note, we only support GitHub within our curriculum, and will not help troubleshoot the alternatives While Git works on your local machine, GitHub is a remote storage facility on the web for all your coding projects This means that by learning Git, you will get to showcase your portfolio on GitHub This is really important because almost all software development companies consider using Git to be an essential skill for modern web developers Having a GitHub portfolio will provide proof to future potential employers as to what you are capable of In this lesson, we will briefly explore the history of Git, what it is, and what it's useful for In the next lesson, we will go over the basic workflow for using Git, which should enhance your understanding and demonstrate why Git is so useful Finally, you will set up a project with Git that will serve as a template for your future projects For now, let's learn what Git is and why it's so powerful Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what Git and GitHub are and the differences between the two Describe the differences between Git and a text editor in terms of what they save and their record keeping Describe why Git is useful for an individual developer and a team of developers Assignment\n1 Read chapters 1 1 through 1 4 from the [Getting Started section of Pro Git](https://git-scm com/book/en/v2/Getting-Started-About-Version-Control) to learn the differences between local, centralized, and distributed version control systems 1 Watch [\"What is Git \" explained in 2 minutes](https://www",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5031,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\introduction_to_git.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0a089fa1edc47bedcf3d4c683e4aadfe",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\introduction_to_git.md",
    "source_type": "git_repo",
    "title": "introduction_to_git",
    "content": "between the two Describe the differences between Git and a text editor in terms of what they save and their record keeping Describe why Git is useful for an individual developer and a team of developers Assignment 1 Read chapters 1 1 through 1 4 from the [Getting Started section of Pro Git](https://git-scm com/book/en/v2/Getting-Started-About-Version-Control) to learn the differences between local, centralized, and distributed version control systems 1 Watch [\"What is Git \" explained in 2 minutes](https://wwwyoutube com/watch v=2ReR1YJrNOM) - a video about what Git is and how it can improve the workflow of both an individual and a team of developers 1 Read [\"About GitHub and Git\"](https://docs github com/en/get-started/start-your-journey/about-github-and-git) for a brief introduction of what GitHub is and how Git and GitHub work together You can skip the \"Where do I start \" section at the end 1 If you haven't yet installed Git, visit the [Setting Up Git](https://www theodinproject com/lessons/foundations-setting-up-git) lesson 1 Take a look at [The Odin Project's GitHub repository](https://github com/TheOdinProject/curriculum) This is where all the lessons are stored While you're there, look at all [our contributors](https://github com/TheOdinProject/curriculum/graphs/contributors) to gain an appreciation for how Git records all collaborative efforts and how GitHub visually represents this Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What kind of program is Git What are the differences between Git and a text editor in terms of what they save and their record keeping Does Git work at a local or remote level Does GitHub work at a local or remote level Why is Git useful for developers Why are Git and GitHub useful for a team of developers Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Short History for Git and Github\nWhat is Git and GitHub What is version control What is Git",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5031,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\introduction_to_git.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "43e9ed637a01c9d8ac17cc0bee4f25da",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
    "source_type": "git_repo",
    "title": "git_basics",
    "content": "Introduction\nIn this lesson, we'll cover common Git commands used to manage your projects and to upload your work onto GitHub We refer to these commands as the basic Git workflow When you're using Git, these are the commands that you'll use 70-80% of the time If you can get these down, you'll be more than halfway done mastering Git Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to create a repository on GitHub How to get files to and from GitHub How to take \"snapshots\" of your code Assignment\n#### Before you start - Github recently updated the way it names the default branch This means you need to make sure you are using a recent version of git (2 28 or later) You can check your version by running:\n`git --version`\n- If you haven't already, set your local default Git branch to `main` You can do so by running:\n`git config --global init defaultBranch main`\n- For more information on the change from `master` to `main` see [GitHub's Renaming Repository](https://github com/github/renaming) #### Create the repository\n1 You should have already created a GitHub account in the [Setting Up Git](https://www theodinproject com/lessons/foundations-setting-up-git) lesson 1 From the GitHub homepage, create a new repository by clicking the \"+\" button in the top-right corner and selecting \"New repository\" *If you are using a smaller viewport, that button may be hidden In that case click on your profile picture in the top-right corner and the button will appear next to your profile name *\n1 Give your repository the name \"git_test\" in the repository name input field Check \"Add a README file\" Then create the repository by clicking the \"Create repository\" button at the bottom of the page 1 This will redirect you to your new repository on GitHub To get ready to copy (clone) this repository onto your local machine, click the green \"Code\" button, which should be to the right of the button displaying the current branch (typically it will display the *main* branch) Then select the SSH option in the \"Clone\" section, and copy the line below it **NOTE: You MUST click the SSH option to get the correct URL **\n1 Let's use the command line on your local machine to create a new directory for all of your Odin projects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15624,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "dd1d2efd2891258e243ba26a2ad8d0b8",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
    "source_type": "git_repo",
    "title": "git_basics",
    "content": "local machine, click the green \"Code\" button, which should be to the right of the button displaying the current branch (typically it will display the *main* branch) Then select the SSH option in the \"Clone\" section, and copy the line below it **NOTE: You MUST click the SSH option to get the correct URL ** 1 Let's use the command line on your local machine to create a new directory for all of your Odin projectsCreate a directory called `repos` with the `mkdir` command in your home folder Your home folder is represented by `~` Note that depending on your OS, there may be some [home directory variation](https://swcarpentry github io/shell-novice/02-filedir html#home-directory-variation) - sometimes `~` stands for `/Users/your_username` and sometimes it stands for `/home/your_username` If you're not sure if you're in your home folder, just type `cd ~` Once it's made, move into it with the `cd` command ```bash\nmkdir repos\ncd repos/\n```\n1 Now it's time to clone your repository from GitHub into your newly created `repos` directory with `git clone` followed by the URL you copied in the last step The full command should look similar to `git clone git@github com:USER-NAME/REPOSITORY-NAME git` If your URL looks like `https://github com/USER-NAME/REPOSITORY-NAME git`, you have selected the HTTPS option, not the required SSH option ```bash\ngit clone git@github com:USER-NAME/REPOSITORY-NAME git\n```\n1 That's it You have successfully connected the repository you created on GitHub to your local machine To test this, run `cd git_test` to move into the new **git_test** folder that was downloaded, then enter `git remote -v` in your command line You should see an output similar to the following, where `USER-NAME` is your GitHub username:\n```bash\norigin  git@github com:USER-NAME/git_test git (fetch)\norigin  git@github com:USER-NAME/git_test git (push)\n```\nThis displays the URL of the repository you created on GitHub, which is the remote for your local copy",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15624,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "e780c34299044bdf6d0d900828b37e6f",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
    "source_type": "git_repo",
    "title": "git_basics",
    "content": "GitHub to your local machine To test this, run `cd git_test` to move into the new **git_test** folder that was downloaded, then enter `git remote -v` in your command line You should see an output similar to the following, where `USER-NAME` is your GitHub username: ```bash origin git@github com:USER-NAME/git_test git (fetch) origin git@github com:USER-NAME/git_test git (push) ``` This displays the URL of the repository you created on GitHub, which is the remote for your local copyYou may have also noticed the word *origin* at the start of the `git remote -v` output, which is the name of your remote connection The name \"origin\" is both the default and the convention for the remote repository, but it could have just as easily been named \"party-parrot\" or \"dancing-banana\" (don't worry about the details of \"origin\" for now; it will come up again near the end of this tutorial) #### Use the Git workflow\n1 Create a new file in the `git_test` folder called \"hello_world txt\" with the command `touch hello_world txt` 1 Type `git status` in your terminal In the output, your `hello_world txt` file should be shown with a red text color as well as listed in a section titled \"Untracked files\" This means that the file is not yet staged 1 Type `git add hello_world txt` This command adds your hello_world txt file to the staging area in Git The staging area is part of the two-step process for making a commit in Git Think of the staging area as a \"waiting room\" for your changes until you commit them Now, type `git status` again In the output, notice that your file is now shown in green and in a section titled \"Changes to be committed\", which means that this file is now in the staging area 1 Type `git commit -m \"Add hello_world txt\"` and then type `git status` once more The output should now say: \"*nothing to commit, working tree clean*\", indicating your changes have been committed Don't worry if you get a message that says \"*upstream is gone*\" This is normal and only shows when your cloned repository currently has no branches It will be resolved once you have followed the rest of the steps in this project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15624,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "982a4b8c2bb807687db81679eab443c6",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
    "source_type": "git_repo",
    "title": "git_basics",
    "content": "staging area 1 Type `git commit -m \"Add hello_world txt\"` and then type `git status` once more The output should now say: \"*nothing to commit, working tree clean*\", indicating your changes have been committed Don't worry if you get a message that says \"*upstream is gone*\" This is normal and only shows when your cloned repository currently has no branches It will be resolved once you have followed the rest of the steps in this projectThe message, \"*Your branch is ahead of 'origin/main' by 1 commit*\" just means that you now have newer snapshots than what is on your remote repository You will be uploading your snapshots further down in this lesson 1 Type `git log` and look at the output You should see an entry for your \"*Add hello_world txt*\" commit You will also see other details which include the author who made the commit and the date and time of when the commit was made If your terminal is stuck in a screen with (END) at the bottom, just press \"q\" to escape You can configure settings for this later, but don't worry about it too much for now #### Modify a file or two\n1 Open README md in your text editor of choice In this example, we will open the directory in Visual Studio Code by using the command `code ` inside your repository MacOS users: If your terminal reads *\"command not found: code\"*, you must head back to [Command Line Basics](https://www theodinproject com/lessons/foundations-command-line-basics#opening-files-in-vscode-from-the-command-line) and follow the instructions provided to allow this command to work 1 Add \"Hello Odin \" to a new line in `README md` and save the file with Ctrl + S (Mac: Cmd + S) if your vs code is not auto saving changes 1 Go back to your terminal, or if you're using Visual Studio Code, open the built-in terminal by pressing Ctrl + ` (backtick) Then type `git status` Notice how the output is similar to when we created our `hello_world txt` file before adding it to the staging area, except the `README md` file is listed in a section titled \"Changes not staged for commit\" The meaning is similar to the \"Untracked files\" section in that the file is not yet added to the staging area 1 Add README md to the staging area with `git add README md` 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15624,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "03623fdf6f0ad7ee76fc01f5d9b43ad2",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
    "source_type": "git_repo",
    "title": "git_basics",
    "content": "Then type `git status` Notice how the output is similar to when we created our `hello_world txt` file before adding it to the staging area, except the `README md` file is listed in a section titled \"Changes not staged for commit\" The meaning is similar to the \"Untracked files\" section in that the file is not yet added to the staging area 1 Add README md to the staging area with `git add README md` 1Can you guess what `git status` will output now `README md` will be displayed in green text in the section titled \"Changes to be committed\" That means `README md` has been added to the staging area The file `hello_world txt` will not show up because it has not been modified since it was committed 1 Open hello_world txt, add some text to it, save it and stage it You can use `git add ` to add all files in the current directory and all subsequent directories to the staging area Then, type `git status` once more, and everything should now be in the staging area 1 Finally, let's commit all of the files that are in the staging area and add a descriptive commit message `git commit -m \"Edit README md and hello_world txt\"` Then, type `git status` once again, which will output the same \"*nothing to commit*\" message as when we previously made a commit 1 Take one last look at your commit history by typing `git log` You should now see three entries #### Push your work to GitHub\nFinally, let's upload your work to the GitHub repository you created at the start of this tutorial 1 Type `git push` To be more specific, type `git push origin main` Since you are not dealing with another branch (other than *main*) or a different remote (as mentioned above), you can leave it as `git push` to save a few keystrokes **NOTE: If at this point you receive a message that says \"Support for password authentication was removed on August 13, 2021 Please use a personal access token instead \", you have followed the steps incorrectly and cloned with HTTPS, not SSH Please follow the steps for [switching remote URLs from HTTPS to SSH](https://docs github com/en/get-started/getting-started-with-git/managing-remote-repositories platform=linux#switching-remote-urls-from-https-to-ssh) to change your remote to SSH, then attempt to push to Github",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15624,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "2d906532101cf4db8713edb7b3a32ed7",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
    "source_type": "git_repo",
    "title": "git_basics",
    "content": "as `git push` to save a few keystrokes **NOTE: If at this point you receive a message that says \"Support for password authentication was removed on August 13, 2021 Please use a personal access token instead \", you have followed the steps incorrectly and cloned with HTTPS, not SSH Please follow the steps for [switching remote URLs from HTTPS to SSH](https://docs github com/en/get-started/getting-started-with-git/managing-remote-repositories platform=linux#switching-remote-urls-from-https-to-ssh) to change your remote to SSH, then attempt to push to Github**\n1 Type `git status` one final time It should output \"*Your branch is up to date with 'origin/main' nothing to commit, working tree clean*\" 1 When you refresh your repository page on GitHub, you should see the README md and hello_world txt files that you just pushed there from your local machine #### Avoid editing directly on GitHub\nWhen trying to make quick changes to the files in your repo, such as attempting to fix a typo in your README md, you might be tempted to make this change directly via Github However, it is best to avoid this, as it will cause issues that require more advanced Git knowledge than we want to go over at this stage (it is covered in a future lesson) For now, it is advised to make any changes via your local files, then commit and push them using Git commands in your terminal once ready Cheatsheet\nThis is a reference list of the most commonly used Git commands (You might consider bookmarking this handy page ) Try to familiarize yourself with the commands so that you can eventually remember them all:\nCommands related to a remote repository:\ngit clone git@github com:USER-NAME/REPOSITORY-NAME git\ngit push or git push origin main (Both accomplish the same goal in this context)\nCommands related to the workflow:\ngit add git commit -m \"A message describing what you have done to make this snapshot different\"\nCommands related to checking status or log history\ngit status\ngit log\nThe basic Git syntax is program | action | destination For example,\ngit add is read as git | add | , where the period represents everything in the current directory;\ngit commit -m \"message\" is read as git | commit -m | \"message\"; and\ngit status is read as git | status | (no destination)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15624,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "b805f56f6f0cd1d385151a8ef4184b34",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
    "source_type": "git_repo",
    "title": "git_basics",
    "content": "you have done to make this snapshot different\" Commands related to checking status or log history git status git log The basic Git syntax is program | action | destination For example, git add is read as git | add | , where the period represents everything in the current directory; git commit -m \"message\" is read as git | commit -m | \"message\"; and git status is read as git | status | (no destination)Git best practices\nThere's a lot to learn about using Git But it is worth taking the time to highlight some best practices so that you can be a better collaborator Git is not only helpful when collaborating with others It's also useful when working independently You will be relying more and more on your own commit history in the future when revisiting old code Two helpful best practices to consider are atomic commits and leveraging those atomic commits to make your commit messages more useful to future collaborators An atomic commit is a commit that includes changes related to only one feature or task of your program There are two main reasons for doing this: first, if something you change turns out to cause some problems, it is easy to revert the specific change without losing other changes; and second, it enables you to write better commit messages You'll learn more about what a good commit message looks like in a future lesson Changing the Git commit message editor\nIf you are using Visual Studio Code (and you should be if you're following this curriculum), there's a way to ensure that if you use git commit without the message flag (-m), you won't get stuck writing your commit message in Vim Changing the default message editor is a good idea in case you accidentally omit the flag, unless you prefer using Vim There is no downside to changing it, because you will have the option to write your commit messages in the terminal or in the comfort of VS Code The following command will set this configuration Type (or copy & paste) this command into your terminal and hit Enter bash\ngit config --global core editor \"code --wait\"\nThere will be no confirmation or any output on the terminal after entering this command With that done, you can now choose to use either git commit -m \"your message here\" or git commit to type your message with Visual Studio Code To make a commit with Visual Studio Code as the text editor, just type git commit After you hit Enter a new tab in VS Code will open for you to write your commit message You may provide more details on multiple lines as part of your commit message",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15624,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "d4b278464562e55c97409eaf012a7876",
    "source_file": "corpus\\git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
    "source_type": "git_repo",
    "title": "git_basics",
    "content": "With that done, you can now choose to use either git commit -m \"your message here\" or git commit to type your message with Visual Studio Code To make a commit with Visual Studio Code as the text editor, just type git commit After you hit Enter a new tab in VS Code will open for you to write your commit message You may provide more details on multiple lines as part of your commit messageAfter typing your commit message, save it Ctrl + S (Mac: Cmd + S) and close the tab If you return to the command line, you will see your commit message and a summary of your changes Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you create a new repository on GitHub How do you copy a repository onto your local machine from GitHub What is the default name of your remote connection Explain what origin is in git push origin main Explain what main is in git push origin main Explain the two-stage system that Git uses to save files How do you check the status of your current repository How do you add files to the staging area in Git How do you commit the files in the staging area and add a descriptive message How do you push your changes to your repository on GitHub How do you look at the history of your previous commits Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15624,
      "relative_path": "git_repos\\odin-project\\git\\foundations_git\\git_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "26758c15f7bac65f43017095ea9fdd62",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
    "source_type": "git_repo",
    "title": "a_deeper_look_at_git",
    "content": "Introduction\nGit is a crucial skill to have, whether you're just a hobbyist or you aim to become a professional web developer It's the \"save\" button on steroids and allows for seamless collaboration There really aren't all that many commands for you to learn, but sometimes the real difficulty of Git comes from visualizing what's happening In this lesson, we'll help with the visualization by diving deeper than just the git add and git commit and git push commands you've mostly been using We'll cover topics such as Remotes, Pointers, and Changing Git History This will expand your understanding of what's actually going on under the hood with Git It is very important to take a look at all of this before progressing any further with the curriculum The project work is becoming more and more complex, so using a disciplined Git workflow is no longer optional Hopefully, after going through this lesson, you'll be much more comfortable changing your Git history and have a better understanding of Git as a whole Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson History-changing Git commands Different ways of changing history Using remotes to change history Dangers of history-changing operations Best practices of history-changing operations Pointers Changing history\nSo let's say you're comfortable writing good commit messages and you're working with branches to have a good Git workflow going But nobody is perfect, and as you're writing some beautiful code something goes wrong Maybe you commit too early and are missing a file Maybe you mess up one of your commit messages and omit a vital detail Let's look at some ways we can change recent and distant history to fit our needs We're going to cover how to:\nChange our most recent commit\nChange multiple commit messages\nReorder commits\nSquash commits together\nSplit up commits\nGetting set up\nBefore we get started with the lesson, let's create a Git playground in which we can safely follow along with the code and perform history-changing operations Go to GitHub, and as you have in the past, create a new repository Call it whatever you'd like, and clone this repository to your local system Now, let's cd into the repository we just cloned and create some new files Once you're in the repository, follow along with the following commands (including the typo) Look them up if you're confused about anything that's happening bash\ntouch test{1 4} md\ngit add test1 md && git commit -m 'Create first file'\ngit add test2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15178,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "c433b3fb8c16d0ed92fef57573229a35",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
    "source_type": "git_repo",
    "title": "a_deeper_look_at_git",
    "content": "the past, create a new repository Call it whatever you'd like, and clone this repository to your local system Now, let's cd into the repository we just cloned and create some new files Once you're in the repository, follow along with the following commands (including the typo) Look them up if you're confused about anything that's happening bash touch test{1 4} md git add test1 md && git commit -m 'Create first file' git add test2md && git commit -m 'Create send file'\ngit add test3 md && git commit -m 'Create third file and create fourth file'\nSetting up the code editor\nTo perform certain Git commands that require opening a text editor, such as git commit --amend and git rebase -i, it's important to configure your code editor correctly By default, Git opens the text editor in the command-line interface (CLI), which may prevent you from saving and closing the editor after making changes To set up your code editor properly, you can follow the instructions provided in the Git Basics lesson Here's the specific section that covers the process: Changing the Git Commit Message Editor Changing the last commit\nSo if we look at the last commit we made Uh-Oh , if you type in git status and git log you can see we forgot to add a file Let's add our missing file and run git commit --amend\nbash\ngit add test4 md\ngit commit --amend\nWhat happened here is we first updated the staging area to include the missing file, and then we replaced the last commit with our new one to include the missing file If we wanted to, we could have changed the message of the commit and it would have overwritten the message of the past commit Remember to only amend commits that have not been pushed anywhere The reason for this is that git commit --amend does not edit the last commit, it replaces that commit with an entirely new one This means that you could potentially destroy a commit other developers are basing their work on When rewriting history always make sure that you're doing so in a safe manner, and that your coworkers are aware of what you're doing Changing multiple commits\nNow let's say we have commits further back in our history that we want to modify This is where the beautiful command git rebase comes into play We're going to get deeper into the complexities of rebase later on in this lesson, but for now we're going to start out with some very basic usage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15178,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "88004cb0c8503eea9747dc3b138b9f61",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
    "source_type": "git_repo",
    "title": "a_deeper_look_at_git",
    "content": "that you're doing so in a safe manner, and that your coworkers are aware of what you're doing Changing multiple commits Now let's say we have commits further back in our history that we want to modify This is where the beautiful command git rebase comes into play We're going to get deeper into the complexities of rebase later on in this lesson, but for now we're going to start out with some very basic usagegit rebase -i is a command which allows us to interactively stop after each commit we're trying to modify, and then make whatever changes we wish We do have to tell this command which is the last commit we want to edit For example, git rebase -i HEAD~2 allows us to edit the last two commits Let's see what this looks like in action, go ahead and type in:\nbash\ngit log\ngit rebase -i HEAD~2\nYou should notice that when rebasing, the commits are listed in opposite order compared to how we see them when we use git log Take a minute to look through all of the options the interactive tool offers you Now let's look at the commit messages at the top of the tool If we wanted to edit one of these commits, we would change the word pick to be edit for the appropriate commit If we wanted to remove a commit, we would remove it from the list, and if we wanted to change their order, we would change their position in the list Let's see what an edit looks like bash\nedit eacf39d Create send file\npick 92ad0af Create third file and create fourth file\nThis would allow us to edit the typo in the Create send file commit to be Create second file Perform similar changes in your interactive rebase tool, but don't copy and paste the above code since it won't work Save and exit the editor, which will allow us to edit the commit with the following instructions:\nbash\ngit commit --amend\nThe command above will allow you to amend the commit Once you're satisfied with your changes, you can complete the rebase with the following:\nbash\ngit rebase --continue\nSo let's edit our commit by typing git commit --amend, fixing the typo in the title, and then finishing the rebase by typing git rebase --continue That's all there is to it Have a look at your handiwork by typing git log, and seeing the changed history",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15178,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "8c8434c25f8799c44c0312cca29247f2",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
    "source_type": "git_repo",
    "title": "a_deeper_look_at_git",
    "content": "--amend The command above will allow you to amend the commit Once you're satisfied with your changes, you can complete the rebase with the following: bash git rebase --continue So let's edit our commit by typing git commit --amend, fixing the typo in the title, and then finishing the rebase by typing git rebase --continue That's all there is to it Have a look at your handiwork by typing git log, and seeing the changed historyIt seems simple, but this is a very dangerous tool if misused, so be careful Most importantly, remember that if you have to rebase commits in a shared repository, make sure you're doing so for a very good reason that your coworkers are aware of Squashing commits\nUsing squash for our commits is a very handy way of keeping our Git history tidier by combining multiple commits into one It's important to know how to squash, because this process may be the standard on some development teams Squashing makes it easier for others to understand the history of your project What often happens when a feature is merged, is we end up with some visually complex logs of all the changes a feature branch had on a main branch These commits are important while the feature is in development, but aren't really necessary when looking through the entire history of your main branch Let's say we want to squash the second commit into the first commit on the list, which is Create first file First let's rebase all the way back to our root commit by typing git rebase -i --root Now what we'll do is pick that first commit, as the one which the second commit is being squashed into:\nbash\npick e30ff48 Create first file\nsquash 92aa6f3 Create second file\npick 05e5413 Create third file and create fourth file\nRename the commit to Create first and second file, then finish the rebase That's it Run git log and see how the first two commits got squashed together Splitting up a commit\nBefore diving into Remotes, we're going to have a look at a handy Git command called git reset Let's have a look at the commit Create third file and create fourth file At the moment we're using blank files for convenience, but let's say these files contained functionality and the commit was describing too much at once",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15178,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "1d947df6bdda8e14cc23714e43c62561",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
    "source_type": "git_repo",
    "title": "a_deeper_look_at_git",
    "content": "That's it Run git log and see how the first two commits got squashed together Splitting up a commit Before diving into Remotes, we're going to have a look at a handy Git command called git reset Let's have a look at the commit Create third file and create fourth file At the moment we're using blank files for convenience, but let's say these files contained functionality and the commit was describing too much at onceIn that case what we could do is split it up into two smaller commits by, once again, using the interactive rebase tool We can open up the tool just like last time, change pick to edit for the commit we're going to split But instead, what we're going to do is run git reset HEAD~, which resets the commit to the one right before HEAD This allows us to add the files individually and commit them individually All together it would look something like this:\nbash\ngit reset HEAD~\ngit add test3 md && git commit -m 'Create third file'\ngit add test4 md && git commit -m 'Create fourth file'\nLet's start by looking a bit closer at what happened here When you ran git reset, you reset the current branch by pointing HEAD at the commit right before it At the same time, git reset also updated the index (the staging area) with the contents of wherever HEAD is now pointed So our staging area was also reset to what it was at the prior commit - which is great - because this allowed us to add and commit both files separately Now let's say we want to move where HEAD points to but don't want to touch the staging area If we want to leave the index alone, you can use git reset --soft This would only perform the first part of git reset where the HEAD is moved to point somewhere else You can think of git reset --soft as a more powerful amend Instead of changing the last commit, you can go back multiple commits and combine all the changes included in them into one commit The last part of reset we want to touch upon is git reset --hard What this does is it performs all the steps of git reset, moving the HEAD and updating the index, but it also updates the working directory This is important to note because it can be dangerous as it can potentially destroy data A hard reset overwrites the files in the working directory to make it look exactly like the staging area of wherever HEAD ends up pointing to",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15178,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "15256be64ffe82daf1f16c496dfb67b3",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
    "source_type": "git_repo",
    "title": "a_deeper_look_at_git",
    "content": "want to touch upon is git reset --hard What this does is it performs all the steps of git reset, moving the HEAD and updating the index, but it also updates the working directory This is important to note because it can be dangerous as it can potentially destroy data A hard reset overwrites the files in the working directory to make it look exactly like the staging area of wherever HEAD ends up pointing toSimilarly to git commit --amend, a hard reset is a destructive command which overwrites history This doesn't mean you should completely avoid it if working with shared repositories on a team with other developers You should, however, make sure you know exactly why you're using it, and that your coworkers are also aware of how and why you're using it Branches are pointers\nWhile the focus of this lesson was more advanced tools for changing Git history, we're going into another advanced topic that might be hard for some to understand - Pointers You've already learned about branches in the Rock Paper Scissors revisited lesson and how these hold multiple alternate reality versions of our files Now we're going to discuss what that actually means under the hood, and what it means for branches to be pointers Before we dive into branches, let's talk about commits If you recall this Git basics lesson from foundations, they were described as Snapshots If it helps, think of this in a very literal sense Every time you type in git commit, your computer is taking a picture of all the file contents that have been staged with git add In other words, your entire tracked workspace gets copied So what is a branch Based off of your exposure, you might be visualizing a branch as a group of commits This actually isn't the case A branch is actually a pointer to a single commit Hearing this, your first thought might be \"Well if a branch is just a finger pointing at a single commit, how does that single commit know about all the commits that came before it \" The answer to this question is very simple: Each commit is also a pointer that points to the commit that came before it Wow This might be a lot to take in, so let's take a moment to absorb that fact Now that you've had a second to gather your thoughts and attempt to wrap your head around this concept, it might help to go back and look at a concrete example of pointers we used in this lesson Let's think back to our use of git rebase -i HEAD~2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15178,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "58b2259f3c7b69340b1ff195a6785229",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
    "source_type": "git_repo",
    "title": "a_deeper_look_at_git",
    "content": "that points to the commit that came before it Wow This might be a lot to take in, so let's take a moment to absorb that fact Now that you've had a second to gather your thoughts and attempt to wrap your head around this concept, it might help to go back and look at a concrete example of pointers we used in this lesson Let's think back to our use of git rebase -i HEAD~2If you can remember, this command lets us edit the last two commits Do you have any guesses on how Git knew which two commits to edit That's right, by using pointers We start at HEAD, which is a special pointer for keeping track of the branch you're currently on HEAD points to our most recent commit in the current branch That commit points to the commit made directly before it, which we can call commit two That's how git rebase -i HEAD~2 starts with a HEAD pointer, and then follows subsequent pointers to find which two commits to edit You might be feeling overwhelmed at this point, so let's recap what we've learned A branch is a pointer to a single commit A commit is a snapshot, and it's a pointer to the commit directly behind it in history That's it Assignment\n1 Read the chapter on [Rebasing covered by git-scm](https://git-scm com/book/en/v2/Git-Branching-Rebasing) for an even deeper dive into Rebasing 1 Read the chapter on [Reset covered by git-scm](https://git-scm com/book/en/v2/Git-Tools-Reset-Demystified) for a deeper dive into `git reset` #### Reminder: Default Git Branch Name Change\nIn modern Git setups, the default branch is typically called `main` instead of `master` Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How can you amend your last commit What are some different ways to rewrite history What does it mean for branches to be pointers Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read this Git Cheat Sheet if you need a reference sheet Watch this video about Rebase & Merge for an example of how to use both rebase and merge",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15178,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "c1e5a14b4338c0ada1c82a60407d9bee",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
    "source_type": "git_repo",
    "title": "a_deeper_look_at_git",
    "content": "to memorize or master this knowledge How can you amend your last commit What are some different ways to rewrite history What does it mean for branches to be pointers Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental Read this Git Cheat Sheet if you need a reference sheet Watch this video about Rebase & Merge for an example of how to use both rebase and mergeRead the chapter on Branches covered by git-scm if you want an even deeper dive into Branches",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15178,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\a_deeper_look_at_git.md",
      "source_type": "git_repo"
    },
    "token_count": 102,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "924c7b5c0096f695411e6c75191dadc6",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
    "source_type": "git_repo",
    "title": "using_git_in_the_real_world",
    "content": "Introduction\nGit basics are very straightforward, but it sometimes feels like a bottomless pit when you find yourself on the wrong side of a confusing error situation It's doubly frustrating because you think that messing up or trying the wrong solution can lose data It's actually very hard to \"lose\" data with Git but it can certainly be hiding somewhere you wouldn't think to look without an experienced dev poking around The thing about Git is that, unless you've got a seriously impressive memory, you can't just master it by reading about it; you need hands-on practice For example, find a problem you want to fix, run into a merge error, and then dive into Google to learn a new Git technique along the way to help you fix that problem To help you out, come back and refer to this lesson again when you're in trouble We'll first cover a real-world example of a GitHub workflow used on this very project The Additional Resources section below should also help you find high quality resources for when you need them later on Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson A reminder about commit messages Using Git to make open source contributions Commit messages for collaboration\nBefore we dive into workflows, take a minute to remind yourself about good commit messages You can check the Commit Messages lesson for a reminder This is a good time to draw particular attention to Conventional Commits, a standard for commits that is gaining more and more popularity for collaborative projects It helps to make sure your commit message gives a clear description of its purpose to anyone reading Going forward, you may like to implement these (if you aren't already ), or at least be aware of them for when you read other repos Workflow diagram\nHere is a visual representation of the workflow with Git and GitHub that illustrates how changes flow between repositories during collaboration graph TD;\nA[Upstream Repository: TheOdinProject/curriculum] -->|git fetch upstream/main| B[Local Repository: main];\nB -->|git checkout your_branch_name| C[Local Repository: your_branch_name];\nC -->|git push origin your_branch_name| D[Your Fork on GitHub];\nD -->|Create Pull Request to Upstream| E[Pull Request on GitHub];\nE -->|Maintainers Merge PR to Upstream| A[Upstream Repository: TheOdinProject/curriculum];\nAssignment\nLet's say you want to contribute to [our curriculum repo](https://github com/TheOdinProject/curriculum/)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9675,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "9d5166a1328547acd8066f897792f8a1",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
    "source_type": "git_repo",
    "title": "using_git_in_the_real_world",
    "content": "visual representation of the workflow with Git and GitHub that illustrates how changes flow between repositories during collaboration graph TD; A[Upstream Repository: TheOdinProject/curriculum] -->|git fetch upstream/main| B[Local Repository: main]; B -->|git checkout your_branch_name| C[Local Repository: your_branch_name]; C -->|git push origin your_branch_name| D[Your Fork on GitHub]; D -->|Create Pull Request to Upstream| E[Pull Request on GitHub]; E -->|Maintainers Merge PR to Upstream| A[Upstream Repository: TheOdinProject/curriculum]; Assignment Let's say you want to contribute to [our curriculum repo](https://github com/TheOdinProject/curriculum/)How do you contribute when you do not have write access to the repository Below is a production-ready workflow that is actually used by contributors to this website We'll assume here that you have commented on an [open issue on our repo](https://github com/TheOdinProject/curriculum/issues) and that it has been assigned to you If you don't have an issue assigned to you, you can still follow along with some arbitrary updates, just stop before step 3 in the **Sending your pull request** section since your changes aren't legitimate The key players in this story will be the `upstream` (the original GitHub repository), the `origin` (your fork of that repo), and the \"local\" repository (your local clone of `origin`) Think of it as a happy triangle except that \"local\" can only pull from `upstream`, not push, as illustrated in the workflow diagram above #### Initial setup\n1 Read [the TOP contributing guide](https://github com/TheOdinProject/curriculum/blob/main/CONTRIBUTING md) for the project 1 Open the [curriculum repository](https://github com/TheOdinProject/curriculum/tree/main) in your browser Use the \"Fork\" button at the top-right of the repository's page to create a copy of the entire repository (not just one file) in your own GitHub account 1 Clone your forked repository onto your local machine using something like `git clone git@github com:your_user_name_here/curriculum git` (you can get the url from the little widget on the sidebar on the right of that repo's page on GitHub) 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9675,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ea9bed735ca234e60c77145ddd9c174e",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
    "source_type": "git_repo",
    "title": "using_git_in_the_real_world",
    "content": "1 Open the [curriculum repository](https://github com/TheOdinProject/curriculum/tree/main) in your browser Use the \"Fork\" button at the top-right of the repository's page to create a copy of the entire repository (not just one file) in your own GitHub account 1 Clone your forked repository onto your local machine using something like `git clone git@github com:your_user_name_here/curriculum git` (you can get the url from the little widget on the sidebar on the right of that repo's page on GitHub) 1Because you cloned the repository, you've already got a remote that points to `origin`, which is your fork on GitHub You will use this to push changes back up to GitHub You'll also want to be able to pull directly from the original repository on GitHub, which we'll call `upstream`, by setting it up as another remote Do this by using the git command below inside the project folder `curriculum`:\n```bash\ngit remote add upstream git@github com:TheOdinProject/curriculum git\n```\n#### Ongoing workflow\nWe've got one main branch -- `main` `main` is for production-ready code Any code deployed to `main` (on the original repo, not on your fork) will be tested in staging and shipped to production You'll be working in a feature branch and submitting your pull requests to the `main` branch 1 Create a new feature branch for whatever feature you want to build, and add commits following the same practices that you learned about in the [branching section of our Revisiting Rock Paper Scissors lesson](https://www theodinproject com/lessons/foundations-revisiting-rock-paper-scissors#using-branches) 1 When you're done with your feature, odds are that someone has made changes to the upstream repository in the meantime That means that your `main` branch is probably out of date Fetch the most updated copy using `git fetch upstream` 1 Now merge the upstream's changes into your local version of `main` using `git merge` Specifically, you'll first want to make sure you're on your `main` branch using `git checkout main` and then `git merge upstream/main` to merge in those upstream changes that we just fetched 1 Now that your `main` branch is up-to-date with upstream, you need to merge it into your feature branch",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9675,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "74712babcec0ffef9dc6deede75902d2",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
    "source_type": "git_repo",
    "title": "using_git_in_the_real_world",
    "content": "of date Fetch the most updated copy using `git fetch upstream` 1 Now merge the upstream's changes into your local version of `main` using `git merge` Specifically, you'll first want to make sure you're on your `main` branch using `git checkout main` and then `git merge upstream/main` to merge in those upstream changes that we just fetched 1 Now that your `main` branch is up-to-date with upstream, you need to merge it into your feature branchYes, that is correct and it seems odd at first Don't you want to merge the feature branch into the `main` branch instead Yes, you do, *but not yet* **Your feature branch is dirty ** You don't know if it has any conflicts which might creep up Any time you are merging in more \"senior\" branches (e g merging the feature into `main`), you want it to be a clean and conflict-free merge if possible So you first merge the \"senior\" branch into your dirty branch to resolve those conflicts Run `git checkout your_feature_name` to jump back onto your feature branch, then `git merge main` to merge `main` into it 1 You may have merge conflicts resolve those using the skills you learned in [the Working with Remotes lesson](https://www theodinproject com/lessons/javascript-working-with-remotes) Note that a `git fetch upstream` followed by a `git merge upstream/some_branch` is the EXACT same thing as doing a `git pull upstream some_branch` We prefer to split it up here so that we can explicitly walk through the steps #### Sending your pull request\n1 Now that your feature branch is squeaky clean and you know it'll merge cleanly into `main`, the hard part is all over All that's left is to make the Pull Request (often abbreviated as PR) against our `upstream` repo on GitHub 1 Now you want to send your feature branch back up to your `origin` (your fork of the `upstream` repository) You can't send directly to `upstream` because you don't have access, so you'll need to make a pull request Use `git push origin your_feature_name` to ship your feature branch up to your fork on GitHub **If you have not been assigned an issue to work on, stop here",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9675,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4db8ecfff09848abbbdfba3ac826a976",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
    "source_type": "git_repo",
    "title": "using_git_in_the_real_world",
    "content": "as PR) against our `upstream` repo on GitHub 1 Now you want to send your feature branch back up to your `origin` (your fork of the `upstream` repository) You can't send directly to `upstream` because you don't have access, so you'll need to make a pull request Use `git push origin your_feature_name` to ship your feature branch up to your fork on GitHub **If you have not been assigned an issue to work on, stop here** Do not open a test/practice PR, and any such PRs will be treated as spam and closed by a maintainer without review If you have been assigned to work on an issue by a maintainer, feel free to continue with the next step 1 **If you have completed an assigned issue**, the final step is to submit a pull request to merge your feature branch into the original `upstream` repository's `main` branch This can be done using GitHub's interface 1 Shake your moneymaker, you're an OSS contributor Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What name is typically given for a Git remote that points to a repo that's been forked Can you directly send your changes to a repository that you don't own/have write access to What should you do immediately before merging main into your feature branch Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Seth Robertson's Git Best Practices\nLearn about Git Branching from Peter Cottle using his interactive branching tutorial Dangit, Git is a quick reference to get you out of common Git problems This article on How to undo (almost) anything with Git will walk you through some of the many options Git provides for undoing various mistakes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9675,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\using_git_in_the_real_world.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "edbe917959b6f467588eceab10a33c14",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\working_with_remotes.md",
    "source_type": "git_repo",
    "title": "working_with_remotes",
    "content": "Introduction\nSo far, you've been working with remote repositories each time you've pushed or pulled from your own GitHub repository while working on the curriculum's various projects In this section, we're going to cover  slightly more advanced topics, which you might not have yet encountered or had to use Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Using remotes to change history Dangers of history-changing operations Best practices of history-changing operations Force-pushing with Git\nLet's say you're no longer working on a project all by yourself, but with someone else You want to push a branch you've made changes on to a remote repository Normally, Git will only let you push your changes if you've already updated your local branch with the latest commits from this remote If you haven't updated your local branch, and you're attempting to git push a commit which would create a conflict on the remote repository, you'll get an error message This is actually a great thing This is a safety mechanism to prevent you from overwriting commits created by the people you're working with, which could be disastrous You get the error because your history is outdated You might perform a brief query and find the command git push --force This command overwrites the remote repository with your own local history So what would happen if we used this while working with others Well, let's see what would happen when we're working with ourselves Type the following commands into your terminal, and when the interactive rebase tool pops up remove our commit for Create fourth file:\nbash\ngit push origin main\ngit rebase -i --root\ngit push --force\ngit log\nHuh, that's interesting We can’t find our fourth file on our local system Let's check our GitHub repository to see if it's there Oh no, we just destroyed it In this scenario, the danger - you could potentially destroy the work of those you're collaborating with git push --force is a very dangerous command, and it should be used with caution when collaborating with others Instead, you can fix your outdated history error by updating your local history using fetch, merge, and then attempting to push again Let's consider a different scenario:\nbash\ntouch test4 md\ngit add test4 md && git commit -m \"Create fifth file\"\ngit push origin main\ngit log\nWe look at our commit message and realize oops, we made a mistake",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8035,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\working_with_remotes.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3b26f1eb0a29fa42f533b31ea4ec5d6a",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\working_with_remotes.md",
    "source_type": "git_repo",
    "title": "working_with_remotes",
    "content": "a very dangerous command, and it should be used with caution when collaborating with others Instead, you can fix your outdated history error by updating your local history using fetch, merge, and then attempting to push again Let's consider a different scenario: bash touch test4 md git add test4 md && git commit -m \"Create fifth file\" git push origin main git log We look at our commit message and realize oops, we made a mistakeWe want to undo this commit and are once again tempted to just force the push But wait, remember, this is a very dangerous command If we're ever considering using it, always check if it's appropriate and if we can use a safer command instead If we're collaborating with others and want to undo a commit we just made, we can instead use git revert bash\ngit revert HEAD\ngit push origin main\nRemember when we were working with HEAD, aka the current commit we're viewing, while rebasing What this would do is it would revert the changes to HEAD Then we would push our new commit to whichever branch we're working on, which in this example is main even though normally our work would most likely be on a feature-branch So now that we've learned about the various dangers of git push --force, you're probably wondering why it exists and when to use it A very common scenario in which developers use git push --force is updating pull requests Collaborative work is covered more in depth in a separate lesson, but the take-away from this section should be that the --force option should be used only when you are certain that it is appropriate There are also less common scenarios, such as when sensitive information is accidentally uploaded to a repository and you want to remove all occurrences of it It is worth giving special mention to git push --force-with-lease, a command which in some companies is the default option The reason for this is that it's a fail-safe It checks if the branch you're attempting to push to has been updated and sends you an error if it has This gives you an opportunity to, as mentioned before, fetch the work and update your local repository Dangers and best practices\nLet's review the dangers we've addressed so far I know, I know, it's scary stuff - but we have to be mindful or our coworkers might end up hating our guts If you look back through this lesson you'll see a common thread",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8035,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\working_with_remotes.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "968797d404d357125bb64a731a24d17e",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\working_with_remotes.md",
    "source_type": "git_repo",
    "title": "working_with_remotes",
    "content": "to has been updated and sends you an error if it has This gives you an opportunity to, as mentioned before, fetch the work and update your local repository Dangers and best practices Let's review the dangers we've addressed so far I know, I know, it's scary stuff - but we have to be mindful or our coworkers might end up hating our guts If you look back through this lesson you'll see a common threadcommit --amend, rebase, reset, push --force are all especially dangerous when you're collaborating with others These commands can destroy work your coworkers have created So keep that in mind When attempting to rewrite history, always check the dangers of the particular command you're using and follow these best practices for the commands we've covered:\nIf working on a team project, make sure rewriting history is safe to do and others know you're doing it Ideally, stick to using these commands only on branches that you're working with by yourself Using the -f flag to force something should scare you, and you better have a really good reason for using it Don't push after every single commit, changing published history should be avoided when possible Regarding the specific commands we've covered:\nFor git commit --amend never amend commits that have been pushed to remote repositories For git rebase never rebase a repository that others may work off of For git reset never reset commits that have been pushed to remote repositories For git push --force only use it when appropriate, use it with caution, and preferably default to using git push --force-with-lease Assignment\n1 Read through [GitHub's documentation on merge conflicts](https://docs github com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/about-merge-conflicts)\n- It's only a matter of time until you run into one (if you haven't already) While merge conflicts might seem intimidating, they're actually very simple Take your time with this resource and make sure you look at the two different ways the documentation suggests resolving merge conflicts - on GitHub itself, and on your command line While you might not need this right now, keeping the source of this documentation in the back of your mind will prove invaluable for when you eventually run into a merge conflict and aren't sure where to find a solution 1 Read the entirety of [Think Like (a) Git](https://think-like-a-git net/sections/about-this-site",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8035,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\working_with_remotes.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "33a06d072c09decd163ea6e305752f2c",
    "source_file": "corpus\\git_repos\\odin-project\\git\\intermediate_git\\working_with_remotes.md",
    "source_type": "git_repo",
    "title": "working_with_remotes",
    "content": "resource and make sure you look at the two different ways the documentation suggests resolving merge conflicts - on GitHub itself, and on your command line While you might not need this right now, keeping the source of this documentation in the back of your mind will prove invaluable for when you eventually run into a merge conflict and aren't sure where to find a solution 1 Read the entirety of [Think Like (a) Git](https://think-like-a-git net/sections/about-this-sitehtml)\n- Take your time with this resource as well, it's very well written and will be very helpful in solidifying your understanding of Git Make sure to read all the sections Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a safe way to forcefully push history changes to a remote repository What are the dangers of history-changing operations What are best practices of history-changing operations Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental If you're looking for an interactive way to deepen your knowledge of working with Git, check out this game, Learn Git Branching\nTo understand how revert fits into a collaborative workflow and why it’s preferred over reset for shared repositories, watch this - Git Revert and why",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8035,
      "relative_path": "git_repos\\odin-project\\git\\intermediate_git\\working_with_remotes.md",
      "source_type": "git_repo"
    },
    "token_count": 284,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ae021a034741bfd07b4abf0210539970",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\applying.md",
    "source_type": "git_repo",
    "title": "applying",
    "content": "Introduction\nThe next step is to actually apply Don't send all your applications out at once You'll get totally overwhelmed if you start hearing back from people and need to complete tasks all at once Treat it like an iterative process where you'll send out several applications each day, learn from any mistakes you can identify based on feedback from the process, and try again the next day This is NOT an excuse to procrastinate or only send out one application a day You should have a definite goal for number of applications per day 3 5 10 Over time, you will work your way through your Excel list It's usually good to start at the bottom with the companies that you would barely work at Once you feel comfortable with your application-sending and hopefully interviewing abilities, you can start tackling the companies at the top that you really want to work for Go in the side door\nWhere do you start Do two things at once -- send applications to a few companies towards the bottom of your list to practice but also look at the top companies on your list and build a strategy Remember, the best way to get in is to NOT use their online resume drop but to instead identify a real human being at the company and connect with that person somehow Even better is to be so publicly brilliant that they come to you but we can't have it all So there are probably a few companies that you'd really like to work for You'll want to spend a lot more time on them than you would for the ones at the bottom (which are hopefully good for interview practice) Not only should you try to find a real human being at the company, but you can also potentially get noticed by tailoring your project work to them You'll be building projects (I hope) to stay in practice anyway, so make one of those a clone of the top company's website with a new feature you'd like to see, then use that to display your interest Get to know the company and its needs and see if you can reach out to address them somehow Do they have local events you can visit What do they sponsor This stuff takes creativity You need to walk the line where you're not a stalker but you do care enough to push hard If you're wrong, they may say no It happens, you'll live and move on But you'd better try You'll probably figure things out that will help you with other companies anyway",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6725,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\applying.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "40c315e0ed426871577f45f88cb7d76f",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\applying.md",
    "source_type": "git_repo",
    "title": "applying",
    "content": "see if you can reach out to address them somehow Do they have local events you can visit What do they sponsor This stuff takes creativity You need to walk the line where you're not a stalker but you do care enough to push hard If you're wrong, they may say no It happens, you'll live and move on But you'd better try You'll probably figure things out that will help you with other companies anywayGetting noticed by a startup you want to work for\nPerseverance through the process\nOne of the key parts of the process, though, is keeping your spirits up It SUCKS looking for jobs full time You can go weeks without hearing a peep from anyone Then you'll have a day where you get an interview and your spirits will soar and then you won't pass and you'll feel like crap again Then you'll get another three interviews in one day and it'll be crazy for a time before another long waiting period The inconsistency of it is maddening, so do what you need to in your own life to make sure you don't let it get you down It's also really important to not act/sound desperate, even though you probably are No one wants to hire someone who is desperate because it violates so much of the social proof that people use to figure out if you're a good candidate -- if no one else will hire you and you're so desperate, it makes them wonder what's wrong with you And, frankly, there's nothing wrong everyone goes through a grueling process when they start looking for jobs Just don't let it get to you (or at least don't make it sound like it's gotten to you) The point here is really just to make sure you understand that it's a really annoying/painful/long process for everyone and you're not alone Resume versions\nIf you're applying to several different types of positions, tailor your resume for the specific type of opportunity Just remember that, if you're submitting it virtually, they can see the title It's generally a good idea to set the file name of your resume to your name This has the additional benefit of a recruiter seeing your name and remembering it It's also important to note that if you're not gaining traction getting responses with a certain resume, don't be afraid to switch it up Keep track of the changes and see which version performs better than the others Cover letters\nSome positions require you to also submit cover letters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6725,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\applying.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "49542905ed0d2e8fed0ed3a7e5ff6225",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\applying.md",
    "source_type": "git_repo",
    "title": "applying",
    "content": "good idea to set the file name of your resume to your name This has the additional benefit of a recruiter seeing your name and remembering it It's also important to note that if you're not gaining traction getting responses with a certain resume, don't be afraid to switch it up Keep track of the changes and see which version performs better than the others Cover letters Some positions require you to also submit cover lettersIn our own experience, we've rarely actually seen the cover letter that an applicant has submitted for a job posting They have a magical way of getting lost or ignored If someone's spending < 10 seconds looking at your resume at first, why are they going to read a long cover letter Though they may not look at your cover letter during the first pass, if your resume looks interesting then the cover letter has a way of becoming more important The hiring manager wants to make sure the story he crafted in his head is even more awesome in reality when hearing it from the applicant's own words So it's important to not use meaningless buzzwords and platitudes in your cover letter but instead focus on providing a concise but descriptive (and specific) letter answering the key questions we've talked about before (are you capable and driven ) It also needs to answer a new question that the resume doesn't really address directly: \"Why does this person actually want to work at MY company \" That's actually very important if it's a startup or other strongly cultural organization -- they're looking for people who have a very strong reason for wanting to work there so they know you'll stick around and grow with the company Email cover letters\nEvery piece of communication you have with a company is relevant The most important is the one where you first reach out via email You probably want to treat that as a condensed version of a cover letter -- express your brilliance and fit in just a few powerful sentences Applying\nTrack every application you send out in your spreadsheet by the date you sent it As we said above, you don't need to go crazy on Day 1 but keep a regular flow of applications going out Following up\nThis actually applies to the whole process, not just applications Follow up your interviews (with a thank you to your interviewer on day 1 too) Follow up your tech screens The goal here isn't to be naggy and annoying/desperate, and it's certainly not to be a robot sending auto-generated emails all the time Just be human and honest in your language",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6725,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\applying.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "66f171e0cb84a0207958051942dbecfa",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "Final words\nI hope you're reading this from your new office.  If you got a job after doing The Odin Project, come to our Discord server and let us know!  We'd love to hear how everything went, and we have a Discord channel where anyone can share their success stories.  The whole reason for putting this project out there is to try and onboard more people into the web development profession and tech in general.  Hopefully your success will inspire even more people to give it a shot.\nBefore you move on, we would love it if you could send us your feedback on the Getting Hired course.  Getting user(you) feedback is important so we can continue to improve the curriculum and get an idea of your experience.\nSo build some kick ass software, learn as much as you can, and pay it forward when you're able.  Thanks for participating in the project!!!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1021,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "270b3dd62badb0ce77febdc01f2741b2",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\collect_leads.md",
    "source_type": "git_repo",
    "title": "collect_leads",
    "content": "Introduction\nYou've moved beyond the preparation and knowledge gathering phase Now it's time to hit the pavement and approach the actual jobs Organization is key here and a spreadsheet is highly recommended Keep track of not just the jobs themselves, but also their websites, any connections you have to the company, and a log of your activity Have a separate column for each \"Must Have\" criteria you identified in the earlier section (use a binary true/false) and each of the top 5 \"Nice To Have\" criteria (use a 3- or 5-point system) so you can quickly check off where the jobs rank Put any job opening you find into your spreadsheet Here's an example of how a spreadsheet to keep track of job openings might look like:\n| Job Title | Company | Website | Connections | Activity Log | Must Have 1 | Must Have 2 | Must Have 3 | Nice to Have 1 | Nice to Have 2 | Nice to Have 3 | Nice to Have 4 | Nice to Have 5 |\n|-----------|---------|---------|-------------|--------------|-------------|-------------|-------------|---------------|---------------|---------------|---------------|---------------|\n| Job 1     | Company A | www companyA com | John (LinkedIn) | Sent resume on 04/01/2023 | TRUE | TRUE | FALSE | 5 | 4 | 3 | 2 | 1 |\n| Job 2     | Company B | www companyB com | Jane (Referral) | Followed up on 04/02/2023 | TRUE | FALSE | TRUE | 3 | 5 | 2 | 4 | 1 |\n| Job 3     | Company C | www companyC com | N/A | Applied online on 04/03/2023 | FALSE | TRUE | TRUE | 4 | 2 | 5 | 1 | 3 |\nThe best places to look\nStart with your network, even if it's small Reach out to your Facebook friends and friends-of-friends to see if anyone's hiring You should start your search with the highest probability / highest quality sources first:\nYour network (including people you've met in the community)\nDirect postings that go to a human (like when developers [not recruiters] send emails about job opening at their company to the local Ruby list) It's important to have another human being on the other end of the emails",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4546,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\collect_leads.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "633a84d892f952fab338e08d8fc22bea",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\collect_leads.md",
    "source_type": "git_repo",
    "title": "collect_leads",
    "content": "small Reach out to your Facebook friends and friends-of-friends to see if anyone's hiring You should start your search with the highest probability / highest quality sources first: Your network (including people you've met in the community) Direct postings that go to a human (like when developers [not recruiters] send emails about job opening at their company to the local Ruby list) It's important to have another human being on the other end of the emailsDirect postings (like on a company website for a specific position) These will also usually go to a specific human being Job boards (pretty much awful, you're in the herd now)\nTry checking out these links for job boards The more technically-focused, the better:\nAuthentic Jobs\nCWJobs\nWhite Truffle -- Weighted towards startups right now\nDice com\nCoderwall com lets you display your engineering prowess and they can come to you Join-Startups - open startup jobs in a dozen cities\nWork-At-A-Startup - Y-Combinator Startups\nHubstaff-Talent - for freelancers and remote\nOn recruiters\nThere are a lot of recruiters out there whose job it is to get you hired, but you'll need to be careful about how you work with them For starters, they get paid based on a percentage of the salary you earn, so their incentive is to get you paid as much as possible (which is good) Unfortunately as a junior developer your salary is much lower than a senior engineer so you will not be their priority and they won't spend much time on you (which is bad) If you're approached out of the cold as a junior developer by a recruiter, chances are that they won't be going out of their way to learn your story and find you the right fit -- you're more likely to get put in the pile of resumes they send out to everyone You probably don't yet have work experience that is salable enough for them to go out of their way to find you the right position In that case, you may find them sending out your resume to everyone just in hopes that they get their 20-30% Remember -- if they approached you in a spammy way (e g through LinkedIn), they probably do the same to companies, so it's doubtful they'll add value to you",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4546,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\collect_leads.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d56a1f477c0f33170c3f41e49c576e39",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\collect_leads.md",
    "source_type": "git_repo",
    "title": "collect_leads",
    "content": "everyone You probably don't yet have work experience that is salable enough for them to go out of their way to find you the right position In that case, you may find them sending out your resume to everyone just in hopes that they get their 20-30% Remember -- if they approached you in a spammy way (e g through LinkedIn), they probably do the same to companies, so it's doubtful they'll add value to youAs you become more senior and your work is more unique, recruiters can add a lot of value to your career by understanding the potential market for you and opening doors you may not otherwise have found (so don't get down on them yet ) As a junior, you're unfortunately more of a commodity, so you probably won't find value in working with recruiters yet Rely on your own ability to hustle and sell yourself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4546,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\collect_leads.md",
      "source_type": "git_repo"
    },
    "token_count": 172,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1572ec790bfe4345c3994d76988df0b5",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\handling_an_offer.md",
    "source_type": "git_repo",
    "title": "handling_an_offer",
    "content": "Introduction\nIf you kicked butt, you'll get an offer That means there's a pretty good chance you'll get to work there, but just remember that not all \"offers\" (especially verbal-only ones) are actually real It's a good time to be happy because you did well but don't expect that it's a done deal We've seen companies pull offers for internal reasons or external reasons -- the point is that it happens, so don't go buying a house until you've signed the documents If it's just a verbal offer, ask them to email you the details DO NOT ACCEPT RIGHT AWAY This is doubly true if you don't think it's a good offer This is an important point for you -- they've been totally in control of the process until now and they've probably dragged their feet because they can (who knows, an even better developer might show up, right ) Now it's your turn They've put in a lot of effort so far and any reasonable company isn't going to let you walk away over a few days or a few thousand dollars They should give you at least a week to decide One big factor is compensation The person making the offer usually has discretion to bump it up a bit (maybe $5k in Silicon Valley, probably less elsewhere) without asking their manager, so it's often a good idea to negotiate the first offer Maybe you're negotiating salary, vacation, relocation bonuses, or personal project status It doesn't matter, your position is a whole lot better while you're holding that offer What's the best thing you can do GET ANOTHER OFFER There's nothing nearly as good when negotiating as another offer from another company which gives you the ability to walk away You shouldn't be shamelessly callous and capitalistic about it (the goal isn't to piss off everyone who gave you offers), but do take advantage of this Not only that, but remember all those companies that dragged their feet and you hadn't heard back from Send every one of them (who you are realistically interested in) an email explaining that you have an offer and need to make a decision relatively quickly See if that doesn't help them speed you along in the process and maybe get you that other offer As soon as you have an offer to work with, you suddenly have all that social proof you never had before since you haven't worked anywhere else Use it Once you've worked through your negotiation and hopefully had the chance to rank multiple offers, the decision must be made",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2938,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\handling_an_offer.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e33387419e0b1a7b77d8358c07ff33e4",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\handling_an_offer.md",
    "source_type": "git_repo",
    "title": "handling_an_offer",
    "content": "and need to make a decision relatively quickly See if that doesn't help them speed you along in the process and maybe get you that other offer As soon as you have an offer to work with, you suddenly have all that social proof you never had before since you haven't worked anywhere else Use it Once you've worked through your negotiation and hopefully had the chance to rank multiple offers, the decision must be madeThat's a good choice to have to make Congratulations Now you get paid to keep learning Links\nTen Rules for Negotiating a Job Offer - Long blog but worth the read to get in the right mindset Negotiating your Startup Offer from Rob by gets into the equity component of some offers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2938,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\handling_an_offer.md",
      "source_type": "git_repo"
    },
    "token_count": 137,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7300e00cf96975e4e5f83883847fff3b",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\project_resume.md",
    "source_type": "git_repo",
    "title": "project_resume",
    "content": "Introduction\nThe goal of a resume is to get them interested enough to start a conversation From there, it's on you to speak intelligently about the things you've done So don't treat the resume as the catch-all repository of your whole life -- it's more of a focused marketing tool designed to make you seem worth taking another look at A developer's resume is an interesting thing because so much of your value is demonstrated from your projects, which live in your GitHub (and are hopefully also deployed somewhere online) Despite this focus on projects, you can't ignore previous work experience or education They are both important for showing the social proof that other people have worked with you before and you've met their standards for applying It's difficult to come up with (or find on the internet) a standard resume type for a junior developer Most of the ones out there aren't particularly inspiring The keys to remember are the perspective of the hiring manager we talked about before -- that person wants to hire a developer who is highly capable and can get shit done (and will add value ASAP) The hiring manager will determine these criteria in less than 10 seconds at first glance based on where you've been educated, who's hired you before, and if you've got any really interesting projects that stand out The hiring manager rapidly builds a story of who you are based on those headline items of your resume If you're lucky, that high level story will seem interesting enough for the hiring manager or HR person to look twice and actually read what you did at each job and then bring you in for an interview Knowing that perspective, how can you play to it It's difficult if you're breaking into a new industry so you'll need to emphasize relevant education, work experience and projects in a way that crafts a story of drive and capability What have you done that shows you're highly capable (e g your technical chops, any recognition you've received, leadership of teams) And can get shit done (e g interesting projects, open source contributions) Remember: ONE PAGE This Career Tool Belt article lists 6 free resume builder websites\nNovorésumé also has a free tier with templates available, as an alternate resource\nFormatting could use some work, but here’s an example resume from CareerCup com\nAnother great (totally free) resume builder\nOptional reading\nGetting Your Résumé Read, by Joel Spolsky",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2762,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\project_resume.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b5939d94190a2c7b35c658db28301818",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\qualify_leads.md",
    "source_type": "git_repo",
    "title": "qualify_leads",
    "content": "Introduction\nYou should have the criteria that you use to evaluate a job already figured out and it should already be in your spreadsheet. Look through each lead on your spreadsheet and cross off the ones that fail your \"must-have\" criteria, then rank them based on your \"nice-to-have\" criteria. You should be able to easily come up with a weighting system that lets you sort the jobs in order of preference. Simpler is better, so no need to go overboard.\nNext, make a column for the percentage likelihood of getting the job with a reasonable effort. Multiply this with the value of the job based on the previous step, sort by this new \"expected value\", and you should have an indication of which jobs are most worth your time.\nIf the job happens to be with one of the many companies like Revature that offer to train you for free before contracting you out, read this Hire Beware blog post about some warning signs for less-than-ideal opportunities. Part of the reason for qualifying the leads is to make sure you don't get sucked into a process and waste a bunch of time applying to jobs that you wouldn't actually take anyway. That's surprisingly easy. You'll still be able to send out \"practice\" applications, but at least now you know which companies are worth sending those out to.\nSome other criteria to think about in the \"nice-to-have\" column:\nHow easily can I continue to learn at that job?\nIs there access to mentors and teaching?\nHow good are my peers who I can learn from?\nHow much would I like going into work each day?\nWhat are the job-security risks of the job? Corporations aren't lock-tight just because they're big... they go through restructuring phases and lay off people with little good reason.\nDoes it pay well enough to support me?\nDoes its location fit the needs of me and my family?\nHow long do I want this (first) job for?",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1961,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\qualify_leads.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c4e3e4ba476f6625a0287cb714693a5b",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "Introduction\nYou've been figuring out this web development stuff and building apps for a long time now and it's finally time to get paid to keep learning by working for someone else.\nYou're absolutely capable of getting a job but it's rarely easy to find one.  You'll have to be honest with yourself about what you want and what you can offer and tackle the challenge of getting hired with the same rigor and structure that has gotten you this far.\nThis is as much an odds game as anything is, especially for first-time employees who haven't been \"proven\" by past experience.  That means you'll get your fair share of rejection along the way but everyone does.  You just need to keep building your skills and portfolio to make yourself a stronger candidate while continuing to send applications and get yourself out there every day.\nThis course will lay out a structured path to follow which should help you avoid some of the pitfalls of just diving into the process without a plan.  Read through this course completely once then use it step-by-step along the way as you go through the process.  Good luck and get after it!\nFormat\nThis course is structured a bit differently than the others because it's much more about you getting out there than it is about learning a specific skill or building a specific project.  There are a couple projects which you'll be asked to do but most of the structure here exists to scaffold your job search process.\nIn each lesson:\nWe'll introduce the topic and provide you with its context in your overall search.\nYou'll be asked to do readings, watch videos, do online courses or otherwise consume content to help you out.\nYou'll often be asked to do specific tasks, for instance keeping track of the applications you've submitted.  This is purely to help you along the way.\nFinally, we'll include additional helpful resources and other potentially useful tidbits at the end of each lesson.\nEnough talk, go get hired!",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2014,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d14467661e94386ab66a4eeead034fd4",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
    "source_type": "git_repo",
    "title": "preparing_to_interview_and_interviewing",
    "content": "Introduction\nInterviewing is right up there with public speaking in the hierarchy of fears for most people Not only are you performing for someone else but they're actively judging you the whole time yikes Far be it from us to try and get you over that psychological hurdle but it's definitely best if you can actually treat the interviews as a chance to show off the cool stuff you've built and the interesting new skills you've learned The best interviews are enthusiastic conversations with technical depth The first step before everything is to prepare You'll want to figure out the questions you might expect to be asked (and the general responses you'll have for each which demonstrate your brilliance) and you'll want to research the company too Your knowledge of the company will help you tailor your pitch to their needs and also allow you to ask intelligent questions about their product and technology when the time comes Again, refer to the Happy Bear article for some great general job hunting tips How the process works once you're in the funnel\nJust a quick overview of the process a typical tech company will go through when hiring developers:\nPhone Screen\nTechnical Interview\nTechnical Challenge\nFit Interviews\nJob Offer\nOffer Negotiation\nOffer Acceptance\nThe phone screen\nCongratulations Your resume wasn't a total train-wreck and they've invited you for a phone screen (note -- sometimes you actually do the tech challenge first) The real purpose of this screen, which is often roughly a half hour with someone from Human Resources (not the actual hiring manager), is to make sure you've got a good chance of passing their technical interview and fit interviews So consider it a light version of each of these You'll probably be asked about some of the technical things you've listed on your resume but not actually dive into the depths (though some places do a brain teaser too) and you'll probably be asked some more \"softer\" questions about why you chose the job and what you've done before Companies vary widely in how they use the phone screen The basic tactic here isn't a tactic -- be honest and enthusiastic and open And don't be afraid to practice talking about yourself in front of the mirror FINAL NOTE -- this is not one-size-fits-all and many companies skip the light stuff and dive right into a technical screen so you've got to be prepared just in case The Coding Horror link below is more descriptive about that case",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13418,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a50d24063daf088f12a6cda241412828",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
    "source_type": "git_repo",
    "title": "preparing_to_interview_and_interviewing",
    "content": "in how they use the phone screen The basic tactic here isn't a tactic -- be honest and enthusiastic and open And don't be afraid to practice talking about yourself in front of the mirror FINAL NOTE -- this is not one-size-fits-all and many companies skip the light stuff and dive right into a technical screen so you've got to be prepared just in case The Coding Horror link below is more descriptive about that caseMastering the phone screen by Monster\n7 Steps for Mastering the Telephone Interview\nA much more technical phone screen from Coding Horror\nThe tech interview\nThe technical interview is usually the most terrifying part of the interview process It's where they will assess whether you've got the technical chops to make it That means you'll not only be asked very specifically about the work you've done, but also to solve logic problems or code live or whiteboard some new features In fact, one point of the interview is often to push you to your limit just to see how you react to not knowing something If you do an exercise too easily, they'll go to a much harder one Especially as a beginner, you will hit a lot of stumbling points The biggest asset you have is honesty and intellectual curiosity When solving a problem, make sure to do so in a clear and logical way, explaining out loud why you're doing each step Talk through your roadblocks and give examples of how you'd find the solution in the \"real world\" Often, that answer would be to Google for some particular function Say so They know you're not a Ruby/JavaScript expert, but they need to know that you'll be able to seek out solutions to the problems you'll inevitably encounter on the job It's also totally okay to use a brute force (inefficient) solution to a coding problem That's often the best place to start, just so you can be sure you've got the right feel for the problem You'll usually be asked how you can make the solution better, but that's much better than trying for a brilliant solution and running out of time with no work to show for it Again, your job isn't to be brilliant as much as to be adaptable and thoughtful in the face of challenges And if you don't know something, it's better to say so and work with your interviewer to figure it out",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13418,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "c27588e7ad38d0d272fbc5e9d90fdab3",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
    "source_type": "git_repo",
    "title": "preparing_to_interview_and_interviewing",
    "content": "for the problem You'll usually be asked how you can make the solution better, but that's much better than trying for a brilliant solution and running out of time with no work to show for it Again, your job isn't to be brilliant as much as to be adaptable and thoughtful in the face of challenges And if you don't know something, it's better to say so and work with your interviewer to figure it outTrust me, they want you to succeed as much as you do because there's nothing tougher as an interviewer than seeing someone silently crashing on a problem and getting more and more frustrated but not asking for help or providing any window into their thoughts You'll need to read up on a variety of things that weren't focused on in the previous few courses, including data structures and algorithms, just because they're favorite targets of interviewers They may not be great indicators of coding skill, but the world is stuck in its ways and you'll be asked those more \"Computer Science-y\" questions Links\nPeerfect net free online practice for behavioral, technical, and coding mock interviews with peers Exponent com allows you to prepare for coding interviews and practice your coding skills with peers Interviewing io gives you a chance to practice tech screens anonymously online Interview Tips\nHow to Ace Your Technical Interview\nHow You Can Stand Out in Your Next Web Developer Interview\nPost on The Interview\nRead 40 Key Computer Science Concepts Explained In Layman’s Terms\nGoogle's Guide for Technical Development (advanced)\nRuby on Rails Popular Job Interview Questions\nCracking the Coding Interview is OPTIONAL READING and it has the potential to be your best friend It comprehensively covers all the kinds of challenges you might face in a coding interview It goes beyond the scope of what we've covered so far in this curriculum and touches on other subjects that are good to know because they will probably come up Coding test questions:\n8 Queens is a classic problem Coding for Interviews: Know Thy Standard Libraries may be a bit of overkill for a junior, but never hurts if you've got the time Project Euler has more generic and challenging problems that must be solved efficiently (they can be very computationally intensive) Code Wars has programming problems and examples of best practice Join 'The Odin Project' clan for allies HackerRank provides challenges, drills, and competitions on algorithms & data structures LeetCode also has some great resources, with problems, explanations, and challenges Best of all, you don't have to create an account to view the questions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13418,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "10d4f99af50296fbc61393e5d27a207c",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
    "source_type": "git_repo",
    "title": "preparing_to_interview_and_interviewing",
    "content": "you've got the time Project Euler has more generic and challenging problems that must be solved efficiently (they can be very computationally intensive) Code Wars has programming problems and examples of best practice Join 'The Odin Project' clan for allies HackerRank provides challenges, drills, and competitions on algorithms & data structures LeetCode also has some great resources, with problems, explanations, and challenges Best of all, you don't have to create an account to view the questionsNeetCode similar to LeetCode, but fewer, more focused questions Each problem also has video explanations that walk through the problem solution\nThe real value of the sites mentioned above comes from engaging with them productively A popular recommendation around the internet is to just \"go grind Leetcode \" As you're aware of by now, common algorithms typically have a \"trick\" or a specific set of steps in order to get to a solution When you are preparing to interview, the value and utility of wrestling with a problem for hours/days is little It is more productive to search for the algorithm/pseudocode, then practice problems that require awareness of that algorithm This would be like being tasked with getting the length of a Hypotenuse in a triangle but having no awareness of the Pythagorean theorem Without awareness of that theorem, that calculation can feel impossible But just knowing the \"trick\" makes getting the result easy A more practical programming example:\nIf you arrived at a problem that required awareness of a Depth First Search of a Tree, but you had zero awareness of what a Depth First Search is, sitting there for days trying to arrive at a solution will yield little benefit In that situation, it is more productive to just search common tree algorithms then return to the problem that was giving you difficulty Algorithms training:\nUdacity course on Algorithms (asynchronous)\nCoursera course on Algorithms (semi-synchronous)\nVisualgo visualizes many common algorithms to help students better understand data structures and algorithms Architecture:\nTeaching Software Architecture with GitHub\nThe tech challenge\nThe take-home tech challenge may occur before or after the in-person screen, depending on the company They will give you an application or problem which will take up to a full day to complete on your own time Examples of take-home tech challenges include building out a sample web app with tests or solving a challenging algorithmic problem using code They'll evaluate you on the completeness of your solution and the quality of your code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13418,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "ed05a50e590ab623d2801995038a54af",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
    "source_type": "git_repo",
    "title": "preparing_to_interview_and_interviewing",
    "content": "challenge The take-home tech challenge may occur before or after the in-person screen, depending on the company They will give you an application or problem which will take up to a full day to complete on your own time Examples of take-home tech challenges include building out a sample web app with tests or solving a challenging algorithmic problem using code They'll evaluate you on the completeness of your solution and the quality of your codeIf it occurred before the technical interview, it's a good mechanism for them to test your commitment (up to half of people never even turn in a solution) The final step: \"fit\"\nThe final step before the final decision is usually to meet the whole team and get put through the paces at their offices over the period of several hours They'll probably test you technically but the goal is also to make sure you'd be a good person to work with If any one member of the team doesn't think you'd be a good fit, you usually won't be hired Advice Don't be weird or awkward even if you are at home :)\nIt's also a chance for you to test them out If you've gotten this far in the process, there's a reasonable likelihood that you've got a good match You'll need to figure out if this is the kind of company you want to work for so bring a list of questions and make sure they get answered A note on compensation\nBe mindful when providing your salary expectations Companies will always ask you \"how much do you expect to get paid\", often in the initial phone screen Providing a single concrete number can be the opposite of beneficial, because you may offer a number higher than their range and thus be deemed too expensive, or you may have come in too low and they now know they may be able to cap your offered compensation at a lower number than they might have It's safest to provide a range (e g \"I am looking for something between $80,000 - $90,000 \") in order to better meet their budget and also allow some wiggle room for negotiations Once you have an offer, you can check it against fair market rate by asking other people (hopefully you've got some people by now who you might ask) or going to the below resources to compare While \"junior\" doesn't equate to being underpaid, do be mindful to adjust for years of experience (0-1) as to get the most accurate picture Levels",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13418,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "02afa5c8e2a0fa2b2e8d85109ee13c37",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
    "source_type": "git_repo",
    "title": "preparing_to_interview_and_interviewing",
    "content": "in order to better meet their budget and also allow some wiggle room for negotiations Once you have an offer, you can check it against fair market rate by asking other people (hopefully you've got some people by now who you might ask) or going to the below resources to compare While \"junior\" doesn't equate to being underpaid, do be mindful to adjust for years of experience (0-1) as to get the most accurate picture Levelsfyi\nGlassdoor\nComparably\nPayscale\nTalent\nFinally, if a recruiter has reached out to you, it can also be helpful to ask what the budget for the role is up front However, this must be done tactfully If you have not been asked your compensation expectations and have not been told the budget up front in the initial message, it can be a great way to understand if both parties are wasting each other's time, but do keep in mind that asking must be done in a respectful manner It can be helpful to phrase this ask by saying, \"Is there an allocated salary range for the role \" Sometimes they may reply that the salary is based on experience, so do keep in mind your range as you move through the interview process",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13418,
      "relative_path": "git_repos\\odin-project\\getting_hired\\applying_and_interviewing\\preparing_to_interview_and_interviewing.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "1712453a601dc7197110c74f3bfd812b",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\project_portfolio.md",
    "source_type": "git_repo",
    "title": "project_portfolio",
    "content": "Introduction\nYou don't need a personal website right off the bat but it's good to have and it's a fun project to test your skills with In the simplest case, it's a direct conduit to you for anyone searching and another way to craft your narrative It doesn't have to be elaborate at all If you hate writing, don't blog But you need to be a real person Showcase your work Geek out For this project, it's best for you to identify the personal websites of several people you admire and see what you think they've done right In general, it's best to keep your site simple, clean and to the point rather than bloated and full of \"look what I can do \" features Let your portfolio of work speak for itself Why Every Job Seeker Should Have a Personal Website\nDocumentation\nDon't underestimate the importance of high quality documentation on your projects As a professional developer writing good documentation is a must As a job seeker it's a hidden opportunity to shine Your projects should include a useful README and at least one screenshot Include a section about why you built the project and another section with instructions to run the project locally Remember to write some documentation for both technical and non-technical audience A potential employer should be able to follow your documentation, regardless of their technical background A Beginner’s Guide to Writing Documentation\nShow designs\nA list of portfolios of professional developers Students should analyze these sites to understand what should be on their portfolios and how it should be presented Links for designs\n* [Stratis Bakas](https://stratisbakas com/)\n* [Matt Farley](https://mattfarley ca/)\n* [Dejan Markovic](https://www dejan works/)\n* [Ian Lunn](https://ianlunn co uk/)\n* [Ben Adam](https://benadam me/)\n* [Seb Kay](https://sebkay com/)\n* [Andriy Chemerynskiy](https://andrewchmr com/)\n* [Chris Ota's Portfolio](https://www otadesigns com/)\n* [Pierre Nel](https://pierre io/)\n* [Adrien Laurent's Portfolio](https://adrienlaurent fr/)\n* [Thomas' Portfolio](https://www thomasbosc com)\n* [Timmy O’Mahony](https://timmyomahony com/)\n* [Elliot's Portfolio](https://elliotcondon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2721,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\project_portfolio.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "69e83cdffadf872f9bf3f1951f064311",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\project_portfolio.md",
    "source_type": "git_repo",
    "title": "project_portfolio",
    "content": "these sites to understand what should be on their portfolios and how it should be presented Links for designs * [Stratis Bakas](https://stratisbakas com/) * [Matt Farley](https://mattfarley ca/) * [Dejan Markovic](https://www dejan works/) * [Ian Lunn](https://ianlunn co uk/) * [Ben Adam](https://benadam me/) * [Seb Kay](https://sebkay com/) * [Andriy Chemerynskiy](https://andrewchmr com/) * [Chris Ota's Portfolio](https://www otadesigns com/) * [Pierre Nel](https://pierre io/) * [Adrien Laurent's Portfolio](https://adrienlaurent fr/) * [Thomas' Portfolio](https://www thomasbosc com) * [Timmy O’Mahony](https://timmyomahony com/) * [Elliot's Portfolio](https://elliotcondoncom/)\n* [James Warner](https://jmswrnr com/)\n* [Tiago Sá's Portfolio](https://i-am-tiago com/)\n* [Patrick David](https://bepatrickdavid com/)\n* [Luis Krötz](https://luiskr com/)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2721,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\project_portfolio.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3452e01a340084dbe9d5f805723aea82",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\starts_with_you.md",
    "source_type": "git_repo",
    "title": "starts_with_you",
    "content": "Introduction\nThis lesson is all about self-assessment and goal-setting If you don't understand yourself, you won't be happy with where you end up Taking some time to introspect can make the process of getting hired a more manageable and strategic process Where you are now\nWithout defining what your own needs are, you will have no way of determining the right path forward so hunker down until you've got an idea of what your key needs are right now (from a job) The questions below should help you think about what is actually essential for you versus nice-to-have Ask yourself:\nWhy do I need a job What kind of salary level do I need to sustain myself and my family What kind of job security level do I need to sustain myself and my family How desperate am I to get a job right now Where you want to be\nOnce you've been honest with yourself about your needs, it's time to figure out what you want What will your future needs be What kinds of companies do you want to work at Why do I want a job in web development What kind of career path do I want to have Do I want to work in a developer-led organization (vs sales- or business-led) Do I prefer working in a team environment or remotely Do I like working long hours / weekends or 9-6 Is the work more important than the people Do I have to care about the product I'm building Do I have to care about the technologies I'm using Do I prefer an \"easy\" work environment or one where I'm constantly pushed Do I want \"creature comfort\" incentives like free food and beer at the office Do I have to enjoy my work or can I power through a crappy job Prioritizing needs and wants\nYou should have at least an informal list of the things that matter to you Now ruthlessly rank them What are your non-negotiables and what are your nice-to-haves Every company and opportunity will fall somewhere on the spectrum defined by those questions and they are the criteria you will later use to evaluate them This will help you stay focused when considering opportunities and not spread yourself too thin chasing things that you wouldn't really choose anyway Make sure you know every one of your \"must-haves\" and your top 5 priorities for \"nice-to-haves\" in a job What are your assets and liabilities It's time to be honest with yourself what do you bring to the table",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4628,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\starts_with_you.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a469a3271ae4ed3d14ee19e3165c5710",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\starts_with_you.md",
    "source_type": "git_repo",
    "title": "starts_with_you",
    "content": "those questions and they are the criteria you will later use to evaluate them This will help you stay focused when considering opportunities and not spread yourself too thin chasing things that you wouldn't really choose anyway Make sure you know every one of your \"must-haves\" and your top 5 priorities for \"nice-to-haves\" in a job What are your assets and liabilities It's time to be honest with yourself what do you bring to the tableIf you're early in your career (which you probably are), you'll have to work hard to distinguish yourself from the flood of unqualified candidates out there You need to strike the line between being honest with yourself and not selling yourself short Everyone, especially those just starting out, feels unqualified That's natural, so don't worry about it This is about figuring out your strengths and weaknesses so you can tailor your story to play to your strengths and honestly address your weaknesses Some questions to ask (which you'll probably hear again in your early interviews):\nHow hungry am I How good am I at building back end code How good am I at putting together front ends Can I solve really technical problems like brain teasers and algorithms Have I built projects that display a good range of skills Do I know people who can recommend me Am I a good people person who builds relationships easily Do I portray an aura of confidence or act shy Do I tend to undersell myself and my capabilities Do I have a broad level of general tech knowledge Am I very familiar with a particular technical or industry vertical (Usually career switchers have one)\nDo I tend to procrastinate or do I just get shit done Do I wait to ask for help or do I go out and find the answer on my own Do I lean in to challenges or avoid them What are some really difficult problems I've solved before Applying without much experience means you need to fill in your weak spots and emphasize your strengths For almost everyone, your biggest strength will be hunger and ability to learn But companies have heard that story before, so you'll have to tie in other strengths that you can use to make your story compelling A quick note -- there is a difference between hunger for opportunity and desperation Hunger is about seeking reward (which you can do when you're in a comfortable situation and optimizing opportunities) and desperation is about avoiding failure (which occurs when you absolutely MUST have that job) Do whatever it takes to not sound desperate, even if you are",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4628,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\starts_with_you.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "91a1a44f83f9300872ffa9495522f130",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
    "source_type": "git_repo",
    "title": "professional_networking",
    "content": "Introduction\nA robust professional network is an irreplaceable asset on your journey to becoming a web developer, and beyond As social beings we are wired to connect with others, receive help, and give help This is no different in the software ecosystem where countless communities take part in the mutually beneficial transactions of networking One significant benefit of your network is that it might help you land your first job in software This is not a guarantee, but it is the lived experience of many developers As with all things, you get back what you put in, so the more developed your network is, the better your odds it will provide a benefit for you Making genuine connections with people takes time, however, so we recommend you start investing time and effort sooner than later Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What a professional network is How a professional network might benefit you Strategies and actions to consider when building and maintaining your professional network What is a professional network Your professional network is not the people you follow on social media, nor is it necessarily your friends It is the people with whom you have made a genuine connection, whether in-person or online, because you have a mutual interest and can gain more value through being connected than you would otherwise have alone These are the people you can ask for help, and in turn you can help out later The network that will help you on your journey to becoming a software developer will mostly consist of people working in software development and adjacent roles, like recruitment or management Take stock of your network in this field now Chances are, you might benefit from expanding it Why is a professional network useful You can probably think of instances where you were stuck on a task and asked someone for help This is an example of exercising your network You can do the same with your software developer network to help you gather information, make decisions, and find a job When it comes to information gathering, search engines and AI can be very helpful But when more nuance is needed, it can be easier to ask a real human For example:\nYou might want to conduct an informational interview with a senior developer to learn about what they do and how they broke into the industry You might be seeking feedback on your portfolio You may be looking to get some career progression advice Interacting with someone who has experience in what you seek can be beneficial because you can form a dialogue, ask follow-up questions, and get real-time feedback Your network can also help you make decisions Have you ever had decision paralysis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13466,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "13d3b626c088f4066ebbf8bd00f19dd3",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
    "source_type": "git_repo",
    "title": "professional_networking",
    "content": "interview with a senior developer to learn about what they do and how they broke into the industry You might be seeking feedback on your portfolio You may be looking to get some career progression advice Interacting with someone who has experience in what you seek can be beneficial because you can form a dialogue, ask follow-up questions, and get real-time feedback Your network can also help you make decisions Have you ever had decision paralysisThis is when you are presented with so many options, you cannot choose This happens a lot in tech, especially for newcomers, given the sheer number of languages, frameworks and tools to choose from Sometimes it’s easier to canvass the people you trust and take their recommendations By doing this we are gathering \"social proof\" If someone we know recommends something, we are more likely to choose it (it’s also why you read reviews before buying stuff online ) When it comes to finding a job, your network can be the most valuable asset you have Depending on the source, up to 80% of all jobs are not posted online This means you are only seeing about 20% of all open jobs when you are browsing job boards, and the rest are in the ‘hidden jobs market’ Now, these percentages may vary, but it’s a safe bet that the hidden jobs market is real, and likely significant If your strategy does not attempt to tap into this market, you are undermining your chances of success and will be stuck competing with many applicants for fewer jobs Think of it from the company’s perspective Hiring is a pain In a perfect world, a great candidate would show up instantly any time a new job opened up This would save them going through the process of posting the job, screening applicants, marking technical assessments and conducting interviews This all takes time and is very expensive So it stands to reason why most companies would prefer to hire through the hidden jobs market So, how do you tap into the hidden jobs market Through your network If your network sees you as a trusted individual with a particular skill set, you can be sure they will think of you when matching opportunities arise You might ask around about potential jobs and receive a heads up of a new opportunity at someone’s company Better still, you could be recommended for a particular role Many companies even give bonuses to staff who refer a candidate that gets hired, so the incentive to network and pass names along goes both ways This is not to say you should refrain entirely from applying to posted jobs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13466,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "72784849b4bffed742222c7973107ae1",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
    "source_type": "git_repo",
    "title": "professional_networking",
    "content": "think of you when matching opportunities arise You might ask around about potential jobs and receive a heads up of a new opportunity at someone’s company Better still, you could be recommended for a particular role Many companies even give bonuses to staff who refer a candidate that gets hired, so the incentive to network and pass names along goes both ways This is not to say you should refrain entirely from applying to posted jobsThese are definitely still worthwhile to pursue, but it's still better to choose quality over quantity by seeking companies that you find interesting and have core values you identify with You will be better off sending fewer, tailored applications over hundreds of the same application in a shotgun-like approach We cover more on this in the Getting Hired course How to build a professional network\nJust like building your technical skills, networking requires careful attention and a strategic approach A local network allows you to build strong, in-person connections while a virtual network allows you to connect with people all over the world Both are useful and a strategy that focuses on the two will be the most robust Start Now\nYour network will take time to build The sooner you start to make connections, the better Starting now means you will have more of a network to leverage when you need to rely on it Consider proactively allocating a percentage of your web development study time to this activity This can act as a nice breather between the mental workout of coding, and you may even combine networking and learning during activities like attending local meetups and conferences Identify Your Options\nYour time is limited and your options are endless So, you should understand what options you have at your disposal and select one or two to start with In-person networking opportunities will vary based on your location Larger towns and cities will likely have well-established tech-related events and groups, whereas smaller communities may be more limited To get a better sense of what’s going on around you, consider the following:\nCheck Meetup, LinkedIn, and/or Google for local communities focused on a given technology Scour local business publications for notices on local conferences and tech events Talk to friends and family to see who might be a software developer you could be introduced to Follow local tech companies on social media to learn about their in-person events Sign up for newsletters focused on content in your local tech scene Start your own Meetup group focused on a particular topic, e g Ruby or JavaScript Your virtual networking options are much broader and there’s no shortage of platforms and communities to choose from",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13466,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "8733c5e8f9ef7fa0a0c60a65f1823eb7",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
    "source_type": "git_repo",
    "title": "professional_networking",
    "content": "Talk to friends and family to see who might be a software developer you could be introduced to Follow local tech companies on social media to learn about their in-person events Sign up for newsletters focused on content in your local tech scene Start your own Meetup group focused on a particular topic, e g Ruby or JavaScript Your virtual networking options are much broader and there’s no shortage of platforms and communities to choose fromConsider the following to help you decide on where and how to focus your efforts:\nJoin the Odin community LinkedIn - your profile acts like your virtual resume and first impressions are important Put some time into optimizing your profile Then start following companies you would like to work at or find interesting, and individuals you can learn from Engage with their content with questions and comments and consider creating your own content about your developer journey Connect with people who engage with you and aim to make these connections genuine by looking at someone’s profile and finding something in common to talk about Discord - there’s likely a discord channel dedicated to a given language or framework where you can ask questions and get help You can sign up for Discord and search for what you are interested in e g , NodeJS, Ruby on Rails, and request to join Open Source projects - when you have the skillset and confidence to contribute to open-source projects, you will be working directly with project maintainers and contributors It is a great way to connect with other developers while working towards a common good A great way to find out reliable information, quickly, is through informational interviews An informational interview is the formal name for a chat with someone who is in a position you want to be in, or are interested in learning about You get to ask them questions, such as \"What path did you take to get to this point \", \"What do you do in a typical work day \", \"What advice would you give to someone like me \", and \"Tell me about the challenges you face in your role\" The questions you ask should help you find out if a particular role or company is the right fit for you and if you need to make any adjustments in your strategy It is also a solid way to connect with the person you are \"interviewing\" and it would be wise to add them to your network thereafter (e g , LinkedIn) Build Genuine Connections\nThe economy of professional networking rewards authenticity and mutual respect If you are going to ask a favor of someone, you are far more likely to get help if you have developed a genuine connection",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13466,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "61d3863f9e0dad4abcba94f46d04d701",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
    "source_type": "git_repo",
    "title": "professional_networking",
    "content": "need to make any adjustments in your strategy It is also a solid way to connect with the person you are \"interviewing\" and it would be wise to add them to your network thereafter (e g , LinkedIn) Build Genuine Connections The economy of professional networking rewards authenticity and mutual respect If you are going to ask a favor of someone, you are far more likely to get help if you have developed a genuine connectionThat is to say, please do not approach people \"cold\" and ask them out of the blue to connect with you, or for a favor like \"help me get this job in your company\" or, \"please be my mentor\" This may be perceived as disrespectful People are busy, and they reserve their limited time for helping those they know and respect Your best strategy is to start conversations with a genuine interest in the person and connect on a mutual interest For example, you could review someone’s profile on LinkedIn and find something in common, or begin a conversation in-person with questions related to what the person does, how they got to where they are, and what challenges they face in their daily work Make it about them, not you Show that you are interested in them as a person, not that you want them to give you something Actively listen to what they say and ask follow-up questions and even offer to help with something if you are in a position to do so Think of the interaction like dating: you don’t ask someone to be your romantic partner in your first conversation, right The same applies here If your initial conversation goes well, then you can follow up with a request to connect If you find it hard to talk to strangers in person and you are on your way to a local meetup or conference, consider having some predetermined things to talk about Come up with a few generic questions such as “Where do you work ”, “What tech stack do you use at work ”, “How did you get into coding ” Also, don’t forget to prepare to talk about yourself Think of a 30-second elevator pitch describing who you are, what you do, and where you want to be in 12 months This will help put your mind at ease because you will have something to say when your brain doesn’t feel like thinking in the moment If you’re still not sure how to get started virtually, find one or two people who seem to be doing a good job at connecting with others and study their behavior How often do they post or comment on other posts",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13466,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "de78d5ea70e2f81c185bcd33914f1201",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
    "source_type": "git_repo",
    "title": "professional_networking",
    "content": "do, and where you want to be in 12 months This will help put your mind at ease because you will have something to say when your brain doesn’t feel like thinking in the moment If you’re still not sure how to get started virtually, find one or two people who seem to be doing a good job at connecting with others and study their behavior How often do they post or comment on other postsWhat sort of language do they use How do they treat others that interact with them Chances are, if you adapt some of these behaviors to become your own you will also have more success connecting with others Maintain Your Network\nYour professional network is a dynamic and organic entity Much like a garden, it will take some maintenance and attention to keep it in shape You can do this by asking and answering questions in online communities, sending messages to your connections, and attending in-person events or scheduling periodic coffee-chats with your closest connections Ideally, this does not feel like a chore Rather, it’s something you naturally do because you enjoy it and get value from the interactions There is so much more to building a professional network, but this lesson should give you a good start Remember, it will take time, so start early and be genuine Good luck Additional Resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental How to use LinkedIn as a developer to get a job in tech\nHow to Network: a Guide for Remote Software Developers & Engineers\nFirst ruby friend: people on the ruby path can find free mentorship from friendly volunteers here",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13466,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\professional_networking.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "f9aa7259155dec0ca2835d1a4205c8bf",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\strategy.md",
    "source_type": "git_repo",
    "title": "strategy",
    "content": "Introduction\nThe first step is to have a strategy. You've come this far with a deliberate and strategic approach to learning, why abandon it at the most important phase? Getting a job can itself be a full-time job so use your time wisely and plan ahead. There are some things you can and should do ahead of time, which we will cover in greater depth below.\nThe path to working takes the following form:\nFigure out your needs and skills\nFigure out what companies need and offer\nIncrease your odds by laying the groundwork early\nCollect job leads\nQualify job leads\nReach out and apply\nInterview\nHandle the offer(s)\nProfit??\nYou'll notice that it's quite structured. Some things are more optional than others, but you've got to have a plan or you'll find yourself spamming your resume out to every job post on every job board and wondering why you haven't had any success. Or maybe you'll end up going through a long and painful process and realizing you never wanted that job anyway -- a total waste of time.\nWe'll also cover some alternate paths you can take like finishing up your education at a coding bootcamp and how you can contribute to open source projects (like this one) to boost your \"real world\" experience.\nAssignment\nA fantastic place to start your \"getting hired\" journey is this very thorough article from Happy Bear Software on How to Get A Programmer Job.\nNow get your head out of the clouds, stop dreaming about how you'll get hired, and actually do it!\nAdditional resources\nThis section contains helpful links to other content. It isn't required, so consider it supplemental.\nGetting your first IT job from InformationWeek\nEngineer’s Guide to US Visas\nLessons from a Silicon Valley Job Search by Robert Heaton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2146,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\strategy.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "32ed8836ea327f4a72cca93a8500dd12",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_companies_want.md",
    "source_type": "git_repo",
    "title": "what_companies_want",
    "content": "Introduction\nNow that you've figured your own situation out, the fact is that you can't get hired by just thinking about why you need or deserve the job You have to think about things from the perspective of the company Why are they interested in hiring you What, therefore, will they look for Life behind the curtain\nHiring managers are busy people That's why they need someone new to remove some of their workload and get their team working better or faster They also have to deal with potentially hundreds of unqualified applicants every week, which takes up too much of their valuable time They just want to get back to building stuff and not have to hire again anytime soon So they are looking for someone who can add value as soon as possible and who will be able to grow with the organization The second characteristic, growth, is something you shouldn't have much trouble selling if you've come this far and learned web development on your own The key is to present yourself as a growth curve, not just a static line (i e you'll continue learning and improving very rapidly and not stop) You have real career goals and you've learned incredibly fast so far to get to where you are (right ) The first part, adding value immediately, is more difficult -- that's where they want to see that you've had relevant experience before and can meet their technical bar There's a bit of a catch-22 with getting hired -- the easiest way to show you are employable is to have been employed before It's a check mark next to you So to cater to this; do whatever you can to show that other people have believed in you enough to use your work and skills Aside from those two characteristics, there is another major factor -- fit The hiring manager wants someone they and their team can work well with All the other stuff represents minimum hurdles for being considered But you often make or break your chances by being someone the team members want to know better and work with all day long Almost all hiring processes ask the full team to evaluate a late-stage candidate So to summarize, hiring managers are usually looking for 3 main things:\nCapability\nMotivation\nFit\nYou can learn a bit about the perspective of hiring managers by reading blog posts about how to hire developers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4166,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_companies_want.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d56942e225f598359a86aee627e01997",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_companies_want.md",
    "source_type": "git_repo",
    "title": "what_companies_want",
    "content": "hurdles for being considered But you often make or break your chances by being someone the team members want to know better and work with all day long Almost all hiring processes ask the full team to evaluate a late-stage candidate So to summarize, hiring managers are usually looking for 3 main things: Capability Motivation Fit You can learn a bit about the perspective of hiring managers by reading blog posts about how to hire developersNo need to go crazy, but try to get a picture of why they're hiring you:\nThe Best Way to Hire Software Developers\nHow to Hire Talent\nJoel Spolsky has a lengthy diatribe on hiring developers, which should give you an idea of the need and pain of hiring great engineers Joel Spolsky's Guerrilla Guide to Interviewing (version 3 0) Look for \"people who are 1 Smart, and 2 Get things done\" Beyond a Resume: What Tech Recruiters Want\nInternships\nA good way to start getting experience and show others that you're employable is to get an internship Just make sure it's a paid internship because no one values things they get for free You want the people you work with to value your contributions and feel like they have a stake in helping you succeed The good part is that internships tend to focus more on your growth potential than what you've done before, so you can start to avoid that chicken-and-egg problem described above The hiring process for internships is usually similar to but not quite as rigorous as full-time positions Internships are basically just long interviews by that company to see if they want to bring you on full-time These should be useful links for you:\nThread on \"How do I get a Software Internship\" from MetaFilter\nInternMatch",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4166,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_companies_want.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d06a8debf8cfa553ce1f8634fa885f51",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_you_can_do_to_prepare.md",
    "source_type": "git_repo",
    "title": "what_you_can_do_to_prepare",
    "content": "Introduction\nTaking a structured approach to getting hired means starting early and getting some important things out of the way first Get good Navigating this process can be a beast but don't let it distract you from building your skills, which ultimately will determine if you get the job or not This course assumes you've already made it through the other courses and have accomplished enough in their completion to elevate you to competence If not, you've got to ruthlessly address your weak points (even if it's the tricky stuff like algorithms and data structures) in order to be qualified for the kinds of positions you're applying to Craft a narrative\nYou may be uncomfortable \"selling yourself\" but that's exactly what you'll have to do Luckily, that doesn't mean acting like a used car salesman; it's more subtle than you think It really means crafting a story about who you are, how you got to where you are, and why you'll keep growing Everyone can tell a story So put some effort into crafting a compelling narrative that stitches together your background (especially if you come from a non-traditional background) into a compelling and unavoidable wave of capability and drive How to Explain Your Career Transition by Dorie Clark\nBuild a portfolio\nAll along the way, you should keep building things The work you've done will be crucial to demonstrating your technical skill and getting hired Employers want to see that you can build and ship code and that you make good decisions when confronted with engineering trade-offs All of this stems from conversations about your portfolio of work The portfolio is also important for another thing that isn't mentioned much -- social proof If you've been a part of larger or group projects, that's almost like showing that you've worked somewhere before It makes the employer comfortable that other people have worked with you before so they can too Speaking of group projects, participating in the open source community is a great way to showcase your skills and collaborate with other developers If you're looking for your first open source project to contribute to, start with TOP We're always looking for ways to improve our curriculum, main site, and odin-bot v2, so check out our repositories on GitHub to get started While you're at it, check out this Dev to article to learn you can leverage open source contributions in your job search Your portfolio as a developer is GitHub You may have a personal website but GitHub is still the authoritative repository of your technical ability Ignore it at your peril",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7377,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_you_can_do_to_prepare.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9791dec82812639a6c8f7e8b71a57aed",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_you_can_do_to_prepare.md",
    "source_type": "git_repo",
    "title": "what_you_can_do_to_prepare",
    "content": "TOP We're always looking for ways to improve our curriculum, main site, and odin-bot v2, so check out our repositories on GitHub to get started While you're at it, check out this Dev to article to learn you can leverage open source contributions in your job search Your portfolio as a developer is GitHub You may have a personal website but GitHub is still the authoritative repository of your technical ability Ignore it at your perilA Programmer's Portfolio by Jeff Atwood\nThe Power of a Programming Portfolio by GrokCode\nYour GitHub Portfolio by Forbes\nClean up your web presence (and have one)\nGoogle yourself in an incognito window (to avoid Google's smart algorithm) What comes up Do the links fit into your personal narrative Whoever is looking to hire you will certainly Google you Make sure that what they find matches what you want them to find If you've got a ridiculously common name, you may have a harder time building your web presence but it's also harder to have the wrong web presence The most important part of your web presence to fix up is your GitHub profile Make sure your projects are organized and their README files contain a description and a link to where it is live so anyone looking at the project can quickly see your brilliance Next, try to be discoverable If we're trying to get in touch with you or find your work on the web, can I Do you have a personal website Are you on X (formerly known as Twitter) You don't need to go crazy with social media, but sometimes just having enough of a profile to be a \"real\" person and give people the opportunity to get in touch with you can go a long way Use LinkedIn if you're not allergic to it Again, this is about getting your personal narrative out there in the way YOU choose and not relying on Google to get it right LinkedIn is fast replacing the resume anyway Other sites, like Brand Yourself below, will describe a bit better how to take on your web presence, but just make sure your narrative is being told the way you want it to Brand Yourself helps you brand yourself Basic services are free Control Your Online Reputation from Monster\nHow Important Is It for a Programmer to Have an Online Presence on Stack Exchange\nHow to Build Your Digital Presence as a Software Developer\nGet out in the community and collect information\nFind and meet other developers That doesn't mean \"power networking\" but it does mean genuine human connection Your network of people DOES matter in a BIG way",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7377,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_you_can_do_to_prepare.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9c5f896c182abb26a8870a9c26483feb",
    "source_file": "corpus\\git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_you_can_do_to_prepare.md",
    "source_type": "git_repo",
    "title": "what_you_can_do_to_prepare",
    "content": "Brand Yourself helps you brand yourself Basic services are free Control Your Online Reputation from Monster How Important Is It for a Programmer to Have an Online Presence on Stack Exchange How to Build Your Digital Presence as a Software Developer Get out in the community and collect information Find and meet other developers That doesn't mean \"power networking\" but it does mean genuine human connection Your network of people DOES matter in a BIG wayFor now, it's probably just for answering questions and harvesting advice but your next job will probably be found through the people you know and some who you meet while you're gathering this advice People like giving advice and like investing themselves emotionally in other people with growth curves That's best to do in person 1-on-1, where you can ask your dumb questions, but there are plenty of communities as well, e g Meetups, Stack Overflow, Quora, local user groups Be a part of them and don't be afraid to ask questions That's a great way to build relationships You'll probably have a million questions but the relevant ones here are about understanding what exactly different jobs are and what they're looking for The easiest way to find out is ask developers what they do It's much faster than trolling through blog posts trying to figure out the process Buy lunches and coffees if you must Set a goal of talking to 5 real human beings about your job search Another way to get this information is to check out a whole bunch of job postings You'll quickly start seeing similarities between them Yeah, it's shit work, but it must be done Another facet of this is related to your web presence -- don't be afraid to produce content like blogging or answering questions on Quora They don't need to be explicitly technical, but should showcase your ability to think critically and write well Both of these play well with future employers How to Win Friends and Influence People is an essential classic that relates to business and networking but is applicable to all facets of the social world around you It's a must-read for everyone (and it's an easy read)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7377,
      "relative_path": "git_repos\\odin-project\\getting_hired\\preparing_for_job_search\\what_you_can_do_to_prepare.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "81d8077d0e67fbab9349592de29100a3",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\computer_basics.md",
    "source_type": "git_repo",
    "title": "computer_basics",
    "content": "Introduction\nNeedless to say, while learning to code, you'll be spending most of your time on a computer. Hence, understanding how to work with your computer is crucial. In this lesson, we'll introduce a resource which will quickly get you up to speed with some computer basics.\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson.\nComputer software and hardware.\nHow to take screenshots.\nThe importance of strong passwords.\nAssignment\nGoodwill Community Foundation (GCF) resources are excellent to get you acquainted with the basics. They have accompanying videos and illustrations and are easy to read. The following readings should be sufficient, although you are welcome to explore more of GCF's resources.\n1. [What is a computer?](https://edu.gcfglobal.org/en/computerbasics/what-is-a-computer/1/)\n1. [What is an operating system?](https://edu.gcfglobal.org/en/computerbasics/understanding-operating-systems/1/)\n1. [What is an application?](https://edu.gcfglobal.org/en/computerbasics/understanding-applications/1/)\n1. [Open source vs closed source software.](https://edu.gcfglobal.org/en/basic-computer-skills/open-source-vs-closed-source-software/1/)\n1. [Taking screenshots](https://edu.gcfglobal.org/en/techsavvy/taking-screenshots/1/).\n1. [Creating strong passwords](https://edu.gcfglobal.org/en/techsavvy/password-tips/1/).\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\nIs Windows an operating system or an application?\nWhat's the difference between open source and closed source software?\nWhat are some use cases of a screenshot?\nGive an example of a weak and a strong password.\nAdditional resources\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\nCheck out GCF's page on \"What are accessibility features\" to learn how you can leverage these features to use your computer efficiently.\nIf you feel like spending more time learning about this topic, check out FreeCodeCamp's excellent course on computer basics.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2787,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\computer_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4bb1bb03c0d4a8daefa03b35af9146db",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\how_does_the_web_work.md",
    "source_type": "git_repo",
    "title": "how_does_the_web_work",
    "content": "Introduction\nBefore you can understand how to program the web, you need a more rigorous understanding of the web itself than you likely have now These concepts provide a more holistic understanding of the ecosystem in which you will be working and will enable you to talk intelligently with other developers about your work Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe what the internet is Describe what packets are and how they are used to transfer data Understand the differences between a web page, web server, web browser and search engine Briefly explain what a client is Briefly explain what a server is Explain what IP addresses are Explain what DNS servers are Assignment\n1 Watch this BBC short for an [overview of how the internet works](https://www youtube com/watch v=eHp1l73ztB8) 1 Read this [Mozilla article on \"How does the internet work \"](https://developer mozilla org/en-US/Learn/Common_questions/How_does_the_Internet_work) 1 Watch [How the Internet Works in 5 Minutes](https://youtu be/7_LPdttKXPc t=46s) 1 Read up on the [differences between a web page, a web server, and a search engine](https://developer mozilla org/en-US/Learn/Common_questions/Pages_sites_servers_and_search_engines) 1 Watch this [Google short explaining what a web browser is](https://youtu be/BrXPcaRlBqo) Then, use this site to [find out your current web browser and version](https://www whatsmybrowser org/) 1 Read about [how different parts of the web interact with each other](https://developer mozilla org/en-US/Learn/Getting_started_with_the_web/How_the_Web_works#Clients_and_servers) and read this [MDN article about how a DNS request works](https://developer mozilla org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_domain_name#how_does_a_dns_request_work) Alternatively, here is a [video about how a DNS request works](https://www youtube com/watch v=72snZctFFtA&t=45s) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a web server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5854,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\how_does_the_web_work.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "58d503173e34730c4a2b6ff2c07a28f6",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\how_does_the_web_work.md",
    "source_type": "git_repo",
    "title": "how_does_the_web_work",
    "content": "org/en-US/Learn/Getting_started_with_the_web/How_the_Web_works#Clients_and_servers) and read this [MDN article about how a DNS request works](https://developer mozilla org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_domain_name#how_does_a_dns_request_work) Alternatively, here is a [video about how a DNS request works](https://www youtube com/watch v=72snZctFFtA&t=45s) Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is a web serverWhat is a network What is the internet What is an IP address What is a router What is an ISP What are packets and how are they used to transfer data What is a client What is a server What is a web page What is a web browser What is a search engine What is a DNS request Which browser are you currently using In your own words, describe the process that takes place when you initiate a search on google com in terms of what we discussed Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Listen to part 1 of the podcast \"How the web works\" (starts around 8:30) and part 2 of \"How the web works\" by Security Now Watch \"A Packet's Tale\" - a video about how data travels across the internet Consider buying the book Tubes: Behind the Scenes at the Internet If you're in for a bit more reading, you can check out the Introduction to HTTP online book at LaunchSchool This book also touches on some topics covered later in the curriculum, such as developer tools and security Additionally, you can learn about HTTP tools, which you may find helpful in the future Explore how fiber optics uses light to transmit data over long distances, and with integrated photonics, expands our virtual world beyond the internet The hidden network that makes the internet possible Some advice on reading: We recommend that you only review the immediate links posted in our curriculum You can always go deeper on any subject if you wish, but be careful not to overload yourself on information Watch How the Web Brings You Websites with nice comparison to real life examples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5854,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\how_does_the_web_work.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fb1832281a8c20e6636c7c5de06a5fe4",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
    "source_type": "git_repo",
    "title": "command_line_basics",
    "content": "Introduction\nFeeling scared of the command line You're not alone We have this image of developers staring intently at a black screen with white or green text flashing across as they wildly enter incomprehensible commands to hack into the corporate mainframe (no doubt while guzzling soda and wiping neon orange Cheetos dust off their keyboard) That blank screen or window with a prompt and blinking cursor is the command line interface (CLI), where you're able to enter commands that your computer will run for you While there's no need for you to reenact the scene above, working with the command line is a critical skill for you to learn as a developer The command line is like our base of operations, from which we can launch other programs and interact with them It has a syntax of its own to learn, but since you'll be entering the same commands dozens of times, you'll quickly pick up the commands you need most In this introductory lesson on the command line, you'll learn how to navigate your computer and manipulate files and directories (also known as folders) directly from the comfort of the command line You'll soon see that this isn't as difficult as you may think The commands you will learn in this lesson are very straightforward, so don't let the prospect of using the command line for the first time intimidate you Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Describe what the command line is Open the command line on your computer Use the command line to navigate directories and display directory contents Use the command line to create a new directory and a new file Use the command line to rename or destroy a directory and a file Use the command line to open a file or folder in a program Test drive your terminal\nOpen a terminal on your computer Linux: Open the programs menu and search for \"Terminal\" You can also open the terminal by pressing Ctrl + Alt + T on your keyboard macOS: Open your Applications > Utilities folder and find \"Terminal\" You can also use Spotlight search to open Terminal Press Cmd + Space to open Spotlight, and search for \"Terminal\" Press Enter to open it The window that opens will be mostly blank, with the exception of some text that will vary based on your operating system On Linux and older Macs, the line will end with $ and on newer Macs, the line will end with % This symbol - called the prompt - indicates that the terminal is waiting for you to enter a command Let's try that now",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14152,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "b09a18ee1e8d8c71c69c17876f7e3d75",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
    "source_type": "git_repo",
    "title": "command_line_basics",
    "content": "Spotlight, and search for \"Terminal\" Press Enter to open it The window that opens will be mostly blank, with the exception of some text that will vary based on your operating system On Linux and older Macs, the line will end with $ and on newer Macs, the line will end with % This symbol - called the prompt - indicates that the terminal is waiting for you to enter a command Let's try that nowType whoami and press Enter It returns your username Cool Often, guides and instructions for using the terminal will indicate commands by putting the symbol first, like $ whoami This tells you to type the command in your terminal, but don't enter the $ And remember, if you are using a newer Mac, the % is the same as $ Why learn this now You will be making heavy use of the command line throughout this curriculum, and the upcoming installations project will need you to install many different software programs using the command line Additionally, you will primarily be using Git within the command line (more on this later) As part of the bigger picture, you may well be using the command line on a daily basis in your career as a software developer, making it an indispensable skill in your toolset #### A note on typing passwords in the terminal\nWhen using a command in the terminal that requires you to enter your password for authentication (such as sudo), you will notice that the characters aren't visible as you type them While it might seem like the terminal isn’t responding, don’t worry This is a security feature to protect confidential information, like how password fields on websites use asterisks or dots By not displaying the characters you type, the terminal keeps your password secure You can still enter your password as normal and press Enter to submit it Use the command line like a pro\nThere's something important that you need to know about programmers Programmers are lazy Like, really lazy When forced to do something over and over again, the odds are good that they'll figure out a way to automate it instead The good news is that you get to take advantage of the many shortcuts they've created along the way It's time to learn how to use the command line like a pro (which is to say, in a really lazy way) First, you might have already noticed that copying and pasting inside the command line doesn't work the way that you'd expect",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14152,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "1adb87e5f37309beb90c2b904cd6c7ea",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
    "source_type": "git_repo",
    "title": "command_line_basics",
    "content": "the odds are good that they'll figure out a way to automate it instead The good news is that you get to take advantage of the many shortcuts they've created along the way It's time to learn how to use the command line like a pro (which is to say, in a really lazy way) First, you might have already noticed that copying and pasting inside the command line doesn't work the way that you'd expectWhen you're inside the command line, use Ctrl + Shift + C (Mac: Cmd + C) to copy and Ctrl + Shift + V (Mac: Cmd + V) to paste For example, to copy and paste commands from your browser into the command line, highlight the command text and use Ctrl + C as usual, then paste it in your terminal using Ctrl + Shift + V Test it out Second, you need to learn about tab completion Seriously, this tip will save you so much time and frustration Let's say that you're in the command line and need to move into a distant folder, something like ~/Documents/Odin-Project/foundations/javascript/calculator/ That's a long command to type out, and everything needs to be exactly right in order for it to work Nope, we're way too lazy for that Basically, by hitting Tab, the command line will automatically complete commands that you've started typing once there's only one option For example, it's pretty common to have a Documents folder and a Downloads folder in the home directory If you've typed cd D and then press Tab, the command line will let you know that it's not sure which one you want by showing you the different options that match what you've typed so far:\nbash\n$ cd D\nDocuments/ Downloads/\n$ cd D\nBut once you've typed in a bit more, it will complete the name for you, making it possible to write out the full file path above by typing as little as cd Doc[tab]O[tab]f[tab]j[tab]cal[tab] (depending on what other folders exist on your computer) Test it out, and get comfortable with how this works You're gonna love it Third, there's a really handy shortcut for opening everything within a project directory: Once you've installed a text editor, you can use this shortcut to open up an entire project and all its files in one go This shortcut is also commonly used with Git (later on it's covered in detail) with commands like git add",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14152,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "d400928085b7d58ac95fea23cfcba595",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
    "source_type": "git_repo",
    "title": "command_line_basics",
    "content": "other folders exist on your computer) Test it out, and get comfortable with how this works You're gonna love it Third, there's a really handy shortcut for opening everything within a project directory: Once you've installed a text editor, you can use this shortcut to open up an entire project and all its files in one go This shortcut is also commonly used with Git (later on it's covered in detail) with commands like git addto add all the files in a directory to Git's staging area For example, if you have VS Code installed, you can cd into the project directory and then type code (with the period) It will launch VS Code and open up the project folder in the sidebar See the next section of this lesson for a more detailed example Opening files in VSCode from the command line\nLinux: You can open VSCode from the command line by typing code, and you can open folders or files by adding the name of the location after it: code my_awesome_project/ macOS: Some setup is required After installing VSCode, launch it any way you're comfortable with Once it's running, open the Command Palette with Cmd + Shift + P In the little dialog that appears, type shell command One of the choices that appears will be Shell Command: Install 'code' command in PATH Select that option and restart the terminal if you have it open WSL2: Opening up VSCode from the command line in WSL2 is just as easy as it is in Linux Just enter code, which will open VSCode in WSL2 Assignment\nSome of the following resources assume you have a Desktop folder located in your system If, however, you do not have one located anywhere in your system, then please do the  following: Open your terminal and make sure you're located in the home directory by typing `cd ~` into your command line Then, type `mkdir Desktop` and press `enter` To ensure  your command worked, type `ls` and check if your Desktop folder is shown amongst your other directories **Note for WSL2 users**: Use the `wget` command along with the link given in the `Download files` section to get the zip file in your WSL2 installation (`wget https://swcarpentry github io/shell-novice/data/shell-lesson-data zip`) You will also have to install unzip by using the command `sudo apt install unzip` and then `unzip shell-lesson-data",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14152,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "63447f37a49f2b8a1830f0f2942c6a9e",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
    "source_type": "git_repo",
    "title": "command_line_basics",
    "content": "type `mkdir Desktop` and press `enter` To ensure your command worked, type `ls` and check if your Desktop folder is shown amongst your other directories **Note for WSL2 users**: Use the `wget` command along with the link given in the `Download files` section to get the zip file in your WSL2 installation (`wget https://swcarpentry github io/shell-novice/data/shell-lesson-data zip`) You will also have to install unzip by using the command `sudo apt install unzip` and then `unzip shell-lesson-datazip` to unzip the file Keep in mind that throughout the course linked in the first step below, your terminal output may look slightly different from what is shown in the lessons Anytime the course asks you to go to the Desktop, you will instead be going to the home directory which can be done by using the cd command (`cd ~`) Many of these resources assume you're using a Mac or Linux environment If you did our previous installation lesson, you should already have Linux installed in dual-boot or a virtual machine Or, you might be using macOS If you don't have macOS, or any official Ubuntu flavor installed, please return to the [Installations lesson](https://www theodinproject com/lessons/foundations-installations) 1 Visit [The Unix Shell](https://swcarpentry github io/shell-novice/) course designed by the Software Carpentry Foundation There, you will find a full complement of lessons on using the CLI, but for now, just focus on completing the following lessons:\n- [Download files](https://swcarpentry github io/shell-novice/#download-files) - only follow the instructions in this section You don't need to install any software and can move onto the next bullet point in this list - [Introducing the Shell](https://swcarpentry github io/shell-novice/01-intro html)\n- [Navigating Files and Directories](https://swcarpentry github io/shell-novice/02-filedir html)\n- [Working With Files and Directories](https://swcarpentry github io/shell-novice/03-create html)\n1 With your newly discovered CLI superpowers, practice creating a folder and a few files using the `mkdir`, `touch`, and `cd` commands introduced in the previous step As an example, a basic website might have a main `index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14152,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "e38a3f36884956a5593155f7bf79fb06",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
    "source_type": "git_repo",
    "title": "command_line_basics",
    "content": "install any software and can move onto the next bullet point in this list - [Introducing the Shell](https://swcarpentry github io/shell-novice/01-intro html) - [Navigating Files and Directories](https://swcarpentry github io/shell-novice/02-filedir html) - [Working With Files and Directories](https://swcarpentry github io/shell-novice/03-create html) 1 With your newly discovered CLI superpowers, practice creating a folder and a few files using the `mkdir`, `touch`, and `cd` commands introduced in the previous step As an example, a basic website might have a main `indexhtml` file, a CSS stylesheet file called `style css`, and a folder for `images` Think about how you could create these files with the commands and put it into practice 1 Let's practice creating files and directories and deleting them You'll need to enter the commands for the steps below in your terminal If you can't recall how to open a terminal, scroll up for a reminder 1 Create a new directory in your home directory with the name `test` 1 Navigate to the `test` directory 1 Create a new file called `test txt` *Hint: use the `touch` command *\n1 Open your newly created file in VSCode, make some changes, save the file, and close it 1 Navigate back out of the `test` directory 1 Delete the `test` directory That's it---you're done with practice If you commit to doing most tasks from the command line from here on out, these commands will become second nature to you Moving and copying files is much more efficiently done through the command line, even if it feels like more of a hassle at this point Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the command line How do you open the command line on your computer How can you navigate to a particular directory Where will cd on its own navigate you to Where will cd navigate you to How do you display the name of the directory you are currently in How do you display the contents of the directory you are currently in How do you create a new directory How do you create a new file How do you destroy a directory or file",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14152,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "27c36acf7890cc9a2d752aabe7fb0807",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
    "source_type": "git_repo",
    "title": "command_line_basics",
    "content": "command line on your computer How can you navigate to a particular directory Where will cd on its own navigate you to Where will cd navigate you to How do you display the name of the directory you are currently in How do you display the contents of the directory you are currently in How do you create a new directory How do you create a new file How do you destroy a directory or fileHow do you rename a directory or file Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The online book, Learn Enough Command Line to Be Dangerous, is a great resource for mastering the command line Chapters 1 and 2 are free and provide a good introduction to command line tools The rest of the book is not free and goes into more depth than you really need at this point, but feel free to buy and read the rest of the book if you like Command Line Flashcards by flashcards github io",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14152,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\command_line_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 187,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "9e163d40e78d9a286ffa3815b51fe3d1",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installation_overview.md",
    "source_type": "git_repo",
    "title": "installation_overview",
    "content": "Introduction\nThe first step in building any website is having the right tools For us, that means setting up a development environment for writing good code Many online development courses use in-browser code editors or \"sandboxes,\" which give you the tools and programs needed to accomplish the task at hand and nothing else You'll use some of these sandboxes throughout the early stages of The Odin Project since they're great for getting started quickly However, the best way to set yourself up for long-term success is to operate in a real development environment We won't lie to you: installing packages, editors, and even entire operating systems can be very frustrating However, having the experience of setting up a development environment to run the code you'll write is an invaluable, real-world skill you'll carry with you for the rest of your career Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What operating systems (OS) are supported by The Odin Project OS options\nSpecifics about distros/versions and OS installation instructions are all in the next lesson You do not need to go and install anything just yet macOS\nIf you're using a Mac, you're in great shape The Odin Project instructions assume a Unix-based system By installing just a few programs, you will be up and running with your education in no time Linux (Official Ubuntu flavors)\nLinux is a free and open-source operating system that works well with all programming languages Most development tools are written to work natively with Linux Your tools will likely be updated more often, have more information available for troubleshooting, and just plain run better on Linux We'll be using Ubuntu, one of the most popular and user-friendly distributions available, or the lighter weight alternative Xubuntu If you don't use a Mac, we recommend that you use Linux It's that simple Windows\nWindows, by itself, is not natively supported by The Odin Project, or on our Discord server Because many of the tools you'll be using were written with a Linux environment in mind, you'll need to have one even if you plan to use Windows as your development OS If you are currently using Windows, you can use one of the following options to create your development environment (we provide full step-by-step instructions for these options in the next lesson):\nA VirtualBox Virtual Machine\nDual-boot Ubuntu installation\nWindows Subsystem for Linux (WSL2)\nA virtual machine is an emulation of a computer that runs within your existing OS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8213,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installation_overview.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "918dcf37b2d22f051f407e25865819af",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installation_overview.md",
    "source_type": "git_repo",
    "title": "installation_overview",
    "content": "in mind, you'll need to have one even if you plan to use Windows as your development OS If you are currently using Windows, you can use one of the following options to create your development environment (we provide full step-by-step instructions for these options in the next lesson): A VirtualBox Virtual Machine Dual-boot Ubuntu installation Windows Subsystem for Linux (WSL2) A virtual machine is an emulation of a computer that runs within your existing OSIt allows you to use another operating system inside of a program on your current operating system (e g Running Linux inside of Windows) Virtual machines are as straightforward to install as any other program and are risk free If you don't like Linux, you can easily remove the virtual machine Virtual machines are a great way for new developers to get started quickly Dual-booting means installing two operating systems on your computer, giving you the option to boot either Linux or Windows when your computer starts up The advantage of dual-booting over a virtual machine is that the OS can use all of your computer's resources, resulting in much faster operation There is some risk to installing a dual-boot system because you're changing your hard drive partitions, but you'll be okay as long as you take your time and read the instructions Dual-booting can be as easy as inserting a flash drive and clicking a few buttons The benefits of dual-booting cannot be overstated You will allow Linux to access the full capabilities of your hardware, have a clean and distraction-free environment for coding, and learn the platform used by many senior developers and servers around the world Windows Subsystem for Linux lets you run a full-fledged Linux environment from within an existing Windows installation, giving you all of the advantages of Linux through a simplified installation process We'll be using version 2 of WSL, commonly known as WSL2, within the curriculum Chromebook\nFor Chromebook users, you may be able to run a Linux terminal on your device More details will be provided in the next lesson Concerned about installing a new OS \"Woah, woah, woah I like my OS just fine the way it is \"\nIf you don't have an Apple computer, you are likely using Windows Don't worry The options above don't mean you need to get rid of Windows Linux will gladly share the hard drive with Windows We know you've probably learned a lot of tips and tricks for your favorite OS and don't want to lose everything you have on your computer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8213,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installation_overview.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "46997b921ec4b8730155a89230533c7e",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installation_overview.md",
    "source_type": "git_repo",
    "title": "installation_overview",
    "content": "OS \"Woah, woah, woah I like my OS just fine the way it is \" If you don't have an Apple computer, you are likely using Windows Don't worry The options above don't mean you need to get rid of Windows Linux will gladly share the hard drive with Windows We know you've probably learned a lot of tips and tricks for your favorite OS and don't want to lose everything you have on your computerHowever, most OSs are developed with non-technical folks in mind, so they hide or make it difficult to use many of the languages and frameworks we'll need to install Having to work around these difficulties causes many new developers to give up before they've even started their journey to full-stack nirvana Modifying or dual-booting a computer to work with the tools you'll need will make it much easier to start programming, help create a distraction-free environment, and look good on your resume Take a deep breath, and let's look at your options Still not convinced Here are a few great reasons to install Linux:\nTested - We've tested our directions with macOS, Ubuntu (and official Ubuntu flavors) and WSL2 We did the research so that you can get tools installed with as few issues as possible, getting you to coding sooner Time spent wrestling with your operating system is time taken from learning how to code Community Support - Using the tools we recommend makes it easier for us to help when you run into trouble Development Tools Are Built for Linux - Ruby (on Rails) and Node js, popular backend technologies covered by The Odin Project and widely used in the larger web development community, are open source projects that explicitly expect to run on an open-source (UNIX-based) platform like Linux Work Like The Pros - Many developers use a Unix-based operating system Performance - Are you worried about installing Linux because your machine is slow or older and has limited space When performance is a priority, Linux is a great choice It uses fewer system resources than Windows and occupies less hard drive space Many learners come to our Discord channel to ask if the directions on this page need to be followed The moderators of our Discord server wrote everything you just read about the installation plan Those supporting learners on our Discord server agree with the guidance on this page and will make the same recommendations you have read here Before we can continue, we must first stress one detail of importance:\nWe can only support what is provided within the scope of our curriculum We do not support native Windows as a development environment",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8213,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installation_overview.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "1cb8f6704d38d5c6398a62287ede2331",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installation_overview.md",
    "source_type": "git_repo",
    "title": "installation_overview",
    "content": "be followed The moderators of our Discord server wrote everything you just read about the installation plan Those supporting learners on our Discord server agree with the guidance on this page and will make the same recommendations you have read here Before we can continue, we must first stress one detail of importance: We can only support what is provided within the scope of our curriculum We do not support native Windows as a development environmentUsing Windows has been discussed many times and it is not feasible to do so at this time Please do not ask us to support Windows, and do not bring it up in the Discord We are constantly evaluating our curriculum to keep content as fresh and accessible as possible, and Windows has not proven to be a path of low resistance For more information on The Odin Project and Windows, we have a list of reasons why Windows is not a supported OS in The Odin Project With that out of the way, we need to set up an appropriate development environment Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read the OSSPH blog on why developers should use linux for development",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8213,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installation_overview.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e58c75acf3a13a9c1c8d7fc242e9f379",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
    "source_type": "git_repo",
    "title": "setting_up_git",
    "content": "Introduction\nGit is a very popular version control system You'll become very familiar with this piece of software throughout TOP, so don't worry too much about understanding it at this point There are many lessons focused on Git later in the curriculum GitHub is a service that allows you to upload, host, and manage your code using Git with a nice web interface Even though GitHub and Git sound similar, they are not the same or even created by the same company Step 1: Install Git\nClick the Operating System you have chosen below:\nLinux\n#### Step 1 1: Update the system\nRun these commands in the terminal to update the Linux system:\n```bash\nsudo apt update\nsudo apt upgrade\n```\n#### A note on typing passwords in the terminal\nWhen using a command in the terminal that requires you to enter your password for authentication (such as sudo), you will notice that the characters aren't visible as you type them While it might seem like the terminal isn’t responding, don’t worry This is a security feature to protect confidential information, like how password fields on websites use asterisks or dots By not displaying the characters you write, the terminal keeps your password secure You can still enter your password as normal and press Enter to submit it #### Step 1 2: Install Git\nYou likely have `git` installed already, but to make sure that we have the most up to date version of git, run the following commands:\n```bash\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt update\nsudo apt install git\n```\n#### Step 1 3: Verify version\nMake sure your Git version is **at least** 2 28 by running this command:\n```bash\ngit --version\n```\nIf the version number is less than 2 28, follow the instructions again MacOS\n#### Step 1 0: Install Homebrew\nFirst, you'll need to install Homebrew To install it, you’ll first need to make sure you meet the [Homebrew MacOS requirements](https://docs brew sh/Installation#macos-requirements) Once you meet the requirements, copy and paste the following into your terminal:\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw githubusercontent com/Homebrew/install/HEAD/install sh)\"\n```\nOn an Apple Silicon Mac, you will have an extra step to take If you look at the terminal output after installing Homebrew, you will see \"Installation Successful \"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13150,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "552a0781881d597806e23c594ff8ea8c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
    "source_type": "git_repo",
    "title": "setting_up_git",
    "content": "Homebrew First, you'll need to install Homebrew To install it, you’ll first need to make sure you meet the [Homebrew MacOS requirements](https://docs brew sh/Installation#macos-requirements) Once you meet the requirements, copy and paste the following into your terminal: ```bash /bin/bash -c \"$(curl -fsSL https://raw githubusercontent com/Homebrew/install/HEAD/install sh)\" ``` On an Apple Silicon Mac, you will have an extra step to take If you look at the terminal output after installing Homebrew, you will see \"Installation Successful \"Further down in the terminal, there will be a section called \"Next steps\" Reading the terminal may seem a bit intimidating, but this is a great chance to overcome those feelings Follow the next steps as stated in your terminal (copy and paste the commands given) to add Homebrew to your PATH, which allows you to use the `brew` command prefix #### Step 1 1: Update Git\nMacOS already comes with a version of Git, but you should update to the latest version In the terminal, type\n```bash\nbrew install git\n```\nThis will install the latest version of Git Easy, right #### Step 1 2: Verify version\nIf you have just installed and/or updated Git from the previous step, first close that terminal window **Open a new terminal window** and then make sure your Git version is **at least** 2 28 by running this command:\n```bash\ngit --version\n```\nIf the version number is less than 2 28, follow the instructions again If you are encountering a `no formulae found in taps` error:\n1 Run `brew doctor` 1 You will see an output like the one below NOTE: The actual output of `brew doctor` may vary based on the version of MacOS you're running, and any other issues you may have with your own installation Ultimately, you must run each command line snippet that Homebrew provides after running `brew doctor` to repair your installation of Homebrew, including `brew cleanup` at the end [Brew Doctor Sample Output](https://cdn statically io/gh/TheOdinProject/curriculum/284f0cdc998be7e4751e29e8458323ad5d320303/foundations/installations/setting_up_git/imgs/00 png)\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13150,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "4917d292dc104c80a7e8ab8aa3139f24",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
    "source_type": "git_repo",
    "title": "setting_up_git",
    "content": "Run `brew doctor` 1 You will see an output like the one below NOTE: The actual output of `brew doctor` may vary based on the version of MacOS you're running, and any other issues you may have with your own installation Ultimately, you must run each command line snippet that Homebrew provides after running `brew doctor` to repair your installation of Homebrew, including `brew cleanup` at the end [Brew Doctor Sample Output](https://cdn statically io/gh/TheOdinProject/curriculum/284f0cdc998be7e4751e29e8458323ad5d320303/foundations/installations/setting_up_git/imgs/00 png) 1Run `brew install git`, **open a new terminal window**, and then check your version of Git, which should now be the latest ChromeOS\nFollow the instructions on [installing Git from Source](https://www digitalocean com/community/tutorials/how-to-install-git-on-debian-10#installing-git-from-source) from Digital Ocean Step 2: Configure Git and GitHub\nStep 2 1: Create a GitHub account\nGo to GitHub com and create an account During the account setup, it will ask you for an email address This needs to be a real email, and will be used by default to identify your contributions If you are privacy conscious, or just don't want your email address to be publicly available, make sure you tick the following two boxes on the Email Settings page after you have signed in:\nHaving these two options enabled will prevent accidentally exposing your personal email address when working with Git and GitHub You may also notice an email address under the Keep my email addresses private option This is your private GitHub email address If you plan to use this, make note of it now as you will need it when setting up Git in the next step Step 2 2: Setup Git\nFor Git to work properly, we need to let it know who we are so that it can link a local Git user (you) to GitHub When working on a team, this allows people to see what you have committed and who committed each line of code The commands below will configure Git Be sure to enter your own information inside the quotes (but include the quotation marks ) - if you chose to keep your email private on GitHub, use your special private GitHub email from step 2 1 bash\ngit config --global user name \"Your Name\"\ngit config --global user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13150,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "9910db2ecf5a8620829eb889b9311b77",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
    "source_type": "git_repo",
    "title": "setting_up_git",
    "content": "When working on a team, this allows people to see what you have committed and who committed each line of code The commands below will configure Git Be sure to enter your own information inside the quotes (but include the quotation marks ) - if you chose to keep your email private on GitHub, use your special private GitHub email from step 2 1 bash git config --global user name \"Your Name\" git config --global useremail yourname@example com\nFor example, if you set your email as private on GitHub, the second command will look something like this:\nbash\ngit config --global user email 123456789+odin@users noreply github com # Remember to use your own private GitHub email here GitHub recently changed the default branch on new repositories from master to main Change the default branch for Git using this command:\nbash\ngit config --global init defaultBranch main\nYou'll also likely want to set your default branch reconciliation behavior to merging You'll learn what all those terms mean later in the curriculum, but for now just know that we suggest running the below command as part of the Git setup process when doing The Odin Project bash\ngit config --global pull rebase false\nTo verify that things are working properly, enter these commands and verify whether the output matches your name and email address bash\ngit config --get user name\ngit config --get user email\n#### For macOS Users\nRun these two commands to tell Git to ignore DS_Store files, which are automatically created when you use Finder to look into a folder DS_Store files are invisible to the user and hold custom attributes or metadata (like thumbnails) for the folder, and if you don't configure Git to ignore them, pesky DS_Store files will show up in your commits Remember to copy and paste each of these commands into your terminal ```bash\necho DS_Store >> ~/ gitignore_global\ngit config --global core excludesfile ~/ gitignore_global\n```\nStep 2 3: Create an SSH key\nIf you have already setup an ssh key pair with GitHub on a different machine prior to starting The Odin Project, GitHub allows you to have multiple key pairs associated with your account You can just follow these instructions again to set up another key pair and register it with GitHub An SSH key is a cryptographically secure identifier It's like a really long password used to identify your machine GitHub uses SSH keys to allow you to upload to your repository without having to type in your username and password every time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13150,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "34b54eac47ee4aee390b9ccdbe357511",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
    "source_type": "git_repo",
    "title": "setting_up_git",
    "content": "starting The Odin Project, GitHub allows you to have multiple key pairs associated with your account You can just follow these instructions again to set up another key pair and register it with GitHub An SSH key is a cryptographically secure identifier It's like a really long password used to identify your machine GitHub uses SSH keys to allow you to upload to your repository without having to type in your username and password every timeFirst, we need to see if you have an Ed25519 algorithm SSH key already installed Type this into the terminal and check the output with the information below:\nbash\nls ~/ ssh/id_ed25519 pub\nIf a message appears in the console containing the text \"No such file or directory\", then you do not yet have an Ed25519 SSH key, and you will need to create one If no such message has appeared in the console output, you can proceed to step 2 4 To create a new SSH key, run the following command inside your terminal bash\nssh-keygen -t ed25519\nWhen it prompts you for a location to save the generated key, just push Enter Next, it will ask you for a password This password is used to encrypt the private SSH key that is stored on your computer and you will be required to enter this password every time you use SSH with these keys If you don't use a password, the private key will be readable by anyone who has access to your computer and will be able to modify all your GitHub repositories Enter one if you wish, but it’s not required If you choose not to use a password, just hit Enter without typing anything Step 2 4: Link your SSH key with GitHub\nNow, you need to tell GitHub what your SSH key is so that you can push your code without typing in a password every time First, you'll navigate to where GitHub receives our SSH key Log into GitHub and click on your profile picture in the top right corner Then, click on Settings in the drop-down menu Next, on the left-hand side, click SSH and GPG keys Then, click the green button in the top right corner that says New SSH Key Name your key something that is descriptive enough for you to remember what device this SSH key came from, for example linux-ubuntu Leave this window open while you do the next steps Now you need to copy your public SSH key To do this, we're going to use a command called cat to read the file to the console (Note that the pub file extension is important in this case",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13150,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "e1eed2c18c986cb071218f8faa8c89cc",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
    "source_type": "git_repo",
    "title": "setting_up_git",
    "content": "corner that says New SSH Key Name your key something that is descriptive enough for you to remember what device this SSH key came from, for example linux-ubuntu Leave this window open while you do the next steps Now you need to copy your public SSH key To do this, we're going to use a command called cat to read the file to the console (Note that the pub file extension is important in this case)\nbash\ncat ~/ ssh/id_ed25519 pub\nHighlight and copy the entire output from the command If you followed the instructions above, the output will likely begin with ssh-ed25519 and end with your username@hostname Now, go back to GitHub in your browser window and paste the key you copied into the key field Keep the key type as Authentication Key and then, click Add SSH key You're done You've successfully added your SSH key Step 2 5 Testing your key\nFollow the GitHub directions for testing your SSH connection Make sure the fingerprint output in the terminal matches one of the four GitHub's public fingerprints You should see this response in your terminal: Hi username You've successfully authenticated, but GitHub does not provide shell access Don't let GitHub's lack of providing shell access trouble you If you see this message, you've successfully added your SSH key and you can move on If the output doesn't correctly match up, then try going through these steps again or come to the Discord chat to ask for help Step 3: Let us know how it went You've completed the basic installations section, good job As you progress through the Paths there will be other tools to install, so keep an eye out You probably felt like you were way in over your head, and you probably didn't understand much of what you were doing That's 100% normal Hang in there You can do this And we've got your back Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Understanding SSH Key Pairs SSH is a secure network protocol that uses an implementation of public-key cryptography, also known as asymmetric cryptography Having a basic understanding of how it works can help you understand what an SSH key is all about Asymmetric Encryption - Simply explained a short video explaining Asymmetric Encryption",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13150,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\setting_up_git.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "207610d65dd17cd3bac0c9e8aba2f631",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\text_editors.md",
    "source_type": "git_repo",
    "title": "text_editors",
    "content": "Introduction\nA text editor is by far the most used developer tool regardless of what type of developer you are A good text editor can help you write better code with real-time code checking, syntax highlighting, and automatic formatting Why can't I use Microsoft Word Rich text editors, such as Microsoft Word and LibreOffice Writer, are great for writing a paper, but the features that make them good at creating nicely formatted documents make them unsuitable for writing code A document created with these rich text editors has more than just text embedded in the file These files also contain information on how to display the text on the screen and data on how to display graphics embedded into the document In contrast, plain text editors, such as VSCode and Sublime, don't save any additional information Saving only the text allows other programs, like Ruby's interpreter, to read and execute the file as code Code editors\nYou can think of code editors as specialized web development tools They are highly customizable and offer many features that will make your life easier There is nothing worse than spending two hours trying to figure out why your program isn't working, only to realize that you missed a closing bracket Plugins, syntax highlighting, auto-closing of brackets and braces, and linting are just a few of the benefits of using a code editor There are many text editors out there to choose from, but we suggest starting with Visual Studio Code Visual Studio Code, or just VSCode as it's commonly referred to, is an excellent free code editor It has outstanding add-on support and great Git integration VSCode is the most popular code editor among Odin's students and moderators, so support is easy to find in the community Which editor you use is generally a matter of preference, but for the purposes of this course, we are going to assume you're using VSCode because it's free, easy to use, and works pretty much the same on every operating system Keep in mind that this means you will not be able to get help if you are using a different text editor other than VSCode for the curriculum As a reminder, if you're using a virtual machine, you should install VSCode on your VM You're welcome to also install it on your host (i e , your Windows main OS), but ensure you have this critical tool inside your VM VSCode installation\nChoose your Operating System:\nLinux\n#### Step 1: Download VSCode\n- Open your **Terminal** - Run the following command to download the latest **VSCode** `",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7525,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\text_editors.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "54cf51fdbdc049bd13bb5318a9b3cea1",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\text_editors.md",
    "source_type": "git_repo",
    "title": "text_editors",
    "content": "editor other than VSCode for the curriculum As a reminder, if you're using a virtual machine, you should install VSCode on your VM You're welcome to also install it on your host (i e , your Windows main OS), but ensure you have this critical tool inside your VM VSCode installation Choose your Operating System: Linux #### Step 1: Download VSCode - Open your **Terminal** - Run the following command to download the latest **VSCode** `deb` package:\n```bash\nwget -O code-latest deb 'https://code visualstudio com/sha/download build=stable&os=linux-deb-x64'\n```\n#### Step 2: Install VSCode\n- Enter the following command in your terminal to install the **VSCode** ` deb` package:\n```bash\nsudo apt install /code-latest deb\n```\n- If prompted, enter your password #### A note on typing passwords in the terminal\nWhen using a command in the terminal that requires you to enter your password for authentication (such as sudo), you will notice that the characters aren't visible as you type them While it might seem like the terminal isn’t responding, don’t worry This is a security feature to protect confidential information, like how password fields on websites use asterisks or dots By not displaying the characters you write, the terminal keeps your password secure You can still enter your password as normal and press Enter to submit it You might see a notice starting with `N: Download is performed unsandboxed ( )` You don't need to worry about it [You can read a Reddit post for more information ](https://www reddit com/r/linux4noobs/comments/ux6cwx/comment/i9x2twx/)\n#### Step 3: Delete the installer file\n```bash\nrm code-latest deb\n```\n#### Step 4: Using VSCode\nYou can start VSCode in two ways,\n- Click **Visual Studio Code** from the Applications menu - **Or**, use the `code` command from the terminal ```bash\ncode\n```\nMacOS\n#### Step 1: Download VSCode\n- [Download the latest VSCode installer zip file ](https://code visualstudio com/sha/download build=stable&os=darwin-universal)\n#### Step 2: Install VSCode\n- Open the **Downloads** folder - Double click the file **VSCode-darwin-universal zip** - Drag the **Visual Studio Code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7525,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\text_editors.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6bd0ad8b7d2e067359d1df98adf292c8",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\text_editors.md",
    "source_type": "git_repo",
    "title": "text_editors",
    "content": "deb ``` #### Step 4: Using VSCode You can start VSCode in two ways, - Click **Visual Studio Code** from the Applications menu - **Or**, use the `code` command from the terminal ```bash code ``` MacOS #### Step 1: Download VSCode - [Download the latest VSCode installer zip file ](https://code visualstudio com/sha/download build=stable&os=darwin-universal) #### Step 2: Install VSCode - Open the **Downloads** folder - Double click the file **VSCode-darwin-universal zip** - Drag the **Visual Studio Codeapp** icon to the **Applications** folder icon #### Step 3: Delete the installer file\n- Open **Finder** - Go to the **Downloads** folder - Drag **VSCode-darwin-universal zip** to the trash #### Step 4: Using VSCode\n- Go to your **Applications** folder - Double click **Visual Studio Code** WSL2\n#### Step 1: Install VSCode\n- Follow the instructions for [Visual Studio Code on Windows](https://code visualstudio com/docs/setup/windows) to install VSCode #### Step 2: Delete the installer file\n- Open **File Explorer** - Go to the **Downloads** folder - Drag **VSCodeUserSetup-{version} exe** to the trash #### Step 3: Install WSL Extension\n- Open Visual Studio Code - Navigate to the extensions tab - Find and install the [WSL extension](https://marketplace visualstudio com/items itemName=ms-vscode-remote remote-wsl) #### Step 4: Ensure that WSL2 can correctly open VSCode\n- Open a new WSL2 terminal - Run the following command to open a new VSCode window ```bash\ncode\n```\n- After a few moments a new VSCode window should open, and VSCode should provide a notification that its opening in WSL2 Assignment\n1 Familiarizing yourself with VSCode will allow you to save time and become more productive By watching this [VSCode Tutorial for Beginners](https://youtu be/ORrELERGIHs t=103) video, you'll get an idea of all the features VSCode has to offer Don't worry about actually coding along, just watch for the way that VSCode is used throughout the video 1 Disable the Copilot AI code completion feature which is enabled by default in Visual Studio Code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7525,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\text_editors.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "4a5e2e20b7d03defb8f8e27650c12b5c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\text_editors.md",
    "source_type": "git_repo",
    "title": "text_editors",
    "content": "opening in WSL2 Assignment 1 Familiarizing yourself with VSCode will allow you to save time and become more productive By watching this [VSCode Tutorial for Beginners](https://youtu be/ORrELERGIHs t=103) video, you'll get an idea of all the features VSCode has to offer Don't worry about actually coding along, just watch for the way that VSCode is used throughout the video 1 Disable the Copilot AI code completion feature which is enabled by default in Visual Studio CodeDo this by clicking the little robot face in the bottom right of your VSCode window and unchecking the code completions box To understand why The Odin Project thinks you should disable this feature please revisit the Motivation and Mindset lesson section [A note on AI code generation](https://www theodinproject com/lessons/foundations-motivation-and-mindset#a-note-on-ai-code-generation) Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental VSCode docs are a great place to refer to for any of your queries related to VSCode These handy little PDFs on VSCode's shortcuts for linux, macOS and Windows/WSL2 are a great resource to help make your VSCode experience smoother and more efficient",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7525,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\text_editors.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "17cc65d15e957a4243a0ffdd0b18cae5",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\asking_for_help.md",
    "source_type": "git_repo",
    "title": "asking_for_help",
    "content": "Introduction\nAlong your programming journey, you will inevitably need to ask questions in an online coding community like ours or in conversations with your colleagues While asking questions may seem rather simple, in a programming environment it is essential to ask well-formed questions with as much context as needed so you can get the most out of asking for help In essence, “help others help you ” This lesson will provide you with the tools to effectively ask questions in communities such as our Discord chat, Stack Overflow, and in the workplace Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain techniques for asking programming questions Explain and avoid qualities of “bad” questions Ask effective and well-formed questions Tips for getting the best help possible\nAlways provide your code and the surrounding context\nWhen asking a question, it is essential to provide your code, error message, terminal command, server output, and other relevant details You should provide as much context as possible and zero in on the specific problem, such as pointing people to a specific function or line number in your code Providing this relevant information makes it easier for others to help you If your question does not provide any code or other relevant information, it will be difficult for others to help you In order to fully understand your question, there will be a lot of unnecessary back and forth conversation This can be discouraging for you because any answers with incomplete information will not solve your problem This process can be frustrating for those helping because the meaning of your original question changes as you add more context to it If you truly want to ask a conceptual question, you should indicate this as part of your question Ask about the problem at hand, not the solution itself\nA lot of learners ask exactly how to approach a given task or assignment in this curriculum, such as the following:\n“How do I complete Step 5 of the Rock Paper Scissors Assignment” Keep in mind that you’re supposed to figure out how to solve the assignments yourself, and figuring out an approach is essential to your learning journey A much better question might look like this:\n“Hey, I’m trying to return a string that displays the winner in Rock Paper Scissors, but I’m getting a syntax error on line 12 How can I fix this Here’s my code ”\nIn sharing your attempt, people know what you’ve tried and won’t suggest things that might not have worked out for you",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5691,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\asking_for_help.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9028adaad46e406a25645e7ac8170a61",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\asking_for_help.md",
    "source_type": "git_repo",
    "title": "asking_for_help",
    "content": "the assignments yourself, and figuring out an approach is essential to your learning journey A much better question might look like this: “Hey, I’m trying to return a string that displays the winner in Rock Paper Scissors, but I’m getting a syntax error on line 12 How can I fix this Here’s my code ” In sharing your attempt, people know what you’ve tried and won’t suggest things that might not have worked out for youIt also allows them to debug your current iteration of code, rather than sending you down a path that has you start all over again when you might be very close to a solution Now, if you’re completely stuck with where to start, it’s completely fine to let people know that you’re stuck Asking where you can start and what you can research to get on the right track empowers you to be able to resolve issues largely on your own in the future, and might even empower you to help others with the same issue later on It is also recommended that you share your pseudo code so people can nudge you in the right direction or correct any misunderstandings you may have Don’t take asking for more context to heart\nPeople who volunteer in coding communities are here to help A question you may feel is coherent and “obvious” probably isn’t if you are being asked for more context While something may seem \"obvious\" to a beginner, it's sometimes nowhere near \"obvious\" to an expert An expert knows about many, many more situations that could cause an issue someone is experiencing, and would want to refrain from sending a learner down the wrong path People take time out of their day to help, so make it as easy as possible for them to help you There’s probably a good reason why they need more information, so trust their judgment and experience when they ask Many people who help in coding chats are unpaid volunteers, and are in no way obligated to answer your query But because they truly want to help you, they will ask for more information when needed Assignment\n1 [Don't ask to ask, just ask](https://dontasktoask com/) demonstrates the importance of just asking your question and not asking to ask your question 1 Read about the [“XY Problem”](https://xyproblem info/), which is a common pitfall both new and experienced programmers fall into when asking questions 1 Read and bookmark our community guide [How to Ask Technical Questions](https://www theodinproject",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5691,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\asking_for_help.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "618c593757d564b0d6574fe929f44229",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\asking_for_help.md",
    "source_type": "git_repo",
    "title": "asking_for_help",
    "content": "query But because they truly want to help you, they will ask for more information when needed Assignment 1 [Don't ask to ask, just ask](https://dontasktoask com/) demonstrates the importance of just asking your question and not asking to ask your question 1 Read about the [“XY Problem”](https://xyproblem info/), which is a common pitfall both new and experienced programmers fall into when asking questions 1 Read and bookmark our community guide [How to Ask Technical Questions](https://www theodinprojectcom/guides/community/how_to_ask) It is a great reference to refer to whenever you find yourself needing to ask for help, and you might find yourself solving your own problem as you think about the points listed in the article Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the “XY Problem” What 5 things should your questions include Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Harvard Business Review article exploring The Mental Battle behind Asking for Help",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5691,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\asking_for_help.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7d55548609923c73c9282ec30cf917e2",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "Introduction\nIf you are already using MacOS, Ubuntu, or an official flavor of Ubuntu as your operating system and have Google Chrome as an installed browser, you can skip this lesson Otherwise, click on the small arrow to the left of the method you would like to use below to expand that section, and then follow the installation instructions #### Be mindful of the OS you are using\nWe can only support the operating systems indicated above Our instructions have been tested with MacOS, Ubuntu, and official flavors of Ubuntu We do not recommend installing an OS that is only based on Ubuntu (like Mint, Pop _OS, ElementaryOS, etc) Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to set up a proper environment to follow The Odin Project curriculum Installing Google Chrome in your environment Assignment\n1 If you're not already running a supported environment, decide on which environment you're going to set up - Look through the instructions so you know what to expect - Choose and follow one of the instructions below 1 After you have your environment sorted, proceed to the Google Chrome installation instructions OS installation\n#### Unsupported hardware and software\nThis curriculum only supports using a laptop, desktop or supported Chromebook We cannot help you set up a developer environment on a RaspberryPi or any other device You only need to follow one of these sets of instructions if you are **not** already using **MacOS**, **Ubuntu**, or [an official flavor of Ubuntu](https://ubuntu com/desktop/flavours) as your operating system If you are already using supported hardware and software, you can skip straight to Google Chrome installation below Pick your method of installation below:\nVirtual Machine (Recommended)\nInstalling a Virtual Machine (VM) is the easiest and most reliable way to get started creating an environment for web development A VM is an entire computer emulation that runs inside your current Operating System (OS), like Windows The main drawback of a VM is that it can be slow because you’re essentially running two computers at the same time We’ll do a few things to improve its performance ### Step 1: Download VirtualBox and Xubuntu\nInstalling a VM is a straightforward process This guide uses Oracle's VirtualBox program to create and run the VM This program is open-source, free, and easy to use What more can you ask for Now, let's make sure we have everything downloaded and ready for installation #### IMPORTANT\nOnce you have completed these instructions, **you are expected to work entirely in the VM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 24
  },
  {
    "id": "4a2522481a737e7ef335ba1ce3c22750",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "few things to improve its performance ### Step 1: Download VirtualBox and Xubuntu Installing a VM is a straightforward process This guide uses Oracle's VirtualBox program to create and run the VM This program is open-source, free, and easy to use What more can you ask for Now, let's make sure we have everything downloaded and ready for installation #### IMPORTANT Once you have completed these instructions, **you are expected to work entirely in the VM** Maximize the window, add more virtual monitors if you have them, fire up the Internet Browser in the **Whisker Menu** [The blue-white rodent Whisker Menu Icon](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/00_whisker_icon png){: inline-img} on the top left of the desktop You should not be using anything outside of the VM while working on The Odin Project If you feel like you have a good understanding after using the VM for a while, and or want to improve your experience, we recommend dual-booting Ubuntu, which there are instructions for below #### Step 1 1: Download VirtualBox\n[Download VirtualBox for Windows hosts](https://www virtualbox org/wiki/Downloads) #### Step 1 2: Download Xubuntu\nThere are thousands of distributions of Linux out there, but Xubuntu is undoubtedly one of the most popular and user friendly When installing Linux on a VM, we recommend downloading [Xubuntu 22 04](https://mirror us leaseweb net/ubuntu-cdimage/xubuntu/releases/22 04/release/) There are a few files listed here, download the one ending in ` iso` Xubuntu uses the same base software as Ubuntu but has a desktop environment that requires fewer computer resources and is therefore ideal for virtual machines If you find the download speed slow, consider using a different [mirror for Xubuntu 22 04](https://xubuntu org/release/22-04/#show-all) as the one linked before is a US one If you reach the download page and are unsure about what version to choose, it is recommended that you pick the Long-Term Support (LTS) version 22 04 (Jammy Jellyfish)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 24
  },
  {
    "id": "73628d942c8d54dd21460a9d670daca9",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "base software as Ubuntu but has a desktop environment that requires fewer computer resources and is therefore ideal for virtual machines If you find the download speed slow, consider using a different [mirror for Xubuntu 22 04](https://xubuntu org/release/22-04/#show-all) as the one linked before is a US one If you reach the download page and are unsure about what version to choose, it is recommended that you pick the Long-Term Support (LTS) version 22 04 (Jammy Jellyfish)You may be tempted to choose a more recent release, but this version is tried and tested by the Odin Project community and therefore the most reliable option for the purposes of this curriculum ### Step 2: Install VirtualBox and set up Xubuntu\n#### Step 2 1: Install VirtualBox\nInstalling VirtualBox is very straightforward It doesn’t require much technical knowledge and is the same process as installing any other program on your Windows computer Double clicking the downloaded VirtualBox file will start the installation process If you receive an error about needing Microsoft Visual C++ 2019 Redistributable Package, you can find it on the [official Microsoft Learn page](https://learn microsoft com/en-us/cpp/windows/latest-supported-vc-redist view=msvc-170#visual-studio-2015-2017-2019-and-2022) You most likely want the version with `X64` Architecture (that means 64-bit) - download and install it then try installing VirtualBox again During the installation, you’ll be presented with various options We suggest dropping the Python Support as you don't need it by clicking on the drive icon with an arrow and choosing **Entire feature will be unavailable**: [The Python option is at the bottom of the list](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/01_turn_off_python png)\nThis is how your installation window should look like after turning it off: [You want the Python option to have a scarlet \"X\" on it](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/02_c_install",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 24
  },
  {
    "id": "37ff8a82547f4b583e578558638a7523",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "During the installation, you’ll be presented with various options We suggest dropping the Python Support as you don't need it by clicking on the drive icon with an arrow and choosing **Entire feature will be unavailable**: [The Python option is at the bottom of the list](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/01_turn_off_python png) This is how your installation window should look like after turning it off: [You want the Python option to have a scarlet \"X\" on it](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/02_c_installpng)\nMake sure you install the application on `C:` drive, as it has tendency to error out otherwise The virtual machine itself can be installed anywhere but we'll get to that soon As the software installs, the progress bar might appear to be stuck; just wait for it to finish #### Step 2 2: Prepare VirtualBox for Xubuntu\nNow that you have VirtualBox installed, launch the program Once open, you should see the start screen [The VirtualBox start screen](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/03_start_screen png)\nClick on the **New** button to create a virtual operating system Give it a name of **Xubuntu**, if you want the VM installed somewhere else than default `C:` location, change that accordingly in the **Folder** option This is the place where your virtual disk will reside, so make sure that you've got at least 30GB for that In **ISO Image** choose **Other** - you'll see a window open for you to find the ` iso` file on your PC It most likely is in the `Downloads` folder Leave **Skip Unattended Installation** as it is [Half of the options being greyed out is normal Don't worry about it ](https://cdn statically",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 3,
    "total_chunks": 24
  },
  {
    "id": "9f3fd4317988e6a2c0ca9f8db2ea1915",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "the **Folder** option This is the place where your virtual disk will reside, so make sure that you've got at least 30GB for that In **ISO Image** choose **Other** - you'll see a window open for you to find the ` iso` file on your PC It most likely is in the `Downloads` folder Leave **Skip Unattended Installation** as it is [Half of the options being greyed out is normal Don't worry about it ](https://cdn staticallyio/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/04_install_start png)\nContinue by pressing **Next** and follow the next steps:\n#### Step 2 2 1: Unattended guest OS install setup\nYou should see a window like this one now: [No need to worry about the Product Key ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/05_unattended_install png)\nYou want to tick the **Guest Additions** and **Install in Background** options and also change your **Username** and **Password** fields to your liking Note that your username must be all lower-case and no more than 32 characters If you forget to change the default password, it will be `changeme` Leave the **Guest Additions ISO**, **Hostname** and **Domain Name** as they are Continue by pressing **Next** #### Step 2 2 2: Hardware [You might be tempted to give your VM more than 2 processors Don't ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/06_hardware png)\nIn the **Hardware** section of the installation you want to set your **Base Memory** to at least 2048 MB or more if possible - the upper limit is half of your total RAM but 4096 MB with the settings we recommend should give you a smooth experience",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 4,
    "total_chunks": 24
  },
  {
    "id": "cb854a0ab1d630070b070ca23363be3a",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "they are Continue by pressing **Next** #### Step 2 2 2: Hardware [You might be tempted to give your VM more than 2 processors Don't ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/06_hardware png) In the **Hardware** section of the installation you want to set your **Base Memory** to at least 2048 MB or more if possible - the upper limit is half of your total RAM but 4096 MB with the settings we recommend should give you a smooth experience> For example, if you have 8 GB (8192 MB respectively) of RAM, you could allocate up to 4096 MB (1024 MB to 1 GB) to your VM’s operating system You can Google how to find out how much RAM you have available if you do not know this already If the VM runs a bit slow, try allocating more memory #### Converting gigabytes to megabytes\nDifficulty converting your Gigabytes (GB) into Megabytes (MB) 1 GB of RAM is equal to 1024 MB Therefore, you can say that **8 GB = 8 x 1024 = 8192 MB **\nAs for **Processors** you want this to be at 2 and no more Leave **Enable EFI (special OSes only)** as it is - that is **unchecked** - and click **Next** to continue #### Step 2 2 3: Virtual hard disk [Don't Pre-allocate Full Size ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/07_virtual_hard_disk png)\nNow, you want to leave all the settings as they are besides the **Disk Size**, we recommend giving the VM **at least 30GB** of space Reminder that this disk will be created in the folder that you've specified on the very first step of the VM creation process but nonetheless, the disk can be moved and resized in the future if needed #### Step 2 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 5,
    "total_chunks": 24
  },
  {
    "id": "fc0c6663f59a4803af2b8d309fe3eea8",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "hard disk [Don't Pre-allocate Full Size ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/07_virtual_hard_disk png) Now, you want to leave all the settings as they are besides the **Disk Size**, we recommend giving the VM **at least 30GB** of space Reminder that this disk will be created in the folder that you've specified on the very first step of the VM creation process but nonetheless, the disk can be moved and resized in the future if needed #### Step 2 24: Begin the unattended installation\nClick **Next** to be taken to a **Summary** page, on which you can click **Finish** to begin the process of unattended installation The neat thing about it It installs the OS and GuestAdditions on its own, without your input Just let it do its own thing, you will know it is finished when you will see a login screen like this one in the **Preview** section: [The Preview section is in the top right of VirtualBox window ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/08_preview_login png)\nJust click the green arrow called **Show** and you'll be presented with a VM window and the login screen Log in with the password you've set up during the installation process and we'll have one bit of configuration left to do It is possible that you'll receive an error like this one after clicking **Finish**: [The error shows up on the right side of the VirtualBox window and can be a little differently worded ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/09_virtualization_error png)\nIt means you have to [enable virtualization in your computer’s BIOS/UEFI settings](https://access redhat",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 6,
    "total_chunks": 24
  },
  {
    "id": "1cefefcc124f3bddd5f9c7e568ea975a",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "and the login screen Log in with the password you've set up during the installation process and we'll have one bit of configuration left to do It is possible that you'll receive an error like this one after clicking **Finish**: [The error shows up on the right side of the VirtualBox window and can be a little differently worded ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/09_virtualization_error png) It means you have to [enable virtualization in your computer’s BIOS/UEFI settings](https://access redhatcom/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-troubleshooting-enabling_intel_vt_x_and_amd_v_virtualization_hardware_extensions_in_bios) [Alternative instructions for enabling virtualization in BIOS/UEFI settings](https://wiki 2n com/faqac/en/virtualizace-vt-x-amd-v-povoleni-virtualizace-na-vasem-pocitaci-pro-spusteni-2n-access-commander-100572533 html) If you have an AMD CPU, you're probably looking for something called `SVM` to enable, for Intel CPUs, `Intel Virtualization Technology` The error should tell you what it is looking for After you deal with it, just **Start** the machine and let things happen, you'll know that the process has finished when you see a login screen: [You can already make your VM full screen or just maximize the window ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/10_login_screen png)\n### Step 3: Setting correct sudo permissions\nDue to how the unattended installation is configured by VirtualBox, your account doesn't have proper `sudo` permissions Think of them as the equivalent to `Run as administrator` on your Windows machine - you can imagine why it would be important to have them in order #### Step 3 1: Navigate to users and group\nFirst, if you haven't already, login with the username and password created earlier, then click on the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 7,
    "total_chunks": 24
  },
  {
    "id": "f7ac9d4c4daa219972f16827b3f945f4",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "3: Setting correct sudo permissions Due to how the unattended installation is configured by VirtualBox, your account doesn't have proper `sudo` permissions Think of them as the equivalent to `Run as administrator` on your Windows machine - you can imagine why it would be important to have them in order #### Step 3 1: Navigate to users and group First, if you haven't already, login with the username and password created earlier, then click on the[The blue-white rodent Whisker Menu Icon](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/00_whisker_icon png){: inline-img} in top left of your window, afterwards type in `Users` and you should see `Users and Groups` show up Click on it [It should be the top option you see It is possible that due to localization it'll be called differently - try using the term in your language then ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/11_users_and_groups png)\n#### Step 3 2: Manage groups\nIn the window that just came up you want to click on **Manage Groups**, click somewhere on the list and type `sudo` on your keyboard That should bring you to the `sudo` entry like in the picture: [You will find the search functionality like this in many corners of Xubuntu ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/12_sudo_group png)\n#### Step 3 2: Add yourself to sudo\nWith `sudo` selected, click **Properties** and in the window that shows up tick your user's name like this: [No need to touch anything else ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/13_sudo_properties png)\nAnd then click **OK**",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 8,
    "total_chunks": 24
  },
  {
    "id": "8671525dc2193c90773457b9971e7d1f",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "list and type `sudo` on your keyboard That should bring you to the `sudo` entry like in the picture: [You will find the search functionality like this in many corners of Xubuntu ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/12_sudo_group png) #### Step 3 2: Add yourself to sudo With `sudo` selected, click **Properties** and in the window that shows up tick your user's name like this: [No need to touch anything else ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/13_sudo_properties png) And then click **OK**You will be greeted with a password prompt - it's the same one you logged in with #### Step 3 3: Reboot your VM\nNow that this is all done, you can close those windows and reboot your VM You can open a `Terminal` window by doing Ctrl + Alt + T and type in `reboot` and then press Enter to execute the command Alternatively, you can click on the [The blue-white rodent Whisker Menu Icon](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/00_whisker_icon png){: inline-img}, then click on the power icon in bottom right and pick **Restart** [You might want to take note of other options that you see in this menu ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/14_logout png) [Not the most exciting of menus, but take note of the Shut Down option ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/15_restart",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 9,
    "total_chunks": 24
  },
  {
    "id": "0869fc736a7198b71bf1bd7adfe4090e",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "and type in `reboot` and then press Enter to execute the command Alternatively, you can click on the [The blue-white rodent Whisker Menu Icon](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/00_whisker_icon png){: inline-img}, then click on the power icon in bottom right and pick **Restart** [You might want to take note of other options that you see in this menu ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/14_logout png) [Not the most exciting of menus, but take note of the Shut Down option ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/15_restartpng)\n#### Step 3 4: Test your newly gained sudo privileges\nNow that you have access to `sudo`, we can use this to update our Xubuntu through the `Terminal` Open the `Terminal` and use these commands, one after another:\n#### A note on typing passwords in the terminal\nWhen using a command in the terminal that requires you to enter your password for authentication (such as sudo), you will notice that the characters aren't visible as you type them While it might seem like the terminal isn’t responding, don’t worry This is a security feature to protect confidential information, like how password fields on websites use asterisks or dots By not displaying the characters you write, the terminal keeps your password secure You can still enter your password as normal and press Enter to submit it ```bash\nsudo apt update\nsudo apt upgrade\n```\nYou will be asked for your password after using the first one - type it in and use Enter to provide your terminal with the password There is no visual feedback about what you're typing in but you are indeed doing so After `sudo apt upgrade` runs for a while you will be asked whether you want to install things - do so to update your machine",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 10,
    "total_chunks": 24
  },
  {
    "id": "db4abd83000c1815f455bbf93ce4d321",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "it ```bash sudo apt update sudo apt upgrade ``` You will be asked for your password after using the first one - type it in and use Enter to provide your terminal with the password There is no visual feedback about what you're typing in but you are indeed doing so After `sudo apt upgrade` runs for a while you will be asked whether you want to install things - do so to update your machineIf you have any issues, do not hesitate to come over to our [Discord server](https://discord gg/V75WSQG) and ask for help in the `#virtualbox-help` channel ### Step 4: Understand your new VM\n#### Step 4 1: Close TOP in the Windows browser and open the website in your VM\nFrom now on, stick with The Odin Project (TOP) website within your VM and follow the Linux instructions provided The curriculum will often require you to copy and paste code between the lesson and your coding space, as well as the terminal This won't work smoothly if you switch between the VM and Windows because they are entirely separate environments **Remember:** For the remainder of the TOP curriculum, refer to the Linux instructions only Here are some tips to help you get started in a virtual environment:\n- Enable the toolbar in your VM settings - there are useful options there that you might want to play around with, especially the ones concerning full screen or multiple displays To do so, click on **Settings** and then navigate to **User Interface** and finally tick **Show at Top of Screen** [It's a good idea to look around the settings overall to get a feel of what's possible ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/16_toolbar png)\n- All your work should happen in the VM You will install everything you need for coding, including your text editor, language environments and various tools inside the VM The Xubuntu installation inside of your VM also comes with a web browser pre-installed but we'll be installing Chrome shortly - To install software on your VM, you will follow the Linux (Ubuntu) installation instructions from inside the Xubuntu VM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 11,
    "total_chunks": 24
  },
  {
    "id": "0d02fcb84a1d1a27b25db45c63416fbc",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "of what's possible ](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/16_toolbar png) - All your work should happen in the VM You will install everything you need for coding, including your text editor, language environments and various tools inside the VM The Xubuntu installation inside of your VM also comes with a web browser pre-installed but we'll be installing Chrome shortly - To install software on your VM, you will follow the Linux (Ubuntu) installation instructions from inside the Xubuntu VM- You might need to take screenshots when asking for help on our Discord, here's how depending on where you use it:\n- **Inside the VM:** you can use Shift + PrtSrc to take screenshots of portion of your screen Alternatively, you can click the **Whisker Menu** and type in **Screenshot**, in which you can choose to take a screenshot of your entire screen, the current window you are on or to select a certain area to capture - **On your host (Windows):** you can use a shortcut of the Host Key (Right Ctrl + E) or click **View -> Take Screenshot** for a full screenshot A different way would be unfocusing your VM window by clicking outside of it and then using the regular Windows shortcut of Windows key + Shift + S to take screenshots of portion of your screen - **Remember:** all of the development that you'll do related to TOP should be done in the VM - We recommend going full screen (**View -> Full-screen Mode**) and forgetting about your host OS (Windows) For best performance, close all programs inside of your host OS when running your VM - To add additional monitors, shut down the VM and go to the **Display** tab in the VirtualBox settings of the VM and increase the monitor count Now, with the VM running, clicking **View -> Virtual Screen 2 -> Enable** You can run fullscreen with multiple monitors, but it may ask for more **Video Memory**, which you should have increased when adding more monitors **Make sure you enable your Virtual Screens in windowed mode before going fullscreen, otherwise they won't work ** Upon exiting fullscreen, your secondary display may close You can reopen it with these instructions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 12,
    "total_chunks": 24
  },
  {
    "id": "d03ec8520c29d28b0ac1f9f9605502fe",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "VM and increase the monitor count Now, with the VM running, clicking **View -> Virtual Screen 2 -> Enable** You can run fullscreen with multiple monitors, but it may ask for more **Video Memory**, which you should have increased when adding more monitors **Make sure you enable your Virtual Screens in windowed mode before going fullscreen, otherwise they won't work ** Upon exiting fullscreen, your secondary display may close You can reopen it with these instructions#### Frequent issues/questions\n- If upon trying to start the VM you only get a black screen, close and `power off` the VM, click **Settings -> Display** in VirtualBox and make sure **Enable 3D Acceleration** is UNCHECKED, and Video memory is set to **AT LEAST 128MB** - Running out of space Look at these [instructions for increasing VM disk space from the TOP Discord server](https://discord com/channels/505093832157691914/690588860085960734/1015965403572351047) - Are you using a touchscreen [Watch a video on how to enable touchscreen controls for VirtualBox](https://www youtube com/watch v=hW-iyHHoDy4) - **VM performance tips**:\n- When running the VM, minimize your Windows activity You probably want to be plugged into power as well if you're using a laptop - Make sure your processors are set to only 2 and the Memory you've given your VM is at most half of your total RAM but at least 2GB If you can't spare the 2GB, dual boot - If videos lag in the VM, make sure to max out Video Memory to whatever you can or alternatively play them on your Windows if your machine can handle it Disable 3D Acceleration if you have it enabled - Do look out for the [Icon with a green turtle and a V](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/17_turtle png){: inline-img} icon in the bottom right of your VM window This signifies that something called Hyper-V is turned on A thread on the VirtualBox forums describes [how to turn off Hyper-V completely](https://forums virtualbox org/viewtopic php f=25&t=99390)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 13,
    "total_chunks": 24
  },
  {
    "id": "df70b1e8b7e476ecfa2d6a889bc38f30",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "you can or alternatively play them on your Windows if your machine can handle it Disable 3D Acceleration if you have it enabled - Do look out for the [Icon with a green turtle and a V](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/17_turtle png){: inline-img} icon in the bottom right of your VM window This signifies that something called Hyper-V is turned on A thread on the VirtualBox forums describes [how to turn off Hyper-V completely](https://forums virtualbox org/viewtopic php f=25&t=99390)You want to have the icon of a chip with a V [Icon of a chip with a V](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/18_vboxV png){: inline-img} icon instead If you don’t see either of these icons in the bottom right, you have to exit full screen mode to see them - If your performance is still lacking, go for a dual boot as this will make sure you're using all of your specs for one OS only, thus improving your experience significantly - If your scroll wheel behaves oddly in Google Chrome and/or in other applications and you have gone through VM performance tips to make sure your VM is working as intended, look into [whether your version of Guest Additions is correct](https://discord com/channels/505093832157691914/690588860085960734/1195697147123867668) ### Step 5: Safely shutting down your VM\nYou don't pull the plug on your everyday use computer, right Why would you do the same to your virtual computer When you click the X button and just close out your VM, you might as well say goodbye to your files In this section, you'll understand three ways you can shut off your VM #### Option 1 - Shutting down from inside the VM with UI\nClicking on the **Whisker Menu** [The blue-white rodent Whisker Menu Icon](https://cdn statically",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 14,
    "total_chunks": 24
  },
  {
    "id": "c6ba5bce1b1fe5a47e73079b761aeb6c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "the plug on your everyday use computer, right Why would you do the same to your virtual computer When you click the X button and just close out your VM, you might as well say goodbye to your files In this section, you'll understand three ways you can shut off your VM #### Option 1 - Shutting down from inside the VM with UI Clicking on the **Whisker Menu** [The blue-white rodent Whisker Menu Icon](https://cdn staticallyio/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/00_whisker_icon png){: inline-img} and clicking the power icon will give you several options on how to modify your session, including **Shutting Down** Yep, that's the same place you might've used to **Restart** before #### Option 2 - Shutting down from inside the VM with the terminal\nTyping `poweroff` inside the terminal will do in this case Your system will immediately shutdown #### Option 3 - Shutting down from outside the VM\nThe last way to accomplish this goal of safely shutting down is by using the VM interface Clicking on the File tab and hitting the close button (which also has a Power Icon) will bring up a popup titled **Close Virtual Machine** This popup asks if you want to **Save the machine state**, **Send the shutdown signal**, or **Power off the machine** [VM File Menu](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/19_vbox_close png) [Close Virtual Machine Menu](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/20_send_shutdown png)\nTo be safe, click the **Send the shutdown signal** radio and hit OK This will safely power down your VM and your files will not get corrupted Ubuntu/Windows Dual-Boot\n### Read this entire section before starting\nDual-booting provides two operating systems on your computer that you can switch between with a simple reboot",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 15,
    "total_chunks": 24
  },
  {
    "id": "0bef82ee5f4838e0bee503c468122b1e",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "state**, **Send the shutdown signal**, or **Power off the machine** [VM File Menu](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/19_vbox_close png) [Close Virtual Machine Menu](https://cdn statically io/gh/TheOdinProject/curriculum/96d534641514fe4d62aabe2919fac3c52cb286e7/foundations/installations/installations/imgs/20_send_shutdown png) To be safe, click the **Send the shutdown signal** radio and hit OK This will safely power down your VM and your files will not get corrupted Ubuntu/Windows Dual-Boot ### Read this entire section before starting Dual-booting provides two operating systems on your computer that you can switch between with a simple rebootOne OS will not modify the other unless you explicitly tell it to do so Before you continue, be sure to back up any important data and to have a way to ask for help If you get lost, scared, or stuck, we're here to help in the [Odin Tech Support chat room](https://discordapp com/channels/505093832157691914/514204667245363200) Come say \"Hi\" ### Step 1: Download Ubuntu\nFirst, you need to download the version of Ubuntu you want to install on your computer Ubuntu comes in different versions (\"flavors\"), but we suggest the standard desktop [Ubuntu](https://releases ubuntu com/22 04/) If you're using an older computer, we recommend [Xubuntu](https://xubuntu org/release/22-04/) Be sure to download the 64-bit version of Ubuntu or Xubuntu If you reach the download page and are unsure about what version to choose, it is recommended that you pick the Long-Term Support (LTS) version 22 04 (Jammy Jellyfish) You may be tempted to choose a more recent release, but this version is tried and tested by the Odin Project community and therefore the most reliable option for the purposes of this curriculum ### Step 2: Create a bootable flash drive\nNext, follow the guide on [how to create an Ubuntu Live USB in Windows](https://itsfoss",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 16,
    "total_chunks": 24
  },
  {
    "id": "72fd40a60ad7f53b382f57be9ee2d46e",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "about what version to choose, it is recommended that you pick the Long-Term Support (LTS) version 22 04 (Jammy Jellyfish) You may be tempted to choose a more recent release, but this version is tried and tested by the Odin Project community and therefore the most reliable option for the purposes of this curriculum ### Step 2: Create a bootable flash drive Next, follow the guide on [how to create an Ubuntu Live USB in Windows](https://itsfosscom/create-live-usb-of-ubuntu-in-windows/) to create a bootable flash drive so that you can install Ubuntu on your hard drive If you don't have a flash drive, you can also use a CD or DVD Note: You can use this method to try out [different flavors of Ubuntu](https://www ubuntu com/download/flavours) if you'd like These images allow you to try out different flavors without committing to an installation Be aware that running the OS from a flash drive will cause the OS to be slow and can decrease the life of your flash drive ### Step 3: Install Ubuntu\n#### Step 3 1: Boot from the flash drive\nFirst, you need to boot Ubuntu from your flash drive The exact steps may vary, but in general, you will need to do the following:\n- Insert the flash drive into the computer - Reboot the computer - Select the flash drive as the bootable device instead of the hard drive For example, on a Dell computer, you would need to plug in the flash drive, reboot the computer, and press the F12 key while the computer is first booting up to bring up the boot menu From there, you can select to boot from the flash drive Your computer may not be exactly the same, but Google can help you figure it out #### Step 3 2: Install Ubuntu\nIf you would like to test out the version of Ubuntu on the flash drive, click 'Try me' When you have found a flavor of Ubuntu you like, click 'Install' and continue to the next step Installing Ubuntu is where the real changes start happening on your computer The default settings are mostly perfect, but be sure to **\"Install Ubuntu alongside Windows\"** and change the allocated disk space allowed for Ubuntu to 30 GB (or more if you can) For step-by-step instructions, please follow [how to install Ubuntu 22 04 and dual boot alongside Windows 10](https://medium",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 17,
    "total_chunks": 24
  },
  {
    "id": "f24ed134df6746ad7c28c1ef283012b2",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "have found a flavor of Ubuntu you like, click 'Install' and continue to the next step Installing Ubuntu is where the real changes start happening on your computer The default settings are mostly perfect, but be sure to **\"Install Ubuntu alongside Windows\"** and change the allocated disk space allowed for Ubuntu to 30 GB (or more if you can) For step-by-step instructions, please follow [how to install Ubuntu 22 04 and dual boot alongside Windows 10](https://mediumcom/linuxforeveryone/how-to-install-ubuntu-20-04-and-dual-boot-alongside-windows-10-323a85271a73) ### Intel RST (Rapid Storage Technology)\nIf you encounter an error requesting you to disable **Intel RST** while attempting to install Ubuntu, follow this [workaround to install Ubuntu 22 04 with Intel RST systems](https://askubuntu com/questions/1233623/workaround-to-install-ubuntu-20-04-with-intel-rst-systems/1233644#1233644), specifically **Choice #2** The process forces Windows to boot into safemode after you switch your motherboard storage driver to work with Ubuntu Once it boots into Windows, the forced-on safemode is disabled and you are free to attempt an installation of Ubuntu once again ChromeOS/ChromeOS Flex\nWith the recent addition of being able to run a Linux terminal, the ChromeOS platform has been opened up to the ability to install native Linux applications If you wish to use your Chromebook to complete The Odin Project, you will need to ensure you meet a couple requirements:\n1 You have a supported Chromebook:\n- [Official Chromebooks](https://www chromium org/chromium-os/chrome-os-systems-supporting-linux)\n- [ChromeOS Flex Chromebooks](https://support google com/chromeosflex/answer/11513094)\n1 [You are able to set up Linux on your Chromebook](https://support google com/chromebook/answer/9145439 hl=en) Once you have successfully met both of these requirements, you should be able to follow along with the Linux instructions throughout the entire curriculum WSL2 (Advanced)\nUsing WSL2 is a quick and easy way to get started with using Linux, allowing you to run a Linux distribution from within Windows WSL2 is available on Windows 10 version 2004 and higher (Build 19041 and higher) and Windows 11",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 18,
    "total_chunks": 24
  },
  {
    "id": "bd9df210705fb773856e0d222af22e6b",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "set up Linux on your Chromebook](https://support google com/chromebook/answer/9145439 hl=en) Once you have successfully met both of these requirements, you should be able to follow along with the Linux instructions throughout the entire curriculum WSL2 (Advanced) Using WSL2 is a quick and easy way to get started with using Linux, allowing you to run a Linux distribution from within Windows WSL2 is available on Windows 10 version 2004 and higher (Build 19041 and higher) and Windows 11To make it clear: you are going to be using a different OS, this is not a way to avoid using Linux Due to how WSL2 is integrated with Windows it often causes significant confusion to new learners Use the Virtual Machine if you want a clear separation between your Windows and Linux so the curriculum is easier to follow #### WSL2 and Linux instructions\nBecause WSL2 is a full-fledged Linux distribution, almost everything that the curriculum teaches about Linux is also applicable to WSL2 In future lessons, whenever there are instructions that differ by OS, you should follow the Linux instructions, unless the lesson includes WSL2-specific instructions ### Step 1: Installations\n#### Step 1 1: Installing WSL2\n- Open PowerShell in administrator mode by searching for it in your applications, right clicking the top option, and then selecting run as administrator You might get a prompt asking if you want to allow Windows Powershell to make changes to your device: click yes - Enter the following command\n```powershell\nwsl --install\n```\n- After a few minutes you'll be prompted to reboot your computer; do so - You should see an open Powershell window, prompting you to enter a username and a password Your username should be lowercase, but can otherwise be whatever suits you You'll also need to enter a new password - When entering your password you might notice that you aren't seeing any visual feedback This is a standard security feature in Linux, and will also happen in all future cases where you need to enter a password Just type your password and hit Enter #### Step 1 2 1: Install Windows Terminal (Windows 10 only)\nWindows Terminal is a terminal application that lets you more easily customize and run terminals, as well as supporting multiple tabs which can each run their own different terminals - [Install Windows Terminal](https://learn microsoft com/en-us/windows/terminal/install) by using the direct install option",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 19,
    "total_chunks": 24
  },
  {
    "id": "2efea7d545ec8b6b6b79961ccd61e598",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "in Linux, and will also happen in all future cases where you need to enter a password Just type your password and hit Enter #### Step 1 2 1: Install Windows Terminal (Windows 10 only) Windows Terminal is a terminal application that lets you more easily customize and run terminals, as well as supporting multiple tabs which can each run their own different terminals - [Install Windows Terminal](https://learn microsoft com/en-us/windows/terminal/install) by using the direct install option#### Step 1 2 2: Setting WSL2 as default (Optional)\nUnless you are regularly using other terminals on your computer we recommend that you set WSL2 as the default terminal program when you open Windows Terminal - Open Windows Terminal by searching for terminal in your applications - Click the dropdown next to the new tab button (at the top of the windows), and select Settings - You should see a Default Profile option with a dropdown next to it - In the dropdown select Ubuntu - Click save at the bottom of the page ### Step 2 Opening WSL2\nOn Windows there are three primary ways to open WSL2 - If you set Windows Terminal to open a Ubuntu terminal by default you can start a new WSL2 session by opening the terminal app - Otherwise you can open Windows Terminal, click the dropdown next to the new tab button (at the top of the windows), and select Ubuntu - If you search for Ubuntu in the application search bar you should see a application titled Ubuntu; open it to start a new terminal session #### Terminal color scheme\nYou might notice when you open WSL2 via Windows Terminal, you'll see a window with a different color scheme and a different icon compared to opening a terminal through Ubuntu in your applications This is because Windows Terminal comes with a default color scheme for Ubuntu meant to emulate how a real Ubuntu terminal looks This difference is purely cosmetic, and there is no practical difference between the two #### /mnt/c is not Linux When opening your WSL2 terminal ensure that you do not see `/mnt/c` at the start of the line `/mnt/c` is where your Windows installation lives when working within WSL2, and messing around there can have unintended consequences Google Chrome installation\nWhy Google Chrome Because our lessons use Google Chrome, and Chrome/Chromium are overwhelmingly used by developers and consumers, the recommendations we make are very intentional Look at this usage share of web browsers and see what other folks are using the most",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 20,
    "total_chunks": 24
  },
  {
    "id": "b61684d2b46f11104664faab73545392",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "that you do not see `/mnt/c` at the start of the line `/mnt/c` is where your Windows installation lives when working within WSL2, and messing around there can have unintended consequences Google Chrome installation Why Google Chrome Because our lessons use Google Chrome, and Chrome/Chromium are overwhelmingly used by developers and consumers, the recommendations we make are very intentional Look at this usage share of web browsers and see what other folks are using the mostChoose your Operating System:\nLinux\n#### Step 1: Download Google Chrome\n- Open your **Terminal**\n- Run the following command to download latest **Google Chrome** ` deb` package\n```bash\nwget https://dl google com/linux/direct/google-chrome-stable_current_amd64 deb\n```\n#### Copy and paste keyboard shortcuts\nYou have probably noticed that the common keyboard shortcut: Ctrl + V to paste something doesn't work in the terminal In order to paste your text input into your terminal you can use: Ctrl + Shift + V keyboard shortcut combination, instead It is also very handy to know that the: Ctrl + Shift + C keyboard combination will copy any highlighted text from your terminal, which can then be pasted later #### Step 2: Install Google Chrome\n- Enter the following command in your terminal to install **Google Chrome** ` deb` package\n```bash\nsudo apt install /google-chrome-stable_current_amd64 deb\n```\n- Enter your password, if needed\n#### A note on typing passwords in the terminal\nWhen using a command in the terminal that requires you to enter your password for authentication (such as sudo), you will notice that the characters aren't visible as you type them While it might seem like the terminal isn’t responding, don’t worry This is a security feature to protect confidential information, like how password fields on websites use asterisks or dots By not displaying the characters you write, the terminal keeps your password secure You can still enter your password as normal and press Enter to submit it #### Download is performed unsandboxed\nYou might see a notice starting with `N: Download is performed unsandboxed ( )` You don't need to worry about it [You can read a Reddit post for more information ](https://www reddit com/r/linux4noobs/comments/ux6cwx/comment/i9x2twx/)\n#### Step 3: Delete the installer file\n```bash\nrm google-chrome-stable_current_amd64",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 21,
    "total_chunks": 24
  },
  {
    "id": "7667b1029513201eeff21570bf2b7086",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "dots By not displaying the characters you write, the terminal keeps your password secure You can still enter your password as normal and press Enter to submit it #### Download is performed unsandboxed You might see a notice starting with `N: Download is performed unsandboxed ( )` You don't need to worry about it [You can read a Reddit post for more information ](https://www reddit com/r/linux4noobs/comments/ux6cwx/comment/i9x2twx/) #### Step 3: Delete the installer file ```bash rm google-chrome-stable_current_amd64deb\n```\n#### Step 4: Using Google Chrome\nYou can start chrome in two ways:\n- Click **Google Chrome** from the Applications menu\n- **Or**, use the `google-chrome` command from the terminal\n```bash\ngoogle-chrome\n```\n#### Google Chrome as a background process\nChrome is going to use this terminal to output various messages and won't let you run other commands Don't worry about those messages If you want to use the same terminal that you run Chrome in for other commands, use `google-chrome &` instead MacOS\n#### Step 1: Download Google Chrome\n- Visit [Google Chrome download page](https://www google com/chrome/)\n- Click **Download Chrome for Mac**\n#### Step 2: Install Google Chrome\n- Open the **Downloads** folder\n- Double click the file **googlechrome dmg**\n- Drag the Google Chrome icon to the **Applications** folder icon\n#### Step 3: Delete the installer file\n- Open **Finder**\n- Click the **arrow** next to Google Chrome in the sidebar\n- Go to the **Downloads** folder\n- Drag **googlechrome dmg** to the trash\n#### Step 4: Using Google Chrome\n- Go to your **Applications** folder\n- Double click **Google Chrome**\nWSL2\nWSL does not have a graphical user interface (GUI) like Windows, so this step will guide you through installing Google Chrome for Windows instead Later on, we'll cover how you can use the Windows installed Chrome to preview your work that lives within WSL #### Step 1: Download Google Chrome\n- Visit [Google Chrome download page](https://www google com/chrome/) - Click **Download Chrome** #### Step 2: Install Google Chrome\n- Open the **Downloads** folder - Double click the file **ChromeSetup",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 22,
    "total_chunks": 24
  },
  {
    "id": "32fd9be92b0e0dfd9bbc35309f6773d5",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\installations\\installations.md",
    "source_type": "git_repo",
    "title": "installations",
    "content": "have a graphical user interface (GUI) like Windows, so this step will guide you through installing Google Chrome for Windows instead Later on, we'll cover how you can use the Windows installed Chrome to preview your work that lives within WSL #### Step 1: Download Google Chrome - Visit [Google Chrome download page](https://www google com/chrome/) - Click **Download Chrome** #### Step 2: Install Google Chrome - Open the **Downloads** folder - Double click the file **ChromeSetupexe** to start the install #### Step 3: Using Google Chrome\n- Search for **Google Chrome** in your Start Menu - Click **Google Chrome** to start the application #### Optional: Delete the installer file\n- Open the **Downloads** folder - Select the **ChromeSetup exe** file and hit the Delete key, or drag it the Recycling Bin Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What operating systems does The Odin Project support What browser does The Odin Project support Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Google Chrome is one of the most important tools that you will be using throughout the curriculum This reference has many common shortcuts that you may find useful when using Chrome",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 40461,
      "relative_path": "git_repos\\odin-project\\foundations\\installations\\installations.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 23,
    "total_chunks": 24
  },
  {
    "id": "4a5be72a81b9d613decd4c2f2428d7c2",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\introduction_to_web_development.md",
    "source_type": "git_repo",
    "title": "introduction_to_web_development",
    "content": "Introduction\nWhat do web developers do In short, they build and maintain websites Web developers often work for clients who are trying to get their product or service onto the web The work is typically project-focused and involves collaborating with a team to coordinate the client's needs into the end product The client could be a tech company, an organization, or a government The work could involve front-end, back-end, or full-stack web development Web development could be a good profession for you if you like solving logical problems, building useful things, and experimenting with new technologies Web developers are in high demand, generally have a good work-life balance, and command comfortable salaries Google your specific location to get a better sense of your local web development job opportunities Types of web developers\nEarlier, we mentioned that web development work could be in the front end, the back end, or the full stack What exactly do these terms mean The front end is the stuff you see on the website in your browser, including the presentation of content and user interface elements like the navigation bar Front-end developers use HTML, CSS, JavaScript, and their relevant frameworks to ensure that content is presented effectively and that users have an excellent experience The back end refers to the guts of the application, which live on the server The back end stores and serves program data to ensure that the front end has what it needs This process can become very complicated when a website has millions of users Back-end developers use programming languages like Java, Python, Ruby, and JavaScript to work with data Full-stack developers are comfortable working with both the front and back ends At The Odin Project, we focus on teaching you full-stack development, covering all aspects of web development Types of careers\nNow that you know about the different types of web developers, let's cover what we mentioned earlier about the different types of clients and employers you may work with Large tech companies, such as Google, Meta, and Amazon, have very stringent hiring requirements If you successfully meet these expectations, they offer excellent pay, benefits, and opportunities Startups are a bit like the wild west For a junior developer, it can feel like a trial by fire because of the pace of development Startups often offer slightly lower salaries and require longer hours, but they may also offer equity in the company and highly unique environments As a freelancer, you could command a strong hourly wage and the freedom to schedule and design your own products",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7884,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\introduction_to_web_development.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b8eff53ecf5dfe3d3041137ea0520778",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\introduction_to_web_development.md",
    "source_type": "git_repo",
    "title": "introduction_to_web_development",
    "content": "they offer excellent pay, benefits, and opportunities Startups are a bit like the wild west For a junior developer, it can feel like a trial by fire because of the pace of development Startups often offer slightly lower salaries and require longer hours, but they may also offer equity in the company and highly unique environments As a freelancer, you could command a strong hourly wage and the freedom to schedule and design your own productsHowever, you would be responsible for getting your own work (which means less coding time), managing billing from clients (which can be difficult), and being solely responsible Strong people skills are necessary for this path As a consultant for a web consultancy, you would give up some of your freelancing wage potential but be able to focus more on the code and less on the hustle This option also provides a good work-life balance and pay Finally, large, older companies still need web developers These companies offer a good work-life balance, pay, and benefits but often move slower than a company that is highly focused on tech Tools of the trade\nThese are some of the basic tools you will use regularly You may not know what they are now, but you most certainly will going forward Computer\nGoogle\nText Editor\nCommand Line Interface (CLI)\nStack Overflow\nGit\nGitHub\nMotivation\nLearning to code is incredibly rewarding but can also be difficult and frustrating The strongest assets you can have as a student are a desire to build, a problem-solving mind, and persistence in the face of setbacks The web development industry has a long history of successful developers with varying backgrounds, so people tend to care more about what you've actually built than how you got there Why Odin We want you to know that this will not be easy There are plenty of other online curriculums for beginners, but they are often taught in an extremely isolated and controlled environment and cover only a specific topic The Odin Project takes a realistic view of what you need to know and has you set up and work in your own environment, much like what you'll be doing when you get a job It acknowledges that you need a wide variety of skill sets and languages to reach an employable level The Odin Project is constantly evolving because of people like you who get further along in the curriculum and pay it forward by incrementally improving our content over time Once you start to feel comfortable with the tools, start contributing to open source projects, like contributing to The Odin Project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7884,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\introduction_to_web_development.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "864286652a4d44ee47d1ac3a9b2a647f",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\introduction_to_web_development.md",
    "source_type": "git_repo",
    "title": "introduction_to_web_development",
    "content": "you'll be doing when you get a job It acknowledges that you need a wide variety of skill sets and languages to reach an employable level The Odin Project is constantly evolving because of people like you who get further along in the curriculum and pay it forward by incrementally improving our content over time Once you start to feel comfortable with the tools, start contributing to open source projects, like contributing to The Odin ProjectThe more you contribute, the more you will learn about what you can do, and the closer you will get to being hireable These projects will also look great on your resume Conclusion\nHopefully, you've gained a better idea of what a web developer actually does and what your life might look like if you decided to take it on as a career This has only been a teaser into the world of web development In this \"Foundations\" course, you'll take a journey through the entire spectrum of topics that you will eventually need to know This course jumps around to a variety of topics that you may be totally unfamiliar with, providing you a small taste of each and then moving on The following courses will dive deep into these topics You will build dozens of scripts, projects, and websites to cement those skills that will get you hired Yes, it's going to be challenging But it's also going to be fun And it might even be life-changing What are you waiting for Assignment\n1 Check out the post [\"Why Learning to Code is **So Damn Hard**\"](https://dev to/theodinproject/why-learning-to-code-is-so-damn-hard-11nn), which was written by the founder of The Odin Project This article gives a realistic view of what the journey ahead is like 1 Read the [Wikipedia entry on web design](https://en wikipedia org/wiki/Web_design) that describes the breadth of the web development profession 1 Read Udacity's blog post on [front-end, back-end and full stack developers ](https://www udacity com/blog/2020/12/front-end-vs-back-end-vs-full-stack-web-developers html)\nAdditional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Quora: How can I Become a Really Good Web Developer Quora: What makes a great web developer Jared the Nerd: What makes a good Developer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7884,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\introduction_to_web_development.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "787451921c91afa76f617bafe8492516",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\introduction_to_web_development.md",
    "source_type": "git_repo",
    "title": "introduction_to_web_development",
    "content": "Read the [Wikipedia entry on web design](https://en wikipedia org/wiki/Web_design) that describes the breadth of the web development profession 1 Read Udacity's blog post on [front-end, back-end and full stack developers ](https://www udacity com/blog/2020/12/front-end-vs-back-end-vs-full-stack-web-developers html) Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental Quora: How can I Become a Really Good Web Developer Quora: What makes a great web developer Jared the Nerd: What makes a good DeveloperFreeCodeCamp: Things I Wish Someone Had Told Me When I Was Learning How To Code\nTechCrunch: Don't Believe Anyone who Tells you Learning to Code is Easy\nCode Quizzes: Deliberate Programming Practice",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7884,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\introduction_to_web_development.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5576cbe03615d6e80ca455f75c0a9d76",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "Introduction\nThe Odin Project is an open-source community dedicated to providing the best information sources to take you from zero to a full-stack developer In this unit, we'll learn about how the web works and start thinking about the basics of computer and web programming Each of the following sections and lessons covers essential baseline knowledge Even if you have no intention of becoming a web developer, this material should help you gain a useful understanding of the moving parts involved in creating and serving content on the web We will start by getting familiar with the internet and your own computer Next, we'll set up a development environment and learn about Git and GitHub Then, we'll go over the basics of front-end technologies like HTML, CSS, and JavaScript before stepping into the back end with a brief foray that covers the basic concepts of back-end technologies By the end of this unit, you should not only understand how the web works but also be able to identify and differentiate between all the technologies that you will use to build your own web applications You will be able to build a basic webpage, style it, and add minor elements of interactivity while working comfortably from the command line This section intentionally covers a very broad range of topics It's silly to go diving straight into server-side programming without having a context for what it is and why it's useful (and why you should learn it ) Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Understand how The Odin Project's curriculum works Understand how the Foundations course works How it works\nThis curriculum works by aggregating the best content from across the internet to teach a specific topic In each lesson, we'll introduce the topic and try to provide some useful context before pointing you to external resources made by others Most lessons will contain questions that you should be able to answer before moving on Some lessons will include exercises for you to complete In addition, we provide several projects throughout the curriculum to help you grow your understanding by actually building things Try not to think of The Odin Project, or programming, as a class in school It's not material you learn all at once to take a test, and then pass or fail You can think of it as a snowball You, yourself, are a snowball You're rolling down a hill full of snow; the further you roll, the more snow will stick to you Sure, snow will also fall off you, and you'll forget things often, but that's just part of the process",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9102,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "36b72c8f8575ab3545b1a459d2addbba",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "Project, or programming, as a class in school It's not material you learn all at once to take a test, and then pass or fail You can think of it as a snowball You, yourself, are a snowball You're rolling down a hill full of snow; the further you roll, the more snow will stick to you Sure, snow will also fall off you, and you'll forget things often, but that's just part of the processDon't worry if you reach a project and feel like you haven't retained or memorized anything That's natural and happens to everyone The projects are not tests of what you have memorized so far They are practice points where the information will come back to you as you start solving your problems one at a time, relying on Google and the Odin Community for help A note about tools\nWe often get questions about why this course does not cover a language or a tool The truth is that once you complete this curriculum, you will not need a course like this or any sort of \"tutorial\" The Odin Project's goal is not to teach you any standalone skills and it is not a tutorial The main idea is to teach you the why and change the way you think One of the most difficult parts about this course is adopting the right mindset An even bigger challenge is learning the core ideas of programming It isn't just about coding, it is about problem-solving, asking the right questions, and doing enough research Getting into a position where you are comfortable with the skills will mean that you will also be comfortable at expanding your skill-set Once you have a solid base, it will be simpler to expand upon it This is exactly what The Odin Project is about: developing these skills After completing the course you will be in a position where you can simply jump straight into the documentation for anything you are trying to learn Reading the documentation is the best way to learn any tooling But it takes skill to master Many people feel intimidated by the technical jargon, which is understandable People who write documentation usually assume a background in programming This is exactly why we give you plenty of material to read on your own The skills you will gain from completing The Odin Project will be the foundation that you will be building upon for years and decades to come If you come out of the course thinking that you need another course like this one to learn something like Python, then you either don't believe in yourself or you haven't taken away the important ideas that are covered in this course",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9102,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d6bcc7f7197d2ed271d30cd65a5e084d",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "plenty of material to read on your own The skills you will gain from completing The Odin Project will be the foundation that you will be building upon for years and decades to come If you come out of the course thinking that you need another course like this one to learn something like Python, then you either don't believe in yourself or you haven't taken away the important ideas that are covered in this courseThe skills you learn here are transferable to various contexts Once you know the idea and that it is possible to do something, actually finding out how to do that thing becomes significantly easier and is simply a Google search away most of the times A note about human language\nThe Odin Project attracts people from all over the world who aspire to learn how to become developers Please be aware that this curriculum is written in English and maintained by English speakers who are not able or expected to translate it for you As you develop into a programmer, you will find that the world you are entering into is firmly rooted in the English language This means that the syntax of your programming language, the documentation that teaches you how to use it, and the majority of the people in the community are all expecting to communicate with you in English If you are a non-English speaker, or English is not a primary language for you, this fact is not meant to discourage you, but to prepare you As another part of this preparation, we highly recommend spending extra time on topics and terms that you do not understand right away We also encourage you to seek out additional resources that teach about these topics in your own native language so you can understand them more fully In addition to this, you might also consider using a translation dictionary in your own language alongside our curriculum so you can readily reference it as you go We do not have any recommendations on these since there are such a wide variety of languages spoken throughout the world, finding one may perhaps be a good first step in learning how to find useful tools online by searching This is a skill you will utilize and improve as you progress in your learning to be a developer What comes next\nOnce you've completed this course, you should feel comfortable with the building blocks of web programming but itching to dig deeper Though we spend a fair bit of time digging into each of the major topics in this course, it's really just a taste of what comes next (and all the cool stuff you can do with it)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9102,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f976100af50b5266ecfe11edbace1475",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\how_this_course_will_work.md",
    "source_type": "git_repo",
    "title": "how_this_course_will_work",
    "content": "you will utilize and improve as you progress in your learning to be a developer What comes next Once you've completed this course, you should feel comfortable with the building blocks of web programming but itching to dig deeper Though we spend a fair bit of time digging into each of the major topics in this course, it's really just a taste of what comes next (and all the cool stuff you can do with it)The last lesson of this course will give you an opportunity to choose between a Full Stack JavaScript and Full Stack Rails path, both designed to further develop the foundation established in this course Each path will focus on taking these raw building blocks and honing them into a highly functional skillset The Odin Project is maintained by professionals We have chosen some of the best resources available and curated a guide on how to go through them If there are no good resources, we write our own With that said, know that everything in the curriculum is intentionally included and vital for you to become a successful programmer As you move forward in the curriculum, each portion is built on everything that came before it, so skipping things will create pockets of non-understanding in your knowledge that start to affect your ability to solve problems and understand the task at hand Additional resources are the only thing that is considered optional unless explicitly stated These are here in case you feel like you need or want to dive deeper into a topic to get a better understanding DO NOT SKIP ANYTHING Assignment\n1 Learn more about The Odin Project by reading its [about page](https://www theodinproject com/about) 1 Check out the [frequently asked questions](https://www theodinproject com/faq) section Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is The Odin Project Should you skip anything in The Odin Project or complete it non-linearly Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9102,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\how_this_course_will_work.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "75e46d1cb01dc7d23e0cdc0051dcd5e7",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
    "source_type": "git_repo",
    "title": "join_the_odin_community",
    "content": "Introduction\nWorking and collaborating with other people is an important part of working as a web developer Therefore, we at The Odin Project encourage you to participate in our online chat community, which we'll talk more about below By joining the community, you can grow alongside other Odinites and help each other learn web development While you're at it, you can check out our Facebook page, follow us on X and catch up on our Instagram page Use #TheOdinProject to share your Odin Project progress, updates, thoughts and to see what other Odin students are up to Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Learn about The Odin's community and how to join it Explain how to ask good and detailed questions Explain good practices for helping others with their questions Why a community is awesome for you\nLearning web development will be a long and arduous journey, but you can make the marathon a lot more fun by getting involved in our Discord community No matter what pace you are doing our curriculum, there will always be people a few steps ahead of you that are willing to help Furthermore, helping others that are a few steps behind you is a great way to deepen your own understanding and make your learning stick When you're slogging through the desert of despair, where your code doesn't work or even make sense to you anymore, you can find an oasis of knowledge and encouragement in our community Veterans at The Odin Project love to help fill in knowledge gaps and provide new insights and perspectives on how to improve your code We've all been there before Remember that project you struggled so hard to figure out and that you're so proud of finishing Through our community, you will get to share your work and progress with those who fully appreciate how much hard work went into it Why a community is awesome for Odin\nWe are working hard to update existing lessons and produce new content, so we would love to hear your feedback on the lessons and projects We hope you find the lessons fun, engaging, and informative, and the projects challenging but achievable So please let us know your thoughts Before asking for help\nAs most of the projects are designed to push you to your limit, please remember that there is always a community to turn to You don't need to know how to solve every problem straight away, BUT you do need to have a general idea of where you are going This becomes really important when asking your questions because sometimes the problem is your approach and not your code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15594,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "bd7928468f1bc0a2d58cc8f12a584831",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
    "source_type": "git_repo",
    "title": "join_the_odin_community",
    "content": "know your thoughts Before asking for help As most of the projects are designed to push you to your limit, please remember that there is always a community to turn to You don't need to know how to solve every problem straight away, BUT you do need to have a general idea of where you are going This becomes really important when asking your questions because sometimes the problem is your approach and not your codeIf you're feeling stuck, it's a good time to pause and take a breather Break the problem down into little pieces and then decide what is really holding you back We call this technique rubber duck debugging You should also use Google to find relevant information for your problem Read about how to use Google to solve your programming questions You can also look back at previous lessons for tools that you can apply to the current task If these methods don't yield a solution for you, then it's time to reach out to the Odin community and ask for help Asking for help\nSo you've spent some time struggling to solve the problem on your own, and now it's time to fire up the Odin Discord and ask for help The first thing to keep in mind is don't ask to ask While this is a simple idea (with a pretty catchy motto ), it can help you get answers to your questions much faster and will make it easier to others to feel comfortable offering you help In addition, when you ask your questions, you should help the community help you by putting together a great question When asking your question, please remember to include the context:\nWhat do you think the problem is What exactly do you want to happen What is actually happening How did you get there What have you tried so far If you can't pinpoint the problem, you can share a screenshot This is especially useful for showing the output of commands in the command line In Discord, drag and drop your screenshot image file into the chat box to upload it, or use the PrtScn and paste keyboard shortcuts If you don’t know how to take a screenshot on your computer, this is a good time to ask Google Screenshots are great for showing the output of commands or error messages in the command line Screenshots are also great for showing the output from your code such as how the output looks visually on a webpage or console outputs in the browser However, you should always include the corresponding files containing the error",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15594,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "c9a339949c4d7eba511ee83193cb62a7",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
    "source_type": "git_repo",
    "title": "join_the_odin_community",
    "content": "keyboard shortcuts If you don’t know how to take a screenshot on your computer, this is a good time to ask Google Screenshots are great for showing the output of commands or error messages in the command line Screenshots are also great for showing the output from your code such as how the output looks visually on a webpage or console outputs in the browser However, you should always include the corresponding files containing the errorEven if it is a short amount of code, providing it in the discord server in the proper format along with a screenshot of the output is helpful to those debugging it rather than just a screenshot When you do share a screenshot of the output or how it looks visually make sure to push your project to GitHub or share your corresponding code using an appropriate online REPL (such as CodePen) so that others can comb through and debug the code The screenshot of the output and the correlating code that can recreate the problem will help make it easier to understand the problem for people helping you You'll learn all about GitHub very soon Sometimes there might be no one around to help you with your issue That is the ideal time to get familiar with the Discord search function Search for specific keywords or error messages to see if anyone else had a similar issue before and how they solved it Formatting your questions\nAsking your questions in a readable format helps everyone debug them better Here are some ways to go about that:\nIf you're having trouble on the command line, make sure to include both your input and the error message you're getting In the chat rooms, code can be displayed differently from normal sentences by using backticks (``), which can be found above the Tab key on US and UK keyboards Backticks are not the same as single quotation marks (''), which are found to the left of the Enter key For a single line of code: use one backtick before and after your code `Your Code`\nFor multiple lines of code: use three backticks on a separate line above and below your code ```\nYour Multiple Lines of Code\n```\nYou can also use code highlighting to add color to your multi-line code by specifying the language:\n```js or JavaScript\nYour Multiple Lines of Colorful Code\n```\nChat features\nHave fun with giphys: type /gif hi to say hi to everyone Type / to see all chat commands Show your appreciation to those who help you with @username ++ Don't forget to visit all the available rooms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15594,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "89b002652a6b99bda11196ad9f7d617c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
    "source_type": "git_repo",
    "title": "join_the_odin_community",
    "content": "your code ``` Your Multiple Lines of Code ``` You can also use code highlighting to add color to your multi-line code by specifying the language: ```js or JavaScript Your Multiple Lines of Colorful Code ``` Chat features Have fun with giphys: type /gif hi to say hi to everyone Type / to see all chat commands Show your appreciation to those who help you with @username ++ Don't forget to visit all the available roomsHow to help others solve coding problems\nNot only is it important to know how to ask an effective question, but it is also important to know how to help others effectively Please take a moment to review these guidelines so that you will have proper expectations of the help you will receive in our Discord community In addition, come back and review these guidelines when you are ready to start helping others 1 Instead of answering the question, guide them to the answer\nUnless the problem is a simple typo or syntax error, it is more beneficial to guide them to find their own answer This approach will teach good debugging skills and will increase their ability to solve future problems Start by asking probing questions, such as \"What have you already tried \", “What do you expect this function to do ”, or “What do you think that error means ” 2 Help only when you are certain of the answer\nIf you are not 100% certain of the answer, you may end up doing more harm than good, so please let someone else answer it Do not worry about how long someone has to wait for an answer The right answer is worth the wait 3 Help only when no one else is currently helping\nIf somebody is already getting help, do not jump in the middle of the conversation We know you mean well, but it is overwhelming for the person receiving help to follow multiple conversations 4 Help only when you have plenty of time\nIf you do not have much time to help, please let someone else answer the question 5 Adjust your expectations to their level\nIf the question does not reveal where they are in the curriculum, ask them so that you can adjust your expectations to their knowledge level 6 Ask for clarifications\nIf the question seems confusing or ambiguous, ask for more clarity, or politely link them to our bot command /question, which links to the How to be great at asking coding questions article 7 Ask for live code\nIf the question needs to have live code to fully understand or debug, ask them to use an appropriate online REPL (such as CodePen) to provide it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15594,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "78764c6218fb21580f1a44eea504e648",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
    "source_type": "git_repo",
    "title": "join_the_odin_community",
    "content": "adjust your expectations to their knowledge level 6 Ask for clarifications If the question seems confusing or ambiguous, ask for more clarity, or politely link them to our bot command /question, which links to the How to be great at asking coding questions article 7 Ask for live code If the question needs to have live code to fully understand or debug, ask them to use an appropriate online REPL (such as CodePen) to provide itIf the problem is difficult to isolate, they should recreate the problem with isolated code 8 Do not answer Googleable questions\nLearning how to research these questions is a very important skill for developers, so we need to empower them to find their own answer When we answer these questions, it hinders their personal growth and makes them codependent on our community Instead of answering these questions, politely ask them to Google their question or use our bot command /search google with the search terms 9 Do not answer questions covered in our curriculum\nIf you know that the answer is provided in our curriculum, ask them where they are at in the curriculum If they have not reached that portion of the curriculum, let them know they will learn it in the future If they have already been through that portion of the curriculum, politely direct them to review that lesson 10 Answer the question before pointing out other problems\nWhen helping someone it can be easy to spot other problems in their code Resolve the original question, before pointing out any other problems that need attention 11 Encourage students to use a debugger\nIt is common for students to not understand the importance of using a debugger to look at the values of their variables at different points in their program When students are getting unexpected values, politely encourage them to use a debugger with our bot command /debug 12 Watch for students that need to take a step back\nIt is common for students to focus too hard on a problem and not be able to clearly see everything When this situation arises, politely encourage them to step back from the problem and take a break Oftentimes, stepping away from a problem will help them see the bigger picture and how to solve it 13 Watch for students that are in over their head\nIt is common for students to skip a lesson/project or think they know more than they actually do When this situation arises, politely encourage them to go back and reread a section of the curriculum for more understanding 14 Admit when the problem goes beyond your current knowledge\nIt is common for the actual issue to go beyond the initial question",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15594,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "001b718bc6f6c3eb3610a3216dfd919b",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
    "source_type": "git_repo",
    "title": "join_the_odin_community",
    "content": "and how to solve it 13 Watch for students that are in over their head It is common for students to skip a lesson/project or think they know more than they actually do When this situation arises, politely encourage them to go back and reread a section of the curriculum for more understanding 14 Admit when the problem goes beyond your current knowledge It is common for the actual issue to go beyond the initial questionIf it goes beyond your current knowledge, it is important to admit that you are unsure of the correct answer and let someone else help After digging deeper into the problem, they might be able to continue troubleshooting on their own or they can wait for someone more experienced to help 15 Be patient\nHelping others solve a problem is not always easy Remember to be patient as they struggle through the problem 16 Duck out of the conversation if you get frustrated\nSometimes there are misunderstandings and interactions go poorly You are a volunteer and are not obligated to help when things get out of hand Politely duck out of the conversation and let someone else step up Assignment\n1 First, [create a free GitHub account](https://github com/join) As you will discover, GitHub is an integral part of the development workflow 1 Now, sign in to [our Discord server](https://discord gg/fbFCkYabZB) Pop in and say hello We've created an introductions room which is a great place to introduce yourself and we're always happy to welcome new community members We have chat rooms for every development topic covered in our curriculum Log into the chat and start exploring - **(Optional) Link your GitHub to your Discord profile:** Click the gear icon to the right of your username to open `User Settings` Go to `Connections`, then click the GitHub icon In the new tab that opens click \"Allow Access\", then back in Discord make sure \"Display on profile\" is toggled on This will allow others to see what you're working on and vice versa 1 Here are some guidelines before you dive in:\n- **Read the rules and FAQ:** Please take the time to read and understand our rules and FAQ On the left sidebar in Discord, navigate to `TOP META`-> `rules` and `faq` - **Remember the human:** Behind every username there is a person with feelings Be kind If you don't have anything nice to say, don't say anything at all - **If you wouldn't say it out loud don't type it:** Plain and simple",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15594,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "5b50401be9a1714369604db001e55ef0",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
    "source_type": "git_repo",
    "title": "join_the_odin_community",
    "content": "you dive in: - **Read the rules and FAQ:** Please take the time to read and understand our rules and FAQ On the left sidebar in Discord, navigate to `TOP META`-> `rules` and `faq` - **Remember the human:** Behind every username there is a person with feelings Be kind If you don't have anything nice to say, don't say anything at all - **If you wouldn't say it out loud don't type it:** Plain and simple- **Ping (@user) with a purpose:** Only @ another user when it is necessary Include your question or comment in the message Wait until they reply before pinging again - **Don't 'bomb' chats:** Don't send multiple messages in a row; type out your whole message, then push send - **Don't exclude anyone:** These are public chats; if someone joins in on a conversation, include them The exception to this is when someone is helping a learner Those need to be 1:1 conversations to not confuse the learner - **Don't disappear right after asking for help on code:** If you're posting a question, make sure you have time to stick around and discuss it with those trying to help - **Take some time to observe the server before jumping in:** This helps you understand how our community interacts and communicates Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you join The Odin Project's Discord server What makes a good question that's easier for others to help with How can you more effectively help others with their coding problems Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental For more information on formatting, check out Discord Markdown 101",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15594,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\join_the_odin_community.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "3f66e3553aabb18f952ae749eefae81f",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "Introduction\nLearning to code is incredibly rewarding but can also be difficult and frustrating Like any skill worth knowing, it takes time to acquire, and it can't be learned in a weekend or even a month With that said, we believe anyone can learn how to program as long as they are willing to put in the time and effort So before we get into the meat of the curriculum, we'll cover the following aspects to help you get the most out of The Odin Project: factors that will help you succeed in learning to code and the pitfalls that you should try to avoid Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Recognize sensible mindsets that promote healthy learning Understand helpful ways to approach learning and struggling Things to avoid along your learning journey with TOP Motivation\nTake a moment to think about why you have decided to learn programming Do you want to have a fulfilling career that pays well Are you excited by the creative outlet programming provides Are you determined to develop the skills and abilities to build any app you can think of Do you want to start your own company by turning an app idea into reality Your motivation could be a combination of these reasons or something else entirely Whatever it is, hold on tightly to your motivation - this will be what pulls you through to the end of this journey, giving you a definitive goal to aim towards Growth mindset\nYour mindset is very important when teaching yourself any new skills, not just programming Your mindset will have more of an impact on your chances of success than just about anything else Someone with the fixed mindset believes if they don't get something on their first attempt, they never will They believe that they aren't smart enough to be able to do or understand some things However, there is a wide body of research showing that intelligence is not fixed but can instead be developed Someone with the growth mindset believes they can get better at anything with effort and persistence What does this mean for you It means you can learn new skills and develop new talents with persistence and grit There will be many times throughout The Odin Project that you will get stuck on a concept or a programming problem and may find yourself questioning your ability to learn programming When you find yourself in this position, remind yourself that you may not get it yet but that with persistence and grit you will Struggling with something is growth It doesn't matter how long you struggle with a concept or project; all that matters is that you have the grit and tenacity to see it through",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "3a87e84c9f429b085898ce2f799c0361",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "will get stuck on a concept or a programming problem and may find yourself questioning your ability to learn programming When you find yourself in this position, remind yourself that you may not get it yet but that with persistence and grit you will Struggling with something is growth It doesn't matter how long you struggle with a concept or project; all that matters is that you have the grit and tenacity to see it throughThat's how real learning happens While you're working through the curriculum, embrace the struggles you encounter with difficult concepts and complex projects Be sure to celebrate your persistence in overcoming those struggles When you find yourself questioning your abilities, reflect on the successes you have already achieved while learning to program: the projects you have completed and the concepts you once didn't understand but now do This is all the proof you need that you can do it The learning process\nLearning concepts and then practicing them will help you to more fully understand how things work and fit together Projects are the ultimate method for ensuring that your theoretical understanding aligns with how the programming concepts and techniques actually operate When learning, your mind will consistently switch between focus mode and diffuse mode Focus mode occurs when you are consciously focusing on learning, reading, watching videos, or working on a project Diffuse mode occurs subconsciously, at times when you are not actively learning, such as when you're doing the dishes, exercising, or sleeping In this state, your mind goes about the business of connecting what you have been learning to the other things you know This is where breakthroughs happen It's important to know that your mind goes through these two states when learning because you can utilize this to make your learning more efficient When stuck on a concept or project, taking a break to refresh and let your subconscious work on making connections more often than not yields a solution to your problem The trick is to put effort into solving the problem first and then take a break In short, understand it, practice it, and finally teach it Teaching what you know to others is a great way to solidify what you have learned and can often reveal holes in your knowledge that you wouldn't have identified otherwise You can practice this method of learning by helping others in our community What to do when you're stuck\nYou will inevitably get stuck at some point in the curriculum, perhaps due to a concept that you are having difficulty understanding or perhaps due to something not working correctly in a project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "e7f8cbe72ced1108672e99723c1b8759",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "is a great way to solidify what you have learned and can often reveal holes in your knowledge that you wouldn't have identified otherwise You can practice this method of learning by helping others in our community What to do when you're stuck You will inevitably get stuck at some point in the curriculum, perhaps due to a concept that you are having difficulty understanding or perhaps due to something not working correctly in a projectWhatever it is, use the following tools to get unstuck:\nGoogle it: You can be certain someone else out there has encountered the same problem as you at some point A quick Google search can often lead to a solution Take a break: Allow your diffuse learning state to work on the problem Ask for help in the TOP Discord server; come prepared with your research People will be more willing to help you when they can see you have already put effort into trying to figure out the solution on your own Additionally, feel free to follow the diagram below to help you navigate problems that you may come across:\nA note on AI code generation\nAs technology advances, we have seen some incredible tools emerge that can help accelerate coding capacity One particular area that has exploded in popularity lately is the usage of Large Language Models (LLMs) and generative AIs for code completion (like GitHub Copilot) and code generation (like ChatGPT) While these tools are amazing, learners should be aware of the impacts that using such tools can have on core competency David Humphrey, a computer science professor, wrote about ChatGPT and its potentially negative impacts on core learning It is a good read about the pitfalls of using generative AI in an educational context For learners who are new to programming, tools like ChatGPT or GitHub Copilot can result in blindspots and gaps in your knowledge By using a generative AI, learners may miss the opportunity to discover how something works and why things are done that way Asking good questions is an important skill, and relying on generative AI instead of asking people (like our helpful Discord community) can delay the development of this skill Learning to talk about the code that one writes is another important skill In a professional environment, it is highly likely that you will be doing code reviews where you have to explain the how and why behind what you are presenting Using the Odin community to ask good questions about your code when you require help can help develop this skill as well",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "ef5e585fc0fde9f19a0d247e746b59f3",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "(like our helpful Discord community) can delay the development of this skill Learning to talk about the code that one writes is another important skill In a professional environment, it is highly likely that you will be doing code reviews where you have to explain the how and why behind what you are presenting Using the Odin community to ask good questions about your code when you require help can help develop this skill as wellAs David Humphrey mentions, the output of generative AI must be closely scrutinized, and learners who are new to programming generally don't have a good overall understanding to be able to determine if the output is good or bad While learning how to provide good prompts to an AI tool is a skill, it is supplementary to developing foundational programming skills The Odin curriculum strives to teach that foundational skill AI tools are designed to answer questions and are not designed to help learners develop research and problem solving skills If you ask an AI for information, it will provide information to you If you ask a human, they may invite you to share your understanding of the problem and offer some guidance on how to discover a solution Without practice in research, problem solving and critical thinking, interviews could be a struggle since it is very likely that applicants would not be allowed to use AI tools We do not recommend using AI tools for your learning Managing your study time\nYou will have more success with Odin by putting consistent time into it rather than working on it once a week Building a habit of studying every day at a specific time and with a specific goal will ensure that you make consistent progress It may take you longer than others to grasp concepts, or it may take you less time This doesn't mean you're smarter or dumber than others, it means you've had differing life experiences that may or may not have prepared you for learning those concepts Someone who grew up around an engineer may have some advantages over someone who didn't, but it doesn't mean you can't learn those skills The Odin Project isn't like college or university, it is self-paced and allows you to get a solid grasp of concepts before moving on In school, you're forced to keep up, or you will fail The difference with The Odin Project is that you’re not expected to have much prior knowledge; there are no prerequisites We've had people be successful coming through here who only knew how to check their email with a computer We've also seen success from computer science degree holders Treating The Odin Project like a static timeline is understandable, but is a sign of misplaced expectations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "3a310ad359ee5c67312cc45105b3da24",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "In school, you're forced to keep up, or you will fail The difference with The Odin Project is that you’re not expected to have much prior knowledge; there are no prerequisites We've had people be successful coming through here who only knew how to check their email with a computer We've also seen success from computer science degree holders Treating The Odin Project like a static timeline is understandable, but is a sign of misplaced expectationsYou don't know what you don't know yet, and that's OK There are no due-dates on lessons in The Odin Project, so you can spend enough time to do it right and discuss the topics Deadlines cause unneeded stress Since The Odin Project is a free and open platform, you are not beholden to a deadline Creating your own deadlines can lead to rushing through concepts that should not be rushed This course is very research based, meaning you will have to do research to complete tasks and projects There’s no guarantee you will find the right article or post quickly enough to meet your deadlines, but you will likely learn a TON along the way that you can use in the future People that do this kind of research and strive to write better solutions tend to become better developers in the future There’s no way to know how long it will take you to learn how to query concepts to find your answers There are no solid guidelines on that If you're doing The Odin Project because you need a high-paying job right now, you’re unlikely to become a solid developer within the timeframe you have set Stress and anxiety absolutely do not help you learn either Relax and just enjoy the ride Long story short: Don't worry, just go learn Pitfalls to avoid\nThe following are some of the pitfalls that beginners often encounter when learning how to program Try your best to avoid these Procrastination\nProcrastination will be your biggest enemy when trying to make progress Solution: The Pomodoro Technique is a way of managing your time in order to stay focused The idea is to set a timer for 25 minutes and to work on a task until the timer goes off If you get distracted or interrupted during the 25 minutes, start the 25 minutes of work over again Once you've successfully focused on work for 25 minutes, take a 5 minute break When your break is over, repeat the 25 minutes of work and 5 minute break After you've completed four 25 minute blocks of work, take a longer 15-30 minute break",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "e105dea2bc29ab63a9862a4d1581dc0c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "for 25 minutes and to work on a task until the timer goes off If you get distracted or interrupted during the 25 minutes, start the 25 minutes of work over again Once you've successfully focused on work for 25 minutes, take a 5 minute break When your break is over, repeat the 25 minutes of work and 5 minute break After you've completed four 25 minute blocks of work, take a longer 15-30 minute breakThe Pomodoro technique is great for avoiding procrastination as it forces you to work without distractions Since the work time only lasts 25 minutes before taking a break, it's not overwhelming, making it harder to rationalize procrastination If you want to try it out, Pomofocus is a customizable pomodoro timer that works on desktop & mobile browser Not taking breaks\nAs you get into the material, you may feel compelled to continuously study for long periods of time It might seem like you are getting more work done at first, but this often leads to burnout, which consequently results in lower productivity It may seem counterintuitive, but you will actually get more done if you regularly step back to recharge your brain and body Studies show that performance increases after breaks of all durations: from extended vacations down to microbreaks of 30 seconds John Trougakos, Associate Professor of Management at the University of Toronto, says that mental concentration is similar to a muscle Our focus becomes fatigued after sustained use and needs a rest period to recover, just like a bodybuilder resting between sets at the gym Solution: Use the previously mentioned Pomodoro Technique to time how often and how long to take your well-deserved breaks Feel free to play around and experiment with different frequencies and durations of breaks What to do during your break:\nListen to music Journal\nDoodle\nMeditate\nPlay a quick game Go for a short walk outside Check out this article for more information on breaks & productivity Digital distractions\nDigital distractions are email, Facebook notifications, and time-wasting websites, such as social media These distractions break your focus and make procrastination tempting Therefore, they should be avoided during study time Solution: Turn off notifications and add a blocker to your internet to limit your time on distracting sites Physical distractions\nPhysical distractions are distractions from your environment, like a TV in the background or other people talking These distractions can be just as damaging to your focus as digital distractions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "e29687c41359ade375c8e7f336b6b773",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "Facebook notifications, and time-wasting websites, such as social media These distractions break your focus and make procrastination tempting Therefore, they should be avoided during study time Solution: Turn off notifications and add a blocker to your internet to limit your time on distracting sites Physical distractions Physical distractions are distractions from your environment, like a TV in the background or other people talking These distractions can be just as damaging to your focus as digital distractionsSolution: Find a quiet place in your home where you can focus on your studies If that's not an option, you can use noise cancelling headphones to block out noisy distractions in your environment There are also complimentary public and university libraries that are serene and comfortable Some libraries even operate 24/7, uninterrupted Beyond just providing a pleasant study space, the presence of others studying around you instills a sense of productivity Rabbit holes\nBecause we cover so much material on The Odin Project and link to so many high quality courses and tools, it is easy for students to get pulled into rabbit holes by spending time trying to learn all there is to know about a subject that they aren't ready for or won't benefit them much We have put a lot of effort into structuring the curriculum so that all of the important things that you need to know about web development are covered exactly when you need to know them Solution: Stick to the path laid out as much as possible Try to limit time spent going down rabbit holes, as these sidetracks can really ruin your momentum Comparing yourself to others\nStudents often compare themselves to others who are farther along in their coding journey or have more experience This is a recipe for depression and frustration Solution: Only compare yourself to your past self Have your abilities and knowledge improved from where you were last week, last month, or last year Be proud of the progress that you've made Counterproductive note-taking\nThe Odin Project does not recommend taking a lot of notes throughout your web development educational journey because it can be time-consuming and often leads to wasted effort Solution: Instead of taking notes to use as direct references, make notes that can serve as prompts for further research It is important to get comfortable with reading documentation, which essentially acts as pre-existing notes made by someone else Conclusion\nLearning any new skill is a journey full of speed bumps and obstacles to overcome We hope that the principles laid out here will put you in a much better position to succeed and get the most out of The Odin Project Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "8835aa9e554a503baefe12f71b220eb7",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "direct references, make notes that can serve as prompts for further research It is important to get comfortable with reading documentation, which essentially acts as pre-existing notes made by someone else Conclusion Learning any new skill is a journey full of speed bumps and obstacles to overcome We hope that the principles laid out here will put you in a much better position to succeed and get the most out of The Odin Project Assignment 1Once you join the TOP Discord server, give your motivation a bit of a boost Read about the success of others in the [TOP Discord server's Success Stories forum](https://discord com/channels/505093832157691914/1089990025162260570) 1 To learn more about the growth mindset, go through the following resources:\n- [Believe you can get better](https://www ted com/talks/carol_dweck_the_power_of_believing_that_you_can_improve)\n- [Grit](https://ted com/talks/angela_lee_duckworth_grit_the_power_of_passion_and_perseverance)\n- [You can learn anything](https://www khanacademy org/college-careers-more/talks-and-interviews/talks-and-interviews-unit/conversations-with-sal/a/the-learning-myth-why-ill-never-tell-my-son-hes-smart)\n1 To learn more about the best ways to learn, watch this summary of [Coursera's learning how to learn course](https://www youtube com/watch v=O96fE1E-rf8) The full course is linked in the additional resources Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the key difference between a fixed mindset and a growth mindset when encountering programming challenges What are the two modes your mind switches between during the learning process, and how do they differ When you're stuck on a programming problem, what three main strategies does the curriculum recommend trying Why does the curriculum recommend against setting strict deadlines for completing The Odin Project How does Angela Duckworth define \"grit\" in her TED talk, and why is it important for learning to code Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "d5fb96a9ab24ac0d2fe0bc3166756932",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
    "source_type": "git_repo",
    "title": "motivation_and_mindset",
    "content": "between during the learning process, and how do they differ When you're stuck on a programming problem, what three main strategies does the curriculum recommend trying Why does the curriculum recommend against setting strict deadlines for completing The Odin Project How does Angela Duckworth define \"grit\" in her TED talk, and why is it important for learning to code Additional resources This section contains helpful links to related content It isn't required, so consider it supplementalBecoming a TOP Success Story\nManaging inspiration and motivation\nLearning to code when it gets dark\nWhile thinking and research time is a bigger bottleneck than raw typing speed, if you'd like to improve your typing skills then some excellent options include typing com, Keybr, and Monkeytype Why Procrastinators Procrastinate Learn about the Instant Gratification Monkey, Rational Decision Maker, Panic Monster, and how to navigate the Dark Playground Short video introduction from the same author\n100 Days of Code is a challenge that new developers often use to track their coding journey and showcase their work Consider checking out their website if you are looking for a way to stay motivated and inspire other developers Check out the Learning How to Learn course from Coursera",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19779,
      "relative_path": "git_repos\\odin-project\\foundations\\introduction\\motivation_and_mindset.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "e3f927376fe6003866adcf8028957bab",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\data_types_and_conditionals.md",
    "source_type": "git_repo",
    "title": "data_types_and_conditionals",
    "content": "Introduction\nThere are a few extremely common types of data that you will encounter in JavaScript, and these lessons on the fundamentals will give you a really strong foundation in all of them However, before we start digging deep, read through this overview of the most common data types in JavaScript Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Name the eight data types in JavaScript Understand the difference between single, double, and backtick quotes Embed a variable/expression in a string Understand what a method is Name the three logical operators Understand what the comparison operators are Understand what conditionals are Understand what nesting is Understand what truthy and falsy values are Strings\nDepending on what kind of work you're doing, you might end up working more with pieces of text rather than numbers A string is a piece of text and is a fundamental building block of the language Read and code along with this MDN tutorial on strings in JavaScript Skip the Concatenation in context section, as it covers concepts we will cover in a later lesson on DOM Manipulation Go through the W3Schools lesson on string methods to learn a bit more about what you can do with strings Vocabulary time: a method is a bit of functionality built into the language or specific data types In the W3Schools lesson on string methods, you've learned about a few methods that can be used on strings, such as replace and slice The MDN documentation for strings provides an exhaustive reference for many more built-in string methods You are not expected to memorize these but the documentation will be a very useful reference to revisit, so bookmark it Conditionals\nNow it's time for the fun stuff So far, we haven't done much with our programming that you couldn't do with basic math skills Sure, we've told our computer how to do the math, which makes it quicker, but the essence of programming is teaching the computer how to make decisions to do more involved things Conditionals are how we do that Step one in learning about conditionals is making sure you have a good grasp on comparisons W3Schools also has a lesson on conditionals in JavaScript JavaScript info has a good tutorial on logical operators A little heads up regarding this reading's tasks: there will be questions where you see alert() with a number or string inside the parenthesis What's happening here will be discussed later in the curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\data_types_and_conditionals.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "377142d9982a44e56081d0a5f40aaa8f",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\data_types_and_conditionals.md",
    "source_type": "git_repo",
    "title": "data_types_and_conditionals",
    "content": "involved things Conditionals are how we do that Step one in learning about conditionals is making sure you have a good grasp on comparisons W3Schools also has a lesson on conditionals in JavaScript JavaScript info has a good tutorial on logical operators A little heads up regarding this reading's tasks: there will be questions where you see alert() with a number or string inside the parenthesis What's happening here will be discussed later in the curriculumSome of the answers may not make sense now, but they are accurate, and you will understand them as you progress in the curriculum Don't worry too much about it now The MDN article on conditionals reinforces the concept and provides several interesting examples of how you could use it building websites JavaScript info's lesson on if/else covers the same basic concept (read through it as a review ) and - more importantly - offers the usual 'tasks' at the bottom of the page Learn about the switch statement, which is handy when you have multiple conditions Assignment\nTo give you a good bit of practice, we have created JavaScript exercises for you to play with They contain tests that are used to make sure that your code works like it is supposed to Anywhere you see `return`, it just means that when the function finishes running, it will spit back whatever comes after `return` In future lessons, we will go into much further detail regarding these concepts, so just hang in there for now Be sure to follow the order presented here Read all the directions, watch the terminal, and read all the errors 1 Follow the [instructions in the README of our `javascript-exercises` repository](https://github com/TheOdinProject/javascript-exercises#how-to-use-these-exercises) to set up your local environment Once you have forked the repository, cloned it and installed Jest, review each README file prior to completing the following exercises in order:\n- `01_helloWorld` (This exercise is intentionally very beginner-friendly to ensure that you have everything set up properly )\n- `02_addNumbers`\n- `03_numberChecker`\n- `04_mathEquations`\n- `05_joinStrings`\nNote: Solutions for these exercises can be found in the `solution` folder of each exercise Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the eight data types in JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\data_types_and_conditionals.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "dc0fd3d65c64c83e77df9822d813e299",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\data_types_and_conditionals.md",
    "source_type": "git_repo",
    "title": "data_types_and_conditionals",
    "content": "properly ) - `02_addNumbers` - `03_numberChecker` - `04_mathEquations` - `05_joinStrings` Note: Solutions for these exercises can be found in the `solution` folder of each exercise Knowledge check The following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the eight data types in JavaScriptWhich data type is NOT primitive What is the relationship between null and undefined What is the difference between single, double, and backtick quotes for strings What is the term for joining strings together Which type of quote lets you embed variables/expressions in a string How do you embed variables/expressions in a string How do you use escape characters in a string What is the difference between the slice/substring string methods What are the three logical operators, and what do they stand for What are the comparison operators What are truthy and falsy values What are the falsy values in JavaScript What are conditionals What is the syntax for an if/else conditional What is the syntax for a switch statement What is the syntax for a ternary operator What is nesting Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Regular expressions, commonly known as regex, is a tool that matches or locates patterns in strings for string validation However, it's important to know when you shouldn't use regular expressions There are other various methods to process strings, and regex can be slower in comparison Web Dev Simplified's Regular Expressions In 20 Minutes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\data_types_and_conditionals.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "057821241a0c49558bef9c115ab15c10",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
    "source_type": "git_repo",
    "title": "clean_code",
    "content": "Introduction\nYou might think that the majority of a developer's work involves writing code However, in reality, a significant amount of time is spent on reading code This includes code written by other team members, code written by people who are no longer part of your team, and even code that you wrote two weeks ago but may not remember much about Don't think of these principles as something you need to master immediately Everybody writes messy code sometimes, even professionals What we want to do here is give you some guidelines that can help improve the readability of your code as you go along The more you write code, the better it will become, both in terms of readability and other aspects Test out these ideas and try to incorporate them into your thought process while writing code, but don't beat yourself up for not writing elegant, crystal-clear code Focus on gradual improvement, not perfection With that out of the way, let's get started Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Know how to distinguish hard to read code from easy to read code Use programming principles to make your code cleaner Write good comments What is clean code Consider the following examples:\nExample A:\n```javascript\nconst x= function (z){\nconst w = \"Hello \";\nreturn w +  z\n}\nx(\"John\");\n```\nExample B:\n```javascript\nconst generateUserGreeting = function (name) {\nconst greeting = \"Hello \";\nreturn greeting + name;\n};\ngenerateUserGreeting(\"John\");\n```\nWhich of these examples do you find easier to read It's immediately clear that the latter one is more meaningful Surprisingly, both of these functions perform the exact same task (in the exact same way ), and both are valid code But the second one is much more readable Why In the first example, single-letter variables are used and the indentation and spacing are inconsistent The result is a piece of code that is confusing and messy Imagine you're collaborating on a project with someone who has written the first function How long will it take you to decipher what's going on so you can continue with your work Or perhaps you've written it yourself some time ago and completely forgotten that it even existed In both situations, you will eventually understand what is happening, but it's not going to be fun Example B represents cleaner code While you may not know what each part does, it's much easier to guess what's happening because the functions and variables are named clearly The indentation and spacing follow a consistent and logical pattern",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16447,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "eb41875adc9f910f3d2272f55a8ddf86",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
    "source_type": "git_repo",
    "title": "clean_code",
    "content": "continue with your work Or perhaps you've written it yourself some time ago and completely forgotten that it even existed In both situations, you will eventually understand what is happening, but it's not going to be fun Example B represents cleaner code While you may not know what each part does, it's much easier to guess what's happening because the functions and variables are named clearly The indentation and spacing follow a consistent and logical patternSingle characters can be used as variable names in the context of a loop or a callback function, but avoid them elsewhere About camelCase\ncamelCase is a naming convention that allows writing multiple words together without spaces or punctuation In camelCase, when a variable name consists of multiple words like our setTimeout example, the first word is written completely in lowercase, while the first letter of the second word (and any subsequent words) are capitalized Throughout this lesson, most of our variables and functions will be named using camelCase While not every language uses this convention, it's very common in JavaScript so it'll be a good example to follow #### Conventions are only conventions\nWhile this lesson shares some examples on ways to clean up code, in reality, every organization will have different specific approaches, some of which may differ slightly from our examples in this lesson Nothing is absolute What matters most is that these approaches all serve the same overall purpose - improve code readability and maintainability Until a time comes where you need to follow a specific set of conventions, it is sensible to follow some convention and be consistent with them Naming functions and variables\nIn our first example, we already touched on the importance of naming things meaningfully Let's break down further what makes a good variable or function name A good name is descriptive\nIn our good example, we have a variable greeting, to which the parameter name is concatenated The function is named generateUserGreeting and the function does what the name suggests Nice, clean, and understandable Now, try picturing a conversation with someone about the bad example The function is named x with variables like z, and w Oof, not nice Use consistent vocabulary\nVariables of the same type ideally follow a consistent naming system Consider the following examples from a game:\njavascript\n// Consistent naming\nfunction getPlayerScore();\nfunction getPlayerName();\nfunction getPlayerTag();\nThey all follow the same naming system of \"get a thing\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16447,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "689a598e41cf01785bb9a1ccaaff28b2",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
    "source_type": "git_repo",
    "title": "clean_code",
    "content": "does what the name suggests Nice, clean, and understandable Now, try picturing a conversation with someone about the bad example The function is named x with variables like z, and w Oof, not nice Use consistent vocabulary Variables of the same type ideally follow a consistent naming system Consider the following examples from a game: javascript // Consistent naming function getPlayerScore(); function getPlayerName(); function getPlayerTag(); They all follow the same naming system of \"get a thing\"Now consider the following:\njavascript\n// Inconsistent naming\nfunction getUserScore();\nfunction fetchPlayerName();\nfunction retrievePlayer1Tag();\nIn the inconsistent example, three different verbs are used for the functions While they all mean a similar thing, at a glance you might assume different verbs were used for a specific reason (e g \"getting\" might not be quite the same thing as \"fetching\" in some contexts) Additionally, what's the difference between User, Player and Player1 If there is no difference then ideally, you'd use the same name e g Player Consistency allows for predictability Variables should preferably begin with a noun or an adjective (that is, a noun phrase), as they typically represent \"things\", whether that thing is a string, a number etc Functions represent actions so ideally begin with a verb ```javascript\n// Preferable\nconst numberOfThings = 10;\nconst myName = \"Thor\";\nconst selected = true;\n// Not preferable (these start with verbs, could be confused for functions)\nconst getCount = 10;\nconst showNorseGods = [\"Odin\", \"Thor\", \"Loki\"];\n// Preferable\nfunction getCount() {\nreturn numberOfThings;\n}\n// Not preferable (myName doesn't represent some kind of action)\nfunction myName() {\nreturn \"Thor\";\n}\n```\nUse searchable and immediately understandable names\nSometimes, it can be tempting to use \"magic values\" i e explicit values, such as bare numbers or strings Let's take another look at an example:\njavascript\nsetTimeout(stopTimer, 3600000);\nThe problem is obvious What does the magic number 3600000 mean, and how long is this timeout going to count down before executing stopTimer Even if you know that JavaScript understands time in milliseconds, you'd probably need a calculator or Google to figure out how many seconds or minutes it represents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16447,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "ab6ae1fdf28cd35df502735fcabcce94",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
    "source_type": "git_repo",
    "title": "clean_code",
    "content": "tempting to use \"magic values\" i e explicit values, such as bare numbers or strings Let's take another look at an example: javascript setTimeout(stopTimer, 3600000); The problem is obvious What does the magic number 3600000 mean, and how long is this timeout going to count down before executing stopTimer Even if you know that JavaScript understands time in milliseconds, you'd probably need a calculator or Google to figure out how many seconds or minutes it representsNow, let's make this code more meaningful by introducing a descriptive variable:\n```javascript\nconst ONE_HOUR = 3600000; // Can even write as 60 * 60 * 1000;\nsetTimeout(stopTimer, ONE_HOUR);\n```\nMuch better, isn't it The variable is declared with a descriptive name, and you don't need to perform any calculations when reading this code You might wonder why this variable is declared with all caps when we recommended camelCase earlier This is a convention to be used when the programmer is absolutely sure that the variable is truly a constant, especially if it represents some kind of concept like a specific duration of time We know that the milliseconds in an hour will never change, so it's appropriate here Remember, this is only a convention Not everyone will necessarily do things the same way Indentation and line length\nNow it's time to head to more \"controversial\" topics (there's a joke about the war between coders who indent with spaces versus tabs) What actually matters is consistency Choose a way to indent and stick to it Various JavaScript style guides recommend different options, and one is not really superior to the other We will look at style guides and related tools in more detail later in the curriculum Line length\nAgain, different style guides will recommend different options for this one, but just about all of them suggest limiting the length of each line of code Generally, your code will be easier to read if you manually break lines that are longer than about 80 characters Many code editors have a line in the display to show when you have crossed this threshold When manually breaking lines, you should try to break immediately after an operator or comma Then, there are a few ways to format continuation lines",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16447,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "ccbd4413d4720c200c98f5f5eb110562",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
    "source_type": "git_repo",
    "title": "clean_code",
    "content": "just about all of them suggest limiting the length of each line of code Generally, your code will be easier to read if you manually break lines that are longer than about 80 characters Many code editors have a line in the display to show when you have crossed this threshold When manually breaking lines, you should try to break immediately after an operator or comma Then, there are a few ways to format continuation linesFor example, you can:\n```javascript\n// This line is a bit too long\nlet reallyReallyLongLine = something + somethingElse + anotherThing + howManyTacos + oneMoreReallyLongThing;\n// You could format it like this\nlet reallyReallyLongLine =\nsomething +\nsomethingElse +\nanotherThing +\nhowManyTacos +\noneMoreReallyLongThing;\n// Or maybe like this\nlet anotherReallyReallyLongLine = something + somethingElse + anotherThing +\nhowManyTacos + oneMoreReallyLongThing;\n```\nDifferent formats aren't necessarily right or wrong, and different people may prefer different things Do things in a way that makes sense to you, and stay consistent with it Semicolons\nSemicolons are mostly optional in JavaScript because the JavaScript interpreter will automatically insert them if they are omitted This functionality can break in certain situations, leading to bugs in your code, so we'd recommend getting used to adding semicolons Whether you do or not, again, consistency is the main thing About comments\nComments are a great tool but like any good tool, they can be misused Especially for someone early in their coding journey, it might be tempting to have comments that explain everything the code is doing This is generally not a good practice Let's look at some common pitfalls when commenting and why they are pitfalls Don't comment when you should be using git\nIt might be tempting to have comments in your code that explain the changes or additions you have made For example:\njavascript\n/**\n* 2023-01-10: Removed unnecessary code that was causing confusion (RM)\n* 2023-03-05: Simplified the code (JP)\n* 2023-05-15: Removed functions that were causing bugs in production (LI)\n* 2023-06-22: Added a new function to combine values (JR)\n*/\nThe problem is that you already have a tool to track changes - git Keeping track of these comments will become a chore, and you will have an incomplete picture of what has happened",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16447,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "14daa0c265437b1aa8bc4e9f6847e94e",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
    "source_type": "git_repo",
    "title": "clean_code",
    "content": "For example: javascript /** * 2023-01-10: Removed unnecessary code that was causing confusion (RM) * 2023-03-05: Simplified the code (JP) * 2023-05-15: Removed functions that were causing bugs in production (LI) * 2023-06-22: Added a new function to combine values (JR) */ The problem is that you already have a tool to track changes - git Keeping track of these comments will become a chore, and you will have an incomplete picture of what has happenedYour files will also contain bloat that doesn't belong there By using git, all this information will be neatly organized in the repository and readily accessible with git log The same applies to code that is no longer used If you need it again in the future, just turn to your git commits Commenting out something while testing something else is, of course, ok, but once a piece of code is not needed, just delete it Don't have something like this hanging around in your files:\njavascript\ntheFunctionInUse();\n// oldFunction();\n// evenOlderUselessFunction();\n// whyAmIEvenHereImAncient();\nTell why, not how\nIdeally, comments do not provide pseudocode that duplicates your code Good comments explain the reasons behind a piece of code Sometimes you won't even need a comment at all Say we had a string where part of the text was inside square brackets and we wanted to extract the text within those brackets javascript\n// Function to extract text\nfunction extractText(s) {\n// Return the string starting after the \"[\" and ending at \"]\"\nreturn s substring(s indexOf(\"[\") + 1, s indexOf(\"]\"));\n}\nThe comments just describe what we can tell from the code itself Slightly more useful comments could explain the reasons behind the code javascript\n// Extracts text inside square brackets (excluding the brackets)\nfunction extractText(s) {\nreturn s substring(s indexOf(\"[\") + 1, s indexOf(\"]\"));\n}\nBut often, we can make the code speak for itself without comments javascript\nfunction extractTextWithinBrackets(text) {\nconst bracketTextStart = text indexOf(\"[\") + 1;\nconst bracketTextEnd = text indexOf(\"]\");\nreturn text substring(bracketTextStart, bracketTextEnd);\n}\nIn the first example, the comments repeat twice what the code does But for this, you could've just read the code, so the comments are redundant",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16447,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "e1b3f85cd8925f0c80b5617bc460f6cc",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
    "source_type": "git_repo",
    "title": "clean_code",
    "content": "square brackets (excluding the brackets) function extractText(s) { return s substring(s indexOf(\"[\") + 1, s indexOf(\"]\")); } But often, we can make the code speak for itself without comments javascript function extractTextWithinBrackets(text) { const bracketTextStart = text indexOf(\"[\") + 1; const bracketTextEnd = text indexOf(\"]\"); return text substring(bracketTextStart, bracketTextEnd); } In the first example, the comments repeat twice what the code does But for this, you could've just read the code, so the comments are redundantIn the second example, the comment clarifies the purpose of the function: extracting the text between square brackets from a string and not just \"extracting text\" That's handy, but we can do even better In the last example, no comments are needed at all The use of descriptive functions and variable names eliminates the need for additional explanations Pretty neat, huh This doesn't mean good code should lack comments Let's look at an example where a comment serves a helpful purpose:\njavascript\nfunction calculateBMI(height, weight) {\n// The formula for BMI is weight in kilograms divided by height in meters squared\nconst heightInMeters = height / 100;\nconst bmi = weight / (heightInMeters * heightInMeters);\nreturn bmi;\n}\nThis comment helps to refresh the reader on how BMI is calculated in plain English, helping the reader to see why the height needs to be converted and what the following calculation is doing We are almost there with the naming, but the comment still adds further clarity In many situations, well-placed comments are priceless They might explain why an unintuitive bit of code is necessary, or perhaps the bigger picture of why a certain function is particularly important to be called here and not there The article linked in the assignment section goes into more depth on this In conclusion\nNow that we've covered these ideas, it's good to return to the reminder we shared at the start Don't try to write perfectly clean code, this will only lead to frustration Writing \"spaghetti\" is inevitable; everyone does it sometimes Just keep these ideas in mind, and with time and patience, your code will start to get cleaner Learning to write clean code is a process of constant improvement One that will extend beyond you completing The Odin Project This lesson is meant to serve as a primer and a starting point for that journey Great code comes from experience Experience comes from not-so-great code Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16447,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "033ce5b5569b3db2f684075d0c814d5d",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
    "source_type": "git_repo",
    "title": "clean_code",
    "content": "frustration Writing \"spaghetti\" is inevitable; everyone does it sometimes Just keep these ideas in mind, and with time and patience, your code will start to get cleaner Learning to write clean code is a process of constant improvement One that will extend beyond you completing The Odin Project This lesson is meant to serve as a primer and a starting point for that journey Great code comes from experience Experience comes from not-so-great code Assignment 1Read [10 Principles for Keeping Your Programming Code Clean](https://onextrapixel com/10-principles-for-keeping-your-programming-code-clean/) to get some great tips for clean code 1 To help better understand good comment practices, read about [comments telling us why code works](https://blog codinghorror com/code-tells-you-how-comments-tell-you-why/) as well as how to [code without comments](https://blog codinghorror com/coding-without-comments/) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Why is it important to write clean code What are some good principles for keeping code clean What is the difference between good comments and bad comments Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental A nice op-ed on code as documentation\nAirbnb style guide\nChaining methods to write sentences\nClean code in JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16447,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\clean_code.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "ef86847c00acc3360d1fd54469190814",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\function_basics.md",
    "source_type": "git_repo",
    "title": "function_basics",
    "content": "Introduction\nThings are about to get really exciting So far you have been writing an impressive amount of code to solve various problems, but that code has not been as useful as it could be Imagine taking one of your scripts and bundling it into a little package that you could use over and over again without having to rewrite or change the code That's the power of functions, and they're used constantly in JavaScript Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to define and invoke different kinds of functions How to use the return value What function scope is Functions\nLet's discuss parameters and arguments in the context of the following example function:\n```javascript\nfunction favoriteAnimal(animal) {\nreturn animal + \" is my favorite animal \"\n}\nconsole log(favoriteAnimal('Goat'))\n```\nIn JavaScript, parameters are the items listed between the parentheses () in the function declaration Function arguments are the actual values we decide to pass to the function In the example above, the function definition is written on the first line: function favoriteAnimal(animal) The parameter, animal, is found inside the parentheses We could just as easily replace animal with pet, x, or blah But in this case, naming the parameter animal gives someone reading our code a bit of context so that they don't have to guess what animal may eventually contain By putting animal inside the parentheses of the favoriteAnimal() function, we are telling JavaScript that we will send some value to our favoriteAnimal function This means that animal is just a placeholder for some future value But what value are we sending The last line, favoriteAnimal('Goat'), is where we are calling our favoriteAnimal function and passing the value 'Goat' inside that function Here, 'Goat' is our argument We are telling the favoriteAnimal function, \"Please send 'Goat' to the favoriteAnimal function and use 'Goat' wherever the 'animal' placeholder is \" Because of the flexibility that using a parameter provides, we can declare any animal to be our favorite Here is a diagram to help you visualize how parameters are passed to a function, and how values get returned from it Make note of the fact that by calling favoriteAnimal() inside of console log() with the argument 'Goat' we get the return value of the function, string of \"Goat is my favorite animal \", printed to the console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8392,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\function_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "fceb083e4bc82f137768e26ca06986de",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\function_basics.md",
    "source_type": "git_repo",
    "title": "function_basics",
    "content": "of the flexibility that using a parameter provides, we can declare any animal to be our favorite Here is a diagram to help you visualize how parameters are passed to a function, and how values get returned from it Make note of the fact that by calling favoriteAnimal() inside of console log() with the argument 'Goat' we get the return value of the function, string of \"Goat is my favorite animal \", printed to the consoleWe're passing in a function call favoriteAnimal('Goat') as an argument in a different function call - log() Keep this possibility in mind because you'll be passing in function calls as arguments somewhat often If we just called the function without using console log to print it's return value, nothing would appear in the console but nonetheless the function would return that string Feel free to experiment with the code on your own and replace 'Goat' with your favorite animal Notice how we can change the argument to anything we like Try changing animal in the function declaration and in the function body, too What happens when you do Assignment\nNote that articles #1 and #2 also have their own exercises attached, which you should **not** do, as they involve knowledge we haven't touched yet 1 This [MDN article on functions](https://developer mozilla org/en-US/docs/Learn/JavaScript/Building_blocks/Functions) is a good place to start Don't worry as there may be some functions that can be beyond the reach of this particular lesson, but do pay special attention to the sections on 'Function Scope' Scope is a topic that commonly trips up both beginner and intermediate coders, so it pays to spend some time with it upfront 1 Read this article about [return values](https://developer mozilla org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values) 1 Next, read the [function basics](http://javascript info/function-basics) article from JavaScript info We've mentioned this before, but JavaScript has changed a bit over the years and functions have recently received some innovation This article covers one of the more useful new abilities: 'default parameters' \\(NOTE: The \"Functions == Comments\" section, as well as the last \"task\" at the end of this lesson uses loops, which you will learn about in the next lesson Don't worry about them \\)\n1 Now, read the [function expressions](http://javascript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8392,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\function_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0aba7403f62c68c3d1e7c27972e87e17",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\function_basics.md",
    "source_type": "git_repo",
    "title": "function_basics",
    "content": "article from JavaScript info We've mentioned this before, but JavaScript has changed a bit over the years and functions have recently received some innovation This article covers one of the more useful new abilities: 'default parameters' \\(NOTE: The \"Functions == Comments\" section, as well as the last \"task\" at the end of this lesson uses loops, which you will learn about in the next lesson Don't worry about them \\) 1 Now, read the [function expressions](http://javascriptinfo/function-expressions) article about functions in JavaScript to give you a little more context, and read the article on [arrow functions](http://javascript info/arrow-functions-basics) for an introduction to arrow functions Arrow functions are useful but not crucial, so don't worry about them too much just yet We include them here because you are likely to encounter them as you move forward, and it's better that you have at least *some* idea of what you're looking at whenever they crop up 1 Finally, learn about the [JavaScript Call Stack](https://www javascripttutorial net/javascript-call-stack/) The article goes in-depth about call stacks and how `return` works in the context of chained function calls Don't worry if you don't fully understand this yet, but it's important to keep in mind where your `return`ed values are going This doubles as a bit of early computer science as well Let's write some functions Write these in the `script` tag of a skeleton HTML file If you've forgotten how to set it up, review our instructions on [how to run JavaScript code](https://www theodinproject com/lessons/foundations-fundamentals-part-1#how-to-run-javascript-code) For now, just write each function and test the output with `console log` 1 Write a function called `add7` that takes one number and returns that number + 7 1 Write a function called `multiply` that takes 2 numbers and returns their product 1 Write a function called `capitalize` that takes a string and returns that string with *only* the first letter capitalized Make sure that it can take strings that are lowercase, UPPERCASE or BoTh 1 Write a function called `lastLetter` that takes a string and returns the very last letter of that string:\n- `lastLetter(\"abcd\")` should return `\"d\"`\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8392,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\function_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "48b6981526c8faf21f68eaf585ce8abe",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\function_basics.md",
    "source_type": "git_repo",
    "title": "function_basics",
    "content": "returns their product 1 Write a function called `capitalize` that takes a string and returns that string with *only* the first letter capitalized Make sure that it can take strings that are lowercase, UPPERCASE or BoTh 1 Write a function called `lastLetter` that takes a string and returns the very last letter of that string: - `lastLetter(\"abcd\")` should return `\"d\"` Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are functions useful for How do you invoke a function What are anonymous functions What is function scope What are return values What are arrow functions What is the difference between a function declaration and a function expression Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental What's the difference between using \"let\" and \"var\" - stackoverflow\nHow JavaScript Code is executed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8392,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\function_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 211,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0730bed55f2b2300642cb69294a36c11",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\installing_nodejs.md",
    "source_type": "git_repo",
    "title": "installing_nodejs",
    "content": "Introduction\nNode js is a JavaScript runtime environment that allows you to run JavaScript outside of your web browser We will need this for some exercises in the upcoming lessons To get started, there are some required tools we need before we can install Node on your system We're going to install it using nvm (Node Version Manager), because it makes it easy to change Node versions and upgrade Node There is another tool called npm that we will later use to install the various libraries and tools used in JavaScript environments It can be easy to confuse these two, so read carefully Node is also very easy to install using nvm, so this should go quickly :)\nLesson overview\nThis section contains a general overview of topics that you will learn in this lesson Learn how to Install nvm (Node Version Manager) and npm Learn how to run Node console Installing NVM\nInstallation on Linux\n#### Step 0: Prerequisites\nTo install nvm properly, you'll need `curl` Run the command below to install `curl`:\n```bash\nsudo apt install curl\n```\nNote: You may need to update the Ubuntu package lists to the latest version for the Curl installation to complete If so, run the command below:\n```bash\nsudo apt update && sudo apt upgrade\n```\n#### Step 1: Downloading and Installing NVM\nRun this command to install `nvm`:\n```bash\ncurl -o- https://raw githubusercontent com/nvm-sh/nvm/v0 40 3/install sh | bash\n```\n#### Step 2: Initializing NVM\nIn the terminal there should be some directions on how to initialize `nvm` If not, (or if you don't feel like copying from the terminal), run these commands:\n```bash\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/ nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm sh\" ] && \\ \"$NVM_DIR/nvm sh\" # This loads nvm\n```\nYou can verify `nvm` is installed by running the command:\n```bash\ncommand -v nvm\n```\nIf this returns `nvm: command not found`, close the terminal and re-open it Installation on macOS\nOn macOS 10 15 and above, the default shell is now zsh During installation, nvm will look for a `",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5285,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\installing_nodejs.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a60caaff6b3bc13666c5825008de2654",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\installing_nodejs.md",
    "source_type": "git_repo",
    "title": "installing_nodejs",
    "content": "\"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/ nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\" [ -s \"$NVM_DIR/nvm sh\" ] && \\ \"$NVM_DIR/nvm sh\" # This loads nvm ``` You can verify `nvm` is installed by running the command: ```bash command -v nvm ``` If this returns `nvm: command not found`, close the terminal and re-open it Installation on macOS On macOS 10 15 and above, the default shell is now zsh During installation, nvm will look for a `zshrc` file in your user home directory By default, this file does not exist so we need to create it To create the ` zshrc` file and start the nvm installation, run the following commands:\n```bash\ntouch ~/ zshrc\n```\n```bash\ncurl -o- https://raw githubusercontent com/nvm-sh/nvm/v0 40 1/install sh | bash\n```\nRestart your terminal, or copy and paste the following into your terminal and press Enter:\n```bash\nexport NVM_DIR=\"$HOME/ nvm\"\n[ -s \"$NVM_DIR/nvm sh\" ] && \\ \"$NVM_DIR/nvm sh\" # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\ \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion\n```\nTest your nvm installation by running:\n```bash\nnvm --version\n```\nFor more information, read about [installing and updating from NVM's GitHub](https://github com/nvm-sh/nvm#installation-and-update) Installing Node\nNow that we have nvm installed, we can install Node Step 1: Installation\nRun:\nbash\nnvm install --lts\nThis will install the most recent stable version of Node in 'long-term support' (LTS), and you’ll see a lot of output in the terminal If everything worked, you should see something similar to this somewhere in the lines of output (with the X's replaced with actual numbers):\nbash\nDownloading and installing Node vXX xx x If not, close the terminal, re-open it and run nvm install --lts again Step 2: Setting the Node version\nWe need to tell nvm which version of Node to use when we run the node command",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5285,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\installing_nodejs.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4d01c9aaa814ea281d073a183cc5fea8",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\installing_nodejs.md",
    "source_type": "git_repo",
    "title": "installing_nodejs",
    "content": "you’ll see a lot of output in the terminal If everything worked, you should see something similar to this somewhere in the lines of output (with the X's replaced with actual numbers): bash Downloading and installing Node vXX xx x If not, close the terminal, re-open it and run nvm install --lts again Step 2: Setting the Node version We need to tell nvm which version of Node to use when we run the node commandIt's easy; just run the following command:\nbash\nnvm use --lts\nWe have told nvm to use the most recent LTS version of Node installed on our computer You must use the LTS version of Node to avoid incompatibilities with packages we will be installing in future lessons The LTS version of Node is a version that is guaranteed support for thirty months after its initial release It is more stable and compatible with a variety of packages than a non-LTS version of Node Now when you run node -v, you should see vXX xx x or something similar (with the X's replaced with actual numbers) If you see that, you have successfully installed Node Using Node console\nFor convenience, Node provides an interactive console which lets you run and edit your JavaScript code right in your terminal, similar to IRB for ruby This is quite helpful to debug or test small snippets of your code quickly without opening the browser every time To run the Node console, open up your terminal and type node Type exit to quit the console Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Check out this 4 minute video by Programming with Mosh What is NodeJS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5285,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\installing_nodejs.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b3632b29b98318a62be08c19e62d6b9a",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "Introduction\nOne of the most unique and useful abilities of JavaScript is its ability to manipulate the DOM But what is the DOM, and how do we go about changing it Let's jump right in Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain what the DOM is in relation to a webpage Explain the difference between a \"node\" and an \"element\" Explain how to target nodes with \"selectors\" Explain the basic methods for finding, adding, removing, and altering DOM nodes Explain the difference between a \"NodeList\" and an \"array of nodes\" Explain what \"bubbling\" is and how it works Document Object Model\nThe DOM (or Document Object Model) is a tree-like representation of the contents of a webpage - a tree of \"nodes\" with different relationships depending on how they're arranged in the HTML document There are many types of nodes, most of which are not commonly used In this lesson we will be focusing on \"element\" nodes which are primarily used for manipulating the DOM ```html\n```\nIn the above example, the <div class=\"display\"></div> is a \"child\" of <div id=\"container\"></div> and a \"sibling\" to <div class=\"controls\"></div> Think of it like a family tree <div id=\"container\"></div> is a parent, with its children on the next level, each on their own \"branch\" Targeting nodes with selectors\nWhen working with the DOM, you use \"selectors\" to target the nodes you want to work with You can use a combination of CSS-style selectors and relationship properties to target the nodes you want Let's start with CSS-style selectors In the above example, you could use the following selectors to refer to <div class=\"display\"></div>:\ndiv display display\n#container > display\ndiv#container > div display\nYou can also use relational selectors (i e , firstElementChild or lastElementChild, etc ) with special properties owned by the nodes ```javascript\n// selects the #container div (don't worry about the syntax, we'll get there)\nconst container = document querySelector(\"#container\");\n// selects the first child of #container => display\nconst display = container firstElementChild;\nconsole log(display);  //\n```\n```javascript\n// selects the controls div\nconst controls = document querySelector(\" controls\");\n// selects the prior sibling => display\nconst display = controls",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "8fdd53c7f00643a5658f2c58eedbee01",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "selectors (i e , firstElementChild or lastElementChild, etc ) with special properties owned by the nodes ```javascript // selects the #container div (don't worry about the syntax, we'll get there) const container = document querySelector(\"#container\"); // selects the first child of #container => display const display = container firstElementChild; console log(display); // ``` ```javascript // selects the controls div const controls = document querySelector(\" controls\"); // selects the prior sibling => display const display = controlspreviousElementSibling;\nconsole log(display); //\n```\nSo you're identifying a certain node based on its relationships to the nodes around it DOM methods\nWhen your HTML code is parsed by a web browser, it is converted to the DOM, as was mentioned above One of the primary differences is that these nodes are JavaScript objects that have many properties and methods attached to them These properties and methods are the primary tools we are going to use to manipulate our webpage with JavaScript Query selectors\nelement querySelector(selector) - returns a reference to the first match of selector element querySelectorAll(selectors) - returns a \"NodeList\" containing references to all of the matches of the selectors There are several other, more specific queries, that offer potential (marginal) performance benefits, but we won't be going over them now It's important to remember that when using querySelectorAll, the return value is not an array It looks like an array, and it somewhat acts like an array, but it's really a \"NodeList\" The big distinction is that several array methods are missing from NodeLists One solution, if problems arise, is to convert the NodeList into an array You can do this with Array from() or the spread operator Element creation\ndocument createElement(tagName, [options]) - creates a new element of tag type tagName [options] in this case means you can add some optional parameters to the function Don't worry about these at this point javascript\nconst div = document createElement(\"div\");\nThis function does NOT put your new element into the DOM - it creates it in memory This is so that you can manipulate the element (by adding styles, classes, ids, text, etc ) before placing it on the page You can place the element into the DOM with one of the following methods Append elements\nparentNode appendChild(childNode) - appends childNode as the last child of parentNode parentNode insertBefore(newNode, referenceNode) - inserts newNode into parentNode before referenceNode Remove elements\nparentNode",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "20be14731c22dbdcfcf8ac736673312c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "put your new element into the DOM - it creates it in memory This is so that you can manipulate the element (by adding styles, classes, ids, text, etc ) before placing it on the page You can place the element into the DOM with one of the following methods Append elements parentNode appendChild(childNode) - appends childNode as the last child of parentNode parentNode insertBefore(newNode, referenceNode) - inserts newNode into parentNode before referenceNode Remove elements parentNoderemoveChild(child) - removes child from parentNode on the DOM and returns a reference to child Altering elements\nWhen you have a reference to an element, you can use that reference to alter the element's own properties This allows you to do many useful alterations, like adding, removing, or altering attributes, changing classes, adding inline style information, and more javascript\n// creates a new div referenced in the variable 'div'\nconst div = document createElement(\"div\");\nAdding inline style\n```javascript\n// adds the indicated style rule to the element in the div variable\ndiv style color = \"blue\";\n// adds several style rules\ndiv style cssText = \"color: blue; background: white;\";\n// adds several style rules\ndiv setAttribute(\"style\", \"color: blue; background: white;\");\n```\nWhen accessing a kebab-cased CSS property like background-color with JS, you will need to either use camelCase with dot notation or bracket notation When using bracket notation, you can use either camelCase or kebab-case, but the property name must be a string ```javascript\n// dot notation with kebab case: doesn't work as it attempts to subtract color from div style background\n// equivalent to: div style background - color\ndiv style background-color;\n// dot notation with camelCase: works, accesses the div's background-color style\ndiv style backgroundColor;\n// bracket notation with kebab-case: also works\ndiv style[\"background-color\"];\n// bracket notation with camelCase: also works\ndiv style[\"backgroundColor\"];\n```\nEditing attributes\n```javascript\n// if id exists, update it to 'theDiv', else create an id with value \"theDiv\"\ndiv setAttribute(\"id\", \"theDiv\");\n// returns value of specified attribute, in this case \"theDiv\"\ndiv getAttribute(\"id\");\n// removes specified attribute\ndiv removeAttribute(\"id\");\n```\nSee MDN's section on HTML Attributes for more information on available attributes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "4b6c7b233dff0083b68b06b751d019b3",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "background-color style div style backgroundColor; // bracket notation with kebab-case: also works div style[\"background-color\"]; // bracket notation with camelCase: also works div style[\"backgroundColor\"]; ``` Editing attributes ```javascript // if id exists, update it to 'theDiv', else create an id with value \"theDiv\" div setAttribute(\"id\", \"theDiv\"); // returns value of specified attribute, in this case \"theDiv\" div getAttribute(\"id\"); // removes specified attribute div removeAttribute(\"id\"); ``` See MDN's section on HTML Attributes for more information on available attributesWorking with classes\n```javascript\n// adds class \"new\" to your new div\ndiv classList add(\"new\");\n// removes \"new\" class from div\ndiv classList remove(\"new\");\n// if div doesn't have class \"active\" then add it, or if it does, then remove it\ndiv classList toggle(\"active\");\n```\nIt is often standard (and cleaner) to toggle a CSS style rather than adding and removing inline CSS Adding text content\njavascript\n// creates a text node containing \"Hello World \" and inserts it in div\ndiv textContent = \"Hello World \";\nAdding HTML content\njavascript\n// renders the HTML inside div\ndiv innerHTML = \"<span>Hello World </span>\";\nNote that using textContent is preferred over innerHTML for adding text, as innerHTML should be used sparingly to avoid potential security risks To understand the dangers of using innerHTML, watch this [video about preventing the most common cross-site scripting attack](https://youtube com/watch v=ns1LX6mEvyM) Let's take a minute to review what we've covered and give you a chance to practice this stuff before moving on Check out this example of creating and appending a DOM element to a webpage ```html\nTHE TITLE OF YOUR WEBPAGE\n```\n```javascript\n// your JavaScript file\nconst container = document querySelector(\"#container\");\nconst content = document createElement(\"div\");\ncontent classList add(\"content\");\ncontent textContent = \"This is the glorious text-content \";\ncontainer appendChild(content);\n```\nIn the JavaScript file, first we get a reference to the container div that already exists in our HTML Then we create a new div and store it in the variable content We add a class and some text to the content div and finally append that div to container",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "bf2f448982a14569e38852b20969fc17",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "file const container = document querySelector(\"#container\"); const content = document createElement(\"div\"); content classList add(\"content\"); content textContent = \"This is the glorious text-content \"; container appendChild(content); ``` In the JavaScript file, first we get a reference to the container div that already exists in our HTML Then we create a new div and store it in the variable content We add a class and some text to the content div and finally append that div to containerAfter the JavaScript code is run, our DOM tree will look like this:\n```html\nTHE TITLE OF YOUR WEBPAGE\nThis is the glorious text-content ```\nKeep in mind that the JavaScript does not alter your HTML, but the DOM - your HTML file will look the same, but the JavaScript changes what the browser renders Your JavaScript, for the most part, is run whenever the JS file is run or when the script tag is encountered in the HTML If you are including your JavaScript at the top of your file, many of these DOM manipulation methods will not work because the JS code is being run *before* the nodes are created in the DOM The simplest way to fix this is to include your JavaScript at the bottom of your HTML file so that it gets run after the DOM nodes are parsed and created Alternatively, you can link the JavaScript file in the `` of your HTML document Use the `\n```\nFind out more about the [`defer` attribute for script tags](https://javascript info/script-async-defer#defer) Exercise\nCopy the example above into files on your own computer To make it work, you'll need to supply the rest of the HTML skeleton and either link your JavaScript file or put the JavaScript into a script tag on the page Make sure everything is working before moving on Add the following elements to the container using ONLY JavaScript and the DOM methods shown above:\na <p> with red text that says \"Hey I'm red \"\nan <h3> with blue text that says \"I'm a blue h3 \"\na <div> with a black border and pink background color with the following elements inside of it:\nanother <h1> that says \"I'm in a div\"\na <p> that says \"ME TOO \"\nHint for this one: after creating the <div> with createElement, append the <h1> and <p> to it before adding it to the container",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "30e0559e6d6221cc5c28249ba760dd65",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "with red text that says \"Hey I'm red \" an <h3> with blue text that says \"I'm a blue h3 \" a <div> with a black border and pink background color with the following elements inside of it: another <h1> that says \"I'm in a div\" a <p> that says \"ME TOO \" Hint for this one: after creating the <div> with createElement, append the <h1> and <p> to it before adding it to the containerEvents\nNow that we have a handle on manipulating the DOM with JavaScript, the next step is learning how to make that happen dynamically or on demand Events are how you make that magic happen on your pages Events are actions that occur on your webpage, such as mouse-clicks or key-presses Using JavaScript, we can make our webpage listen to and react to these events There are three primary ways to go about this:\nYou can specify function attributes directly on your HTML elements You can set properties in the form of on<eventType>, such as onclick or onmousedown, on the DOM nodes in your JavaScript You can attach event listeners to the DOM nodes in your JavaScript Event listeners are definitely the preferred method, but you will regularly see the others in use, so we're going to cover all three We're going to create three buttons that all alert \"Hello World\" when clicked Try them all out using your own HTML file or using something like CodePen Method 1\nhtml\n<button onclick=\"alert('Hello World')\">Click Me</button>\nThis solution is less than ideal because we're cluttering our HTML with JavaScript Also, we can only set one \"onclick\" property per DOM element, so we're unable to run multiple separate functions in response to a click event using this method Method 2\n```html\nClick Me\n```\njavascript\n// the JavaScript file\nconst btn = document querySelector(\"#btn\");\nbtn onclick = () => alert(\"Hello World\");\nIf you need to review the arrow syntax `() =>`, check this [article about arrow functions](http://javascript info/arrow-functions-basics) This is a little better We've moved the JS out of the HTML and into a JS file, but we still have the problem that a DOM element can only have one \"onclick\" property Method 3\n```html\nClick Me Too\n```\njavascript\n// the JavaScript file\nconst btn = document querySelector(\"#btn\");\nbtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "79d343d6da1e3830b569bb6a88c88bb5",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "btn onclick = () => alert(\"Hello World\"); If you need to review the arrow syntax `() =>`, check this [article about arrow functions](http://javascript info/arrow-functions-basics) This is a little better We've moved the JS out of the HTML and into a JS file, but we still have the problem that a DOM element can only have one \"onclick\" property Method 3 ```html Click Me Too ``` javascript // the JavaScript file const btn = document querySelector(\"#btn\"); btnaddEventListener(\"click\", () => {\nalert(\"Hello World\");\n});\nNow, we maintain separation of concerns, and we also allow multiple event listeners if the need arises Method 3 is much more flexible and powerful, though it is a bit more complex to set up Note that all three of these methods can be used with named functions like so:\n```html\nCLICK ME BABY\n```\njavascript\n// the JavaScript file\n// METHOD 1\nfunction alertFunction() {\nalert(\"YAY YOU DID IT \");\n}\n```html\nCLICK ME BABY\n```\n```javascript\n// the JavaScript file\n// METHODS 2 & 3\nfunction alertFunction() {\nalert(\"YAY YOU DID IT \");\n}\nconst btn = document querySelector(\"#btn\");\n// METHOD 2\nbtn onclick = alertFunction;\n// METHOD 3\nbtn addEventListener(\"click\", alertFunction);\n```\nUsing named functions can clean up your code considerably, and is a really good idea if the function is something that you are going to want to do in multiple places With all three methods, we can access more information about the event by passing a parameter to the function that we are calling Try this out on your own machine:\njavascript\nbtn addEventListener(\"click\", function (e) {\nconsole log(e);\n});\nWhen we pass in `alertFunction` or `function (e) { }` as an argument to `addEventListener`, we call this a `callback` A callback is simply a function that is passed into another function as an argument The e parameter in that callback function contains an object that references the event itself Within that object you have access to many useful properties and methods (functions that live inside an object) such as which mouse button or key was pressed, or information about the event's target - the DOM node that was clicked There's nothing magical about e as a name or where it comes from JavaScript knows the parameter is an event because an event listener callback takes an Event object by definition",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "59e02d95b3441123b27efacc6c176aea",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "that references the event itself Within that object you have access to many useful properties and methods (functions that live inside an object) such as which mouse button or key was pressed, or information about the event's target - the DOM node that was clicked There's nothing magical about e as a name or where it comes from JavaScript knows the parameter is an event because an event listener callback takes an Event object by definitionWhen the callback is run, the event handler passes in its own reference to the event You can read more about the event objects on MDN's introduction to events Try this:\njavascript\nbtn addEventListener(\"click\", function (e) {\nconsole log(e target);\n});\nand now this:\njavascript\nbtn addEventListener(\"click\", function (e) {\ne target style background = \"blue\";\n});\nPretty cool, eh Attaching listeners to groups of nodes\nThis might seem like a lot of code if you're attaching lots of similar event listeners to many elements There are a few ways to go about doing that more efficiently We learned above that we can get a NodeList of all of the items matching a specific selector with querySelectorAll('selector') In order to add a listener to each of them, we need to iterate through the whole list, like so:\n```html\nClick Me\nClick Me\nClick Me\n```\n```javascript\n// buttons is a node list It looks and acts much like an array const buttons = document querySelectorAll(\"button\");\n// we use the forEach method to iterate through each button\nbuttons forEach((button) => {\n// and for each one we add a 'click' listener\nbutton addEventListener(\"click\", () => {\nalert(button id);\n});\n});\n```\nThis is just the tip of the iceberg when it comes to DOM manipulation and event handling, but it's enough to get you started with some exercises In our examples so far, we have been using the 'click' event exclusively, but there are many more available to you Some useful events include:\nclick\ndblclick\nkeydown\nkeyup\nYou can find a more complete list with explanations of each event on W3Schools JavaScript Event Reference page Assignment\nManipulating web pages is the primary benefit of the JavaScript language These techniques are things that you are likely to be messing with *every day* as a front-end developer, so let's practice 1 Complete [MDN's Active Learning sections on DOM manipulation](https://developer mozilla",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "147caccd7ca8cc5e9816a8ca8d9b860a",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "there are many more available to you Some useful events include: click dblclick keydown keyup You can find a more complete list with explanations of each event on W3Schools JavaScript Event Reference page Assignment Manipulating web pages is the primary benefit of the JavaScript language These techniques are things that you are likely to be messing with *every day* as a front-end developer, so let's practice 1 Complete [MDN's Active Learning sections on DOM manipulation](https://developer mozillaorg/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents#active_learning_basic_dom_manipulation) to test your skills 1 Read the following sections from JavaScript Tutorial's series on the DOM to get a broader idea of how events can be used in your pages Note that some of the methods like `getElementById` are older and see less use today As you read, remember that the general ideas can be applied to any event, not only the ones used in examples - but information specific to a certain event type can always be found by checking documentation Remember that the goal here isn't to deeply understand these concepts and be able to immediately apply them Instead, you should be building awareness of the various tools at your disposal related to events - [JavaScript events](https://www javascripttutorial net/javascript-dom/javascript-events/)\n- [Page load events](https://www javascripttutorial net/javascript-dom/javascript-page-load-events/)\n- [Mouse events](https://www javascripttutorial net/javascript-dom/javascript-mouse-events/)\n- [Keyboard events](https://www javascripttutorial net/javascript-dom/javascript-keyboard-events/)\n- [Event delegation](https://www javascripttutorial net/javascript-dom/javascript-event-delegation/)\n- [The dispatchEvent method](https://www javascripttutorial net/javascript-dom/javascript-dispatchevent/)\n- [Custom events](https://www javascripttutorial net/javascript-dom/javascript-custom-events/)\nKnowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the DOM How do you target the nodes you want to work with How do you create an element in the DOM How do you add an element to the DOM How do you remove an element from the DOM How can you alter an element in the DOM When adding text to a DOM element, should you use textContent or innerHTML Why",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "decfe2b8edf8a3d298a24367b9d9e1ba",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
    "source_type": "git_repo",
    "title": "THE TITLE OF YOUR WEBPAGE",
    "content": "mind you are not expected to memorize or master this knowledge What is the DOM How do you target the nodes you want to work with How do you create an element in the DOM How do you add an element to the DOM How do you remove an element from the DOM How can you alter an element in the DOM When adding text to a DOM element, should you use textContent or innerHTML WhyWhere should you include your JavaScript tag in your HTML file when working with DOM nodes How do \"events\" and \"listeners\" work What are three ways to use events in your code Why are event listeners the preferred way to handle events What are the benefits of using named functions in your listeners How do you attach listeners to groups of nodes What is the difference between the return values of querySelector and querySelectorAll What does a \"NodeList\" contain Explain the difference between \"capture\" and \"bubbling\" Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Eloquent JS - DOM\nEloquent JS - Handling Events\nPlain JavaScript is a reference of JavaScript code snippets and explanations involving the DOM, as well as other aspects of JS If you've already learned jQuery, it will help you figure out how to do things without it This W3Schools article offers easy-to-understand lessons on the DOM JS DOM Crash Course is an extensive and well explained 4 part video series on the DOM by Traversy Media Understanding The Dom is an aptly named article-based tutorial series by DigitalOcean Introduction to events by MDN covers the same topics you learned in this lesson on events Wes Bos's Drumkit JavaScript30 program reinforces the content covered in the assignment In the video you will notice that a deprecated keycode keyboard event is used, replace it with the recommended code keyboard event and replace the data-key tags accordingly Event Capture, Propagation and Bubbling video from Wes Bos's JavaScript30 program Understanding Callbacks in JavaScript for a more in-depth understanding of callbacks",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22959,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\DOM_manipulation_and_events.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "9e43bb5701c6a631940ac0ba1a0f4e4a",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\javascript_developer_tools.md",
    "source_type": "git_repo",
    "title": "javascript_developer_tools",
    "content": "Introduction\nKnowing how to use the Developer Tools inside your browser is an important skill for any web developer The Developer Tools are useful for running JavaScript code, editing HTML and CSS styles without having to refresh the page, and viewing performance data They also save you lots of time Getting started couldn't be any easier You should already be familiar with using them for debugging and working on HTML and CSS, so let's take a look at how they can benefit us when writing JavaScript Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Change screen size of a website with developer tools View and change the DOM Debug JavaScript Use breakpoints View and edit HTML in the Elements tab View the Resources Panel to check the scripts running on a website Add CSS Pseudostate to a Class View CSS Properties in Alphabetical Order View and edit the Box Model of any Element in Chrome DevTools View a page in print mode Enable or Disable CSS Classes Simulate media queries in Device Mode Opening DevTools\nThere are three ways to open the Chrome DevTools menu:\nFrom the Chrome Menu > More Tools > Developer Tools\nRight-click anywhere on a webpage and select Inspect\nUse the keyboard shortcut F12 or Ctrl + Shift + C (Mac: Opt + Cmd + C)\nAssignment\nGoogle has updated some of the required sections in the below tutorials and some elements have changed or no longer exist, but you can still follow along using the same functionality and tools that they cover For example, you may be asked to inspect a button that is no longer on the page—you can still follow along and inspect existing elements without issue 1 Head to the [Chrome DevTools Documentation](https://developer chrome com/docs/devtools/) by Google The following subsections cover what you'll be using the Developer Tools for 95% of the time Feel free to skip the elements you are already familiar with, and only read these:\n- CSS\n1 [View and change CSS](https://developer chrome com/docs/devtools/css/)\n1 [CSS features reference](https://developer chrome com/docs/devtools/css/reference/)\n- [Get Started With Viewing And Changing The DOM](https://developer chrome com/docs/devtools/dom/)\n- Mobile Simulation\n1 [Simulate mobile devices with Device Mode](https://developer chrome com/docs/devtools/device-mode/)\n- JavaScript\n1 [Debug JavaScript](https://developer chrome",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4103,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\javascript_developer_tools.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d6a52eba3f838b67080877fd70c45af6",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\javascript_developer_tools.md",
    "source_type": "git_repo",
    "title": "javascript_developer_tools",
    "content": "Google The following subsections cover what you'll be using the Developer Tools for 95% of the time Feel free to skip the elements you are already familiar with, and only read these: - CSS 1 [View and change CSS](https://developer chrome com/docs/devtools/css/) 1 [CSS features reference](https://developer chrome com/docs/devtools/css/reference/) - [Get Started With Viewing And Changing The DOM](https://developer chrome com/docs/devtools/dom/) - Mobile Simulation 1 [Simulate mobile devices with Device Mode](https://developer chrome com/docs/devtools/device-mode/) - JavaScript 1 [Debug JavaScript](https://developer chromecom/docs/devtools/javascript/) - Warning: In point 4 of step 3 of the tutorial, devtools will pause on the second line (`if (inputsAreEmpty()) {`) rather than at the declaration of the function Don’t worry, this is expected 1 [Pause your code with breakpoints](https://developer chrome com/docs/devtools/javascript/breakpoints/)\n1 Go through the [Chrome DevTools console overview](https://developer chrome com/docs/devtools/console/) to familiarize yourself with the console and its usage Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you open developer tools How do you change screen size of a website using developer tools What is a breakpoint How do you set a breakpoint Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Learn 14 tips and tricks in this JavaScript 30 Video by Wes Bos",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4103,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\javascript_developer_tools.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b540cb23743191072675c0d18b13de89",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\object_basics.md",
    "source_type": "git_repo",
    "title": "object_basics",
    "content": "Introduction\nCongratulations on making it to one of the last lessons in Foundations By this point, you have learned many of the fundamentals of JavaScript In this lesson, you will learn about Objects - a collection of key-value pairs - as well as some more powerful and commonly used array methods Before you know it, you'll have a better understanding of how powerful objects and arrays are and how both can be an indispensable part of your JavaScript tool kit Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Creating objects Accessing object properties Using multiple object operators Understanding the differences between object and primitive data types Objects\nObjects are a very important part of the JavaScript language, and while for the most part you can accomplish simple and even intermediate tasks without worrying about them, any real project that you're going to attempt is going to feature Objects The uses of Objects in JavaScript can get deep relatively quickly, so for the moment we're only going to cover the basics There'll be an in-depth dive later This JavaScript info article on objects is the best place to get started The MDN tutorial on objects isn't bad either, so check it out if you need another take on the subject Differences between objects and primitives\nEarlier in the curriculum you've learned about primitive data types Now that you've seen the object data type, which includes but is not limited to, objects ({key: value}), arrays, and functions The main difference between the two is that primitives can contain only a single thing (string, number, etc) Objects data types are used to store a collection of data and more complex entities Besides the formal differences, there are also some technical differences which affect how we use each data type When you define a primitive variable, it will contain a copy of the information provided to it:\n```javascript\nlet data = 42;\n// dataCopy will store a copy of what data contains, so a copy of 42\nlet dataCopy = data;\n// which means that making changes to dataCopy won't affect data\ndataCopy = 43;\nconsole log(data); // 42\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7153,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\object_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b1088deea0207b6d6b119732eebc9015",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\object_basics.md",
    "source_type": "git_repo",
    "title": "object_basics",
    "content": "formal differences, there are also some technical differences which affect how we use each data type When you define a primitive variable, it will contain a copy of the information provided to it: ```javascript let data = 42; // dataCopy will store a copy of what data contains, so a copy of 42 let dataCopy = data; // which means that making changes to dataCopy won't affect data dataCopy = 43; console log(data); // 42 consolelog(dataCopy); // 43\n```\nOn the other hand, when you define an object variable, it will contain a reference to the object provided to it:\n```javascript\n// obj contains a reference to the object we defined on the right side\nconst obj = { data: 42 };\n// objCopy will contain a reference to the object referenced by obj\nconst objCopy = obj;\n// making changes to objCopy will make changes to the object that it refers to\nobjCopy data = 43;\nconsole log(obj); // { data: 43 }\nconsole log(objCopy); // { data: 43 }\n```\nThis behavior isn't new to you In your last project, you made changes to the cells in the Etch-A-Sketch grid by using references Let's take this code snippet as an example:\njavascript\nconst element = document querySelector(\"#container\");\nelement style backgroundColor = \"red\";\nWe're mutating the variable we declared (element), yet the changes affect the corresponding node in the DOM Why does it happen That's because the node we have in our code is a reference to the same node that our DOM uses If that wasn't a reference, but a copy like primitive data types behave, our changes would have no effect Because the changes would be made to the local copy we have This behavior is also something to consider when we pass arguments to a function Let's take the following functions for example:\n```javascript\nfunction increaseCounterObject(objectCounter) {\nobjectCounter counter += 1;\n}\nfunction increaseCounterPrimitive(primitiveCounter) {\nprimitiveCounter += 1;\n}\nconst object = { counter: 0 };\nlet primitive = 0;\nincreaseCounterObject(object);\nincreaseCounterPrimitive(primitive);\n```\nTake a moment and guess what will happen to object and what will happen to primitive after we make the function calls If you answered that the object counter would increase by 1, and the primitive counter wouldn't change, you're correct",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7153,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\object_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9ea38ea2a6398886cbd7884cdfe1e794",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\object_basics.md",
    "source_type": "git_repo",
    "title": "object_basics",
    "content": "the following functions for example: ```javascript function increaseCounterObject(objectCounter) { objectCounter counter += 1; } function increaseCounterPrimitive(primitiveCounter) { primitiveCounter += 1; } const object = { counter: 0 }; let primitive = 0; increaseCounterObject(object); increaseCounterPrimitive(primitive); ``` Take a moment and guess what will happen to object and what will happen to primitive after we make the function calls If you answered that the object counter would increase by 1, and the primitive counter wouldn't change, you're correctRemember that the parameter objectCounter contains a reference to the same object as the object variable we gave it, while primitiveCounter only contains a copy of the primitive value #### Reassigning object data type variables\nWhile mutating the object we have a reference to affect all other variables that reference it, reassigning a variable does not change what the other variables refer to For example:\n```javascript\nlet animal = { species: \"dog\" };\nlet dog = animal;\n// reassigning animal variable with a completely new object\nanimal = { species: \"cat\" };\nconsole log(animal); // { species: \"cat\" }\nconsole log(dog); // { species: \"dog\" }\n```\nAssignment\n1 Now that you've been exposed to objects, go back to the [array methods exercises](https://javascript info/array-methods#tasks) at the end of the JavaScript info array methods article from a few lessons ago Do only the following exercises:\n- `Map to names`\n- `Map to objects`\n- `Sort users by age`\n- `Get average age`\n- `Create keyed object from array`\n1 Go back to the [JavaScript exercises repository](https://github com/TheOdinProject/javascript-exercises) Review each README file prior to completing the following exercises in order:\n- `12_calculator`\n- `13_palindromes`\n- `14_fibonacci`\n- `15_getTheTitles`\n- `16_findTheOldest`\nNote: Solutions for these exercises can be found in the `solution` folder of each exercise If you feel yourself getting overwhelmed or stuck, don't be afraid to go back and review or ask for help in the [TOP Discord server](https://discord com/invite/theodinproject) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7153,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\object_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "03dc18195acc404ad0749a04b71beb83",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\object_basics.md",
    "source_type": "git_repo",
    "title": "object_basics",
    "content": "file prior to completing the following exercises in order: - `12_calculator` - `13_palindromes` - `14_fibonacci` - `15_getTheTitles` - `16_findTheOldest` Note: Solutions for these exercises can be found in the `solution` folder of each exercise If you feel yourself getting overwhelmed or stuck, don't be afraid to go back and review or ask for help in the [TOP Discord server](https://discord com/invite/theodinproject) Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between objects and arrays How do you access object properties How do primitives and object types differ when you assign them to other variables, or pass them into functions Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7153,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\object_basics.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7a8df45c75a3b7ee1ce2037bc199a069",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
    "source_type": "git_repo",
    "title": "loops_and_arrays",
    "content": "Introduction\nOne of the challenges of programming is repetition While some manual repetition is completely fine, sometimes we want to streamline repeated instructions to be more readable Another challenge is dealing with large amounts of data For example, if you want to store the names of all the students in your class, how would you do it You could create a variable for each name, but that would be tedious and inefficient It'll also be hard to manage and update What if you want to change or access the names later Luckily, there are ways to handle these problems In this lesson, you'll learn about loops, which are control structures that allow you to execute a block of code repeatedly You’ll also learn about arrays, which are data structures that can store multiple values in a single variable Arrays are very useful for organizing and manipulating large amounts of data Loops can often be very handy for performing the same operation on each element of an array Finally, you’ll be introduced to test-driven development (TDD), which is the practice of writing tests for your code before you write the code itself Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Using loops Using arrays Using array methods such as map, filter and reduce Getting your hands dirty with TDD exercises Loops\nComputers don't get tired, and they're really, really fast For that reason, they are well suited to solving problems that involve doing calculations multiple times In some cases, a computer will be able to repeat a task thousands or even millions of times in just a few short seconds where it might take a human many hours (obviously, speed here depends on the complexity of the calculation and the speed of the computer itself) To repeat a set of instructions multiple times, we can use a loop Go through the following resources on loops Some of them will contain examples that use arrays, which we will go through in more detail in the next section, but for now it will suffice to know that arrays are just lists of items Read MDN's Looping Code It's a longer one, but make sure you tackle the 'Active Learning' sections at the bottom of the page Once again, same info, slightly different context from JavaScript info's \"Loops: While and For\" Be sure to do the exercises at the end of the page You learn best by doing Arrays\nStrings and numbers may be our building blocks, but as your scripts get more complex, you're going to need a way to deal with large quantities of them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16058,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "baac76835c0429e01c7e577509a69bdb",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
    "source_type": "git_repo",
    "title": "loops_and_arrays",
    "content": "one, but make sure you tackle the 'Active Learning' sections at the bottom of the page Once again, same info, slightly different context from JavaScript info's \"Loops: While and For\" Be sure to do the exercises at the end of the page You learn best by doing Arrays Strings and numbers may be our building blocks, but as your scripts get more complex, you're going to need a way to deal with large quantities of themLuckily, JavaScript has a couple of data types that are used for just that An Array is an ordered collection of items (strings, numbers, or other things) You may recognize that some of the array methods demonstrated in some of the following resources do similar things to loops Sometimes you may need more control via an actual loop but sometimes the appropriate array method does the job just fine and you prefer the way it reads This JavaScript Arrays crash course explains an overview of arrays in JavaScript in about 6 minutes Read through this intro to arrays from JavaScript info You do not need to do the exercises at the end of the page Read through JavaScript info's array method guide for a deeper look at some further array methods in JavaScript Again, you do not need to do the exercises at the end of the page; we will come back to these later Bookmark MDN's Array documentation You do not need to memorize anything here This is where you'll find all built-in array properties and methods and their documentation This will likely be something you regularly revisit as you code and solve problems Some examples of array magic\nBesides being a quick and handy way to store data, arrays also have a set of functions for manipulating that data in very powerful ways Once you get more experience with these functions, you will start to see ways to use them all over the place There are really only a handful of these functions, but as you'll soon see, the possibilities of what you can do with them are near endless As an example of what we mean, let's consider a sumOfTripledEvens function It will:\nTake in an array For every even number, it will triple it Then it will sum all those even numbers Can you think of how you could implement a function like that using pseudocode We need to perform an operation only on the even numbers We need to transform those numbers by multiplying them by 3 Finally, we need to add the result up from the previous transformation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16058,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "21be7f079d882bd8b0bc73cdc7aca2c1",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
    "source_type": "git_repo",
    "title": "loops_and_arrays",
    "content": "mean, let's consider a sumOfTripledEvens function It will: Take in an array For every even number, it will triple it Then it will sum all those even numbers Can you think of how you could implement a function like that using pseudocode We need to perform an operation only on the even numbers We need to transform those numbers by multiplying them by 3 Finally, we need to add the result up from the previous transformationSo using that logic, you may end up implementing something like this:\n```javascript\nfunction sumOfTripledEvens(array) {\nlet sum = 0;\nfor (let i = 0; i < array length; i++) {\n// Step 1: If the element is an even number\nif (array[i] % 2 === 0) {\n// Step 2: Multiply this number by three\nconst tripleEvenNumber = array[i] * 3;\n// Step 3: Add the new number to the total\nsum += tripleEvenNumber;\n}\n}\nreturn sum;\n}\n```\nIn the above code, there are 3 important snippets to consider:\nif (array[i] % 2 === 0): checks if a given number is even const tripleEvenNumber = array[i] * 3: gets triple that number sum += tripleEvenNumber: increments the sum by that number Every single piece solves a crucial problem with our code However, we can do the same thing with some array methods and sometimes, the result is a little easier to read and understand Let's take a moment to see how we might be able to use some The map method\nmap is one such function It expects a callback as an argument, which is a fancy way to say \"I want you to pass another function as an argument to my function\" Let's say we had a function addOne, which takes in num as an argument and outputs that num increased by 1, and an array of numbers, [1, 2, 3, 4, 5] Let's say we'd like to increment all of these numbers by 1 using our addOne function Instead of making a for loop and iterating over the above array, we could use our map array method instead, which automatically iterates over an array for us",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16058,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "86490d9081bfe775fd993cc54c2849cd",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
    "source_type": "git_repo",
    "title": "loops_and_arrays",
    "content": "function\" Let's say we had a function addOne, which takes in num as an argument and outputs that num increased by 1, and an array of numbers, [1, 2, 3, 4, 5] Let's say we'd like to increment all of these numbers by 1 using our addOne function Instead of making a for loop and iterating over the above array, we could use our map array method instead, which automatically iterates over an array for usWe don't need to do any extra work aside from simply passing the function we want to use in:\njavascript\nfunction addOne(num) {\nreturn num + 1;\n}\nconst arr = [1, 2, 3, 4, 5];\nconst mappedArr = arr map(addOne);\nconsole log(mappedArr); // Outputs [2, 3, 4, 5, 6]\nmap returns a new array and does not change the original array javascript\n// The original array has not been changed console log(arr); // Outputs [1, 2, 3, 4, 5]\nUsing map in this way can be more elegant than writing a for loop and iterating over the array But we can do even better Since we're not using addOne anywhere else and it's a simple function, we can define it inline using an arrow function, right inside of map like so:\njavascript\nconst arr = [1, 2, 3, 4, 5];\nconst mappedArr = arr map((num) => num + 1);\nconsole log(mappedArr); // Outputs [2, 3, 4, 5, 6]\nThe filter method\nfilter is somewhat similar to map It still iterates over the array and applies the callback function on every item However, instead of transforming the values in the array, it returns a new array where each item is only included if the callback function returns true for it Let's say we had a function, isOdd that returns either true if a number is odd or false if it isn't The filter method expects the callback to return either true or false If it returns true, the value is included in the output Otherwise, it isn't Consider the array from our previous example, [1, 2, 3, 4, 5] If we wanted to remove all even numbers from this array, we could use",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16058,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "75c33bedf234dd5cc7fec18d7fa5534c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
    "source_type": "git_repo",
    "title": "loops_and_arrays",
    "content": "true for it Let's say we had a function, isOdd that returns either true if a number is odd or false if it isn't The filter method expects the callback to return either true or false If it returns true, the value is included in the output Otherwise, it isn't Consider the array from our previous example, [1, 2, 3, 4, 5] If we wanted to remove all even numbers from this array, we could usefilter() like this:\njavascript\nfunction isOdd(num) {\nreturn num % 2 == 0;\n}\nconst arr = [1, 2, 3, 4, 5];\nconst oddNums = arr filter(isOdd);\nconsole log(oddNums); // Outputs [1, 3, 5];\nconsole log(arr); // Outputs [1, 2, 3, 4, 5], original array is not affected\nfilter will iterate through arr and pass every value into the isOdd callback function, one at a time isOdd will return true when the value is odd, which means this value is included in the output If it's an even number, isOdd will return false and not include it in the final output The reduce method\nFinally, let's say that we wanted to multiply all of the numbers in our arr together like this: 1 * 2 * 3 * 4 * 5 First, we'd have to declare a variable total and initialize it to 1 Then, we'd iterate through the array with a for loop and multiply the total by the current number But we don't actually need to do all of that; we have our reduce method that will do the job for us Just like map() and filter(), it expects a callback function However, there are two key differences with this array method:\nThe callback function takes two arguments instead of one The first argument is the accumulator, which is the current value of the result at that point in the loop The first time through, this value will either be set to the initialValue (described in the next bullet point), or the first element in the array if no initialValue is provided The second argument for the callback is the current value, which is the item currently being iterated on reduce itself also takes in an initialValue as an optional second argument (after the callback), which helps when we don't want our initial value to be the first element in the array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16058,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "7d3a3fdb325ab146646196de838ef403",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
    "source_type": "git_repo",
    "title": "loops_and_arrays",
    "content": "value will either be set to the initialValue (described in the next bullet point), or the first element in the array if no initialValue is provided The second argument for the callback is the current value, which is the item currently being iterated on reduce itself also takes in an initialValue as an optional second argument (after the callback), which helps when we don't want our initial value to be the first element in the arrayFor instance, if we wanted to sum all numbers in an array, we could call reduce without an initialValue, but if we wanted to sum all numbers in an array and add 10, we could use 10 as our initialValue javascript\nconst arr = [1, 2, 3, 4, 5];\nconst productOfAllNums = arr reduce((total, currentItem) => {\nreturn total * currentItem;\n}, 1);\nconsole log(productOfAllNums); // Outputs 120;\nconsole log(arr); // Outputs [1, 2, 3, 4, 5]\nIn the above function, we:\nPass in a callback function, which is (total, currentItem) => total * currentItem Initialize total to 1 in the second argument So what reduce() will do is go through every element in arr and apply the callback function to it It updates total without actually changing the array itself After it’s done, it returns total Summary\nYou've learnt about three powerful array methods which are map, filter and reduce They can allow us to write potentially more readable code which in turn may be less prone to bugs For a quick recap of these array methods, consider this picture which should visually explain them in terms of sandwiches:\nLet's do some quick practice before your assignment Rewrite the sumOfTripledEvens(array) function using these three methods Once you are finished and you've tested that your function works correctly, check out the solution below Solution\n```javascript\nfunction sumOfTripledEvens(array) {\nreturn array filter((num) => num % 2 === 0) map((num) => num * 3) reduce((acc, curr) => acc + curr);\n}\n```\nTest-driven development\nTest-driven development (TDD) is a phrase you often hear in the dev world It refers to the practice of writing automated tests that describe how your code should work before you actually write the code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16058,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "654d8cc412185930bb47e4743abb5ffd",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
    "source_type": "git_repo",
    "title": "loops_and_arrays",
    "content": "you've tested that your function works correctly, check out the solution below Solution ```javascript function sumOfTripledEvens(array) { return array filter((num) => num % 2 === 0) map((num) => num * 3) reduce((acc, curr) => acc + curr); } ``` Test-driven development Test-driven development (TDD) is a phrase you often hear in the dev world It refers to the practice of writing automated tests that describe how your code should work before you actually write the codeFor example, if you want to write a function that adds a couple of numbers, you would first write a test that uses the function and supplies the expected output The test will fail before you write your code, and you should be able to know that your code works correctly when the test passes In many ways, TDD is much more productive than writing code without tests If we didn't have the test for the adding function above, we would have to run the code ourselves over and over, plugging in different numbers until we were sure that it was working not a big deal for a basic add(2, 2), but imagine having to do that for more complicated functions, like checking whether or not someone has won a game of tic tac toe: (game_win([\"o\", null,\"x\",null,\"x\",null,\"x\", \"o\", \"o\"])) If you didn't do TDD, then you might actually have to play multiple games against yourself just to test if the function was working correctly We will teach you the art of actually writing these tests later in the course For now, you will continue to work on the JavaScript exercises from before Assignment\n1 Go to the [array methods exercises](https://javascript info/array-methods#tasks) at the end of the JavaScript info array methods article and do the following exercises only:\n- `Translate border-left-width to borderLeftWidth`\n- `Filter range`\n- `Filter range \"in place\"`\n- `Sort in decreasing order`\n- `Copy and sort array`\n- `Shuffle an array`\n- `Filter unique array members`\n1 Fork and clone Wes Bos' [JavaScript30 repository](https://github com/wesbos/JavaScript30) To follow along with these two video exercises, you'll want to open the `index-START html` file - [04 - Array Cardio Day 1](https://www youtube com/watch",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16058,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "358b938010053b98787d7e2e35ffc739",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
    "source_type": "git_repo",
    "title": "loops_and_arrays",
    "content": "info array methods article and do the following exercises only: - `Translate border-left-width to borderLeftWidth` - `Filter range` - `Filter range \"in place\"` - `Sort in decreasing order` - `Copy and sort array` - `Shuffle an array` - `Filter unique array members` 1 Fork and clone Wes Bos' [JavaScript30 repository](https://github com/wesbos/JavaScript30) To follow along with these two video exercises, you'll want to open the `index-START html` file - [04 - Array Cardio Day 1](https://www youtube com/watchv=HB1ZC7czKRs)\n- [07 - Array Cardio Day 2](https://www youtube com/watch v=QNmRfyNg1lw)\n1 Go back to the [JavaScript exercises repository](https://github com/TheOdinProject/javascript-exercises) that we introduced in the [Data Types and Conditionals](https://www theodinproject com/lessons/foundations-data-types-and-conditionals) assignment Review each README file prior to completing the following exercises in order:\n- `06_repeatString`\n- `07_reverseString`\n- `08_removeFromArray`\n- `09_sumAll`\n- `10_leapYears`\n- `11_tempConversion`\nNote: Solutions for these exercises can be found in the `solution` folder of each exercise Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are loops useful for What is the break statement What is the continue statement What is an array What are arrays useful for How do you access or change an array element What are some useful array methods What is the advantage of writing automated tests Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental It looks like this lesson doesn't have any additional resources yet Help us expand this section by contributing to our curriculum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16058,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\loops_and_arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "638c60187484902ad14a96c6b8ad92a7",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
    "source_type": "git_repo",
    "title": "problem_solving",
    "content": "Introduction\nBefore we start digging into some pretty nifty JavaScript, we need to begin talking about problem solving: the most important skill a developer needs Problem solving is the core thing software developers do The programming languages and tools they use are secondary to this fundamental skill From his book, \"Think Like a Programmer\", V Anton Spraul defines problem solving in programming as:\nProblem solving is writing an original program that performs a particular set of tasks and meets all stated constraints The set of tasks can range from solving small coding exercises all the way up to building a social network site like Facebook or a search engine like Google Each problem has its own set of constraints, for example, high performance and scalability may not matter too much in a coding exercise but it will be vital in apps like Google that need to service billions of search queries each day New programmers often find problem solving the hardest skill to build It's not uncommon for budding programmers to breeze through learning syntax and programming concepts, yet when trying to code something on their own, they find themselves staring blankly at their text editor not knowing where to start The best way to improve your problem solving ability is by building experience by making lots and lots of programs The more practice you have the better you'll be prepared to solve real world problems In this lesson we will walk through a few techniques that can be used to help with the problem solving process Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Explain the three steps in the problem solving process Explain what pseudocode is and be able to use it to solve problems Be able to break a problem down into subproblems Understand the problem\nThe first step to solving a problem is understanding exactly what the problem is If you don't understand the problem, you won't know when you've successfully solved it and may waste a lot of time on a wrong solution To gain clarity and understanding of the problem, write it down on paper, reword it in plain English until it makes sense to you, and draw diagrams if that helps When you can explain the problem to someone else in plain English, you understand it Plan\nNow that you know what you're aiming to solve, don't jump into coding just yet It's time to plan out how you're going to solve it first Some of the questions you should answer at this stage of the process:\nDoes your program have a user interface What will it look like What functionality will the interface have Sketch this out on paper",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14578,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "79bc7ae68212d44d475d4d939c34ebbc",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
    "source_type": "git_repo",
    "title": "problem_solving",
    "content": "explain the problem to someone else in plain English, you understand it Plan Now that you know what you're aiming to solve, don't jump into coding just yet It's time to plan out how you're going to solve it first Some of the questions you should answer at this stage of the process: Does your program have a user interface What will it look like What functionality will the interface have Sketch this out on paperWhat inputs will your program have Will the user enter data or will you get input from somewhere else What's the desired output Given your inputs, what are the steps necessary to return the desired output The last question is where you will write out an algorithm to solve the problem You can think of an algorithm as a recipe for solving a particular problem It defines the steps that need to be taken by the computer to solve a problem in pseudocode Pseudocode\nPseudocode is writing out the logic for your program in natural language instead of code It helps you slow down and think through the steps your program will have to go through to solve the problem Here's an example of what the pseudocode for a program that prints all numbers up to an inputted number might look like:\ntext\nWhen the user inputs a number\nInitialize a counter variable and set its value to zero\nWhile counter is smaller than user inputted number increment the counter by one\nPrint the value of the counter variable\nThis is a basic program to demonstrate how pseudocode looks There will be more examples of pseudocode included in the assignments Divide and conquer\nFrom your planning, you should have identified some subproblems of the big problem you’re solving Each of the steps in the algorithm we wrote out in the last section are subproblems Pick the smallest or simplest one and start there with coding It's important to remember that you might not know all the steps that you might need up front, so your algorithm may be incomplete -— this is fine Getting started with and solving one of the subproblems you have identified in the planning stage often reveals the next subproblem you can work on Or, if you already know the next subproblem, it’s often simpler with the first subproblem solved Many beginners try to solve the big problem in one go Don’t do this If the problem is sufficiently complex, you’ll get yourself tied in knots and make life a lot harder for yourself Decomposing problems into smaller and easier to solve subproblems is a much better approach",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14578,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "4275519d19a03ac2d74cc0818c47e29b",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
    "source_type": "git_repo",
    "title": "problem_solving",
    "content": "the planning stage often reveals the next subproblem you can work on Or, if you already know the next subproblem, it’s often simpler with the first subproblem solved Many beginners try to solve the big problem in one go Don’t do this If the problem is sufficiently complex, you’ll get yourself tied in knots and make life a lot harder for yourself Decomposing problems into smaller and easier to solve subproblems is a much better approachDecomposition is the main way to deal with complexity, making problems easier and more approachable to solve and understand In short, break the big problem down and solve each of the smaller problems until you've solved the big problem Solving Fizz Buzz\nTo demonstrate this workflow in action, let's solve Fizz Buzz\nUnderstanding the problem\nWrite a program that takes a user's input and prints the numbers from one to the number the user entered However, for multiples of three print Fizz instead of the number and for the multiples of five print Buzz For numbers which are multiples of both three and five print FizzBuzz This is the big picture problem we will be solving But we can always make it clearer by rewording it Write a program that allows the user to enter a number, print each number between one and the number the user entered, but for numbers that divide by 3 without a remainder print Fizz instead For numbers that divide by 5 without a remainder print Buzz and finally for numbers that divide by both 3 and 5 without a remainder print FizzBuzz Planning\nDoes your program have an interface What will it look like Our FizzBuzz solution will be a browser console program, so we don't need an interface The only user interaction will be allowing users to enter a number What inputs will your program have Will the user enter data or will you get input from somewhere else The user will enter a number from a prompt (popup box) What's the desired output The desired output is a list of numbers from 1 to the number the user entered But each number that is divisible by 3 will output Fizz, each number that is divisible by 5 will output Buzz and each number that is divisible by both 3 and 5 will output FizzBuzz Writing the pseudocode\nWhat are the steps necessary to return the desired output",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14578,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "6ed06de322946a3ac59e7a5b82033c4f",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
    "source_type": "git_repo",
    "title": "problem_solving",
    "content": "enter a number from a prompt (popup box) What's the desired output The desired output is a list of numbers from 1 to the number the user entered But each number that is divisible by 3 will output Fizz, each number that is divisible by 5 will output Buzz and each number that is divisible by both 3 and 5 will output FizzBuzz Writing the pseudocode What are the steps necessary to return the desired outputHere is an algorithm in pseudocode for this problem:\ntext\nWhen a user inputs a number\nLoop from 1 to the entered number\nIf the current number is divisible by 3 then print \"Fizz\"\nIf the current number is divisible by 5 then print \"Buzz\"\nIf the current number is divisible by 3 and 5 then print \"FizzBuzz\"\nOtherwise print the current number\nDividing and conquering\nAs we can see from the algorithm we developed, the first subproblem we can solve is getting input from the user So let's start there and verify it works by printing the entered number With JavaScript, we'll use the \"prompt\" method javascript\nlet answer = parseInt(prompt(\"Please enter the number you would like to FizzBuzz up to: \"));\nThe above code should create a little popup box that asks the user for a number The input we get back will be stored in our variable answer We wrapped the prompt call in a `parseInt` function so that a number is returned from the user's input With that done, let's move on to the next subproblem: \"Loop from 1 to the entered number\" There are many ways to do this in JavaScript One of the common ways - that you actually see in many other languages like Java, C++, and Ruby - is with the for loop:\n```javascript\nlet answer = parseInt(prompt(\"Please enter the number you would like to FizzBuzz up to: \"));\nfor (let i = 1; i <= answer; i++) {\nconsole log(i);\n}\n```\nIf you haven't seen this before and it looks strange, it's actually straightforward We declare a variable i and assign it 1: the initial value of the variable i in our loop The second clause, i <= answer is our condition We want to loop until i is greater than answer The third clause, i++, tells our loop to increment i by 1 every iteration",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14578,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "70bcf21f72ba0cc4f13a8677ad3a53f1",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
    "source_type": "git_repo",
    "title": "problem_solving",
    "content": "= 1; i <= answer; i++) { console log(i); } ``` If you haven't seen this before and it looks strange, it's actually straightforward We declare a variable i and assign it 1: the initial value of the variable i in our loop The second clause, i <= answer is our condition We want to loop until i is greater than answer The third clause, i++, tells our loop to increment i by 1 every iterationAs a result, if the user inputs 10, this loop would print numbers 1 - 10 to the console Most of the time, programmers find themselves looping from 0 Due to the needs of our program, we're starting from 1\nWith that working, let's move on to the next problem: If the current number is divisible by 3, then print Fizz ```javascript\nlet answer = parseInt(prompt(\"Please enter the number you would like to FizzBuzz up to: \"));\nfor (let i = 1; i <= answer; i++) {\nif (i % 3 === 0) {\nconsole log(\"Fizz\");\n} else {\nconsole log(i);\n}\n}\n```\nWe are using the modulus operator (%) here to divide the current number by three If you recall from a previous lesson, the modulus operator returns the remainder of a division So if a remainder of 0 is returned from the division, it means the current number is divisible by 3 After this change the program will now output this when you run it and the user inputs 10:\nbash\n1\n2\nFizz\n4\n5\nFizz\n7\n8\nFizz\n10\nThe program is starting to take shape The final few subproblems should be easy to solve as the basic structure is in place and they are just different variations of the condition we've already got in place Let's tackle the next one: If the current number is divisible by 5 then print Buzz ```javascript\nlet answer = parseInt(prompt(\"Please enter the number you would like to FizzBuzz up to: \"));\nfor (let i = 1; i <= answer; i++) {\nif (i % 3 === 0) {\nconsole log(\"Fizz\");\n} else if (i % 5 === 0) {\nconsole log(\"Buzz\");\n} else {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14578,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "8340b41f7d105f627e8a4f8b519bb83a",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
    "source_type": "git_repo",
    "title": "problem_solving",
    "content": "different variations of the condition we've already got in place Let's tackle the next one: If the current number is divisible by 5 then print Buzz ```javascript let answer = parseInt(prompt(\"Please enter the number you would like to FizzBuzz up to: \")); for (let i = 1; i <= answer; i++) { if (i % 3 === 0) { console log(\"Fizz\"); } else if (i % 5 === 0) { console log(\"Buzz\"); } else { consolelog(i);\n}\n}\n```\nWhen you run the program now, you should see this output if the user inputs 10:\nbash\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\nWe have one more subproblem to solve to complete the program: If the current number is divisible by 3 and 5 then print FizzBuzz ```javascript\nlet answer = parseInt(prompt(\"Please enter the number you would like to FizzBuzz up to: \"));\nfor (let i = 1; i <= answer; i++) {\nif (i % 3 === 0 && i % 5 === 0) {\nconsole log(\"FizzBuzz\");\n} else if (i % 3 === 0) {\nconsole log(\"Fizz\");\n} else if (i % 5 === 0) {\nconsole log(\"Buzz\");\n} else {\nconsole log(i);\n}\n}\n```\nWe've had to move the conditionals around a little to get it to work The first condition now checks if i is divisible by 3 and 5 instead of checking if i is just divisible by 3 We've had to do this because if we kept it the way it was, it would run the first condition if (i % 3 === 0), so that if i was divisible by 3, it would print Fizz and then move on to the next number in the iteration, even if i was divisible by 5 as well With the condition if (i % 3 === 0 && i % 5 === 0) coming first, we check that i is divisible by both 3 and 5 before moving on to check if it is divisible by 3 or 5 individually in the else if conditions The program is now complete",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14578,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "55c9e4b554b2ce7a6b712d1ff1ff541c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
    "source_type": "git_repo",
    "title": "problem_solving",
    "content": "it would print Fizz and then move on to the next number in the iteration, even if i was divisible by 5 as well With the condition if (i % 3 === 0 && i % 5 === 0) coming first, we check that i is divisible by both 3 and 5 before moving on to check if it is divisible by 3 or 5 individually in the else if conditions The program is now completeIf you run it now you should get this output when the user inputs 20:\nbash\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nAssignment\n1 Read [How to Think Like a Programmer - Lessons in Problem Solving](https://www freecodecamp org/news/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2/) by Richard Reis 1 Watch [How to Begin Thinking Like a Programmer](https://www youtube com/watch v=azcrPFhaY9k) by Coding Tech It's an hour long but packed full of information and definitely worth your time watching 1 Read this [Pseudocode: What It Is and How to Write It](https://www builtin com/data-science/pseudocode) article from Built In Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are the three stages in the problem solving process Why is it important to clearly understand the problem first What can you do to help get a clearer understanding of the problem What are some of the things you should do in the planning stage of the problem solving process What is an algorithm What is pseudocode What are the advantages of breaking a problem down and solving the smaller problems Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read the first chapter in Think Like a Programmer: An Introduction to Creative Problem Solving (not free) This book's examples are in C++, but you will understand everything since the main idea of the book is to teach programmers to better solve problems It's an amazing book and worth every penny It will make you a better programmer Watch this video on repetitive programming techniques",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14578,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "6adbcec5cd6b0d6a4468a59bd4d8d42b",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
    "source_type": "git_repo",
    "title": "problem_solving",
    "content": "links to related content It isn't required, so consider it supplemental Read the first chapter in Think Like a Programmer: An Introduction to Creative Problem Solving (not free) This book's examples are in C++, but you will understand everything since the main idea of the book is to teach programmers to better solve problems It's an amazing book and worth every penny It will make you a better programmer Watch this video on repetitive programming techniquesWatch Jonathan Blow on solving hard problems where he gives sage advice on how to approach problem solving in software projects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14578,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\problem_solving.md",
      "source_type": "git_repo"
    },
    "token_count": 106,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "75344e4ef2e86a361ab4bb9a691661b4",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_calculator.md",
    "source_type": "git_repo",
    "title": "project_calculator",
    "content": "Introduction\nYou made it By now you should have a really firm grasp on the fundamentals of JavaScript Of course there's plenty more to learn, but you should be able to create quite a bit at this point Our final project is going to combine everything you've learned so far: you're going to make an on-screen calculator using JavaScript, HTML, and CSS As usual with these things, there are elements of this project that are not going to be trivial for you, but if you've been following the course so far, you definitely have everything you need to finish it We're going to walk you through the various steps you can take, but again, how you actually implement them is up to you #### Warning about eval() and new Function()\nBefore you get started with the project, we need to cover a word of warning As you look into how to evaluate complex mathematical statements in JavaScript, you will likely come across the tantalizing [`eval()`](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) function However, this function can be very dangerous and MDN does a good job documenting why you should [never use eval](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_direct_eval ) You'll need to build your own functions to evaluate expressions as part of this project On the same note, when researching how to calculate expressions, you may encounter solutions that suggest that you return a `new Function()` that evaluates a string Similarly to `eval()`, this should not be used [due to potential pitfalls of evaluating insecure data](https://stackoverflow com/questions/4599857/are-eval-and-new-function-the-same-thing) Besides, where's the fun in solutions that do all the work for you Let's get to it Assignment\nDon't forget to commit early & often You can reference the [Commit Messages lesson](https://www theodinproject com/paths/foundations/courses/foundations/lessons/commit-messages) here Here are some use cases (expectations about your project):\n1 Your calculator is going to contain functions for all of the basic math operators you typically find on calculators, so start by creating functions for the following items and testing them in your browser's console:\n- add\n- subtract\n- multiply\n- divide\n1 A calculator operation will consist of a number, an operator, and another number For example, 3 + 5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6521,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9a898b302b136fce3b85eb8a91154d34",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_calculator.md",
    "source_type": "git_repo",
    "title": "project_calculator",
    "content": "lesson](https://www theodinproject com/paths/foundations/courses/foundations/lessons/commit-messages) here Here are some use cases (expectations about your project): 1 Your calculator is going to contain functions for all of the basic math operators you typically find on calculators, so start by creating functions for the following items and testing them in your browser's console: - add - subtract - multiply - divide 1 A calculator operation will consist of a number, an operator, and another number For example, 3 + 5Create three variables, one for each part of the operation You'll use these variables to update your display later 1 Create a new function `operate` that takes an operator and two numbers and then calls one of the above functions on the numbers 1 Create a basic HTML calculator with buttons for each digit and operator (including `=`) - Don't worry about making them functional just yet - There should also be a display for the calculator Go ahead and fill it with some dummy numbers so it looks correct - Add a \"clear\" button 1 Create the functions that populate the display when you click the digit buttons You should store the content of the display (the number) in a variable for use in the next step 1 Make the calculator work You'll need to store the first and second numbers input by the user and then `operate()` on them when the user presses the `=` button, according to the operator that was selected between the numbers - You should already have the code that can populate the display, so once `operate` has been called, update the display with the result of the operation - This is the hardest part of the project You need to figure out how to store all the values and call the `operate` function with them Don't feel bad if it takes you a while to figure out the logic 1 Gotchas: watch out for and fix these bugs if they show up in your code:\n- **Your calculator should not evaluate more than a single pair of numbers at a time ** For example, this is how your calculator should function:\n1 Enter a number (`12`) 1 Enter an operator (`+`) 1 Enter a second number (`7`) 1 Enter a second operator (`-`) At this point, it should evaluate the initial pair of numbers (`12 + 7`), then display the result (`19`) 1 Enter another number (`1`) 1 Enter another operator or equals sign (`=`)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6521,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e3582ec3d5ace32ea0c15fc0fdfad457",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_calculator.md",
    "source_type": "git_repo",
    "title": "project_calculator",
    "content": "not evaluate more than a single pair of numbers at a time ** For example, this is how your calculator should function: 1 Enter a number (`12`) 1 Enter an operator (`+`) 1 Enter a second number (`7`) 1 Enter a second operator (`-`) At this point, it should evaluate the initial pair of numbers (`12 + 7`), then display the result (`19`) 1 Enter another number (`1`) 1 Enter another operator or equals sign (`=`)At this point, it should use the previous result (`19`) as the first number, the operator (`-`), and the new number (`1`) to calculate the new equation `19 - 1` You should see the result (`18`) on the display - To see what this looks like in action, feel free to input the equation we just explained `12 + 7 - 1 =` into this [online calculator](https://www calculatorsoup com/calculators/math/basic php) - You should round answers with long decimals so that they don't overflow the display - Pressing `=` before entering all of the numbers or an operator could cause problems - Pressing \"clear\" should wipe out any existing data Make sure the user is really starting fresh after pressing \"clear\" - Display a snarky error message if the user tries to divide by 0 and don't let it crash your calculator - Make sure that your calculator only runs an operation when supplied with two numbers and an operator by the user Example: you enter a number (`2`), followed by an operator button (`+`) You press the operator button (`+`) a second consecutive time Your calculator should not evaluate this as (`2 + 2`) and should not display the result (`4`) If consecutive operator buttons are pressed, your calculator should not run any evaluations, it should only take the last operator entered to be used for the next operation - When a result is displayed, pressing a new digit should clear the result and start a new calculation instead of appending the digit to the existing result Check whether this is the case on your calculator #### Extra credit\n- Users can get floating point numbers if they do the math required to get one, but they can't type them in yet Add a ` ` button and let users input decimals Make sure you don't let them type more than one though, like: `12 3 56 5` Disable the `",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6521,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "1aeea8a75921694c8761f6f1cd719348",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_calculator.md",
    "source_type": "git_repo",
    "title": "project_calculator",
    "content": "a new calculation instead of appending the digit to the existing result Check whether this is the case on your calculator #### Extra credit - Users can get floating point numbers if they do the math required to get one, but they can't type them in yet Add a ` ` button and let users input decimals Make sure you don't let them type more than one though, like: `12 3 56 5` Disable the `` button if there's already a decimal separator in the display - Add a \"backspace\" button, so the user can undo their last input if they click the wrong number - Add keyboard support",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6521,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 124,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "681bcf039706082b2c17d98084c3ded6",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_etch_a_sketch.md",
    "source_type": "git_repo",
    "title": "project_etch_a_sketch",
    "content": "Introduction\nIn this project, you'll be creating a pretty neat toy to flex your DOM manipulation skills You're going to build a browser version of something between a sketchpad and an Etch-A-Sketch This project should not be easy You'll probably have to Google frequently to find the right JavaScript methods and CSS to use – in fact, that's the point You can build this using the tools that you have already learned There are plenty of resources on the net for learning stuff that we haven't covered yet if you decide you need it We'll walk you through the basic steps, but it will be up to you to actually implement them If you get totally stuck, drop by and ask for help in our Discord server Someone will be there to point you in the right direction Assignment\nDon't forget to commit early and often You can reference the [Commit Messages lesson](https://www theodinproject com/paths/foundations/courses/foundations/lessons/commit-messages) 1 Follow our instructions on [setting up your project's GitHub repository](https://www theodinproject com/paths/foundations/courses/foundations/lessons/recipes#setting-up-your-projects-github-repository) 1 Create a webpage with a 16x16 grid of square divs - Create the divs using JavaScript Don't try to create them by hand by copying and pasting them in your HTML file - It's best to put your grid squares inside a \"container\" div This div can be written in your HTML file - Use Flexbox to make the divs appear as a grid \\(versus just one on each line\\) Despite the name, do not be tempted to research or use CSS Grid, as it will be taught in a later lesson after the foundations path This project is an opportunity specifically to practice Flexbox - Be careful with borders and margins, as they can adjust the size of the squares - \"OMG, why isn't my grid being created \"\n- Did you link your CSS stylesheet - Open your browser's developer tools - Check if there are any errors in the JavaScript console - Check your \"elements\" panel to see if the elements have actually shown up but are somehow hidden - Go willy-nilly and add  `console log` statements in your JavaScript to see if it's actually being loaded 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4501,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_etch_a_sketch.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3b779e5ad0075404db6f1da31453b364",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_etch_a_sketch.md",
    "source_type": "git_repo",
    "title": "project_etch_a_sketch",
    "content": "adjust the size of the squares - \"OMG, why isn't my grid being created \" - Did you link your CSS stylesheet - Open your browser's developer tools - Check if there are any errors in the JavaScript console - Check your \"elements\" panel to see if the elements have actually shown up but are somehow hidden - Go willy-nilly and add `console log` statements in your JavaScript to see if it's actually being loaded 1Set up a \"hover\" effect so that the grid divs change color when your mouse passes over them, leaving a \\(pixelated\\) trail through your grid like a pen would - **Hint**: \"Hovering\" is what happens when your mouse enters a div and ends when your mouse leaves it You can set up event listeners for either of those events as a starting point - There are multiple ways to change the color of the divs, including:\n- Adding a new class to the div - Changing the div's background color using JavaScript 1 Add a button on the top of the screen that will send the user a popup asking for the number of squares per side for the new grid Once entered, the existing grid should be *removed*, and a new grid should be generated *in the same total space as before* \\(e g , 960px wide\\) so that you've got a new sketch pad - **Tip**: Set the limit for the user input to a maximum of 100 A larger number of squares results in more computer resources being used, potentially causing delays, freezing, or crashing that we want to prevent - Research `button` tags in HTML and how you can make a JavaScript function run when one is clicked - Also check out `prompt`s - You should be able to enter `64` and have a brand new 64x64 grid pop up without changing the total amount of pixels used 1 Push your project to GitHub #### Extra credit\nTransform the behavior of a square when interacting with the mouse by introducing a series of modifications 1 Rather than squares being the same color throughout the grid, randomize the squares' RGB values with each interaction 1 Additionally, implement a progressive darkening effect where each interaction darkens the square by 10% The goal is to achieve a fully black (or completely colored) square in only ten interactions - **Hint**: The opacity CSS property is useful here To learn how to use it, check this [MDN docs article about the opacity CSS property](https://developer mozilla",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4501,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_etch_a_sketch.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "92b5f406aec03cd676f626b9abf573b0",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_etch_a_sketch.md",
    "source_type": "git_repo",
    "title": "project_etch_a_sketch",
    "content": "1 Rather than squares being the same color throughout the grid, randomize the squares' RGB values with each interaction 1 Additionally, implement a progressive darkening effect where each interaction darkens the square by 10% The goal is to achieve a fully black (or completely colored) square in only ten interactions - **Hint**: The opacity CSS property is useful here To learn how to use it, check this [MDN docs article about the opacity CSS property](https://developer mozillaorg/en-US/docs/Web/CSS/opacity) You can choose to do either one or both of these challenges, it's up to you",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4501,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_etch_a_sketch.md",
      "source_type": "git_repo"
    },
    "token_count": 124,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e675dee350bd635233930d3ba28397a8",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "project_rock_paper_scissors",
    "content": "Introduction\nFor this project, you will create the game Rock Paper Scissors This game will be played entirely in the console Some of the student solutions below contain buttons, text, and other elements These elements are part of what is called a graphical user interface (GUI) You'll create the GUI in a later lesson In the meantime, remember to commit your code to GitHub Problem solving approach\nSince this is the first JavaScript project being built from scratch, it's important to remember the wise words from the Problem Solving lesson For each step in this project, be sure to do the following\nPlan or pseudocode your solution Write the code Test your code to make sure it works Assignment\nRemember to commit early and often To refresh your memory, check out the [commit messages lesson](https://www theodinproject com/paths/foundations/courses/foundations/lessons/commit-messages) #### Step 1: Setup the project structure\n1 Create a new Git repository for your project 1 Create a blank HTML document with a script tag 1 Check if JavaScript is linked correctly:\n- Write `console log(\"Hello World\")` in JavaScript - Check if \"Hello World\" is logged in the browser console once you open your webpage It's best practice to link to an external JavaScript file inside this script tag Using an external JavaScript file keeps your HTML file clean and organized You don't have to write additional code in the HTML file This game is played entirely via the console #### Step 2: Write the logic to get the computer choice\nYour game will be played against the computer You will write a function that randomly returns \"rock\", \"paper\" or \"scissors\" 1 Create a new function named `getComputerChoice` 1 Write the code so that `getComputerChoice` will randomly `return` one of the following string values: \"rock\", \"paper\" or \"scissors\" - **Hint**: The [Math random](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) method returns a random number that's greater than or equal to 0 and less than 1 Think about how you can use this to conditionally return one of the multiple choices - **Note**: Some learners might think that arrays are necessary for this problem, but they aren't If you're unfamiliar with arrays, don't worry - they'll be covered later in the curriculum 1 Test that your function returns what you expect using `console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6689,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "8eecf1e32f00043cf79546805b135aa0",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "project_rock_paper_scissors",
    "content": "random](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) method returns a random number that's greater than or equal to 0 and less than 1 Think about how you can use this to conditionally return one of the multiple choices - **Note**: Some learners might think that arrays are necessary for this problem, but they aren't If you're unfamiliar with arrays, don't worry - they'll be covered later in the curriculum 1 Test that your function returns what you expect using `consolelog` or [the browser developer tools](https://www theodinproject com/lessons/foundations-javascript-developer-tools) before advancing to the next step #### Step 3: Write the logic to get the human choice\nYour game will be played by a human player You will write a function that takes the user choice and returns it 1 Create a new function named `getHumanChoice` 1 Write the code so that `getHumanChoice` will return one of the valid choices depending on what the user inputs - **Hint**: Use the [prompt](https://developer mozilla org/en-US/docs/Web/API/Window/prompt) method to get the user's input - You do not need to handle reprompting if the user enters an invalid input, as that would require things we will teach later For now, just assume the user will always enter a valid choice 1 Test what your function returns by using `console log` #### Step 4: Declare the players score variables\nYour game will keep track of the players score You will write variables to keep track of the players score 1 Create two new variables named `humanScore` and `computerScore` in the global scope 1 Initialize those variables with the value of `0` #### Step 5: Write the logic to play a single round\nYour game will be played round by round You will write a function that takes the human and computer player choices as arguments, plays a single round, increments the round winner's score and logs a winner announcement 1 Create a new function named `playRound` 1 Define two parameters for `playRound`: `humanChoice` and `computerChoice` Use these two parameters to take the human and computer choices as arguments 1 Make your function's `humanChoice` parameter case-insensitive so that players can input \"rock\", \"ROCK\", \"RocK\", or other variations 1 Write the code for your `playRound` function to `console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6689,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "209a47f579468c3c78a5bccf26911401",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "project_rock_paper_scissors",
    "content": "computer player choices as arguments, plays a single round, increments the round winner's score and logs a winner announcement 1 Create a new function named `playRound` 1 Define two parameters for `playRound`: `humanChoice` and `computerChoice` Use these two parameters to take the human and computer choices as arguments 1 Make your function's `humanChoice` parameter case-insensitive so that players can input \"rock\", \"ROCK\", \"RocK\", or other variations 1 Write the code for your `playRound` function to `consolelog` a string value representing the round winner, such as: \"You lose Paper beats Rock\" 1 Increment the `humanScore` or `computerScore` variable based on the round winner Example code:\n```javascript\nfunction playRound(humanChoice, computerChoice) {\n// your code here }\nconst humanSelection = getHumanChoice();\nconst computerSelection = getComputerChoice();\nplayRound(humanSelection, computerSelection);\n```\n#### Step 6: Write the logic to play the entire game\nYour game will play 5 rounds You will write a function named `playGame` that calls `playRound` to play 5 rounds, keeps track of the scores and declares a winner at the end 1 Create a new function named `playGame` 1 Move your `playRound` function and score variables so that they're declared inside of the new `playGame` function\n1 Play 5 rounds by calling `playRound` 5 times - **Hint**: When you assign a function call to a variable, the return value of that function is assigned to the variable Accessing the variable afterward will only provide the assigned value; it doesn't recall the function You need to recall the choice functions to get new choices for each round - Re-work your previous functions or create more helper functions if necessary Specifically, you may want to change the return values to something more useful - If you already know about loops, you can use them If not, don't worry Loops will be covered in the next lesson When making interactive projects, like this one, you might be tempted to add more features, improve interactivity, user experience, design and styling of your website, and so on We recommend not doing that, and saving this effort for your portfolio projects For more information on learning mindset and portfolio pieces read [Part 5](https://dev",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6689,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "58c5e572f6f4550c6fc1199338782023",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\project_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "project_rock_paper_scissors",
    "content": "- If you already know about loops, you can use them If not, don't worry Loops will be covered in the next lesson When making interactive projects, like this one, you might be tempted to add more features, improve interactivity, user experience, design and styling of your website, and so on We recommend not doing that, and saving this effort for your portfolio projects For more information on learning mindset and portfolio pieces read [Part 5](https://devto/theodinproject/learning-code-f56) and [Part 7](https://dev to/theodinproject/strategically-building-your-portfolio-1km4) of [Becoming a TOP Success Story](https://dev to/theodinproject/becoming-a-top-success-story-mindset-3dp2)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6689,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\project_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e91410bee4532d59c5037c09f97f955f",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "revisiting_rock_paper_scissors",
    "content": "Introduction\nNow that we can manipulate the DOM, it's time to revisit Rock Paper Scissors and add a UI to it Before you start making changes to your Rock Paper Scissors project, you need to learn about a concept in Git called branching so that you can make your changes without having to worry about breaking what you have now Branches in Git allow your repository to hold multiple alternate reality versions of your files at the same time You’ve actually (sort of) been using branches since you made your first commit, you just might not have known it Back in the setting up Git lesson when you ran git config --global init defaultBranch main you were setting the name of what’s called the default branch for your repos The default branch is just what we call the branch that is created when you make your first commit on a project, and in that command we set the name to be main as is the current standard Like the branches in a tree (hence the name), all of the branches for a project stem off of a “trunk” (the main branch) or off of other branches When you make commits on a specific branch, those changes only exist on that branch, leaving all of your other branches exactly as they were when you branched off of them This means that you can keep your main branch as a place for only finished features that you know are working properly, and add each feature to your project using dedicated branches which we call feature branches Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson How to create a new branch How to merge branches Best practices and use cases of branches Using branches\nYou can make new branches by using the command git branch <branch_name> You can then change to your new branch using git checkout <branch_name> You can also create a new branch and change to it in a single command by using the -b flag with checkout, in the form git checkout -b <branch_name> You can see all of your current branches using git branch with no other arguments The branch that you’re currently on will be indicated with an asterisk If you want to change back to main from any other branch, you can do so just like changing to any other branch using git checkout main Once you are done working on your feature branch and are ready to bring the commits that you’ve made on it to your main branch, you will need to perform what is known as a merge",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10308,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "a9b1d5fdddec93b68fd16f2a42a47267",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "revisiting_rock_paper_scissors",
    "content": "arguments The branch that you’re currently on will be indicated with an asterisk If you want to change back to main from any other branch, you can do so just like changing to any other branch using git checkout main Once you are done working on your feature branch and are ready to bring the commits that you’ve made on it to your main branch, you will need to perform what is known as a mergeMerges are done by using the command git merge <branch_name> which will take the changes you’ve committed in branch_name and add them to the branch that you’re currently on You can see an example of a develop branch being created, committed to, and then merged to main in the diagram below ---\ntitle: Example of Git Branching\n---\ngitGraph\ncommit id: \"commit1\"\ncommit id: \"commit2\"\nbranch develop\ncheckout develop\ncommit id: \"commit1a\"\ncommit id: \"commit2a\"\ncheckout main\nmerge develop id: \"merge to main\"\nSometimes, the same lines in a file will have been changed by two different branches When this happens, you will have a merge conflict when you try and merge those branches together In order to finish merging the branches you will have to first resolve the conflict, which will be covered in a future lesson When you don’t need a branch anymore, it can be deleted using git branch -d <branch_name> if the branch has already been merged into main, or with git branch -D <branch_name> if it hasn’t You will usually want to delete branches when you’re done with them, otherwise they can pile up and make it more difficult to find the branch you’re looking for when you need it Sharing code\nAnother great use case for branches is to share code with others that you might not want to commit to your main branch (or feature branch) at all For example: if you have a bug in a new feature you’re working on that you can’t figure out, and it causes your code to break, you don’t want to commit that broken code and have it in your project’s “permanent record” You could instead create a new temporary branch, switch to it and commit your code to this new branch If you then push this new temporary branch to GitHub you can share it with others that may be able to help solve your problem In the assignment below you will get some hands-on practice on making new branches Assignment\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10308,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "baa926c2da523aeca8f28347117b9818",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "revisiting_rock_paper_scissors",
    "content": "you don’t want to commit that broken code and have it in your project’s “permanent record” You could instead create a new temporary branch, switch to it and commit your code to this new branch If you then push this new temporary branch to GitHub you can share it with others that may be able to help solve your problem In the assignment below you will get some hands-on practice on making new branches Assignment 1Set up a new branch on your previous Rock Paper Scissors repo\n1 Since we'll be making a UI for our Rock Paper Scissors game, make a new branch and change to it with the command `git checkout -b rps-ui` 1 You are now working in the `rps-ui` branch, locally However, this branch does not exist in your remote repo yet If you go to your github repo page, you'll see that you only have 1 branch, which would be `main` Let's push this new branch to your remote repo with the command `git push origin rps-ui` Now, you'll see two branches in your GitHub repository You can select the new branch on GitHub using the dropdown branch selector shown in the screenshot below [Dropdown menu of branches on GitHub](https://cdn statically io/gh/TheOdinProject/curriculum/46c18d8445051e016b1e415fe0227a0fa33cc825/foundations/javascript_basics/revisiting_rock_paper_scissors/imgs/00 png)\n1 Make sure you are on the `rps-ui` branch You can check this, with the `git branch` command The branch you are currently on will have an (\\*)asterisk next to it If you're in another branch for some reason, change to `rps-ui` with the command `git checkout rps-ui` Now you're all set to work on your new feature Note: You can add files, commit to this branch, and push changes to your repo, just like you would with the main branch Everything is the same except when you push the changes, you'd use `git push origin rps-ui` instead of `git push origin main`, since we're pushing to our new branch 1 In our UI, the player should be able to play the game by clicking on buttons rather than typing their answer in a prompt 1 For now, remove the logic that plays exactly five rounds 1 Create three buttons, one for each selection",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10308,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0df3cebfe5e80e53dc5570f51855c6c7",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "revisiting_rock_paper_scissors",
    "content": "the main branch Everything is the same except when you push the changes, you'd use `git push origin rps-ui` instead of `git push origin main`, since we're pushing to our new branch 1 In our UI, the player should be able to play the game by clicking on buttons rather than typing their answer in a prompt 1 For now, remove the logic that plays exactly five rounds 1 Create three buttons, one for each selectionAdd an event listener to the buttons that call your `playRound` function with the correct `playerSelection` every time a button is clicked (you can keep the `console log`s for this step)\n1 Add a `div` for displaying results and change all of your `console log`s into DOM methods 1 Display the running score, and announce a winner of the game once one player reaches 5 points 1 You will likely have to refactor (rework/rewrite) your original code to make it work for this That's OK Reworking old code is an important part of a programmer's life 1 Once you're all done with your UI and made sure everything's satisfactory, ensure all of your changes are committed to the `rps-ui` branch with `git status` before continuing 1 Now let's take a look at how we can merge the changes from our `rps-ui` branch back to our `main` branch 1 Checkout the branch we want to merge INTO i e `main` with the command `git checkout main` 1 Now let's merge our `rps-ui` branch into `main`, our current branch, with `git merge rps-ui` 1 If everything goes fine, our `rps-ui` branch is now successfully merged with main Use `git log` and you'll see all the commits you've made to your feature branch on top of the commits you made to the main branch Now for our final step 1 Let's push our `main` branch into our remote repo by running `git push origin main` Go to your GitHub repo and you'll see that our `main` branch will have all the changes and commits you made to the `rps-ui` branch Congratulations You've successfully pushed your first feature into your production branch 1 Now that we have all our code in the main branch, we don't really need our `rps-ui` branch anymore Let's do some cleanup, both locally and in the remote repo",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10308,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "cf40c38b267bb91bed759b31478cf2b7",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
    "source_type": "git_repo",
    "title": "revisiting_rock_paper_scissors",
    "content": "our remote repo by running `git push origin main` Go to your GitHub repo and you'll see that our `main` branch will have all the changes and commits you made to the `rps-ui` branch Congratulations You've successfully pushed your first feature into your production branch 1 Now that we have all our code in the main branch, we don't really need our `rps-ui` branch anymore Let's do some cleanup, both locally and in the remote repoDelete the branch from our local repo with `git branch -d rps-ui` and also delete it from the remote repo on GitHub with `git push origin --delete rps-ui` Congrats, we're all done with our cleanup 1 Make sure to publish the project on GitHub Pages and add a live preview link in the [project lesson](https://www theodinproject com/paths/foundations/courses/foundations/lessons/rock-paper-scissors) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are branches in git How do you create a new branch How do you merge a branch back into main What is one use case for branches Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Read the chapter on Basic Branching and Merging by Git-SCM to visualize and understand how branching and merging are used in real-world workflows, and discover why it’s such an amazing tool Make pushing your local commits to remote branches easier with the command git push -u origin <branch> It automatically links the local branch you push with the remote one Read Talha Ashar's educative io article and commit faster to a remote branch with a git push command Learn Git Branching by going through this interactive visualizer by Peter Cottle You can learn the substantial commands about branching while seeing how the commands you write affect your visually presented branch tree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10308,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\revisiting_rock_paper_scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "560205eabd7f6caa28daa262134337e0",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
    "source_type": "git_repo",
    "title": "understanding_errors",
    "content": "Introduction\nReading and understanding error messages is a requirement as a developer At first glance, many beginners shrink away from error messages as they appear to be “scary” and difficult to understand because they include terms one may not be familiar with However, error messages provide developers with a treasure trove of knowledge, and tell you everything you need to know about how to resolve them Being able to parse error messages and warnings without fear will enable you to effectively debug your applications, receive meaningful help from others, and empower yourself to push forward when faced with an error Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Name at least three kinds of JavaScript errors Identify two parts of an error message that help you find where the error originates Be able to understand how to research and resolve errors The anatomy of an error\nAn error is a type of object built into the JS language, consisting of a name/type and a message Errors contain crucial information that can assist you in locating the code responsible for the error, determining why you have this error, and resolving the error For all examples in this lesson, you should run the code in the browser's console Let’s assume we have written the following code:\n```javascript\nconst a = \"Hello\";\nconst b = \"World\";\nconsole log(c);\n```\nThis code will run, but it will generate an error In technical terms, this is called \"throwing\" an error The first part of an error displays the type of error This provides the first clue as to what you're dealing with We’ll learn more about the different error types later in the lesson In this example, we have a ReferenceError A ReferenceError is thrown when one refers to a variable that is not declared and/or initialized within the current scope In our case, the error message explains that the error has occurred because c is not defined Different errors of this type have different messages based on what is causing the ReferenceError For example, another message you may run into is ReferenceError: can't access lexical declaration 'X' before initialization As we can see, this points to a completely different reason than our original ReferenceError above Understanding both the error type and the error message is crucial to comprehending why you are receiving the error The next part of an error gives us the name of the file in which you can find the error (in this case, our script js), and also the line number This allows you to easily navigate to the problematic line in your code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11523,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "311a3ca1b1a43680155b727ef6675212",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
    "source_type": "git_repo",
    "title": "understanding_errors",
    "content": "see, this points to a completely different reason than our original ReferenceError above Understanding both the error type and the error message is crucial to comprehending why you are receiving the error The next part of an error gives us the name of the file in which you can find the error (in this case, our script js), and also the line number This allows you to easily navigate to the problematic line in your codeHere, the error originates from the fourth line of script js, which is displayed as a link under the error message with the text at script js:4 If you click this link, most browsers will navigate to the exact line of code and the rest of your script in the Sources tab of the Developer Tools Sometimes your browser's console will also display the column (or character) in the line at which the error is occurring In our example, this would be at script js:4:13 Another important part of an error is the stack trace This helps you understand when the error was thrown in your application, and what functions were called that led up to the error So, for example, if we have the following code:\n```javascript\nconst a = 5;\nconst b = 10;\nfunction add() {\nreturn c;\n}\nfunction print() {\nadd();\n}\nprint();\n```\nOur function print() should call on add(), which returns a variable named c, which currently has not been declared The corresponding error is as follows:\nThe stack trace tells us that:\nc is not defined in scope of add(), which is declared on line 5 add() was called by print(), which was declared on line 9 print() itself was called on line 12 Thus the stack trace lets you trace the evolution of an error back to its origin, which here is the declaration of add() Common types of errors\nThese are some of the most common errors you will encounter, so it’s important to understand them Syntax error\nA syntax error occurs when the code you are trying to run is not written correctly, i e , in accordance with the grammatical rules of JavaScript For example this:\njavascript\nfunction helloWorld() {\nconsole log \"Hello World \"\n}\nwill throw the following error, because we forgot the parentheses for console log() Reference error\nWe covered reference errors in the first example in this lesson, but it’s important to remember that these arise because whatever variable you are trying to reference does not exist (within the current scope) - or it has been spelled incorrectly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11523,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "da8ba0aa398b90c9305a0911ddff5812",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
    "source_type": "git_repo",
    "title": "understanding_errors",
    "content": "accordance with the grammatical rules of JavaScript For example this: javascript function helloWorld() { console log \"Hello World \" } will throw the following error, because we forgot the parentheses for console log() Reference error We covered reference errors in the first example in this lesson, but it’s important to remember that these arise because whatever variable you are trying to reference does not exist (within the current scope) - or it has been spelled incorrectlyType error\nThese errors are thrown for a few different reasons:\nPer MDN, a TypeError may be thrown when:\nan operand or argument passed to a function is incompatible with the type expected by that operator or function;\nor when attempting to modify a value that cannot be changed;\nor when attempting to use a value in an inappropriate way Say we have two strings that you would like to combine to create one message, such as below:\njavascript\nconst str1 = \"Hello\";\nconst str2 = \"World \";\nconst message = str1 push(str2);\nHere, we get a TypeError with a message stating that str1 push is not a function This is a common error message that confuses learners because you might know that push() is certainly a function (for example, if you have used it to add items to arrays before) But that’s the key - push() is not a String method, it’s an Array method Hence, it is “not a function” that you can find as a String method If we change push() to concat(), a proper String method, our code runs as intended A good note to keep in mind when faced with a TypeError is to consider the data type you are trying to run a method or operation against You'll likely find that it is not what you think, or the operation or method is not compatible with that type Tips for resolving errors\nAt this point, you might be wondering how we can resolve these errors We can start by understanding that the error message is your friend - not your enemy Error messages tell you exactly what is wrong with your code, and which lines to examine to find the source of the error Without error messages it would be a nightmare to debug our code - because it would still not work, we just wouldn't know why Now, its time to Google the error Chances are, you can find a fix or explanation on StackOverflow or in the documentation If nothing else, you will receive more clarity as to why you are receiving this error Use the debugger",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11523,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9bd0576ed0b71c7641d060cd401260e5",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
    "source_type": "git_repo",
    "title": "understanding_errors",
    "content": "which lines to examine to find the source of the error Without error messages it would be a nightmare to debug our code - because it would still not work, we just wouldn't know why Now, its time to Google the error Chances are, you can find a fix or explanation on StackOverflow or in the documentation If nothing else, you will receive more clarity as to why you are receiving this error Use the debuggerAs previously mentioned, the debugger is great for more involved troubleshooting, and is a critical tool for a developer You can set breakpoints, view the value of any given variable at any point in your application’s execution, step through code line by line, and more It is an extremely valuable tool and every programmer should know how to use it Make use of the console console log() is a popular choice for quick debugging For more involved troubleshooting, using the debugger might be more appropriate, but using console log() is great for getting immediate feedback without needing to step through your functions There are also other useful methods such as console table(), console trace(), and more Errors vs warnings\nLastly, many people are met with warnings and treat them as errors Errors will stop the execution of your program or whatever process you may be attempting to run and prevent further action Warnings, on the other hand, are messages that provide you insight on potential problems that may not necessarily crash your program at runtime, or at all While you should address these warnings if possible and as soon as possible, warnings are not as significant as errors and are more likely to be informational Warnings are typically shown in yellow, while errors are typically shown in red Though these colors are not a rule, frequently there will be a visual differentiation between the two, regardless of the platform you are encountering them on Assignment\n1 Now, it's time to go through the documentation Learn more about the [ReferenceError](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError), the [SyntaxError](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) and the [TypeError](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) from the MDN Docs Don't worry about fully understanding all the documentation right now; the goal is to familiarize yourself with the concepts The examples use \"try catch\" statements, which execute the code within the \"try\" block",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11523,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "701d1428def47014891083d0bc33e54f",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
    "source_type": "git_repo",
    "title": "understanding_errors",
    "content": "differentiation between the two, regardless of the platform you are encountering them on Assignment 1 Now, it's time to go through the documentation Learn more about the [ReferenceError](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError), the [SyntaxError](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) and the [TypeError](https://developer mozilla org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) from the MDN Docs Don't worry about fully understanding all the documentation right now; the goal is to familiarize yourself with the concepts The examples use \"try catch\" statements, which execute the code within the \"try\" blockIf an error occurs, it is automatically caught by the \"catch\" block This allows you to tackle errors before they terminate the script, allowing you to handle them appropriately within the \"catch\" block For now, just remember that \"try catch\" statements exist and that they will become useful as you progress through the curriculum 1 Work through [\"What went wrong Troubleshooting JavaScript\"](https://developer mozilla org/en-US/docs/Learn/JavaScript/First_steps/What_went_wrong) Be sure to download their starter code that has intentional errors Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What are three reasons why you may see a TypeError What is the key difference between an error and a warning What is one method you can use to resolve an error Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental MDN JavaScript Errors Reference Read the W3schools article to find additional window console object methods Additionally, watch Steve Griffith's brief video explanation on the Chrome devtools Console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11523,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\understanding_errors.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "c52f64b158c1595603b922ca9edb3a0b",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\tying_it_all_together\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "Introduction\nThat was quite a journey Take a second and reflect on the fact that you've just learned the basics of at least three different languages and, if you had to, you could probably hack together a web page on your own already You should be fairly comfortable typing commands into your computer's command line and you should understand what happens when you enter a web address into your browser and it returns a functioning page You should be able to create a basic web page and make it do some basic things with JavaScript Finally, you should have a clear understanding of how all this fits together in your future as a builder of web applications With what you know already you could start putting together some basic websites, but we're here to help you get a lot further than that We want to bring you to the point where you can confidently build a full-featured and scalable web application, either on your own, or working as a developer in a top-tier tech company You've come a long way up the learning curve but there is so much more cool stuff that you'll learn to do, and now is the time to decide which path you want to take Either Ruby with Ruby on Rails or JavaScript with Node/Express Both paths will guide you in building skills, building up a portfolio of projects, and becoming a great developer There is no right answer here on what is the best path Learning multiple languages can help you become a well-rounded developer, but sticking with one could make you more of an expert in a particular language Both paths will help you become a great developer The important thing is to not switch halfway through; this will only set you back Learning how to program is much more than just learning a language It's about learning how to research and solve difficult problems, building an engineering mindset, working on complex problems and codebases, communicating effectively with other developers, and much more Luckily, all these skills are transferable to other languages and domains of software and because most languages are similar in concept and structure, moving into a different language will be much easier than learning your first Arguments about learning the languages used in your area may sound convincing, but because a good developer can transfer skills easily, what you learn isn't going to massively change outcomes of getting a job Though, if you cannot shake that fear, do whatever you need -- even if that includes researching your area to see what jobs are available locally (don't forget about remote jobs, though) A good course is far more important than the language you learn first",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5834,
      "relative_path": "git_repos\\odin-project\\foundations\\tying_it_all_together\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f6ace651cddc55e6b33f843e0c7ffab2",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\tying_it_all_together\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "the languages used in your area may sound convincing, but because a good developer can transfer skills easily, what you learn isn't going to massively change outcomes of getting a job Though, if you cannot shake that fear, do whatever you need -- even if that includes researching your area to see what jobs are available locally (don't forget about remote jobs, though) A good course is far more important than the language you learn firstTo help you make a decision, here are some perks of each technology:\nRuby and Ruby on Rails\nOpinionated\nYou don't have to make decisions on the structure of your projects This helps when moving into projects built by others You will learn things \"The Ruby Way\", which can help you write clean code in other languages as well Elegant\nBrings a lot of tools to help you develop things in a way that makes your code easy to read Oftentimes solutions in Ruby are much more concise than in other languages Rapid development\nRails helps you build applications very quickly This means you can make a greater number of interesting projects than others in the same time frame Single paradigm\nObject-oriented programming (OOP) is the Ruby way; many other languages are primarily OOP-based JavaScript - Node & Express\nUn-opinionated\nThere is no standard way of doing things You are going to have to decide the structure of projects yourself, for better or worse Very fast\nBecause JavaScript utilises JIT (Just-In-Time) compilation, it can do calculations very quickly Verbose\nThere is no magic involved with these technologies You will have to understand everything to make sense of it Helps you get closer to how the computer is actually reading your code Same language on both front end and back end\nKeeping the language consistent can help with writing consistent code across your entire application Allows you to do some cool things, like writing code that runs on both the browser and the server for optimization purposes In the end, it doesn't matter which path you take It's only important that you stick with it, and continue to hold onto the learner's mindset throughout your career Not convinced Read this article about picking the right programming language Still can’t decide Let the spinner settle your fate Feel free to share the results in chat Get ready, because this is only the beginning Now it's time to delve deeper into the areas covered by Foundations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5834,
      "relative_path": "git_repos\\odin-project\\foundations\\tying_it_all_together\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "998c9b099a628c557b9c417f9a1a7647",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\tying_it_all_together\\conclusion.md",
    "source_type": "git_repo",
    "title": "conclusion",
    "content": "the end, it doesn't matter which path you take It's only important that you stick with it, and continue to hold onto the learner's mindset throughout your career Not convinced Read this article about picking the right programming language Still can’t decide Let the spinner settle your fate Feel free to share the results in chat Get ready, because this is only the beginning Now it's time to delve deeper into the areas covered by FoundationsThere are some fantastic projects in the courses that follow which will challenge you to the limit, but you'll come out the other side ready to go and make your mark in the programming world The journey has just begun Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental If you are still confused, check out this article to get more facts, pros and cons about both languages Ruby on Rails vs JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5834,
      "relative_path": "git_repos\\odin-project\\foundations\\tying_it_all_together\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 172,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ff1b92c1f9eea63c151c6b9269b90d2e",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "Introduction\nIn the previous sections you learned how to structure webpages with HTML and style them with CSS The next step is to make the webpage interactive, which is exactly what JavaScript is for In this section, we will focus on the fundamentals of JavaScript and how you can use it to manipulate all the various interactions between the web page and user Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Running JavaScript code using an HTML file Declaring variables with let and const Performing number operations Performing string operations Using logical and mathematical operators How to run JavaScript code\nAll JavaScript we will be writing in the majority of the Foundations course will be run via the browser Later lessons in Foundations and the NodeJS path will show you how to run JavaScript outside of the browser environment This means that we will let the browser execute our code, even if it comes from a file we created Outside of these lessons, for now you should always default to running your JavaScript in the browser unless otherwise specified, otherwise you may run into unexpected errors The simplest way to get started is to create an HTML file with the JavaScript code inside of it Use the VS Code snippet + TAB to create the basic HTML skeleton in a file on your computer somewhere Be sure to include the <script> tag:\n```html\nDocument\n```\nSave and open this file up in a web browser and then open up the browser's console:\nRight-click on the blank webpage Click on \"Inspect\" or \"Inspect Element\" to open the Developer Tools Find and select the \"Console\" tab, where you should see the output of our console log statement #### Live preview\nYou can use [Live Preview extension in Visual Studio Code](https://marketplace visualstudio com/items itemName=ms-vscode live-server) to automatically update the browser when you save your file instead of having to manually refresh the page to see any changes when you edit your code Try editing the text to say something different console log() is the command to print something to the developer console in your browser You can use this to print the results from any of the following articles and exercises to the console We encourage you to code along with all of the examples in this and future lessons Another way to include JavaScript in a webpage is through an external script This is very similar to linking external CSS docs to your website ```html\n```\nJavaScript files have the extension js similar to css for stylesheets External JavaScript files are used for more complex scripts We named our file javascript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10766,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "50dccf0c95bd948be682482391a7c97d",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "the following articles and exercises to the console We encourage you to code along with all of the examples in this and future lessons Another way to include JavaScript in a webpage is through an external script This is very similar to linking external CSS docs to your website ```html ``` JavaScript files have the extension js similar to css for stylesheets External JavaScript files are used for more complex scripts We named our file javascriptjs but we could have chosen any name like my-script js or even no name js What is really important is the js extension Variables\nThese are the building blocks of any program You can think of variables as \"storage containers\" for data in your code You can declare variables using the let keyword Let's try it (No pun intended) ```javascript\nlet name = \"John\";\nlet surname = \"Doe\";\nconsole log(name);\nconsole log(surname);\n```\nWhat will the console log output Try it out You can also re-assign variables:\n```javascript\nlet age = 11;\nconsole log(age); // outputs 11 to the console\nage = 54;\nconsole log(age); // what will be output now ```\nNotice the lack of let on line 4 - we don't need it since the variable has already been declared earlier and we are just re-assigning it here Re-assigning is cool and all, but what if we don't want it to happen For example we might have a constant pi which will never need to be re-assigned We can accomplish this using the const keyword ```javascript\nconst pi = 3 14;\npi = 10;\nconsole log(pi); // What will be output ```\nYour intuition may tell you that 3 14 will be output Try it An error is thrown It doesn't even reach the console log You may wonder why we would want an error in our code Truth be told, errors are incredibly helpful at telling us what is wrong with our code and exactly where the issue is Without them, our code would still not do what we may want it to, but it would be a major pain to try and find what's wrong So in summary, there are two ways to declare a variable:\nlet, which we can re-assign const which we can't re-assign and will throw an error if we try There is also a third way, var, which was the original way variables were declared in JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10766,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "baf0be9af3ed518ee6eefe7ca2d37925",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "the issue is Without them, our code would still not do what we may want it to, but it would be a major pain to try and find what's wrong So in summary, there are two ways to declare a variable: let, which we can re-assign const which we can't re-assign and will throw an error if we try There is also a third way, var, which was the original way variables were declared in JavaScriptvar is similar to let in that variables assigned this way can be reassigned, but it has other quirks that were cleared up when the language introduced let and const By and large, it is not used anymore However, you will likely come across code which uses var at some point, so it is useful to know that it exists Numbers\nNumbers are the building blocks of programming logic In fact, it's hard to think of any useful programming task that doesn't involve at least a little basic math so knowing how numbers work is obviously quite important Luckily, it's also fairly straightforward If you went to school, you will likely not find the concept too difficult to grasp For example, the mathematical expression (3 + 2) - 76 * (1 + 1) is also valid JavaScript If you put that into a console log, it'll evaluate the expression and output the correct number Try it Assignment\nTry the following exercises by adding code to a script tag in your HTML file:\n1 Add 2 numbers together In your script, type in `console log(23 + 97)` Running this should log `120` 1 Do the same thing but add 6 different numbers together 1 Now log the value of the following expression: `(4 + 6 + 9) / 77` The console should log approximately `0 24675` 1 Let's use some variables 1 Add this statement to the script tag: `let a = 10` 1 Below it, add `console log(a)` When you run this, the browser console should log `10` 1 Afterwards, re-assign `a` with a different number value Log `a` again afterwards and it should show the updated value (the previous log should still show the old value of `10` since that was before `a` was re-assigned) 1 Now add to the bottom of the script `let b = 7 * a` 1 Log what `b` is",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10766,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "dac830d9bbf9c63a84c41c82822fdd44",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "= 10` 1 Below it, add `console log(a)` When you run this, the browser console should log `10` 1 Afterwards, re-assign `a` with a different number value Log `a` again afterwards and it should show the updated value (the previous log should still show the old value of `10` since that was before `a` was re-assigned) 1 Now add to the bottom of the script `let b = 7 * a` 1 Log what `b` isIt should log the result of 7 multiplied by whatever you re-assigned `a` with 1 Try this sequence:\n1 Declare a const variable `max` with the value `57` 1 Declare another const variable `actual` and assign it `max - 13` 1 Declare another const variable `percentage` and assign it `actual / max` 1 Now if you log `percentage`, you should see a value in the console like `0 7719` 1 Take a few minutes to keep playing around with various things in your script tag Eventually, we will learn how to actually make these things show up on the webpage, but all of this logic will remain the same Make sure you're comfortable with it before moving on Go through the following articles to deepen your knowledge 1 Read up on [variables in JavaScript](https://javascript info/variables#variable-naming) from JavaScript info 1 This W3Schools lesson on [JavaScript arithmetic](https://www w3schools com/js/js_arithmetic asp) followed by this on [JavaScript numbers](https://www w3schools com/js/js_numbers asp), are good introductions to what you can accomplish with numbers in JavaScript 1 This MDN article on [JavaScript math](https://developer mozilla org/en-US/docs/Learn/JavaScript/First_steps/Math) covers the same info from a slightly different point of view, while also teaching you how to apply some basic math in JavaScript There's much more that you can do with numbers, but this is all you need at the moment 1 Read through (and code along with ) this article on [JavaScript operators](http://javascript info/operators) Don't forget to do the \"Tasks\" at the bottom of the page It will give you a pretty good idea of what you can accomplish with numbers (among other things ) in JavaScript Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10766,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "0ee6b9c5bd65c8b9b408978835479280",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
    "source_type": "git_repo",
    "title": "Document",
    "content": "can do with numbers, but this is all you need at the moment 1 Read through (and code along with ) this article on [JavaScript operators](http://javascript info/operators) Don't forget to do the \"Tasks\" at the bottom of the page It will give you a pretty good idea of what you can accomplish with numbers (among other things ) in JavaScript Knowledge check The following questions are an opportunity to reflect on key topics in this lessonIf you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What three keywords can you use to declare new variables Which of the three variable declarations should you avoid and why What rules should you follow when naming variables What happens when you add numbers and strings together How does the Modulo (%), or Remainder, operator work What's the difference between == and === When would you receive a NaN result How do you increment and decrement a number What's the difference between prefixing and postfixing increment/decrement operators What is operator precedence and how is it handled in JS How do you access developer tools and the console How do you log information to the console What does unary plus operator do to string representations of integers eg +\"10\"\nAdditional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental MDN's \"What is JavaScript \" explains a bit more about it on a high-level",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10766,
      "relative_path": "git_repos\\odin-project\\foundations\\javascript_basics\\variables_and_operators.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "c2d09e9b52845ea9677e6bdc2c7fe28c",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\inspecting-html-and-css.md",
    "source_type": "git_repo",
    "title": "inspecting-html-and-css",
    "content": "Introduction\nBeing able to inspect and debug your HTML and CSS is critical for frontend development This lesson will take us through the Chrome Dev Tools, which allow you to see detailed information about your elements and CSS rules, as well as assist you in finding and fixing problems in your code Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You will know how to access the element inspector You will know how to select and inspect specific elements You will know how to test out HTML and CSS in the inspector The inspector\nTo open up the inspector, you can right-click on any element of a webpage and click \"Inspect\" or press F12 Go ahead and do that right now to see the HTML and CSS used on this page Don't get overwhelmed with all the tools you're now seeing For this lesson, we want to focus on the Elements and Styles panels Inspecting elements\nIn the Elements panel, you can see the entire HTML structure of your page You can click on any of the elements in this panel to select that specific element Alternatively, you can click the blue-highlighted icon shown below on the left, and hover over any element on the page When an element is selected, the Styles tab will show all the currently applied styles, as well as any styles that are being overwritten (indicated by a strikethrough of the text) For example, if you use the inspector to click on the \"Your Career in Web Development Starts Here\" header on the TOP homepage, on the right-hand side you'll see all the styles that are currently affecting the element, as seen below:\nTesting styles in the inspector\nThe Styles panel also allows you to edit styles directly in the browser You can click inside of any individual selector to add a new rule or click on an existing attribute or value to alter it When doing so, the webpage responds with the changes in real-time This won’t affect the source code in your text editor, but it is extremely useful for quickly testing out various attributes and values without needing to reload the page over and over again Assignment\n1 Go through the following sections of the [official Chrome DevTools docs](https://developers google com/web/tools/chrome-devtools):\n- [Devtools overview](https://developer chrome com/docs/devtools/overview/): don't navigate to any other pages linked here; just get familiar with *what* tools are available in the DevTools, rather than how to use all of them right now",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4509,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\inspecting-html-and-css.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5e999b0e2d26592decb922485ea74cad",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\inspecting-html-and-css.md",
    "source_type": "git_repo",
    "title": "inspecting-html-and-css",
    "content": "in your text editor, but it is extremely useful for quickly testing out various attributes and values without needing to reload the page over and over again Assignment 1 Go through the following sections of the [official Chrome DevTools docs](https://developers google com/web/tools/chrome-devtools): - [Devtools overview](https://developer chrome com/docs/devtools/overview/): don't navigate to any other pages linked here; just get familiar with *what* tools are available in the DevTools, rather than how to use all of them right now- [Open Chrome DevTools](https://developer chrome com/docs/devtools/open/): similar to what we went over above, but with some nice extras - [Get Started With Viewing And Changing The DOM](https://developer chrome com/docs/devtools/dom/): skip through any part that uses the JavaScript console - [View and change CSS](https://developer chrome com/docs/devtools/css): be sure to follow along with any interactive instructions Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge How do you select a specific element on your page with your browser’s developer tools What does a strikethrough in a CSS declaration mean in your browser’s developer tools How do you change CSS in real time on specific elements of a web page with your browser’s developer tools Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental This article about how we can utilize CSS overview in the developer tools to check the colors, font styles, media-queries, etc used on a particular webpage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4509,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\inspecting-html-and-css.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1d260b6b68f1c0e85d7253d71f387cf8",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\block-and-inline.md",
    "source_type": "git_repo",
    "title": "block-and-inline",
    "content": "Introduction\nIn the previous lesson, we discovered that different display types have unique box models, and we can modify the box calculation by changing the box-sizing property CSS has two box types: block and inline boxes, which determine element behavior and interaction The display property controls how HTML elements appear on the webpage We will explore its various options further in this lesson Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You'll learn about \"Normal flow\" You'll learn the difference between block and inline elements You'll learn which elements default to block and which elements default to inline You'll learn what divs and spans are Block vs inline\nMost of the elements that you have learned about so far are block elements In other words, their default style is display: block By default, block elements will appear on the page stacked atop each other, each new element starting on a new line Inline elements, however, do not start on a new line They appear in line with whatever elements they are placed beside A clear example of an inline element is a link, or <a> tag If you stick one of these in the middle of a paragraph of text, the link will behave like a part of the paragraph Additionally, padding and margin behave differently on inline elements In general, you do not want to try to put extra padding or margin on inline elements The middle ground inline-block\nInline-block elements behave like inline elements, but with block-style padding and margin display: inline-block is a useful tool to know about, but in practice, you'll probably end up reaching for flexbox more often if you're trying to line up a bunch of boxes Flexbox will be covered in-depth in the next lesson Divs and spans\nWe can't talk about block and inline elements without discussing divs and spans All the other HTML elements we have encountered so far give meaning to their content For example, paragraph elements tell the browser to display the text it contains as a paragraph Strong elements tell the browser which texts within are important and so on Yet, divs and spans give no particular meaning to their content They are just generic boxes that can contain anything Having elements like this available to us is a lot more useful than it may first appear We will often need elements that serve no other purpose than to be \"hook\" elements We can give an id or class to target them for styling with CSS Another use case we will face regularly is grouping related elements under one parent element to correctly position them on the page",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8520,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\block-and-inline.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "33da8c043be10fcb78687ad19cf97a8d",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\block-and-inline.md",
    "source_type": "git_repo",
    "title": "block-and-inline",
    "content": "are just generic boxes that can contain anything Having elements like this available to us is a lot more useful than it may first appear We will often need elements that serve no other purpose than to be \"hook\" elements We can give an id or class to target them for styling with CSS Another use case we will face regularly is grouping related elements under one parent element to correctly position them on the pageDivs and spans provide us with the ability to do this Div is a block-level element by default It is commonly used as a container element to group other elements Divs allow us to divide the page into different blocks and apply styling to those blocks See the Pen\nblock-inline-lesson-div-example by TheOdinProject (@TheOdinProjectExamples)\non CodePen Span is an inline-level element by default It can be used to group text content and inline HTML elements for styling and should only be used when no other semantic HTML element is appropriate See the Pen\nUntitled by TheOdinProject (@TheOdinProjectExamples)\non CodePen Assignment\n1 The concept of \"Normal flow\" is implied in the box-model resources, but isn't laid out very specifically Read [\"Normal Flow\" from MDN](https://developer mozilla org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow) to make sure you understand how elements lay themselves out by default 1 W3 schools' [\"HTML Block and Inline Elements\"](https://www w3schools com/html/html_blocks asp) has a description and a list of all the default block and inline elements 1 The Digital Ocean tutorial [\"Inline vs Inline-block Display in CSS\"](https://www digitalocean com/community/tutorials/css-display-inline-vs-inline-block) has a couple of great examples that clarify the difference between `inline` and `inline-block` 1 Do the exercises in our [CSS exercises repository's `foundations/block-and-inline` directory](https://github com/TheOdinProject/css-exercises/tree/main/foundations/block-and-inline) (remember that the instructions are in the README) in the order:\n- `01-margin-and-padding-1`\n- `02-margin-and-padding-2`\nNote: Solutions for these exercises can be found in the `solution` folder of each exercise 1 Remember the Recipe page you created as practice from the HTML Foundations section Well, it's rather *plain* looking, isn't it Let's fix that by adding some CSS to it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8520,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\block-and-inline.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6e5de5852554500e460bfb48aa6a7acc",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\block-and-inline.md",
    "source_type": "git_repo",
    "title": "block-and-inline",
    "content": "between `inline` and `inline-block` 1 Do the exercises in our [CSS exercises repository's `foundations/block-and-inline` directory](https://github com/TheOdinProject/css-exercises/tree/main/foundations/block-and-inline) (remember that the instructions are in the README) in the order: - `01-margin-and-padding-1` - `02-margin-and-padding-2` Note: Solutions for these exercises can be found in the `solution` folder of each exercise 1 Remember the Recipe page you created as practice from the HTML Foundations section Well, it's rather *plain* looking, isn't it Let's fix that by adding some CSS to it- How you actually style it is completely open, but you should use the external CSS method (for this practice and moving forward) You should also try to use several of the properties mentioned in the previous lesson (color, background color, typography properties, etc) Take some time to play around with the various properties to get a feel for what they do For now, don't worry at all about making it look *good* This is just to practice and get used to writing CSS, not to make something to show off on your resume - We haven't covered how to use a custom font for the `font-family` property yet, so for now take a look at [CSS Fonts](https://www w3schools com/Css/css_font asp) for a list of generic font families to use, and [CSS Web Safe Fonts](https://www w3schools com/cssref/css_websafe_fonts asp) for a list of fonts that are web safe Web safe means that these are fonts that are installed on basically every computer or device (but be sure to still include a generic font family as a fallback) Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge What is the difference between a block element and an inline element What is the difference between an inline element and an inline-block element Is an h1 block or inline Is button block or inline Is div block or inline Is span block or inline Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental Learn CSS Layout is a tutorial that is a little dated at this point, but its examples are clear",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8520,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\block-and-inline.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0c50583d2b97dc9763f18ff21d9a9651",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\block-and-inline.md",
    "source_type": "git_repo",
    "title": "block-and-inline",
    "content": "a block element and an inline element What is the difference between an inline element and an inline-block element Is an h1 block or inline Is button block or inline Is div block or inline Is span block or inline Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental Learn CSS Layout is a tutorial that is a little dated at this point, but its examples are clearThe first 6 slides cover the material we've seen so far Watch this short video on what the term “Normal Flow” means in CSS For a more interactive explanation and example, try this Scrim on block and inline display",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8520,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\block-and-inline.md",
      "source_type": "git_repo"
    },
    "token_count": 126,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "969d2df19ce1f58f6f20973139c83128",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-box-model.md",
    "source_type": "git_repo",
    "title": "the-box-model",
    "content": "Introduction\nNow that you understand the basic syntax of HTML and CSS, we're going to get serious The most important skills you need to master with CSS are positioning and layout Changing fonts and colors is a crucial skill, but being able to put things exactly where you want them on a webpage is even more crucial After all, how many webpages can you find where absolutely every element is just stacked one on top of another Learning to position elements on a webpage is not that difficult once you understand just a few key concepts Unfortunately, many learners race through learning HTML and CSS to get to JavaScript and end up missing these fundamental concepts This leads to frustration and pain (and funny gifs) because all the JavaScript skills in the world are meaningless if you can't stick your elements on the page where you need them to be So with that in mind, let's get started Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson You'll learn all about the box model You'll learn how to make sure elements are just the right size with margin, padding, and borders The box model\nThe first important concept that you need to understand to be successful in CSS is the box model It isn't complicated, but skipping over it now would cause you much frustration down the line Every single thing on a webpage is a rectangular box These boxes can have other boxes in them and can sit alongside one another You can get a rough idea of how this works by applying an outline to every element on the page like this:\ncss\n* {\noutline: 2px solid red;\n}\nYou can use the browser's inspector to add the CSS above to this web page if you want, by clicking the + button in the top right of the \"Styles\" panel within the \"Elements\" tab Boxes in boxes OK, so there might be some circles in the above image but when it comes to layout, they fit together like rectangular boxes and not circles In the end, laying out a webpage and positioning all its elements is deciding how you are going to nest and stack these boxes The only real complication here is that there are many ways to manipulate the size of these boxes, and the space between them, using padding, border, and margin The assigned articles go into more depth on this concept, but to sum it up briefly:\npadding increases the space between the border of a box and the content of the box border adds space (even if it's only a pixel or two) between the margin and the padding",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6437,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-box-model.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "102326501b12fabe895ed2928b4fd3b8",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-box-model.md",
    "source_type": "git_repo",
    "title": "the-box-model",
    "content": "only real complication here is that there are many ways to manipulate the size of these boxes, and the space between them, using padding, border, and margin The assigned articles go into more depth on this concept, but to sum it up briefly: padding increases the space between the border of a box and the content of the box border adds space (even if it's only a pixel or two) between the margin and the paddingmargin increases the space between the borders of a box and the borders of adjacent boxes Be sure to study the diagrams carefully Assignment\n1 [Learn CSS Box Model In 8 Minutes](https://www youtube com/watch v=rIO5326FgPE) is a straightforward overview of the box model, padding and margin Go ahead and watch this now; it informs everything else 1 [box-sizing: border-box (EASY )](https://www youtube com/watch v=HdZHcFWcAd8) is an add-on to the above resource with a better explanation of 'box-sizing' 1 Because the box model concept is so incredibly fundamental, let's dig a bit deeper with  [MDN's lesson on the box model](https://developer mozilla org/en-US/docs/Learn/CSS/Building_blocks/The_box_model) It covers the same material as the video(s) above and will introduce you to inline boxes that we will explore in the next lesson Pay close attention to the examples and take the time to experiment with their in-browser editor 1 The [CSS Tricks page on margins](https://css-tricks com/almanac/properties/m/margin/) has some further information about the `margin` property that you'll find useful Specifically, the sections about `auto` and margin collapsing contain things you'll want to know Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge From inside to outside, what is the order of box-model properties What does the box-sizing CSS property do What is the difference between the standard and alternative box model Would you use margin or padding to create more space between 2 elements Would you use margin or padding to create more space between the contents of an element and its border Would you use margin or padding if you wanted two elements to overlap each other How do you set the alternative box model for all of your elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6437,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-box-model.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0a2550e705eb013a0dd01b6c6e85f94a",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-box-model.md",
    "source_type": "git_repo",
    "title": "the-box-model",
    "content": "the box-sizing CSS property do What is the difference between the standard and alternative box model Would you use margin or padding to create more space between 2 elements Would you use margin or padding to create more space between the contents of an element and its border Would you use margin or padding if you wanted two elements to overlap each other How do you set the alternative box model for all of your elementsHow do you center an element horizontally Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental For a more interactive explanation and example, try this Scrim on the box model This informative video tutorial by Slaying The Dragon offers a valuable resource for understanding the box model",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6437,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-box-model.md",
      "source_type": "git_repo"
    },
    "token_count": 140,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8dc283a0186897c8fc35a4fe2ffb1322",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
    "source_type": "git_repo",
    "title": "subsection {",
    "content": "Introduction\nIn the previous lesson, we covered basic CSS syntax and selectors Now, it's time to combine our knowledge of selectors with the C of CSS -- the cascade Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson What the cascade does Specificity and combining CSS selectors How inheritance affects certain properties The cascade of CSS\nSometimes we may have rules that conflict with one another, and we end up with some unexpected results \"But I wanted these paragraphs to be blue, why are they red like these other paragraphs \" As frustrating as this can be, it's important to understand that CSS doesn't just do things against our wishes CSS only does what we tell it to do One exception to this is the default styles that are provided by a browser These default styles vary from browser to browser, and they are why some elements create a large \"gap\" between themselves and other elements, or why buttons look the way they do, despite us not writing any CSS rules to style them that way So if you end up with some unexpected behavior like this it's either because of these default styles, not understanding how a property works, or not understanding this little thing called the cascade The cascade is what determines which rules actually get applied to our HTML There are different factors that the cascade uses to determine this We will examine three of these factors, which will hopefully help you avoid those frustrating \"I hate CSS\" moments Specificity\nA CSS declaration that is more specific will take precedence over less specific ones Inline styles, which we went over in the previous lesson, have the highest specificity compared to selectors, while each type of selector has its own specificity level that contributes to how specific a declaration is Other selectors contribute to specificity, but we're focusing only on the ones we've gone over so far:\nID selectors (most specific selector)\nClass selectors\nType selectors\nSpecificity will only be taken into account when an element has multiple, conflicting declarations targeting it, sort of like a tie-breaker An ID selector will always beat any number of class selectors, a class selector will always beat any number of type selectors, and a type selector will always beat any number of less specific selectors When there is no declaration with a selector of higher specificity, a rule with a greater number of selectors of the same type will take precedence over another rule with fewer selectors of the same type Let's take a look at a few quick examples to visualize how specificity works",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9797,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "f47df8302fccda821a9ecb60bcaefb38",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
    "source_type": "git_repo",
    "title": "subsection {",
    "content": "class selectors, a class selector will always beat any number of type selectors, and a type selector will always beat any number of less specific selectors When there is no declaration with a selector of higher specificity, a rule with a greater number of selectors of the same type will take precedence over another rule with fewer selectors of the same type Let's take a look at a few quick examples to visualize how specificity worksConsider the following HTML and CSS code:\n```html\nRed text\n```\n```css\n/ rule 1 / subsection {\ncolor: blue;\n}\n/ rule 2 / main list {\ncolor: red;\n}\n```\nIn the example above, both rules are using only class selectors, but rule 2 is more specific because it is using more class selectors, so the color: red declaration would take precedence Now, let's change things a little bit:\n```html\nBlue text\n```\n```css\n/ rule 1 /\nsubsection {\ncolor: blue;\n}\n/ rule 2 / main list {\ncolor: red;\n}\n```\nIn the example above, despite rule 2 having more class selectors than ID selectors, rule 1 is more specific because ID beats class In this case, the color: blue declaration would take precedence And a bit more complex:\n```html\nRed text on yellow background\n```\n```css\n/ rule 1 /\nsubsection {\nbackground-color: yellow;\ncolor: blue;\n}\n/ rule 2 / main #subsection {\ncolor: red;\n}\n```\nIn this final example, the first rule uses an ID selector, while the second rule combines an ID selector with a class selector Therefore, neither rule is using a more specific selector than the other The cascade then checks the number of each selector type Both rules have only one ID selector, but rule 2 has a class selector in addition to the ID selector, so rule 2 has a higher specificity While the color: red declaration would take precedence, the background-color: yellow declaration would still be applied since there's no conflicting declaration for it #### Not everything adds to specificity\nWhen comparing selectors, you may come across special symbols for the universal selector (`*`) as well as combinators (`+`, `~`, `>`, and an empty space) These symbols do not add any specificity in and of themselves ```css\n/ rule 1 / class second-class {\nfont-size: 12px;\n}\n/ rule 2 / class",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9797,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "e207594270fd8b457d5c66735630d17f",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
    "source_type": "git_repo",
    "title": "subsection {",
    "content": "would take precedence, the background-color: yellow declaration would still be applied since there's no conflicting declaration for it #### Not everything adds to specificity When comparing selectors, you may come across special symbols for the universal selector (`*`) as well as combinators (`+`, `~`, `>`, and an empty space) These symbols do not add any specificity in and of themselves ```css / rule 1 / class second-class { font-size: 12px; } / rule 2 / classsecond-class {\nfont-size: 24px;\n}\n```\nHere both rule 1 and rule 2 have the same specificity Rule 1 uses a chaining selector (no space) and rule 2 uses a descendant combinator (the empty space) But both rules have two classes and the combinator symbol itself does not add to the specificity ```css\n/ rule 1 / class second-class {\nfont-size: 12px;\n}\n/ rule 2 / class > second-class {\nfont-size: 24px;\n}\n```\nThis example shows the same thing Even though rule 2 is using a child combinator (>), this does not change the specificity value Both rules still have two classes so they have the same specificity values ```css\n/ rule 1 /\n* {\ncolor: black;\n}\n/ rule 2 /\nh1 {\ncolor: orange;\n}\n```\nIn this example, rule 2 would have higher specificity and the orange value would take precedence for this element Rule 2 uses a type selector, which has the lowest specificity value But rule 1 uses the universal selector (*) which has no specificity value Inheritance\nInheritance refers to certain CSS properties that, when applied to an element, are inherited by that element's descendants, even if we don't explicitly write a rule for those descendants Typography-based properties (color, font-size, font-family, etc ) are usually inherited, while most other properties aren't You can find out if a property is inherited or not by going to its docs on MDN and heading to the Formal Definition section For example, the CSS color property formal definition indicates that color is an inherited property, while the display property formal definition indicates that display is not The exception to this is when directly targeting an element, as this always beats inheritance:\n```html\n```\n```css\n/ styles css /\nparent {\ncolor: red;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9797,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "d901e44f9894b663f4c618e7ead3f271",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
    "source_type": "git_repo",
    "title": "subsection {",
    "content": "find out if a property is inherited or not by going to its docs on MDN and heading to the Formal Definition section For example, the CSS color property formal definition indicates that color is an inherited property, while the display property formal definition indicates that display is not The exception to this is when directly targeting an element, as this always beats inheritance: ```html ``` ```css / styles css / parent { color: red; }child {\ncolor: blue;\n}\n```\nDespite the parent element having a higher specificity with an ID, the child element would have the color: blue style applied since that declaration directly targets it, while color: red from the parent is only inherited Rule order\nThe final factor, the end of the line, the tie-breaker of the tie-breakers Let's say that after every other factor has been taken into account, there are still multiple conflicting rules targeting an element How does the cascade determine which rule to apply Whichever rule was the last defined is the winner ```css\n/ styles css / alert {\ncolor: red;\n} warning {\ncolor: yellow;\n}\n```\nFor an element that has both the alert and warning classes, the cascade would run through every other factor, including inheritance (none here) and specificity (neither rule is more specific than the other) Since the warning rule was the last one defined, and no other factor was able to determine which rule to apply, it's the one that gets applied to the element Assignment\n1 Complete the exercise in our [CSS exercises repository's `foundations/cascade` directory](https://github com/TheOdinProject/css-exercises/tree/main/foundations/cascade) (remember that the instructions are in the README):\n- `01-cascade-fix`\nNote: Solutions for these exercises can be found in the `solution` folder of each exercise Knowledge check\nThe following questions are an opportunity to reflect on key topics in this lesson If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge Between a rule that uses one class selector and a rule that uses three type selectors, which rule has the higher specificity Additional resources\nThis section contains helpful links to related content It isn't required, so consider it supplemental The CSS Cascade is a great, interactive read that goes a little more in detail about other factors that affect what CSS rules actually end up being applied",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9797,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "0f45087644e24e726e4d5223e55565b7",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
    "source_type": "git_repo",
    "title": "subsection {",
    "content": "are not expected to memorize or master this knowledge Between a rule that uses one class selector and a rule that uses three type selectors, which rule has the higher specificity Additional resources This section contains helpful links to related content It isn't required, so consider it supplemental The CSS Cascade is a great, interactive read that goes a little more in detail about other factors that affect what CSS rules actually end up being appliedCSS Specificity Explained from Kevin Powell goes through various specificity examples and gives some advice on avoiding wrestling with specificity CSS Specificity Calculator allows you to fill in your own selectors and have their specificity calculated and visualized Interactive Scrim on the CSS Cascade",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9797,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\the-cascade.md",
      "source_type": "git_repo"
    },
    "token_count": 130,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "1336227a2c2405e26b35f0591b2e8f83",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\intro-to-css.md",
    "source_type": "git_repo",
    "title": "` or `` for content in your projects, but as we learn more about CSS you'll find that there are many cases where the thing you need is just a container for other elements. Many of our exercises use plain``s for simplicity. Later lessons will go into much more depth about when it is appropriate to use the various HTML elements.\n\n\n\n### Selectors\n\nSelectors refer to the HTML elements to which CSS rules apply; they're what is actually being \"selected\" for each rule. The following subsections don't cover every selector available, but they're by far the most common and the ones you should get comfortable using first.\n\n#### Universal selector\n\nThe universal selector will select elements of every type (as in the whole document), hence the name \"universal\", and the syntax for it is a simple asterisk. In the example below, every element would have the `color: purple;` style applied to it.\n\n```css\n* {\n  color: purple;\n}\n```\n\n#### Type selectors\n\nA type selector (or element selector) will select all elements of the given element type, and the syntax is just the name of the element:\n\n```html\n\nHello, World!\nHello again!\nHi...\nOkay, bye.\n```\n\n```css\n/* styles.css */\n\ndiv {\n  color: white;\n}\n```\n\nHere, all three `` elements would be selected, while the `` element wouldn't be.\n\n#### Class selectors\n\nClass selectors will select all elements with the given class, which is just an attribute you place on an HTML element. Here's how you add a class to an HTML tag and select it in CSS:\n\n```html\n\nPlease agree to our terms of service.\n```\n\n```css\n/* styles.css */\n\n.alert-text {\n  color: red;\n}\n```\n\nNote the syntax for class selectors: a period immediately followed by the case-sensitive value of the class attribute. Classes aren't required to be specific to a particular element, so you can use the same class on as many elements as you want.\n\n\n\n#### Leading digits and classes\n\nClass selectors won’t work if the class name begins with a number. For example, if you give an element the class name `4lert-text`, using `.4lert-text` as a selector won’t match it.\n\n\n\nAnother thing you can do with the class attribute is to add multiple classes to a single element as a space-separated list, such as `class=\"alert-text severe-alert\"`. Since whitespace is used to separate class names like this, you should never use spaces for multi-worded names and should use a hyphen instead.\n\n#### ID selectors\n\nID selectors are similar to class selectors. They select an element with the given ID, which is another attribute you place on an HTML element. The major difference between classes and IDs is that an element can only have **one** ID. It cannot be repeated on a single page and should not contain any whitespace:\n\n```html\n\nMy Awesome 90's Page\n```\n\n```css\n/* styles.css */\n\n#title {\n  background-color: red;\n}\n```\n\nFor IDs, instead of a period, we use a hashtag immediately followed by the case-sensitive value of the ID attribute. A common pitfall is people overusing the ID attribute when they don't necessarily need to, and when classes will suffice. While there are cases where using an ID makes sense or is needed, such as taking advantage of specificity or having links redirect to a section on the current page, you should use IDs **sparingly** (if at all).\n\n\n\n#### Leading digits and IDs\n\nJust like class selectors, ID selectors can’t start with a number. For example, if you give an element the ID `7itle`, the selector `#7itle` won’t work - it’s not a valid CSS selector.\n\n\n\n#### The grouping selector\n\nWhat if we have two groups of elements that share some of their style declarations?\n\n```css\n.read {\n  color: white;\n  background-color: black;\n  /* several unique declarations */\n}\n\n.unread {\n  color: white;\n  background-color: black;\n  /* several unique declarations */\n}\n```\n\nBoth our `.read` and `.unread` selectors share the `color: white;` and `background-color: black;` declarations, but otherwise have several of their own unique declarations. To cut down on the repetition, we can group these two selectors together as a comma-separated list:\n\n```css\n.read,\n.unread {\n  color: white;\n  background-color: black;\n}\n\n.read {\n  /* several unique declarations */\n}\n\n.unread {\n  /* several unique declarations */\n}\n```\n\nBoth of the examples above (with and without grouping) will have the same result, but the second example reduces the repetition of declarations and makes it easier to edit either the `color` or `background-color` for both classes at once.\n\n#### Chaining selectors\n\nAnother way to use selectors is to chain them as a list without any separation. Let's say we had the following HTML:\n\n```html\n\nLatest Posts\nThis is where a preview for a post might go.\n\n```\n\nWe have two elements with the `subsection` class that have some sort of unique styles, but what if we only want to apply a separate rule to the element that also has `header` as a second class? Well, we could chain both the class selectors together in our CSS like so:\n\n```css\n.subsection.header {\n  color: red;\n}\n```\n\nWhat `.subsection.header` does is it selects any element that has both the `subsection` *and* `header` classes. Notice how there isn't any space between the `.subsection` and `.header` class selectors. This syntax basically works for chaining any combination of selectors, except for chaining more than one [type selector](#type-selectors).\n\nThis can also be used to chain a class and an ID, as shown below:\n\n```html\n\nLatest Posts\n\n    This is where a preview for a post might go.\n  \n\n```\n\nYou can take the two elements above and combine them with the following:\n\n```css\n.subsection.header {\n  color: red;\n}\n\n.subsection#preview {\n  color: blue;\n}\n```\n\nIn general, you can't chain more than one type selector since an element can’t be two different types at once. For example, chaining two type selectors like `div` and `p` would give us the selector `divp`, which wouldn't work since the selector would try to find a literal `` element, which doesn’t exist.\n\n#### Descendant combinator\n\nCombinators allow us to combine multiple selectors differently than either grouping or chaining them, as they show a relationship between the selectors. There are four types of combinators in total, but for right now we're going to only show you the **descendant combinator**, which is represented in CSS by a single space between selectors. A descendant combinator will only cause elements that match the last selector to be selected if they also have an ancestor (parent, grandparent, etc.) that matches the previous selector.\n\nSo something like `.ancestor .child` would select an element with the class `child` if it has an ancestor with the class `ancestor`. Another way to think of it is that `child` will only be selected if it is nested inside `ancestor`, regardless of how deep that nesting is. Take a quick look at the example below and see if you can tell which elements would be selected based on the CSS rule provided:\n\n```html\n\n\n\n\n\n\n\n```\n\n```css\n/* styles.css */\n\n.ancestor .contents {\n  /* some declarations */\n}\n```\n\nIn the above example, the first two elements with the `contents` class (on lines 4 and 5) would be selected, but the last element (on line 9) wouldn't be. Was your guess correct?\n\nThere's really no limit to how many combinators you can add to a rule, so `.one .two .three .four` would be totally valid. This would just select an element that has a class of `four` if it has an ancestor with a class of `three`, and if that ancestor has its own ancestor with a class of `two`, and so on. You generally want to avoid trying to select elements that need this level of nesting, though, as it can get pretty confusing and long, and it can cause issues when it comes to specificity.\n\n### Properties to get started with\n\nThere are some CSS properties that you're going to be using all the time, or at the very least more often than not. We're going to introduce you to several of these properties, though this is by no means a complete list. Learning the following properties will be enough to help get you started.\n\n#### Color and background-color\n\nThe `color` property sets an element's text color, while `background-color` sets, well, the background color of an element. I guess we're done here?\n\nAlmost. Both of these properties can accept one of several kinds of values. A common one is a keyword, such as an actual color name like `red` or the `transparent` keyword. They also accept HEX, RGB, and HSL values, which you may be familiar with if you've ever used a photoshop program or a site where you could customize your profile colors.\n\n```css\np {\n  /* hex example: */\n  color: #1100ff;\n}\n\np {\n  /* rgb example: */\n  color: rgb(100, 0, 127);\n}\n\np {\n  /* hsl example: */\n  color: hsl(15, 82%, 56%);\n}\n```\n\nTake a quick look at [CSS Legal Color Values](https://www.w3schools.com/cssref/css_colors_legal.asp) to see how you can adjust the opacity of these colors by adding an alpha value.\n\n#### Typography basics and text-align\n\n`font-family` can be a single value or a comma-separated list of values that determine what font an element uses. Each font will fall into one of two categories, either a \"font family name\" like `\"Times New Roman\"` (we use quotes due to the whitespace between words) or a \"generic family name\" like `serif` (generic family names never use quotes).\n\nIf a browser cannot find or does not support the first font in a list, it will use the next one, then the next one and so on until it finds a supported and valid font. This is why it's best practice to include a list of values for this property, starting with the font you want to be used most and ending with a generic font family as a fallback, e.g. `font-family: \"Times New Roman\", serif;`\n\n`font-size` will, as the property name suggests, set the size of the font. When giving a value to this property, the value should not contain any whitespace, e.g. `font-size: 22px` has no space between \"22\" and \"px\".\n\n`font-weight` affects the boldness of text, assuming the font supports the specified weight. This value can be a keyword, e.g. `font-weight: bold`, or a number between 1 and 1000, e.g. `font-weight: 700` (the equivalent of `bold`). Usually, the numeric values will be in increments of 100 up to 900, though this will depend on the font.\n\n`text-align` will align text horizontally within an element, and you can use the common keywords you may have come across in word processors as the value for this property, e.g. `text-align: center`.\n\n#### Image height and width\n\nImages aren't the only elements that we can adjust the height and width on, but we want to focus on them specifically in this case.\n\nBy default, an `` element's `height` and `width` values will be the same as the actual image file's height and width. If you wanted to adjust the size of the image without causing it to lose its proportions, you would use a value of \"auto\" for the `height` property and adjust the `width` value:\n\n```css\nimg {\n  height: auto;\n  width: 500px;\n}\n```\n\nFor example, if an image's original size was 500px height and 1000px width, using the above CSS would result in a height of 250px.\n\nThese properties work in conjunction with the height and width attributes in the HTML. It’s best to include both of these properties and the HTML attributes for image elements, even if you don’t plan on adjusting the values from the image file’s original ones. When these values aren’t included, if an image takes longer to load than the rest of the page contents, it won’t take up any space on the page at first but will suddenly cause a drastic shift of the other page contents once it does load in. Explicitly stating a `height` and `width` prevents this from happening, as space will be “reserved” on the page and appear blank until the image loads.\n\n### Adding CSS to HTML\n\nNow that we've learned some basic syntax, you might be wondering *how* to add all this CSS to our HTML. There are three methods to do so.\n\n#### External CSS\n\nExternal CSS is the most common method you will come across, and it involves creating a separate file for the CSS and linking it inside of an HTML's opening and closing `` tags with a void `` element:\n\n```html\n\n\n\n\n```\n\n```css\n/* styles.css */\n\ndiv {\n  color: white;\n  background-color: black;\n}\n\np {\n  color: red;\n}\n```\n\nFirst, we add a void `` element inside of the opening and closing `` tags of the HTML file. The `href` attribute is the location of the CSS file, either an absolute URL or, what you'll be utilizing, a URL relative to the location of the HTML file. In our example above, we are assuming both files are located in the same directory. The `rel` attribute is required, and it specifies the relationship between the HTML file and the linked file.\n\nThen inside of the newly created `styles.css` file, we have the selector (the `div` and `p`), followed by a pair of opening and closing curly braces, which create a \"declaration block\". Finally, we place any declarations inside of the declaration block. `color: white;` is one declaration, with `color` being the property and `white` being the value, and `background-color: black;` is another declaration.\n\nA note on file names: `styles.css` is just what we went with as the file name here. You can name the file whatever you want as long as the file type is `.css`, though \"style\" or \"styles\" is most commonly used.\n\nA couple of the pros to this method are:\n\n1. It keeps our HTML and CSS separated, which results in the HTML file being smaller and making things look cleaner.\n1. We only need to edit the CSS in *one* place, which is especially handy for websites with many pages that all share similar styles.\n\n#### Internal CSS\n\nInternal CSS (or embedded CSS) involves adding the CSS within the HTML file itself instead of creating a completely separate file. With the internal method, you place all the rules inside of a pair of opening and closing `\n\n\n  ...\n\n```\n\nThis method can be useful for adding unique styles to a *single page* of a website, but it doesn't keep things separate like the external method, and depending on how many rules and declarations there are it can cause the HTML file to get pretty big.\n\n#### Inline CSS\n\nInline CSS makes it possible to add styles directly to HTML elements, though this method isn't as recommended:\n\n```html\n\n...\n\n```\n\nThe first thing to note is that we don't actually use any selectors here, since the styles are being added directly to the opening `` tag itself. Next, we have the `style=` attribute, with its value within the pair of quotation marks being the declarations.\n\nIf you need to add a *unique* style for a *single* element, this method can work just fine. Generally, though, this isn't exactly a recommended way for adding CSS to HTML for a few reasons:\n\n- It can quickly become pretty messy once you start adding a *lot* of declarations to a single element, causing your HTML file to become unnecessarily bloated.\n- If you want many elements to have the same style, you would have to copy and paste the same style to each individual element, causing lots of unnecessary repetition and more bloat.\n- Any inline CSS will override the other two methods, which can cause unexpected results. (While we won't dive into it here, this can actually be taken advantage of.)\n\n### Assignment\n\n\n\n1. Go to our [CSS exercises repository](https://github.com/TheOdinProject/css-exercises) and read the README file.\n1. Then, once you know how to use the exercises, navigate to the [CSS exercises repository's `foundations/intro-to-css` directory](https://github.com/TheOdinProject/css-exercises/tree/main/foundations/intro-to-css). Review each README file prior to completing the following exercises in order:\n\n    - `01-css-methods`\n    - `02-class-id-selectors`\n    - `03-grouping-selectors`\n    - `04-chaining-selectors`\n    - `05-descendant-combinator`\n\n    Note: Solutions for these exercises can be found in the `solution` folder of each exercise.\n\n\n\n### Knowledge check\n\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\n\n- [What is the syntax for class and ID selectors?](#class-selectors)\n- [How would you apply a single rule to two different selectors?](#the-grouping-selector)\n- [Given an element that has an id of `title` and a class of `primary`, how would you use both attributes for a single rule?](#chaining-selectors)\n- [What does the descendant combinator do?](#descendant-combinator-description)\n- [What are the names of the three ways to add CSS to HTML?](#adding-css-to-html)\n- [What are the main differences between the three ways of adding CSS to HTML?](#external-css)\n\n### Additional resources\n\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\n\n- [Mozilla CSS values and units](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units) can be used to learn the various types of values possible in absolute or relative terms.\n- [An interactive Scrim](https://scrimba.com/scrim/co12d4cf99cf2776f19e84a9d) which covers much of the material in the lesson in an interactive form.",
    "content": "Introduction\nIn the previous lesson, you learned how to write the HTML that determines how a web page is structured The next step is to make that structure look good with some style, which is exactly what CSS is for In the next few lessons, we're going to focus on what we believe are some foundational CSS concepts, things that everyone should know from the beginning — whether they are just starting out or need a refresher Lesson overview\nThis section contains a general overview of topics that you will learn in this lesson Add styles to HTML with CSS Understand how to use the class and ID attributes Add styles to specific elements using the correct selectors Basic syntax\nAt the most basic level, CSS is made up of various rules Each rule is made up of a selector (more on this in a bit) and a semicolon-separated list of declarations, with each of those declarations being made up of a property–value pair #### Semantic HTML\nA `` is one of the basic HTML elements It is an empty container In general, it is best to use other tags such as `` or `` for content in your projects, but as we learn more about CSS you'll find that there are many cases where the thing you need is just a container for other elements Many of our exercises use plain``s for simplicity Later lessons will go into much more depth about when it is appropriate to use the various HTML elements ### Selectors\nSelectors refer to the HTML elements to which CSS rules apply; they're what is actually being \"selected\" for each rule The following subsections don't cover every selector available, but they're by far the most common and the ones you should get comfortable using first #### Universal selector\nThe universal selector will select elements of every type (as in the whole document), hence the name \"universal\", and the syntax for it is a simple asterisk In the example below, every element would have the `color: purple;` style applied to it ```css\n* {\ncolor: purple;\n}\n```\n#### Type selectors\nA type selector (or element selector) will select all elements of the given element type, and the syntax is just the name of the element:\n```html\nHello, World Hello again Hi Okay, bye ```\n```css\n/* styles css */\ndiv {\ncolor: white;\n}\n```\nHere, all three `` elements would be selected, while the `` element wouldn't be",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20350,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\intro-to-css.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "1f04845b14300a25c8916e33f9522d4e",
    "source_file": "corpus\\git_repos\\odin-project\\foundations\\html_css\\css-foundations\\intro-to-css.md",
    "source_type": "git_repo",
    "title": "` or `` for content in your projects, but as we learn more about CSS you'll find that there are many cases where the thing you need is just a container for other elements. Many of our exercises use plain``s for simplicity. Later lessons will go into much more depth about when it is appropriate to use the various HTML elements.\n\n\n\n### Selectors\n\nSelectors refer to the HTML elements to which CSS rules apply; they're what is actually being \"selected\" for each rule. The following subsections don't cover every selector available, but they're by far the most common and the ones you should get comfortable using first.\n\n#### Universal selector\n\nThe universal selector will select elements of every type (as in the whole document), hence the name \"universal\", and the syntax for it is a simple asterisk. In the example below, every element would have the `color: purple;` style applied to it.\n\n```css\n* {\n  color: purple;\n}\n```\n\n#### Type selectors\n\nA type selector (or element selector) will select all elements of the given element type, and the syntax is just the name of the element:\n\n```html\n\nHello, World!\nHello again!\nHi...\nOkay, bye.\n```\n\n```css\n/* styles.css */\n\ndiv {\n  color: white;\n}\n```\n\nHere, all three `` elements would be selected, while the `` element wouldn't be.\n\n#### Class selectors\n\nClass selectors will select all elements with the given class, which is just an attribute you place on an HTML element. Here's how you add a class to an HTML tag and select it in CSS:\n\n```html\n\nPlease agree to our terms of service.\n```\n\n```css\n/* styles.css */\n\n.alert-text {\n  color: red;\n}\n```\n\nNote the syntax for class selectors: a period immediately followed by the case-sensitive value of the class attribute. Classes aren't required to be specific to a particular element, so you can use the same class on as many elements as you want.\n\n\n\n#### Leading digits and classes\n\nClass selectors won’t work if the class name begins with a number. For example, if you give an element the class name `4lert-text`, using `.4lert-text` as a selector won’t match it.\n\n\n\nAnother thing you can do with the class attribute is to add multiple classes to a single element as a space-separated list, such as `class=\"alert-text severe-alert\"`. Since whitespace is used to separate class names like this, you should never use spaces for multi-worded names and should use a hyphen instead.\n\n#### ID selectors\n\nID selectors are similar to class selectors. They select an element with the given ID, which is another attribute you place on an HTML element. The major difference between classes and IDs is that an element can only have **one** ID. It cannot be repeated on a single page and should not contain any whitespace:\n\n```html\n\nMy Awesome 90's Page\n```\n\n```css\n/* styles.css */\n\n#title {\n  background-color: red;\n}\n```\n\nFor IDs, instead of a period, we use a hashtag immediately followed by the case-sensitive value of the ID attribute. A common pitfall is people overusing the ID attribute when they don't necessarily need to, and when classes will suffice. While there are cases where using an ID makes sense or is needed, such as taking advantage of specificity or having links redirect to a section on the current page, you should use IDs **sparingly** (if at all).\n\n\n\n#### Leading digits and IDs\n\nJust like class selectors, ID selectors can’t start with a number. For example, if you give an element the ID `7itle`, the selector `#7itle` won’t work - it’s not a valid CSS selector.\n\n\n\n#### The grouping selector\n\nWhat if we have two groups of elements that share some of their style declarations?\n\n```css\n.read {\n  color: white;\n  background-color: black;\n  /* several unique declarations */\n}\n\n.unread {\n  color: white;\n  background-color: black;\n  /* several unique declarations */\n}\n```\n\nBoth our `.read` and `.unread` selectors share the `color: white;` and `background-color: black;` declarations, but otherwise have several of their own unique declarations. To cut down on the repetition, we can group these two selectors together as a comma-separated list:\n\n```css\n.read,\n.unread {\n  color: white;\n  background-color: black;\n}\n\n.read {\n  /* several unique declarations */\n}\n\n.unread {\n  /* several unique declarations */\n}\n```\n\nBoth of the examples above (with and without grouping) will have the same result, but the second example reduces the repetition of declarations and makes it easier to edit either the `color` or `background-color` for both classes at once.\n\n#### Chaining selectors\n\nAnother way to use selectors is to chain them as a list without any separation. Let's say we had the following HTML:\n\n```html\n\nLatest Posts\nThis is where a preview for a post might go.\n\n```\n\nWe have two elements with the `subsection` class that have some sort of unique styles, but what if we only want to apply a separate rule to the element that also has `header` as a second class? Well, we could chain both the class selectors together in our CSS like so:\n\n```css\n.subsection.header {\n  color: red;\n}\n```\n\nWhat `.subsection.header` does is it selects any element that has both the `subsection` *and* `header` classes. Notice how there isn't any space between the `.subsection` and `.header` class selectors. This syntax basically works for chaining any combination of selectors, except for chaining more than one [type selector](#type-selectors).\n\nThis can also be used to chain a class and an ID, as shown below:\n\n```html\n\nLatest Posts\n\n    This is where a preview for a post might go.\n  \n\n```\n\nYou can take the two elements above and combine them with the following:\n\n```css\n.subsection.header {\n  color: red;\n}\n\n.subsection#preview {\n  color: blue;\n}\n```\n\nIn general, you can't chain more than one type selector since an element can’t be two different types at once. For example, chaining two type selectors like `div` and `p` would give us the selector `divp`, which wouldn't work since the selector would try to find a literal `` element, which doesn’t exist.\n\n#### Descendant combinator\n\nCombinators allow us to combine multiple selectors differently than either grouping or chaining them, as they show a relationship between the selectors. There are four types of combinators in total, but for right now we're going to only show you the **descendant combinator**, which is represented in CSS by a single space between selectors. A descendant combinator will only cause elements that match the last selector to be selected if they also have an ancestor (parent, grandparent, etc.) that matches the previous selector.\n\nSo something like `.ancestor .child` would select an element with the class `child` if it has an ancestor with the class `ancestor`. Another way to think of it is that `child` will only be selected if it is nested inside `ancestor`, regardless of how deep that nesting is. Take a quick look at the example below and see if you can tell which elements would be selected based on the CSS rule provided:\n\n```html\n\n\n\n\n\n\n\n```\n\n```css\n/* styles.css */\n\n.ancestor .contents {\n  /* some declarations */\n}\n```\n\nIn the above example, the first two elements with the `contents` class (on lines 4 and 5) would be selected, but the last element (on line 9) wouldn't be. Was your guess correct?\n\nThere's really no limit to how many combinators you can add to a rule, so `.one .two .three .four` would be totally valid. This would just select an element that has a class of `four` if it has an ancestor with a class of `three`, and if that ancestor has its own ancestor with a class of `two`, and so on. You generally want to avoid trying to select elements that need this level of nesting, though, as it can get pretty confusing and long, and it can cause issues when it comes to specificity.\n\n### Properties to get started with\n\nThere are some CSS properties that you're going to be using all the time, or at the very least more often than not. We're going to introduce you to several of these properties, though this is by no means a complete list. Learning the following properties will be enough to help get you started.\n\n#### Color and background-color\n\nThe `color` property sets an element's text color, while `background-color` sets, well, the background color of an element. I guess we're done here?\n\nAlmost. Both of these properties can accept one of several kinds of values. A common one is a keyword, such as an actual color name like `red` or the `transparent` keyword. They also accept HEX, RGB, and HSL values, which you may be familiar with if you've ever used a photoshop program or a site where you could customize your profile colors.\n\n```css\np {\n  /* hex example: */\n  color: #1100ff;\n}\n\np {\n  /* rgb example: */\n  color: rgb(100, 0, 127);\n}\n\np {\n  /* hsl example: */\n  color: hsl(15, 82%, 56%);\n}\n```\n\nTake a quick look at [CSS Legal Color Values](https://www.w3schools.com/cssref/css_colors_legal.asp) to see how you can adjust the opacity of these colors by adding an alpha value.\n\n#### Typography basics and text-align\n\n`font-family` can be a single value or a comma-separated list of values that determine what font an element uses. Each font will fall into one of two categories, either a \"font family name\" like `\"Times New Roman\"` (we use quotes due to the whitespace between words) or a \"generic family name\" like `serif` (generic family names never use quotes).\n\nIf a browser cannot find or does not support the first font in a list, it will use the next one, then the next one and so on until it finds a supported and valid font. This is why it's best practice to include a list of values for this property, starting with the font you want to be used most and ending with a generic font family as a fallback, e.g. `font-family: \"Times New Roman\", serif;`\n\n`font-size` will, as the property name suggests, set the size of the font. When giving a value to this property, the value should not contain any whitespace, e.g. `font-size: 22px` has no space between \"22\" and \"px\".\n\n`font-weight` affects the boldness of text, assuming the font supports the specified weight. This value can be a keyword, e.g. `font-weight: bold`, or a number between 1 and 1000, e.g. `font-weight: 700` (the equivalent of `bold`). Usually, the numeric values will be in increments of 100 up to 900, though this will depend on the font.\n\n`text-align` will align text horizontally within an element, and you can use the common keywords you may have come across in word processors as the value for this property, e.g. `text-align: center`.\n\n#### Image height and width\n\nImages aren't the only elements that we can adjust the height and width on, but we want to focus on them specifically in this case.\n\nBy default, an `` element's `height` and `width` values will be the same as the actual image file's height and width. If you wanted to adjust the size of the image without causing it to lose its proportions, you would use a value of \"auto\" for the `height` property and adjust the `width` value:\n\n```css\nimg {\n  height: auto;\n  width: 500px;\n}\n```\n\nFor example, if an image's original size was 500px height and 1000px width, using the above CSS would result in a height of 250px.\n\nThese properties work in conjunction with the height and width attributes in the HTML. It’s best to include both of these properties and the HTML attributes for image elements, even if you don’t plan on adjusting the values from the image file’s original ones. When these values aren’t included, if an image takes longer to load than the rest of the page contents, it won’t take up any space on the page at first but will suddenly cause a drastic shift of the other page contents once it does load in. Explicitly stating a `height` and `width` prevents this from happening, as space will be “reserved” on the page and appear blank until the image loads.\n\n### Adding CSS to HTML\n\nNow that we've learned some basic syntax, you might be wondering *how* to add all this CSS to our HTML. There are three methods to do so.\n\n#### External CSS\n\nExternal CSS is the most common method you will come across, and it involves creating a separate file for the CSS and linking it inside of an HTML's opening and closing `` tags with a void `` element:\n\n```html\n\n\n\n\n```\n\n```css\n/* styles.css */\n\ndiv {\n  color: white;\n  background-color: black;\n}\n\np {\n  color: red;\n}\n```\n\nFirst, we add a void `` element inside of the opening and closing `` tags of the HTML file. The `href` attribute is the location of the CSS file, either an absolute URL or, what you'll be utilizing, a URL relative to the location of the HTML file. In our example above, we are assuming both files are located in the same directory. The `rel` attribute is required, and it specifies the relationship between the HTML file and the linked file.\n\nThen inside of the newly created `styles.css` file, we have the selector (the `div` and `p`), followed by a pair of opening and closing curly braces, which create a \"declaration block\". Finally, we place any declarations inside of the declaration block. `color: white;` is one declaration, with `color` being the property and `white` being the value, and `background-color: black;` is another declaration.\n\nA note on file names: `styles.css` is just what we went with as the file name here. You can name the file whatever you want as long as the file type is `.css`, though \"style\" or \"styles\" is most commonly used.\n\nA couple of the pros to this method are:\n\n1. It keeps our HTML and CSS separated, which results in the HTML file being smaller and making things look cleaner.\n1. We only need to edit the CSS in *one* place, which is especially handy for websites with many pages that all share similar styles.\n\n#### Internal CSS\n\nInternal CSS (or embedded CSS) involves adding the CSS within the HTML file itself instead of creating a completely separate file. With the internal method, you place all the rules inside of a pair of opening and closing `\n\n\n  ...\n\n```\n\nThis method can be useful for adding unique styles to a *single page* of a website, but it doesn't keep things separate like the external method, and depending on how many rules and declarations there are it can cause the HTML file to get pretty big.\n\n#### Inline CSS\n\nInline CSS makes it possible to add styles directly to HTML elements, though this method isn't as recommended:\n\n```html\n\n...\n\n```\n\nThe first thing to note is that we don't actually use any selectors here, since the styles are being added directly to the opening `` tag itself. Next, we have the `style=` attribute, with its value within the pair of quotation marks being the declarations.\n\nIf you need to add a *unique* style for a *single* element, this method can work just fine. Generally, though, this isn't exactly a recommended way for adding CSS to HTML for a few reasons:\n\n- It can quickly become pretty messy once you start adding a *lot* of declarations to a single element, causing your HTML file to become unnecessarily bloated.\n- If you want many elements to have the same style, you would have to copy and paste the same style to each individual element, causing lots of unnecessary repetition and more bloat.\n- Any inline CSS will override the other two methods, which can cause unexpected results. (While we won't dive into it here, this can actually be taken advantage of.)\n\n### Assignment\n\n\n\n1. Go to our [CSS exercises repository](https://github.com/TheOdinProject/css-exercises) and read the README file.\n1. Then, once you know how to use the exercises, navigate to the [CSS exercises repository's `foundations/intro-to-css` directory](https://github.com/TheOdinProject/css-exercises/tree/main/foundations/intro-to-css). Review each README file prior to completing the following exercises in order:\n\n    - `01-css-methods`\n    - `02-class-id-selectors`\n    - `03-grouping-selectors`\n    - `04-chaining-selectors`\n    - `05-descendant-combinator`\n\n    Note: Solutions for these exercises can be found in the `solution` folder of each exercise.\n\n\n\n### Knowledge check\n\nThe following questions are an opportunity to reflect on key topics in this lesson. If you can't answer a question, click on it to review the material, but keep in mind you are not expected to memorize or master this knowledge.\n\n- [What is the syntax for class and ID selectors?](#class-selectors)\n- [How would you apply a single rule to two different selectors?](#the-grouping-selector)\n- [Given an element that has an id of `title` and a class of `primary`, how would you use both attributes for a single rule?](#chaining-selectors)\n- [What does the descendant combinator do?](#descendant-combinator-description)\n- [What are the names of the three ways to add CSS to HTML?](#adding-css-to-html)\n- [What are the main differences between the three ways of adding CSS to HTML?](#external-css)\n\n### Additional resources\n\nThis section contains helpful links to related content. It isn't required, so consider it supplemental.\n\n- [Mozilla CSS values and units](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units) can be used to learn the various types of values possible in absolute or relative terms.\n- [An interactive Scrim](https://scrimba.com/scrim/co12d4cf99cf2776f19e84a9d) which covers much of the material in the lesson in an interactive form.",
    "content": "the `color: purple;` style applied to it ```css * { color: purple; } ``` #### Type selectors A type selector (or element selector) will select all elements of the given element type, and the syntax is just the name of the element: ```html Hello, World Hello again Hi Okay, bye ``` ```css /* styles css */ div { color: white; } ``` Here, all three `` elements would be selected, while the `` element wouldn't be#### Class selectors\nClass selectors will select all elements with the given class, which is just an attribute you place on an HTML element Here's how you add a class to an HTML tag and select it in CSS:\n```html\nPlease agree to our terms of service ```\n```css\n/* styles css */ alert-text {\ncolor: red;\n}\n```\nNote the syntax for class selectors: a period immediately followed by the case-sensitive value of the class attribute Classes aren't required to be specific to a particular element, so you can use the same class on as many elements as you want #### Leading digits and classes\nClass selectors won’t work if the class name begins with a number For example, if you give an element the class name `4lert-text`, using ` 4lert-text` as a selector won’t match it Another thing you can do with the class attribute is to add multiple classes to a single element as a space-separated list, such as `class=\"alert-text severe-alert\"` Since whitespace is used to separate class names like this, you should never use spaces for multi-worded names and should use a hyphen instead #### ID selectors\nID selectors are similar to class selectors They select an element with the given ID, which is another attribute you place on an HTML element The major difference between classes and IDs is that an element can only have **one** ID It cannot be repeated on a single page and should not contain any whitespace:\n```html\nMy Awesome 90's Page\n```\n```css\n/* styles css */\n#title {\nbackground-color: red;\n}\n```\nFor IDs, instead of a period, we use a hashtag immediately followed by the case-sensitive value of the ID attribute A common pitfall is people overusing the ID attribute when they don't necessarily need to, and when classes will suffice",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 20350,
      "relative_path": "git_repos\\odin-project\\foundations\\html_css\\css-foundations\\intro-to-css.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 10
  }
]