[
  {
    "id": "4c24bed9897610e8c4897799cd465882",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63ee354c0d8d4841c3a70921\ntitle: CSS Foundations Lesson H\nchallengeType: 19\ndashedName: css-foundations-lesson-h\n--description--\nInline CSS makes it possible to add styles directly to HTML elements, though this method isn’t as recommended:\n```html\n...\n```\nThe first thing to note is that there aren't any selectors here, since the styles are being added directly to the opening <div> tag itself. Next, you have the style attribute, with its value within the pair of quotation marks being the declarations.\nIf you need to add a unique style for a single element, this method can work just fine. Generally, though, this isn’t exactly a recommended way for adding CSS to HTML for a few reasons:\nIt can quickly become pretty messy once you start adding a lot of declarations to a single element, causing your HTML file to become unnecessarily bloated.\nIf you want many elements to have the same style, you would have to copy + paste the same style to each individual element, causing lots of unnecessary repetition and more bloat.\nAny inline CSS will override the other two methods, which can cause unexpected results. (While you won’t dive into it here, this can actually be taken advantage of).\n--questions--\n--text--\nWhich of the following is the main disadvantage of using inline CSS?\n--answers--\nIt can quickly become pretty messy once you start adding a lot of declarations to a single element, causing your HTML file to become unnecessarily bloated.\nIt requires using selectors, which can be complicated for beginners.\nAny inline CSS will override the other two methods (internal and external), which can cause unexpected results.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1797,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f63964c6603df7fa185122ada53abfc3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63ee353e0d8d4841c3a7091f\ntitle: CSS Foundations Lesson F\nchallengeType: 19\ndashedName: css-foundations-lesson-f\n--description--\nOkay, you went over quite a bit so far The only thing left for now is to go over how to add all this CSS to your HTML There are three methods to do so External CSS is the most common method you will come across, and it involves creating a separate file for the CSS and linking it inside of an HTML’s opening and closing <head> tags with a <link> element (which is a void element and doesn't require a closing tag):\nFirst, you add a void element <link> tag inside of the opening and closing <head> tags of the HTML file The href attribute is the location of the CSS file, either an absolute URL or, what you’ll be utilizing, a URL relative to the location of the HTML file In the example above, you are assuming both files are located in the same directory The rel attribute is required, and it specifies the relationship between the HTML file and the linked file Then inside of the newly created styles css file, you have the selector (the div and p), followed by a pair of opening and closing curly braces, which create a “declaration block” Finally, you place any declarations inside of the declaration block color: white; is one declaration, with color being the property and white being the value, and background-color: black; is another declaration A note on file names: styles css is just what you went with as the file name here You can name the file whatever you want as long as the file type is css, though “style” or “styles” is most commonly used A couple of the pros to this method are:\nIt keeps your HTML and CSS separated, which results in the HTML file being smaller and making things look cleaner You only need to edit the CSS in one place, which is especially handy for websites with many pages that all share similar styles --questions--\n--text--\nWhich of the following best describes the purpose of the rel attribute in the <link> element when linking an external CSS file to an HTML file --answers--\nIt specifies the location of the CSS file relative to the location of the HTML file It specifies the relationship between the HTML file and the linked file It specifies the type of file being linked (e g \"stylesheet\") --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cc26415a900c453b7e4c552054c46075",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-d.md",
    "source_type": "git_repo",
    "title": "Chaining Selectors",
    "content": "id: 63ee3ff1381756f9716727f2\ntitle: CSS Foundations Exercise D\nchallengeType: 25\ndashedName: css-foundations-exercise-d\n--description--\nWith this exercise, we've provided you a completed HTML file, so you will only have to edit the CSS file For this exercise, it's more important to understand how chaining different selectors works than how to actually add the attributes You should see a width of 300px on the avatar and proportioned class You should give it a height so that it retains its original square proportions (don't hardcode in a pixel value for the height ) You should give the elements with both the avatar and distorted classes a width of 200px You should give it a height twice as big as it's width --hints--\nYou should have a width of 300px on the avatar and proportioned class js\nconst style = new __helpers CSSHelp(document) getStyle(` avatar proportioned`) || new __helpers CSSHelp(document) getStyle(` proportioned avatar`);\nassert(style width === '300px');\nYou should have a height of auto on the avatar and proportioned class js\nconst style = new __helpers CSSHelp(document) getStyle(` avatar proportioned`) || new __helpers CSSHelp(document) getStyle(` proportioned avatar`)\nassert(style height === 'auto');\nYou should use a chaining selector on the avatar and proportioned class js\nconst style = new __helpers CSSHelp(document) getStyle(` avatar proportioned`) || new __helpers CSSHelp(document) getStyle(` proportioned avatar`);\nassert(style);\nYou should have a width of 200px on the avatar and distorted class js\nconst style = new __helpers CSSHelp(document) getStyle(` avatar distorted`) || new __helpers CSSHelp(document) getStyle(` distorted avatar`);\nassert(style width === '200px');\nYou should use a chaining selector on the avatar and distorted class js\nconst style = new __helpers CSSHelp(document) getStyle(` avatar distorted`) || new __helpers CSSHelp(document) getStyle(` distorted avatar`);\nassert(style);\nYou should have a height two times the width on the avatar and distorted class js\nconst style = new __helpers CSSHelp(document) getStyle(` avatar distorted`) || new __helpers CSSHelp(document) getStyle(` distorted avatar`);\nassert(style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-d.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e13acaec72d8f54b3f3cab359e667aea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-d.md",
    "source_type": "git_repo",
    "title": "Chaining Selectors",
    "content": "avatar distorted`) || new __helpers CSSHelp(document) getStyle(` distorted avatar`); assert(style width === '200px'); You should use a chaining selector on the avatar and distorted class js const style = new __helpers CSSHelp(document) getStyle(` avatar distorted`) || new __helpers CSSHelp(document) getStyle(` distorted avatar`); assert(style); You should have a height two times the width on the avatar and distorted class js const style = new __helpers CSSHelp(document) getStyle(` avatar distorted`) || new __helpers CSSHelp(document) getStyle(` distorted avatar`); assert(styleheight === '400px');\n--seed--\n--seed-contents--\n```css\n```\n```html\nChaining Selectors\n```\n```css\n```\n--solutions--\n```html\nChaining Selectors\n```\n```css avatar proportioned {\nheight: auto;\nwidth: 300px;\n} avatar distorted {\nheight: 400px;\nwidth: 200px;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-d.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e21ad17970d946293ddae7284a7daa70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-b.md",
    "source_type": "git_repo",
    "title": "Class and ID Selectors",
    "content": "id: 63ee3fe4381756f9716727f0\ntitle: CSS Foundations Exercise B\nchallengeType: 25\ndashedName: css-foundations-exercise-b\n--description--\nObjective: There are several elements in the HTML file provided, which you will have to add either class or ID attributes to You will then have to add rules in the CSS file provided using the correct selector syntax User Stories\nYou should see a yellow background for all odd numbered elements in the list You should have a class selector used for all odd numbered elements in the list You should see that the second element in the list has blue text and a font-size of 36px The font-size and text color on the second element should be set by using an id attribute You should see that the third element in the list has a font-size of 24px The font-size on the third element should be set by using a class attribute You should see that the fourth element in the list has a red background, a font-size of 24px, and a font-weight of bold The font-size of the fourth element should be set with a class attribute The font-weight and the color should be set with an id attribute --hints--\nEvery odd element should have a class attribute ```js\nconst p = Array from(document querySelectorAll('P'));\nconst everyPHasClass = p every((paragraph) => paragraph classList length > 0);\nassert(everyPHasClass);\n```\nYour odd elements should have a background-color of yellow ```js\nconst p = Array from(document querySelectorAll('P'));\nconst everyPHasBackgroundColor = p every((paragraph) => {\nconst style = getComputedStyle(paragraph);\nreturn style backgroundColor === 'rgb(255, 255, 0)';\n})\nassert equal(everyPHasBackgroundColor, true);\n```\nYour second element should have blue text and a font-size of 36px ```js\nconst secondElementId = document querySelectorAll('div') [0] id;\nconst style = new __helpers CSSHelp(document) getStyle(#${secondElementId});\nassert equal(style color, 'blue');\nassert equal(style fontSize, '36px');\n```\nYour third element should have text and a font-size of 24px ```js\nconst thirdElement = document querySelectorAll('p') [1];\nassert(thirdElement innerText length > 0);\nconst thirdElementClasses = Array from(thirdElement classList values());\nassert(thirdElementClasses",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4797,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-b.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b79eeab8664767d49b17c62632c253be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-b.md",
    "source_type": "git_repo",
    "title": "Class and ID Selectors",
    "content": "=== 'rgb(255, 255, 0)'; }) assert equal(everyPHasBackgroundColor, true); ``` Your second element should have blue text and a font-size of 36px ```js const secondElementId = document querySelectorAll('div') [0] id; const style = new __helpers CSSHelp(document) getStyle(#${secondElementId}); assert equal(style color, 'blue'); assert equal(style fontSize, '36px'); ``` Your third element should have text and a font-size of 24px ```js const thirdElement = document querySelectorAll('p') [1]; assert(thirdElement innerText length > 0); const thirdElementClasses = Array from(thirdElement classList values()); assert(thirdElementClassessome(thirdElementClass => {\nconst style = new __helpers CSSHelp(document) getStyle( ${thirdElementClass});\nreturn style fontSize === '24px';\n}))\n```\nThe fourth element should have a font-size of 24px ```js\nconst fourthElementClass = document querySelectorAll('div') [1] classList[0];\nconst style = new __helpers CSSHelp(document) getStyle( ${fourthElementClass});\nassert(style fontSize === '24px');\n```\nThe fourth element should have a red background-color ```js\nconst fourthElement = document querySelectorAll('div') [1] id;\nconst style = new __helpers CSSHelp(document) getStyle(#${fourthElement});\nassert(style backgroundColor === 'red');\n```\nThe fourth element should have a font-weight of bold ```js\nconst fourthElement = document querySelectorAll('div') [1] id;\nconst style = new __helpers CSSHelp(document) getStyle(#${fourthElement});\nassert(style fontWeight === 'bold');\n```\n--seed--\n--seed-contents--\n```html\nClass and ID Selectors\nNumber 1 - I'm a class Number 2 - I'm one ID Number 3 - I'm a class, but cooler Number 4 - I'm another ID Number 5 - I'm a class ```\n```css\n```\n--solutions--\n```html\nClass and ID Selectors\nNumber 1 - I'm a class Number 2 - I'm one ID Number 3 - I'm a class, but cooler Number 4 - I'm another ID Number 5 - I'm a class ```\n```css",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4797,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "928ea3d3e682e236c048575e39ea613f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-b.md",
    "source_type": "git_repo",
    "title": "Class and ID Selectors",
    "content": "Selectors Number 1 - I'm a class Number 2 - I'm one ID Number 3 - I'm a class, but cooler Number 4 - I'm another ID Number 5 - I'm a class ``` ```css ``` --solutions-- ```html Class and ID Selectors Number 1 - I'm a class Number 2 - I'm one ID Number 3 - I'm a class, but cooler Number 4 - I'm another ID Number 5 - I'm a class ``` ```cssodd {\nbackground-color: yellow;\nfont-family: Verdana, \"DejaVu Sans\", sans-serif;\n} adjust-font-size {\nfont-size: 24px;\n}\ntwo {\ncolor: blue;\nfont-size: 36px;\n}\nfour {\nbackground-color: red;\nfont-weight: bold;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4797,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-b.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e19b30db0c668477a5089e760118964e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-a.md",
    "source_type": "git_repo",
    "title": "Exercise A",
    "content": "id: 63ee3f71381756f9716727ef\ntitle: CSS Foundations Exercise A\nchallengeType: 25\ndashedName: css-foundations-exercise-a\n--description--\nObjective:\nIn this exercise, you're going to practice adding CSS to an HTML file using all three methods: external CSS, internal CSS, and inline CSS You should only be using type selectors for this exercise when adding styles via the external and internal methods You should also use keywords for colors (e g \"blue\") instead of using RGB or HEX values User Stories\nYou should see a div element with some text It should have a red background, white text, a font size of 32px, text center aligned and bold The CSS for the div element should be added externally, and using a type selector You should see a p element with some text It should have a green background, white text, and a font size of 18px The CSS for the p element should be added internally, and using a type selector You should see a button element with some text The button element should have an orange background and a font size of 18px The CSS for the button element should be added using inline styles --hints--\nYou should have one div element containing some text ```js\nconst divElement = document querySelector('div');\nassert isNotNull(divElement);\nassert isAtLeast(divElement innerText length, 1);\n```\nYou should have an external stylesheet containing the div element styles ```js\nconst styleSheet = new __helpers CSSHelp(document) getStyleSheet();\nconst isExternal = styleSheet ownerNode classList contains('fcc-injected-styles');\nconst divStyle = new __helpers CSSHelp(document) getStyle('div');\nassert isTrue(isExternal);\nassert isNotNull(divStyle);\n```\nYour div element should not have its CSS added using internal or inline styles ```js\nconst styleElement = document querySelector('style:not([class])');\nassert isNotTrue(styleElement innerText includes('div'));\nassert isNotTrue(document querySelector('div') hasAttribute('style'));\n```\nYour div element should have a background-color of red and a color of white ```js\nconst divStyle = new __helpers CSSHelp(document) getStyle('div');\nconst divBGColor = divStyle getPropertyValue('background-color');\nconst divColor = divStyle getPropertyValue('color');\nassert equal(divBGColor, 'red');\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5296,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-a.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "cf4a2c37cd06c7315bad32b8272ccf4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-a.md",
    "source_type": "git_repo",
    "title": "Exercise A",
    "content": "divStyle = new __helpers CSSHelp(document) getStyle('div'); assert isTrue(isExternal); assert isNotNull(divStyle); ``` Your div element should not have its CSS added using internal or inline styles ```js const styleElement = document querySelector('style:not([class])'); assert isNotTrue(styleElement innerText includes('div')); assert isNotTrue(document querySelector('div') hasAttribute('style')); ``` Your div element should have a background-color of red and a color of white ```js const divStyle = new __helpers CSSHelp(document) getStyle('div'); const divBGColor = divStyle getPropertyValue('background-color'); const divColor = divStyle getPropertyValue('color'); assert equal(divBGColor, 'red'); assertequal(divColor, 'white');\n```\nYour div element should have font-weight set to bold, font-size set to 32px, and text-align set to center ```js\nconst divStyle = new __helpers CSSHelp(document) getStyle('div');\nconst textAlign = divStyle getPropertyValue('text-align');\nconst fontSize = divStyle getPropertyValue('font-size');\nconst fontWeight = divStyle getPropertyValue('font-weight');\nassert equal(textAlign, 'center');\nassert equal(fontSize, '32px');\nassert equal(fontWeight,'bold');\n```\nYou should have one p element and it should contain some text ```js\nconst pElement = document querySelector('p');\nassert isNotNull(pElement);\nassert isAtLeast(pElement innerText length, 1)\n```\nYour p element should have its styles added internally using a style element ```js\nconst styleElement = document querySelector('style:not([class])');\nconst rules = styleElement sheet cssRules [0] || styleElement sheet rules [0];\nlet isStyled = false;\nif (rules && rules selectorText === 'p') {\nisStyled = true;\n}\nassert isTrue(isStyled);\n```\nYour p element should have a font-size of 18px and have color set to white ```js\nconst styleElement = document querySelector('style:not([class])');\nconst rules = styleElement sheet cssRules [0] || styleElement sheet rules [0];\nlet fontSize, color;\nif (rules && rules selectorText === 'p') {\nfontSize = rules style fontSize;\ncolor = rules style color;\n}\nassert equal(fontSize, \"18px\");\nassert equal(color, 'white');\n```\nYou should have one button element containing some text",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5296,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-a.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5d150a8ee99d2e35fac2185e7657803e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-a.md",
    "source_type": "git_repo",
    "title": "Exercise A",
    "content": "true; } assert isTrue(isStyled); ``` Your p element should have a font-size of 18px and have color set to white ```js const styleElement = document querySelector('style:not([class])'); const rules = styleElement sheet cssRules [0] || styleElement sheet rules [0]; let fontSize, color; if (rules && rules selectorText === 'p') { fontSize = rules style fontSize; color = rules style color; } assert equal(fontSize, \"18px\"); assert equal(color, 'white'); ``` You should have one button element containing some text```js\nconst btnElement = document querySelector('button');\nassert isNotNull(btnElement);\nassert isAtLeast(btnElement innerText length, 1);\n```\nYour button element should have an inline style js\nassert isTrue(document querySelector('button') hasAttribute('style'));\nYour button element should have its background-color set to orange js\nassert equal(document querySelector('button') style backgroundColor, 'orange')\nYour button element should have its font-size set to 18px js\nassert equal(document querySelector('button') style fontSize, '18px')\n--seed--\n--seed-contents--\n```html\nExercise A\n```\ncss\n/* styles css */\n--solutions--\n```html\nMy Styling Example\nHello World This is a paragraph Click Me\n```\ncss\ndiv {\nbackground-color: red;\ncolor: white;\nfont-size: 32px;\ntext-align: center;\nfont-weight: bold;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5296,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-a.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6eb7afcc26f9c46a0aaee88539f0becf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-c.md",
    "source_type": "git_repo",
    "title": "Grouping Selectors",
    "content": "id: 63ee3fe9381756f9716727f1\ntitle: CSS Foundations Exercise C\nchallengeType: 25\ndashedName: css-foundations-exercise-c\n--description--\nLet's build a little off the previous exercise, in which you added multiple classes to a single element in order to apply two different rules to it You should see a black background and white text on the first button element You should see a yellow background on the second button element You should set a font size of 28px using a selector list You should have a list of fonts containing Helvetica and Times New Roman with sans-serif as a fallback in the selector list You should see a unique class name on each element You should have a selector list for styles that both elements share --hints--\nYou should have a black background on the first element ```js\nconst classes = document querySelectorAll('button') [0] classList;\nconst style = new __helpers CSSHelp(document) getStyle( ${classes[0]});\nassert equal(style backgroundColor, 'black');\n```\nYour first element should have a text color of white ```js\nconst classes = document querySelectorAll('button') [0] classList;\nconst style = new __helpers CSSHelp(document) getStyle( ${classes[0]});\nassert equal(style color, 'white');\n```\nYou should set the font-size for both elements to 28px using a selector list ```js\nconst classOne = document querySelectorAll('button') [0] classList [0];\nconst classTwo = document querySelectorAll('button') [1] classList [0];\nfunction eitherOr() {\nconst a = new __helpers CSSHelp(document)\nreturn a getStyle( ${classOne}, ${classTwo}) a getStyle( ${classTwo}, ${classOne});\n}\nassert equal(eitherOr() fontSize, '28px');\n```\nYou should have a unique class name on each element ```js\nconst elementOneClasses = document querySelectorAll('button') [0] classList;\nconst elementTwoClasses = document querySelectorAll('button') [1] classList;\nfor(let i = 0; i < elementOneClasses length; i++){\nassert( [ elementTwoClasses] includes(elementOneClasses[i]));\n}\n```\nYou should have a selector list for styles that both elements share ```js\nconst classOne = document querySelectorAll('button') [0] classList [0];\nconst classTwo = document querySelectorAll('button') [1] classList",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4288,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-c.md",
      "source_type": "git_repo"
    },
    "token_count": 518,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "266e949f6514e1e4329c3a5bc89cf57e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-c.md",
    "source_type": "git_repo",
    "title": "Grouping Selectors",
    "content": "${classTwo}, ${classOne}); } assert equal(eitherOr() fontSize, '28px'); ``` You should have a unique class name on each element ```js const elementOneClasses = document querySelectorAll('button') [0] classList; const elementTwoClasses = document querySelectorAll('button') [1] classList; for(let i = 0; i < elementOneClasses length; i++){ assert( [ elementTwoClasses] includes(elementOneClasses[i])); } ``` You should have a selector list for styles that both elements share ```js const classOne = document querySelectorAll('button') [0] classList [0]; const classTwo = document querySelectorAll('button') [1] classList[0];\nfunction eitherOr() {\nconst a = new __helpers CSSHelp(document)\nreturn a getStyle( ${classOne}, ${classTwo}) a getStyle( ${classTwo}, ${classOne});\n}\nassert exists(eitherOr());\n```\nYou should have a list of fonts containing Helvetica and Times New Roman with sans-serif as a fallback in the selector list ```js\nconst classOne = document querySelectorAll('button') [0] classList [0];\nconst classTwo = document querySelectorAll('button') [1] classList [0];\nfunction eitherOr() {\nconst a = new __helpers CSSHelp(document)\nreturn a getStyle( ${classOne}, ${classTwo}) a getStyle( ${classTwo}, ${classOne});\n}\nassert equal(eitherOr() fontFamily, 'Helvetica, \"Times New Roman\", sans-serif');\n```\nEach element should only have one class ```js\nconst elementOneClasses = document querySelectorAll('button') [0] classList;\nconst elementTwoClasses = document querySelectorAll('button') [1] classList;\nassert(elementOneClasses length === 1 && elementTwoClasses length === 1);\n```\n--seed--\n--seed-contents--\n```html\nGrouping Selectors\nClick Me No, Click Me ```\n```css\n```\n--solutions--\n```html\nGrouping Selectors\nClick Me No, Click Me ```\n```css inverted, fancy {\nfont-family: Helvetica, \"Times New Roman\", sans-serif;\nfont-size: 28px;\n} inverted {\nbackground-color: black;\ncolor: white;\n} fancy {\nbackground-color: yellow;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4288,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-c.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "31e1c63c5228e47432f2562807a7d3cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6489c96782cf2e4f86f03ae2\ntitle: The Cascade of CSS Lesson B\nchallengeType: 15\ndashedName: the-cascade-of-css-lesson-b\n--description--\nA CSS declaration that is more specific will take precedence over less specific ones. Inline styles, which you went over in a previous lesson, have the highest specificity compared to selectors, while each type of selector has its own specificity level that contributes to how specific a declaration is. Other selectors contribute to specificity, but you're focusing only on the ones you’ve gone over so far:\nID selectors (most specific selector)\nClass selectors\nType selectors\nSpecificity will only be taken into account when an element has multiple, conflicting declarations targeting it, sort of like a tie-breaker. An ID selector will always beat any number of class selectors, a class selector will always beat any number of type selectors, and a type selector will always beat any number of anything less specific than it. When no declaration has a selector with a higher specificity, a larger amount of a single selector will beat a smaller amount of that same selector.\n--questions--\n--text--\nWhich of the following is the correct order of specificity for CSS selectors, from most specific to least specific?\n--answers--\nType selectors, class selectors, ID selectors\nID selectors, class selectors, type selectors\nClass selectors, type selectors, ID selectors\nID selectors, type selectors, class selectors\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a58af4201f572f62c633f18157d2bb04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6489bcd7b7600c818dc297ea\ntitle: The Cascade of CSS Lesson A\nchallengeType: 15\ndashedName: the-cascade-of-css-lesson-a\n--description--\nSometimes we may have rules that conflict with one another, and we end up with some unexpected results. “But I wanted these paragraphs to be blue, why are they red like these other paragraphs?!” As frustrating as this can be, it’s important to understand that CSS doesn’t just do things against your wishes. CSS only does what we tell it to do. One exception to this is the default styles that are provided by a browser. These default styles vary from browser to browser, and they are why some elements create a large “gap” between themselves and other elements, or why buttons look the way they do, despite us not writing any CSS rules to style them that way.\nSo if you end up with some unexpected behavior like this it’s either because of these default styles, not understanding how a property works, or not understanding this little thing called the cascade.\nThe cascade is what determines which rules actually get applied to your HTML. There are different factors that the cascade uses to determine this. We will examine three of these factors, which will hopefully help you avoid those frustrating “I hate CSS” moments.\n--questions--\n--text--\nWhy might you encounter unexpected behavior in CSS?\n--answers--\nDue to conflicting rules and unexpected results\nDue to the browser's default styles\nDue to a lack of understanding of CSS properties\nAll of the above\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1588,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5b73e7089d176041146bfefc4759939e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6489cf5882cf2e4f86f03ae5\ntitle: The Cascade of CSS Lesson D\nchallengeType: 15\ndashedName: the-cascade-of-css-lesson-d\n--description--\nNow, let’s change things a little bit:\n```html\n```\n```css\n/ rule 1 /\nsubsection {\ncolor: blue;\n}\n/ rule 2 /\n.main .list {\ncolor: red;\n}\n```\nIn the example above, despite rule 2 having more class selectors than ID selectors, rule 1 is more specific because ID beats class.\n--questions--\n--text--\nBased on the modified HTML and CSS code, which color would the <div class=\"list\" id=\"subsection\"></div> element be rendered as?\n--answers--\norange\nred\nblue\ncyan\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 770,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ce0b38ac7cc0f11b78a4bd4fbe95e345",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6489cf6282cf2e4f86f03ae6\ntitle: The Cascade of CSS Lesson E\nchallengeType: 15\ndashedName: the-cascade-of-css-lesson-e\n--description--\n```css\n/ rule 1 /\nsubsection .list {\nbackground-color: yellow;\ncolor: blue;\n}\n/ rule 2 /\nsubsection .main .list {\ncolor: red;\n}\n```\nIn this final example, both rules are using ID and class selectors, so neither rule is using a more specific selector than the other. The cascade then checks the amounts of each selector type. Both rules only have one ID selector, but rule 2 has more class selectors, so rule 2 has a higher specificity!\nWhile the color: red declaration would take precedence, the background-color: yellow declaration would still be applied since there’s no conflicting declaration for it.\n--questions--\n--text--\nConsidering the updated CSS code, which of the following describes the rendering of the <div class=\"list\" id=\"subsection\"></div> element?\n--answers--\nText color: Red, Background color: Transparent\nText color: Red, Background color: Yellow\nText color: Blue, Background color: Transparent\nText color: Blue, Background color: Yellow\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c1dbf20c741934b1a90f8f22988ed5a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6489cb0b82cf2e4f86f03ae3\ntitle: The Cascade of CSS Lesson C\nchallengeType: 15\ndashedName: the-cascade-of-css-lesson-c\n--description--\nLet’s take a look at a few quick examples to visualize how specificity works. Consider the following HTML and CSS code:\n```html\n```\n```css\n/ rule 1 /\n.subsection {\ncolor: blue;\n}\n/ rule 2 /\n.main .list {\ncolor: red;\n}\n```\nIn the example above, both rules are using only class selectors, but rule 2 is more specific because it is using more class selectors.\n--questions--\n--text--\nBased on the given HTML and CSS code, which color would the <div class=\"list subsection\"></div> element be rendered as?\n--answers--\nblue\nred\npurple\nblack\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5ba68110683275482c6bfd6efb2c76f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6489cf6782cf2e4f86f03ae7\ntitle: The Cascade of CSS Lesson F\nchallengeType: 15\ndashedName: the-cascade-of-css-lesson-f\n--description--\n```css\n/ rule 1 /\n.class.second-class {\nfont-size: 12px;\n}\n/ rule 2 /\n.class .second-class {\nfont-size: 24px;\n}\n```\nHere both rule 1 and rule 2 have the same specificity. Rule 1 uses a chaining selector (no space) and rule 2 uses a descendant combinator (the empty space). But both rules have two classes and the combinator symbol itself does not add to the specificity.\ncss\n/* rule 1 */\n.class.second-class {\nfont-size: 12px;\n}\n/* rule 2 */\n.class > .second-class {\nfont-size: 24px;\n}\nThis example shows the same thing. Even though rule 2 is using a child combinator (>), this does not change the specificity value. Both rules still have two classes so they have the same specificity values.\nNote: Not everything adds to specificity\nWhen comparing selectors, you may come across special symbols for the universal selector (*) as well as combinators (+, ~, >, and an empty space). These symbols do not add any specificity in and of themselves.\n--questions--\n--text--\nBased on the given CSS code, which font size would be applied to an element that has both the class and second-class classes?\n--answers--\n12px\n36px\n24px\n48px\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1373,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6613ad13d9706f6056a73ad13e67c7bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6489cf7682cf2e4f86f03ae8\ntitle: The Cascade of CSS Lesson G\nchallengeType: 15\ndashedName: the-cascade-of-css-lesson-g\n--description--\nInheritance refers to certain CSS properties that, when applied to an element, are inherited by that element’s descendants, even if we don’t explicitly write a rule for those descendants. Typography based properties (color, font-size, font-family, etc.) are usually inherited, while most other properties aren’t.\nThe exception to this is when directly targeting an element, as this always beats inheritance:\n```html\n```\n```css\n/ styles.css /\nparent {\ncolor: red;\n}\n.child {\ncolor: blue;\n}\n```\nDespite the parent element having a higher specificity with an ID, the child element would have the color: blue style applied since that declaration directly targets it, while color: red from the parent is only inherited.\n--questions--\n--text--\nBased on the given HTML and CSS code, what would be the color of the <div class=\"child\"></div> element?\n--answers--\nRed\nBlue\nInherited from the parent element\nTransparent\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1225,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3d930df3ae15df726c489bb491b24f3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 648acb0745e79f79650fa2ac\ntitle: The Cascade of CSS Lesson H\nchallengeType: 15\ndashedName: the-cascade-of-css-lesson-h\n--description--\nThe final factor, the end of the line, the tie-breaker of the tie-breaker. Let’s say that after every other factor has been taken into account, there are still multiple conflicting rules targeting an element. How does the cascade determine which rule to apply?\nReally simply, actually. Whichever rule was the last defined is the winner.\n```css\n/ styles.css /\n.alert {\ncolor: red;\n}\n.warning {\ncolor: yellow;\n}\n```\nFor an element that has both the alert and warning classes, the cascade would run through every other factor, including inheritance (none here) and specificity (neither rule is more specific than the other). Since the .warning rule was the last one defined, and no other factor was able to determine which rule to apply, it’s the one that gets applied to the element.\n--questions--\n--text--\nWhat determines which CSS rule is applied when there are conflicting rules targeting the same element?\n--answers--\nThe specificity of the CSS rule.\nThe inheritance hierarchy of the element.\nThe presence of classes or IDs on the element.\nThe order in which the rules were defined.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1312,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "29728cc6ff5fc03f040e5f186f452343",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-e.md",
    "source_type": "git_repo",
    "title": "Descendant Combinator",
    "content": "id: 63ee3ff8381756f9716727f3\ntitle: CSS Foundations Exercise E\nchallengeType: 25\ndashedName: css-foundations-exercise-e\n--description--\nUnderstanding how combinators work can become a lot easier when you start playing around with them and see what exactly is affected by them versus what isn't The goal of this exercise is to apply styles to elements that are descendants of another element, while leaving elements that aren't descendants of that element unstyled You should see a yellow background for p elements that are descendants of the div element You should see a text color of red for elements that are descendants of the div element You should see a font size of 20px for elements that are descendants of the div element You should center align text for elements that are descendants of the div element --hints--\nYou should have a background color of yellow on your descendants ```js\nconst styleOne = new __helpers CSSHelp(document) getStyle(' container text');\nconst styleTwo =  new __helpers CSSHelp(document) getStyle('div p');\nconst styleThree =  new __helpers CSSHelp(document) getStyle('div text');\nconst styleFour =  new __helpers CSSHelp(document) getStyle(' container p');\nconst styles = [styleOne, styleTwo, styleThree, styleFour];\nfunction getCorrectStyle(){\nfor(let i = 0; i < styles length; i++){\nif(styles[i] = undefined){\nreturn styles[i];\n}\n}\n}\nassert(getCorrectStyle() backgroundColor === 'yellow');\n```\nYou should have a text color of red on your descendants ```js\nconst styleOne = new __helpers CSSHelp(document) getStyle(' container text');\nconst styleTwo =  new __helpers CSSHelp(document) getStyle('div p');\nconst styleThree =  new __helpers CSSHelp(document) getStyle('div text');\nconst styleFour =  new __helpers CSSHelp(document) getStyle(' container p');\nconst styles = [styleOne, styleTwo, styleThree, styleFour];\nfunction getCorrectStyle(){\nfor(let i = 0; i < styles length; i++){\nif(styles[i] = undefined){\nreturn styles[i];\n}\n}\n}\nassert(getCorrectStyle() color === 'red');\n```\nYou should have a font size of 20px on your descendants ```js\nconst styleOne = new __helpers CSSHelp(document) getStyle(' container text');\nconst styleTwo =  new __helpers CSSHelp(document)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4624,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-e.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "23406aa915fa373b800d73ce290db473",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-e.md",
    "source_type": "git_repo",
    "title": "Descendant Combinator",
    "content": "p'); const styleThree = new __helpers CSSHelp(document) getStyle('div text'); const styleFour = new __helpers CSSHelp(document) getStyle(' container p'); const styles = [styleOne, styleTwo, styleThree, styleFour]; function getCorrectStyle(){ for(let i = 0; i < styles length; i++){ if(styles[i] = undefined){ return styles[i]; } } } assert(getCorrectStyle() color === 'red'); ``` You should have a font size of 20px on your descendants ```js const styleOne = new __helpers CSSHelp(document) getStyle(' container text'); const styleTwo = new __helpers CSSHelp(document)getStyle('div p');\nconst styleThree =  new __helpers CSSHelp(document) getStyle('div text');\nconst styleFour =  new __helpers CSSHelp(document) getStyle(' container p');\nconst styles = [styleOne, styleTwo, styleThree, styleFour];\nfunction getCorrectStyle(){\nfor(let i = 0; i < styles length; i++){\nif(styles[i] = undefined){\nreturn styles[i];\n}\n}\n}\nassert(getCorrectStyle() fontSize === '20px');\n```\nYou should center align the text on your descendants ```js\nconst styleOne = new __helpers CSSHelp(document) getStyle(' container text');\nconst styleTwo =  new __helpers CSSHelp(document) getStyle('div p');\nconst styleThree =  new __helpers CSSHelp(document) getStyle('div text');\nconst styleFour =  new __helpers CSSHelp(document) getStyle(' container p');\nconst styles = [styleOne, styleTwo, styleThree, styleFour];\nfunction getCorrectStyle(){\nfor(let i = 0; i < styles length; i++){\nif(styles[i] = undefined){\nreturn styles[i];\n}\n}\n}\nassert(getCorrectStyle() textAlign === 'center');\n```\n--seed--\n--seed-contents--\ncss\n```html\nDescendant Combinator\nThis should be styled This should be unstyled This should be unstyled This should be styled This should be styled ```\n--solutions--\n```html\nDescendant Combinator\nThis should be styled This should be unstyled This should be unstyled This should be styled This should be styled ```\ncss container text {\nbackground-color: yellow;\ncolor: red;\nfont-size: 20px;\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4624,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-e.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "28d9c532841d5b36cb76f294ab0c2072",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e97164484dd50f720e6fe7\ntitle: Learn Data Types and Conditionals Lesson B\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-b\n--description--\nNow that you have gone through the points listed in the assignment of the previous challenge, you should have a good understanding of how strings can be manipulated in JavaScript.\nCurrently, this given string has a trailing space at the end after the exclamation mark. To solve this, you need to remove the trailing space from the string using a predefined method.\n```javascript\nlet greeting = \"Hello World!  \";\nconsole.log(greeting);\n```\nLink to Guide\n--questions--\n--text--\nFollowing the problem above, which method should be used to only remove the trailing space from the string?\n--answers--\nThe trim() method should be used to only remove the trailing space from the string.\nThe replace() method should be used to only remove the trailing space from the string.\nThe trimEnd() method should be used to only remove the trailing space from the string.\nThe trimStart() method should be used to only remove the trailing space from the string.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7156798e3f7f15cf6d985559bae9e5f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e9713d484dd50f720e6fe6\ntitle: Learn Data Types and Conditionals Lesson A\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-a\n--description--\nDepending on what kind of work you're doing, you might end up working more with pieces of text rather than numbers. A string is a piece of text… and is a fundamental building block of the language.\nHTML provides structure and meaning to text, CSS allows us to precisely style it, and JavaScript offers many features for manipulating strings. These include creating custom welcome messages and prompts, showing the right text labels when needed, sorting terms into the desired order, and much more.\nStrings are a fundamental data type in JavaScript. They are used to represent text and are wrapped in either single, double quotes or backticks:\n```javascript\nlet greeting = \"Hello World!\";\nlet greeting2 = 'I am learning JavaScript!';\nlet greeting3 = with The Odin Project!;\n```\nStrings declared using single quotes and strings declared using double quotes are the same, and which you use is down to personal preference — although it is good practice to choose one style and use it consistently in your code.\n--assignment--\nThere are many ways to manipulate strings in JavaScript. Go through points 8 through 12 of our JavaScript String Handbook\n--questions--\n--text--\nWhich statement accurately describes the versatility and use of strings in JavaScript in conjunction with HTML, CSS, and JavaScript itself?\n--answers--\nStrings in JavaScript can only be manipulated using CSS for web page design.\nJavaScript strings are exclusively used for mathematical computations and cannot interact with HTML or CSS.\nStrings allow for text manipulation in JavaScript, including but not limited to creating custom messages, sorting terms, and dynamically updating HTML content with CSS styling.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fc61165adb9d0cd8c6cd46c479a2146e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e9725a484dd50f720e6fe9\ntitle: Learn Data Types and Conditionals Lesson D\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-d\n--description--\nSeeing the example below You want to know the index of the last occurrence of the word The in the string.\njavascript\nlet sentence = \"freeCodeCamp loves The Odin Project! The Odin Project is great!\";\nLink to Guide\n--questions--\n--text--\nWhich method should be used to find the index of the last occurrence of the word The in the string?\n--answers--\nThe includes() method should be used to find the index of the last occurrence of the word The in the string.\nThe lastIndexOf() method should be used to find the index of the last occurrence of the word The in the string.\nThe indexOf() method should be used to find the index of the last occurrence of the word The in the string.\nThe search() method should be used to find the index of the last occurrence of the word The in the string.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1142,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d0ca5db6c2e126e1e2f089e851902883",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e97251484dd50f720e6fe8\ntitle: Learn Data Types and Conditionals Lesson C\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-c\n--description--\nSeeing the example below, You want to make sure the word loves is present in the string.\njavascript\nlet sentence = \"freeCodeCamp loves The Odin Project!\";\nLink to Guide\n--questions--\n--text--\nWhich method should be used to check if the word loves is present in the string?\n--answers--\nThe includes() method should be used to check if the word loves is present in the string.\nThe indexOf() method should be used to check if the word loves is present in the string.\nThe search() method should be used to check if the word loves is present in the string.\nThe toUpperCase() method should be used to check if the word loves is present in the string.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1003,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 197,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e12379161840ca6876d40739b7e2f7aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e97260484dd50f720e6fea\ntitle: Learn Data Types and Conditionals Lesson E\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-e\n--description--\nStrings defined using backticks are called template literals. They are a new way to define strings in JavaScript. They allow you to embed expressions within the string. This is done by wrapping the expression in ${}.\nFor example, the following code:\njavascript\nlet name = \"John\";\nlet age = 25;\nlet greeting = `Hello, my name is ${name} and I am ${age} years old.`;\nwill result in the greeting variable containing the string \"Hello, my name is John and I am 25 years old.\"\n--questions--\n--text--\nWhich of the following is the correct way to define a template literal in JavaScript?\n--answers--\n`Hello, my name is ${name} and I am ${age} years old.`\n`Hello, my name is `name` and I am `age` years old.`\n`Hello, my name is {name} and I am {age} years old.`\n`Hello, my name is $name and I am $age years old.`\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1087,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e6691148603041a36e84cf22a84cd2f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e97267484dd50f720e6feb\ntitle: Learn Data Types and Conditionals Lesson F\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-f\n--description--\nYou know that JavaScript has a variety of data types, including strings, numbers and booleans. You can use comparison operators to compare these data types and make decisions based on the results.\nThe following comparison operators are available in JavaScript:\n| Operator | Description                              | Example      |\n|----------|------------------------------------------|--------------|\n| ==       | Equal (value comparison)                 | x == y       |\n| !=       | Not equal                                | x != y       |\n| >        | Greater than                             | x > y        |\n| <        | Less than                                | x < y        |\n| >=       | Greater than or equal to                 | x >= y       |\n| <=       | Less than or equal to                    | x <= y       |\nTo use a comparison in a variable assignment, you can use the == operator. For example:\n```javascript\nlet x = 5;\nlet y = 5;\nlet result = x == y;\nconsole.log(result); // true\n```\n--questions--\n--text--\nWhich of the following is the correct way to check if the variable x is equal to the number 5 in JavaScript?\n--answers--\nx = 5\nx <= 5\nx == 5\nx >= 5\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e3e05113a4e8ed962c8596c0339611d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e9726d484dd50f720e6fec\ntitle: Learn Data Types and Conditionals Lesson G\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-g\n--description--\nJavaScript also has the ability to compare types and values using the strict equality operator ===. This operator checks if the two values are equal and of the same type. For example:\n```javascript\nlet x = 5;\nlet y = \"5\";\nlet result = x === y;\nconsole.log(result); // false\n```\nIn this example, the result variable will contain false because x is a number and y is a string. But if you use the == operator, the result will be true because JavaScript will convert the string to a number and compare the values.\nThis operator is called the strict equality operator because it checks for both value and type equality. It is often recommended to use the === operator to avoid unexpected results when comparing values.\nThere is also a strict inequality operator !== that checks if the two values are not equal and of the same type.\nThere are a lot of ways to use the strict equality operator, and it's important to understand how it works.\n--assignment--\nRead this article on JavaScript.info to learn more about the strict equality operator.\n--questions--\n--text--\nWhat happens when you use the strict equality operator === to compare a number of the value 0 and a boolean of the value false?\n--answers--\nThe output would be true.\nThe output would be false.\nYou cannot compare a number and a boolean using the strict equality operator.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9021447355929c7c4c2fdbc25d7a8707",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e9727a484dd50f720e6fed\ntitle: Learn Data Types and Conditionals Lesson H\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-h\n--description--\nIn any programming language, you need to compare values to make decisions. For example, if the weather is sunny, you will go out, otherwise you will stay at home. Another example would be to see if a user has enough points to level up in a game.\nThe if-else conditional statement is used to make decisions in JavaScript. It is often used with comparison operators to compare values and make decisions based on the results.\nAn example of an if statement is:\n```javascript\nlet x = 5;\nif (x > 3) {\nconsole.log(\"x is greater than 3\");\n} else {\nconsole.log(\"x is less than or equal to 3\");\n}\n```\nIn this example, the x variable is compared to the number 3 using the > operator. If x is greater than 3, the first block of code will be executed. Otherwise, the second block of code will be executed.\n--questions--\n--text--\nWhat will be the output of the following code?\n```javascript\nlet x = 9;\nlet y = \"5\";\nif (x == y) {\nconsole.log(\"x is equal to y\");\n} else {\nconsole.log(\"x is not equal to y\");\n}\n```\n--answers--\nx is equal to y\nx is not equal to y\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1304,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 323,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "71e93ce1795ffcbb6f18cb0d4c3cb900",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e97280484dd50f720e6fee\ntitle: Learn Data Types and Conditionals Lesson I\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-i\n--description--\nIn the last example, you had two choices if or else. But what if you want to have more than two choices? You can use the else if statement to add more conditions to our code. The else if statement allows us to check multiple conditions and execute a block of code when the first condition is true. If the first condition is false, it will check the next condition and so on. If none of the conditions are true, the else block will be executed.\nHere is an example of the else if statement:\n```javascript\nlet x = 5;\nif (x > 10) {\nconsole.log(\"x is greater than 10\");\n} else if (x > 5) {\nconsole.log(\"x is greater than 5\");\n} else {\nconsole.log(\"x is less than or equal to 5\");\n}\n```\nIn this example, the x variable is compared to the number 10 using the > operator. If x is greater than 10, the first block of code will be executed. Otherwise, the else if statement will check the next condition. If x is greater than 5, the second block of code will be executed. Otherwise, the else block will be executed.\n--questions--\n--text--\nWhat will be the output of the following code?\n```javascript\nlet x = 4;\nif (x > 10) {\nconsole.log(\"x is greater than 10\");\n} else if (x > 5) {\nconsole.log(\"x is greater than 5\");\n} else {\nconsole.log(\"x is less than or equal to 5\");\n}\n```\n--answers--\nx is less than or equal to 5\nx is greater than 5\nx is greater than 10\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-i.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0b4a6eebc83e08ede948a5db872f3c2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-l.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e97293484dd50f720e6ff1\ntitle: Learn Data Types and Conditionals Lesson L\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-l\n--description--\nAnother way to compare conditional statements would be the ternary operator. The ternary operator is a shorthand way of writing an if-else statement. It is used to evaluate a condition and return a value based on the result of the condition. The syntax of the ternary operator is as follows:\njavascript\nlet result = condition ? value1 : value2;\nIn the above example, if the condition is true, the value of result will be value1. Otherwise, the value of result will be value2.\nTernary operators are often used to assign a value to a variable based on a condition. They are also used to return a value based on a condition.\n--questions--\n--text--\nWhat is the value of the result variable if the value of the condition variable is true?\njavascript\nlet condition = true;\nlet result = condition ? \"option 1\" : \"option 2\";\n--answers--\n\"option 2\"\n\"option 1\"\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1114,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-l.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "636ce32339e9ddaeda2d3f1ade71be94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6617a128e90de1b3fd10bd4d\ntitle: Learn Function Basics Lesson A\nchallengeType: 15\ndashedName: learn-function-basics-lesson-a\n--description--\nLet’s discuss parameters and arguments in the context of the following example function:\n```js\nfunction favoriteAnimal(animal) {\nreturn animal + \" is my favorite animal!\"\n}\nconsole.log(favoriteAnimal('Goat'));\n```\nIn JavaScript, parameters are the items listed between the parentheses () in the function declaration. Function arguments are the actual values you decide to pass to the function.\nIn the example above, the function definition is written on the first line: function favoriteAnimal(animal). The parameter, animal, is found inside the parentheses. You could just as easily replace animal with pet, x, or blah. But in this case, naming the parameter animal gives someone reading your code a bit of context so that they don't have to guess what animal may eventually contain.\n--questions--\n--text--\nWhat does the parameter in the function favoriteAnimal represent in the context of JavaScript functions?\n--answers--\nThe actual value that is used when calling the function.\nA placeholder for the value that will be passed to the function when it is called.\nThe name of the function.\nThe result of the function execution.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1370,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1d1794437155384307a478fd547a099c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6617a1fce90de1b3fd10bd4e\ntitle: Learn Function Basics Lesson B\nchallengeType: 15\ndashedName: learn-function-basics-lesson-b\n--description--\n```js\nfunction favoriteAnimal(animal) {\nreturn animal + \" is my favorite animal!\"\n}\nconsole.log(favoriteAnimal('Goat'));\n```\nBy putting animal inside the parentheses of the favoriteAnimal() function, you are telling JavaScript that you will send some value to your favoriteAnimal function. This means that animal is just a placeholder for some future value. But what value are you sending?\nThe last line, favoriteAnimal('Goat'), is where you are calling your favoriteAnimal function and passing the value 'Goat' inside that function. Here, 'Goat' is your argument. You are telling the favoriteAnimal function, \"Please send 'Goat' to the favoriteAnimal function and use 'Goat' wherever the 'animal' placeholder is.\" Because of the flexibility that using a parameter provides, you can declare any animal to be your favorite.\nHere is a diagram to help you visualize how parameters are passed to a function, and how values get returned from it.\nMake note of the fact that by calling favoriteAnimal() inside of console.log() with the argument 'Goat', you get the return value of the function, string of \"Goat is my favorite animal!\", printed to the console. You're passing in a function call favoriteAnimal('Goat') as an argument in a different function call - log().\n--questions--\n--text--\nIf you change the argument from 'Goat' to 'Elephant' in the favoriteAnimal('Goat') function call, what would console.log(favoriteAnimal('Elephant')) print to the console?\n--answers--\n\"Goat is my favorite animal!\"\nThe function will return an error because \"Elephant\" is not a recognized argument.\n\"Elephant is my favorite animal!\"\n\"Kangaroo is my favorite animal!\"\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2344,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "87b123c1e6aa9f9c724f4fe294489e07",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6617aee05b87c334e7ae8014\ntitle: Learn Function Basics Lesson C\nchallengeType: 15\ndashedName: learn-function-basics-lesson-c\n--description--\nA variable declared inside a function is only visible inside a function. This is called the scope of the variable, this particular scope is called the local scope. Variables declared outside of a function are called global variables and are visible throughout the program. For example, the following code will raise an error:\n```js\nfunction myFunction() {\nlet x = 10;\n}\nconsole.log(x);\n```\nThe variable x is declared inside the function myFunction and is not visible outside of the function. The code will raise a ReferenceError because x is not defined.\nIf you declare a variable outside of a function, it is called a global variable and is visible throughout the program. For example, the following code will work:\n```js\nlet x = 10;\nfunction myFunction() {\nconsole.log(x);\n}\nmyFunction();\n```\nIf a same-named variable is declared inside the function then it shadows the outer one.\n--questions--\n--text--\nWhat will be the output of the following code?\n```js\nlet x = 10;\nfunction myFunction() {\nlet x = 20;\nconsole.log(x);\n}\nmyFunction();\n```\n--answers--\n10\n20\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "50ecc3dffd97631bc3c9249083068f1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-j.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e97288484dd50f720e6fef\ntitle: Learn Data Types and Conditionals Lesson J\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-j\n--description--\nMore complex conditional statements might include multiple conditions That is why logical operators are used to combine multiple conditions The logical operators are &&, || and which are used to represent and, or and not respectively The logical operator || is used to combine two boolean conditions It returns true if at least one of the conditions is true Otherwise, it returns false:\n```javascript\nlet a = 5;\nlet b = 10;\nlet c = 15;\nif (a > b || a > c) {\nconsole log(\"At least one of the conditions is true\");\n} else {\nconsole log(\"Both of the conditions are false\");\n}\n```\nThe logical operator && is used to combine two boolean conditions It returns true only if both of the conditions are true Otherwise, it returns false:\n```javascript\nlet a = 5;\nlet b = 10;\nlet c = 15;\nif (a < b && a < c) {\nconsole log(\"Both of the conditions are true\");\n} else {\nconsole log(\"At least one of the conditions is false\");\n}\n```\nThe logical operator is used to negate a boolean condition It returns true if the condition is false Otherwise, it returns false:\n```javascript\nlet a = 5;\nlet b = 10;\nif ( (a > b)) {\nconsole log(\"The condition is false\");\n} else {\nconsole log(\"The condition is true\");\n}\n```\nIn the above example, the extra pair of parentheses is used to make the code more readable It is not necessary to use them --questions--\n--text--\nYou're tasked with writing an if statement that checks for the following conditions in a web app to display Welcome to the user:\nThe user must either have a premium account (isPremium) or have been a member for more than a year (membershipDuration > 12 months) The user must not be currently blocked from the service ( isBlocked) Which if statement correctly checks these conditions --answers--\njavascript\nif (isPremium && membershipDuration > 12 && isBlocked) {\nconsole log(\"Welcome \");\n}\njavascript\nif (isPremium || (membershipDuration > 12 && isBlocked)) {\nconsole log(\"Welcome",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2491,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-j.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d7e29fc1e7a9713a413a635c5bfac17f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-j.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "app to display Welcome to the user: The user must either have a premium account (isPremium) or have been a member for more than a year (membershipDuration > 12 months) The user must not be currently blocked from the service ( isBlocked) Which if statement correctly checks these conditions --answers-- javascript if (isPremium && membershipDuration > 12 && isBlocked) { console log(\"Welcome \"); } javascript if (isPremium || (membershipDuration > 12 && isBlocked)) { console log(\"Welcome\");\n}\njavascript\nif ((isPremium || membershipDuration > 12) && isBlocked) {\nconsole log(\"Welcome \");\n}\njavascript\nif ( isPremium || membershipDuration <= 12 || isBlocked) {\nconsole log(\"Welcome \");\n}\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2491,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-j.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e296491bb1e260345b3f210cf20a8aca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6617aee95b87c334e7ae8015\ntitle: Learn Function Basics Lesson D\nchallengeType: 15\ndashedName: learn-function-basics-lesson-d\n--description--\nIf a function is called, but an argument is not provided, then the parameter will be assigned the value of undefined. This can lead to unexpected results if the function is not designed to handle this case.\n```js\nfunction favoriteAnimal(animal) {\nreturn animal + \" is my favorite animal!\"\n}\nconsole.log(favoriteAnimal()); // Output: undefined is my favorite animal!\n```\nIn the example above, the function favoriteAnimal is called without an argument. The parameter animal is assigned the value of undefined, which is then concatenated with the string \" is my favorite animal!\".\nIf a value is not provided you can make use of default parameters. Default parameters allow you to assign a default value to a parameter if no value is provided when the function is called.\njs\nfunction favoriteAnimal(animal = 'Giant Panda') {\nreturn animal + \" is my favorite animal!\"\n}\nIn the example above, the default value of the parameter animal is set to 'Giant Panda'. If the function favoriteAnimal is called without an argument, the parameter animal will be assigned the value 'Giant Panda'.\n--questions--\n--text--\nHow do default parameters in JavaScript functions enhance the behavior of functions like favoriteAnimal when called without any arguments?\n--answers--\nThey cause the function to throw an error if no argument is provided.\nThey prevent the function from being called without the required number of arguments.\nThey ensure the function returns null to indicate that no argument was passed.\nThey allow the function to execute with a predefined value, avoiding undefined related issues.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 363,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d03d3c0f73077a0aa6e5fd4174bcc7b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6617aef05b87c334e7ae8016\ntitle: Learn Function Basics Lesson E\nchallengeType: 15\ndashedName: learn-function-basics-lesson-e\n--description--\nAs you have seen before, functions can return a value using the return keyword. The return keyword is used to return a value from a function. When the return keyword is used, the function will stop executing and return the value specified after the return keyword.\n```js\nfunction add(a, b) {\nreturn a + b\n}\nconsole.log(add(2, 3)); // Output: 5\n```\nBut what happens if the return keyword is used before the end of the function?\nTo answer this question, consider the following example:\n```js\nfunction add(a, b) {\nif(a > 2){\nreturn b;\n}\nreturn a + b;\n}\nconsole.log(add(3, 7)); // Output: 7\n```\nIn the example above, the function add has a conditional statement that checks if the value of a is greater than 2. If the condition is met, the function will return the value of b and stop executing. If the condition is not met, the function will return the sum of a and b.\n--questions--\n--text--\nWhat is the output of the following code snippet?\n```js\nfunction add(a, b = 12) {\nif(b > 11){\nreturn b * 2;\n} else if(a > 3){\nreturn b;\n}\nreturn a + b;\n}\nconsole.log(add(3));\n```\n--answers--\nThe output is 24.\nThe output is 14.\nThe output is 15.\nThe output is 12.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1434,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1fe7300483512fff72f34ed24d6391ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-k.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e9728d484dd50f720e6ff0\ntitle: Learn Data Types and Conditionals Lesson K\nchallengeType: 15\ndashedName: learn-data-types-and-conditionals-lesson-k\n--description--\nThe switch statement is used to perform different actions based on different conditions It is similar to the if-else statement, but is more readable and easier to understand when there are multiple conditions to check The switch statement is used to select one of many code blocks to be executed The switch statement evaluates an expression and compares it with the values of each case If there is a match, the associated block of code is executed If there is no match, the default block of code is executed ```javascript\nlet day = \"Monday\";\nswitch (day) {\ncase \"Monday\":\nconsole log(\"Today is Monday\");\nbreak;\ncase \"Tuesday\":\nconsole log(\"Today is Tuesday\");\nbreak;\ncase \"Wednesday\":\nconsole log(\"Today is Wednesday\");\nbreak;\ncase \"Thursday\":\nconsole log(\"Today is Thursday\");\nbreak;\ncase \"Friday\":\nconsole log(\"Today is Friday\");\nbreak;\ncase \"Saturday\":\nconsole log(\"Today is Saturday\");\nbreak;\ncase \"Sunday\":\nconsole log(\"Today is Sunday\");\nbreak;\ndefault:\nconsole log(\"Invalid day\");\n}\n```\nIn the above example, the value of the day variable is compared with the values of each case If there is a match, the associated block of code is executed If there is no match, the default block of code is executed --questions--\n--text--\nGiven the JavaScript code snippet below, which modifies the activity variable based on the day of the week, what will be the value of the activity variable if the value of the day variable is \"Tuesday\" ```javascript\nlet day = \"Tuesday\";\nlet activity;\nswitch (day) {\ncase \"Monday\":\nactivity = \"Go to the gym\";\nbreak;\ncase \"Tuesday\":\nactivity = \"Attend coding meetup\";\nbreak;\ncase \"Wednesday\":\nactivity = \"Watch a movie\";\nbreak;\ncase \"Thursday\":\nactivity = \"Visit a museum\";\nbreak;\ncase \"Friday\":\nactivity = \"Dinner with friends\";\nbreak;\ncase \"Saturday\":\nactivity = \"Hiking in the mountains\";\nbreak;\ncase \"Sunday\":\nactivity = \"Rest at home\";\nbreak;\ndefault:\nactivity = \"Undefined day\";\n}\n```\n--answers--\nThe value of the activity variable will be \"Attend coding meetup\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2620,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-k.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4313e9e4c3e3aff60ce3433a897d866f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-k.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"Monday\": activity = \"Go to the gym\"; break; case \"Tuesday\": activity = \"Attend coding meetup\"; break; case \"Wednesday\": activity = \"Watch a movie\"; break; case \"Thursday\": activity = \"Visit a museum\"; break; case \"Friday\": activity = \"Dinner with friends\"; break; case \"Saturday\": activity = \"Hiking in the mountains\"; break; case \"Sunday\": activity = \"Rest at home\"; break; default: activity = \"Undefined day\"; } ``` --answers-- The value of the activity variable will be \"Attend coding meetup\"The value of the activity variable will be \"Watch a movie\" The value of the activity variable will be \"Undefined day\" The value of the activity variable will be \"Go to the gym\" --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2620,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-k.md",
      "source_type": "git_repo"
    },
    "token_count": 164,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9031fb64cedc7bbd31ea5a4bf89bae16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6617aef85b87c334e7ae8017\ntitle: Learn Function Basics Lesson F\nchallengeType: 15\ndashedName: learn-function-basics-lesson-f\n--description--\nArrow functions are a more modern way to write functions in JavaScript. They provide a more compact syntax compared to traditional function expressions. Arrow functions are defined using the => syntax.\njs\nconst add = (a, b) => {\nreturn a + b;\n}\nIn the example above, the arrow function add takes two parameters a and b and returns their sum. The return keyword is used to return the result of the addition operation.\nIf the arrow function has only one expression, the curly braces {} and the return keyword can be omitted. The expression will be implicitly returned.\njs\nconst add = (a, b) => a + b;\nIn the example above, the arrow function add takes two parameters a and b and returns their sum. The return keyword and curly braces {} are omitted, and the result of the addition operation is implicitly returned.\n--questions--\n--text--\nWhat makes arrow functions different from traditional function expressions in JavaScript?\n--answers--\nThey cannot return values.\nThey cannot take parameters.\nThey have a more compact syntax compared to traditional function expressions.\nThey require the use of the function keyword.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1379,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "11411dc1b9c7bfa25b84d335072e15c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e1672c65bc8e73dfe1f\ntitle: HTML Foundations Lesson B\nchallengeType: 15\ndashedName: html-foundations-lesson-b\n--description--\nYou can think of elements as containers for content. The opening and closing tags tell the browser what content the element contains. The browser can then use that information to determine how it should interpret and format the content.\nThere are some HTML elements that do not have a closing tag. These elements often look like this: <br /> or <img/>, but some can also be used without the closing forward slash such as <br> or <img>. These are known as void elements or empty elements because they don’t wrap any content. You will encounter a few of these in later lessons, but for the most part, elements will have both opening and closing tags.\nHTML has a vast list of predefined tags that you can use to create all kinds of different elements. It is important to use the correct tags for content. Using the correct tags can have a big impact on two aspects of your sites: how they are ranked in search engines; and how accessible they are to users who rely on assistive technologies, like screen readers, to use the internet.\nUsing the correct elements for content is called semantic HTML. You will explore this in much more depth later on in the curriculum.\n--questions--\n--text--\nWhy are void elements like <br/> or <img> essential in HTML?\n--answers--\nThey prevent formatting issues in HTML documents.\nThey indicate empty elements and require no closing tag.\nThey improve website performance by reducing code complexity.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "38372c39975edddeb69119a14a3fc854",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e0e72c65bc8e73dfe1e\nvideoId: LGQuIIv2RVA\ntitle: HTML Foundations Lesson A\nchallengeType: 15\ndashedName: html-foundations-lesson-a\n--description--\nAlmost all elements on an HTML page are just pieces of content wrapped in opening and closing HTML tags.\nOpening tags tell the browser this is the start of an HTML element. They are comprised of a keyword enclosed in angle brackets <>. For example, an opening paragraph tag looks like this: <p>.\nClosing tags tell the browser where an element ends. They are almost the same as opening tags; the only difference is that they have a forward slash before the keyword. For example, a closing paragraph tag looks like this: </p>.\nA full paragraph element looks like this:\n--assignment--\nWatch Kevin Powell’s Introduction to HTML video\n--questions--\n--text--\nWhat are HTML tags?\n--answers--\nHTML tags tell the browser what content an element contains.\nHTML tags tell the browser when to load its content.\nHTML tags tell the browser what content the next element contains.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4e38aea1afb495bd8f5fe10e40982bc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e1c72c65bc8e73dfe20\ntitle: HTML Foundations Lesson C\nchallengeType: 15\ndashedName: html-foundations-lesson-c\n--description--\nTo demonstrate an HTML boilerplate, you first need an HTML file to work with.\nCreate a new folder on your computer and name it html-boilerplate. Within that folder create a new file and name it index.html.\nYou’re probably already familiar with a lot of different types of files, for example doc, pdf, and image files.\nTo let the computer know you want to create an HTML file, you need to append the filename with the .html extension as you have done when creating the index.html file.\nIt is worth noting that you named your HTML file index. You should always name the HTML file that will contain the homepage of your websites index.html. This is because web servers will by default look for an index.html page when users land on your websites - and not having one will cause big problems.\nThe DOCTYPE\nEvery HTML page starts with a doctype declaration. The doctype’s purpose is to tell the browser what version of HTML it should use to render the document. The latest version of HTML is HTML5, and the doctype for that version is simply <!DOCTYPE html>.\nThe doctypes for older versions of HTML were a bit more complicated. For example, this is the doctype declaration for HTML4:\n```html\n```\nHowever, you probably won’t ever want to be using an older version of HTML, and so you’ll always use <!DOCTYPE html>.\nOpen the index.html file created earlier in your text editor and add <!DOCTYPE html> to the very first line.\n--questions--\n--text--\nWhat is the purpose of the DOCTYPE declaration?\n--answers--\nIt tells the browser which version of HTML to use to render the document.\nIt tells the browser that this document uses JavaScript.\nIt tells the browser the title of the document.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e79f191769e1af5823689b54e2ade3a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e2872c65bc8e73dfe21\ntitle: HTML Foundations Lesson D\nchallengeType: 15\ndashedName: html-foundations-lesson-d\n--description--\nAfter you declare the doctype, you need to provide an <html> element. This is what’s known as the root element of the document, meaning that every other element in the document will be a descendant of it.\nThis becomes more important later on when you learn about manipulating HTML with JavaScript. For now, just know that the html element should be included on every HTML document.\nBack in the index.html file, let’s add the <html> element by typing out its opening and closing tags, like so:\n```html\n```\nWhat is the lang attribute?\nlang specifies the language of the text content in that element. This attribute is primarily used for improving accessibility of the webpage. It allows assistive technologies, for example screen readers, to adapt according to the language and invoke correct pronunciation.\n--questions--\n--text--\nWhat is the html element?\n--answers--\nIt is the root element in the document and tells the browser which version of HTML it should use.\nIt is the root element in the document and all other elements should descend from it.\nIt is the root element in the document and all other elements should come after it.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1401,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 282,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4ba36d0b2bba9a8027e62596f88b709",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6376327e2724a688c04636e3\ntitle: HTML Foundations Lesson G\nchallengeType: 15\ndashedName: html-foundations-lesson-g\n--description--\nHTML and CSS are two languages that work together to create everything that you see when you look at something on the internet. HTML is the raw data that a webpage is built out of. All the text, links, cards, lists, and buttons are created in HTML. CSS is what adds style to those plain elements. HTML puts information on a webpage, and CSS positions that information, gives it color, changes the font, and makes it look great!\n--questions--\n--text--\nWhat are the primary responsibilities of HTML and CSS in creating a webpage?\n--answers--\nHTML structures the content, while CSS styles the elements.\nHTML creates the visual design, while CSS organizes the content.\nCSS manages the functionality, while HTML controls the layout.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 930,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f81dbc785af52546e2077d760d400099",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e3672c65bc8e73dfe23\nvideoId: V8UAEoOvqFg\ntitle: HTML Foundations Lesson F\nchallengeType: 15\ndashedName: html-foundations-lesson-f\n--description--\nThe final element needed to complete the HTML boilerplate is the <body> element. This is where all the content that will be displayed to users will go - the text, images, lists, links, and so on.\nTo complete the boilerplate, add a body element to the index.html file. The body element also goes within the html element and is always below the head element, like so:\n--assignment--\nWatch and follow along to Kevin Powell’s brilliant Building your first web page video above.\nBuild some muscle memory by deleting the contents of the index.html file and trying to write out all the boilerplate again from memory. Don’t worry if you have to peek at the lesson content the first few times if you get stuck. Just keep going until you can do it a couple of times from memory.\nRun your boilerplate through this HTML validator. Validators ensure your markup is correct and are an excellent learning tool, as they provide feedback on syntax errors you may be making often and aren’t aware of, such as missing closing tags and extra spaces in your HTML.\n--questions--\n--text--\nWhat is the purpose of the body element?\n--answers--\nThis is where all important information about the webpage is displayed such as the title and meta tags.\nThis is where you tell the browser how to render the webpage correctly.\nThis is where all content will be displayed on the page such images, text, and links.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1695,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "31f5af12884f13e5d2811f61307c8cca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637633162724a688c04636e4\ntitle: HTML Foundations Lesson H\nchallengeType: 15\ndashedName: html-foundations-lesson-h\n--description--\nHTML and CSS are primarily concerned with presenting information. They are not used to program logic. JavaScript, which you will learn in the next section, is used to make webpages do things. There is quite a lot you can do with just HTML and CSS, and you will definitely need them both. Throughout our curriculum, the following lessons focus on giving you the tools you need to succeed once you reach JavaScript content.\n--questions--\n--text--\nWhat is one way in which JavaScript is different than HTML and CSS?\n--answers--\nJavaScript is primarily concerned with presenting information.\nJavaScript makes webpages take actions.\nYou do not need HTML/CSS if you know JavaScript.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 878,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e84e87fbd47d1abe5e2d8c44019aeca6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-e.md",
    "source_type": "git_repo",
    "title": "My First Webpage",
    "content": "id: 637f4e2f72c65bc8e73dfe22\ntitle: HTML Foundations Lesson E\nchallengeType: 15\ndashedName: html-foundations-lesson-e\n--description--\nThe <head> element is where you put important meta-information about your webpages, and stuff required for your webpages to render correctly in the browser. Inside the <head>, you should not use any element that displays content on the webpage.\nThe Charset Meta Element\nYou should always have the meta tag for the charset encoding of the webpage in the head element: <meta charset=\"utf-8\">.\nSetting the encoding is very important because it ensures that the webpage will display special symbols and characters from different languages correctly in the browser.\nTitle Element\nAnother element you should always include in the head of an HTML document is the title element:\nhtml\n<title>My First Webpage</title>\nThe title element is used to give webpages a human-readable title which is displayed in your webpage’s browser tab.\nIf you didn’t include a title element, the webpage’s title would default to its file name. In your case that would be index.html, which isn’t very meaningful for users; this would make it very difficult to find your webpage if the user has many browser tabs open.\nThere are many more elements that can go within the head of an HTML document. However, for now it’s only crucial to know about the two elements you have covered here. You will introduce more elements that go into the head throughout the rest of the curriculum.\nBack in index.html file, let’s add a head element with a charset meta element and a title within it. The head element goes within the HTML element and should always be the first element under the opening <html> tag:\n```html\nMy First Webpage\n```\n--questions--\n--text--\nWhat is the purpose of the head element?\n--answers--\nThe head element is used to display all elements that are displayed on the webpage.\nThe head element is used to display important information about your webpage and is used to render web pages correctly with meta elements.\nThe head element is used to display the header content on top of the webpage.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2361,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8bbc1fcef41e230d730cd37121ca393e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66581a78b1eb2281159492fa\ntitle: Learn to Solve Problems and Understand Errors Lesson A\nchallengeType: 15\ndashedName: learn-to-solve-problems-and-understand-errors-lesson-a\n--description--\nBefore you start digging into some pretty nifty JavaScript, you need to begin talking about problem solving: the most important skill a developer needs.\nProblem solving is the core thing software developers do. The programming languages and tools they use are secondary to this fundamental skill.\nFrom his book, \"Think Like a Programmer\", V. Anton Spraul defines problem solving in programming as:\nProblem solving is writing an original program that performs a particular set of tasks and meets all stated constraints.\nThe set of tasks can range from solving small coding exercises all the way up to building a social network site like Facebook or a search engine like Google. Each problem has its own set of constraints, for example, high performance and scalability may not matter too much in a coding exercise but it will be vital in apps like Google that need to service billions of search queries each day.\nNew programmers often find problem solving the hardest skill to build. It's not uncommon for budding programmers to breeze through learning syntax and programming concepts, yet when trying to code something on their own, they find themselves staring blankly at their text editor not knowing where to start.\nThe best way to improve your problem solving ability is by building experience by making lots and lots of programs. The more practice you have the better you'll be prepared to solve real world problems.\n--assignment--\nRead How to Think Like a Programmer - Lessons in Problem Solving by Richard Reis.\n--questions--\n--text--\nAccording to V. Anton Spraul in \"Think Like a Programmer,\" what is problem solving in programming?\n--answers--\nLearning the syntax and concepts of different programming languages.\nBuilding applications with high performance and scalability as the key features.\nWriting an original program that performs a specific set of tasks and meets all stated constraints.\nSolving coding exercises to improve programming skills.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9f2c5cf8e2a36227902a8b6abc33b54f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66581a7bb1eb2281159492fd\ntitle: Learn to Solve Problems and Understand Errors Lesson D\nchallengeType: 15\ndashedName: learn-to-solve-problems-and-understand-errors-lesson-d\n--description--\nReading and understanding error messages is a requirement as a developer. At first glance, many beginners shrink away from error messages as they appear to be “scary” and difficult to understand because they include terms one may not be familiar with.\nHowever, error messages provide developers with a treasure trove of knowledge, and tell you everything you need to know about how to resolve them! Being able to parse error messages and warnings without fear will enable you to effectively debug your applications, receive meaningful help from others, and empower yourself to push forward when faced with an error.\n--questions--\n--text--\nAccording to the text, why should developers not shy away from error messages?\n--answers--\nError messages are only for advanced programmers and can be ignored by beginners until they gain more experience.\nError messages need to be memorized completely to be effective in programming.\nError messages provide crucial information that helps developers understand and fix problems in their code.\nError messages are meant to be handled by automated debugging tools and do not require human interpretation.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f27f96803c9fe11cbe5f79f307e20967",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66581a7bb1eb2281159492fc\ntitle: Learn to Solve Problems and Understand Errors Lesson C\nchallengeType: 15\ndashedName: learn-to-solve-problems-and-understand-errors-lesson-c\n--description--\nPseudocode\nPseudocode is writing out the logic for your program in natural language instead of code. It helps you slow down and think through the steps your program will have to go through to solve the problem.\nHere’s an example of what the pseudocode for a program that prints all numbers up to an inputted number might look like:\nmd\nWhen the user inputs a number\nInitialize a counter variable and set its value to zero\nWhile counter is smaller than user inputted number increment the counter by one\nPrint the value of the counter variable\nThis is a basic program to demonstrate how pseudocode looks. There will be more examples of pseudocode included in the assignments.\n--assignment--\nRead this  Pseudocode: What It Is and How to Write It article from Built In.\n--questions--\n--text--\nWhat are the benefits of using pseudocode according to the linked article?\n--answers--\nPseudocode is primarily beneficial for beginners as it helps them learn programming languages faster by skipping complex syntax.\nPseudocode simplifies communication with non-programmers, aids in code construction, provides a good basis for documentation, and helps in bug detection.\nPseudocode entirely eliminates the need for programmers to understand or use programming languages, making it the primary tool for professional coders.\nPseudocode is used exclusively for creating detailed flowcharts that replace traditional coding in complex software development environments.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1807,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "af0dfd7b1e1ec9d6b5fe0374b0254abe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66581a7ab1eb2281159492fb\ntitle: Learn to Solve Problems and Understand Errors Lesson B\nchallengeType: 15\ndashedName: learn-to-solve-problems-and-understand-errors-lesson-b\n--description--\nUnderstand the problem\nThe first step to solving a problem is understanding exactly what the problem is. If you don’t understand the problem, you won’t know when you’ve successfully solved it and may waste a lot of time on a wrong solution.\nTo gain clarity and understanding of the problem, write it down on paper, reword it in plain English until it makes sense to you, and draw diagrams if that helps. When you can explain the problem to someone else in plain English, you understand it.\nPlan\nNow that you know what you’re aiming to solve, don’t jump into coding just yet. It’s time to plan out how you’re going to solve it first. Some of the questions you should answer at this stage of the process:\nDoes your program have a user interface? What will it look like? What functionality will the interface have? Sketch this out on paper.\nWhat inputs will your program have? Will the user enter data or will you get input from somewhere else?\nWhat’s the desired output?\nGiven your inputs, what are the steps necessary to return the desired output?\nThe last question is where you will write out an algorithm to solve the problem. You can think of an algorithm as a recipe for solving a particular problem. It defines the steps that need to be taken by the computer to solve a problem in pseudocode.\n--assignment--\nWatch How to Begin Thinking Like a Programmer by Coding Tech. It’s an hour long but packed full of information and definitely worth your time watching.\n--questions--\n--text--\nWhat should you do before starting to code according to the provided text?\n--answers--\nImmediately start coding to see what problems arise.\nWrite out the problem in plain English and make sure you can explain it to someone else.\nSketch the user interface and start coding the most complex functions first.\nCollect all possible inputs from users and other sources.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2231,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0864452f8c9a95a7e2fca572e04c8122",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66581a7cb1eb2281159492fe\ntitle: Learn to Solve Problems and Understand Errors Lesson E\nchallengeType: 15\ndashedName: learn-to-solve-problems-and-understand-errors-lesson-e\n--description--\nLet’s assume you have written the following code:\n```javascript\nconst a = \"Hello\";\nconst b = \"World\";\nconsole.log(c);\n```\nThis code will run, but it will generate an error. In technical terms, this is called throwing an error. The first part of an error displays the type of error. This provides the first clue as to what you're dealing with. You'll learn more about the different error types later in the lesson. In this example, you have a ReferenceError.\nA ReferenceError is thrown when one refers to a variable that is not declared and/or initialized within the current scope. In our case, the error message explains that the error has occurred because c is not defined.\nDifferent errors of this type have different messages based on what is causing the ReferenceError. For example, another message you may run into is ReferenceError: can't access lexical declaration 'X' before initialization.\nThe next part of an error gives us the name of the file in which you can find the error (in this case, our script.js), and also the line number.\nThis allows you to easily navigate to the problematic line in your code. Here, the error originates from the fourth line of script.js, which is displayed as a link under the error message with the text at script.js:4. If you click this link, most browsers will navigate to the exact line of code and the rest of your script in the Sources tab of the Developer Tools.\nSometimes your browser’s console will also display the column (or character) in the line at which the error is occurring. In our example, this would be at script.js:4:13.\n--questions--\n--text--\nWhat does the ReferenceError in the provided JavaScript code indicate?\n--answers--\nThe variable used has been declared but used incorrectly in its type.\nThe variable called in the code has not been declared within the current scope.\nThe code has an issue with its syntax that prevents it from being parsed correctly.\nThe variable used has been declared but not initialized within the current scope.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2551,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4973f19bbe6fa8b153dbe527f8316a0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66581a7eb1eb228115949300\ntitle: Learn to Solve Problems and Understand Errors Lesson G\nchallengeType: 15\ndashedName: learn-to-solve-problems-and-understand-errors-lesson-g\n--description--\nSay you have two strings that you would like to combine to create one message, such as below:\njs\nconst str1 = \"Hello\";\nconst str2 = \"World!\";\nconst message = str1.push(str2);\nHere, you'll get a TypeError with a message stating that str1.push is not a function. This is a common error message that confuses learners because you might know that .push() is certainly a function (for example, if you have used it to add items to arrays before).\nBut that's the key - .push() is not a String method, it's an Array method. Hence, it is “not a function” that you can find as a String method. If you change.push() to .concat(), a proper String method, our code runs as intended!\nA good note to keep in mind when faced with a TypeError is to consider the data type you are trying to run a method or operation against. You'll likely find that it is not what you think, or the operation or method is not compatible with that type.\n--questions--\n--text--\nWhy does the following JavaScript code result in a TypeError?\njs\nconst str1 = \"Hello\";\nconst str2 = \"World!\";\nconst message = str1.push(str2);\n--answers--\nThe .push() method can only be used on objects, not strings.\nThe .push() method is not available for strings because it is an Array method.\nThe .push() method is incorrectly spelled and should be .pusch().\nThe TypeError is a result of a syntax error in the JavaScript code.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b3300baa3713f38ab8be1fc9ce0535a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66581a7db1eb2281159492ff\ntitle: Learn to Solve Problems and Understand Errors Lesson F\nchallengeType: 15\ndashedName: learn-to-solve-problems-and-understand-errors-lesson-f\n--description--\nAnother important part of an error is the stack trace. This helps you understand when the error was thrown in your application, and what functions were called that led up to the error. So, for example, if you have the following code:\n```javascript\nconst a = 5;\nconst b = 10;\nfunction add() {\nreturn c;\n}\nfunction print() {\nadd();\n}\nprint();\n```\nOur function print() should call on add(), which returns a variable named c, which currently has not been declared. The corresponding error is as follows:\nThe stack trace tells us that:\nc is not defined in scope of add(), which is declared on line 5.\nadd() was called by print(), which was declared on line 9.\nprint() itself was called on line 12.\nThus the stack trace lets you trace the evolution of an error back to its origin, which here is the declaration of add().\n--questions--\n--text--\nHow does the stack trace help in debugging the error in the provided JavaScript code?\n--answers--\nThe stack trace shows that the function add() correctly returns the value of c.\nThe stack trace indicates which line in the code needs to be edited to correct a syntax error.\nThe stack trace provides a detailed path of function calls leading to the error, helping identify where c is incorrectly referenced.\nThe stack trace only indicates that print() was called, but does not provide details about the error in add().\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1918,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3c4d29078820919db47c8fa377b39b3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66581a7fb1eb228115949301\ntitle: Learn to Solve Problems and Understand Errors Lesson H\nchallengeType: 15\ndashedName: learn-to-solve-problems-and-understand-errors-lesson-h\n--description--\nAt this point, you might be wondering how you can resolve these errors.\nYou can start by understanding that the error message is your friend - not your enemy. Error messages tell you exactly what is wrong with your code, and which lines to examine to find the source of the error. Without error messages it would be a nightmare to debug our code - because it would still not work, you just wouldn’t know why!\nYou should search your error on the web, most of the time you will be able to find a fix or explanation on StackOverflow or in the documentation. If nothing else, you will receive more clarity as to why you are receiving this error.\nAnother way is to use console.log() — it is a popular choice for quick debugging. For more involved troubleshooting, using the debugger might be more appropriate, but using console.log() is great for getting immediate feedback without needing to step through your functions. There are also other useful methods such as console.table(), console.trace(), and more!\n--questions--\n--text--\nWhen encountering an error in your code, which of the following is NOT a recommended step for identifying and resolving the issue?\n--answers--\nUtilizing console.log() or other console methods to debug and gain insights into the values and state of your code.\nSearching for the error message on resources like StackOverflow or reading documentation.\nIgnoring the error messages and guessing what might be wrong.\nUsing error messages as a guide to understand what part of the code is causing the problem.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d682136b1f0f34220450e86e35093a8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-a.md",
    "source_type": "git_repo",
    "title": "Page Title",
    "content": "id: 65e185b1500d930ce8ed909b\ntitle: Learn Variables and Operators Lesson A\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-a\n--description--\nThe simplest way to get started is to create an HTML file with the JavaScript code inside of it. Type the basic HTML skeleton into a file on your computer somewhere:\n```html\nPage Title\n```\nSave and open this file up in a web browser (you can use \"Live Server\" on Visual Studio Code to do this!) and then open up the browser’s console by right-clicking on the blank webpage and selecting \"Inspect\" or \"Inspect Element\". In the ‘Developer Tools’ pane find and select the ‘Console’ tab, where you should see the output of our console.log statement.\nconsole.log() is the command to print something to the developer console in your browser. You can use this to print the results from any of the following articles and exercises to the console. We encourage you to code along with all of the examples in this and future lessons.\nAnother way to include JavaScript in a webpage is through an external script. This is very similar to linking external CSS docs to your website.\n```html\n```\nJavaScript files have the extension .js similar to .css for stylesheets. External JavaScript files are used for more complex scripts.\n--questions--\n--text--\nWhich statement accurately describes how to include JavaScript in an HTML document?\n--answers--\nJavaScript can only be included internally within a <script> tag in the HTML body.\nJavaScript code must be written in the <head> section of an HTML document for it to execute properly.\nJavaScript can be included directly in an HTML file using a <script> tag or linked externally via a <script src=\"javascript.js\"> tag.\nExternal JavaScript files require a special attribute in the <script> tag to be recognized by web browsers.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ba4bb2ebf21a505944649ed7f9b52bab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e1957a500d930ce8ed90a6\ntitle: Learn Variables and Operators Lesson C\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-c\n--description--\nTo declare a constant (unchanging) variable, use const instead of let:\njavascript\nconst myBirthday = '16-09-2003';\nVariables declared using const are called \"constants\". They cannot be reassigned. An attempt to do so would cause an error:\n```javascript\nconst myBirthday = '16-09-2003';\nmyBirthday = '01-01-2001'; // error, can't reassign the constant!\n```\nWhen a programmer is sure that a variable will never change, they can declare it with const to guarantee and communicate that fact to everyone.\n--questions--\n--text--\nWhat is the result of attempting to reassign a const declared variable in JavaScript?\n--answers--\nThe reassignment succeeds with no errors.\nAn error is thrown because const declared variables cannot be reassigned.\nJavaScript silently ignores the reassignment.\nThe variable type is automatically changed to let.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1089,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2feb764b6c465facd8be9d1234191f4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e18d61500d930ce8ed90a5\ntitle: Learn Variables and Operators Lesson B\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-b\n--description--\nYou can think of variables as \"storage containers\" for data in your code.\nA variable is a \"named storage\" for data. You can use variables to store goodies, visitors, and other data.\nTo create a variable in JavaScript, use the let keyword.\nThe statement below creates (in other words: declares) a variable with the name \"message\":\njs\nlet message;\nNow, you can put some data into it by using the assignment operator =:\n```js\nlet message;\n// store the string 'Hello' in the variable named message\nmessage = 'Hello';\n```\nTo be concise, you can combine the variable declaration and assignment into a single line:\njs\nlet message = 'Hello';\n--questions--\n--text--\nWhat is the purpose of using the let keyword in JavaScript?\n--answers--\nTo perform mathematical operations.\nTo declare a constant value that cannot be changed.\nTo declare a variable that can store data, which can be assigned and changed.\nTo create a function.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1446,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e2798fcd6ea3c07611ceb0f099b8603c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e1985e500d930ce8ed90a7\ntitle: Learn Variables and Operators Lesson D\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-d\n--description--\nThere are two limitations on variable names in JavaScript:\nThe name must contain only letters, digits, or the symbols $ and _.\nThe first character must not be a digit.\nExamples of valid names:\njs\nlet userName;\nlet test123;\nWhat’s interesting – the dollar sign '$' and the underscore '_' can also be used in names. They are regular symbols, just like letters, without any special meaning.\nThese names are valid:\n```js\nlet $ = 1; // declared a variable with the name \"$\"\nlet _ = 2; // and now a variable with the name \"_\"\nconsole.log($ + _); // 3\n```\nExamples of incorrect variable names:\n```js\nlet 1a; // cannot start with a digit\nlet my-name; // hyphens '-' aren't allowed in the name\n```\n--questions--\n--text--\nWhich of the following is a valid JavaScript variable name?\n--answers--\nlet 2things;\nlet my-name;\nlet var!;\nlet $myVar;\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1104,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bf795e8c36fcb53ac1a77bdc5d4ea176",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e19bc3500d930ce8ed90a8\ntitle: Learn Variables and Operators Lesson E\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-e\n--description--\nNumbers are the building blocks of programming logic! In fact, it’s hard to think of any useful programming task that doesn’t involve at least a little basic math… so knowing how numbers work is obviously quite important. Luckily, it’s also fairly straightforward.\n| Operator | Description                  | Example            |\n|----------|------------------------------|--------------------|\n| +        | Addition                     | 5 + 3 = 8          |\n| -        | Subtraction                  | 5 - 3 = 2          |\n| *        | Multiplication               | 5 * 3 = 15         |\n| **       | Exponentiation               | 5 ** 3 = 125       |\n| /        | Division                     | 6 / 3 = 2          |\n| %        | Modulus                      | 5 % 3 = 2          |\n--assignment--\nGiven the table of operators above, write a simple program snippet that demonstrates the use of each operator with the variable x initialized to 10.\n--questions--\n--text--\nWhat is the result of applying the modulus operator to x where x = 10?\n--answers--\nx % 3 results in 1\nx % 3 results in 3\nx % 3 results in 0\nx % 3 results in 2\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 323,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12f6708830a5ffc9ad2b8fb6230c77a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e1aedc500d930ce8ed90ac\ntitle: Learn Variables and Operators Lesson H\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-h\n--description--\nIf an expression has more than one operator, the execution order is defined by their precedence, or, in other words, the default priority order of operators.\nFrom school, you know that the multiplication in the expression 1 + 2 * 2 should be calculated before the addition. That’s exactly the precedence thing. The multiplication is said to have a higher precedence than the addition.\nParentheses override any precedence, so if you’re not satisfied with the default order, you can use them to change it. For example, write (1 + 2) * 2.\nThere are many operators in JavaScript. Every operator has a corresponding precedence number. The one with the larger number executes first. If the precedence is the same, the execution order is from left to right.\nHere’s an extract from the precedence table (you don’t need to remember this, but note that unary operators are higher than corresponding binary ones):\n| Precedence | Name             | Sign |\n|------------|------------------|------|\n| ...        | ...              | ...  |\n| 14         | unary plus       | +    |\n| 14         | unary negation   | -    |\n| 13         | exponentiation   | **   |\n| 12         | multiplication   | *    |\n| 12         | division         | /    |\n| 11         | addition         | +    |\n| 11         | subtraction      | -    |\n| ...        | ...              | ...  |\n| 2          | assignment       | =    |\n| ...        | ...              | ...  |\n--questions--\n--text--\nWhen dealing with multiple operators in a JavaScript expression, which statement is true regarding the order of execution?\n--answers--\nOperators are executed from right to left, regardless of their precedence.\nOperators with higher precedence are executed first, and parentheses can override the predefined precedence.\nThe operator precedence is determined by the operator's speed of execution.\nMultiplication always takes precedence over addition, and unary operators are executed after binary ones.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "00878c05b810f35aa4b12aa6ef0735d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e1aaf8500d930ce8ed90aa\ntitle: Learn Variables and Operators Lesson G\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-g\n--description--\nThe plus + exists in two forms: the binary form that you used in the last challenge and the unary form The unary plus or, in other words, the plus operator + applied to a single value, doesn’t do anything to numbers But if the operand is not a number, the unary plus converts it into a number For example:\n```js\n// No effect on numbers\nlet x = 1;\nconsole log( +x ); // 1\nlet y = -2;\nconsole log( +y ); // -2\n// Converts non-numbers\nconsole log( +true ); // 1\nconsole log( +\"\" );   //\n```\nThe need to convert strings to numbers arises very often For example, if you are getting values from HTML form fields, they are usually strings What if you want to sum them The binary plus would add them as strings:\n```js\nlet apples = \"2\";\nlet oranges = \"3\";\nalert( apples + oranges ); // \"23\", the binary plus concatenates strings\n```\nIf you want to treat them as numbers, you need to convert and then sum them:\n```js\nlet apples = \"2\";\nlet oranges = \"3\";\n// both values converted to numbers before the binary plus\nalert( +apples + +oranges ); // 5\n// the longer variant\n// alert( Number(apples) + Number(oranges) ); // 5\n```\nFrom a mathematician’s standpoint, the abundance of pluses may seem strange But from a programmer’s standpoint, there’s nothing special: unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up Why are unary pluses applied to values before the binary ones As you’re going to see, that’s because of their higher precedence --questions--\n--text--\nGiven the explanation of unary and binary + operators in JavaScript, how can you correctly sum the string values '2' and '3' as numbers using unary + --answers--\nconsole log('2' + '3'); // Outputs: '23'\nconsole log(+2 + +3); // Outputs: 5\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2130,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6a866d6d041f1fe5d1c1c14e0ef666f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "numbers, and then the binary plus sums them up Why are unary pluses applied to values before the binary ones As you’re going to see, that’s because of their higher precedence --questions-- --text-- Given the explanation of unary and binary + operators in JavaScript, how can you correctly sum the string values '2' and '3' as numbers using unary + --answers-- console log('2' + '3'); // Outputs: '23' console log(+2 + +3); // Outputs: 5 consolelog(+'2' + +'3'); // Outputs: 5\nconsole log(Number('2') + Number('3')); // Outputs: '23'\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2130,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 144,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8e44f891dc38eee84bd64f4beed78030",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e1a2ea500d930ce8ed90a9\ntitle: Learn Variables and Operators Lesson F\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-f\n--description--\nLet’s meet the features of JavaScript operators that are beyond school arithmetics Usually, the plus operator + sums numbers But, if the binary + is applied to strings, it merges (concatenates) them:\njs\nlet s = \"my\" + \"string\";\nconsole log(s); // mystring\nNote that if any of the operands is a string, then the other one is converted to a string too For example:\njs\nconsole log(1 + '2'); // '12'\nconsole log('1' + 2); // '12'\nSee, it doesn’t matter whether the first operand is a string or the second one Here’s a more complex example:\njs\nconsole log(2 + 2 + '1') // \"41\" and not \"221\"\nHere, operators work one after another The first + sums two numbers, so it returns 4, then the next +   adds the string 1 to it, so it’s like 4 + '1' = '41' js\nconsole log('1' + 2 + 2) // \"122\" and not \"14\"\nHere, the first + concatenates the string and the number, so it returns '12', then the next + adds 2 to it, so it’s like '12' + 2 = '122' The binary + is the only operator that supports strings in such a way Other arithmetic operators work only with numbers and always convert their operands to numbers Here’s the demo for subtraction and division:\njs\nconsole log( 6 - '2' ); // 4, converts '2' to a number\nconsole log( '6' / '2' ); // 3, converts both operands to numbers\n--questions--\n--text--\nConsidering the behavior of the + operator with mixed data types in JavaScript, what will be the output of the following code snippet js\nconsole log('3' + 2 - 1);\n--answers--\n31, because the + operator concatenates the string and number before subtraction 32, because + concatenates the string and number before subtraction 4, because all operands are converted to numbers first 321, because the - operator is not supported with strings",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2079,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bbd39ca279103db9ec2c8a7d9d8cf03e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to numbers --questions-- --text-- Considering the behavior of the + operator with mixed data types in JavaScript, what will be the output of the following code snippet js console log('3' + 2 - 1); --answers-- 31, because the + operator concatenates the string and number before subtraction 32, because + concatenates the string and number before subtraction 4, because all operands are converted to numbers first 321, because the - operator is not supported with strings--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2079,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 105,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a5aa9b1ba5efb6f7b85664cf17fb640f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65e1b46e500d930ce8ed90ad\ntitle: Learn Variables and Operators Lesson I\nchallengeType: 15\ndashedName: learn-variables-and-operators-lesson-i\n--description--\nIncreasing or decreasing a number by one is among the most common numerical operations So, there are special operators for it:\nIncrement ++ increases a variable by 1:\n```js\nlet counter = 2;\n// works the same as counter = counter + 1, but is shorter\ncounter++;\nconsole log(counter); // 3\n```\nDecrement -- decreases a variable by 1:\n```js\nlet counter = 2;\n// works the same as counter = counter - 1, but is shorter\ncounter--;\nconsole log(counter); // 1\n```\nThe operators ++ and -- can be placed either before or after a variable When the operator goes after the variable, it is in \"postfix form\": counter++ The \"prefix form\" is when the operator goes before the variable: ++counter Both of these statements do the same thing: increase counter by 1 Is there any difference Yes, but you can only see it if you use the returned value of ++/-- Let’s clarify As you know, all operators return a value Increment/decrement is no exception The prefix form returns the new value while the postfix form returns the old value (prior to increment/decrement) To see the difference, here’s an example:\n```js\nlet counter = 1;\nlet a = ++counter; // (*)\nconsole log(a); // 2\n```\nTo summarize:\nIf the result of increment/decrement is not used, there is no difference in which form to use:\n```js\nlet counter = 0;\ncounter++;\n++counter;\nconsole log( counter ); // 2, the lines above did the same\n```\nIf you’d like to increase a value and immediately use the result of the operator, you need the prefix form:\njs\nlet counter = 0;\nconsole log( ++counter ); // 1\nIf you’d like to increment a value but use its previous value, you need the postfix form:\njs\nlet counter = 0;\nconsole log( counter++ ); // 0\n--questions--\n--text--\nWhat are the outputs of the two console log statements in the JavaScript code below js\nlet counter = 1;\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2792,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-i.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "78e80736cb2b18458c25ee2de261ac05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "value and immediately use the result of the operator, you need the prefix form: js let counter = 0; console log( ++counter ); // 1 If you’d like to increment a value but use its previous value, you need the postfix form: js let counter = 0; console log( counter++ ); // 0 --questions-- --text-- What are the outputs of the two console log statements in the JavaScript code below js let counter = 1; consolelog(2 * ++counter); // Statement A\njs\nlet counter = 1;\nconsole log(2 * counter++); // Statement B\n--answers--\nThere is no difference; both console log statements will show the same result Statement A will log 4 because ++counter increments the value before the multiplication Statement B will log 2 because counter++ increments the value after the multiplication Statement A will log 2 because ++counter is a syntax error Statement B will log 4 because counter++ is the correct way to increment a counter Both statements will log 3 because the counter is incremented in both cases before the console log --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2792,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-i.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0c37e3966cb8dcd8789e2cf38f847084",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f703572c65bc8e73dfe35\ntitle: Links and Images Lesson B\nchallengeType: 15\ndashedName: links-and-images-lesson-b\n--description--\nTo get some practice using links and images throughout this lesson you need an HTML project to work with Create a new directory named odin-links-and-images Within that directory, create a new file named index html Fill in the usual HTML boilerplate Finally, add the following h1 to the body: <h1>Homepage</h1>\nAnchor Elements\nTo create a link in HTML, you use the anchor element An anchor element is defined by wrapping the text or another HTML element you want to be a link with an <a> tag Add the following to the body of the index html page you created and open it in the browser:\nhtml\n<a>click me</a>\nYou may have noticed that clicking this link doesn’t do anything This is because an anchor tag on its own won’t know where you want to link to You have to tell it a destination to go to You do this by using an HTML attribute An HTML attribute gives additional information to an HTML element and always goes in the element’s opening tag An attribute is usually made up of two parts: a name, and a value; however, not all attributes require a value In your case, you need to add an href (hyperlink reference) attribute to the opening anchor tag The value of the href attribute is the destination you want your link to go to Add the following href attribute to the anchor element you created previously and try clicking it again, don’t forget to refresh the browser so the new changes can be applied html\n<a href=\"https://www theodinproject com/about\">click me</a>\nBy default, any text wrapped with an anchor tag without an href attribute will look like plain text If the href attribute is present, the browser will give the text a blue color and underline it to signify it is a link It’s worth noting you can use anchor tags to link to any kind of resource on the internet, not just other HTML documents You can link to videos, pdf files, images, and so on, but for the most part, you will be linking to other HTML documents --questions--\n--text--\nWhat is an attribute --answers--\nAn HTML attribute gives additional information to an HTML element and always goes in the element’s closing tag",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "03a3ddbb2431d5cd8683f5c6f8855d40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it is a link It’s worth noting you can use anchor tags to link to any kind of resource on the internet, not just other HTML documents You can link to videos, pdf files, images, and so on, but for the most part, you will be linking to other HTML documents --questions-- --text-- What is an attribute --answers-- An HTML attribute gives additional information to an HTML element and always goes in the element’s closing tagAn HTML attribute is used to tell the browser what the element contains An HTML attribute gives additional information to an HTML element and always goes in the element’s opening tag --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2578,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 128,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9ed94a903b87205be9238c8a7f69b13b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f704072c65bc8e73dfe36\nvideoId: tsEQgGjSmkM\ntitle: Links and Images Lesson A\nchallengeType: 15\ndashedName: links-and-images-lesson-a\n--description--\nTo get some practice using links and images throughout this lesson you need an HTML project to work with Create a new directory named odin-links-and-images Within that directory, create a new file named index html Fill in the usual HTML boilerplate Finally, add the following h1 to the body: <h1>Homepage</h1>\nAnchor Elements\nTo create a link in HTML, you use the anchor element An anchor element is defined by wrapping the text or another HTML element you want to be a link with an <a> tag Add the following to the body of the index html page you created and open it in the browser:\nhtml\n<a>click me</a>\nYou may have noticed that clicking this link doesn’t do anything This is because an anchor tag on its own won’t know where you want to link to You have to tell it a destination to go to You do this by using an HTML attribute An HTML attribute gives additional information to an HTML element and always goes in the element’s opening tag An attribute is usually made up of two parts: a name, and a value; however, not all attributes require a value In your case, you need to add an href (hyperlink reference) attribute to the opening anchor tag The value of the href attribute is the destination you want your link to go to Add the following href attribute to the anchor element you created previously and try clicking it again, don’t forget to refresh the browser so the new changes can be applied html\n<a href=\"https://www theodinproject com/about\">click me</a>\nBy default, any text wrapped with an anchor tag without an href attribute will look like plain text If the href attribute is present, the browser will give the text a blue color and underline it to signify it is a link It’s worth noting you can use anchor tags to link to any kind of resource on the internet, not just other HTML documents You can link to videos, pdf files, images, and so on, but for the most part, you will be linking to other HTML documents --assignment--\nWatch Kevin Powell’s HTML Links video above --questions--\n--text--\nWhat HTML tag is used to create a link",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "35f956ce2f6259deb1bae01d234d1e04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "color and underline it to signify it is a link It’s worth noting you can use anchor tags to link to any kind of resource on the internet, not just other HTML documents You can link to videos, pdf files, images, and so on, but for the most part, you will be linking to other HTML documents --assignment-- Watch Kevin Powell’s HTML Links video above --questions-- --text-- What HTML tag is used to create a link--answers--\n<a>\n<p>\n<ol>\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 106,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "405f0e443cc1ff30e816781d0946aec1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f703072c65bc8e73dfe34\ntitle: Links and Images Lesson C\nchallengeType: 15\ndashedName: links-and-images-lesson-c\n--description--\nTo get some practice using links and images throughout this lesson you need an HTML project to work with Create a new directory named odin-links-and-images Within that directory, create a new file named index html Fill in the usual HTML boilerplate Finally, add the following h1 to the body: <h1>Homepage</h1>\nAnchor Elements\nTo create a link in HTML, you use the anchor element An anchor element is defined by wrapping the text or another HTML element you want to be a link with an <a> tag Add the following to the body of the index html page you created and open it in the browser:\nhtml\n<a>click me</a>\nYou may have noticed that clicking this link doesn’t do anything This is because an anchor tag on its own won’t know where you want to link to You have to tell it a destination to go to You do this by using an HTML attribute An HTML attribute gives additional information to an HTML element and always goes in the element’s opening tag An attribute is usually made up of two parts: a name, and a value; however, not all attributes require a value In your case, you need to add an href (hyperlink reference) attribute to the opening anchor tag The value of the href attribute is the destination you want your link to go to Add the following href attribute to the anchor element you created previously and try clicking it again, don’t forget to refresh the browser so the new changes can be applied html\n<a href=\"https://www theodinproject com/about\">click me</a>\nBy default, any text wrapped with an anchor tag without an href attribute will look like plain text If the href attribute is present, the browser will give the text a blue color and underline it to signify it is a link It’s worth noting you can use anchor tags to link to any kind of resource on the internet, not just other HTML documents You can link to videos, pdf files, images, and so on, but for the most part, you will be linking to other HTML documents --questions--\n--text--\nWhat attribute tells links where to go to --answers--\nsrc\nhref\nlink\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2315,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dc718f5af708a394b941405a4b492572",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f702372c65bc8e73dfe32\nvideoId: 0xoztJCHpbQ\ntitle: Links and Images Lesson E\nchallengeType: 15\ndashedName: links-and-images-lesson-e\n--description--\nWebsites would be fairly boring if they could only display text Luckily HTML provides a wide variety of elements for displaying all sorts of different media The most widely used of these is the image element To display an image in HTML you use the <img> element Unlike the other elements you have encountered, the <img> is a void element Empty, void HTML elements do not need a closing tag Instead of wrapping content with an opening and closing tag, it embeds an image into the page using a src attribute which tells the browser where the image file is located The src attribute works much like the href attribute for anchor tags It can embed an image using both absolute and relative paths For example, using an absolute path you can display an image located on The Odin Project site:\nTo use images that you have on your own websites, you can use a relative path Create a new directory named images within the odin-links-and-images project Next, download this image and move it into the images directory you just created Rename the image to dog jpg Finally add the image to the index html file:\n```html\nHomepage\nclick me\nAbout\n```\nSave the index html file and open it in a browser to view Charles in all his glory Parent Directories\nWhat if you want to use the dog image in the about page You would first have to go up one level out of the pages directory into its parent directory so you could then access the images directory To go to the parent directory you need to use two dots in the relative filepath like this: / Let’s see this in action, within the body of the about html file, add the following image below the heading you added earlier:\nhtml\n<img src=\" /images/dog jpg\">\nTo break this down:\nFirst, you are going to the parent directory of the pages directory which is odin-links-and-images Then, from the parent directory, you can go into the images directory Finally, you can access the dog jpg file Using the metaphor we used earlier, using / in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ee0393ea1fe41da4f087a4af38b6473f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "/images/dog jpg\"> To break this down: First, you are going to the parent directory of the pages directory which is odin-links-and-images Then, from the parent directory, you can go into the images directory Finally, you can access the dog jpg file Using the metaphor we used earlier, using / in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another roomAlt attribute\nBesides the src attribute, every image element should also have an alt (alternative text) attribute The alt attribute is used to describe an image It will be used in place of the image if it cannot be loaded It is also used with screen readers to describe what the image is to visually impaired users This is how the The Odin Project logo example you used earlier looks with an alt attribute included:\n--assignment--\nWatch Kevin Powell’s HTML Images Video above --questions--\n--text--\nWhich tag is used to display an image --answers--\n<link>\n<a>\n<img>\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c5d9bb063c3e7b7b64518a172e9ee68e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-d.md",
    "source_type": "git_repo",
    "title": "Odin Links and Images",
    "content": "id: 637f702872c65bc8e73dfe33\nvideoId: ta3Oxx7Yqbo\ntitle: Links and Images Lesson D\nchallengeType: 15\ndashedName: links-and-images-lesson-d\n--description--\nGenerally, there are two kinds of links you will create:\nLinks to pages on other websites on the internet\nLinks to pages located on your own websites\nAbsolute Links\nLinks to pages on other websites on the internet are called absolute links A typical absolute link will be made up of the following parts: protocol://domain/path An absolute link will always contain the protocol and domain of the destination You’ve already seen an absolute link in action The link you created to The Odin Project’s About page earlier was an absolute link as it contains the protocol and domain https://www theodinproject com/about\nRelative Links\nLinks to other pages within your own website are called relative links Relative links do not include the domain name, since it is another page on the same site, it assumes the domain name will be the same as the page you created the link on Relative links only include the file path to the other page, relative to the page you are creating the link on This is quite abstract, let’s see this in action using an example Within the odin-links-and-images directory, create another HTML file named about html and paste the following code into it:\n```html\nOdin Links and Images\nAbout Page\n```\nBack in the index page, add the following anchor element to create a link to the about page:\n```html\nHomepage\nclick me\nAbout\n```\nOpen the index html file in a browser and click on the about link to make sure it is all wired together correctly Clicking the link should go to the about page you just created This works because the index and about page are in the same directory That means you can simply use its name (about html) as the link’s href value But you will usually want to organize your website directories a little better Normally you would only have the index html at the root directory and all other HTML files in their own directory Create a directory named pages within the odin-links-and-images directory and move the about html file into this new directory Refresh the index page in the browser and then click on the about link It will now be broken This is because the location of the about page file has changed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3969,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f0599f41677effb5f419260743ef5dfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-d.md",
    "source_type": "git_repo",
    "title": "Odin Links and Images",
    "content": "website directories a little better Normally you would only have the index html at the root directory and all other HTML files in their own directory Create a directory named pages within the odin-links-and-images directory and move the about html file into this new directory Refresh the index page in the browser and then click on the about link It will now be broken This is because the location of the about page file has changedTo fix this, you just need to update the about link href value to include the pages/ directory since that is the new location of the about html file relative to the index html file ```html\nHomepage\nAbout\n```\nRefresh the index page in the browser and try clicking the about link again, it should now be back in working order In many cases, this will work just fine; however, you can still run into unexpected issues with this approach Prepending / before the link will in most cases prevent such issues By adding / you are specifying to your code that it should start looking for the file/directory relative to the current directory ```html\nHomepage\nAbout\n```\n--assignment--\nWatch Kevin Powell’s HTML File Structure video above --questions--\n--text--\nWhat is the difference between an absolute and a relative link --answers--\nAn absolute link is a link to another page on the current website A relative link is a link to another website An absolute link is a link to another website A relative link is a link another page on the current website There is no difference between absolute and relative links --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3969,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e713bb7c95c87d075217f5124837c1b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f701c72c65bc8e73dfe31\ntitle: Links and Images Lesson F\nchallengeType: 15\ndashedName: links-and-images-lesson-f\n--description--\nWebsites would be fairly boring if they could only display text Luckily HTML provides a wide variety of elements for displaying all sorts of different media The most widely used of these is the image element To display an image in HTML you use the <img> element Unlike the other elements you have encountered, the <img> is a void element Empty, void HTML elements do not need a closing tag Instead of wrapping content with an opening and closing tag, it embeds an image into the page using a src attribute which tells the browser where the image file is located The src attribute works much like the href attribute for anchor tags It can embed an image using both absolute and relative paths For example, using an absolute path you can display an image located on The Odin Project site:\nTo use images that you have on your own websites, you can use a relative path Create a new directory named images within the odin-links-and-images project Next, download this image and move it into the images directory you just created Rename the image to dog jpg Finally add the image to the index html file:\n```html\nHomepage\nclick me\nAbout\n```\nSave the index html file and open it in a browser to view Charles in all his glory Parent Directories\nWhat if you want to use the dog image in the about page You would first have to go up one level out of the pages directory into its parent directory so you could then access the images directory To go to the parent directory you need to use two dots in the relative filepath like this: / Let’s see this in action, within the body of the about html file, add the following image below the heading you added earlier:\nhtml\n<img src=\" /images/dog jpg\">\nTo break this down:\nFirst, you are going to the parent directory of the pages directory which is odin-links-and-images Then, from the parent directory, you can go into the images directory Finally, you can access the dog jpg file Using the metaphor we used earlier, using / in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room Alt attribute\nBesides the src attribute, every image element should also have an alt (alternative text) attribute",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4199,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e01d465f09e51d08814f9778639b4d75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "directory which is odin-links-and-images Then, from the parent directory, you can go into the images directory Finally, you can access the dog jpg file Using the metaphor we used earlier, using / in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room Alt attribute Besides the src attribute, every image element should also have an alt (alternative text) attributeThe alt attribute is used to describe an image It will be used in place of the image if it cannot be loaded It is also used with screen readers to describe what the image is to visually impaired users This is how the The Odin Project logo example you used earlier looks with an alt attribute included:\n--questions--\n--text--\nWhat two attributes do images always need to have --answers--\nhref and alt\nname and href\nalt and src\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4199,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c0967e70231beafe887be89bde59ae1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a5529c02815a7d323aab88\ntitle: The Box Model Lesson A\nchallengeType: 15\ndashedName: the-box-model-lesson-a\n--description--\nBeing able to inspect and debug your HTML and CSS is critical to frontend development. This lesson will take us through the Chrome Dev Tools, which allow you to see detailed information about your elements and CSS rules, as well as assist you in finding and fixing problems in your code.\nTo open up the inspector, you can right-click on any element of a webpage and click “Inspect” or press F12. Go ahead and do that right now to see the HTML and CSS used on this page.\nDon’t get overwhelmed with all the tools you’re now seeing! For this lesson, we want to focus on the Elements and Styles panes.\n--assignment--\nPlay around with Chrome Dev Tools and see if you can answer the following question.\n--questions--\n--text--\nWhich panes should you focus on in the Chrome Dev Tools for inspecting and debugging HTML and CSS?\n--answers--\nConsole and Network\nElements and Styles\nSources and Application\nPerformance and Memory\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "31e32ea06ba2f9da1d90262fea70a1f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a553ed02815a7d323aab89\ntitle: The Box Model Lesson B\nchallengeType: 15\ndashedName: the-box-model-lesson-b\n--description--\nIn the Elements pane, you can see the entire HTML structure of your page. You can click on any of the elements in this pane to select that specific element. Alternatively, you can click the blue-highlighted icon shown below on the left, and hover over any element on the page.\nWhen an element is selected, the Styles tab will show all the currently applied styles, as well as any styles that are being overwritten (indicated by a strikethrough of the text). For example, if you use the inspector to click on the “Your Career in Web Development Starts Here” header on the The Odin Project homepage, on the right-hand side you’ll see all the styles that are currently affecting the element, as seen below:\n--questions--\n--text--\nWhen inspecting an element in the Chrome Dev Tools, if a style property is shown with a strikethrough, what does it indicate?\n--answers--\nThe style property is currently disabled and not applied to the element.\nThe style property is overridden by a more specific CSS rule.\nThe style property is deprecated and should not be used.\nThe style property is experimental and may not be supported by all browsers\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2044,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "94e697f751e981044b8cd6d8e04a976e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a5551d02815a7d323aab8a\ntitle: The Box Model Lesson C\nchallengeType: 15\ndashedName: the-box-model-lesson-c\n--description--\nIn the Elements pane, you can see the entire HTML structure of your page. You can click on any of the elements in this pane to select that specific element. Alternatively, you can click the blue-highlighted icon shown below on the left, and hover over any element on the page.\nWhen an element is selected, the Styles tab will show all the currently applied styles, as well as any styles that are being overwritten (indicated by a strikethrough of the text). For example, if you use the inspector to click on the “Your Career in Web Development Starts Here” header on the The Odin Project homepage, on the right-hand side you’ll see all the styles that are currently affecting the element, as seen below:\n--assignment--\nPlay around with Chrome Dev Tools and see if you can answer the following question.\n--questions--\n--text--\nWhich feature in the Elements pane allows you to select any element on a webpage by hovering over it?\n--answers--\nBlue-highlighted icon\nStyles tab\nInspector tab\nHTML structure view\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1918,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9314c8dcfd3f38e1c2a9bd1504e7d064",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a55a6102815a7d323aab8b\ntitle: The Box Model Lesson D\nchallengeType: 15\ndashedName: the-box-model-lesson-d\n--description--\nIn the Elements pane, you can see the entire HTML structure of your page. You can click on any of the elements in this pane to select that specific element. Alternatively, you can click the blue-highlighted icon shown below on the left, and hover over any element on the page.\nWhen an element is selected, the Styles tab will show all the currently applied styles, as well as any styles that are being overwritten (indicated by a strikethrough of the text). For example, if you use the inspector to click on the “Your Career in Web Development Starts Here” header on the The Odin Project homepage, on the right-hand side you’ll see all the styles that are currently affecting the element, as seen below:\n--assignment--\nPlay around with Chrome Dev Tools and see if you can answer the following question.\n--questions--\n--text--\nIn the Styles pane, what information can you view about an element when it is selected?\n--answers--\nHTML structure and CSS rules\nStyles tab\nInspector tab\nApplied styles and overwritten styles.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9a9889456409735bb9728143bd62cfb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a669f77a7d00f97013ed0c\ntitle: The Box Model Lesson E\nchallengeType: 15\ndashedName: the-box-model-lesson-e\n--description--\nNow that you understand the basic syntax of HTML and CSS, we’re going to get serious. The most important skills you need to master with CSS are positioning and layout. Changing fonts and colors is a crucial skill, but being able to put things exactly where you want them on a webpage is even more crucial. After all, how many webpages can you find where absolutely every element is just stacked one on top of another?\nLearning to position elements on a webpage is not that difficult once you understand just a few key concepts. Unfortunately, many learners race through learning HTML and CSS to get to JavaScript and end up missing these fundamental concepts. This leads to frustration, pain, (and funny gifs) because all the JavaScript skills in the world are meaningless if you can’t stick your elements on the page where you need them to be. So with that in mind, let’s get started.\n--questions--\n--text--\nWhy is it important to have a solid understanding of CSS in web development?\n--answers--\nIt allows you to create complex animations and interactive effects.\nIt allows you to write desktop applications.\nIt helps in optimizing database queries for improved performance.\nIt enables you to style and design webpages with precision and control.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1454,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a300cad436950c20bad74543d90d42e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f700b72c65bc8e73dfe2f\ntitle: Links and Images Lesson H\nchallengeType: 15\ndashedName: links-and-images-lesson-h\n--description--\nWebsites would be fairly boring if they could only display text Luckily HTML provides a wide variety of elements for displaying all sorts of different media The most widely used of these is the image element To display an image in HTML you use the <img> element Unlike the other elements you have encountered, the <img> is a void element Empty, void HTML elements do not need a closing tag Instead of wrapping content with an opening and closing tag, it embeds an image into the page using a src attribute which tells the browser where the image file is located The src attribute works much like the href attribute for anchor tags It can embed an image using both absolute and relative paths For example, using an absolute path you can display an image located on The Odin Project site:\nTo use images that you have on your own websites, you can use a relative path Create a new directory named images within the odin-links-and-images project Next, download this image and move it into the images directory you just created Rename the image to dog jpg Finally add the image to the index html file:\n```html\nHomepage\nclick me\nAbout\n```\nSave the index html file and open it in a browser to view Charles in all his glory Parent Directories\nWhat if you want to use the dog image in the about page You would first have to go up one level out of the pages directory into its parent directory so you could then access the images directory To go to the parent directory you need to use two dots in the relative filepath like this: / Let’s see this in action, within the body of the about html file, add the following image below the heading you added earlier:\nhtml\n<img src=\" /images/dog jpg\">\nTo break this down:\nFirst, you are going to the parent directory of the pages directory which is odin-links-and-images Then, from the parent directory, you can go into the images directory Finally, you can access the dog jpg file Using the metaphor we used earlier, using / in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room Alt attribute\nBesides the src attribute, every image element should also have an alt (alternative text) attribute",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4459,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c1a6ff3b4c6cd99c9dd9415986931536",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "directory which is odin-links-and-images Then, from the parent directory, you can go into the images directory Finally, you can access the dog jpg file Using the metaphor we used earlier, using / in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room Alt attribute Besides the src attribute, every image element should also have an alt (alternative text) attributeThe alt attribute is used to describe an image It will be used in place of the image if it cannot be loaded It is also used with screen readers to describe what the image is to visually impaired users This is how the The Odin Project logo example you used earlier looks with an alt attribute included:\n--assignment--\nRead about the four main image formats that can be used on the web --questions--\n--text--\nWhat are the four main image formats that you can use for images on the web --answers--\nMOV, GIF, PNG, and SVG JPG, PNG, GIF, and SVG JPG, PDF, SVG, and GIF --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4459,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7134e02a45a800b93966af6feeec14bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a66c917a7d00f97013ed0d\ntitle: The Box Model Lesson F\nchallengeType: 15\ndashedName: the-box-model-lesson-f\n--description--\nThe first important concept that you need to understand to be successful in CSS is the box model. It isn’t complicated, but skipping over it now will cause you much frustration down the line.\nEvery single thing on a webpage is a rectangular box. These boxes can have other boxes in them and can sit alongside one another. You can get a rough idea of how this works by sticking a border on every item on the page like this:\ncss\n* {\nborder: 1px solid red;\n}\n--assignment--\nAdd a border to every element on the page and see how the boxes are laid out.\n--questions--\n--text--\nWhat is the fundamental concept in CSS that helps you understand the structure of elements as rectangular boxes?\n--answers--\nBox-sizing\nBox-shadow\nBox model\nBorder-box\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 955,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d77b42663a1aac5d65fe4b547fe5b931",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a6702e7a7d00f97013ed0e\ntitle: The Box Model Lesson G\nchallengeType: 15\ndashedName: the-box-model-lesson-g\n--description--\nOK, so there might be some circles in the above image… but when it comes to layout, they fit together like rectangular boxes and not circles. In the end, laying out a webpage and positioning all its elements is deciding how you are going to nest and stack these boxes.\nThe only real complication here is that there are many ways to manipulate the size of these boxes, and the space between them, using padding, margin, and border. But to sum it up briefly:\npadding increases the space between the border of a box and the content of the box.\nmargin increases the space between the borders of a box and the borders of adjacent boxes.\nborder adds space (even if it’s only a pixel or two) between the margin and the padding.\nBe sure to study the diagrams carefully.\n--assignment--\nAdd a border to every element on the page and see how the boxes are laid out.\n--questions--\n--text--\nFrom inside to outside, what is the order of box-model properties?\n--answers--\nContent, Margin, Padding, Border\nMargin, Padding, Content, Border\nContent, Padding, Border, Margin\nPadding, Content, Border, Margin\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3ff50948e8f87aa5a9e656bf5f16fb5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-j.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a674a47a7d00f97013ed11\nvideoId: rIO5326FgPE\ntitle: The Box Model Lesson J\nchallengeType: 15\ndashedName: the-box-model-lesson-j\n--description--\nBecause the box model concept is so incredibly fundamental, let’s dig a bit deeper with this lesson from MDN. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!\n--questions--\n--text--\nWould you use margin or padding to create more space between 2 elements?\n--answers--\nPadding\nBoth margin and padding can be used interchangeably\nNeither margin nor padding can be used to create more space between elements\nMargin\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 945,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-j.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "be7905a883b71ab2bca9068eeb7dc12a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a6749a7a7d00f97013ed10\nvideoId: rIO5326FgPE\ntitle: The Box Model Lesson I\nchallengeType: 15\ndashedName: the-box-model-lesson-i\n--description--\nBecause the box model concept is so incredibly fundamental, let’s dig a bit deeper with this lesson from MDN. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!\n--questions--\n--text--\nWhich of the following correctly describes the difference between the content-box and border-box box models in CSS?\n--answers--\nThe content-box model includes content, padding, and border within the specified width and height, while the border-box model includes only the content.\nIn the content-box model, the specified width and height apply only to the content, excluding padding and border, whereas in the border-box model, they include padding and border.\nThe content-box model and the border-box model are the same and have no differences.\nIn the border-box model, the width and height apply only to the content, while in the content-box model, they include padding and border.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-i.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "974873fde227017b35e91afb12d043d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a674937a7d00f97013ed0f\nvideoId: rIO5326FgPE\ntitle: The Box Model Lesson H\nchallengeType: 15\ndashedName: the-box-model-lesson-h\n--description--\nBecause the box model concept is so incredibly fundamental, let’s dig a bit deeper with this lesson from MDN. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!\n--questions--\n--text--\nWhat does the box-sizing CSS property do?\n--answers--\nIt determines the order of the box-model properties.\nIt specifies the position of an element on the webpage.\nIt controls how the total width and height of an element are calculated.\nIt sets the background color of an element.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1d016df9809ed9978d831d0b1b68fd6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-k.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a674ac7a7d00f97013ed12\nvideoId: rIO5326FgPE\ntitle: The Box Model Lesson K\nchallengeType: 15\ndashedName: the-box-model-lesson-k\n--description--\nBecause the box model concept is so incredibly fundamental, let’s dig a bit deeper with this lesson from MDN. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!\n--questions--\n--text--\nWhich CSS property would you use to create more space between the contents of an element and its border?\n--answers--\nMargin\nPadding\nBorder\nFloat\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-k.md",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b124cb97d39b2524b60131bda89b1861",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-l.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a674b97a7d00f97013ed13\nvideoId: rIO5326FgPE\ntitle: The Box Model Lesson L\nchallengeType: 15\ndashedName: the-box-model-lesson-l\n--description--\nBecause the box model concept is so incredibly fundamental, let’s dig a bit deeper with this lesson from MDN. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!\n--questions--\n--text--\nWould you use margin or padding if you wanted two elements to overlap each other?\n--answers--\nPadding\nMargin\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 812,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-l.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ce276cb355397675e31a02b293fb9703",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-m.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64a674c27a7d00f97013ed14\nvideoId: rIO5326FgPE\ntitle: The Box Model Lesson M\nchallengeType: 15\ndashedName: the-box-model-lesson-m\n--description--\nBecause the box model concept is so incredibly fundamental, let’s dig a bit deeper with this lesson from MDN. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!\n--questions--\n--text--\nHow do you set the alternative box model for all of your elements?\n--answers--\ncss\nhtml {\nbox-sizing: inherit;\n}\n*,\n*::before,\n*::after {\nbox-sizing: border-box;\n}\ncss\n* {\nbox-sizing: border-box;\n}\ncss\nhtml {\nbox-sizing: border-box;\n}\n* {\nbox-sizing: inherit;\n}\ncss\nhtml {\nbox-sizing: border-box;\n}\n*,\n*::before,\n*::after {\nbox-sizing: inherit;\n}\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-m.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5aec02836443c268beac3bf957379443",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f701572c65bc8e73dfe30\ntitle: Links and Images Lesson G\nchallengeType: 15\ndashedName: links-and-images-lesson-g\n--description--\nWebsites would be fairly boring if they could only display text Luckily HTML provides a wide variety of elements for displaying all sorts of different media The most widely used of these is the image element To display an image in HTML you use the <img> element Unlike the other elements you have encountered, the <img> is a void element Empty, void HTML elements do not need a closing tag Instead of wrapping content with an opening and closing tag, it embeds an image into the page using a src attribute which tells the browser where the image file is located The src attribute works much like the href attribute for anchor tags It can embed an image using both absolute and relative paths For example, using an absolute path you can display an image located on The Odin Project site:\nTo use images that you have on your own websites, you can use a relative path Create a new directory named images within the odin-links-and-images project Next, download this image and move it into the images directory you just created Rename the image to dog jpg Finally add the image to the index html file:\n```html\nHomepage\nclick me\nAbout\n```\nSave the index html file and open it in a browser to view Charles in all his glory Parent Directories\nWhat if you want to use the dog image in the about page You would first have to go up one level out of the pages directory into its parent directory so you could then access the images directory To go to the parent directory you need to use two dots in the relative filepath like this: / Let’s see this in action, within the body of the about html file, add the following image below the heading you added earlier:\nhtml\n<img src=\" /images/dog jpg\">\nTo break this down:\nFirst, you are going to the parent directory of the pages directory which is odin-links-and-images Then, from the parent directory, you can go into the images directory Finally, you can access the dog jpg file Using the metaphor we used earlier, using / in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room Alt attribute\nBesides the src attribute, every image element should also have an alt (alternative text) attribute",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4167,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0af49ec79797232cc0bac624c6ed2c7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "directory which is odin-links-and-images Then, from the parent directory, you can go into the images directory Finally, you can access the dog jpg file Using the metaphor we used earlier, using / in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room Alt attribute Besides the src attribute, every image element should also have an alt (alternative text) attributeThe alt attribute is used to describe an image It will be used in place of the image if it cannot be loaded It is also used with screen readers to describe what the image is to visually impaired users This is how the The Odin Project logo example you used earlier looks with an alt attribute included:\n--questions--\n--text--\nHow do you access a parent directory in a filepath --answers-- / / /\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4167,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0a8e4361976de4cf22729dd51aaa15fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e5872c65bc8e73dfe27\nvideoId: yqcd-XkxZNM\ntitle: Working With Text Lesson A\nchallengeType: 15\ndashedName: working-with-text-lesson-a\n--description--\nWhat would you expect the following text to output on an HTML page?\n```html\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\nincididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris\nnisi ut aliquip ex ea commodo consequat.\n```\nIt looks like two paragraphs of text, and so you might expect it to display in that way. However that is not the case, as you can see in the output below:\nWhen the browser encounters new lines like this in your HTML, it will compress them down into one single space. The result of this compression is that all of the text is clumped together into one long line.\nIf you want to create paragraphs in HTML, you need to use the paragraph element, which will add a newline after each of your paragraphs. A paragraph element is defined by wrapping text content with a <p> tag.\nChanging our example from before to use paragraph elements fixes the issue:\n--assignment--\nWatch and follow along to Kevin Powell’s HTML Paragraph and Headings Video above.\n--questions--\n--text--\nHow do you create a paragraph in HTML?\n--answers--\n<h3>This is a paragraph</h3>\n<p>This is a paragraph</p>\n<strong>This is a paragraph<strong>\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3e1819d4d21f6692737e48cce714d353",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e6672c65bc8e73dfe29\nvideoId: gW6cBZLUk6M\ntitle: Working With Text Lesson C\nchallengeType: 15\ndashedName: working-with-text-lesson-c\n--description--\nThe <strong> element makes text bold. It also semantically marks text as important; this affects tools, like screen readers, that users with visual impairments will rely on to use your website. The tone of voice on some screen readers will change to communicate the importance of the text within a strong element. To define a strong element you wrap text content in a <strong> tag.\nYou can use strong on its own:\nBut you will probably find yourself using the strong element much more in combination with other text elements, like this:\nSometimes you will want to make text bold without giving it an important meaning. You’ll learn how to do that in the CSS lessons later in the curriculum.\n--assignment--\nWatch Kevin Powell’s HTML Bold and Italic Text Video above.\n--questions--\n--text--\nWhat element should you use to make text bold and important?\n--answers--\n<em>This is an important message</em>\n<h1>This is an important message</h1>\n<strong>This is an important message</strong>\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a84ccf10c9bc06d8a47d1ecd49998b32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e5f72c65bc8e73dfe28\ntitle: Working With Text Lesson B\nchallengeType: 15\ndashedName: working-with-text-lesson-b\n--description--\nHeadings are different from other HTML text elements: they are displayed larger and bolder than other text to signify that they are headings.\nThere are 6 different levels of headings starting from <h1> to <h6>. The number within a heading tag represents that heading’s level. The largest and most important heading is h1, while h6 is the tiniest heading at the lowest level.\nHeadings are defined much like paragraphs. For example, to create an h1 heading, we wrap our heading text in a <h1> tag.\nUsing the correct level of heading is important as levels provide a hierarchy to the content. An h1 heading should always be used for the heading of the overall page, and the lower level headings should be used as the headings for content in smaller sections of the page.\n--questions--\n--text--\nHow many different levels of headings are there and what is the difference between them?\n--answers--\nThere are 5 different levels of headings. h5 is the smallest and least important heading, and h1 is the largest and most important heading.\nThere are 6 different levels of headings. h6 is the largest and most important heading, and h1 is the smallest and least important heading.\nThere are 6 different levels of headings. h1 is the largest and most important heading, and h6 is the smallest and least important heading.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2041,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5dc2041cac224e7aa3f62306dc20bf10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e7972c65bc8e73dfe2b\ntitle: Working With Text Lesson E\nchallengeType: 15\ndashedName: working-with-text-lesson-e\n--description--\nYou may have noticed that in all the examples in this lesson you indent any elements that are within other elements. This is known as nesting elements.\nWhen you nest elements within other elements, you create a parent and child relationship between them. The nested elements are the children and the element they are nested within is the parent.\nIn the following example, the body element is the parent and the p is the child:\n```html\nLorem ipsum dolor sit amet.\n```\nJust as in human relationships, HTML parent elements can have many children. Elements at the same level of nesting are considered to be siblings.\nFor example, the two p elements in the following code are siblings, since they are both children of the body tag and are at the same level of nesting as each other:\n```html\nLorem ipsum dolor sit amet.\nUt enim ad minim veniam.\n```\nYou use indentation to make the level of nesting clear and readable for yourselves and other developers who will work with your HTML in the future. It is recommended to indent any child elements by two spaces.\nThe parent, child, and sibling relationships between elements will become much more important later when you start styling your HTML with CSS and adding behavior with JavaScript. For now, however, it is just important to know the distinction between how elements are related and the terminology used to describe their relationships.\n--questions--\n--text--\nWhat relationship do two elements have if they are at the same level of nesting?\n--answers--\nThe elements are each other's parents.\nThe elements are each other's children.\nThe elements are siblings.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1963,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "70cc33efb79ab75d198137ab24ee87ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e6e72c65bc8e73dfe2a\ntitle: Working With Text Lesson D\nchallengeType: 15\ndashedName: working-with-text-lesson-d\n--description--\nThe em element makes text italic. It also semantically places emphasis on the text, which again may affect things like screen readers. To define an emphasized element you wrap text content in an <em> tag.\nTo use em on its own:\nAgain, like the strong element, you will find yourself mostly using the em element with other text elements:\n--questions--\n--text--\nWhat element should you use to make text italicized to add emphasis?\n--answers--\n<strong>This is an italic message</strong>\n<em>This is an italic message</em>\n<italic>This is an italic message</italic>\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f3f5ddef3cd17e7426ed3d4724450bab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e8772c65bc8e73dfe2d\ntitle: Working With Text Lesson G\nchallengeType: 15\ndashedName: working-with-text-lesson-g\n--description--\nHTML comments are not visible to the browser; they allow us to comment on your code so that other developers or your future selves can read them and get some context about something that might not be clear in the code.\nWriting an HTML comment is simple: You just enclose the comment with <!-- and -->tags. For example:\n```html\nView the html to see the hidden comments\nSome paragraph text\n```\n--assignment--\nTo get some practice working with text in HTML, create a plain blog article page which uses different headings, uses paragraphs, and has some text in the paragraphs bolded and italicized. You can use Lorem Ipsum to generate dummy text, in place of real text as you build your sites.\n--questions--\n--text--\nHow do you create HTML comments?\n--answers--\n/* This is an HTML comment */\n<!-- This is an HTML comment -->\n<-- This is an HTML comment --!>\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d6cda93ca2ea699ee221beff0e810ba7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e3e72c65bc8e73dfe24\nvideoId: kcHKFZBVtf4\ntitle: Working With Text Lesson H\nchallengeType: 15\ndashedName: working-with-text-lesson-h\n--description--\nIf you want to have a list of items where the order doesn’t matter, like a shopping list of items that can be bought in any order, then you can use an unordered list.\nUnordered lists are created using the <ul> element, and each item within the list is created using the list item element <li>.\nEach list item in an unordered list begins with a bullet point:\nIf you instead want to create a list of items where the order does matter, like step-by-step instructions for a recipe, or your top 10 favorite TV shows, then you can use an ordered list.\nOrdered lists are created using the <ol> element. Each individual item in them is again created using the list item element <li>. However, each list item in an ordered list begins with a number instead:\n--assignment--\nWatch the first three minutes of Kevin Powell's video on Ordered and Unordered lists above.\nMake an unordered shopping list of your favorite foods.\nMake an ordered list of todo’s you need to get done today.\nMake an unordered list of places you’d like to visit someday.\nMake an ordered list of your all time top 5 favorite video games or movies.\n--questions--\n--text--\nWhat HTML tag is used to create an unordered list?\n--answers--\n<li>\n<ul>\n<ol>\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5c1cb1ec496f9e2521e0dcb905cd653e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e8072c65bc8e73dfe2c\ntitle: Working With Text Lesson F\nchallengeType: 15\ndashedName: working-with-text-lesson-f\n--description--\nYou may have noticed that in all the examples in this lesson you indent any elements that are within other elements. This is known as nesting elements.\nWhen you nest elements within other elements, you create a parent and child relationship between them. The nested elements are the children and the element they are nested within is the parent.\nIn the following example, the body element is the parent and the paragraph is the child:\n```html\nLorem ipsum dolor sit amet.\n```\nJust as in human relationships, HTML parent elements can have many children. Elements at the same level of nesting are considered to be siblings.\nFor example, the two paragraphs in the following code are siblings, since they are both children of the body tag and are at the same level of nesting as each other:\n```html\nLorem ipsum dolor sit amet.\nUt enim ad minim veniam.\n```\nYou use indentation to make the level of nesting clear and readable for yourselves and other developers who will work with your HTML in the future. It is recommended to indent any child elements by two spaces.\nThe parent, child, and sibling relationships between elements will become much more important later when you start styling your HTML with CSS and adding behavior with JavaScript. For now, however, it is just important to know the distinction between how elements are related and the terminology used to describe their relationships.\n--questions--\n--text--\nWhat relationship does an element have with any nested element within it?\n--answers--\nThe element within the other element is called the parent element.\nThe element within the other element is called the child element.\nThe element within the other element is called the sibling element.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c93e90851d688919d7de860a83585eb3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-j.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e5172c65bc8e73dfe26\ntitle: Working With Text Lesson J\nchallengeType: 15\ndashedName: working-with-text-lesson-j\n--description--\nIf you want to have a list of items where the order doesn’t matter, like a shopping list of items that can be bought in any order, then you can use an unordered list.\nUnordered lists are created using the <ul> element, and each item within the list is created using the list item element <li>.\nEach list item in an unordered list begins with a bullet point:\nIf you instead want to create a list of items where the order does matter, like step-by-step instructions for a recipe, or your top 10 favorite TV shows, then you can use an ordered list.\nOrdered lists are created using the <ol> element. Each individual item in them is again created using the list item element <li>. However, each list item in an ordered list begins with a number instead:\n--questions--\n--text--\nWhat HTML tag is used to create list items within both unordered and ordered lists?\n--answers--\n<ol>\n<li>\n<ul>\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2103,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-j.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6fc0cdb2d248b4e9b456027c449ad1ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 637f4e4672c65bc8e73dfe25\ntitle: Working With Text Lesson I\nchallengeType: 15\ndashedName: working-with-text-lesson-i\n--description--\nIf you want to have a list of items where the order doesn’t matter, like a shopping list of items that can be bought in any order, then you can use an unordered list.\nUnordered lists are created using the <ul> element, and each item within the list is created using the list item element <li>.\nEach list item in an unordered list begins with a bullet point:\nIf you instead want to create a list of items where the order does matter, like step-by-step instructions for a recipe, or your top 10 favorite TV shows, then you can use an ordered list.\nOrdered lists are created using the <ol> element. Each individual item in them is again created using the list item element <li>. However, each list item in an ordered list begins with a number instead:\n--questions--\n--text--\nWhat HTML tag is used to create an ordered list?\n--answers--\n<ol>\n<li>\n<ul>\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-i.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "382d86787800d187f259734e014689a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "id: 657bdc8ba322aae1eac38390\ntitle: Build a Roman Numeral Converter\nchallengeType: 14\nforumTopicId: 16044\ndashedName: build-a-roman-numeral-converter\n--description--\nRoman numerals are based on seven symbols and can be written using various combinations to represent Arabic numerals For example:\n| Roman numerals | Arabic numerals |\n|----------------|-----------------|\n| M              | 1000            |\n| CM             | 900             |\n| D              | 500             |\n| CD             | 400             |\n| C              | 100             |\n| XC             | 90              |\n| L              | 50              |\n| XL             | 40              |\n| X              | 10              |\n| IX             | 9               |\n| V              | 5               |\n| IV             | 4               |\n| I              | 1               |\nObjective: Build an app that is functionally similar to https://roman-numeral-converter freecodecamp rocks User Stories:\nYou should have an input element with an id of \"number\" You should have a button element with an id of \"convert-btn\" You should have a div, span or p element with an id of output When you click on the #convert-btn element without entering a value into the #number element, the #output element should contain the text \"Please enter a valid number\" When the #number element contains the number -1 and the #convert-btn element is clicked, the #output element should contain the text \"Please enter a number greater than or equal to 1\" When the #number element contains the number 4000 or greater and the #convert-btn element is clicked, the #output element should contain the text \"Please enter a number less than or equal to 3999\" When the #number element contains the number 9 and the #convert-btn element is clicked, the #output element should contain the text \"IX\" When the #number element contains the number 16 and the #convert-btn element is clicked, the #output element should contain the text \"XVI\" When the #number element contains the number 649 and the #convert-btn element is clicked, the #output element should contain the text \"DCXLIX\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "ed68cbd674cc5875a827f5459bfb8686",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "\"Please enter a number less than or equal to 3999\" When the #number element contains the number 9 and the #convert-btn element is clicked, the #output element should contain the text \"IX\" When the #number element contains the number 16 and the #convert-btn element is clicked, the #output element should contain the text \"XVI\" When the #number element contains the number 649 and the #convert-btn element is clicked, the #output element should contain the text \"DCXLIX\"When the #number element contains the number 1023 and the #convert-btn element is clicked, the #output element should contain the text \"MXXIII\" When the #number element contains the number 3999 and the #convert-btn element is clicked, the #output element should contain the text \"MMMCMXCIX\" Fulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding --hints--\nYou should have an input element with an id of \"number\" js\nconst el = document getElementById('number');\nassert strictEqual(el nodeName toLowerCase(), 'input');\nYou should have a button element with an id of \"convert-btn\" js\nconst el = document getElementById('convert-btn');\nassert strictEqual(el nodeName toLowerCase(), 'button');\nYou should have a div, span, or p element with an id of \"output\" js\nconst el = document getElementById('output');\nassert(['div', 'span', 'p'] includes(el nodeName toLowerCase()));\nWhen you click on the #convert-btn element without entering a value into the #number element, the #output element should contain the text \"Please enter a valid number\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nnumberInputEl value = '';\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'please enter a valid number');\n```\nWhen the #number element contains the number -1 and the #convert-btn element is clicked, the #output element should contain the text \"Please enter a number greater than or equal to 1\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nnumberInputEl",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "d23ec652a98f4c75e3207cc610df4e3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "document getElementById('convert-btn'); const outputEl = document getElementById('output'); numberInputEl value = ''; convertBtnEl click(); assert strictEqual(outputEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'please enter a valid number'); ``` When the #number element contains the number -1 and the #convert-btn element is clicked, the #output element should contain the text \"Please enter a number greater than or equal to 1\" ```js const numberInputEl = document getElementById('number'); const convertBtnEl = document getElementById('convert-btn'); const outputEl = document getElementById('output'); numberInputElvalue = '-1';\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'please enter a number greater than or equal to 1');\n```\nWhen the #number element contains the number 4000 or greater and the #convert-btn element is clicked, the #output element should contain the text \"Please enter a number less than or equal to 3999\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nnumberInputEl value = '4000';\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'please enter a number less than or equal to 3999');\n```\nWhen the #number element contains the number 9 and the #convert-btn element is clicked, the #output element should contain the text \"IX\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nnumberInputEl value = '9';\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim(), 'IX');\n```\nWhen the #number element contains the number 16 and the #convert-btn element is clicked, the #output element should contain the text \"XVI\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nnumberInputEl",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "7954b5cb5dab0e7942d90427719a1c0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "element should contain the text \"IX\" ```js const numberInputEl = document getElementById('number'); const convertBtnEl = document getElementById('convert-btn'); const outputEl = document getElementById('output'); numberInputEl value = '9'; numberInputEl dispatchEvent(new Event('change')); convertBtnEl click(); assert strictEqual(outputEl innerText trim(), 'IX'); ``` When the #number element contains the number 16 and the #convert-btn element is clicked, the #output element should contain the text \"XVI\" ```js const numberInputEl = document getElementById('number'); const convertBtnEl = document getElementById('convert-btn'); const outputEl = document getElementById('output'); numberInputElvalue = '16';\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim(), 'XVI');\n```\nWhen the #number element contains the number 649 and the #convert-btn element is clicked, the #output element should contain the text \"DCXLIX\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nnumberInputEl value = '649';\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim(), 'DCXLIX');\n```\nWhen the #number element contains the number 1023 and the #convert-btn element is clicked, the #output element should contain the text \"MXXIII\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nnumberInputEl value = '1023';\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim(), 'MXXIII');\n```\nWhen the #number element contains the number 3999 and the #convert-btn element is clicked, the #output element should contain the text \"MMMCMXCIX\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nnumberInputEl value = '3999';\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "df3beebccd3cdb77c6fca3b213fa9680",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "getElementById('number'); const convertBtnEl = document getElementById('convert-btn'); const outputEl = document getElementById('output'); numberInputEl value = '1023'; numberInputEl dispatchEvent(new Event('change')); convertBtnEl click(); assert strictEqual(outputEl innerText trim(), 'MXXIII'); ``` When the #number element contains the number 3999 and the #convert-btn element is clicked, the #output element should contain the text \"MMMCMXCIX\" ```js const numberInputEl = document getElementById('number'); const convertBtnEl = document getElementById('convert-btn'); const outputEl = document getElementById('output'); numberInputEl value = '3999'; numberInputEl dispatchEvent(new Event('change')); convertBtnEl click(); assert strictEqual(outputEl innerTexttrim(), 'MMMCMXCIX');\n```\nWhen the #number element contains a random negative number and the #convert-btn element is clicked, the #output element should contain the text \"Please enter a number greater than or equal to 1\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nconst randomNegativeNumber = Math floor(Math random() * -4000) - 2;\nnumberInputEl value = randomNegativeNumber;\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'please enter a number greater than or equal to 1');\n```\nWhen the #number element contains a number greater than 4000 and the #convert-btn element is clicked, the #output element should contain the text \"Please enter a number less than or equal to 3999\" ```js\nconst numberInputEl = document getElementById('number');\nconst convertBtnEl = document getElementById('convert-btn');\nconst outputEl = document getElementById('output');\nconst randomBigNumber = Math floor(Math random() * (1000000)) + 4000;\nnumberInputEl value =  randomBigNumber;\nnumberInputEl dispatchEvent(new Event('change'));\nconvertBtnEl click();\nassert strictEqual(outputEl innerText trim() replace(/[ , ]+$/g, '')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "a1b0dd6970923d2b743dc38fa0ab5be8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "When the #number element contains a number greater than 4000 and the #convert-btn element is clicked, the #output element should contain the text \"Please enter a number less than or equal to 3999\" ```js const numberInputEl = document getElementById('number'); const convertBtnEl = document getElementById('convert-btn'); const outputEl = document getElementById('output'); const randomBigNumber = Math floor(Math random() * (1000000)) + 4000; numberInputEl value = randomBigNumber; numberInputEl dispatchEvent(new Event('change')); convertBtnEl click(); assert strictEqual(outputEl innerText trim() replace(/[ , ]+$/g, '')toLowerCase(), 'please enter a number less than or equal to 3999');\n```\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n```js\n```\n--solutions--\n```html\nRoman Numeral Converter\nRoman Numeral Converter\nEnter a Number:\nConvert\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nmin-height: 100vh;\npadding: 50px 20px;\nfont-family: 'Lato', Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "3e8edc183d208f914bf625d96f619b5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "Roman Numeral Converter Roman Numeral Converter Enter a Number: Convert ``` ```css :root { --gray-00: #ffffff; --gray-05: #f5f6f7; --gray-15: #d0d0d5; --gray-75: #3b3b4f; --gray-85: #1b1b32; --gray-90: #0a0a23; --blue-50: #198eee; --error: #a94442; --danger-color: #850000; --danger-background: #ffadad; } *, ::before, ::after { padding: 0; margin: 0; box-sizing: border-box; } body { min-height: 100vh; padding: 50px 20px; font-family: 'Lato', Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; justify-content: center; }freecodecamp-logo {\nheight: 30px;\nmargin-bottom: 20px;\n}\nh1 {\ntext-align: center;\nmargin: 20px auto;\nmax-width: 350px;\nfont-family: 'Castoro Titling', cursive;\n}\nform {\ncolor: var(--gray-05);\nmargin: auto 25px;\npadding: 15px auto;\nborder: 3px solid var(--gray-05);\ntext-align: center;\nwidth: 90%;\nmax-width: 500px;\nbackground-color: var(--gray-75);\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\npadding: 25px;\nmargin: 10px 20px;\n}\nlabel {\ndisplay: inline-block;\nfont-size: 1 5rem;\nmargin-bottom: 10px;\nfont-weight: bold;\n}\ninput:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n}\ninput {\ndisplay: block;\nfont-size: 2 5rem;\nwidth: 100%;\nheight: 60px;\npadding: 6px 12px;\nmargin: 10px 0;\nline-height: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "6f741fd3049d0f7c93b778be211b72e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "} form { color: var(--gray-05); margin: auto 25px; padding: 15px auto; border: 3px solid var(--gray-05); text-align: center; width: 90%; max-width: 500px; background-color: var(--gray-75); } fieldset { border: 0 none; height: 100%; padding: 25px; margin: 10px 20px; } label { display: inline-block; font-size: 1 5rem; margin-bottom: 10px; font-weight: bold; } input:focus-visible, button:focus-visible { outline: 3px solid var(--blue-50); } input { display: block; font-size: 2 5rem; width: 100%; height: 60px; padding: 6px 12px; margin: 10px 0; line-height: 14;\ncolor: white;\nbackground-color: var(--gray-90);\nborder: 1px solid var(--gray-05);\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n} output {\ncolor: white;\nbackground-color: var(--gray-75);\nborder: 3px solid var(--gray-05);\nfont-size: 2 5rem;\nwidth: 90%;\nmax-width: 500px;\nmin-height: 55px;\nmargin-top: 25px;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} alert {\nfont-size: 2rem;\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n} hidden {\ndisplay: none;\n}\n```\n```js\nconst form = document getElementById(\"form\");\nconst convertButton = document getElementById(\"convert-btn\");\nconst output = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "8da1f2df3a48cd6459c80dbf1e84eff4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; padding: 10px 16px; font-size: 23px; width: 100%; } output { color: white; background-color: var(--gray-75); border: 3px solid var(--gray-05); font-size: 2 5rem; width: 90%; max-width: 500px; min-height: 55px; margin-top: 25px; padding: 15px; overflow-wrap: break-word; text-align: center; } alert { font-size: 2rem; background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } hidden { display: none; } ``` ```js const form = document getElementById(\"form\"); const convertButton = document getElementById(\"convert-btn\"); const output = documentgetElementById(\"output\");\nconst convertToRoman = (num) => {\nconst ref = [\n[\"M\", 1000],\n[\"CM\", 900],\n[\"D\", 500],\n[\"CD\", 400],\n[\"C\", 100],\n[\"XC\", 90],\n[\"L\", 50],\n[\"XL\", 40],\n[\"X\", 10],\n[\"IX\", 9],\n[\"V\", 5],\n[\"IV\", 4],\n[\"I\", 1],\n];\nconst res = [];\nref forEach(function (arr) {\nwhile (num >= arr[1]) {\nres push(arr[0]);\nnum -= arr[1];\n}\n});\nreturn res join(\"\");\n};\nconst isValid = (str, int) => {\nlet errText = \"\";\nif ( str || str match(/[e ]/g)) {\nerrText = \"Please enter a valid number \";\n} else if (int < 1) {\nerrText = \"Please enter a number greater than or equal to 1 \";\n} else if (int > 3999) {\nerrText = \"Please enter a number less than or equal to 3999 \";\n} else {\n// No errors detected\nreturn true;\n}\n// Handle error text and output styling\noutput innerText = errText;\noutput classList add(\"alert\");\nreturn false;\n};\nconst clearOutput = () => {\noutput innerText = \"\";\noutput classList remove(\"alert\");\n};\nform addEventListener(\"submit\", (e) => {\ne preventDefault();\nupdateUI();\n});\nconvertButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "db4d2dc4fe0c17ca4e5f80fab14bb042",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
    "source_type": "git_repo",
    "title": "Roman Numeral Converter",
    "content": "or equal to 1 \"; } else if (int > 3999) { errText = \"Please enter a number less than or equal to 3999 \"; } else { // No errors detected return true; } // Handle error text and output styling output innerText = errText; output classList add(\"alert\"); return false; }; const clearOutput = () => { output innerText = \"\"; output classList remove(\"alert\"); }; form addEventListener(\"submit\", (e) => { e preventDefault(); updateUI(); }); convertButtonaddEventListener(\"click\", () => {\nupdateUI();\n});\nconst updateUI = () => {\nconst numStr = document getElementById(\"number\") value;\nconst int = parseInt(numStr, 10);\noutput classList remove(\"hidden\");\nclearOutput();\nif (isValid(numStr, int)) {\noutput innerText = convertToRoman(int);\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 14134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-roman-numeral-converter-project\\build-a-roman-numeral-converter.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "eb67eb836fe32aced29737a7243ec8c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "id: 657bdc55a322aae1eac3838f\ntitle: Build a Palindrome Checker\nchallengeType: 14\nforumTopicId: 16004\ndashedName: build-a-palindrome-checker\n--description--\nA palindrome is a word or phrase that can be read the same way forwards and backwards, ignoring punctuation, case, and spacing Note: You'll need to remove all non-alphanumeric characters (punctuation, spaces and symbols) and turn everything into the same case (lower or upper case) in order to check for palindromes Objective: Build an app that is functionally similar to https://palindrome-checker freecodecamp rocks User Stories:\nYou should have an input element with an id of \"text-input\" You should have a button element with an id of \"check-btn\" You should have a div, span or p element with an id of \"result\" When you click on the #check-btn element without entering a value into the #text-input element, an alert should appear with the text Please input a value When the #text-input element only contains the letter A and the #check-btn element is clicked, the #result element should contain the text A is a palindrome When the #text-input element contains the text eye and the #check-btn element is clicked, the #result element should contain the text eye is a palindrome When the #text-input element contains the text _eye and the #check-btn element is clicked, the #result element should contain the text _eye is a palindrome When the #text-input element contains the text race car and the #check-btn element is clicked, the #result element should contain the text race car is a palindrome When the #text-input element contains the text not a palindrome and the #check-btn element is clicked, the #result element should contain the text not a palindrome is not a palindrome When the #text-input element contains the text A man, a plan, a canal Panama and the #check-btn element is clicked, the #result element should contain the text A man, a plan, a canal Panama is a palindrome When the #text-input element contains the text never odd or even and the #check-btn element is clicked, the #result element should contain the text never odd or even is a palindrome",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "7d8b01829a542a86666a01b4598144e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "text not a palindrome is not a palindrome When the #text-input element contains the text A man, a plan, a canal Panama and the #check-btn element is clicked, the #result element should contain the text A man, a plan, a canal Panama is a palindrome When the #text-input element contains the text never odd or even and the #check-btn element is clicked, the #result element should contain the text never odd or even is a palindromeWhen the #text-input element contains the text nope and the #check-btn element is clicked, the #result element should contain the text nope is not a palindrome When the #text-input element contains the text almostomla and the #check-btn element is clicked, the #result element should contain the text almostomla is not a palindrome When the #text-input element contains the text My age is 0, 0 si ega ym and the #check-btn element is clicked, the #result element should contain the text My age is 0, 0 si ega ym is a palindrome When the #text-input element contains the text 1 eye for of 1 eye and the #check-btn element is clicked, the #result element should contain the text 1 eye for of 1 eye is not a palindrome When the #text-input element contains the text 0_0 (: /-\\ :) 0-0 and the #check-btn element is clicked, the #result element should contain the text 0_0 (: /-\\ :) 0-0 is a palindrome When the #text-input element contains the text five|\\_/|four and the #check-btn element is clicked, the #result element should contain the text five|\\_/|four is not a palindrome Fulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding --hints--\nYou should have an input element with an id of \"text-input\" js\nconst el = document getElementById('text-input');\nassert strictEqual(el nodeName toLowerCase(), 'input');\nYou should have a button element with an id of \"check-btn\" js\nconst el = document getElementById('check-btn');\nassert strictEqual(el nodeName toLowerCase(), 'button');\nYou should have a div, span, or p element with an id of \"result\" js\nconst el = document getElementById('result');\nassert(['div', 'span', 'p'] includes(el nodeName",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "48b919499b470b829be04c9dd06c9af5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "your own personal style Happy Coding --hints-- You should have an input element with an id of \"text-input\" js const el = document getElementById('text-input'); assert strictEqual(el nodeName toLowerCase(), 'input'); You should have a button element with an id of \"check-btn\" js const el = document getElementById('check-btn'); assert strictEqual(el nodeName toLowerCase(), 'button'); You should have a div, span, or p element with an id of \"result\" js const el = document getElementById('result'); assert(['div', 'span', 'p'] includes(el nodeNametoLowerCase()));\nWhen you click on the #check-btn element without entering a value into the #text-input element, an alert should appear with the text Please input a value ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nlet alertMessage;\nwindow alert = (message) => alertMessage = message; // Override alert and store message\ninputEl value = '';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(alertMessage trim() replace(/[ , ]+$/g, '') toLowerCase(), 'please input a value');\n```\nWhen the #text-input element only contains the letter A and the #check-btn element is clicked, the #result element should contain the text A is a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'A';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'a is a palindrome');\n```\nWhen the #text-input element contains the text eye and the #check-btn element is clicked, the #result element should contain the text eye is a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'eye';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "0f20c0f1e210c521a81f5dd1cec7c9c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "dispatchEvent(new Event('change')) checkBtn click(); assert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'a is a palindrome'); ``` When the #text-input element contains the text eye and the #check-btn element is clicked, the #result element should contain the text eye is a palindrome ```js const inputEl = document getElementById('text-input'); const checkBtn = document getElementById('check-btn'); const resultEl = document getElementById('result'); inputEl value = 'eye'; inputEl dispatchEvent(new Event('change')) checkBtn click(); assert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '')toLowerCase(), 'eye is a palindrome');\n```\nWhen the #text-input element contains the text _eye and the #check-btn element is clicked, the #result element should contain the text _eye is a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = '_eye';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), '_eye is a palindrome');\n```\nWhen the #text-input element contains the text race car and the #check-btn element is clicked, the #result element should contain the text race car is a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'race car';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'race car is a palindrome');\n```\nWhen the #text-input element contains the text not a palindrome and the #check-btn element is clicked, the #result element should contain the text not a palindrome is not a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'not a palindrome';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "fa36027ee075bbcbcf85538f37d32a4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "replace(/[ , ]+$/g, '') toLowerCase(), 'race car is a palindrome'); ``` When the #text-input element contains the text not a palindrome and the #check-btn element is clicked, the #result element should contain the text not a palindrome is not a palindrome ```js const inputEl = document getElementById('text-input'); const checkBtn = document getElementById('check-btn'); const resultEl = document getElementById('result'); inputEl value = 'not a palindrome'; inputEl dispatchEvent(new Event('change')) checkBtn click(); assert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '')toLowerCase(), 'not a palindrome is not a palindrome');\n```\nWhen the #text-input element contains the text A man, a plan, a canal Panama and the #check-btn element is clicked, the #result element should contain the text A man, a plan, a canal Panama is a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'A man, a plan, a canal Panama';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'a man, a plan, a canal panama is a palindrome');\n```\nWhen the #text-input element contains the text never odd or even and the #check-btn element is clicked, the #result element should contain the text never odd or even is a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'never odd or even';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'never odd or even is a palindrome');\n```\nWhen the #text-input element contains the text nope and the #check-btn element is clicked, the #result element should contain the text nope is not a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'nope';\ninputEl",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "f65cb66deff7c18b7df9570954eb59fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "inputEl value = 'never odd or even'; inputEl dispatchEvent(new Event('change')) checkBtn click(); assert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'never odd or even is a palindrome'); ``` When the #text-input element contains the text nope and the #check-btn element is clicked, the #result element should contain the text nope is not a palindrome ```js const inputEl = document getElementById('text-input'); const checkBtn = document getElementById('check-btn'); const resultEl = document getElementById('result'); inputEl value = 'nope'; inputEldispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'nope is not a palindrome');\n```\nWhen the #text-input element contains the text almostomla and the #check-btn element is clicked, the #result element should contain the text almostomla is not a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'almostomla';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'almostomla is not a palindrome');\n```\nWhen the #text-input element contains the text My age is 0, 0 si ega ym and the #check-btn element is clicked, the #result element should contain the text My age is 0, 0 si ega ym is a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'My age is 0, 0 si ega ym ';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'my age is 0, 0 si ega ym is a palindrome');\n```\nWhen the #text-input element contains the text 1 eye for of 1 eye and the #check-btn element is clicked, the #result element should contain the text 1 eye for of 1 eye",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "d10e6b47815d1ca887fc17ce009cf6c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "getElementById('check-btn'); const resultEl = document getElementById('result'); inputEl value = 'My age is 0, 0 si ega ym '; inputEl dispatchEvent(new Event('change')) checkBtn click(); assert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'my age is 0, 0 si ega ym is a palindrome'); ``` When the #text-input element contains the text 1 eye for of 1 eye and the #check-btn element is clicked, the #result element should contain the text 1 eye for of 1 eyeis not a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = '1 eye for of 1 eye ';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), '1 eye for of 1 eye is not a palindrome');\n```\nWhen the #text-input element contains the text 0_0 (: /-\\ :) 0-0 and the #check-btn element is clicked, the #result element should contain the text 0_0 (: /-\\ :) 0-0 is a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = '0_0 (: /-\\ :) 0-0';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), '0_0 (: /-\\ :) 0-0 is a palindrome');\n```\nWhen the #text-input element contains the text five|\\_/|four and the #check-btn element is clicked, the #result element should contain the text five|\\_/|four is not a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\ninputEl value = 'five|_/|four';\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "380d4342cdeddb0d9870b24f3fb8e6d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), '0_0 (: /-\\ :) 0-0 is a palindrome'); ``` When the #text-input element contains the text five|\\_/|four and the #check-btn element is clicked, the #result element should contain the text five|\\_/|four is not a palindrome ```js const inputEl = document getElementById('text-input'); const checkBtn = document getElementById('check-btn'); const resultEl = document getElementById('result'); inputEl value = 'five|_/|four'; inputEl dispatchEvent(new Event('change')) checkBtn click(); assert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '')toLowerCase(), 'five|_/|four is not a palindrome');\n```\nWhen the #text-input element contains an alphanumeric palindrome, the #result element should correctly identify it as a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\nconst characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\nconst charactersLength = characters length;\nconst firstLetter = characters charAt(Math floor(Math random() * charactersLength));\nconst secondLetter = characters charAt(Math floor(Math random() * charactersLength));\nconst thirdLetter = characters charAt(Math floor(Math random() * charactersLength));\nconst fourthLetter = characters charAt(Math floor(Math random() * charactersLength));\nconst phrase = firstLetter + secondLetter + thirdLetter + fourthLetter + fourthLetter + thirdLetter + secondLetter + firstLetter;\ninputEl value = phrase;\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), phrase + ' is a palindrome');\n```\nWhen the #text-input element contains a random sequence of alphanumeric characters that is not a palindrome, the #result element should say it is not a palindrome ```js\nconst inputEl = document getElementById('text-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultEl = document getElementById('result');\nlet characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\nlet charactersLength = characters length;\nconst firstIndex = Math floor(Math random() * charactersLength);\nconst firstLetter = characters charAt(firstIndex);\ncharacters = characters slice(0,firstIndex) + characters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "ea06552e9a42cbaac6979e31ca58475e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "+ ' is a palindrome'); ``` When the #text-input element contains a random sequence of alphanumeric characters that is not a palindrome, the #result element should say it is not a palindrome ```js const inputEl = document getElementById('text-input'); const checkBtn = document getElementById('check-btn'); const resultEl = document getElementById('result'); let characters = 'abcdefghijklmnopqrstuvwxyz0123456789'; let charactersLength = characters length; const firstIndex = Math floor(Math random() * charactersLength); const firstLetter = characters charAt(firstIndex); characters = characters slice(0,firstIndex) + charactersslice(firstIndex + 1);\ncharactersLength--;\nconst secondIndex = Math floor(Math random() * charactersLength);\nconst secondLetter = characters charAt(secondIndex);\ncharacters = characters slice(0,secondIndex) + characters slice(secondIndex + 1);\ncharactersLength--;\nconst thirdIndex = Math floor(Math random() * charactersLength);\nconst thirdLetter = characters charAt(thirdIndex);\ncharacters = characters slice(0,thirdIndex) + characters slice(thirdIndex + 1);\ncharactersLength--;\nconst fourthIndex = Math floor(Math random() * charactersLength);\nconst fourthLetter = characters charAt(fourthIndex);\ncharacters = characters slice(0,fourthIndex) + characters slice(fourthIndex + 1);\ncharactersLength--;\nconst phrase = firstLetter + secondLetter + thirdLetter + fourthLetter;\ninputEl value = phrase;\ninputEl dispatchEvent(new Event('change'))\ncheckBtn click();\nassert strictEqual(resultEl innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), phrase + ' is not a palindrome');\n```\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n```js\n```\n--solutions--\n```html\nPalindrome Checker\nIs it a Palindrome Enter in text to check for a palindrome:\nCheck\n💡\nA palindrome is a word or sentence that's spelled the same\nway both forward and backward, ignoring punctuation, case, and\nspacing ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: Verdana, Geneva, Tahoma, sans-serif;\nbackground-color: #0a0a23;\ncolor: #ffffff;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "28b82aac35e62338d7e2dbb77e40ad67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "' is not a palindrome'); ``` --seed-- --seed-contents-- ```html ``` ```css ``` ```js ``` --solutions-- ```html Palindrome Checker Is it a Palindrome Enter in text to check for a palindrome: Check 💡 A palindrome is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: Verdana, Geneva, Tahoma, sans-serif; background-color: #0a0a23; color: #ffffff; }container {\nwidth: 100%;\nmin-height: 100vh;\nposition: relative;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nflex-direction: column;\n} freecodecamp-logo {\nheight: 30px;\nmargin-bottom: 20px;\n} title {\ntext-align: center;\npadding: 10px 0;\nfont-size: 2 5rem;\nmargin-bottom: 20px;\n} palindrome-div {\nwidth: min(100vw, 450px);\nmin-height: 100px;\nborder-radius: 20px;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nflex-wrap: wrap;\npadding: 20px;\nmargin: 10px 0;\nbackground-color: white;\nbox-shadow: 0 6px 6px #002ead;\n}\nlabel {\ncolor: #0a0a23;\nmargin-bottom: 20px;\n} palindrome-btn {\nwidth: 90px;\nborder: none;\npadding: 10px;\nborder-radius: 15px;\nbackground-color: #5a01a7;\ncolor: #fff;\ncursor: pointer;\n} palindrome-input {\nheight: 30px;\nwidth: 250px;\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 10px;\nborder: none;\nborder-bottom: 2px solid #5a01a7;\n} palindrome-input:focus {\nborder-bottom: 3px solid #5a01a7;\n} palindrome-input::placeholder {\ntext-align: center;\n} user-input {\nfont-size: 1 4rem;\nmargin-top: 10px;\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "5a7dc916bf37ddddb986b0497c12840a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "10px 0; background-color: white; box-shadow: 0 6px 6px #002ead; } label { color: #0a0a23; margin-bottom: 20px; } palindrome-btn { width: 90px; border: none; padding: 10px; border-radius: 15px; background-color: #5a01a7; color: #fff; cursor: pointer; } palindrome-input { height: 30px; width: 250px; text-align: center; font-size: 1 2rem; margin: 10px; border: none; border-bottom: 2px solid #5a01a7; } palindrome-input:focus { border-bottom: 3px solid #5a01a7; } palindrome-input::placeholder { text-align: center; } user-input { font-size: 1 4rem; margin-top: 10px; text-align: center; }results-div {\noverflow-y: auto;\nword-wrap: break-word;\nmin-height: 50px;\ncolor: black;\n} hidden {\ndisplay: none;\n} palindrome-definition-div {\nwidth: min(100vw, 450px);\nfont-size: 1 3rem;\nmin-height: 140px;\nbackground-color: #00471b;\nmargin-top: 20px;\npadding: 20px;\nborder-radius: 20px;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} palindrome-definition {\nvertical-align: middle;\ntext-align: center;\n}\n```\n```js\nconst userInput = document getElementById(\"text-input\");\nconst checkPalindromeBtn = document getElementById(\"check-btn\");\nconst resultDiv = document getElementById(\"result\");\nconst checkForPalindrome = (input) => {\nconst originalInput = input; // Store for later output\nif (input === \"\") {\nalert(\"Please input a value\");\nreturn;\n}\n// Remove the previous result\nresultDiv replaceChildren();\nconst lowerCaseStr = input replace(/[^A-Za-z0-9]/gi, \"\") toLowerCase();\nlet resultMsg = <strong>${originalInput}</strong> ${\nlowerCaseStr === [ lowerCaseStr] reverse() join(\"\") \"is\" : \"is not\"\n} a palindrome ;\nconst pTag = document createElement(\"p\");\npTag className = \"user-input\";\npTag innerHTML = resultMsg;\nresultDiv appendChild(pTag);\n// Show the result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "fb76ab8b7094a52a337909167f6fc29b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
    "source_type": "git_repo",
    "title": "Palindrome Checker",
    "content": "= (input) => { const originalInput = input; // Store for later output if (input === \"\") { alert(\"Please input a value\"); return; } // Remove the previous result resultDiv replaceChildren(); const lowerCaseStr = input replace(/[^A-Za-z0-9]/gi, \"\") toLowerCase(); let resultMsg = <strong>${originalInput}</strong> ${ lowerCaseStr === [ lowerCaseStr] reverse() join(\"\") \"is\" : \"is not\" } a palindrome ; const pTag = document createElement(\"p\"); pTag className = \"user-input\"; pTag innerHTML = resultMsg; resultDiv appendChild(pTag); // Show the resultresultDiv classList remove(\"hidden\");\n};\ncheckPalindromeBtn addEventListener(\"click\", () => {\ncheckForPalindrome(userInput value);\nuserInput value = \"\";\n});\nuserInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckForPalindrome(userInput value);\nuserInput value = \"\";\n}\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 19584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-palindrome-checker-project\\build-a-palindrome-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "927db7155f9a0c5cc3a81d5d1e837c09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635060a5c03c950f46174cb5.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 635060a5c03c950f46174cb5\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nStatistics is a way of using math to make sense of data It helps us understand patterns and trends in information, so we can make predictions and decisions based on that information In this challenge, you will build a statistics calculator that takes a set of numbers and returns the mean, median, mode, standard deviation, and variance The HTML and CSS have been provided for you Feel free to explore the code – you may notice that the calculate function is called when the form is submitted When you are ready, declare a calculate variable and assign it an empty function in the script js file --hints--\nYou should use the const keyword to declare a variable calculate js\nassert match(code, /const\\s+calculate/);\nYour calculate variable should be a function js\nassert isFunction(calculate);\nYour calculate function should be empty js\nassert match(calculate toString(), /\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3449,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635060a5c03c950f46174cb5.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "41c4acec4a489fcc1e69de0a8bc384a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635060a5c03c950f46174cb5.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); }bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3449,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635060a5c03c950f46174cb5.md",
      "source_type": "git_repo"
    },
    "token_count": 164,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b8b099251fa11bd32377c624ab14900d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507b5ac8a55134223374c7.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63507b5ac8a55134223374c7\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nTo begin, the calculate function needs to find the number that was entered in the #numbers input field To do this, use a querySelector to locate the input field and then use the value property to get the number entered Store this in a value variable --hints--\nYour calculate function should have a value variable js\nassert match(calculate toString(), /value/);\nYour calculate function should call document querySelector() with \"#numbers\" as the argument js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*(\"|')#numbers\\1\\s*\\)/)\nYou should access the value property of your document querySelector() call js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*(\"|')#numbers\\1\\s*\\)\\ value/);\nYou should assign the value property to your value variable js\nassert match(calculate toString(), /value\\s*=\\s*document\\ querySelector\\(\\s*(\"|')#numbers\\1\\s*\\)\\ value/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507b5ac8a55134223374c7.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "efb6f01942bb3cc2c734c7407fc4db10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507b5ac8a55134223374c7.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\nconst calculate = () => {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507b5ac8a55134223374c7.md",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cefd2359724adf89694e98943ec6f493",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507bcbfe4ede356e624395.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63507bcbfe4ede356e624395\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nNow that you have the value of the input, you need to split it into an array of numbers Use the split() method to do this The split() method takes a string and splits it into an array of strings You can pass it a string of characters or a RegEx to use as a separator For example, string split(\",\") would split the string at each comma and return an array of strings Use the /,\\s*/g regex to split the value string by commas You can tweak it based on the number of spaces separating your values Store the array in an array variable --hints--\nYour calculate function should have an array variable js\nassert match(code toString(), /array/);\nYour calculate function should call the split() method on the value variable js\nassert match(code toString(), /value\\ split()/);\nYour calculate function should assign the result of the split() method to the array variable js\nassert match(code toString(),  /array\\s*=\\s*value\\ split()/);\nYou should use /,\\s*/g for the split() method's separator js\nassert match(code toString(), /value\\ split\\(\\s*\\/,\\s*\\\\s*\\*\\s*\\/g\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507bcbfe4ede356e624395.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ada3be25bd5f154aa1624727dec26f23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507bcbfe4ede356e624395.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\njs\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507bcbfe4ede356e624395.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7285cc764c4c0e475b76d8eb928c1590",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507c19151201368ee3e16c.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63507c19151201368ee3e16c\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nThe value of an input element is always a string, even if the input type is number You need to convert this array of strings into an array of numbers To do this, you can use the map() method Create a numbers variable and assign it the value of array map() Remember that map() creates a new array, instead of mutating the original array --hints--\nYour calculate function should have a numbers variable js\nassert match(calculate toString(), /(let|const|var)\\s+numbers/);\nYou should use the map() method on your array variable js\nassert match(calculate toString(), /array\\ map\\(\\s*\\)/);\nYou should assign the result of your map() call to your numbers variable js\nassert match(calculate toString(), /numbers\\s*=\\s*array\\ map()/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507c19151201368ee3e16c.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c511f4b514651fc8217f7331603f8264",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507c19151201368ee3e16c.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); }bold {\nfont-weight: bold;\n}\n```\njs\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507c19151201368ee3e16c.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b4f46d5d3154cdd1da2fba4a540b2081",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507c4b63731437227b0134.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63507c4b63731437227b0134\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nThe map() method takes a callback function as its first argument This callback function takes a few arguments, but the first one is the current element being processed Here is an example:\n```js\narray map(el => {\n})\n```\nThe callback function needs to return a value In this case, you want to return the value of each element converted to a number You can do this by using the Number() constructor, passing the element as an argument Add a callback function to your map() method that converts each element to a number --hints--\nYour map() method should have a callback function js\nassert match(calculate toString(), /array\\ map\\(\\s*(\\(\\s*\\w+\\s*\\)|\\w+)\\s*=>|array\\ map\\(\\s*function\\s*\\(\\s*\\w+\\s*\\)\\s*\\{|array\\ map\\(\\s*Number\\s*\\)/)\nYour callback function should use the Number constructor to convert each array element to a number js\nassert match(calculate toString(), /Number\\(\\s*\\w+\\s*\\)|Number/);\nYour callback function should not use the new keyword with the Number constructor js\nassert notMatch(calculate toString(), /new/);\nYour callback function should return the element converted to a number js\nassert match(calculate toString(), /(array\\ map\\(\\s*(\\(\\s*\\w+\\s*\\)|\\w+)\\s*=>|array\\ map\\(\\s*function\\s*\\(\\s*\\w+\\s*\\)\\s*\\{)\\s*(return\\s+) Number\\(\\s*\\w+\\s*\\)|array\\ map\\(\\s*Number\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507c4b63731437227b0134.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dd02aae685e7c0254c0ecc9ab056e95f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507c4b63731437227b0134.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "a list of comma-separated numbers Numbers: Calculate The mean of a list of numbers is the average, calculated by taking the sum of all numbers and dividing that by the count of numbers Mean: The median of a list of numbers is the number that appears in the middle of the list, when sorted from least to greatest Median: The mode of a list of numbers is the number that appears most often in the listMode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\njs\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map();\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507c4b63731437227b0134.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "45344e1806133996444f680b216e6b75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "id: 657bdcc3a322aae1eac38392\ntitle: Build a Cash Register\nchallengeType: 14\nforumTopicId: 16012\ndashedName: build-a-cash-register\n--description--\nHere you'll build a cash register app that will return change to the customer based on the price of the item, the amount of cash provided by the customer, and the amount of cash in the cash drawer You'll also need to show different messages to the user in different scenarios, such as when the customer provides too little cash or when the cash drawer doesn't have enough to issue the correct change In the script js file, you have been provided with the price and cid variables The price variable is the price of the item, and the cid variable is the cash-in-drawer, which is a 2D array listing the available currency in the cash drawer The other variable you will need to add is the cash variable, which is the amount of cash provided by the customer for the item, which is provided via an input element on the page If you'd like to test your application with different values for price and cid, make sure to declare them with the let keyword so they can be reassigned by our tests Your application should show different messages depending on the price of the item, the amount of cash provided by the customer, and the amount of cash in the drawer:\n\"Status: INSUFFICIENT_FUNDS\": if cash-in-drawer is less than the change due, or if you cannot return the exact change \"Status: CLOSED\": if cash-in-drawer is equal to the change due \"Status: OPEN\": if cash-in-drawer is greater than the change due and you can return change, with the change due in coins and bills sorted in highest to lowest order |    Currency Unit    |       Amount       |\n|:-------------------:|:------------------:|\n|        Penny        |    $0 01 (PENNY)   |\n|        Nickel       |   $0 05 (NICKEL)   |\n|         Dime        |     $0 1 (DIME)    |\n|       Quarter       |   $0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 25
  },
  {
    "id": "17994d6467c292ed3e6a8d41f4705a5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "cannot return the exact change \"Status: CLOSED\": if cash-in-drawer is equal to the change due \"Status: OPEN\": if cash-in-drawer is greater than the change due and you can return change, with the change due in coins and bills sorted in highest to lowest order | Currency Unit | Amount | |:-------------------:|:------------------:| | Penny | $0 01 (PENNY) | | Nickel | $0 05 (NICKEL) | | Dime | $0 1 (DIME) | | Quarter | $025 (QUARTER)  |\n|        Dollar       |      $1 (ONE)      |\n|     Five Dollars    |      $5 (FIVE)     |\n|     Ten Dollars     |      $10 (TEN)     |\n|    Twenty Dollars   |    $20 (TWENTY)    |\n| One Hundred Dollars | $100 (ONE HUNDRED) |\nObjective: Build an app that is functionally similar to https://cash-register freecodecamp rocks User Stories:\nYou should have an input element with an id of \"cash\" You should have a div, span or p element with an id of \"change-due\" You should have a button element with an id of \"purchase-btn\" When the value in the #cash element is less than price, an alert should appear with the text \"Customer does not have enough money to purchase the item\" When the value in the #cash element is equal to price, the value in the #change-due element should be \"No change due - customer paid with exact cash\" When price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 1 01], [\"NICKEL\", 2 05], [\"DIME\", 3 1], [\"QUARTER\", 4 25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: OPEN QUARTER: $0 5\" When price is 3 26, the value in the #cash element is 100, cid is [[\"PENNY\", 1 01], [\"NICKEL\", 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 25
  },
  {
    "id": "88edc85ac6ba22c6ba4889e620a3d0bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 1 01], [\"NICKEL\", 2 05], [\"DIME\", 3 1], [\"QUARTER\", 4 25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: OPEN QUARTER: $0 5\" When price is 3 26, the value in the #cash element is 100, cid is [[\"PENNY\", 1 01], [\"NICKEL\", 205], [\"DIME\", 3 1], [\"QUARTER\", 4 25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: OPEN TWENTY: $60 TEN: $20 FIVE: $15 ONE: $1 QUARTER: $0 5 DIME: $0 2 PENNY: $0 04\" When price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 0 01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: INSUFFICIENT_FUNDS\" When price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 2,
    "total_chunks": 25
  },
  {
    "id": "925c0f08c932735b8ed9942b3f155bc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "$0 5 DIME: $0 2 PENNY: $0 04\" When price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 0 01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: INSUFFICIENT_FUNDS\" When price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 001], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: INSUFFICIENT_FUNDS\" When price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 0 5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: CLOSED PENNY: $0 5\" Fulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 3,
    "total_chunks": 25
  },
  {
    "id": "878af4d88af45e63ab43046e5fd68da3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "When price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 0 5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: CLOSED PENNY: $0 5\" Fulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding--before-all--\njs\nconst _money = [\n['ONE HUNDRED', 10000],\n['TWENTY', 2000],\n['TEN', 1000],\n['FIVE', 500],\n['ONE', 100],\n['QUARTER', 25],\n['DIME', 10],\n['NICKEL', 5]\n];\nconst _denomRegexes = [\n/PENNY/,\n/NICKEL/,\n/DIME/,\n/QUARTER/,\n/ONE [^H]/,\n/FIVE/,\n/TEN/,\n/TWENTY/,\n/ONE HUNDRED/\n];\nfunction _randomNumber(max) {\nreturn Math floor(Math random() * (max + 1));\n}\n--hints--\nYou should have the HTML file link to the JavaScript file js\nconst script = document querySelector('script[data-src$=\"script js\"]');\nassert isNotNull(script);\nYou should have a global variable called price js\nprice = 10;\nassert strictEqual(price, 10);\nYou should have a global variable called cid js\ncid = [];\nassert isDefined(cid);\nYou should have an input element with an id of \"cash\" js\nconst el = document getElementById('cash');\nassert strictEqual(el nodeName toLowerCase(), 'input');\nYou should have a div, span, or p element with an id of \"change-due\" js\nconst el = document getElementById('change-due');\nassert(['div', 'span', 'p'] includes(el nodeName toLowerCase()));\nYou should have a button element with an id of \"purchase-btn\" js\nconst el = document getElementById('purchase-btn');\nassert strictEqual(el nodeName",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 4,
    "total_chunks": 25
  },
  {
    "id": "31e6795877febe6abc66394d4b01d083",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "called cid js cid = []; assert isDefined(cid); You should have an input element with an id of \"cash\" js const el = document getElementById('cash'); assert strictEqual(el nodeName toLowerCase(), 'input'); You should have a div, span, or p element with an id of \"change-due\" js const el = document getElementById('change-due'); assert(['div', 'span', 'p'] includes(el nodeName toLowerCase())); You should have a button element with an id of \"purchase-btn\" js const el = document getElementById('purchase-btn'); assert strictEqual(el nodeNametoLowerCase(), 'button');\nWhen price is 20, the value in the #cash element is 10, and the #purchase-btn element is clicked, an alert should appear with the text \"Customer does not have enough money to purchase the item\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nlet alertMessage;\nwindow alert = message => (alertMessage = message); // Override alert and store message\n// set price and customer cash\nprice = 20;\ncashInput value = '10';\ncid = [['PENNY', 1 01], ['NICKEL', 2 05], ['DIME', 3 1], ['QUARTER', 4 25], ['ONE', 90], ['FIVE', 55], ['TEN', 20], ['TWENTY', 60], ['ONE HUNDRED', 100]];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nassert strictEqual(\nalertMessage trim() replace(/[ , ]+$/g, '') toLowerCase(),\n'customer does not have enough money to purchase the item'\n);\n```\nWhen the value in the #cash element is less than price, and the #purchase-btn element is clicked, an alert should appear with the text \"Customer does not have enough money to purchase the item\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nlet alertMessage;\nwindow alert = message => (alertMessage = message);\n// Min $5 00, max $100 00, changes by $0 01, in cents const randomPrice = _randomNumber(9500) + 500;\n// Min $1 00, max price - $1, changes by $0 01, in cents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 5,
    "total_chunks": 25
  },
  {
    "id": "25ed0a3d9ea8bd1c3d8d8b77180579b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "the #purchase-btn element is clicked, an alert should appear with the text \"Customer does not have enough money to purchase the item\" ```js const cashInput = document getElementById('cash'); const purchaseBtn = document getElementById('purchase-btn'); let alertMessage; window alert = message => (alertMessage = message); // Min $5 00, max $100 00, changes by $0 01, in cents const randomPrice = _randomNumber(9500) + 500; // Min $1 00, max price - $1, changes by $0 01, in centsconst randomCash = _randomNumber(randomPrice - 200) + 100;\nprice = randomPrice / 100;\ncashInput value = ${randomCash / 100};\ncid = [\n['PENNY', 1 01],\n['NICKEL', 2 05],\n['DIME', 3 1],\n['QUARTER', 4 25],\n['ONE', 90],\n['FIVE', 55],\n['TEN', 20],\n['TWENTY', 60],\n['ONE HUNDRED', 100]\n];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nassert strictEqual(\nalertMessage trim() replace(/[ , ]+$/g, '') toLowerCase(),\n'customer does not have enough money to purchase the item'\n);\n```\nWhen price is 11 95, the value in the #cash element is 11 95, and the #purchase-btn element is clicked, the value in the #change-due element should be \"No change due - customer paid with exact cash\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// set price and customer cash\nprice = 11 95;\ncashInput value = '11 95';\ncid = [['PENNY', 1 01], ['NICKEL', 2 05], ['DIME', 3 1], ['QUARTER', 4 25], ['ONE', 90], ['FIVE', 55], ['TEN', 20], ['TWENTY', 60], ['ONE HUNDRED', 100]];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nassert strictEqual(\nchangeDueDiv innerText trim() replace(/[ , ]+$/g, '')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 6,
    "total_chunks": 25
  },
  {
    "id": "09b224623c978000098b219dc8e36ecb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "- customer paid with exact cash\" ```js const cashInput = document getElementById('cash'); const purchaseBtn = document getElementById('purchase-btn'); const changeDueDiv = document getElementById('change-due'); // set price and customer cash price = 11 95; cashInput value = '11 95'; cid = [['PENNY', 1 01], ['NICKEL', 2 05], ['DIME', 3 1], ['QUARTER', 4 25], ['ONE', 90], ['FIVE', 55], ['TEN', 20], ['TWENTY', 60], ['ONE HUNDRED', 100]]; cashInput dispatchEvent(new Event('change')); purchaseBtn click(); assert strictEqual( changeDueDiv innerText trim() replace(/[ , ]+$/g, '')toLowerCase(),\n'no change due - customer paid with exact cash'\n);\n```\nWhen the value in the #cash element is equal to price, and the #purchase-btn element is clicked, the value in the #change-due element should be \"No change due - customer paid with exact cash\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// Min $1 00, max $50 00, changes by $0 01, in cents const randomPrice = _randomNumber(4900) + 100;\nprice = randomPrice / 100;\ncashInput value = ${price};\ncid = [\n['PENNY', 1 01],\n['NICKEL', 2 05],\n['DIME', 3 1],\n['QUARTER', 4 25],\n['ONE', 90],\n['FIVE', 55],\n['TEN', 20],\n['TWENTY', 60],\n['ONE HUNDRED', 100]\n];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nassert strictEqual(\nchangeDueDiv innerText trim() replace(/[ , ]+$/g, '') toLowerCase(),\n'no change due - customer paid with exact cash'\n);\n```\nWhen price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 1 01], [\"NICKEL\", 2 05], [\"DIME\", 3 1], [\"QUARTER\", 4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 7,
    "total_chunks": 25
  },
  {
    "id": "00ab1a8e72d47bc9df30675e0ab9e3fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "['PENNY', 1 01], ['NICKEL', 2 05], ['DIME', 3 1], ['QUARTER', 4 25], ['ONE', 90], ['FIVE', 55], ['TEN', 20], ['TWENTY', 60], ['ONE HUNDRED', 100] ]; cashInput dispatchEvent(new Event('change')); purchaseBtn click(); assert strictEqual( changeDueDiv innerText trim() replace(/[ , ]+$/g, '') toLowerCase(), 'no change due - customer paid with exact cash' ); ``` When price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 1 01], [\"NICKEL\", 2 05], [\"DIME\", 3 1], [\"QUARTER\", 425], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: OPEN QUARTER: $0 5\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// set price, customer cash, and cid\nprice = 19 5;\ncashInput value = 20;\ncid = [\n['PENNY', 1 01],\n['NICKEL', 2 05],\n['DIME', 3 1],\n['QUARTER', 4 25],\n['ONE', 90],\n['FIVE', 55],\n['TEN', 20],\n['TWENTY', 60],\n['ONE HUNDRED', 100]\n];\nconst expected = ['Status: OPEN', 'QUARTER: $0 5'];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nconst result = changeDueDiv innerText trim() toLowerCase();\nassert isTrue(expected every(str => result includes(str toLowerCase())));\nconst notExpected = [\n/PENNY/,\n/NICKEL/,\n/DIME/,\n/ONE [^H]/,\n/FIVE/,\n/TEN/,\n/TWENTY/,\n/ONE HUNDRED/\n];\nassert isTrue( notExpected some(regex => result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 8,
    "total_chunks": 25
  },
  {
    "id": "ba9b32b16db9ab16e634e32b2641a9e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "20; cid = [ ['PENNY', 1 01], ['NICKEL', 2 05], ['DIME', 3 1], ['QUARTER', 4 25], ['ONE', 90], ['FIVE', 55], ['TEN', 20], ['TWENTY', 60], ['ONE HUNDRED', 100] ]; const expected = ['Status: OPEN', 'QUARTER: $0 5']; cashInput dispatchEvent(new Event('change')); purchaseBtn click(); const result = changeDueDiv innerText trim() toLowerCase(); assert isTrue(expected every(str => result includes(str toLowerCase()))); const notExpected = [ /PENNY/, /NICKEL/, /DIME/, /ONE [^H]/, /FIVE/, /TEN/, /TWENTY/, /ONE HUNDRED/ ]; assert isTrue( notExpected some(regex => resultmatch(new RegExp(regex, 'i'))));\n```\nWhen price is 3 26, the value in the #cash element is 100, cid is [[\"PENNY\", 1 01], [\"NICKEL\", 2 05], [\"DIME\", 3 1], [\"QUARTER\", 4 25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: OPEN TWENTY: $60 TEN: $20 FIVE: $15 ONE: $1 QUARTER: $0 5 DIME: $0 2 PENNY: $0 04\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// set price, customer cash, and cid\nprice = 3 26;\ncashInput value = 100;\ncid = [\n['PENNY', 1 01],\n['NICKEL', 2 05],\n['DIME', 3 1],\n['QUARTER', 4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 9,
    "total_chunks": 25
  },
  {
    "id": "1dd12e4eda7096a38593c61c9ed848a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "#purchase-btn element is clicked, the value in the #change-due element should be \"Status: OPEN TWENTY: $60 TEN: $20 FIVE: $15 ONE: $1 QUARTER: $0 5 DIME: $0 2 PENNY: $0 04\" ```js const cashInput = document getElementById('cash'); const purchaseBtn = document getElementById('purchase-btn'); const changeDueDiv = document getElementById('change-due'); // set price, customer cash, and cid price = 3 26; cashInput value = 100; cid = [ ['PENNY', 1 01], ['NICKEL', 2 05], ['DIME', 3 1], ['QUARTER', 425],\n['ONE', 90],\n['FIVE', 55],\n['TEN', 20],\n['TWENTY', 60],\n['ONE HUNDRED', 100]\n];\nconst expected = [\n'Status: OPEN',\n'TWENTY: $60',\n'TEN: $20',\n'FIVE: $15',\n'ONE: $1',\n'QUARTER: $0 5',\n'DIME: $0 2',\n'PENNY: $0 04'\n];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nconst result = changeDueDiv innerText trim() toLowerCase();\nassert isTrue(expected every(str => result includes(str toLowerCase())));\nconst notExpected = [/NICKEL/];\nassert isTrue( notExpected some(regex => result match(new RegExp(regex, 'i'))));\n```\nWhen price is less than the value in the #cash element, total cash in drawer cid is greater than the change due, individual denomination amounts allows for returning change due, and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: OPEN\" with required change due in coins and bills sorted in highest to lowest order ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// Min $50, max $100, changes by $10, in cents const randomCash = _randomNumber(5) * 1000 + 5000;\n// Min $5 00, max $30 00, changes by $0 01, in cents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 10,
    "total_chunks": 25
  },
  {
    "id": "443598291e42e0a68289281c9815233f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: OPEN\" with required change due in coins and bills sorted in highest to lowest order ```js const cashInput = document getElementById('cash'); const purchaseBtn = document getElementById('purchase-btn'); const changeDueDiv = document getElementById('change-due'); // Min $50, max $100, changes by $10, in cents const randomCash = _randomNumber(5) * 1000 + 5000; // Min $5 00, max $30 00, changes by $0 01, in centsconst randomChange = _randomNumber(2500) + 500;\nprice = (randomCash - randomChange) / 100;\ncashInput value = ${randomCash / 100};\nlet changeLeft = randomChange;\nconst _expectedChangeDue = [];\nconst _cashInDrawer = [];\nfor (const [denominationName, denomination] of _money) {\nconst drawerCount = _randomNumber(15);\n_cashInDrawer push([denominationName, (denomination * drawerCount) / 100]);\nif (denomination <= changeLeft && drawerCount > 0) {\nconst maxCountInChange = Math floor(changeLeft / denomination);\nconst actualCount = Math min(drawerCount, maxCountInChange);\nconst amountInChange = actualCount * denomination;\n_expectedChangeDue push([denominationName, amountInChange / 100]);\nchangeLeft -= amountInChange;\n}\n}\n// At least changeLeft is needed in pennies, to make returning change due possible const drawerCount = _randomNumber(100) + changeLeft;\n_cashInDrawer push(['PENNY', drawerCount / 100]);\nif (changeLeft > 0) {\n_expectedChangeDue push(['PENNY', changeLeft / 100]);\n}\ncid = _cashInDrawer reverse();\nconst expected = [\n'Status: OPEN', _expectedChangeDue reverse() map(([denominationName, amount]) => ${denominationName}: $${amount})\n];\nconst notExpected = _denomRegexes filter(\nregex => expected some(change => change match(new RegExp(regex, 'i')))\n);\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nconst result = changeDueDiv innerText trim() toLowerCase();\nassert isTrue(expected every(str => result includes(str toLowerCase())));\nassert isTrue( notExpected some(regex => result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 11,
    "total_chunks": 25
  },
  {
    "id": "4080e8e1003beb99fe27a210ed94b10b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "+ changeLeft; _cashInDrawer push(['PENNY', drawerCount / 100]); if (changeLeft > 0) { _expectedChangeDue push(['PENNY', changeLeft / 100]); } cid = _cashInDrawer reverse(); const expected = [ 'Status: OPEN', _expectedChangeDue reverse() map(([denominationName, amount]) => ${denominationName}: $${amount}) ]; const notExpected = _denomRegexes filter( regex => expected some(change => change match(new RegExp(regex, 'i'))) ); cashInput dispatchEvent(new Event('change')); purchaseBtn click(); const result = changeDueDiv innerText trim() toLowerCase(); assert isTrue(expected every(str => result includes(str toLowerCase()))); assert isTrue( notExpected some(regex => resultmatch(new RegExp(regex, 'i'))));\n```\nWhen price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 0 01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: INSUFFICIENT_FUNDS\"\n```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// set price, customer cash, and cid\nprice = 19 5;\ncashInput value = 20;\ncid = [\n['PENNY', 0 01],\n['NICKEL', 0],\n['DIME', 0],\n['QUARTER', 0],\n['ONE', 0],\n['FIVE', 0],\n['TEN', 0],\n['TWENTY', 0],\n['ONE HUNDRED', 0]\n];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nassert strictEqual(\nchangeDueDiv innerText trim() toLowerCase(),\n'status: insufficient_funds'\n);\n```\nWhen the price is less than the value in the #cash element and the total cash in the drawer (cid) is insufficient to cover the change due, the purchase should not proceed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 12,
    "total_chunks": 25
  },
  {
    "id": "4dce0270f117ff3932f423879fbd1aa1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "5; cashInput value = 20; cid = [ ['PENNY', 0 01], ['NICKEL', 0], ['DIME', 0], ['QUARTER', 0], ['ONE', 0], ['FIVE', 0], ['TEN', 0], ['TWENTY', 0], ['ONE HUNDRED', 0] ]; cashInput dispatchEvent(new Event('change')); purchaseBtn click(); assert strictEqual( changeDueDiv innerText trim() toLowerCase(), 'status: insufficient_funds' ); ``` When the price is less than the value in the #cash element and the total cash in the drawer (cid) is insufficient to cover the change due, the purchase should not proceedWhen the #purchase-btn is clicked under these conditions, the #change-due element should display \"Status: INSUFFICIENT_FUNDS\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// Min $50, max $100, changes by $10, in cents const randomCash = _randomNumber(5) * 1000 + 5000;\n// Min $5 00, max $30 00, changes by $0 01, in cents const randomChange = _randomNumber(2500) + 500;\nprice = (randomCash - randomChange) / 100;\ncashInput value = ${randomCash / 100};\nlet changeLeft = randomChange;\nconst _cashInDrawer = [];\nfor (const [denominationName, denomination] of _money) {\nconst maxCountInChange = Math floor(changeLeft / denomination);\n// Amount lower than maximum (adjusted to changeLeft) will ensure total in drawer\n// will be lower than needed change const drawerCount = _randomNumber(Math max(0, Math min(15, maxCountInChange - 1)));\nconst amountInDrawer = drawerCount * denomination;\n_cashInDrawer push([denominationName, amountInDrawer / 100]);\nif (denomination <= changeLeft && drawerCount > 0) {\nchangeLeft -= amountInDrawer;\n}\n}\n// Less pennies than changeLeft makes sure total cash in drawer is less than change due const count = _randomNumber(Math min(15, changeLeft - 1));\n_cashInDrawer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 13,
    "total_chunks": 25
  },
  {
    "id": "8e85613d8a24db61d1bddfa892864b51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "maximum (adjusted to changeLeft) will ensure total in drawer // will be lower than needed change const drawerCount = _randomNumber(Math max(0, Math min(15, maxCountInChange - 1))); const amountInDrawer = drawerCount * denomination; _cashInDrawer push([denominationName, amountInDrawer / 100]); if (denomination <= changeLeft && drawerCount > 0) { changeLeft -= amountInDrawer; } } // Less pennies than changeLeft makes sure total cash in drawer is less than change due const count = _randomNumber(Math min(15, changeLeft - 1)); _cashInDrawerpush(['PENNY', count / 100]);\ncid = _cashInDrawer reverse();\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nassert strictEqual(\nchangeDueDiv innerText trim() toLowerCase(),\n'status: insufficient_funds'\n);\n```\nWhen price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 0 01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: INSUFFICIENT_FUNDS\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// set price, customer cash, and cid\nprice = 19 5;\ncashInput value = 20;\ncid = [\n['PENNY', 0 01],\n['NICKEL', 0],\n['DIME', 0],\n['QUARTER', 0],\n['ONE', 1],\n['FIVE', 0],\n['TEN', 0],\n['TWENTY', 0],\n['ONE HUNDRED', 0]\n];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nassert strictEqual(\nchangeDueDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 14,
    "total_chunks": 25
  },
  {
    "id": "37c68a04b5f04361a47eb977fb49d367",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "clicked, the value in the #change-due element should be \"Status: INSUFFICIENT_FUNDS\" ```js const cashInput = document getElementById('cash'); const purchaseBtn = document getElementById('purchase-btn'); const changeDueDiv = document getElementById('change-due'); // set price, customer cash, and cid price = 19 5; cashInput value = 20; cid = [ ['PENNY', 0 01], ['NICKEL', 0], ['DIME', 0], ['QUARTER', 0], ['ONE', 1], ['FIVE', 0], ['TEN', 0], ['TWENTY', 0], ['ONE HUNDRED', 0] ]; cashInput dispatchEvent(new Event('change')); purchaseBtn click(); assert strictEqual( changeDueDiv innerText trim()toLowerCase(),\n'status: insufficient_funds'\n);\n```\nWhen price is less than the value in the #cash element, total cash in drawer cid is greater than change due, but the individual denomination amounts make it impossible to return needed change, when the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: INSUFFICIENT_FUNDS\"\n```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// Min $50, max $100, changes by $10, in cents const randomCash = _randomNumber(5) * 1000 + 5000;\n// Min $5 00, max $30 00, changes by $0 01, in cents const randomChange = _randomNumber(2500) + 500;\nprice = (randomCash - randomChange) / 100;\ncashInput value = ${randomCash / 100};\nlet changeLeft = randomChange;\nconst _expectedChangeDue = [];\nconst _cashInDrawer = [];\nfor (const [denominationName, denomination] of _money) {\nconst maxCountInChange = Math floor(changeLeft / denomination);\n// If denomination can complete required changeLeft, available amount in drawer cannot\n// equal the maximum Otherwise count in drawer can be greater than maximum count in change let defaultAmount = denomination < 100 3 : 15\nconst drawerCount = _randomNumber(\nchangeLeft % denomination === 0 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 15,
    "total_chunks": 25
  },
  {
    "id": "547f7cbc76898ee3c14b65cef70a7445",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "${randomCash / 100}; let changeLeft = randomChange; const _expectedChangeDue = []; const _cashInDrawer = []; for (const [denominationName, denomination] of _money) { const maxCountInChange = Math floor(changeLeft / denomination); // If denomination can complete required changeLeft, available amount in drawer cannot // equal the maximum Otherwise count in drawer can be greater than maximum count in change let defaultAmount = denomination < 100 3 : 15 const drawerCount = _randomNumber( changeLeft % denomination === 0 Mathmin(defaultAmount, maxCountInChange - 1) : defaultAmount\n);\nconst amountInDrawer = drawerCount * denomination;\n_cashInDrawer push([denominationName, amountInDrawer / 100]);\nconst changeCount = Math min(drawerCount, maxCountInChange);\nif (denomination <= changeLeft && changeCount > 0) {\nchangeLeft -= changeCount * denomination;\n}\n}\n// Less pennies than changeLeft makes impossible to return change due const drawerCount = _randomNumber(Math min(15, changeLeft - 1));\n_cashInDrawer push(['PENNY', drawerCount / 100]);\ncid = _cashInDrawer reverse();\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nassert strictEqual(\nchangeDueDiv innerText trim() toLowerCase(),\n'status: insufficient_funds'\n);\n```\nWhen price is 19 5, the value in the #cash element is 20, cid is [[\"PENNY\", 0 5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: CLOSED PENNY: $0 5\" ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// set price, customer cash, and cid\nprice = 19 5;\ncashInput value = 20;\ncid = [\n['PENNY', 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 16,
    "total_chunks": 25
  },
  {
    "id": "187cf5031b34cd6bee615ca7e41194d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "is [[\"PENNY\", 0 5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]], and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: CLOSED PENNY: $0 5\" ```js const cashInput = document getElementById('cash'); const purchaseBtn = document getElementById('purchase-btn'); const changeDueDiv = document getElementById('change-due'); // set price, customer cash, and cid price = 19 5; cashInput value = 20; cid = [ ['PENNY', 05],\n['NICKEL', 0],\n['DIME', 0],\n['QUARTER', 0],\n['ONE', 0],\n['FIVE', 0],\n['TEN', 0],\n['TWENTY', 0],\n['ONE HUNDRED', 0]\n];\nconst expected = ['Status: CLOSED', 'PENNY: $0 5'];\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nconst result = changeDueDiv innerText trim() toLowerCase();\nassert isTrue(expected every(str => result includes(str toLowerCase())));\nconst notExpected = [\n/NICKEL/,\n/DIME/,\n/QUARTER/,\n/ONE [^H]/,\n/FIVE/,\n/TEN/,\n/TWENTY/,\n/ONE HUNDRED/\n];\nassert isTrue( notExpected some(regex => result match(new RegExp(regex, 'i'))));\n```\nWhen price is less than the value in the #cash element, total cash in drawer cid is equal to change due, and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: CLOSED\" with change due in coins and bills sorted in highest to lowest order ```js\nconst cashInput = document getElementById('cash');\nconst purchaseBtn = document getElementById('purchase-btn');\nconst changeDueDiv = document getElementById('change-due');\n// Min $50, max $100, changes by $10, in cents const randomCash = _randomNumber(5) * 1000 + 5000;\n// Min $5 00, max $30 00, changes by $0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 17,
    "total_chunks": 25
  },
  {
    "id": "41b2365fe341b54a3bcb357526f6e181",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "to change due, and the #purchase-btn element is clicked, the value in the #change-due element should be \"Status: CLOSED\" with change due in coins and bills sorted in highest to lowest order ```js const cashInput = document getElementById('cash'); const purchaseBtn = document getElementById('purchase-btn'); const changeDueDiv = document getElementById('change-due'); // Min $50, max $100, changes by $10, in cents const randomCash = _randomNumber(5) * 1000 + 5000; // Min $5 00, max $30 00, changes by $001, in cents const randomChange = _randomNumber(2500) + 500;\nprice = (randomCash - randomChange) / 100;\ncashInput value = ${randomCash / 100};\nlet changeLeft = randomChange;\nconst _expectedChangeDue = [];\nconst _cashInDrawer = [];\nfor (const [denominationName, denomination] of _money) {\nconst maxCountInChange = Math floor(changeLeft / denomination);\nconst drawerCount = _randomNumber(maxCountInChange);\nconst amountInDrawer = drawerCount * denomination;\n_cashInDrawer push([denominationName, amountInDrawer / 100]);\nif (denomination <= changeLeft && drawerCount > 0) {\n_expectedChangeDue push([denominationName, amountInDrawer / 100]);\nchangeLeft -= amountInDrawer;\n}\n}\n// Pennies equal to changeLeft makes sure total cash in drawer is equal to change due _cashInDrawer push(['PENNY', changeLeft / 100]);\nif (changeLeft > 0) {\n_expectedChangeDue push(['PENNY', changeLeft / 100]);\n}\ncid = _cashInDrawer reverse();\nconst expected = [\n'Status: CLOSED', _expectedChangeDue reverse() map(([denominationName, amount]) => ${denominationName}: $${amount})\n];\nconst notExpected = _denomRegexes filter(\nregex => expected some(change => change match(new RegExp(regex, 'i')))\n);\ncashInput dispatchEvent(new Event('change'));\npurchaseBtn click();\nconst result = changeDueDiv innerText trim() toLowerCase();\nassert isTrue(expected every(str => result includes(str toLowerCase())));\nassert isTrue( notExpected some(regex => result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 18,
    "total_chunks": 25
  },
  {
    "id": "2ee23c007a215ca46e8dfb8e6008c039",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "change due _cashInDrawer push(['PENNY', changeLeft / 100]); if (changeLeft > 0) { _expectedChangeDue push(['PENNY', changeLeft / 100]); } cid = _cashInDrawer reverse(); const expected = [ 'Status: CLOSED', _expectedChangeDue reverse() map(([denominationName, amount]) => ${denominationName}: $${amount}) ]; const notExpected = _denomRegexes filter( regex => expected some(change => change match(new RegExp(regex, 'i'))) ); cashInput dispatchEvent(new Event('change')); purchaseBtn click(); const result = changeDueDiv innerText trim() toLowerCase(); assert isTrue(expected every(str => result includes(str toLowerCase()))); assert isTrue( notExpected some(regex => resultmatch(new RegExp(regex, 'i'))));\n```\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n```js\nlet price = 1 87;\nlet cid = [\n['PENNY', 1 01],\n['NICKEL', 2 05],\n['DIME', 3 1],\n['QUARTER', 4 25],\n['ONE', 90],\n['FIVE', 55],\n['TEN', 20],\n['TWENTY', 60],\n['ONE HUNDRED', 100]\n];\n```\n--solutions--\n```html\nCash Register\nCash Register Project\nEnter cash from customer:\nPurchase\n```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--light-gray: #dfdfe2;\n--dark-blue: #0a0a23;\n}\nbody {\nbackground-color: var(--dark-blue);\ncolor: var(--light-gray);\n}\nmain {\ndisplay: flex;\nflex-wrap: wrap;\nalign-items: center;\njustify-content: center;\nflex-direction: column;\npadding: 40px 10px;\n} freecodecamp-logo {\nwidth: 100%;\nheight: 30px;\nmargin-bottom: 20px;\n}\nh1 {\nfont-size: 2 5rem;\nmargin: 20px 0;\ntext-align: center;\n}\nchange-due {\ntext-align: left;\nfont-size: 1 2rem;\n} container {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 19,
    "total_chunks": 25
  },
  {
    "id": "fc0af114246d445f57134f125296ed8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "margin: 0; padding: 0; box-sizing: border-box; } :root { --light-gray: #dfdfe2; --dark-blue: #0a0a23; } body { background-color: var(--dark-blue); color: var(--light-gray); } main { display: flex; flex-wrap: wrap; align-items: center; justify-content: center; flex-direction: column; padding: 40px 10px; } freecodecamp-logo { width: 100%; height: 30px; margin-bottom: 20px; } h1 { font-size: 2 5rem; margin: 20px 0; text-align: center; } change-due { text-align: left; font-size: 1 2rem; } container { display: flex; flex-direction: column; justify-content: center; align-items: center; }input-div {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\nflex-wrap: wrap;\nmargin: 10px 0 20px;\n}\nlabel {\nfont-size: 18px;\n} user-input {\nheight: 30px;\npadding: 10px;\nmargin: 10px;\nfont-size: 15px;\n} price-screen {\nborder: 10px solid #99c9ff;\nbackground-color: black;\nheight: 50px;\nwidth: 200px;\nmargin-left: -40px;\ncolor: white;\nfont-size: 1 2rem;\ntext-align: center;\ndisplay: flex;\nflex-wrap: wrap;\nalign-items: center;\njustify-content: center;\n}\nprice {\nfont-size: 1 5rem;\ntext-align: center;\n} connector {\nmargin-left: -20px;\nbackground-color: #99c9ff;\nheight: 30px;\nwidth: 40px;\n} top-register {\ndisplay: flex;\njustify-content: space-around;\nborder-radius: 35px 35px 0 0;\npadding-top: 20px;\nbackground-color: #99c9ff;\nheight: 250px;\nwidth: 325px;\n} btns-container {\nwidth: 25%;\n} btn {\nborder-radius: 10%;\nborder: none;\nwidth: 20px;\nheight: 20px;\nbackground-color: black;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 20,
    "total_chunks": 25
  },
  {
    "id": "3b2203871b9855a0802a9eeda4a027e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "200px; margin-left: -40px; color: white; font-size: 1 2rem; text-align: center; display: flex; flex-wrap: wrap; align-items: center; justify-content: center; } price { font-size: 1 5rem; text-align: center; } connector { margin-left: -20px; background-color: #99c9ff; height: 30px; width: 40px; } top-register { display: flex; justify-content: space-around; border-radius: 35px 35px 0 0; padding-top: 20px; background-color: #99c9ff; height: 250px; width: 325px; } btns-container { width: 25%; } btn { border-radius: 10%; border: none; width: 20px; height: 20px; background-color: black; }check-btn-styles {\ncursor: pointer;\nwidth: 100px;\nheight: 30px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nfont-weight: bold;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: #feac32;\nborder-width: 3px;\n} cash-drawer-display {\nfont-size: 1 1rem;\nbackground-color: white;\nwidth: 55%;\nheight: 95%;\ncolor: black;\npadding: 10px;\n} bottom-register {\nbackground-color: #99c9ff;\nheight: 50px;\nwidth: 325px;\nmargin-top: 10px;\n} circle {\nmargin: 15px auto;\nborder-radius: 50%;\nwidth: 20px;\nheight: 20px;\nbackground-color: black;\n}\n```\n```js\nlet price = 3 26;\nlet cid = [\n['PENNY', 1 01],\n['NICKEL', 2 05],\n['DIME', 3 1],\n['QUARTER', 4 25],\n['ONE', 90],\n['FIVE', 55],\n['TEN', 20],\n['TWENTY', 60],\n['ONE HUNDRED', 100]\n];\nconst displayChangeDue = document getElementById('change-due');\nconst cash = document getElementById('cash');\nconst purchaseBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 21,
    "total_chunks": 25
  },
  {
    "id": "6d016b34bf0228b2d9aebc2c139d9046",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "10px; } bottom-register { background-color: #99c9ff; height: 50px; width: 325px; margin-top: 10px; } circle { margin: 15px auto; border-radius: 50%; width: 20px; height: 20px; background-color: black; } ``` ```js let price = 3 26; let cid = [ ['PENNY', 1 01], ['NICKEL', 2 05], ['DIME', 3 1], ['QUARTER', 4 25], ['ONE', 90], ['FIVE', 55], ['TEN', 20], ['TWENTY', 60], ['ONE HUNDRED', 100] ]; const displayChangeDue = document getElementById('change-due'); const cash = document getElementById('cash'); const purchaseBtn = documentgetElementById('purchase-btn');\nconst priceScreen = document getElementById('price-screen');\nconst cashDrawerDisplay = document getElementById('cash-drawer-display');\nconst formatResults = (status, change) => {\ndisplayChangeDue innerHTML = <p>Status: ${status}</p>;\ndisplayChangeDue innerHTML += change map(\n([denominationName, amount]) => <p>${denominationName}: $${amount}</p>\n) join('');\n};\nconst checkCashRegister = () => {\nconst cashInCents = Math round(Number(cash value) * 100);\nconst priceInCents = Math round(price * 100);\nif (cashInCents < priceInCents) {\nalert('Customer does not have enough money to purchase the item');\ncash value = '';\nreturn;\n}\nif (cashInCents === priceInCents) {\ndisplayChangeDue innerHTML =\n'No change due - customer paid with exact cash';\ncash value = '';\nreturn;\n}\nlet changeDue = cashInCents - priceInCents;\nconst reversedCid = [ cid] reverse() map(([denominationName, amount]) => [\ndenominationName,\nMath round(amount * 100)\n]);\nconst denominations = [10000, 2000, 1000, 500, 100, 25, 10, 5, 1];\nconst result = { status: 'OPEN', change: [] };\nconst totalCID = reversedCid",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 22,
    "total_chunks": 25
  },
  {
    "id": "df5acb34ec52fda1026200e882149743",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "cash value = ''; return; } if (cashInCents === priceInCents) { displayChangeDue innerHTML = 'No change due - customer paid with exact cash'; cash value = ''; return; } let changeDue = cashInCents - priceInCents; const reversedCid = [ cid] reverse() map(([denominationName, amount]) => [ denominationName, Math round(amount * 100) ]); const denominations = [10000, 2000, 1000, 500, 100, 25, 10, 5, 1]; const result = { status: 'OPEN', change: [] }; const totalCID = reversedCidreduce((prev, [_, amount]) => prev + amount, 0);\nif (totalCID < changeDue) {\ndisplayChangeDue innerHTML = 'Status: INSUFFICIENT_FUNDS';\nreturn;\n}\nif (totalCID === changeDue) {\nresult status = 'CLOSED';\n}\nfor (let i = 0; i <= reversedCid length; i++) {\nif (changeDue >= denominations[i] && changeDue > 0) {\nconst [denominationName, total] = reversedCid[i];\nconst possibleChange = Math min(total, changeDue);\nconst count = Math floor(possibleChange / denominations[i]);\nconst amountInChange = count * denominations[i];\nchangeDue -= amountInChange;\nif (count > 0) {\nresult change push([denominationName, amountInChange / 100]);\n}\n}\n}\nif (changeDue > 0) {\ndisplayChangeDue innerHTML = 'Status: INSUFFICIENT_FUNDS';\nreturn;\n}\nformatResults(result status, result change);\nupdateUI(result change);\n};\nconst checkResults = () => {\nif ( cash value) {\nreturn;\n}\ncheckCashRegister();\n};\nconst updateUI = change => {\nconst currencyNameMap = {\nPENNY: 'Pennies',\nNICKEL: 'Nickels',\nDIME: 'Dimes',\nQUARTER: 'Quarters',\nONE: 'Ones',\nFIVE: 'Fives',\nTEN: 'Tens',\nTWENTY: 'Twenties',\n'ONE HUNDRED': 'Hundreds'\n};\n// Update cid if change is passed in\nif (change) {\nchange forEach(([changeDenomination, changeAmount]) => {\nconst targetArr = cid",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 23,
    "total_chunks": 25
  },
  {
    "id": "a67983cc9fd265b34c61525969185973",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
    "source_type": "git_repo",
    "title": "Cash Register",
    "content": "'Status: INSUFFICIENT_FUNDS'; return; } formatResults(result status, result change); updateUI(result change); }; const checkResults = () => { if ( cash value) { return; } checkCashRegister(); }; const updateUI = change => { const currencyNameMap = { PENNY: 'Pennies', NICKEL: 'Nickels', DIME: 'Dimes', QUARTER: 'Quarters', ONE: 'Ones', FIVE: 'Fives', TEN: 'Tens', TWENTY: 'Twenties', 'ONE HUNDRED': 'Hundreds' }; // Update cid if change is passed in if (change) { change forEach(([changeDenomination, changeAmount]) => { const targetArr = cidfind(\n([denominationName, _]) => denominationName === changeDenomination\n);\ntargetArr[1] =\n(Math round(targetArr[1] * 100) - Math round(changeAmount * 100)) / 100;\n});\n}\ncash value = '';\npriceScreen textContent = Total: $${price};\ncashDrawerDisplay innerHTML = <p><strong>Change in drawer:</strong></p>\n${cid map(\n([denominationName, amount]) =>${currencyNameMap[denominationName]}: $${amount}) join('')};\n};\npurchaseBtn addEventListener('click', checkResults);\ncash addEventListener('keydown', e => {\nif (e key === 'Enter') {\ncheckResults();\n}\n});\nupdateUI();\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 32062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-cash-register-project\\build-a-cash-register.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 24,
    "total_chunks": 25
  },
  {
    "id": "b4dc6f5260ff141eb826b85bb0bdb98b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507d810f1a2e38f1908fd8.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63507d810f1a2e38f1908fd8\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nA user could put any text they want into the input box You want to make sure that you are only working with numbers The Number() constructor will return NaN (which stands for \"not a number\") if the value passed to it cannot be converted to a number You need to filter these values out – thankfully, arrays have a method specifically for this The filter() method will allow you to filter elements out of an array, creating a new array in the process Declare a filtered variable and assign numbers filter() to it --hints--\nYour calculate function should have a filtered variable js\nassert match(calculate toString(), /filtered/);\nYour calculate function should use the filter() method on the numbers array js\nassert match(calculate toString(), /numbers\\ filter\\(\\s*\\)/)\nYou should assign the result of numbers filter() to the filtered variable js\nassert match(calculate toString(), /filtered\\s*=\\s*numbers\\ filter\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3653,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507d810f1a2e38f1908fd8.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "180d8128c9de8240f3281a8ca655a79a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507d810f1a2e38f1908fd8.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\njs\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el));\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3653,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507d810f1a2e38f1908fd8.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cddaf7fbeae6b674d151692b1288173d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507e4562cdde3a28e8de1b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63507e4562cdde3a28e8de1b\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nMuch like the map() method, the filter() method takes a callback function The callback function takes the current element as its first argument ```js\narray filter(el => {\n})\n```\nThe callback function needs to return a Boolean value, which indicates whether the element should be included in the new array In this case, you want to return true if the element is not NaN (not a number) However, you cannot check for equality here, because NaN is not equal to itself Instead, you can use the isNaN() method, which returns true if the argument is NaN Add a callback function to your filter() method with el as its parameter, and use an implicit return to return true if the element is NOT NaN --hints--\nYour filter() method should have a callback which accepts el as a parameter js\nassert match(calculate toString(), /numbers\\ filter\\(\\s*(\\(\\s*el\\s*\\)|el)\\s*=>|numbers\\ filter\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{/)\nYour callback function should use and isNaN() to check if el is NOT NaN js\nassert match(calculate toString(), / \\s*(Number\\ ) isNaN\\(\\s*el\\s*\\)/);\nYour callback function should return elements that are not NaN js\nassert match(calculate toString(), /(numbers\\ filter\\(\\s*(\\(\\s*el\\s*\\)|el)\\s*=>|numbers\\ filter\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{)\\s*(return\\s*) (Number\\ ) isNaN\\(\\s*el\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507e4562cdde3a28e8de1b.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8bbbf28deaa0b8bee4680f9bb1254ead",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507e4562cdde3a28e8de1b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "the sum of all numbers and dividing that by the count of numbers Mean: The median of a list of numbers is the number that appears in the middle of the list, when sorted from least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the listRange:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\njs\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el));\nconst filtered = numbers filter();\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507e4562cdde3a28e8de1b.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "87d692546099a24c4206aaca2e28828d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "id: 6555c1d3e11a1574434cf8b5\ntitle: Build an RPG Creature Search App\nchallengeType: 14\nforumTopicId: 16003\ndashedName: build-an-rpg-creature-search-app\n--description--\nIn this project, you'll build an app that will search for creatures from an RPG game by name or ID and display the results to the user To retrieve the creature data and images, you'll use freeCodeCamp's RPG Creature API Note: The first 13 steps must be completed inside the index html file Objective: Build an app that is functionally similar to https://rpg-creature-search-app freecodecamp rocks User Stories:\nYou should have an input element with an id of \"search-input\", and is required You should have a button element with an id of \"search-button\" You should have an element with an id of \"creature-name\" You should have an element with an id of \"creature-id\" You should have an element with an id of \"weight\" You should have an element with an id of \"height\" You should have an element with an id of \"types\" You should have an element with an id of \"hp\" You should have an element with an id of \"attack\" You should have an element with an id of \"defense\" You should have an element with an id of \"special-attack\" You should have an element with an id of \"special-defense\" You should have an element with an id of \"speed\" When the #search-input element contains the value Red and the #search-button element is clicked, an alert should appear with the text \"Creature not found\" When the #search-input element contains the value Pyrolynx and the #search-button element is clicked, the values in the #creature-name, #creature-id, #weight, #height, #hp, #attack, #defense, #special-attack, #special-defense, and #speed elements should be PYROLYNX, #1 or 1, Weight: 42 or 42, Height: 32 or 32, 65, 80, 50, 90, 55, and 100, respectively When the #search-input element contains the value Pyrolynx and the #search-button element is clicked, a single element should be added within the #types element that contains the text FIRE",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 15
  },
  {
    "id": "364cc5ea8504561110a1d2acbf5e5770",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "the value Pyrolynx and the #search-button element is clicked, the values in the #creature-name, #creature-id, #weight, #height, #hp, #attack, #defense, #special-attack, #special-defense, and #speed elements should be PYROLYNX, #1 or 1, Weight: 42 or 42, Height: 32 or 32, 65, 80, 50, 90, 55, and 100, respectively When the #search-input element contains the value Pyrolynx and the #search-button element is clicked, a single element should be added within the #types element that contains the text FIREThe #types element content should be cleared between searches When the #search-input element contains the value 2 and the #search-button element is clicked, the values in the #creature-name, #creature-id, #weight, #height, #hp, #attack, #defense, #special-attack, #special-defense, and #speed elements should be AQUOROC, #2 or 2, Weight: 220 or 220, Height: 53 or 53, 85, 90, 120, 60, 70, and 40, respectively When the #search-input element contains the value 2 and the #search-button element is clicked, two elements should be added within the #types element that contain text values WATER and ROCK, respectively The #types element content should be cleared between searches When the #search-input element contains an invalid creature name, and the #search-button element is clicked, an alert should appear with the text \"Creature not found\" When the #search-input element contains a valid creature ID and the #search-button element is clicked, the UI should be filled with the correct data Fulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding Note: When running the tests there will be a slight delay Please wait a few seconds to allow the tests to finish Do not refresh the page before they are done --hints--\nYou should have an input element with an id of \"search-input\" The input should be marked as required js\nconst el = document getElementById('search-input');\nassert strictEqual(el nodeName toLowerCase(), 'input');\nassert isTrue(el required);\nYou should have a button element with an id of \"search-button\" js\nconst el = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 15
  },
  {
    "id": "98baa307cecb1bd141e98dfa7621127a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "tests there will be a slight delay Please wait a few seconds to allow the tests to finish Do not refresh the page before they are done --hints-- You should have an input element with an id of \"search-input\" The input should be marked as required js const el = document getElementById('search-input'); assert strictEqual(el nodeName toLowerCase(), 'input'); assert isTrue(el required); You should have a button element with an id of \"search-button\" js const el = documentgetElementById('search-button');\nassert strictEqual(el nodeName toLowerCase(), 'button');\nYou should have an element with an id of \"creature-name\" js\nconst el = document getElementById('creature-name');\nassert exists(el);\nYou should have an element with an id of \"creature-id\" js\nconst el = document getElementById('creature-id');\nassert exists(el);\nYou should have an element with an id of \"weight\" js\nconst el = document getElementById('weight');\nassert exists(el);\nYou should have an element with an id of \"height\" js\nconst el = document getElementById('height');\nassert exists(el);\nYou should have an element with an id of \"types\" js\nconst el = document getElementById('types');\nassert exists(el);\nYou should have an element with an id of \"hp\" js\nconst el = document getElementById('hp');\nassert exists(el);\nYou should have an element with an id of \"attack\" js\nconst el = document getElementById('attack');\nassert exists(el);\nYou should have an element with an id of \"defense\" js\nconst el = document getElementById('defense');\nassert exists(el);\nYou should have an element with an id of \"special-attack\" js\nconst el = document getElementById('special-attack');\nassert exists(el);\nYou should have an element with an id of \"special-defense\" js\nconst el = document getElementById('special-defense');\nassert exists(el);\nYou should have an element with an id of \"speed\" js\nconst el = document getElementById('speed');\nassert exists(el);\nWhen the #search-input element contains the value Red and the #search-button element is clicked, an alert should appear with the text \"Creature not found\" ```js\nasync () => {\ntry {\nconst searchInput = document getElementById('search-input');\nconst searchButton = document getElementById('search-button');\nlet alertMessage;\nwindow",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 15
  },
  {
    "id": "83c80694eff841918d3a67ba31bbd106",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "element with an id of \"special-defense\" js const el = document getElementById('special-defense'); assert exists(el); You should have an element with an id of \"speed\" js const el = document getElementById('speed'); assert exists(el); When the #search-input element contains the value Red and the #search-button element is clicked, an alert should appear with the text \"Creature not found\" ```js async () => { try { const searchInput = document getElementById('search-input'); const searchButton = document getElementById('search-button'); let alertMessage; windowalert = (message) => alertMessage = message; // Override alert and store message\nsearchInput value = 'Red';\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nconst res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/red'); // Fetch from proxy to simulate network delay\nif ( res ok) {\nawait new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow the alert to trigger\nassert equal(alertMessage trim() replace(/[ , ]+$/g, '') toLowerCase(), 'creature not found');\n} else {\nassert fail();\n}\n} catch (err) {\nthrow new Error(err);\n}\n};\n```\nWhen the #search-input element contains the value Pyrolynx and the #search-button element is clicked, the values in the #creature-name, #creature-id, #weight, #height, #hp, #attack, #defense, #special-attack, #special-defense, and #speed elements should be PYROLYNX, #1 or 1, Weight: 42 or 42, Height: 32 or 32, 65, 80, 50, 90, 55, and 100, respectively ```js\nasync () => {\ntry {\nconst searchInput = document getElementById('search-input');\nconst searchButton = document getElementById('search-button');\nsearchInput value = 'Pyrolynx';\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nconst res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/Pyrolynx'); // Fetch from proxy to simulate network delay\nif (res ok) {\nawait new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\nconst creatureName = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 15
  },
  {
    "id": "5c81061e2ee05468c43533c2968ca1a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "42, Height: 32 or 32, 65, 80, 50, 90, 55, and 100, respectively ```js async () => { try { const searchInput = document getElementById('search-input'); const searchButton = document getElementById('search-button'); searchInput value = 'Pyrolynx'; searchInput dispatchEvent(new Event('change')); searchButton click(); const res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/Pyrolynx'); // Fetch from proxy to simulate network delay if (res ok) { await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update const creatureName = documentgetElementById('creature-name');\nconst creatureID = document getElementById('creature-id');\nconst weight = document getElementById('weight');\nconst height = document getElementById('height');\nconst hp = document getElementById('hp');\nconst attack = document getElementById('attack');\nconst defense = document getElementById('defense');\nconst specialAttack = document getElementById('special-attack');\nconst specialDefense = document getElementById('special-defense');\nconst speed = document getElementById('speed');\nassert strictEqual(creatureName innerText trim() toLowerCase(), 'pyrolynx');\nassert include(['#1', '1'], creatureID innerText trim());\nassert include(['weight: 42', '42'], weight innerText trim() toLowerCase());\nassert include(['height: 32', '32'], height innerText trim() toLowerCase());\nassert strictEqual(hp innerText trim(), '65');\nassert strictEqual(attack innerText trim(), '80');\nassert strictEqual(defense innerText trim(), '50');\nassert strictEqual(specialAttack innerText trim(), '90');\nassert strictEqual(specialDefense innerText trim(), '55');\nassert strictEqual(speed innerText trim(), '100');\n} else {\nassert fail();\n}\n} catch (err) {\nthrow new Error(err);\n}\n};\n```\nWhen the #search-input element contains the value Pyrolynx and the #search-button element is clicked, a single element should be added within the #types element that contains the text FIRE The #types element content should be cleared between searches ```js\nasync () => {\ntry {\nconst searchInput = document getElementById('search-input');\nconst searchButton = document getElementById('search-button');\nsearchInput value = 'Pyrolynx';\nsearchInput dispatchEvent(new Event('change'));\nsearchButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 4,
    "total_chunks": 15
  },
  {
    "id": "f65ff02553b6fd153cd6846a89f3d1f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "assert fail(); } } catch (err) { throw new Error(err); } }; ``` When the #search-input element contains the value Pyrolynx and the #search-button element is clicked, a single element should be added within the #types element that contains the text FIRE The #types element content should be cleared between searches ```js async () => { try { const searchInput = document getElementById('search-input'); const searchButton = document getElementById('search-button'); searchInput value = 'Pyrolynx'; searchInput dispatchEvent(new Event('change')); searchButtonclick();\nconst res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/Pyrolynx'); // Fetch from proxy to simulate network delay\nif (res ok) {\nawait new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\nconst typesEl = document getElementById('types');\nassert lengthOf(typesEl children, 1);\nassert strictEqual(typesEl children[0] innerText trim() toLowerCase(), 'fire');\n} else {\nassert fail();\n}\n} catch (err) {\nthrow new Error(err);\n}\n};\n```\nWhen the #search-input element contains the value 2 and the #search-button element is clicked, the values in the #creature-name, #creature-id, #weight, #height, #hp, #attack, #defense, #special-attack, #special-defense, and #speed elements should be AQUOROC, #2 or 2, Weight: 220 or 220, Height: 53 or 53, 85, 90, 120, 60, 70, and 40, respectively ```js\nasync () => {\ntry {\nconst searchInput = document getElementById('search-input');\nconst searchButton = document getElementById('search-button');\nsearchInput value = '2';\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nconst res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/2'); // Fetch from proxy to simulate network delay\nif (res ok) {\nawait new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\nconst creatureName = document getElementById('creature-name');\nconst creatureID = document getElementById('creature-id');\nconst weight = document getElementById('weight');\nconst height = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 15
  },
  {
    "id": "fa3ed797aa3428ba5f3b3359c2a90cf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "() => { try { const searchInput = document getElementById('search-input'); const searchButton = document getElementById('search-button'); searchInput value = '2'; searchInput dispatchEvent(new Event('change')); searchButton click(); const res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/2'); // Fetch from proxy to simulate network delay if (res ok) { await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update const creatureName = document getElementById('creature-name'); const creatureID = document getElementById('creature-id'); const weight = document getElementById('weight'); const height = documentgetElementById('height');\nconst hp = document getElementById('hp');\nconst attack = document getElementById('attack');\nconst defense = document getElementById('defense');\nconst specialAttack = document getElementById('special-attack');\nconst specialDefense = document getElementById('special-defense');\nconst speed = document getElementById('speed');\nassert strictEqual(creatureName innerText trim() toLowerCase(), 'aquoroc');\nassert include(['#2', '2'], creatureID innerText trim());\nassert include(['weight: 220', '220'], weight innerText trim() toLowerCase());\nassert include(['height: 53', '53'], height innerText trim() toLowerCase());\nassert strictEqual(hp innerText trim(), '85');\nassert strictEqual(attack innerText trim(), '90');\nassert strictEqual(defense innerText trim(), '120');\nassert strictEqual(specialAttack innerText trim(), '60');\nassert strictEqual(specialDefense innerText trim(), '70');\nassert strictEqual(speed innerText trim(), '40');\n} else {\nassert fail();\n}\n} catch (err) {\nthrow new Error(err);\n}\n};\n```\nWhen the #search-input element contains the value 2 and the #search-button element is clicked, two elements should be added within the #types element that contain text values WATER and ROCK, respectively The #types element content should be cleared between searches ```js\nasync () => {\ntry {\nconst searchInput = document getElementById('search-input');\nconst searchButton = document getElementById('search-button');\nsearchInput value = '2';\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nconst res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/2'); // Fetch from proxy to simulate network delay\nif (res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 6,
    "total_chunks": 15
  },
  {
    "id": "7bbaff44555c75e3bc961ba8d844a6ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "2 and the #search-button element is clicked, two elements should be added within the #types element that contain text values WATER and ROCK, respectively The #types element content should be cleared between searches ```js async () => { try { const searchInput = document getElementById('search-input'); const searchButton = document getElementById('search-button'); searchInput value = '2'; searchInput dispatchEvent(new Event('change')); searchButton click(); const res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/2'); // Fetch from proxy to simulate network delay if (resok) {\nawait new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\nconst targetTypes = ['water', 'rock'];\nconst typesEl = document getElementById('types');\nassert lengthOf(typesEl children, 2);\nassert sameMembers(['water', 'rock'], [ typesEl children] map(el => el innerText trim() toLowerCase()));\n} else {\nassert fail();\n}\n} catch (err) {\nthrow new Error(err);\n}\n};\n```\nWhen the #search-input element contains an invalid creature name and the #search-button element is clicked, an alert should appear with the text \"Creature not found\" ```js\nasync () => {\ntry {\nconst searchInput = document getElementById('search-input');\nconst searchButton = document getElementById('search-button');\nlet alertMessage;\nwindow alert = (message) => alertMessage = message; // Override alert and store message\nconst randomInvalidCreatureId = crypto randomUUID() substring(0, 6);\nsearchInput value = randomInvalidCreatureId;\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nconst res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/' + randomInvalidCreatureId); // Fetch from proxy to simulate network delay\nif ( res ok) {\nawait new Promise(resolve => setTimeout(resolve, 2000)); // Additional delay to allow the alert to trigger\nassert equal(alertMessage trim() replace(/[ , ]+$/g, '') toLowerCase(), 'creature not found');\n} else {\nassert fail();\n}\n} catch (err) {\nthrow new Error(err);\n}\n};\n```\nWhen the #search-input element contains a valid creature ID and the #search-button element is clicked, the UI should be filled with the correct data ```js\nasync () => {\ntry {\nconst searchInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 7,
    "total_chunks": 15
  },
  {
    "id": "4a8d2a1c17ff0201060721a63450f418",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "new Promise(resolve => setTimeout(resolve, 2000)); // Additional delay to allow the alert to trigger assert equal(alertMessage trim() replace(/[ , ]+$/g, '') toLowerCase(), 'creature not found'); } else { assert fail(); } } catch (err) { throw new Error(err); } }; ``` When the #search-input element contains a valid creature ID and the #search-button element is clicked, the UI should be filled with the correct data ```js async () => { try { const searchInput = documentgetElementById('search-input');\nconst searchButton = document getElementById('search-button');\nlet alertMessage;\nwindow alert = (message) => alertMessage = message; // Override alert and store message\nconst randomValidCreatureId = String(Math floor(Math random() * 20) + 1);\nsearchInput value = randomValidCreatureId;\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nconst res = await fetch('https://rpg-creature-api freecodecamp rocks/api/creature/' +  randomValidCreatureId); // Fetch from proxy to simulate network delay\nif (res ok) {\nawait new Promise(resolve => setTimeout(resolve, 2000)); // Additional delay to allow UI to update\nconst data = await res json();\nconst typesEl = document getElementById('types');\nconst actualTypes = data types map(typeSlot => typeSlot name);\nassert lengthOf(typesEl children, actualTypes length);\nassert sameMembers(actualTypes, [ typesEl children] map(el => el innerText trim() toLowerCase()));\n} else {\nassert fail();\n}\n} catch (err) {\nthrow new Error(err);\n}\n};\n```\nWhen the search button is clicked, the app should send a fetch request to the correct endpoint for the creature name or ID ```js\nasync () => {\nconst spy = __helpers spyOn(window, 'fetch');\nconst searchInput = document getElementById('search-input');\nconst searchButton = document getElementById('search-button');\nsearchInput value = 'Pyrolynx';\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nawait new Promise((resolve) => setTimeout(resolve, 500));\nsearchInput value = '2';\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nawait new Promise((resolve) => setTimeout(resolve, 500));\n// Test with random valid ID\nconst randomValidCreatureId = String(Math floor(Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 8,
    "total_chunks": 15
  },
  {
    "id": "2ce9f40a32bd55154b8ca4f7c560d48c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "send a fetch request to the correct endpoint for the creature name or ID ```js async () => { const spy = __helpers spyOn(window, 'fetch'); const searchInput = document getElementById('search-input'); const searchButton = document getElementById('search-button'); searchInput value = 'Pyrolynx'; searchInput dispatchEvent(new Event('change')); searchButton click(); await new Promise((resolve) => setTimeout(resolve, 500)); searchInput value = '2'; searchInput dispatchEvent(new Event('change')); searchButton click(); await new Promise((resolve) => setTimeout(resolve, 500)); // Test with random valid ID const randomValidCreatureId = String(Math floor(Mathrandom() * 20) + 1);\nsearchInput value = randomValidCreatureId;\nsearchInput dispatchEvent(new Event('change'));\nsearchButton click();\nawait new Promise((resolve) => setTimeout(resolve, 500));\nconst calls = spy calls map((call) => call[0]);\nassert strictEqual(calls[0] toLowerCase(), 'https://rpg-creature-api freecodecamp rocks/api/creature/pyrolynx');\nassert strictEqual(calls[1], 'https://rpg-creature-api freecodecamp rocks/api/creature/2');\nassert strictEqual(calls[2], https://rpg-creature-api freecodecamp rocks/api/creature/${randomValidCreatureId});\n};\n```\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n```js\n```\n--solutions--\n```html\nCreature Search App\nCreature Search App\nSearch for Creature Name or ID:\nSearch\nBase\nStats\nHP:\nAttack:\nDefense:\nSp Attack:\nSp Defense:\nSpeed:\n```\n```css\n/ CSS reset /\n,\n::before,\n*::after {\nbox-sizing: border-box;\n}\n{\nmargin: 0;\n}\nbody {\nline-height: 1 5;\n}\nimg {\ndisplay: block;\n}\n/ Project styling /\nbody {\nheight: 100vh;\nfont-family: sans-serif;\nbackground-color: #1b1b32;\ncolor: #0a0a23;\nfont-family: Verdana, Geneva, Tahoma, sans-serif;\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 9,
    "total_chunks": 15
  },
  {
    "id": "187bbe26452abee090a0d1618808d446",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "Search for Creature Name or ID: Search Base Stats HP: Attack: Defense: Sp Attack: Sp Defense: Speed: ``` ```css / CSS reset / , ::before, *::after { box-sizing: border-box; } { margin: 0; } body { line-height: 1 5; } img { display: block; } / Project styling / body { height: 100vh; font-family: sans-serif; background-color: #1b1b32; color: #0a0a23; font-family: Verdana, Geneva, Tahoma, sans-serif; } main { display: flex; flex-direction: column; align-items: center; justify-content: center; }freecodecamp-logo {\nheight: 30px;\nmargin: 25px 0;\n}\nh1 {\ncolor: #f5f6f7;\nfont-size: 1 7em;\ntext-align: center;\n} container {\nwidth: 325px;\nmargin: 25px 0;\nbackground-color: #f5f6f7;\nborder: 1px solid #f5f6f7;\nborder-radius: 15px;\nbox-shadow: 10px 10px 0px 0px rgba(223, 220, 220, 0 75);\n} output,\nsearch-form {\ndisplay: flex;\njustify-content: center;\n}\nsearch-form {\nflex-wrap: wrap;\nmargin: 10px 0;\npadding: 5px;\nborder-radius: 8px 8px 0 0;\ngap: 10px;\n}\nlabel {\nalign-self: center;\n}\nsearch-input:focus-visible,\nsearch-button:focus-visible {\noutline: 3px solid #198eee;\n}\nsearch-input {\nheight: 40px;\npadding-left: 10px;\nwidth: 200px;\n}\nsearch-button {\npadding: 14px 0;\nwidth: 80px;\nborder-radius: 20px;\ntext-align: center;\nbackground-color: #7f21ab;\ncolor: #f5f6f7;\nborder: none;\n} output {\nmargin: 10px 0;\npadding: 5px;\nflex-direction: column;\nalign-items: center;\n} top-container, bottom-container {\ndisplay: flex;\nflex-direction: column;\nwidth: 100%;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 10,
    "total_chunks": 15
  },
  {
    "id": "4d697d977a88e02ff269d851c4b3eb9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "wrap; margin: 10px 0; padding: 5px; border-radius: 8px 8px 0 0; gap: 10px; } label { align-self: center; } search-input:focus-visible, search-button:focus-visible { outline: 3px solid #198eee; } search-input { height: 40px; padding-left: 10px; width: 200px; } search-button { padding: 14px 0; width: 80px; border-radius: 20px; text-align: center; background-color: #7f21ab; color: #f5f6f7; border: none; } output { margin: 10px 0; padding: 5px; flex-direction: column; align-items: center; } top-container, bottom-container { display: flex; flex-direction: column; width: 100%; }top-container {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-evenly;\nmargin-bottom: 10px;\npadding: 10px;\nbackground-color: #f0f1f7;\nmin-height: 200px;\n} bottom-container {\nmin-height: 325px;\n} name-and-id {\nheight: 28px;\nfont-size: 1 1em;\ntext-transform: capitalize;\nmargin-bottom: 5px;\n}\ncreature-name,\nspecial-name {\nfont-weight: bold;\n} size,\nspecial-description {\nfont-size: 0 85rem;\n}\ntypes {\nmin-height: 30px;\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: flex-start;\ngap: 5px;\n} type {\nwidth: 66px;\npadding: 5px;\nfont-size: 0 7rem;\ntext-align: center;\nborder-radius: 5px;\nbackground-color: red;\ntext-transform: uppercase;\n}\ntable {\nborder-collapse: collapse;\nborder-spacing: 0;\nwidth: 100%;\nfont-size: 1 rem;\ncolor: #f5f6f7;\nbackground-color: #7f21ab;\n}\nth:nth-child(even),\ntd:nth-child(even) {\nborder-left: 5px solid #f5f6f7;\n}\ntr {\nborder-bottom: 5px solid #f5f6f7;\n}\ntd,\nth {\ntext-align: center;\npadding: 8px;\n}\n/ Special styling for Creature types /",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 11,
    "total_chunks": 15
  },
  {
    "id": "287b58f29363ec22cc66002d65df4f74",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "{ min-height: 30px; display: flex; flex-wrap: wrap; justify-content: flex-start; gap: 5px; } type { width: 66px; padding: 5px; font-size: 0 7rem; text-align: center; border-radius: 5px; background-color: red; text-transform: uppercase; } table { border-collapse: collapse; border-spacing: 0; width: 100%; font-size: 1 rem; color: #f5f6f7; background-color: #7f21ab; } th:nth-child(even), td:nth-child(even) { border-left: 5px solid #f5f6f7; } tr { border-bottom: 5px solid #f5f6f7; } td, th { text-align: center; padding: 8px; } / Special styling for Creature types /normal {\nbackground-color: #b7b7aa;\n} fire {\nbackground-color: #ff6f52;\n} water {\nbackground-color: #42a1ff;\n} electric {\nbackground-color: #fecc33;\n} grass {\nbackground-color: #78cc55;\n} ice {\nbackground-color: #66ccfe;\n} fighting {\nbackground-color: #d3887e;\n} poison {\nbackground-color: #c68bb7;\n} ground {\nbackground-color: #dfba52;\n} flying {\nbackground-color: #8899ff;\n} psychic {\nbackground-color: #ff66a3;\n} bug {\nbackground-color: #aabb23;\n} rock {\nbackground-color: #baaa66;\n} ghost {\nbackground-color: #9995d0;\n} dragon {\nbackground-color: #9e93f1;\n} dark {\nbackground-color: #b59682;\n} steel {\nbackground-color: #abaabb;\n} fairy {\nbackground-color: #ed99ed;\n}\n@media screen and (min-width: 550px) {\nh1 {\nfont-size: 2em;\n} container {\nwidth: 450px;\n}\n#search-form, top-container, bottom-container {\nwidth: 95%;\n} type {\nwidth: 75px;\n}\n}\n```\n```js\nconst creatureID = document getElementById('creature-id');\nconst creatureName = document getElementById('creature-name');\nconst specialName = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 12,
    "total_chunks": 15
  },
  {
    "id": "3ac6f7202d8696a8d8bece7c3185339c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "} rock { background-color: #baaa66; } ghost { background-color: #9995d0; } dragon { background-color: #9e93f1; } dark { background-color: #b59682; } steel { background-color: #abaabb; } fairy { background-color: #ed99ed; } @media screen and (min-width: 550px) { h1 { font-size: 2em; } container { width: 450px; } #search-form, top-container, bottom-container { width: 95%; } type { width: 75px; } } ``` ```js const creatureID = document getElementById('creature-id'); const creatureName = document getElementById('creature-name'); const specialName = documentgetElementById('special-name');\nconst specialDescription = document getElementById('special-description');\nconst types = document getElementById('types');\nconst height = document getElementById('height');\nconst weight = document getElementById('weight');\nconst hp = document getElementById('hp');\nconst attack = document getElementById('attack');\nconst defense = document getElementById('defense');\nconst specialAttack = document getElementById('special-attack');\nconst specialDefense = document getElementById('special-defense');\nconst speed = document getElementById('speed');\nconst searchForm = document getElementById('search-form');\nconst searchInput = document getElementById('search-input');\nconst getCreature = async () => {\ntry {\nconst creatureNameOrId = searchInput value toLowerCase();\nconst response = await fetch(\nhttps://rpg-creature-api freecodecamp rocks/api/creature/${creatureNameOrId}\n);\nconst data = await response json();\n// Set Creature info\ncreatureName textContent = `${data name toUpperCase()}`;\ncreatureID textContent = `#${data id}`;\nweight textContent = `Weight: ${data weight}`;\nheight textContent = `Height: ${data height}`;\nspecialName textContent = data special name;\nspecialDescription textContent = data special description;\n// Set stats\nhp textContent = data stats[0] base_stat;\nattack textContent = data stats[1] base_stat;\ndefense textContent = data stats[2] base_stat;\nspecialAttack textContent = data stats[3] base_stat;\nspecialDefense textContent = data stats[4] base_stat;\nspeed textContent = data stats[5] base_stat;\n// Set types\ntypes innerHTML = data types map(obj => `<span class=\"type ${obj name}\">${obj name}</span>`)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 13,
    "total_chunks": 15
  },
  {
    "id": "fe0dc3f1893e39dd6fc4c918f04822ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
    "source_type": "git_repo",
    "title": "Creature Search App",
    "content": "= `Weight: ${data weight}`; height textContent = `Height: ${data height}`; specialName textContent = data special name; specialDescription textContent = data special description; // Set stats hp textContent = data stats[0] base_stat; attack textContent = data stats[1] base_stat; defense textContent = data stats[2] base_stat; specialAttack textContent = data stats[3] base_stat; specialDefense textContent = data stats[4] base_stat; speed textContent = data stats[5] base_stat; // Set types types innerHTML = data types map(obj => `<span class=\"type ${obj name}\">${obj name}</span>`)join('');\n} catch (err) {\nresetDisplay();\nalert('Creature not found');\nconsole log(Creature not found: ${err});\n}\n};\nconst resetDisplay = () => {\n// reset stats\ncreatureName textContent = '';\ncreatureID textContent = '';\nheight textContent = '';\nweight textContent = '';\ntypes innerHTML = '';\nspecialName innerHTML = '';\nspecialDescription innerHTML = '';\nhp textContent = '';\nattack textContent = '';\ndefense textContent = '';\nspecialAttack textContent = '';\nspecialDefense textContent = '';\nspeed textContent = '';\n};\nsearchForm addEventListener('submit', e => {\ne preventDefault();\ngetCreature();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 26236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-an-rpg-creature-search-app-project\\build-an-rpg-creature-search-app.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 14,
    "total_chunks": 15
  },
  {
    "id": "431c38d3dee9c225e39e49ec23a70bc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507fc6cc29083cc44df2fb.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63507fc6cc29083cc44df2fb\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nThat is as far as you can get with the calculate function for now It is time to write your mean logic Create an empty function called getMean It should take a single parameter array --hints--\nYou should declare a getMean function js\nassert isFunction(getMean);\nYour getMean function should take a single array parameter js\nassert match(getMean toString(), /\\(\\s*array\\s*\\)/);\nYour getMean function should be empty js\nassert match(getMean toString(), /\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3201,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507fc6cc29083cc44df2fb.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9e14eb1ddf6225feccba06569015e21e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507ebb0c50ce3b9d669cd9.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63507ebb0c50ce3b9d669cd9\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nArray methods can often be chained together to perform multiple operations at once As an example:\njs\narray map() filter();\nThe map() method is called on the array, and then the filter() method is called on the result of the map() method This is called method chaining Following that example, remove your filtered variable, and chain your filter() call to your map() call above Do not remove either of the callback functions --hints--\nYou should remove the filtered variable js\nassert notMatch(calculate toString(), /filtered/);\nYou should chain your filter() call to your map() call js\nassert match(calculate toString(), /array\\ map\\( *\\)\\ filter\\(/s);\nYou should not remove the map() callback js\nassert match(calculate toString(), /(array\\ map\\(\\s*(\\(\\s*el\\s*\\)|el)\\s*=>|array\\ map\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+) Number\\(\\s*el\\s*\\)/);\nYou should not remove the filter() callback js\nassert match(calculate toString(), /(\\ filter\\(\\s*(\\(\\s*el\\s*\\)|el)\\s*=>|\\ filter\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{)\\s*(return\\s*) (Number\\ ) isNaN\\(\\s*el\\s*\\)/s);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3868,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507ebb0c50ce3b9d669cd9.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "22f600b275a7ef231484863d05d1213a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507ebb0c50ce3b9d669cd9.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\njs\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el));\nconst filtered = numbers filter(el => isNaN(el));\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3868,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63507ebb0c50ce3b9d669cd9.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "03e4704a29a54f565d5a9d3b526ef805",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350805fe0fe283dd347b0dc.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6350805fe0fe283dd347b0dc\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nThe mean is the average value of all numbers in a list The first step in calculating the mean is to take the sum of all numbers in the list Arrays have another method, called reduce(), which is perfect for this situation The reduce() method takes an array and applies a callback function to condense the array into a single value Declare a sum variable and assign array reduce() to it --hints--\nYour getMean function should have a sum variable js\nassert match(getMean toString(), /sum/);\nYour getMean function should use the reduce() method of the array parameter js\nassert match(getMean toString(), /array\\ reduce\\(\\s*\\)/);\nYou should assign the result of array reduce() to the sum variable js\nassert match(getMean toString(), /sum\\s*=\\s*array\\ reduce\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3560,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350805fe0fe283dd347b0dc.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "157a003463344b69e999b831714a675f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350805fe0fe283dd347b0dc.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); }bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\nconst getMean = (array) => {\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3560,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350805fe0fe283dd347b0dc.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "bd742e520c141d620aecfedac51a8926",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350854411ffb73feb6bb84e.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6350854411ffb73feb6bb84e\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nThe reduce() method takes a second argument that is used as the initial value of the accumulator Without a second argument, the reduce() method uses the first element of the array as the accumulator, which can lead to unexpected results To be safe, it's best to set an initial value Here is an example of setting the initial value to an empty string:\njs\narray reduce((acc, el) => acc + el toLowerCase(), \"\");\nSet the initial value of the accumulator to 0 --hints--\nYour reduce method should have 0 as the initial value js\nassert match(getMean toString(), /(array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+) \\s*acc\\s*\\+\\s*el\\s*; \\s*\\} \\s*,\\s*0\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3529,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350854411ffb73feb6bb84e.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8b0b6cab1f7529d9d8f082860a1efd1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350854411ffb73feb6bb84e.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\nconst getMean = (array) => {\nconst sum = array reduce((acc, el) => acc + el);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3529,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350854411ffb73feb6bb84e.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ab5b61af12764a05dea523cd7ae719e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635080d80b72803e973841da.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 635080d80b72803e973841da\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nLike the other methods, reduce() takes a callback This callback, however, takes at least two parameters The first is the accumulator, and the second is the current element in the array The return value for the callback becomes the value of the accumulator on the next iteration ```js\narray reduce((acc, el) => {\n});\n```\nFor your sum variable, pass a callback to reduce() that takes the accumulator and the current element as parameters The callback should return the sum of the accumulator and the current element --hints--\nYour reduce method should have a callback function which takes an acc and an el parameters js\nassert match(getMean toString(), /(array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)/)\nYour reduce method should return the sum of acc and el js\nassert match(getMean toString(), /(array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+) \\s*acc\\s*\\+\\s*el/)\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635080d80b72803e973841da.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "38ccb02825db42e6d4ac2905a99a4659",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635080d80b72803e973841da.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\nconst getMean = (array) => {\nconst sum = array reduce();\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635080d80b72803e973841da.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "75dde44c3e25b292c358745d45d50de4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508577f69f41409275f877.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63508577f69f41409275f877\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nThe next step in calculating the mean is to divide the sum of numbers by the count of numbers in the list Declare a mean variable and assign it the value of sum divided by the length of array --hints--\nYour getMean function should have a mean variable js\nassert match(getMean toString(), /mean\\s*=/);\nYou should assign the value of sum divided by array length to the mean variable js\nassert match(getMean toString(), /mean\\s*=\\s*sum\\s*\\/\\s*array\\ length/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\nconst getMean = (array) => {\nconst sum = array reduce((acc, el) => acc + el, 0);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508577f69f41409275f877.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ee6463572f5ab761acb015f6e08b851a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508577f69f41409275f877.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js --fcc-editable-region-- const getMean = (array) => { const sum = array reduce((acc, el) => acc + el, 0); } --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = valuesplit(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508577f69f41409275f877.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "23122c216db21d68ab72dfd27eb98adb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350866cce4c6d43bdf607c8.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6350866cce4c6d43bdf607c8\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nNow you need to use your new getMean function In your calculate function, declare a mean variable and assign it the value of getMean(numbers) --hints--\nYour calculate function should have a mean variable js\nassert match(calculate toString(), /mean\\s*=/);\nYour mean variable should be assigned the value of getMean(numbers) js\nassert match(calculate toString(), /mean\\s*=\\s*getMean\\(\\s*numbers\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el =>",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350866cce4c6d43bdf607c8.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "81201451e3a67f32e8e56198f4484c19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350866cce4c6d43bdf607c8.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = value split(/,\\s*/g); const numbers = array map(el => Number(el)) filter(el =>isNaN(el));\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6350866cce4c6d43bdf607c8.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d94fb61f029084e2895d00653b3c5bc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085da54fc2041e0303e75.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 635085da54fc2041e0303e75\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nFinally, you need to return the value of mean --hints--\nYour getMean function should use the return keyword js\nconst functionContents = code split(/const\\s+getMean\\s*=\\s*/) [1] split(/\\}/) [0];\nassert match(functionContents, /return/);\nYour getMean function should return the value of mean js\nconst functionContents = code split(/const\\s+getMean\\s*=\\s*/) [1] split(/\\}/) [0];\nassert match(functionContents, /return\\s+mean/);\nYour return statement should be after the mean variable declaration js\nconst functionContents = code split(/const\\s+getMean\\s*=\\s*/) [1] split(/\\}/) [0];\nassert match(functionContents, /const\\s+mean\\s*=\\s*sum\\s*\\/\\s*array\\ length\\s*; \\s*return\\s+mean/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085da54fc2041e0303e75.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e07c9b2fd6928f71f1064ed24f5f0c45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085da54fc2041e0303e75.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\nconst getMean = (array) => {\nconst sum = array reduce((acc, el) => acc + el, 0);\nconst mean = sum / array length;\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085da54fc2041e0303e75.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9b1f7ec34be4b4b0513dd95f76838556",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085f80bd9b5429faa40c4.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 635085f80bd9b5429faa40c4\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nYou can actually clean this logic up a bit Using the implicit return of an arrow function, you can directly return the value of the reduce() method divided by the length of the array, without having to assign any variables Update your getMean function as described above --hints--\nYou should remove the sum variable declaration js\nassert notMatch(getMean toString(), /sum\\s*=/);\nYou should remove the mean variable declaration js\nassert notMatch(getMean toString(), /mean\\s*=/);\nYou should not change the logic within the reduce method js\nassert match(getMean toString(), /(array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+) \\s*acc\\s*\\+\\s*el\\s*; \\s*\\} \\s*,\\s*0\\s*\\)/)\nYou should divide the result of the reduce method by the length of the array js\nassert match(getMean toString(), /(array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+) \\s*acc\\s*\\+\\s*el\\s*; \\s*\\} \\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\ length/)\nYou should use implicit return syntax to directly return the result of reduce divided by the array length js\nassert match(code, /const\\s+getMean\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>\\s*acc\\s*\\+\\s*el\\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\ length/)\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085f80bd9b5429faa40c4.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c3929951e8271b7cb40521b3e7987c8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085f80bd9b5429faa40c4.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "the reduce method js assert match(getMean toString(), /(array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+) \\s*acc\\s*\\+\\s*el\\s*; \\s*\\} \\s*,\\s*0\\s*\\)/) You should divide the result of the reduce method by the length of the array js assert match(getMean toString(), /(array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+) \\s*acc\\s*\\+\\s*el\\s*; \\s*\\} \\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\ length/) You should use implicit return syntax to directly return the result of reduce divided by the array length js assert match(code, /const\\s+getMean\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*array\\ reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>\\s*acc\\s*\\+\\s*el\\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\ length/) --seed-- --seed-contents-- ```html Statistics Calculator Statistics Calculator Enter a list of comma-separated numbersNumbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085f80bd9b5429faa40c4.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e2e8de191e5f4246e28ee73b3046f0fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085f80bd9b5429faa40c4.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\n--fcc-editable-region--\nconst getMean = (array) => {\nconst sum = array reduce((acc, el) => acc + el, 0);\nconst mean = sum / array length;\nreturn mean;\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635085f80bd9b5429faa40c4.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "661aef99d562a2a27b6ecf6bf8f12538",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508750f040a348a440a0bf.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63508750f040a348a440a0bf\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nTo display the value of mean, your app has a #mean element ready to go Use a querySelector to find that element, and then set its textContent to the value of mean --hints--\nYour calculate function should use a document querySelector() js\nassert lengthOf(calculate toString() match(/document\\ querySelector\\(/g), 2);\nYour querySelector() should target the #mean element js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*('|\")#mean\\1\\s*\\)/);\nYour calculate function should set the #mean element's textContent to the value of mean js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*('|\")#mean\\1\\s*\\)\\s*\\ textContent\\s*=\\s*mean\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3541,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508750f040a348a440a0bf.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "228cc02a7f1c035e8f1811c037570cea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508750f040a348a440a0bf.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => arrayreduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3541,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508750f040a348a440a0bf.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a0487309a6c11890e35c3bb2c3f93931",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635089e3bd3e144f2db4094f.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 635089e3bd3e144f2db4094f\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nIf you test your form with a list of numbers, you should see the mean display on the page However, this only works because freeCodeCamp's iframe has special settings Normally, when a form is submitted, the event triggers a page refresh To resolve this, add return false; after your calculate(); call in the onsubmit attribute --hints--\nYour onsubmit attribute should have a return false; statement js\nassert match(document querySelector(\"form\") getAttribute(\"onsubmit\"), /return\\s+false\\s*; /);\nYour onsubmit attribute should still call calculate() js\nassert match(document querySelector(\"form\") getAttribute(\"onsubmit\"), /calculate\\(\\s*\\)/);\nYou should return false after you call calculate() js\nassert match(document querySelector(\"form\") getAttribute(\"onsubmit\"), /calculate\\(\\s*\\)\\s*; \\s*return\\s+false\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers --fcc-editable-region--\n--fcc-editable-region--\nNumbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3733,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635089e3bd3e144f2db4094f.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "56c44e5bf083ea4a9fd40070231b8aff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635089e3bd3e144f2db4094f.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3733,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635089e3bd3e144f2db4094f.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "43e2ce25fdc9e0328966215f76ed70de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "id: 657bdcb9a322aae1eac38391\ntitle: Build a Telephone Number Validator\nchallengeType: 14\nforumTopicId: 16090\ndashedName: build-a-telephone-number-validator\n--description--\nIn the US, phone numbers can be formatted in many ways Here are some examples of valid formats for US phone numbers:\n1 555-555-5555\n1 (555) 555-5555\n1(555)555-5555\n1 555 555 5555\n5555555555\n555-555-5555\n(555)555-5555\nNote that the area code is required Also, if the country code is provided, you must confirm that the country code is 1 Objective: Build an app that is functionally similar to https://telephone-number-validator freecodecamp rocks User Stories:\nYou should have an input element with an id of \"user-input\" You should have a button element with an id of \"check-btn\" You should have a button element with an id of \"clear-btn\" You should have a div, span or p element with an id of \"results-div\" When you click on the #check-btn element without entering a value into the #user-input element, an alert should appear with the text \"Please provide a phone number\" When you click on the #clear-btn element, the content within the #results-div element should be removed When the #user-input element contains 1 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 555-555-5555\" When the #user-input element contains 1 (555) 555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 (555) 555-5555\" When the #user-input element contains 5555555555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 5555555555\" When the #user-input element contains 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 555-555-5555\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 24
  },
  {
    "id": "25d01cf1a9a0dc53a03a8d96b4c0716f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "number: 1 555-555-5555\" When the #user-input element contains 1 (555) 555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 (555) 555-5555\" When the #user-input element contains 5555555555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 5555555555\" When the #user-input element contains 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 555-555-5555\"When the #user-input element contains (555)555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: (555)555-5555\" When the #user-input element contains 1(555)555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1(555)555-5555\" When the #user-input element contains 555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 555-5555\" When the #user-input element contains 5555555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 5555555\" When the #user-input element contains 1 555)555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 1 555)555-5555\" When the #user-input element contains 1 555 555 5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 555 555 5555\" When the #user-input element contains 1 456 789 4444 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 456 789 4444\" When #user-input contains 123**&",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 24
  },
  {
    "id": "bbcf00b3f392125cefd8ec86b2e360b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "is clicked, the #results-div element should contain the text \"Invalid US number: 1 555)555-5555\" When the #user-input element contains 1 555 555 5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 555 555 5555\" When the #user-input element contains 1 456 789 4444 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 456 789 4444\" When #user-input contains 123**&asdf# and #check-btn is clicked, #results-div should contain the text \"Invalid US number: 123**& asdf#\" When the #user-input element contains 55555555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 55555555\" When the #user-input element contains (6054756961) and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: (6054756961)\" When the #user-input element contains 2 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2 (757) 622-7382\" When the #user-input element contains 0 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 0 (757) 622-7382\" When the #user-input element contains -1 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: -1 (757) 622-7382\" When the #user-input element contains 2 757 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2 757 622-7382\" When the #user-input element contains 10 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 10 (757) 622-7382\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 24
  },
  {
    "id": "4569fea4d34b77a5d2aaa07cae5218ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "-1 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: -1 (757) 622-7382\" When the #user-input element contains 2 757 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2 757 622-7382\" When the #user-input element contains 10 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 10 (757) 622-7382\"When the #user-input element contains 27576227382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 27576227382\" When the #user-input element contains (275)76227382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: (275)76227382\" When the #user-input element contains 2(757)6227382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2(757)6227382\" When the #user-input element contains 2(757)622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2(757)622-7382\" When the #user-input element contains 555)-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 555)-555-5555\" When the #user-input element contains (555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: (555-555-5555\" When #user-input contains (555)5(55 )-5555 and #check-btn is clicked, #results-div should contain the text \"Invalid US number: (555)5(55 )-5555\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 3,
    "total_chunks": 24
  },
  {
    "id": "3886a3718dd12776a97f8b64c6bfb331",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "the #results-div element should contain the text \"Invalid US number: 2(757)622-7382\" When the #user-input element contains 555)-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 555)-555-5555\" When the #user-input element contains (555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: (555-555-5555\" When #user-input contains (555)5(55 )-5555 and #check-btn is clicked, #results-div should contain the text \"Invalid US number: (555)5(55 )-5555\"When the #user-input element contains 55 55-55-555-5 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 55 55-55-555-5\" When the #user-input element contains 11 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 11 555-555-5555\" When the #user-input element contains a valid US number and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: \" followed by the number When the #user-input element contains an invalid US number and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: \" followed by the number Fulfill the user stories and pass all the tests below to complete this project Give it your own personal style Happy Coding --hints--\nYou should have an input element with an id of \"user-input\" js\nconst el = document getElementById('user-input');\nassert strictEqual(el nodeName toLowerCase(), 'input');\nYou should have a button element with an id of \"check-btn\" js\nconst el = document getElementById('check-btn');\nassert strictEqual(el nodeName toLowerCase(), 'button');\nYou should have a button element with an id of \"clear-btn\" js\nconst el = document getElementById('clear-btn');\nassert strictEqual(el nodeName toLowerCase(), 'button');\nYou should have a div, span, or p element with an id of \"results-div\" js\nconst el = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 24
  },
  {
    "id": "c7352584828a8c822d578a4b84994661",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "of \"user-input\" js const el = document getElementById('user-input'); assert strictEqual(el nodeName toLowerCase(), 'input'); You should have a button element with an id of \"check-btn\" js const el = document getElementById('check-btn'); assert strictEqual(el nodeName toLowerCase(), 'button'); You should have a button element with an id of \"clear-btn\" js const el = document getElementById('clear-btn'); assert strictEqual(el nodeName toLowerCase(), 'button'); You should have a div, span, or p element with an id of \"results-div\" js const el = documentgetElementById('results-div');\nassert(['div', 'span', 'p'] includes(el nodeName toLowerCase()));\nWhen you click on the #check-btn element without entering a value into the #user-input element, an alert should appear with the text \"Please provide a phone number\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nassert exists(userInput);\nassert exists(checkBtn);\nlet alertMessage;\nwindow alert = (message) => alertMessage = message; // Override alert and store message\nuserInput value = '';\ncheckBtn click();\nassert strictEqual(alertMessage trim() replace(/[ , ]+$/g, '') toLowerCase(), 'please provide a phone number');\n```\nWhen you click on the #clear-btn element, the content within the #results-div element should be removed ```js\nconst resultsDiv = document getElementById('results-div');\nconst clearBtn = document getElementById('clear-btn');\nassert exists(clearBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = Testing testing 123\nLadies and gentlemen, we are floating in space ;\nclearBtn click();\nassert isEmpty(resultsDiv textContent);\n```\nWhen the #user-input element contains 1 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 555-555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '1 555-555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 5,
    "total_chunks": 24
  },
  {
    "id": "dc577dff4f0118167132beeaf832c7ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "are floating in space ; clearBtn click(); assert isEmpty(resultsDiv textContent); ``` When the #user-input element contains 1 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 555-555-5555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '1 555-555-5555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'valid us number: 1 555-555-5555');\n```\nWhen the #user-input element contains 1 (555) 555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 (555) 555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '1 (555) 555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'valid us number: 1 (555) 555-5555');\n```\nWhen the #user-input element contains 5555555555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 5555555555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '5555555555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 6,
    "total_chunks": 24
  },
  {
    "id": "f61ae4bf5a7756bba4a6b3636ad5fef0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'valid us number: 1 (555) 555-5555'); ``` When the #user-input element contains 5555555555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 5555555555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '5555555555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'valid us number: 5555555555');\n```\nWhen the #user-input element contains 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 555-555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '555-555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'valid us number: 555-555-5555');\n```\nWhen the #user-input element contains (555)555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: (555)555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '(555)555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 7,
    "total_chunks": 24
  },
  {
    "id": "fbb564aeefa55455046b5faa500d4508",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'valid us number: 555-555-5555'); ``` When the #user-input element contains (555)555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: (555)555-5555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '(555)555-5555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'valid us number: (555)555-5555');\n```\nWhen the #user-input element contains 1(555)555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1(555)555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '1(555)555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'valid us number: 1(555)555-5555');\n```\nWhen the #user-input element contains 555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 8,
    "total_chunks": 24
  },
  {
    "id": "8716faaeb936fa6b1a57a44a2fc9f462",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'valid us number: 1(555)555-5555'); ``` When the #user-input element contains 555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 555-5555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '555-5555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'invalid us number: 555-5555');\n```\nWhen the #user-input element contains 5555555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 5555555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '5555555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 5555555');\n```\nWhen the #user-input element contains 1 555)555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 1 555)555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '1 555)555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 9,
    "total_chunks": 24
  },
  {
    "id": "690ddac96ea035730006ab54c1ce92eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 5555555'); ``` When the #user-input element contains 1 555)555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 1 555)555-5555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '1 555)555-5555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'invalid us number: 1 555)555-5555');\n```\nWhen the #user-input element contains 1 555 555 5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 555 555 5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '1 555 555 5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'valid us number: 1 555 555 5555');\n```\nWhen the #user-input element contains 1 456 789 4444 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 456 789 4444\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '1 456 789 4444';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 10,
    "total_chunks": 24
  },
  {
    "id": "3a0769f9a0fbf951e455ea2327ce88b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "1 555 555 5555'); ``` When the #user-input element contains 1 456 789 4444 and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: 1 456 789 4444\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '1 456 789 4444'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'valid us number: 1 456 789 4444');\n```\nWhen #user-input contains 123**& asdf# and #check-btn is clicked, #results-div should contain the text \"Invalid US number: 123**& asdf#\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '123& asdf#';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 123& asdf#');\n```\nWhen the #user-input element contains 55555555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 55555555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '55555555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 55555555');\n```\nWhen the #user-input element contains (6054756961) and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: (6054756961)\" ```js\nconst userInput = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 11,
    "total_chunks": 24
  },
  {
    "id": "1086ee298cfe17752cca1fbc15c91bce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "US number: 55555555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '55555555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 55555555'); ``` When the #user-input element contains (6054756961) and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: (6054756961)\" ```js const userInput = documentgetElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '(6054756961)';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: (6054756961)');\n```\nWhen the #user-input element contains 2 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2 (757) 622-7382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '2 (757) 622-7382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 2 (757) 622-7382');\n```\nWhen the #user-input element contains 0 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 0 (757) 622-7382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 12,
    "total_chunks": 24
  },
  {
    "id": "651e2c5425b8493a4dfc6a61c8a82ef0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '2 (757) 622-7382'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 2 (757) 622-7382'); ``` When the #user-input element contains 0 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 0 (757) 622-7382\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assertexists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '0 (757) 622-7382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 0 (757) 622-7382');\n```\nWhen the #user-input element contains -1 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: -1 (757) 622-7382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '-1 (757) 622-7382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: -1 (757) 622-7382');\n```\nWhen the #user-input element contains 2 757 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2 757 622-7382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 13,
    "total_chunks": 24
  },
  {
    "id": "d7931a0c5c84f4ee22f0b779207a3667",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "innerHTML = ''; userInput value = '-1 (757) 622-7382'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: -1 (757) 622-7382'); ``` When the #user-input element contains 2 757 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2 757 622-7382\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDivinnerHTML = '';\nuserInput value = '2 757 622-7382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 2 757 622-7382');\n```\nWhen the #user-input element contains 10 (757) 622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 10 (757) 622-7382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '10 (757) 622-7382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 10 (757) 622-7382');\n```\nWhen the #user-input element contains 27576227382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 27576227382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '27576227382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 14,
    "total_chunks": 24
  },
  {
    "id": "92d19da937ff5b744c7fcdc735fd9089",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 10 (757) 622-7382'); ``` When the #user-input element contains 27576227382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 27576227382\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '27576227382'; userInput dispatchEvent(new Event('change')); checkBtn click(); assertstrictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 27576227382');\n```\nWhen the #user-input element contains (275)76227382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: (275)76227382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '(275)76227382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: (275)76227382');\n```\nWhen the #user-input element contains 2(757)6227382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2(757)6227382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '2(757)6227382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 15,
    "total_chunks": 24
  },
  {
    "id": "8bd79178f69e10a6efd871d4b514f0c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: (275)76227382'); ``` When the #user-input element contains 2(757)6227382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2(757)6227382\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '2(757)6227382'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'invalid us number: 2(757)6227382');\n```\nWhen the #user-input element contains 2(757)622-7382 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 2(757)622-7382\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '2(757)622-7382';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 2(757)622-7382');\n```\nWhen the #user-input element contains 555)-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 555)-555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '555)-555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 16,
    "total_chunks": 24
  },
  {
    "id": "1e66da280bee5e868c8899ff0317a8c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 2(757)622-7382'); ``` When the #user-input element contains 555)-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 555)-555-5555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '555)-555-5555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'invalid us number: 555)-555-5555');\n```\nWhen the #user-input element contains (555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: (555-555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '(555-555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: (555-555-5555');\n```\nWhen #user-input contains (555)5(55 )-5555 and #check-btn is clicked, #results-div should contain the text \"Invalid US number: (555)5(55 )-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '(555)5(55 )-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: (555)5(55",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 17,
    "total_chunks": 24
  },
  {
    "id": "10e53b46aecd94b63087996e1b0f33f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: (555-555-5555'); ``` When #user-input contains (555)5(55 )-5555 and #check-btn is clicked, #results-div should contain the text \"Invalid US number: (555)5(55 )-5555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '(555)5(55 )-5555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: (555)5(55)-5555');\n```\nWhen the #user-input element contains 55 55-55-555-5 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 55 55-55-555-5\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '55 55-55-555-5';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 55 55-55-555-5');\n```\nWhen the #user-input element contains 11 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 11 555-555-5555\" ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nresultsDiv innerHTML = '';\nuserInput value = '11 555-555-5555';\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(resultsDiv innerText trim()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 18,
    "total_chunks": 24
  },
  {
    "id": "38260719960e5e8721cd1841175f26e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "assert strictEqual(resultsDiv innerText trim() toLowerCase(), 'invalid us number: 55 55-55-555-5'); ``` When the #user-input element contains 11 555-555-5555 and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: 11 555-555-5555\" ```js const userInput = document getElementById('user-input'); const checkBtn = document getElementById('check-btn'); const resultsDiv = document getElementById('results-div'); assert exists(userInput); assert exists(checkBtn); assert exists(resultsDiv); resultsDiv innerHTML = ''; userInput value = '11 555-555-5555'; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(resultsDiv innerText trim()toLowerCase(), 'invalid us number: 11 555-555-5555');\n```\nWhen the #user-input element contains a valid US number and the #check-btn element is clicked, the #results-div element should contain the text \"Valid US number: \" followed by the number ```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nconst validPatterns = [\n'1 XXX-XXX-XXXX',\n'1 (XXX) XXX-XXXX',\n'1(XXX)XXX-XXXX',\n'1 XXX XXX XXXX',\n'XXXXXXXXXX',\n'XXX-XXX-XXXX',\n'(XXX)XXX-XXXX',\n];\nvalidPatterns forEach(pattern => {\nwhile (pattern includes('X')) {\npattern = pattern replace('X',  Math floor(Math random() * 7) + 2); //While this may seem weird at first, it's required for the CI build to pass\n//This is apparently because the solution provided for CI purposes actually checks for valid area and exchange codes }\nresultsDiv innerHTML = '';\nuserInput value = pattern;\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(document getElementById('results-div') innerText trim() toLowerCase(), valid us number: ${pattern});\n});\n```\nWhen the #user-input element contains an invalid US number and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: \" followed by the number",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 19,
    "total_chunks": 24
  },
  {
    "id": "41d4f5980e56753e83cb1d2fff94a573",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "to pass //This is apparently because the solution provided for CI purposes actually checks for valid area and exchange codes } resultsDiv innerHTML = ''; userInput value = pattern; userInput dispatchEvent(new Event('change')); checkBtn click(); assert strictEqual(document getElementById('results-div') innerText trim() toLowerCase(), valid us number: ${pattern}); }); ``` When the #user-input element contains an invalid US number and the #check-btn element is clicked, the #results-div element should contain the text \"Invalid US number: \" followed by the number```js\nconst userInput = document getElementById('user-input');\nconst checkBtn = document getElementById('check-btn');\nconst resultsDiv = document getElementById('results-div');\nassert exists(userInput);\nassert exists(checkBtn);\nassert exists(resultsDiv);\nconst invalidPatterns = [\n'10 XXX-XXX-XXXX',\n'1 (XX)XXX-XXXX',\n'1 (XXX)XXX-XXXX',\n'-1 XXX XXX XXXX',\n'XXXXXXXX',\n'XXX#XXX-XXXX',\n'(XXXXXX-XXXX',\n];\ninvalidPatterns forEach(pattern => {\nwhile (pattern includes('X')) {\npattern = pattern replace('X',  Math floor(Math random() * 10));\n}\nresultsDiv innerHTML = '';\nuserInput value = pattern;\nuserInput dispatchEvent(new Event('change'));\ncheckBtn click();\nassert strictEqual(document getElementById('results-div') innerText trim() toLowerCase(), invalid us number: ${pattern});\n});\n```\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n```js\n```\n--solutions--\n```html\nTelephone Number Validator\nTelephone Number Validator\nEnter a Phone Number:\nCheck\nClear\n```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--phone-colors: #dfdfe2;\n--center-text: center;\n--gray-00: #fff;\n}\nbody {\nbackground-color: #3b3b4f;\nfont-family: Verdana, Geneva, Tahoma, sans-serif;\ncolor: #0a0a23;\n}\nmain {\ndisplay: flex;\nflex-wrap: wrap;\nalign-items: center;\njustify-content: center;\nflex-direction: column;\npadding: 40px 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 20,
    "total_chunks": 24
  },
  {
    "id": "f2b43dfbf267c3d5af99f165eeeb44b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "invalid us number: ${pattern}); }); ``` --seed-- --seed-contents-- ```html ``` ```css ``` ```js ``` --solutions-- ```html Telephone Number Validator Telephone Number Validator Enter a Phone Number: Check Clear ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --phone-colors: #dfdfe2; --center-text: center; --gray-00: #fff; } body { background-color: #3b3b4f; font-family: Verdana, Geneva, Tahoma, sans-serif; color: #0a0a23; } main { display: flex; flex-wrap: wrap; align-items: center; justify-content: center; flex-direction: column; padding: 40px 10px; }freecodecamp-logo {\nwidth: 100%;\nheight: 30px;\nmargin-bottom: 20px;\n}\nh1 {\ncolor: white;\nwidth: 100%;\nmax-width: 480px;\nmargin: 15px 0;\ntext-align: var(--center-text);\n} phone-container {\nposition: relative;\nbackground-color: var(--phone-colors);\nwidth: 250px;\nheight: 460px;\nmargin: 30px auto;\nborder-radius: 15px;\nborder: 15px solid black;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n} phone-background {\nbackground-color: black;\nwidth: 100%;\nheight: 25px;\n} phone-camera {\nbackground-color: var(--phone-colors);\nwidth: 10px;\nheight: 10px;\nborder-radius: 50%;\nmargin: auto;\n}\nlabel {\nmargin: 10px auto 5px;\n}\nuser-input {\ndisplay: block;\nmargin: 10px auto;\npadding: 5px;\nborder: 1px solid black;\nborder-radius: 10px;\ntext-align: var(--center-text);\nwidth: 90%;\nheight: 42px;\nfont-size: 16px;\n} phone-footer {\nbackground-color: black;\nwidth: 100%;\nheight: 40px;\nposition: absolute;\nbottom: 0;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 21,
    "total_chunks": 24
  },
  {
    "id": "c457fc4b5bde2052054fe3e0b1e31fef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "column; align-items: center; } phone-background { background-color: black; width: 100%; height: 25px; } phone-camera { background-color: var(--phone-colors); width: 10px; height: 10px; border-radius: 50%; margin: auto; } label { margin: 10px auto 5px; } user-input { display: block; margin: 10px auto; padding: 5px; border: 1px solid black; border-radius: 10px; text-align: var(--center-text); width: 90%; height: 42px; font-size: 16px; } phone-footer { background-color: black; width: 100%; height: 40px; position: absolute; bottom: 0; display: flex; align-items: center; justify-content: center; }btn-styles {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: #ffffff;\nbackground-image: linear-gradient(#ffffff, #928d86);\nborder-color: #ffffff;\nborder-width: 3px;\n}\nresults-div {\noverflow-y: auto;\nheight: 265px;\nwidth: 100%;\n} results-text {\nfont-size: 1 2rem;\npadding: 5px;\ntext-align: var(--center-text);\nmargin: 10px 0;\n}\n```\n```js\nconst userInput = document getElementById(\"user-input\");\nconst checkBtn = document getElementById(\"check-btn\");\nconst clearBtn = document getElementById(\"clear-btn\");\nconst resultsDiv = document getElementById(\"results-div\");\nconst checkValidNumber = (input) => {\nif (input === \"\") {\nalert(\"Please provide a phone number\");\nreturn;\n}\nconst countryCode = \"^(1\\s ) \";\nconst areaCode = \"(\\([0-9]{3}\\)|[0-9]{3})\";\nconst spacesDashes = \"[\\s\\-] \";\nconst phoneNumber = \"[0-9]{3}[\\s\\-] [0-9]{4}$\";\nconst phoneRegex = new RegExp(\n${countryCode}${areaCode}${spacesDashes}${phoneNumber},\n);\nconst pTag = document createElement(\"p\");\npTag className = \"results-text\";\nphoneRegex test(input) (pTag style color = \"#00471b\")\n: (pTag",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 22,
    "total_chunks": 24
  },
  {
    "id": "afe2c0de00b2728f9db27f3f7e17f7b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
    "source_type": "git_repo",
    "title": "Telephone Number Validator",
    "content": "= document getElementById(\"check-btn\"); const clearBtn = document getElementById(\"clear-btn\"); const resultsDiv = document getElementById(\"results-div\"); const checkValidNumber = (input) => { if (input === \"\") { alert(\"Please provide a phone number\"); return; } const countryCode = \"^(1\\s ) \"; const areaCode = \"(\\([0-9]{3}\\)|[0-9]{3})\"; const spacesDashes = \"[\\s\\-] \"; const phoneNumber = \"[0-9]{3}[\\s\\-] [0-9]{4}$\"; const phoneRegex = new RegExp( ${countryCode}${areaCode}${spacesDashes}${phoneNumber}, ); const pTag = document createElement(\"p\"); pTag className = \"results-text\"; phoneRegex test(input) (pTag style color = \"#00471b\") : (pTagstyle color = \"#4d3800\");\npTag appendChild(\ndocument createTextNode(\n${phoneRegex test(input) \"Valid\" : \"Invalid\"} US number: ${input},\n),\n);\nresultsDiv appendChild(pTag);\n};\ncheckBtn addEventListener(\"click\", () => {\ncheckValidNumber(userInput value);\nuserInput value = \"\";\n});\nuserInput addEventListener(\"keydown\", (e) => {\nif (e key === \"Enter\") {\ncheckValidNumber(userInput value);\nuserInput value = \"\";\n}\n});\nclearBtn addEventListener(\"click\", () => {\nresultsDiv textContent = \"\";\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34592,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\build-a-telephone-number-validator-project\\build-a-telephone-number-validator.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 23,
    "total_chunks": 24
  },
  {
    "id": "3760db7fef353bbe29a648b926628c5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508abbff1c4c5210d68cc5.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63508abbff1c4c5210d68cc5\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nTime to start working on the median calculation The median is the midpoint of a set of numbers Begin with an empty function called getMedian, which should take an array parameter --hints--\nYou should define a getMedian function js\nassert isFunction(getMedian);\nYour getMedian function should take an array parameter js\nassert match(getMedian toString(), /\\(\\s*array\\s*\\)/);\nYour getMedian function should be empty js\nassert match(getMedian toString(), /\\(\\s*array\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508abbff1c4c5210d68cc5.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "47a4ad40b22af1b372ce09c6e2cdc6ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508abbff1c4c5210d68cc5.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; --fcc-editable-region-- --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = valuesplit(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508abbff1c4c5210d68cc5.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1f5b248be1ce1750f60897cab96164ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508bb4afb069534e81f33b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63508bb4afb069534e81f33b\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nThe first step in calculating the median is to ensure the list of numbers is sorted from least to greatest Once again, there is an array method ideal for this – the sort() method Declare a sorted variable and assign array sort() to it --hints--\nYour getMedian function should have a sorted variable js\nassert match(getMedian toString(), /sorted\\s*=/);\nYour getMedian function should assign array sort() to the sorted variable js\nassert match(getMedian toString(), /sorted\\s*=\\s*array\\ sort\\(\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3462,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508bb4afb069534e81f33b.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c893e791fe14f859bd6a9a4abd3a5f36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508bb4afb069534e81f33b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / arraylength;\n--fcc-editable-region--\nconst getMedian = (array) => {\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3462,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508bb4afb069534e81f33b.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "88ebff770423511a21b77a55caf08106",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508c898d753754757bd5e3.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 63508c898d753754757bd5e3\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nBy default, the sort() method converts the elements of an array into strings, then sorts them alphabetically The sort() method mutates the original array This works well for strings, but not so well for numbers For example, 10 comes before 2 when sorted as strings, but 2 comes before 10 when sorted as numbers To fix this, you can pass in a callback function to the sort() method This function takes two arguments, which represent the two elements being compared The function should return a value less than 0 if the first element should come before the second element, a value greater than 0 if the first element should come after the second element, and 0 if the two elements should remain in their current positions To sort your numbers from smallest to largest, pass a callback function that takes parameters a and b, and returns the result of subtracting b from a --hints--\nYour sort method should have a callback function which takes an a and a b parameters js\nassert match(getMedian toString(), /(array\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>|array\\ sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{)/)\nYour sort method should return the result of subtracting b from a js\nassert match(getMedian toString(), /(array\\ sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>|array\\ sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{)\\s*(return\\s+) \\s*a\\s*\\-\\s*b/)\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4348,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508c898d753754757bd5e3.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d6802ebb63f3b8499aec919ef1ae0ee1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508c898d753754757bd5e3.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "a list of comma-separated numbers Numbers: Calculate The mean of a list of numbers is the average, calculated by taking the sum of all numbers and dividing that by the count of numbers Mean: The median of a list of numbers is the number that appears in the middle of the list, when sorted from least to greatest Median: The mode of a list of numbers is the number that appears most often in the listMode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst getMedian = (array) => {\nconst sorted = array sort();\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4348,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\63508c898d753754757bd5e3.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "52d22daa847a2c1c7117072ba71734e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e79d15aae30fac58f48e.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352e79d15aae30fac58f48e\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nLike you did with your getMean function, you need to add your getMedian function to your calculate logic Declare a variable median and assign it the value of getMedian(numbers) Then, query the DOM for the #median element and set the textContent to median --hints--\nYour calculate function should have a median variable js\nassert match(calculate toString(), /median\\s*=/);\nYour median variable should be assigned the value of getMedian(numbers) js\nassert match(calculate toString(), /median\\s*=\\s*getMedian\\(\\s*numbers\\s*\\)/);\nYour calculate function should query the DOM for the #median element and set the textContent to median js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*('|\")#median\\1\\s*\\)\\ textContent\\s*=\\s*median/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e79d15aae30fac58f48e.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "55cc491aee25fdaeb3cf3ecd873b8f56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e79d15aae30fac58f48e.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); }bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n--fcc-editable-region--\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e79d15aae30fac58f48e.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ab9a78fd390949af6c2daa3af2da2d83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635090f47eb6d9563a6fed05.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 635090f47eb6d9563a6fed05\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nNow it is time to apply what you have learned to the getMedian function Inside your getMedian function, check if the length of sorted is even If it is, find the middle two numbers, calculate their mean, and return the result If the length of sorted is odd, return the middle number Make sure to work with the sorted array to find the middle numbers Also if you need help, refer back to the previous few steps to see how to find the median for an array --hints--\nYour getMedian function should use sorted array js\nassert equal(getMedian toString() match(/array/g) length, 2);\nYour getMedian function should return the mean of the middle two numbers if the array length is even js\nassert equal(getMedian([1,2,3,4,5,6]), 3 5);\nassert equal(getMedian([1,2,3,4,5,6,7,8,9,10]), 5 5);\nYour getMedian function should return the middle number if the array length is odd js\nassert equal(getMedian([1,2,3,4,5]), 3);\nassert equal(getMedian([1,2,3,4,5,6,7,8,9]), 5);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635090f47eb6d9563a6fed05.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "57ad53d16aa480d85d0b8da62b0c5a35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635090f47eb6d9563a6fed05.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635090f47eb6d9563a6fed05.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2805694ae731c8a92aa07b3897d6e4e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e80e024e89111600edfb.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352e80e024e89111600edfb\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nYour next calculation is the mode, which is the number that appears most often in the list To get started, declare a getMode function that takes the same array parameter you have been using --hints--\nYou should declare a getMode function js\nassert isFunction(getMode);\nYour getMode function should take a parameter named array js\nassert match(getMode toString(), /\\(\\s*array\\s*\\)/);\nYour getMode function should be empty js\nassert match(getMode toString(), /\\(\\s*array\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e80e024e89111600edfb.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "431572f1c016b1455c8d6c2355d8da8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e80e024e89111600edfb.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = array toSorted((a, b) => a - b); const median = sortedlength % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e80e024e89111600edfb.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "63a9c2830a5d8dc8816300500f9c3f5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e96d2604f813c656750b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352e96d2604f813c656750b\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nTo better understand how the getMode function is going to work, you will need to print out its contents This will allow you to see what is happening as you build out the function But first you will need to return the array so it can be tested properly Inside your getMode function return your array parameter --hints--\nYou should return the array parameter inside the getMode function js\nassert match(getMode toString(), /return\\s+array\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = array => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e96d2604f813c656750b.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bf35c0ab5de52065f03350ab2c45970a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e96d2604f813c656750b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = array => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = array toSorted((a, b) => a - b); const median = sorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sortedlength / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = array => {\nconst counts = {};\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst calculate = () => {\nconst value = document querySelector('#numbers') value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector('#mean') textContent = mean;\ndocument querySelector('#median') textContent = median;\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e96d2604f813c656750b.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fccec041b584c1274a7dece383cbaa6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e93db104661305c5f658.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352e93db104661305c5f658\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nTo calculate the occurrence you can use the following approach:\njs\nconst numbersArr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4];\nconst counts = {};\nnumbersArr forEach((el) => {\nif (counts[el]) {\ncounts[el] += 1;\n} else {\ncounts[el] = 1;\n}\n});\nCheck if the current number is already in the counts object If it is, increment it by 1 If it is not, set it to 1 Resulting object The keys are the numbers from the array and the values are the number of times each number appears in the list:\njs\n{ 1: 3, 2: 3, 3: 3, 4: 3, 5: 2 }\nFor this step, start by declaring an empty counts object Later on in the project, you will use this object to calculate the mode of the list of numbers --hints--\nYour getMode function should have a counts variable js\nassert match(getMode toString(), /counts\\s*=/);\nYour counts variable should be an empty object js\nassert match(getMode toString(), /counts\\s*=\\s*\\{\\s*\\}\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e93db104661305c5f658.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ad0cc2f74fa0c405c1948109424b88cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e93db104661305c5f658.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352e93db104661305c5f658.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f73166e917501d0158b6efc86d10a030",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ebd3ab962c168a122e85.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352ebd3ab962c168a122e85\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nNow you need to find the value that occurs with the highest frequency You'll use the Object keys() method for this Start by declaring a highest variable, and assigning it the value of the counts object's Object keys() method --hints--\nYour getMode function should have a highest variable js\nassert match(getMode toString(), /highest\\s*=/);\nYour getMode function should use the Object keys() method to get the keys of the counts object js\nassert match(getMode toString(), /Object\\ keys\\(\\s*counts\\s*\\)/);\nYour getMode function should use the Object keys() method to get the keys of the counts object and assign them to the highest variable js\nassert match(getMode toString(), /highest\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4222,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ebd3ab962c168a122e85.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3c012d65b8a8bb6668e66cf14a904061",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ebd3ab962c168a122e85.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); }bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4222,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ebd3ab962c168a122e85.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8b54b2b288c0fb35137ad661db7c7af7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ecef9f045519063da9b3.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352ecef9f045519063da9b3\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nIf multiple numbers in a series occur at the same highest frequency, they are all considered the mode Otherwise, the mode is the number that occurs most often, that single number is the mode Thankfully, you can handle both of these cases at once with the filter() method Start by declaring a mode variable and assigning it the value of Object keys(counts) --hints--\nYour getMode function should have a mode variable js\nassert match(getMode toString(), /mode\\s*=/);\nYour getMode function should use the Object keys() method to get the keys of the counts object and assign them to the mode variable js\nassert match(getMode toString(), /mode\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4250,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ecef9f045519063da9b3.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f811f2abaa04111b030c6e364b4364fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ecef9f045519063da9b3.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => arrayreduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4250,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ecef9f045519063da9b3.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "96c13837879fd2cb4595b94fb456e558",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ea3a5b79e614ee2282fd.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352ea3a5b79e614ee2282fd\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nThere are a few edge cases to account for when calculating the mode of a dataset First, if every value appears the same number of times, there is no mode To calculate this, you will use a Set A Set is a data structure that only allows unique values If you pass an array into the Set constructor, it will remove any duplicate values Start by creating an if statement In the condition, create a Set with new Set() and pass it the Object values() of your counts object If the size property of this Set is equal to 1, that tells you every value appears the same number of times In this case, return null from your function --hints--\nYour getMode function should have an if statement js\nconst functionContents = code split(/const\\s+getMode\\s*=\\s*/) [1] split(/[^{]\\}[^;)]/) [0];\nassert match(functionContents, /if\\s*\\(/);\nYour if statement should create a new Set and pass the Object values() of your counts object js\nassert match(getMode toString(), /if\\s*\\(\\s*new\\s+Set\\s*\\(\\s*Object\\ values\\s*\\(\\s*counts\\s*\\)/);\nYour if statement should check if the size property of the new Set is equal to 1 js\nassert match(getMode toString(), /if\\s*\\(\\s*new\\s+Set\\s*\\(\\s*Object\\ values\\s*\\(\\s*counts\\s*\\)\\s*\\)\\s*\\ size\\s*===\\s*1/);\nYour if statement should return null if the size property of the new Set is equal to 1 js\nassert match(getMode toString(), /if\\s*\\(\\s*new\\s+Set\\s*\\(\\s*Object\\ values\\s*\\(\\s*counts\\s*\\)\\s*\\)\\ size\\s*===\\s*1\\s*\\)\\s*\\{ \\s*return\\s+null\\s*; \\s*\\} /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ea3a5b79e614ee2282fd.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "242b3c89e8d89577582c9850f88a2951",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ea3a5b79e614ee2282fd.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "js assert match(getMode toString(), /if\\s*\\(\\s*new\\s+Set\\s*\\(\\s*Object\\ values\\s*\\(\\s*counts\\s*\\)\\s*\\)\\s*\\ size\\s*===\\s*1/); Your if statement should return null if the size property of the new Set is equal to 1 js assert match(getMode toString(), /if\\s*\\(\\s*new\\s+Set\\s*\\(\\s*Object\\ values\\s*\\(\\s*counts\\s*\\)\\s*\\)\\ size\\s*===\\s*1\\s*\\)\\s*\\{ \\s*return\\s+null\\s*; \\s*\\} /); --seed-- --seed-contents-- ```html Statistics Calculator Statistics Calculator Enter a list of comma-separated numbers Numbers: Calculate The mean of a list of numbers is the average, calculated by taking the sum of all numbers and dividing that by the count of numbersMean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ea3a5b79e614ee2282fd.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7f73af82e00f2d38854eb9f25167204d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ea3a5b79e614ee2282fd.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = array toSorted((a, b) => a - b); const median = sorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sortedlength / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach(el => counts[el] = counts[el] counts[el] + 1 : 1);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ea3a5b79e614ee2282fd.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "151a1d7e22c30c615e0ace22e02815af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ec8b9c70fd17b8c7ba3f.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352ec8b9c70fd17b8c7ba3f\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nNow you need to sort the values properly Chain the sort() method to your Object keys() call For the callback, you'll need to use the counts object to compare the values of each key You can use the a and b parameters to access the keys Then, return the value of counts[b] minus the value of counts[a] Finally, access the first element in the array using bracket notation to complete your highest variable --hints--\nYour getMode function should use the sort method to sort the Object keys() array js\nassert match(getMode toString(), /highest\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ sort\\(/)\nYour getMode function should pass a callback to the sort method with parameters a and b js\nassert match(getMode toString(), /highest\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)/)\nYour getMode function should use the sort method to sort the Object keys() array and return the value of counts[b] minus the value of counts[a] js\nassert match(getMode toString(), /highest\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{\\s*return\\s+counts\\s*\\[\\s*b\\s*\\]\\s*-\\s*counts\\s*\\[\\s*a\\s*\\]\\s*; \\s*\\}\\s*\\)/)\nYour highest variable should have the value of the first entry in the sorted Object keys(counts) array js\nassert match(getMode toString(), /highest\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{\\s*return\\s+counts\\s*\\[\\s*b\\s*\\]\\s*-\\s*counts\\s*\\[\\s*a\\s*\\]\\s*; \\s*\\}\\s*\\)\\s*\\[\\s*0\\s*\\]\\s*;/)\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5037,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ec8b9c70fd17b8c7ba3f.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "de8264fc2e3b64814319f95236436f3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ec8b9c70fd17b8c7ba3f.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "match(getMode toString(), /highest\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)/) Your getMode function should use the sort method to sort the Object keys() array and return the value of counts[b] minus the value of counts[a] js assert match(getMode toString(), /highest\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{\\s*return\\s+counts\\s*\\[\\s*b\\s*\\]\\s*-\\s*counts\\s*\\[\\s*a\\s*\\]\\s*; \\s*\\}\\s*\\)/) Your highest variable should have the value of the first entry in the sorted Object keys(counts) array js assert match(getMode toString(), /highest\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{\\s*return\\s+counts\\s*\\[\\s*b\\s*\\]\\s*-\\s*counts\\s*\\[\\s*a\\s*\\]\\s*; \\s*\\}\\s*\\)\\s*\\[\\s*0\\s*\\]\\s*;/) --seed-- --seed-contents-- ```html Statistics Calculator Statistics Calculator Enter a list of comma-separated numbersNumbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5037,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ec8b9c70fd17b8c7ba3f.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3771084e8e1bb1e1f90149c3a1c56450",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ec8b9c70fd17b8c7ba3f.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5037,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ec8b9c70fd17b8c7ba3f.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9c267cf3cc3473718d816a4679c4c910",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352edee8a4de01ad693f0e4.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352edee8a4de01ad693f0e4\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nNow chain the filter method to your latest Object keys() call The callback function should return whether the value of counts[el] is equal to your counts[highest] --hints--\nYou should chain filter() to your last Object keys() call js\nassert match(getMode toString(), /mode\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ filter\\(/);\nYour filter() method should take a callback function with a parameter el js\nassert match(getMode toString(), /mode\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ filter\\(\\s*function\\s*\\(\\s*el\\s*\\)/);\nYour filter() method should return whether the value of counts[el] is equal to counts[highest] js\nassert match(getMode toString(), /mode\\s*=\\s*Object\\ keys\\(\\s*counts\\s*\\)\\ filter\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{\\s*return\\s+counts\\s*\\[\\s*el\\s*\\]\\s*===\\s*counts\\s*\\[\\s*highest\\s*\\]\\s*;\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4422,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352edee8a4de01ad693f0e4.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4c8830301e07ab11c0c94c80617b1082",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352edee8a4de01ad693f0e4.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4422,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352edee8a4de01ad693f0e4.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a6f33db45e704330bbef9a59aaa13c19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ee566a59d31d24bde74b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352ee566a59d31d24bde74b\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nTime to return your mode variable mode is an array, so return it as a string with the join() method Separate the elements with a comma followed by a space --hints--\nYour getMode function should return the mode variable js\nassert match(getMode toString(), /return\\s+mode\\s*/)\nYour mode variable should be returned as a string with the join method js\nassert match(getMode toString(), /return\\s+mode\\ join\\(/)\nYou should separate the elements of the mode array with a comma and a space js\nassert match(getMode toString(), /return\\s+mode\\ join\\(\\s*('|\"),\\s\\1\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ee566a59d31d24bde74b.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ffd3fb8f4dcee298f4d4681b3b4fe169",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ee566a59d31d24bde74b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / arraylength;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ee566a59d31d24bde74b.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "002c3d98421d9ff910cadf731ca2c0fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f09b1e53a420e7873344.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352f09b1e53a420e7873344\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nAdd your getMode() function to your calculate logic, and update the respective HTML element --hints--\nYour calculate function should have a mode variable with the value of getMode(numbers) js\nassert match(calculate toString(), /mode\\s*=\\s*getMode\\(\\s*numbers\\s*\\)\\s*; /);\nYour calculate function should query the DOM for the #mode element and set the textContent to mode js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*('|\")#mode\\1\\s*\\)\\ textContent\\s*=\\s*mode\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f09b1e53a420e7873344.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fa5b04d9b7bdcfa51ce289bff086e7cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f09b1e53a420e7873344.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = arraytoSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n--fcc-editable-region--\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f09b1e53a420e7873344.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4baa281a6f5a25791454ad827e25dcd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2526dccb523150b64fb.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352f2526dccb523150b64fb\ntitle: Step 46\nchallengeType: 0\ndashedName: step-46\n--description--\nAdd the logic for calculating and displaying the range to your calculate function --hints--\nYour calculate function should set a range variable to the result of getRange(numbers) js\nassert match(calculate toString(), /range\\s*=\\s*getRange\\(\\s*numbers\\s*\\)\\s*; /);\nYour calculate function should set the #range element's textContent to the range variable js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*('|\")#range\\1\\s*\\)\\ textContent\\s*=\\s*range\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2526dccb523150b64fb.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "92b3945eab85460ab40a8838843646f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2526dccb523150b64fb.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = array toSorted((a, b) => a - b); const median = sortedlength % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n--fcc-editable-region--\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2526dccb523150b64fb.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3038442b4237a33cda7a7afdafb9d696",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f179bdca23221298a5ba.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352f179bdca23221298a5ba\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nYour next calculation is the range, which is the difference between the largest and smallest numbers in the list You previously learned about the global Math object Math has a min() method to get the smallest number from a series of numbers, and the max() method to get the largest number Here's an example that gets the smallest number from an array:\n```js\nconst numbersArr = [2, 3, 1];\nconsole log(Math min( numbersArr));\n// Expected output: 1\n```\nDeclare a getRange function that takes the same array parameter you have been using Using Math min(), Math max(), and the spread operator, return the difference between the largest and smallest numbers in the list --hints--\nYou should define a getRange function js\nassert isFunction(getRange);\nYour getRange function should take an array parameter js\nassert match(getRange toString(), /array/);\nYour getRange function should use the spread operator on the array parameter js\nassert match(code split(\"getRange\")[1], /\\ \\ \\ array/);\nYour getRange function should use Math max on the spread array parameter js\nassert match(code split(\"getRange\")[1], /Math\\ max\\(\\s*\\ \\ \\ array\\s*\\)/);\nYour getRange function should use Math min on the spread array parameter js\nassert match(code split(\"getRange\")[1], /Math\\ min\\(\\s*\\ \\ \\ array\\s*\\)/);\nYour getRange function should return the difference between the largest and smallest numbers in the list js\nassert equal(getRange([1, 2, 3, 4, 5]), 4);\nassert equal(getRange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 9);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f179bdca23221298a5ba.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b37deb7d2ac15b9c4d269b8b4d5a0733",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f179bdca23221298a5ba.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "2, 3, 4, 5, 6, 7, 8, 9, 10]), 9); --seed-- --seed-contents-- ```html Statistics Calculator Statistics Calculator Enter a list of comma-separated numbers Numbers: Calculate The mean of a list of numbers is the average, calculated by taking the sum of all numbers and dividing that by the count of numbers Mean: The median of a list of numbers is the number that appears in the middle of the list, when sorted from least to greatestMedian:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f179bdca23221298a5ba.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "fe72e7a1f45e06aedabb5dd09b057544",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f179bdca23221298a5ba.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "= sorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]]) : sorted[Math floor(sorted length / 2)]; return median; } const getMode = (array) => { const counts = {}; array forEach((el) => { counts[el] = (counts[el] || 0) + 1; }) if (new Set(Object values(counts)) size === 1) { return null; } const highest = Object keys(counts) sort( (a, b) => counts[b] - counts[a] )[0]; const mode = Objectkeys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f179bdca23221298a5ba.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "dc4928aa8479316dd81d99f3d0bd17d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2a24eb71b24284ca2b6.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352f2a24eb71b24284ca2b6\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nThe variance of a series represents how much the data deviates from the mean, and can be used to determine how spread out the data are The variance is calculated in a few steps Start by declaring a getVariance function that takes an array parameter Within that function, declare a mean variable and assign it the value of the getMean function, passing array as the argument --hints--\nYou should define a getVariance function js\nassert isFunction(getVariance);\nYour getVariance function should take an array parameter js\nassert match(getVariance toString(), /array/);\nYour getVariance function should declare a mean variable js\nassert match(getVariance toString(), /mean\\s*=/);\nYour mean variable should be assigned the value of the getMean function, passing the array argument js\nassert match(getVariance toString(), /mean\\s*=\\s*getMean\\(\\s*array\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2a24eb71b24284ca2b6.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f3e738d732084b8f5cd130d7ed84a9be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2a24eb71b24284ca2b6.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el =>",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2a24eb71b24284ca2b6.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7fe8b2776544e526cf4926cc311cb68e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2a24eb71b24284ca2b6.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "return null; } const highest = Object keys(counts) sort( (a, b) => counts[b] - counts[a] )[0]; const mode = Object keys(counts) filter( (el) => counts[el] === counts[highest] ); return mode join(\", \"); } const getRange = (array) => { return Math max( array) - Math min( array); } --fcc-editable-region-- --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = value split(/,\\s*/g); const numbers = array map(el => Number(el)) filter(el =>isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352f2a24eb71b24284ca2b6.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7fe1295973229873a8d75bf29f449e53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fcb156834128001ea945.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352fcb156834128001ea945\ntitle: Step 50\nchallengeType: 0\ndashedName: step-50\n--description--\nNext, you need to take the sum of the squared differences Declare a sumSquaredDifferences variable, and assign it the value of squaredDifferences reduce() For the callback, return the sum of acc and el Remember to set the initial value to 0 --hints--\nYou should have a sumSquaredDifferences variable js\nassert match(getVariance toString(), /sumSquaredDifferences\\s*=/);\nYour sumSquaredDifferences variable should use the squaredDifferences reduce() method js\nassert match(getVariance toString(), /sumSquaredDifferences\\s*=\\s*squaredDifferences\\ reduce\\(/);\nYour sumSquaredDifferences variable should use the acc and el parameters in the callback function js\nassert match(getVariance toString(), /sumSquaredDifferences\\s*=\\s*squaredDifferences\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)/);\nYour reduce callback should return the sum of acc and el js\nassert match(getVariance toString(), /sumSquaredDifferences\\s*=\\s*squaredDifferences\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*return\\s*acc\\s*\\+\\s*el\\s*;\\s*\\}/);\nYou are missing the starting value of the reduce js\nassert match(getVariance toString(), /sumSquaredDifferences\\s*=\\s*squaredDifferences\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*return\\s*acc\\s*\\+\\s*el\\s*;\\s*\\}\\s*,\\s*0\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fcb156834128001ea945.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c2560d5b433d6f17b65cfadf05d1c390",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fcb156834128001ea945.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "a list of comma-separated numbers Numbers: Calculate The mean of a list of numbers is the average, calculated by taking the sum of all numbers and dividing that by the count of numbers Mean: The median of a list of numbers is the number that appears in the middle of the list, when sorted from least to greatest Median: The mode of a list of numbers is the number that appears most often in the listMode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fcb156834128001ea945.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e9ca941011d46c2ea59c4a9673ad95e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fcb156834128001ea945.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "const getMode = (array) => { const counts = {}; array forEach((el) => { counts[el] = (counts[el] || 0) + 1; }) if (new Set(Object values(counts)) size === 1) { return null; } const highest = Object keys(counts) sort( (a, b) => counts[b] - counts[a] )[0]; const mode = Object keys(counts) filter( (el) => counts[el] === counts[highest] ); return mode join(\", \"); } const getRange = (array) => { return Math max( array) - Math min(array);\n}\n--fcc-editable-region--\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst differences = array map(\nel => el - mean\n);\nconst squaredDifferences = differences map(\nel => el ** 2\n);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fcb156834128001ea945.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1ebde5eaeb2b295d1d8a64540aadce77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352faf71a9db52631864634.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352faf71a9db52631864634\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nThe next step is to calculate how far each element is from the mean Declare a differences variable, and assign it the value of array map() For the callback, return the value of el minus mean --hints--\nYour getVariance function should have a differences variable js\nassert match(getVariance toString(), /differences\\s*=/);\nYour differences variable should use the array map() method js\nassert match(getVariance toString(), /differences\\s*=\\s*array\\ map\\(/);\nYour differences variable should use the el parameter in the callback function js\nassert match(getVariance toString(), /differences\\s*=\\s*array\\ map\\(\\s*function\\s*\\(\\s*el\\s*\\)/);\nYour map callback should return the value of el minus mean js\nassert match(getVariance toString(), /differences\\s*=\\s*array\\ map\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{\\s*return\\s+el\\s*-\\s*mean\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352faf71a9db52631864634.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "71e4cb65d25094afdebed34a617cc32e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352faf71a9db52631864634.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\n--fcc-editable-region--\nconst getVariance = (array) => {\nconst mean = getMean(array);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352faf71a9db52631864634.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9c1671d1ba314df5dcc774bb3845fab6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352faf71a9db52631864634.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "Object keys(counts) sort( (a, b) => counts[b] - counts[a] )[0]; const mode = Object keys(counts) filter( (el) => counts[el] === counts[highest] ); return mode join(\", \"); } const getRange = (array) => { return Math max( array) - Math min( array); } --fcc-editable-region-- const getVariance = (array) => { const mean = getMean(array); } --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = value split(/,\\s*/g); const numbers = arraymap(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352faf71a9db52631864634.md",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "84c453f12b2812a913fb4ffb9193d87b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fbb93a91a8272f838d42.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352fbb93a91a8272f838d42\ntitle: Step 49\nchallengeType: 0\ndashedName: step-49\n--description--\nThe next step is to square each of the differences To square a value, you can use the ** operator For example, 3 ** 2 would return 9 Declare a squaredDifferences variable, and assign it the value of differences map() For the callback, return the value of el squared --hints--\nYou should have a squaredDifferences variable js\nassert match(getVariance toString(), /squaredDifferences\\s*=/);\nYour squaredDifferences variable should use the differences map() method js\nassert match(getVariance toString(), /squaredDifferences\\s*=\\s*differences\\ map\\(/);\nYour squaredDifferences variable should use the el parameter in the callback function js\nassert match(getVariance toString(), /squaredDifferences\\s*=\\s*differences\\ map\\(\\s*function\\s*\\(\\s*el\\s*\\)/);\nYour map callback should return the value of el squared js\nassert match(getVariance toString(), /squaredDifferences\\s*=\\s*differences\\ map\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{\\s*return\\s+Math\\ pow\\(\\s*el\\s*,\\s*2\\s*\\)\\s*; \\s*\\}/);\nYour map callback should use the ** operator js\nassert match(code split(\"getVariance\")[1], /el\\s*\\*\\*\\s*2/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fbb93a91a8272f838d42.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "56989b94256f6108595339ee3642763d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fbb93a91a8272f838d42.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\n--fcc-editable-region--\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst differences = array map(\nel => el - mean\n);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fbb93a91a8272f838d42.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b27c8de370922aa37943f96d0a1761f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fbb93a91a8272f838d42.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "counts[b] - counts[a] )[0]; const mode = Object keys(counts) filter( (el) => counts[el] === counts[highest] ); return mode join(\", \"); } const getRange = (array) => { return Math max( array) - Math min( array); } --fcc-editable-region-- const getVariance = (array) => { const mean = getMean(array); const differences = array map( el => el - mean ); } --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = valuesplit(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fbb93a91a8272f838d42.md",
      "source_type": "git_repo"
    },
    "token_count": 222,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2a7f5bf44297a49354236f51d38d7bca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fce75b2d3b2924930f1e.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352fce75b2d3b2924930f1e\ntitle: Step 51\nchallengeType: 0\ndashedName: step-51\n--description--\nWith two map() calls and a reduce() call, you're creating extra arrays and iterating more times than needed You should move all of the logic into the reduce() call to save time and memory Remove the differences, squaredDifferences, and sumSquaredDifferences variables (and their values) Declare a variance variable, and assign it the value of array reduce() For the callback, pass in your standard acc and el parameters, but leave the function body empty for now Don't forget to set the initial value to 0 --hints--\nYou should remove the differences variable js\nassert notMatch(getVariance toString(), /differences\\s*=/);\nYou should remove the squaredDifferences variable js\nassert notMatch(getVariance toString(), /squaredDifferences\\s*=/);\nYou should remove the sumSquaredDifferences variable js\nassert notMatch(getVariance toString(), /sumSquaredDifferences\\s*=/);\nYou should have a variance variable js\nassert match(getVariance toString(), /variance\\s*=/);\nYour variance variable should use the array reduce() method js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(/);\nYour variance variable should use the acc and el parameters in the callback function js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)/);\nYour reduce callback should be an empty function js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*\\}/);\nYour reduce callback should have an initial value of 0 js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*\\}\\s*,\\s*0\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fce75b2d3b2924930f1e.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "82881a8dc21e0f99a7ec67ce4d0d359b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fce75b2d3b2924930f1e.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "variable should use the array reduce() method js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(/); Your variance variable should use the acc and el parameters in the callback function js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)/); Your reduce callback should be an empty function js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*\\}/); Your reduce callback should have an initial value of 0 js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*\\}\\s*,\\s*0\\s*\\)/); --seed-- --seed-contents-- ```html Statistics Calculator Statistics Calculator Enter a list of comma-separated numbersNumbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fce75b2d3b2924930f1e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2bc7af126b8ca787b6ead7fa7f967183",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fce75b2d3b2924930f1e.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => arrayreduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\n--fcc-editable-region--\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst differences = array map(\nel => el - mean\n);\nconst squaredDifferences = differences map(\nel => el ** 2\n);\nconst sumSquaredDifferences = squaredDifferences reduce(\n(acc, el) => acc + el, 0\n);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el =>",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fce75b2d3b2924930f1e.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6df2ea04eab5783817149cb127f72d5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fce75b2d3b2924930f1e.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "array); } --fcc-editable-region-- const getVariance = (array) => { const mean = getMean(array); const differences = array map( el => el - mean ); const squaredDifferences = differences map( el => el ** 2 ); const sumSquaredDifferences = squaredDifferences reduce( (acc, el) => acc + el, 0 ); } --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = value split(/,\\s*/g); const numbers = array map(el => Number(el)) filter(el =>isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fce75b2d3b2924930f1e.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d621adf60a4ed6534c11e2745117e059",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ff27e0e51b2c7dce0010.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352ff27e0e51b2c7dce0010\ntitle: Step 54\nchallengeType: 0\ndashedName: step-54\n--description--\nAdd your new getVariance function to the calculate function, and update the respective HTML element --hints--\nYour calculate function should have a variance variable set to the value of getVariance(numbers) js\nassert match(calculate toString(), /variance\\s*=\\s*getVariance\\(\\s*numbers\\s*\\)/);\nYou should set the textContent of the #variance element to the value of the variance variable js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*('|\")#variance\\1\\s*\\)\\ textContent\\s*=\\s*variance/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4705,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ff27e0e51b2c7dce0010.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "30d67f54d8d899d1a3f85eb3b3a43081",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ff27e0e51b2c7dce0010.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = arraytoSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array reduce((acc, el) => {\nconst difference = el - mean;\nconst squared = difference ** 2;\nreturn acc + squared;\n}, 0) / array length;\nreturn variance;\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\n--fcc-editable-region--\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4705,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ff27e0e51b2c7dce0010.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "66f45a79abbb45bfdc0aaae2af76090d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ff27e0e51b2c7dce0010.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "el - mean; const squared = difference ** 2; return acc + squared; }, 0) / array length; return variance; } const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = value split(/,\\s*/g); const numbers = array map(el => Number(el)) filter(el => isNaN(el)); --fcc-editable-region-- const mean = getMean(numbers); const median = getMedian(numbers); const mode = getMode(numbers); const range = getRange(numbers); document querySelector(\"#mean\") textContent = mean; document querySelector(\"#median\") textContent = median; documentquerySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\n--fcc-editable-region--\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4705,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ff27e0e51b2c7dce0010.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "10ca26d6ac338ce41c0a0897433be7bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fed209792d2b89e92ea1.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352fed209792d2b89e92ea1\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nThe final step in calculating the variance is to divide the sum of the squared differences by the count of numbers Divide your reduce() call by the length of the array (in your variance declaration) Then, return variance --hints--\nYou should divide the result of the reduce() call by the length of the array js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; \\s*return\\s+acc\\s*\\+\\s*squared\\s*;\\s*\\}\\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\ length\\s*; /);\nYou should return the value of variance js\nassert match(getVariance toString(), /return\\s+variance\\s*;/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4875,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fed209792d2b89e92ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "359c54e16624815c443ba3207668f917",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fed209792d2b89e92ea1.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\n--fcc-editable-region--\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4875,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fed209792d2b89e92ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "02392b70e2f0b89c33fd790dadfc3171",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fed209792d2b89e92ea1.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "|| 0) + 1; }) if (new Set(Object values(counts)) size === 1) { return null; } const highest = Object keys(counts) sort( (a, b) => counts[b] - counts[a] )[0]; const mode = Object keys(counts) filter( (el) => counts[el] === counts[highest] ); return mode join(\", \"); } const getRange = (array) => { return Math max( array) - Math min( array); } --fcc-editable-region-- const getVariance = (array) => { const mean = getMean(array); const variance = arrayreduce((acc, el) => {\nconst difference = el - mean;\nconst squared = difference ** 2;\nreturn acc + squared;\n}, 0);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4875,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fed209792d2b89e92ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "229ad96801a2e9799246573a7fc61357",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ffe4cfafa72d595a0007.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352ffe4cfafa72d595a0007\ntitle: Step 55\nchallengeType: 0\ndashedName: step-55\n--description--\nYour final calculation is the standard deviation, which is the square root of the variance Begin by declaring a getStandardDeviation function, with the array parameter In the function body, declare a variance variable and assign it the variance of the array --hints--\nYou should have a getStandardDeviation function js\nassert isFunction(getStandardDeviation);\nYour getStandardDeviation function should have an array parameter js\nassert match(getStandardDeviation toString(), /array/);\nYour getStandardDeviation function should have a variance variable js\nassert match(getStandardDeviation toString(), /variance\\s*=/);\nYour variance variable should have the value of getVariance(array) js\nassert match(getStandardDeviation toString(), /variance\\s*=\\s*getVariance\\(\\s*array\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5121,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ffe4cfafa72d595a0007.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "829a26c2a843ee6a470e482de1038a59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ffe4cfafa72d595a0007.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); }bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array reduce((acc, el) => {\nconst difference = el - mean;\nconst squared = difference ** 2;\nreturn acc + squared;\n}, 0) / array length;\nreturn variance;\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el =>",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5121,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ffe4cfafa72d595a0007.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c28437b8750568544ca0ec5547507c41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ffe4cfafa72d595a0007.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "array) - Math min( array); } const getVariance = (array) => { const mean = getMean(array); const variance = array reduce((acc, el) => { const difference = el - mean; const squared = difference ** 2; return acc + squared; }, 0) / array length; return variance; } --fcc-editable-region-- --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = value split(/,\\s*/g); const numbers = array map(el => Number(el)) filter(el =>isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\nconst variance = getVariance(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\ndocument querySelector(\"#variance\") textContent = variance;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5121,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352ffe4cfafa72d595a0007.md",
      "source_type": "git_repo"
    },
    "token_count": 220,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c80e93c0039948109cc2d3fe85c2f774",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6352fe473d53592a40ae403b\ntitle: Step 52\nchallengeType: 0\ndashedName: step-52\n--description--\nWithin your empty reduce() callback, declare a variable difference and set it to the value of el minus mean Then declare a squared variable, and set it to the value of difference to the power of 2 Finally, return the value of acc plus squared --hints--\nYour reduce callback should have a difference variable js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=/);\nYour difference variable should be set to the value of el minus mean js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;/);\nYour reduce callback should have a squared variable js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=/);\nYour squared variable should be set to the value of difference to the power of 2 js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; /);\nYour reduce callback should return the value of acc plus squared js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "d230c8fc778ed48b992fcdfd74bbe0f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=/); Your difference variable should be set to the value of el minus mean js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;/); Your reduce callback should have a squared variable js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=/); Your squared variable should be set to the value of difference to the power of 2 js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; /); Your reduce callback should return the value of acc plus squared js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; \\s*return\\s+acc\\s*\\+\\s*squared\\s*;/);\nYou should not remove the initial value of 0 from your reduce() method js\nassert match(getVariance toString(), /variance\\s*=\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "37b8a802f5a95ce50fb730d50880f4fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "/variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;/); Your reduce callback should have a squared variable js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=/); Your squared variable should be set to the value of difference to the power of 2 js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; /); Your reduce callback should return the value of acc plus squared js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; \\s*return\\s+acc\\s*\\+\\s*squared\\s*;/); You should not remove the initial value of 0 from your reduce() method js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "5851e38a81fc0c300f4c5e19e58952bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;/); Your reduce callback should have a squared variable js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=/); Your squared variable should be set to the value of difference to the power of 2 js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; /); Your reduce callback should return the value of acc plus squared js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; \\s*return\\s+acc\\s*\\+\\s*squared\\s*;/); You should not remove the initial value of 0 from your reduce() method js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*;\\s*return\\s+acc\\s*\\+\\s*squared\\s*;\\s*\\}\\s*,\\s*0\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
      "source_type": "git_repo"
    },
    "token_count": 520,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "ef1258de84e9374bf010fa6fdb9766e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "/variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=/); Your squared variable should be set to the value of difference to the power of 2 js assert match(getVariance toString(), /variance\\s*=\\s*array\\ reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; /); Your reduce callback should return the value of acc plus squared js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; \\s*return\\s+acc\\s*\\+\\s*squared\\s*;/); You should not remove the initial value of 0 from your reduce() method js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*;\\s*return\\s+acc\\s*\\+\\s*squared\\s*;\\s*\\}\\s*,\\s*0\\s*\\)/); --seed-- --seed-contents-- ```html Statistics Calculator Statistics Calculator Enter a list of comma-separated numbersNumbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "9f18687013e3a4a804ebcf90091746be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "reduce callback should return the value of acc plus squared js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*; \\s*return\\s+acc\\s*\\+\\s*squared\\s*;/); You should not remove the initial value of 0 from your reduce() method js assert match(getVariance toString(), /variance\\s*=\\s*array\\reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\ pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*;\\s*return\\s+acc\\s*\\+\\s*squared\\s*;\\s*\\}\\s*,\\s*0\\s*\\)/); --seed-- --seed-contents-- ```html Statistics Calculator Statistics Calculator Enter a list of comma-separated numbersNumbers: Calculate The mean of a list of numbers is the average, calculated by taking the sum of all numbers and dividing that by the count of numbersMean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "7e9f01660aa35c62d724522ecfebdf3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\n--fcc-editable-region--\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array reduce((acc, el) => {\n}, 0);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "10d64b2f4083b4698d14746c0d59b63b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "Object keys(counts) sort( (a, b) => counts[b] - counts[a] )[0]; const mode = Object keys(counts) filter( (el) => counts[el] === counts[highest] ); return mode join(\", \"); } const getRange = (array) => { return Math max( array) - Math min( array); } --fcc-editable-region-- const getVariance = (array) => { const mean = getMean(array); const variance = array reduce((acc, el) => { }, 0); } --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\")value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6352fe473d53592a40ae403b.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "8587b91905608ae38ae937f81bdaf3b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353004b235d7a2e0b913f2b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6353004b235d7a2e0b913f2b\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nTo calculate a root exponent, such as $\\sqrt[n]{x}$, you can use an inverted exponent $x^{1/n}$ JavaScript has a built-in Math pow() function that can be used to calculate exponents Here is the basic syntax for the Math pow() function:\njs\nMath pow(base, exponent);\nHere is an example of how to calculate the square root of 4:\njs\nconst base = 4;\nconst exponent = 0 5;\n// returns 2\nMath pow(base, exponent);\nDeclare a standardDeviation variable, and use the Math pow() function to assign it the value of $variance^{1/2}$ --hints--\nYou should have a standardDeviation variable js\nassert match(getStandardDeviation toString(), /standardDeviation\\s*=/);\nYour standardDeviation variable should use the Math pow() function js\nassert match(getStandardDeviation toString(), /standardDeviation\\s*=\\s*Math\\ pow\\(/);\nYour Math pow() function should have a base of variance and an exponent of 1/2 js\nassert match(getStandardDeviation toString(), /standardDeviation\\s*=\\s*Math\\ pow\\(\\s*variance\\s*,\\s*(\\(\\s*1\\s*\\/\\s*2\\s*\\)|1\\s*\\/\\s*2|0\\ 5|\\ 5)\\s*\\); \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353004b235d7a2e0b913f2b.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bbf4cb2dcb169ab69ae5961f388eb87b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353004b235d7a2e0b913f2b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array reduce((acc, el) => {\nconst difference = el - mean;\nconst squared = difference ** 2;\nreturn acc + squared;\n}, 0) / array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353004b235d7a2e0b913f2b.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d7be07a34cfe3f087c28c228cea9e459",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353004b235d7a2e0b913f2b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "b) => counts[b] - counts[a] )[0]; const mode = Object keys(counts) filter( (el) => counts[el] === counts[highest] ); return mode join(\", \"); } const getRange = (array) => { return Math max( array) - Math min( array); } const getVariance = (array) => { const mean = getMean(array); const variance = array reduce((acc, el) => { const difference = el - mean; const squared = difference ** 2; return acc + squared; }, 0) / arraylength;\nreturn variance;\n}\n--fcc-editable-region--\nconst getStandardDeviation = (array) => {\nconst variance = getVariance(array);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\nconst variance = getStandardDeviation(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\ndocument querySelector(\"#variance\") textContent = variance;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353004b235d7a2e0b913f2b.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0ec65a274c293cf57e5e4ded398a592e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353028147d3c7309017216a.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6353028147d3c7309017216a\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\nReturn your standardDeviation variable --hints--\nYour getStandardDeviation function should return the standardDeviation variable js\nassert match(getStandardDeviation toString(), /return\\s+standardDeviation\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4627,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353028147d3c7309017216a.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8f3a2305748d6415e5fc7290fe6e178d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353028147d3c7309017216a.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = array toSorted((a, b) => a - b); const median = sorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]]) : sorted[Math floor(sorted length / 2)]; return median; } const getMode = (array) => { const counts = {}; arrayforEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array reduce((acc, el) => {\nconst difference = el - mean;\nconst squared = difference ** 2;\nreturn acc + squared;\n}, 0) / array length;\nreturn variance;\n}\n--fcc-editable-region--\nconst getStandardDeviation = (array) => {\nconst variance = getVariance(array);\nconst standardDeviation = Math sqrt(variance);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\nconst variance = getVariance(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\ndocument querySelector(\"#variance\") textContent = variance;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4627,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353028147d3c7309017216a.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8f99b51a09543d897c554c8f00788bf3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353024f5eab012fa2f57eec.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6353024f5eab012fa2f57eec\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nThe Math object has a sqrt() method specifically for finding the square root of a number Change your standardDeviation variable to use this method instead of Math pow() --hints--\nYour standardDeviation variable should use Math sqrt() js\nassert match(getStandardDeviation toString(), /standardDeviation\\s*=\\s*Math\\ sqrt\\(\\s*variance\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4770,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353024f5eab012fa2f57eec.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bb62fb5e6a24a68e3a25f62252e48fa8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353024f5eab012fa2f57eec.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = array toSorted((a, b) => a - b); const median = sorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]]) : sorted[Math floor(sortedlength / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array reduce((acc, el) => {\nconst difference = el - mean;\nconst squared = difference ** 2;\nreturn acc + squared;\n}, 0) / array length;\nreturn variance;\n}\n--fcc-editable-region--\nconst getStandardDeviation = (array) => {\nconst variance = getVariance(array);\nconst standardDeviation = Math pow(variance, 1/2);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\nconst variance = getVariance(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4770,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353024f5eab012fa2f57eec.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d8ec2e59a5142cef17d7f20748abcd29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353024f5eab012fa2f57eec.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "const variance = getVariance(array); const standardDeviation = Math pow(variance, 1/2); } --fcc-editable-region-- const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = value split(/,\\s*/g); const numbers = array map(el => Number(el)) filter(el => isNaN(el)); const mean = getMean(numbers); const median = getMedian(numbers); const mode = getMode(numbers); const range = getRange(numbers); const variance = getVariance(numbers); document querySelector(\"#mean\") textContent = mean; document querySelector(\"#median\") textContent = median; document querySelector(\"#mode\") textContent = mode; document querySelector(\"#range\")textContent = range;\ndocument querySelector(\"#variance\") textContent = variance;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4770,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6353024f5eab012fa2f57eec.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5f13ee0a823203b0b459161934174d6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65aac0678d51b3f1a0cb8061.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 65aac0678d51b3f1a0cb8061\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nInside the calculate function, you have already called the getMean and getMedian functions Below those function calls, add a console log(getMode(numbers)) To see the result, enter the numbers 4, 4, 2, 5 and click on the \"Calculate\" button Open up the console to see the following array:\njs\n[ 4, 4, 2, 5 ]\n--hints--\nYou should call console log(getMode(numbers)) inside the calculate function js\nassert match(calculate toString(), /console\\ log\\(getMode\\(numbers\\)\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3827,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65aac0678d51b3f1a0cb8061.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5b537d732cf1df2444985137d4e6b075",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65aac0678d51b3f1a0cb8061.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = arraytoSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\nreturn array;\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\n--fcc-editable-region--\n--fcc-editable-region--\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3827,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65aac0678d51b3f1a0cb8061.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c14ab80695b06b08a9695a63201da13c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65e62efde0592ec4b4bb6a69.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 65e62efde0592ec4b4bb6a69\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nNow that you have a better understanding of how the getMode function works, you can remove the console log(getMode(numbers)) statement from the calculate function --hints--\nYou should not have a console log(getMode(numbers)) inside your calculate function js\nassert notMatch(calculate toString(), /console\\ log\\(\\s*getMode\\(numbers\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65e62efde0592ec4b4bb6a69.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "17d15e6d2d2fde186850401edbf32962",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65e62efde0592ec4b4bb6a69.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = array toSorted((a, b) => a - b); const median = sorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]]) : sorted[Math floor(sortedlength / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach(el => counts[el] = counts[el] counts[el] + 1 : 1);\nconsole log(counts)\nreturn counts;\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconsole log(getMode(numbers));\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65e62efde0592ec4b4bb6a69.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "34ef6fd21d377fc5a15865c7bdefc206",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65c4dc57418fd6bfc710d61d.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 65c4dc57418fd6bfc710d61d\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nInside your getMode function, on the empty line above your return statement, call forEach on array Your forEach() method should have an empty callback function that takes an el parameter In the next few steps, you will use this loop to count the frequency of occurrences of each number in the array --hints--\nYour getMode function should use the forEach() method on the array parameter js\nassert match(getMode toString(), /array\\ forEach\\(/);\nYour forEach() method should have a callback function which takes an el parameter js\nassert match(getMode toString(), /\\ forEach\\s*\\(\\s*(function\\s*\\(\\s*el\\s*\\)|\\(\\s*el\\s*\\)\\s*=>)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4023,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65c4dc57418fd6bfc710d61d.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "039ff2b34290dcdbe77297051c7e8000",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65c4dc57418fd6bfc710d61d.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / arraylength;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\nreturn array;\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconsole log(getMode(numbers));\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4023,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65c4dc57418fd6bfc710d61d.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8fd4171119378268fcbfadb0fe1447b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 635302be760d6031d11a06cd\ntitle: Step 59\nchallengeType: 0\ndashedName: step-59\n--description--\nLastly update the calculate function to include the standard deviation logic, like you did with your other functions Congratulations Your project is complete --hints--\nYour calculate function should have a standardDeviation variable set to the result of getStandardDeviation(numbers) js\nassert match(calculate toString(), /standardDeviation\\s*=\\s*getStandardDeviation\\(\\s*numbers\\s*\\)/);\nYou should update the textContent of the #standardDeviation element to be the standardDeviation variable js\nassert match(calculate toString(), /document\\ querySelector\\(\\s*('|\")#standardDeviation\\1\\s*\\)\\ textContent\\s*=\\s*standardDeviation/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6a87bee3aa806ac66cdce7052ea84d08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / arraylength;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array reduce((acc, el) => {\nconst difference = el - mean;\nconst squared = difference ** 2;\nreturn acc + squared;\n}, 0) / array length;\nreturn variance;\n}\nconst getStandardDeviation = (array) => {\nconst variance = getVariance(array);\nconst standardDeviation = Math sqrt(variance);\nreturn standardDeviation;\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el =>",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "364eab9482244e88d3de3307d8c314f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "const variance = array reduce((acc, el) => { const difference = el - mean; const squared = difference ** 2; return acc + squared; }, 0) / array length; return variance; } const getStandardDeviation = (array) => { const variance = getVariance(array); const standardDeviation = Math sqrt(variance); return standardDeviation; } const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = value split(/,\\s*/g); const numbers = array map(el => Number(el)) filter(el =>isNaN(el));\n--fcc-editable-region--\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\nconst variance = getVariance(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\ndocument querySelector(\"#variance\") textContent = variance;\n--fcc-editable-region--\n}\n```\n--solutions--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "462047a115202ff451315630d75f1f28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); }bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\nconst getMode = (array) => {\nconst counts = {};\narray forEach((el) => {\ncounts[el] = (counts[el] || 0) + 1;\n})\nif (new Set(Object values(counts)) size === 1) {\nreturn null;\n}\nconst highest = Object keys(counts) sort(\n(a, b) => counts[b] - counts[a]\n)[0];\nconst mode = Object keys(counts) filter(\n(el) => counts[el] === counts[highest]\n);\nreturn mode join(\", \");\n}\nconst getRange = (array) => {\nreturn Math max( array) - Math min( array);\n}\nconst getVariance = (array) => {\nconst mean = getMean(array);\nconst variance = array reduce((acc, el) => {\nconst difference = el - mean;\nconst squared = difference ** 2;\nreturn acc + squared;\n}, 0) / array length;\nreturn variance;\n}\nconst getStandardDeviation = (array) => {\nconst variance = getVariance(array);\nconst standardDeviation = Math sqrt(variance);\nreturn standardDeviation;\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5600a8690182d6ae1f05301d77effbbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "const getVariance = (array) => { const mean = getMean(array); const variance = array reduce((acc, el) => { const difference = el - mean; const squared = difference ** 2; return acc + squared; }, 0) / array length; return variance; } const getStandardDeviation = (array) => { const variance = getVariance(array); const standardDeviation = Math sqrt(variance); return standardDeviation; } const calculate = () => { const value = document querySelector(\"#numbers\") value; const array = valuesplit(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconst mode = getMode(numbers);\nconst range = getRange(numbers);\nconst variance = getVariance(numbers);\nconst standardDeviation = getStandardDeviation(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\ndocument querySelector(\"#mode\") textContent = mode;\ndocument querySelector(\"#range\") textContent = range;\ndocument querySelector(\"#variance\") textContent = variance;\ndocument querySelector(\"#standardDeviation\") textContent = standardDeviation;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\635302be760d6031d11a06cd.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a1fff16e7eb759d2a05d67d36b27e4fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65ca2d0625aa3a3201067f70.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 65ca2d0625aa3a3201067f70\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nInside the array forEach() callback function, check if the current element is inside the counts object If the element can be found, increment the value of counts[el] by 1 Otherwise, assign the number 1 to counts[el] Change your return statement to return counts instead of array To test this, enter the numbers 4, 4, 2, 5 and click Calculate You should see the following in the console:\njs\n{ '2': 1, '4': 2, '5': 1 }\n--hints--\nYou should change your return statement to return counts instead of array js\nassert match(getMode toString(), /return\\s+counts\\s*;/);\nYou should check if the current element can be found inside the counts object If it can be found, update the value of counts[el] by 1 Otherwise, assign the number 1 to counts[el] Enter the numbers 4, 4, 2, 5 and click \"Calculate\" for testing js\nconst expected = {'2': 1, '4': 2, '5': 1};\nassert deepEqual(getMode([4, 4, 2, 5]), expected)\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4356,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65ca2d0625aa3a3201067f70.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f3cc0ca48b4a2c344d23468e956ecc7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65ca2d0625aa3a3201067f70.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach(el => {\n})\nreturn array;\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconsole log(getMode(numbers));\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4356,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65ca2d0625aa3a3201067f70.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d04a3730a2182ef4e94729483c57edb4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65f83a7ca7047318e3ccff7c.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 65f83a7ca7047318e3ccff7c\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nReturning the counts variable was only for testing purposes Now that you are done testing, remove the return counts line from the getMode function --hints--\nYou should not have a return counts inside your getMode function ```js\nassert notMatch(getMode toString(), /return\\s+counts\\s*;/);\n```\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array toSorted((a, b) => a - b);\nconst median =\nsorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]])\n: sorted[Math floor(sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3715,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65f83a7ca7047318e3ccff7c.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d22f232aad8c931d0a3560aa99e31c2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65f83a7ca7047318e3ccff7c.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length; const getMedian = (array) => { const sorted = array toSorted((a, b) => a - b); const median = sorted length % 2 === 0 getMean([sorted[sorted length / 2], sorted[sorted length / 2 - 1]]) : sorted[Math floor(sortedlength / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach(el => counts[el] = counts[el] counts[el] + 1 : 1);\nconsole log(counts)\nreturn counts;\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3715,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\65f83a7ca7047318e3ccff7c.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b0ae5d98fe3b87edb4c18f0925a655ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\661890c4abae9f2a0eddad6b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 661890c4abae9f2a0eddad6b\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nIn the next few steps, you'll learn how to determine if an array's length is even or odd, as well as how to find the median You will then be able to apply what you learned to the getMedian function To check if a number is even or odd, you can use the modulus operator % The modulus operator returns the remainder of the division of two numbers Here is an example checking if an array length is even or odd:\n```js\n// check if array length is even\narr length % 2 === 0;\n// check if array length is odd\narr length % 2 === 1;\n```\nIf the remainder is 0, the number is even If the remainder is 1, the number is odd Create a variable called isEven Then use the modulus operator to check if the length of the testArr2 array is even Assign that expression to the isEven variable Below your isEven variable, log out the isEven variable to the console Open up the console to see the result --hints--\nYou should have an isEven variable js\nassert isDefined(isEven);\nYou should check if the length of the testArr2 array is even Refer back to the example provided for you: arr length % 2 === 0;\njs\nassert isTrue(isEven);\nYou should have a console log statement that logs the isEven variable js\nassert match(code, /console\\ log\\(isEven\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\661890c4abae9f2a0eddad6b.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "72394166b5da8fb8842b465bb03e2f5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\661890c4abae9f2a0eddad6b.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "of numbers is the number that appears in the middle of the list, when sorted from least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on averageVariance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst testArr1 = [1, 2, 3, 4, 5];\nconst testArr2 = [1, 2, 3, 4, 5, 6];\n--fcc-editable-region--\nconst getMedian = (array) => {\nconst sorted = array sort((a, b) => a - b);\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\661890c4abae9f2a0eddad6b.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0da70aeed28b8b511c0cd757cbf3e2d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\661899113600ef307d8a7487.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 661899113600ef307d8a7487\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nTo get the median of an array with an odd number of elements, you will need to find and return the middle number Here is how to find the middle number of an array with an odd number of elements:\njs\narr[Math floor(arr length / 2)];\nHere is a longer example finding the middle number of an array with 5 elements:\njs\nconst numbers = [1, 2, 3, 4, 5];\nconst middleNumber = numbers[Math floor(numbers length / 2)];\nconsole log(middleNumber); // 3\nThe reason why you use Math floor is because the result of dividing an odd number by 2 will be a decimal Math floor will round down to the nearest whole number Declare an oddListMedian variable and assign it the result of finding the middle number of the testArr1 Then log the oddListMedian variable to the console Open up the console to see the result --hints--\nYou should have an oddListMedian variable js\nassert isDefined(oddListMedian);\nYou should assign the result of finding the middle number for the testArr1 to the oddListMedian variable Remember to refer to the example from earlier: arr[Math floor(arr length / 2)];\njs\nassert strictEqual(oddListMedian, 3);\nYou should have a console statement that logs the oddListMedian variable js\nassert match(code, /console\\ log\\(\\s*oddListMedian\\s*\\); /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4421,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\661899113600ef307d8a7487.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dd043b57226a9f38b2a2d2ac83055709",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\661899113600ef307d8a7487.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst testArr1 = [1, 2, 3, 4, 5];\nconst testArr2 = [1, 2, 3, 4, 5, 6];\nconst isEven = testArr2 length % 2 === 0;\nconsole log(isEven);\n--fcc-editable-region--\nconst getMedian = (array) => {\nconst sorted = array sort((a, b) => a - b);\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4421,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\661899113600ef307d8a7487.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "199a320d391ea355766d3e84abf85e62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618a3264f955339063d3328.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6618a3264f955339063d3328\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nTo find the median of an even list of numbers, you need to find the two middle numbers and calculate the mean of those numbers Here is how to find the two middle numbers of an even list of items:\njs\n// first middle number\narr[arr length / 2];\n// second middle number\narr[(arr length / 2) - 1];\nTo find the median, you can use the getMean function which adds the middle numbers and divides the sum by 2 js\nconst numbers = [1, 2, 3, 4];\nconst firstMiddleNumber = numbers[numbers length / 2];\nconst secondMiddleNumber = numbers[(numbers length / 2) - 1];\n// result is 2 5\ngetMean([firstMiddleNumber, secondMiddleNumber]);\nCreate an evenListMedian variable and assign it the result of finding the median of the testArr2 Then, log the evenListMedian variable to the console --hints--\nYou should have a variable named evenListMedian js\nassert isDefined(evenListMedian);\nYou should assign the result of finding the median of the testArr2 to the evenListMedian variable Refer back to the example for extra help js\nassert strictEqual(evenListMedian, 3 5);\nYou should log the evenListMedian variable to the console js\nassert match(code, /console\\ log\\(\\s*evenListMedian\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4430,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618a3264f955339063d3328.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "25f27aea7b606e33140821794f3ac58b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618a3264f955339063d3328.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst testArr1 = [1, 2, 3, 4, 5];\nconst testArr2 = [1, 2, 3, 4, 5, 6];\nconst isEven = testArr2 length % 2 === 0;\nconsole log(isEven);\nconst oddListMedian = testArr1[Math floor(testArr1 length / 2)];\nconsole log(oddListMedian);\n--fcc-editable-region--\nconst getMedian = (array) => {\nconst sorted = array sort((a, b) => a - b);\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4430,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618a3264f955339063d3328.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "21d87132878394e2566526d464e87af9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\66c395a16c3ff33dc6f8e7c0.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 66c395a16c3ff33dc6f8e7c0\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nThe sort() method mutates the original array - in other words, it modifies the order of the elements directly This is generally considered bad practice, as it can result in unexpected side effects Instead, you should use the toSorted() method, which creates a new array Change your sort() call to toSorted() Do not modify the callback function --hints--\nYou should use toSorted() instead of sort() js\nassert notMatch(getMedian toString(), /array\\ sort/);\nassert match(getMedian toString(), /array\\ toSorted/);\nYou should not modify the callback function js\nassert match(code, /array\\ toSorted\\(\\s*\\(\\s*a,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\); /);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\66c395a16c3ff33dc6f8e7c0.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "40a86b4b2a4445b45f7eec797f4b9b0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\66c395a16c3ff33dc6f8e7c0.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => arrayreduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst getMedian = (array) => {\nconst sorted = array sort((a, b) => a - b);\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\66c395a16c3ff33dc6f8e7c0.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8077cf6e92fd9d26a99df7ce124c93cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618abf6368d073f0f659780.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 6618abf6368d073f0f659780\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nNow that you have a better understanding of how to find the median for odd and even lists of numbers, you can remove all your test code from the previous steps --hints--\nYou should not have a const testArr1 = [1, 2, 3, 4, 5]; in your code js\nassert notMatch(code, /const testArr1 = \\[1, 2, 3, 4, 5\\];/);\nYou should not have a const testArr2 = [1, 2, 3, 4, 5, 6]; in your code js\nassert notMatch(code, /const testArr2 = \\[1, 2, 3, 4, 5, 6\\];/);\nYou should not have a const isEven = testArr2 length % 2 === 0; in your code js\nassert notMatch(code, /const isEven = testArr2 length % 2 === 0;/);\nYou should not have a console log(isEven); in your code js\nassert notMatch(code, /console\\ log\\(isEven\\);/);\nYou should not have a const oddListMedian = testArr1[Math floor(testArr1 length / 2)]; in your code js\nassert notMatch(code, /const oddListMedian = testArr1\\[Math\\ floor\\(testArr1\\ length \\/ 2\\)\\];/);\nYou should not have a console log(oddListMedian); in your code js\nassert notMatch(code, /console\\ log\\(oddListMedian\\);/);\nYou should not have a const evenListMedian = getMean([testArr2[testArr2 length / 2 - 1], testArr2[testArr2 length / 2]]); in your code js\nassert notMatch(code, /const evenListMedian = getMean\\(\\[testArr2\\[testArr2\\ length \\/ 2 - 1\\], testArr2\\[testArr2\\ length \\/ 2\\]\\]\\);/);\nYou should not have a console log(evenListMedian); in your code js\nassert notMatch(code, /console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618abf6368d073f0f659780.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6f35b08686114e7cb319b741d4bcafab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618abf6368d073f0f659780.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "assert notMatch(code, /const oddListMedian = testArr1\\[Math\\ floor\\(testArr1\\ length \\/ 2\\)\\];/); You should not have a console log(oddListMedian); in your code js assert notMatch(code, /console\\ log\\(oddListMedian\\);/); You should not have a const evenListMedian = getMean([testArr2[testArr2 length / 2 - 1], testArr2[testArr2 length / 2]]); in your code js assert notMatch(code, /const evenListMedian = getMean\\(\\[testArr2\\[testArr2\\ length \\/ 2 - 1\\], testArr2\\[testArr2\\ length \\/ 2\\]\\]\\);/); You should not have a console log(evenListMedian); in your code js assert notMatch(code, /console\\log\\(evenListMedian\\);/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance Standard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618abf6368d073f0f659780.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8f3bb86ee211e8596dca46312cd4ad30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618abf6368d073f0f659780.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "Variance: The standard deviation of a list of numbers is the square root of the variance Standard Deviation: ``` ```css body { margin: 0; background-color: rgb(27, 27, 50); text-align: center; color: #fff; } button { cursor: pointer; background-color: rgb(59, 59, 79); border: 3px solid white; color: white; } input { background-color: rgb(10, 10, 35); color: white; border: 1px solid rgb(59, 59, 79); } bold { font-weight: bold; } ``` ```js const getMean = (array) => arrayreduce((acc, el) => acc + el, 0) / array length;\n--fcc-editable-region--\nconst testArr1 = [1, 2, 3, 4, 5];\nconst testArr2 = [1, 2, 3, 4, 5, 6];\nconst isEven = testArr2 length % 2 === 0;\nconsole log(isEven);\nconst oddListMedian = testArr1[Math floor(testArr1 length / 2)];\nconsole log(oddListMedian);\nconst evenListMedian = getMean([testArr2[testArr2 length / 2 - 1], testArr2[testArr2 length / 2]]);\nconsole log(evenListMedian);\n--fcc-editable-region--\nconst getMedian = (array) => {\nconst sorted = array sort((a, b) => a - b);\n}\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\ndocument querySelector(\"#mean\") textContent = mean;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\6618abf6368d073f0f659780.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3ef0fac9de4a732a50807e191f90a206",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\66f59e667892883f47abe6d5.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "id: 66f59e667892883f47abe6d5\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nThere is another way to write the forEach Instead of using a block body () => {} for the callback, you can use an expression body () => You will have to convert the if else statements into an expression Write the expression as a ternary and use a single assignment for the ternary js\nassignment = condition exprIfTrue : exprIfFalse\nConvert the forEach callback to use an expression body and replace the statements with a ternary --hints--\nYour function should still increment the counts variable properly js\nconst expected = {'2': 1, '4': 2, '5': 1};\nassert deepEqual(getMode([4, 4, 2, 5]), expected)\nYour function should use a ternary operator js\nassert match(getMode toString(), /counts\\[el\\]\\s*=\\s*counts\\[el\\]\\s*\\ \\s*counts\\[el\\]\\s*\\+\\s*1\\s*\\:\\s*1/);\n--seed--\n--seed-contents--\n```html\nStatistics Calculator\nStatistics Calculator\nEnter a list of comma-separated numbers Numbers:\nCalculate\nThe mean of a list of numbers is the average, calculated by\ntaking the sum of all numbers and dividing that by the count of numbers Mean:\nThe median of a list of numbers is the number that appears in\nthe middle of the list, when sorted from least to greatest Median:\nThe mode of a list of numbers is the number that appears most\noften in the list Mode:\nThe range of a list of numbers is the difference between the\nlargest and smallest numbers in the list Range:\nThe variance of a list of numbers measures how far the values\nare from the mean, on average Variance:\nThe standard deviation of a list of numbers is the square\nroot of the variance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\66f59e667892883f47abe6d5.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "70f25469fafbb56f760a7287013f5d59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\66f59e667892883f47abe6d5.md",
    "source_type": "git_repo",
    "title": "Statistics Calculator",
    "content": "least to greatest Median: The mode of a list of numbers is the number that appears most often in the list Mode: The range of a list of numbers is the difference between the largest and smallest numbers in the list Range: The variance of a list of numbers measures how far the values are from the mean, on average Variance: The standard deviation of a list of numbers is the square root of the varianceStandard Deviation:\n```\n```css\nbody {\nmargin: 0;\nbackground-color: rgb(27, 27, 50);\ntext-align: center;\ncolor: #fff;\n}\nbutton {\ncursor: pointer;\nbackground-color: rgb(59, 59, 79);\nborder: 3px solid white;\ncolor: white;\n}\ninput {\nbackground-color: rgb(10, 10, 35);\ncolor: white;\nborder: 1px solid rgb(59, 59, 79);\n} bold {\nfont-weight: bold;\n}\n```\n```js\nconst getMean = (array) => array reduce((acc, el) => acc + el, 0) / array length;\nconst getMedian = (array) => {\nconst sorted = array sort((a, b) => a - b);\nconst median =\narray length % 2 === 0 getMean([sorted[array length / 2], sorted[array length / 2 - 1]])\n: sorted[Math floor(array length / 2)];\nreturn median;\n}\n--fcc-editable-region--\nconst getMode = (array) => {\nconst counts = {};\narray forEach(el => {\nif (counts[el]) {\ncounts[el] += 1;\n} else {\ncounts[el] = 1;\n}\n});\nreturn counts;\n}\n--fcc-editable-region--\nconst calculate = () => {\nconst value = document querySelector(\"#numbers\") value;\nconst array = value split(/,\\s*/g);\nconst numbers = array map(el => Number(el)) filter(el => isNaN(el));\nconst mean = getMean(numbers);\nconst median = getMedian(numbers);\nconsole log(getMode(numbers));\ndocument querySelector(\"#mean\") textContent = mean;\ndocument querySelector(\"#median\") textContent = median;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-advanced-array-methods-by-building-a-statistics-calculator\\66f59e667892883f47abe6d5.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "52a694efde8d2bf6e13cfcfc78bddf26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64067c1041a80c366b852407.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64067c1041a80c366b852407\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nTo prepare your project's logic, use const and arrow syntax to declare a sortInputArray function It should take a single event parameter --hints--\nYou should declare a sortInputArray function with const js\nassert match(code, /const\\s+sortInputArray\\s*=/);\nYour sortInputArray should be a function js\nassert isFunction(sortInputArray);\nYour sortInputArray should take a single event parameter js\nassert match(code, /const\\s+sortInputArray\\s*=\\s*(\\(\\s*event\\s*\\)|event)/);\nYour sortInputArray should use arrow syntax js\nassert match(code, /const\\s+sortInputArray\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>/);\nYour sortInputArray function should be empty js\nassert match(sortInputArray",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64067c1041a80c366b852407.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c58c123a7b42d40e5cd83b4b75e4dbb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64067c1041a80c366b852407.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "--description-- To prepare your project's logic, use const and arrow syntax to declare a sortInputArray function It should take a single event parameter --hints-- You should declare a sortInputArray function with const js assert match(code, /const\\s+sortInputArray\\s*=/); Your sortInputArray should be a function js assert isFunction(sortInputArray); Your sortInputArray should take a single event parameter js assert match(code, /const\\s+sortInputArray\\s*=\\s*(\\(\\s*event\\s*\\)|event)/); Your sortInputArray should use arrow syntax js assert match(code, /const\\s+sortInputArray\\s*=\\s*(\\(\\s*event\\s*\\)|event)\\s*=>/); Your sortInputArray function should be empty js assert match(sortInputArraytoString(), /\\(\\s*event\\s*\\)\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64067c1041a80c366b852407.md",
      "source_type": "git_repo"
    },
    "token_count": 619,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2384201e1b2ab98378eea1ff2e088e32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64067c1041a80c366b852407.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64067c1041a80c366b852407.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a671ceedbf19d140399f2f54100950a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64067c1041a80c366b852407.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64067c1041a80c366b852407.md",
      "source_type": "git_repo"
    },
    "token_count": 195,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "219a9781367757c2d03a34278c5331d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a71d2b35103a340dba06.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6406a71d2b35103a340dba06\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nYou will be using this as an event listener for the sortButton Because buttons associated with a form element submit by default, you need to prevent that behavior Call event preventDefault() in your function to do this --hints--\nYour sortInputArray function should call event preventDefault() js\nassert match(sortInputArray toString(), /event\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a71d2b35103a340dba06.md",
      "source_type": "git_repo"
    },
    "token_count": 107,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "68a538953765743eba2b077aeefede9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a71d2b35103a340dba06.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6406a71d2b35103a340dba06\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nYou will be using this as an event listener for the sortButton Because buttons associated with a form element submit by default, you need to prevent that behavior Call event preventDefault() in your function to do this --hints--\nYour sortInputArray function should call event preventDefault() js\nassert match(sortInputArray toString(), /event\\preventDefault\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a71d2b35103a340dba06.md",
      "source_type": "git_repo"
    },
    "token_count": 551,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6265ae63d17d2819162c56cf2c7f8597",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a71d2b35103a340dba06.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a71d2b35103a340dba06.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "1eb59ba6354fa721a145e88531d37fbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a71d2b35103a340dba06.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\n--fcc-editable-region--\nconst sortInputArray = (event) => {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7555,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a71d2b35103a340dba06.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b76d5f277f8e97641fcd2bcf3b6c9bb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64061a98f704a014b44afdb2.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64061a98f704a014b44afdb2\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nIn this project, you will be building a number sorter The HTML and CSS have been provided for you Feel free to explore them When you are ready, declare a sortButton variable and assign it the value of getElementById() with the argument \"sort\" --hints--\nYou should declare a sortButton variable with const js\nassert match(code, /const\\s+sortButton\\s*=/);\nYou should call document getElementById() with the argument \"sort\" js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)sort\\1\\s*\\)/);\nYou should assign the value of document getElementById() to sortButton js\nassert match(code, /sortButton\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64061a98f704a014b44afdb2.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "51454ee5576392ec07153c1af89308e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64061a98f704a014b44afdb2.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "number sorter The HTML and CSS have been provided for you Feel free to explore them When you are ready, declare a sortButton variable and assign it the value of getElementById() with the argument \"sort\" --hints-- You should declare a sortButton variable with const js assert match(code, /const\\s+sortButton\\s*=/); You should call document getElementById() with the argument \"sort\" js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)sort\\1\\s*\\)/); You should assign the value of document getElementById() to sortButton js assert match(code, /sortButton\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)sort\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64061a98f704a014b44afdb2.md",
      "source_type": "git_repo"
    },
    "token_count": 585,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9d1cf7b7b9b0a228bb3f0a05341f9f8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64061a98f704a014b44afdb2.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64061a98f704a014b44afdb2.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "65465bfdc57a7ef9d2a532fccc714855",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a9945fa5d23c225d31cc.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6406a9945fa5d23c225d31cc\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nTo test your code as you write it, mount an event listener to your sortButton element It should listen for the \"click\" event, and take sortInputArray as the callback --hints--\nYou should call the addEventListener() method on your sortButton element js\nassert match(code, /sortButton\\s*\\ \\s*addEventListener\\s*\\(/);\nYour addEventListener() method should listen for the \"click\" event js\nassert match(code, /sortButton\\s*\\ \\s*addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*,/);\nYour addEventListener() method should take sortInputArray as the callback Remember to pass the function reference, not the function call js\nassert match(code, /sortButton\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a9945fa5d23c225d31cc.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "8796513d93341cc380197040ba968beb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a9945fa5d23c225d31cc.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "write it, mount an event listener to your sortButton element It should listen for the \"click\" event, and take sortInputArray as the callback --hints-- You should call the addEventListener() method on your sortButton element js assert match(code, /sortButton\\s*\\ \\s*addEventListener\\s*\\(/); Your addEventListener() method should listen for the \"click\" event js assert match(code, /sortButton\\s*\\ \\s*addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*,/); Your addEventListener() method should take sortInputArray as the callback Remember to pass the function reference, not the function call js assert match(code, /sortButton\\s*\\\\s*addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*,\\s*sortInputArray\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a9945fa5d23c225d31cc.md",
      "source_type": "git_repo"
    },
    "token_count": 603,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c44d0a0d8de08961c84475a4a0913f3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a9945fa5d23c225d31cc.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a9945fa5d23c225d31cc.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "db6b71355727b496ee32c0b433b301cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a9945fa5d23c225d31cc.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406a9945fa5d23c225d31cc.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1c24a685db381d8d30cadff253853c51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406bb32f9ed593f26c33b2b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6406bb32f9ed593f26c33b2b\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nRemember that getElementsByClassName() method returns an HTMLCollection, which is an array-like object of all the elements that have a matching class name You can use the spread operator to convert it into an array Convert the document getElementsByClassName() call to an array with the spread operator and assign it to a variable called inputValues --hints--\nYou should use the spread operator on document getElementsByClassName() js\nassert match(code, /\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)/);\nYou should wrap the spread operator and getElementsByClassName() in square brackets to create an array js\nassert match(code, /\\[\\s*\\ \\ \\ document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8108,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406bb32f9ed593f26c33b2b.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "93f96f5dbb41a3aac852652c5ba9225c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406bb32f9ed593f26c33b2b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "a matching class name You can use the spread operator to convert it into an array Convert the document getElementsByClassName() call to an array with the spread operator and assign it to a variable called inputValues --hints-- You should use the spread operator on document getElementsByClassName() js assert match(code, /\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)/); You should wrap the spread operator and getElementsByClassName() in square brackets to create an array js assert match(code, /\\[\\s*\\ \\ \\ document\\getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8108,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406bb32f9ed593f26c33b2b.md",
      "source_type": "git_repo"
    },
    "token_count": 571,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f5e34f7e7c7b93408b755af23a490a7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406bb32f9ed593f26c33b2b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8108,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406bb32f9ed593f26c33b2b.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "df16d33227699737898428eaf3b1997e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406bb32f9ed593f26c33b2b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\n--fcc-editable-region--\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = document getElementsByClassName(\"values-dropdown\");\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8108,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406bb32f9ed593f26c33b2b.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "09a2ad4728a9e08eca8c395a8935bff5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406adbca6b41d3d7cef85ab.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6406adbca6b41d3d7cef85ab\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nBack in your sortInputArray function, you need to get the values from your select elements Since they all have the class values-dropdown, you can query them all at once Use document getElementsByClassName() to get all the elements with this class by passing in the argument \"values-dropdown\" Assign that to an inputValues variable with const --hints--\nYou should use document getElementsByClassName() to get all the elements with the class \"values-dropdown\" js\nassert match(sortInputArray toString(), /document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)/);\nYou should assign the result of document getElementsByClassName() to a variable named inputValues js\nassert match(sortInputArray toString(), /inputValues\\s*=\\s*document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)/);\nYou should use const to declare inputValues js\nassert match(code, /const\\s+inputValues\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406adbca6b41d3d7cef85ab.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "0ce4a93670bbd42e4abf5573258ddc8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406adbca6b41d3d7cef85ab.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "Use document getElementsByClassName() to get all the elements with this class by passing in the argument \"values-dropdown\" Assign that to an inputValues variable with const --hints-- You should use document getElementsByClassName() to get all the elements with the class \"values-dropdown\" js assert match(sortInputArray toString(), /document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)/); You should assign the result of document getElementsByClassName() to a variable named inputValues js assert match(sortInputArray toString(), /inputValues\\s*=\\s*document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)/); You should use const to declare inputValues js assert match(code, /const\\s+inputValues\\s*=\\s*document\\getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406adbca6b41d3d7cef85ab.md",
      "source_type": "git_repo"
    },
    "token_count": 617,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f9ba3a9c925f5ab9ffceb6af6d007e43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406adbca6b41d3d7cef85ab.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406adbca6b41d3d7cef85ab.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7cfb4aa0a89c4807152949ef2888432b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406adbca6b41d3d7cef85ab.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\n--fcc-editable-region--\nconst sortInputArray = (event) => {\nevent preventDefault();\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6406adbca6b41d3d7cef85ab.md",
      "source_type": "git_repo"
    },
    "token_count": 221,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d2301e6f30fdf493f5b17b0b04c1fe61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407b940b8983005578d0824.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407b940b8983005578d0824\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nYou need to get the values from your select elements These values will currently be strings and you will convert them into numbers Use the map function to iterate over the array Pass a callback function to map that takes a dropdown parameter and returns dropdown value --hints--\nYou should chain the map method directly on your array js\nassert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\(/);\nYour map callback function should use arrow function syntax js\nassert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour map callback function should take a dropdown parameter js\nassert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\(\\s*dropdown\\s*\\)|dropdown)\\s*=>/);\nYour map callback function should implicitly return dropdown value js\nassert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\(\\s*dropdown\\s*\\)|dropdown)\\s*=>\\s*dropdown\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8591,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407b940b8983005578d0824.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c21db746add5d8c11178f70d247ff829",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407b940b8983005578d0824.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "dropdown value --hints-- You should chain the map method directly on your array js assert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\(/); Your map callback function should use arrow function syntax js assert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); Your map callback function should take a dropdown parameter js assert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\(\\s*dropdown\\s*\\)|dropdown)\\s*=>/); Your map callback function should implicitly return dropdown value js assert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\(\\s*dropdown\\s*\\)|dropdown)\\s*=>\\s*dropdown\\value\\s*/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8591,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407b940b8983005578d0824.md",
      "source_type": "git_repo"
    },
    "token_count": 721,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1473e172cb749d91bc295bab2e12fd11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407b940b8983005578d0824.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8591,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407b940b8983005578d0824.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7c5e0ed4af3cb811afaae74529e18c3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407b940b8983005578d0824.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\n--fcc-editable-region--\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")];\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8591,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407b940b8983005578d0824.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "fa396f51ceaefce0bbf07b6b67451d8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c303b4272606c019f338.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407c303b4272606c019f338\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nYou need a function to update the display with the sorted numbers Start by using arrow syntax to declare an updateUI function that takes a single array parameter Because you will be writing algorithms that won't immediately have a return value, set a fallback value for array to be an empty array Here is an example of a function that has a fallback value:\n```js\nconst myFunction = (string = \"\") => {\n}\n```\n--hints--\nYou should use const to declare an updateUI variable js\nassert match(code, /const\\s+updateUI\\s*=/);\nupdateUI should be a function js\nassert isFunction(updateUI);\nupdateUI should use arrow syntax js\nassert match(code, /const\\s+updateUI\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nupdateUI should take a single array parameter js\nassert match(code, /const\\s+updateUI\\s*=\\s*\\( \\s*array/);\nupdateUI should have a fallback value of an empty array for array js\nassert match(code, /const\\s+updateUI\\s*=\\s*\\(\\s*array\\s*=\\s*\\[\\s*\\]\\s*\\)/);\nupdateUI should be empty js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c303b4272606c019f338.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "2b236e1cd636ef6a1185d6d23f3b231c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c303b4272606c019f338.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "```js const myFunction = (string = \"\") => { } ``` --hints-- You should use const to declare an updateUI variable js assert match(code, /const\\s+updateUI\\s*=/); updateUI should be a function js assert isFunction(updateUI); updateUI should use arrow syntax js assert match(code, /const\\s+updateUI\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); updateUI should take a single array parameter js assert match(code, /const\\s+updateUI\\s*=\\s*\\( \\s*array/); updateUI should have a fallback value of an empty array for array js assert match(code, /const\\s+updateUI\\s*=\\s*\\(\\s*array\\s*=\\s*\\[\\s*\\]\\s*\\)/); updateUI should be empty js assertmatch(code, /const\\s+updateUI\\s*=\\s*\\(\\s*array\\s*=\\s*\\[\\s*\\]\\s*\\)\\s*=>\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c303b4272606c019f338.md",
      "source_type": "git_repo"
    },
    "token_count": 654,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c1acf74bf401403d4e1e91b2902726dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c303b4272606c019f338.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c303b4272606c019f338.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7366d35575f0e8db243c53b004ca10a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c303b4272606c019f338.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n}\n--fcc-editable-region--\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c303b4272606c019f338.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f14cd17faf4925f62a4008d6d491bd6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c4abf5be6d07d8c12ade.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407c4abf5be6d07d8c12ade\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nTo perform an action on each element in the array, use the method that is meant for iterating over arrays Use the forEach() method, and pass it an empty callback which takes num and i as the parameters --hints--\nYou should use the forEach() method to iterate over the array parameter js\nassert match(code, /array\\ forEach\\(/);\nYour forEach() method should take a callback function using arrow syntax js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\( *\\)\\s*=>/);\nYour callback function should take two parameters, num and i js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>/);\nYour callback function should be empty js\nassert match(code, /array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c4abf5be6d07d8c12ade.md",
      "source_type": "git_repo"
    },
    "token_count": 205,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1365f6f55b07d402555638cb2bfaf945",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c4abf5be6d07d8c12ade.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "forEach() method, and pass it an empty callback which takes num and i as the parameters --hints-- You should use the forEach() method to iterate over the array parameter js assert match(code, /array\\ forEach\\(/); Your forEach() method should take a callback function using arrow syntax js assert match(code, /array\\ forEach\\s*\\(\\s*\\( *\\)\\s*=>/); Your callback function should take two parameters, num and i js assert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>/); Your callback function should be empty js assert match(code, /array\\forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*{\\s*}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c4abf5be6d07d8c12ade.md",
      "source_type": "git_repo"
    },
    "token_count": 602,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "650fe92a1bdf8c5ba1f01880a417ebcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c4abf5be6d07d8c12ade.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c4abf5be6d07d8c12ade.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "51725f771c987788dfdcf453c50385f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c4abf5be6d07d8c12ade.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n}\n--fcc-editable-region--\nconst updateUI = (array = []) => {\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c4abf5be6d07d8c12ade.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ce8593c13ffadd6f6db026f083498352",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c627ddc93708c8dee796.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407c627ddc93708c8dee796\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nCreate a variable named outputValueNode and set its value to the result of calling the document getElementById() method Use template literal syntax to pass in the `output-value-${i}` string to getElementById() --hints--\nUse const to declare an outputValueNode variable in your forEach() callback js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=/)\noutputValueNode should be assigned the value of calling document getElementById() js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=\\s*document\\ getElementById\\s*\\(/)\nUse template literal syntax to pass in the output-value-${i} string to getElementById() js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8397,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c627ddc93708c8dee796.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1def17ba0e0b5adb868dfac598ba5a05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c627ddc93708c8dee796.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "outputValueNode and set its value to the result of calling the document getElementById() method Use template literal syntax to pass in the `output-value-${i}` string to getElementById() --hints-- Use const to declare an outputValueNode variable in your forEach() callback js assert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=/) outputValueNode should be assigned the value of calling document getElementById() js assert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=\\s*document\\ getElementById\\s*\\(/) Use template literal syntax to pass in the output-value-${i} string to getElementById() js assert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=\\s*document\\getElementById\\s*\\(\\s*`output-value-\\$\\{i\\}`\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8397,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c627ddc93708c8dee796.md",
      "source_type": "git_repo"
    },
    "token_count": 687,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "904168c3041a22a1f7379766ffed4506",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c627ddc93708c8dee796.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8397,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c627ddc93708c8dee796.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "57f9e7ca0b50fd31a22abdca28544928",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c627ddc93708c8dee796.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n}\n--fcc-editable-region--\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\n})\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8397,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c627ddc93708c8dee796.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "402fcb2e7ae450b8142c6dc5f26355f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6d3f19c4e0a7ba320bb.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407c6d3f19c4e0a7ba320bb\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nIn your sortInputArray() function, call your updateUI() function and pass inputValues as the argument You should now be able to click the Sort button and see the inputted array in the Output section --hints--\nYou should call updateUI() in your sortInputArray() function js\nassert match(sortInputArray toString(), /updateUI\\(/);\nYou should pass inputValues as an argument to updateUI() js\nassert match(sortInputArray",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6d3f19c4e0a7ba320bb.md",
      "source_type": "git_repo"
    },
    "token_count": 135,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "46e279a5a5045acd74ac26af52f80134",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6d3f19c4e0a7ba320bb.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407c6d3f19c4e0a7ba320bb\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nIn your sortInputArray() function, call your updateUI() function and pass inputValues as the argument You should now be able to click the Sort button and see the inputted array in the Output section --hints--\nYou should call updateUI() in your sortInputArray() function js\nassert match(sortInputArray toString(), /updateUI\\(/);\nYou should pass inputValues as an argument to updateUI() js\nassert match(sortInputArraytoString(), /updateUI\\(\\s*inputValues\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6d3f19c4e0a7ba320bb.md",
      "source_type": "git_repo"
    },
    "token_count": 586,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4bf1a458bc993da58f569ab175abbde2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6d3f19c4e0a7ba320bb.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6d3f19c4e0a7ba320bb.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "27025672d34b3bec8152179c242ab49b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6d3f19c4e0a7ba320bb.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n--fcc-editable-region--\n--fcc-editable-region--\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6d3f19c4e0a7ba320bb.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0abf981d04698ad5f46c3d66575010c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6a2c2159309994779a5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407c6a2c2159309994779a5\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nSet the innerText property of outputValueNode to num --hints--\nYou should use innerText to set the text of outputValueNode js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=\\s*document\\ getElementById\\s*\\(\\s*`output-value-\\$\\{i\\}`\\s*\\)\\s*; \\s*outputValueNode\\ innerText/)\nYou should use innerText to set the text of outputValueNode to num js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=\\s*document\\ getElementById\\s*\\(\\s*`output-value-\\$\\{i\\}`\\s*\\)\\s*; \\s*outputValueNode\\ innerText\\s*=\\s*num\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8175,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6a2c2159309994779a5.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "df586c6ec12c60cb33c3241123cdf74a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6a2c2159309994779a5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407c6a2c2159309994779a5\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nSet the innerText property of outputValueNode to num --hints--\nYou should use innerText to set the text of outputValueNode js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=\\s*document\\ getElementById\\s*\\(\\s*`output-value-\\$\\{i\\}`\\s*\\)\\s*; \\s*outputValueNode\\ innerText/)\nYou should use innerText to set the text of outputValueNode to num js\nassert match(code, /array\\ forEach\\s*\\(\\s*\\(\\s*num\\s*,\\s*i\\s*\\)\\s*=>\\s*\\{\\s*const\\s+outputValueNode\\s*=\\s*document\\ getElementById\\s*\\(\\s*`output-value-\\$\\{i\\}`\\s*\\)\\s*; \\s*outputValueNode\\ innerText\\s*=\\s*num\\s*;/)\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8175,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6a2c2159309994779a5.md",
      "source_type": "git_repo"
    },
    "token_count": 689,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6d0f441c27851f85f96e10e0019461fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6a2c2159309994779a5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8175,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6a2c2159309994779a5.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "15a554974443a51172c9eacfd71a56be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6a2c2159309994779a5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n}\n--fcc-editable-region--\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\n})\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8175,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c6a2c2159309994779a5.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "29505fa0dca249d0cddcbbf456deaf91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c722498bc80b76d29073.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6407c722498bc80b76d29073\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nNow you need to actually sort the array The first sorting algorithm you will implement is the bubble sort, which starts at the beginning of the array and 'bubbles up' unsorted values towards the end, iterating through the array until it is completely sorted Begin by declaring a bubbleSort variable and assigning it an arrow function that takes an array parameter --hints--\nYou should use const to declare a bubbleSort variable js\nassert match(code, /const\\s+bubbleSort\\s*=/);\nbubbleSort should be a function js\nassert isFunction(bubbleSort);\nbubbleSort should use arrow syntax js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\( *\\)|[^\\s()]+)\\s*=>/);\nbubbleSort should take a single array parameter js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>/);\nbubbleSort should be empty js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8554,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c722498bc80b76d29073.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d519feb86164ea1b683869c1cc7d4683",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c722498bc80b76d29073.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "end, iterating through the array until it is completely sorted Begin by declaring a bubbleSort variable and assigning it an arrow function that takes an array parameter --hints-- You should use const to declare a bubbleSort variable js assert match(code, /const\\s+bubbleSort\\s*=/); bubbleSort should be a function js assert isFunction(bubbleSort); bubbleSort should use arrow syntax js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\( *\\)|[^\\s()]+)\\s*=>/); bubbleSort should take a single array parameter js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>/); bubbleSort should be empty js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8554,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c722498bc80b76d29073.md",
      "source_type": "git_repo"
    },
    "token_count": 624,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8a33dcf1c5fdc0651511f320537de610",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c722498bc80b76d29073.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8554,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c722498bc80b76d29073.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "16ac5ab545be2a9dea9d757e13dc4e05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c722498bc80b76d29073.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nupdateUI(inputValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\n--fcc-editable-region--\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8554,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6407c722498bc80b76d29073.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bdcd5fddf1982a314e4076b2ffc7740c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410da6df463a606dfade96f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410da6df463a606dfade96f\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nYou'll need to iterate through the array For simplicity, use a for loop to do so --hints--\nYou should use a for loop to iterate through the array js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(/)\nYour for loop should initialize i to 0 js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;/);\nYour for loop should have a condition that checks the value of i is less than the length of the array js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;/);\nYour for loop should increment i by 1 each time it runs js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)/);\nYour for loop should be empty js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8758,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410da6df463a606dfade96f.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "67af2102973d50ccd842bcf8b3138124",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410da6df463a606dfade96f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "for loop to iterate through the array js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(/) Your for loop should initialize i to 0 js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;/); Your for loop should have a condition that checks the value of i is less than the length of the array js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;/); Your for loop should increment i by 1 each time it runs js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)/); Your for loop should be empty js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*}\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8758,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410da6df463a606dfade96f.md",
      "source_type": "git_repo"
    },
    "token_count": 817,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4a51a5163ed06f4717b7024bcbc05f89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410da6df463a606dfade96f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8758,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410da6df463a606dfade96f.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e3b906781f7f03f8eb895024f888a450",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410da6df463a606dfade96f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nupdateUI(inputValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\n--fcc-editable-region--\nconst bubbleSort = (array) => {\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8758,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410da6df463a606dfade96f.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4df23a3f7bb74d4c4d887df4d89aa90c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e3c19c21cd09c32dc7c6.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410e3c19c21cd09c32dc7c6\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nIn your sortInputArray() function, declare a sortedValues variable Assign it the value of calling bubbleSort with your inputValues array Then, update your updateUI call to pass sortedValues as the argument --hints--\nYou should use const to declare a sortedValues variable js\nassert match(code, /const\\s+sortedValues\\s*=/);\nsortedValues should be assigned the value of calling bubbleSort with your inputValues array js\nassert match(code, /const\\s+sortedValues\\s*=\\s*bubbleSort\\s*\\(\\s*inputValues\\s*\\)/);\nupdateUI should be called with sortedValues as the argument js\nassert match(code, /updateUI\\s*\\(\\s*sortedValues\\s*\\)/);\nupdateUI should not be called with inputValues as the argument js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8596,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e3c19c21cd09c32dc7c6.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "fcd4ace255d5f904ad036060d66c68bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e3c19c21cd09c32dc7c6.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "the value of calling bubbleSort with your inputValues array Then, update your updateUI call to pass sortedValues as the argument --hints-- You should use const to declare a sortedValues variable js assert match(code, /const\\s+sortedValues\\s*=/); sortedValues should be assigned the value of calling bubbleSort with your inputValues array js assert match(code, /const\\s+sortedValues\\s*=\\s*bubbleSort\\s*\\(\\s*inputValues\\s*\\)/); updateUI should be called with sortedValues as the argument js assert match(code, /updateUI\\s*\\(\\s*sortedValues\\s*\\)/); updateUI should not be called with inputValues as the argument js assertnotMatch(code, /updateUI\\s*\\(\\s*inputValues\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8596,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e3c19c21cd09c32dc7c6.md",
      "source_type": "git_repo"
    },
    "token_count": 596,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8aff1651989077bc46bf3539f794d735",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e3c19c21cd09c32dc7c6.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8596,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e3c19c21cd09c32dc7c6.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "cf91411c7ffd7a29383ff310fadd5428",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e3c19c21cd09c32dc7c6.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n--fcc-editable-region--\nupdateUI(inputValues);\n--fcc-editable-region--\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nconsole log(array, array[j], array[j + 1]);\n}\n}\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8596,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e3c19c21cd09c32dc7c6.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a7449e9996b0f4b592433a6aab704913",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410dfb965c72108196ef24a\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nBecause you need to compare elements, you'll need to use a nested for loop This loop should iterate through every element in the array except the last one Use j as your inner loop's iterator variable --hints--\nYou should have a nested for loop js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(/);\nYour inner for loop should initialize j to 0 js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;/);\nYour inner for loop should iterate through every element in the array except the last one js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/);\nYour inner for loop should increment j by 1 each time js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "869da78bebb475b1e3ba4335c73eecf0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "the array except the last one Use j as your inner loop's iterator variable --hints-- You should have a nested for loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(/); Your inner for loop should initialize j to 0 js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;/); Your inner for loop should iterate through every element in the array except the last one js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should increment j by 1 each time js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "d4e8613d4d98295b3b50a0e7b93260bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "except the last one Use j as your inner loop's iterator variable --hints-- You should have a nested for loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(/); Your inner for loop should initialize j to 0 js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;/); Your inner for loop should iterate through every element in the array except the last one js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should increment j by 1 each time js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/);\nYour inner for loop should be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "77469903e0d1d07a24ee686af5d56935",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "your inner loop's iterator variable --hints-- You should have a nested for loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(/); Your inner for loop should initialize j to 0 js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;/); Your inner for loop should iterate through every element in the array except the last one js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should increment j by 1 each time js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should be emptyjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "644100313cdeffb47221a36b6669946d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "inner loop's iterator variable --hints-- You should have a nested for loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(/); Your inner for loop should initialize j to 0 js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;/); Your inner for loop should iterate through every element in the array except the last one js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should increment j by 1 each time js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should be emptyjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 567,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "af3a83783d002b9014033650ac023c08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "loop's iterator variable --hints-- You should have a nested for loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(/); Your inner for loop should initialize j to 0 js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;/); Your inner for loop should iterate through every element in the array except the last one js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should increment j by 1 each time js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should be emptyjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 612,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "6b0c6ea84d6e36bd76f5b40e410eda23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "loop's iterator variable --hints-- You should have a nested for loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(/); Your inner for loop should initialize j to 0 js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;/); Your inner for loop should iterate through every element in the array except the last one js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should increment j by 1 each time js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)/); Your inner for loop should be emptyjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*}\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 1077,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "cb4f3370bedc51870c79e9e198312924",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "36830667bcb727e81315b8b40c4bb65c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nupdateUI(inputValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\n--fcc-editable-region--\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410dfb965c72108196ef24a.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "3215add61bf3992c4e5857bd9249779d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410efff0ae97c0f06856511.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410efff0ae97c0f06856511\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nFinally, after your outer loop has finished executing, return the sorted array --hints--\nYou should return the array variable js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*; \\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*; \\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*temp\\s*; \\s*}\\s*}\\s*}\\s*return\\s+array\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410efff0ae97c0f06856511.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "92f534a72f6502db701b0a586f8a9018",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410efff0ae97c0f06856511.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410efff0ae97c0f06856511\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nFinally, after your outer loop has finished executing, return the sorted array --hints--\nYou should return the array variable js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*; \\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*; \\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*temp\\s*; \\s*}\\s*}\\s*}\\s*return\\s+array\\s*;\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410efff0ae97c0f06856511.md",
      "source_type": "git_repo"
    },
    "token_count": 834,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "811a183870fd3d8170ece4eca87dbc16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410efff0ae97c0f06856511.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410efff0ae97c0f06856511.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bd5ee9067c5b2278277c728699110884",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410efff0ae97c0f06856511.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = bubbleSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nconsole log(array, array[j], array[j + 1]);\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410efff0ae97c0f06856511.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e3cc107ceb8950dc76181eb2014fc572",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410e1b58efc2c091a13bcd9\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nFor debugging purposes, add a console log() call in your inner loop Pass it the arguments array, array[j], and array[j+1] --hints--\nYou should use a console log() call in your inner loop js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/);\nYou should pass array as the first argument to console log() js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/);\nYou should pass array[j] as the second argument to console log() js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "9e924c7269140185be27679b981c6168",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "0 dashedName: step-19 --description-- For debugging purposes, add a console log() call in your inner loop Pass it the arguments array, array[j], and array[j+1] --hints-- You should use a console log() call in your inner loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "6b8248212fd764d1a86f436a79b31c80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "dashedName: step-19 --description-- For debugging purposes, add a console log() call in your inner loop Pass it the arguments array, array[j], and array[j+1] --hints-- You should use a console log() call in your inner loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/);\nYou should pass array[j+1] as the third argument to console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 539,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "d7f1ad20d996424971214a31828089c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "call in your inner loop Pass it the arguments array, array[j], and array[j+1] --hints-- You should use a console log() call in your inner loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[j+1] as the third argument to consolelog()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 522,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "0549c7240c69b5fd1f3dff1600d32c14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "call in your inner loop Pass it the arguments array, array[j], and array[j+1] --hints-- You should use a console log() call in your inner loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[j+1] as the third argument to consolelog()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 525,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "531c5d06350271b85634f524ff5a195e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "in your inner loop Pass it the arguments array, array[j], and array[j+1] --hints-- You should use a console log() call in your inner loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[j+1] as the third argument to consolelog()js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "17670ab899bbd2e0f4add38e9da6e039",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "your inner loop Pass it the arguments array, array[j], and array[j+1] --hints-- You should use a console log() call in your inner loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[j+1] as the third argument to consolelog()js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 629,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "a132b7a64fa175ecc32708ce7cbf2226",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "your inner loop Pass it the arguments array, array[j], and array[j+1] --hints-- You should use a console log() call in your inner loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[j+1] as the third argument to consolelog()js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 655,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "afb1e1cb769283944eba137b666178dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "your inner loop Pass it the arguments array, array[j], and array[j+1] --hints-- You should use a console log() call in your inner loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[j+1] as the third argument to consolelog()js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 1136,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "4ddfcf2590f98fceaea97f37bbfae676",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "5d43cc2a059d9d48251e492f20068943",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nupdateUI(inputValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\n--fcc-editable-region--\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\n}\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e1b58efc2c091a13bcd9.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "f80b46e5639cf67ef53317931ac9f614",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410e70c84bb660b4d2a5ea1\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nTo achieve the \"bubble up\" result, you need to check if the current element is larger than the next element You can do this by accessing the array at j and j+1 Create an if condition that checks if the current element is larger than the next element --hints--\nYou should not remove your console log statement js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /);\nYou should use an if statement in your nested loop js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 15
  },
  {
    "id": "e3e9e2961f67022058258be8a6fc3910",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "you need to check if the current element is larger than the next element You can do this by accessing the array at j and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/);\nYour if statement should check if the array[j] is larger than the array[j+1] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 1,
    "total_chunks": 15
  },
  {
    "id": "b85e5b214b8b43779166712a036c1dbf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "can do this by accessing the array at j and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 2,
    "total_chunks": 15
  },
  {
    "id": "3136cde146d2d6a2d5d7b5fb7a3b1df6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "do this by accessing the array at j and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 550,
    "chunk_index": 3,
    "total_chunks": 15
  },
  {
    "id": "6c6ff8d0bd240211f08620ffe7760175",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "do this by accessing the array at j and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 576,
    "chunk_index": 4,
    "total_chunks": 15
  },
  {
    "id": "81abfdec947a7e2af558873b7ed84c57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "do this by accessing the array at j and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 623,
    "chunk_index": 5,
    "total_chunks": 15
  },
  {
    "id": "248c0861cda3b781a44630da848b0de9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "do this by accessing the array at j and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)/);\nYour if statement should be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 670,
    "chunk_index": 6,
    "total_chunks": 15
  },
  {
    "id": "b1b11912e8d13cd2a58cd8f47a2a2e73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "at j and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)/); Your if statement should be emptyjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 667,
    "chunk_index": 7,
    "total_chunks": 15
  },
  {
    "id": "ee6bd9e5e303a6d908a60914dcaa3e4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "j and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)/); Your if statement should be emptyjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 726,
    "chunk_index": 8,
    "total_chunks": 15
  },
  {
    "id": "7197bd1207536b7d009c21e1055d3fcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)/); Your if statement should be emptyjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 771,
    "chunk_index": 9,
    "total_chunks": 15
  },
  {
    "id": "3e8fa6071bc3117161816cddc6a3a8b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)/); Your if statement should be emptyjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 797,
    "chunk_index": 10,
    "total_chunks": 15
  },
  {
    "id": "43d7f9b7b0f30f557ea6ac049b092188",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)/); Your if statement should be emptyjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 844,
    "chunk_index": 11,
    "total_chunks": 15
  },
  {
    "id": "2e73070dc55df2f882f4e497828e85d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "and j+1 Create an if condition that checks if the current element is larger than the next element --hints-- You should not remove your console log statement js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; /); You should use an if statement in your nested loop js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); Your if statement should check if the array[j] is larger than the array[j+1] js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)/); Your if statement should be emptyjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 1327,
    "chunk_index": 12,
    "total_chunks": 15
  },
  {
    "id": "28bf8de978f97e1b9a9b6cf8a24a5bce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 13,
    "total_chunks": 15
  },
  {
    "id": "95945d499646c3799ca1cab0e8ea2a92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = bubbleSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nconsole log(array, array[j], array[j + 1]);\n--fcc-editable-region--\n--fcc-editable-region--\n}\n}\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410e70c84bb660b4d2a5ea1.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 14,
    "total_chunks": 15
  },
  {
    "id": "54a380df84c21769cf24e3a1e48e2ec6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f97a721cd1144804b7a8.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410f97a721cd1144804b7a8\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nLike a bubble sort, a selection sort needs to iterate through the array Declare a for loop to do so --hints--\nYou should use a for loop js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(/);\nYour for loop should initialize a variable i to 0 js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*/);\nYour for loop should have a condition that checks if the value of i is less than the length of the array js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*/);\nYour for loop should increment i by 1 each time it runs js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*/);\nYour for loop should have an empty body js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f97a721cd1144804b7a8.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "cff7e64885548da4b6537a42e240d0d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f97a721cd1144804b7a8.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(/); Your for loop should initialize a variable i to 0 js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*/); Your for loop should have a condition that checks if the value of i is less than the length of the array js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*/); Your for loop should increment i by 1 each time it runs js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*/); Your for loop should have an empty body js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*}\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f97a721cd1144804b7a8.md",
      "source_type": "git_repo"
    },
    "token_count": 820,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "bf381541481cc0da77074fcecd51e1fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f97a721cd1144804b7a8.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f97a721cd1144804b7a8.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c0f65f169c330cb68cc90b3796ff5585",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f97a721cd1144804b7a8.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = selectionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\n--fcc-editable-region--\nconst selectionSort = (array) => {\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f97a721cd1144804b7a8.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8aeb366b9fe662458bf506d61b7d89c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f149110ec60fd40fcfe1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410f149110ec60fd40fcfe1\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nTime to implement another sorting algorithm This time, you'll be implementing a selection sort Selection sort works by finding the smallest value in the array, then swapping it with the first value in the array Then, it finds the next smallest value in the array, and swaps it with the second value in the array It continues iterating through the array until it is completely sorted Start by declaring a selectionSort variable and assigning it an arrow function that takes an array parameter --hints--\nYou should use const to declare a selectionSort variable js\nassert match(code, /const\\s+selectionSort\\s*=/);\nselectionSort should be a function js\nassert isFunction(selectionSort);\nselectionSort should use arrow syntax js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nselectionSort should take a single array parameter js\nassert match(code, /const\\s+selectionSort\\s*=\\s*\\( \\s*array/);\nselectionSort should be empty js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f149110ec60fd40fcfe1.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "615b77b9b77a11bac2b2ba3d38326dbe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f149110ec60fd40fcfe1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "continues iterating through the array until it is completely sorted Start by declaring a selectionSort variable and assigning it an arrow function that takes an array parameter --hints-- You should use const to declare a selectionSort variable js assert match(code, /const\\s+selectionSort\\s*=/); selectionSort should be a function js assert isFunction(selectionSort); selectionSort should use arrow syntax js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); selectionSort should take a single array parameter js assert match(code, /const\\s+selectionSort\\s*=\\s*\\( \\s*array/); selectionSort should be empty js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f149110ec60fd40fcfe1.md",
      "source_type": "git_repo"
    },
    "token_count": 617,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f91f98cb97117b196c506f07edcd4a47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f149110ec60fd40fcfe1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f149110ec60fd40fcfe1.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "71eb54dba03ec96afba58a87cb7f6dca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f149110ec60fd40fcfe1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = bubbleSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\n--fcc-editable-region--\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f149110ec60fd40fcfe1.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "958682bdb22c2acfb05240614e594bba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f9a443d57414ee50fada.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410f9a443d57414ee50fada\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nClick your Sort button to see your bubble sort algorithm in action If you open the console, you can watch the steps the algorithm takes Now that you have confirmed it works, remove your console log() call --hints--\nYou should remove your console log() call js\n// Thanks loop-protect\nassert notMatch(bubbleSort toString(), /console\\ log\\(\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f9a443d57414ee50fada.md",
      "source_type": "git_repo"
    },
    "token_count": 115,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "443eefce99f36ba9201a0969c8c6662f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f9a443d57414ee50fada.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410f9a443d57414ee50fada\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nClick your Sort button to see your bubble sort algorithm in action If you open the console, you can watch the steps the algorithm takes Now that you have confirmed it works, remove your console log() call --hints--\nYou should remove your console log() call js\n// Thanks loop-protect\nassert notMatch(bubbleSort toString(), /console\\ log\\(\\s*(\"Potential infinite)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f9a443d57414ee50fada.md",
      "source_type": "git_repo"
    },
    "token_count": 556,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7b656e1be25cd20860e33c688603633b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f9a443d57414ee50fada.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f9a443d57414ee50fada.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "edf3f7840461c253173b0454290785e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f9a443d57414ee50fada.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = bubbleSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\n--fcc-editable-region--\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nconsole log(array, array[j], array[j + 1]);\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410f9a443d57414ee50fada.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "605fc682cd785d1149a8ec34ab09ff85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410edb33eeaf50dd9a22ab4\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nWhen your if condition is true, you need to swap the two elements, \"bubbling\" the larger element up toward the end of the array To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints--\nWithin your if statement, you should declare a temp variable js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/);\nYou should assign temp the value of array[j] js\nassert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 24
  },
  {
    "id": "d1bf4582d0a7ecb979b96eb243427ef1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "elements, \"bubbling\" the larger element up toward the end of the array To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 1,
    "total_chunks": 24
  },
  {
    "id": "a819f2d22a2b07501879651da5887412",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "elements, \"bubbling\" the larger element up toward the end of the array To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 24
  },
  {
    "id": "b26c933871b6fc6d8b4edbe6765f6e18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "elements, \"bubbling\" the larger element up toward the end of the array To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 569,
    "chunk_index": 3,
    "total_chunks": 24
  },
  {
    "id": "bc38468cfa894a37e5390ffbc8d94ae6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "elements, \"bubbling\" the larger element up toward the end of the array To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/);\nYou should assign array[j] the value of array[j + 1]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 585,
    "chunk_index": 4,
    "total_chunks": 24
  },
  {
    "id": "7d04510d21da6a9ae441dc512283c09e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "the array To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 573,
    "chunk_index": 5,
    "total_chunks": 24
  },
  {
    "id": "b850f0b9b4e782878fdacf9965d89814",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "array To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 632,
    "chunk_index": 6,
    "total_chunks": 24
  },
  {
    "id": "d446bee3a052b76433563a16dcb8a4c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 677,
    "chunk_index": 7,
    "total_chunks": 24
  },
  {
    "id": "3d14779bff48a084a9945cc9e1550257",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 703,
    "chunk_index": 8,
    "total_chunks": 24
  },
  {
    "id": "4ef985525ac7bc846675c4959ee27ac1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 750,
    "chunk_index": 9,
    "total_chunks": 24
  },
  {
    "id": "291bb80e4d8fbeece1a66d782fcbe086",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 816,
    "chunk_index": 10,
    "total_chunks": 24
  },
  {
    "id": "86543e4c21c8fa69cc6afa2d876bf0b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 850,
    "chunk_index": 11,
    "total_chunks": 24
  },
  {
    "id": "9825f706856d1df689a1ea79378770e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "To do this, declare a temp variable and assign it the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/);\nYou should assign array[j + 1] the value of temp",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 864,
    "chunk_index": 12,
    "total_chunks": 24
  },
  {
    "id": "4a575e923ef88bfb2a4c66a62757a8c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "the value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 856,
    "chunk_index": 13,
    "total_chunks": 24
  },
  {
    "id": "0464b1ae48e68d67d8d20859015b745e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 915,
    "chunk_index": 14,
    "total_chunks": 24
  },
  {
    "id": "4671a92afe451bdf80dec5780fe4b263",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 960,
    "chunk_index": 15,
    "total_chunks": 24
  },
  {
    "id": "5b80f2422f081bc5ed9a61085230ca91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 986,
    "chunk_index": 16,
    "total_chunks": 24
  },
  {
    "id": "a6512b96e84e25732e2c67eba30f2da3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 1033,
    "chunk_index": 17,
    "total_chunks": 24
  },
  {
    "id": "afb87ba9e55f56a6f70bdb9990a1cd9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 1099,
    "chunk_index": 18,
    "total_chunks": 24
  },
  {
    "id": "c70b20a66321529a4698691795a8a0d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 1133,
    "chunk_index": 19,
    "total_chunks": 24
  },
  {
    "id": "8f27b13263d1958507ca0cb4147cdf14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*temp\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 1159,
    "chunk_index": 20,
    "total_chunks": 24
  },
  {
    "id": "42bfecda92aa2ac1762c6056d54a6b69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "of array[j] Then assign array[j] the value of array[j + 1] Finally, assign array[j + 1] the value of temp --hints-- Within your if statement, you should declare a temp variable js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\ length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=/); You should assign temp the value of array[j] js assert match(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;/); You should assign array[j] the value of array[j + 1]js assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;/); You should assign array[j + 1] the value of tempjs assertmatch(code, /const\\s+bubbleSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*0\\s*;\\s*j\\s*<\\s*array\\length\\s*-\\s*1\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\s*\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*\\)\\s*{\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*;\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*temp\\s*;/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 1596,
    "chunk_index": 21,
    "total_chunks": 24
  },
  {
    "id": "35e02e531dc24ebb92189021bf321c4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 22,
    "total_chunks": 24
  },
  {
    "id": "cb9845bd72e7a05d04a23d34d9b95391",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = bubbleSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nconsole log(array, array[j], array[j + 1]);\n--fcc-editable-region--\nif (array[j] > array[j + 1]) {\n}\n--fcc-editable-region--\n}\n}\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410edb33eeaf50dd9a22ab4.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 23,
    "total_chunks": 24
  },
  {
    "id": "70fb106b16fed16d2c53182ccce6ca9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110377201e7b1a0de0d558.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64110377201e7b1a0de0d558\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nUpdate your sortedValues variable to be the result of calling selectionSort instead of bubbleSort --hints--\nYour sortedValues variable should be assigned the value of calling selectionSort with your inputValues array js\nassert match(code, /const\\s+sortedValues\\s*=\\s*selectionSort\\s*\\(\\s*inputValues\\s*\\)/);\nYou should not call bubbleSort in your code js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110377201e7b1a0de0d558.md",
      "source_type": "git_repo"
    },
    "token_count": 121,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7cc8a1f6d2df869128dc74b700a2ef79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110377201e7b1a0de0d558.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64110377201e7b1a0de0d558\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nUpdate your sortedValues variable to be the result of calling selectionSort instead of bubbleSort --hints--\nYour sortedValues variable should be assigned the value of calling selectionSort with your inputValues array js\nassert match(code, /const\\s+sortedValues\\s*=\\s*selectionSort\\s*\\(\\s*inputValues\\s*\\)/);\nYou should not call bubbleSort in your code js\nassertnotMatch(code, /bubbleSort\\s*\\(/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110377201e7b1a0de0d558.md",
      "source_type": "git_repo"
    },
    "token_count": 568,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8e843ef90d08962f0e7ce14ab8676958",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110377201e7b1a0de0d558.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110377201e7b1a0de0d558.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "8b60b6416ed65f19933ac2fa8aa5bf6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110377201e7b1a0de0d558.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n--fcc-editable-region--\nconst sortedValues = bubbleSort(inputValues);\nupdateUI(sortedValues);\n--fcc-editable-region--\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110377201e7b1a0de0d558.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5e8d3b615202ff2341fbe799454ef005",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410fb3b68429716a810ea4b\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nA selection sort relies on tracking the index of the smallest value in the array Declare a variable minIndex and set it to i - this ensures that if your current value is the smallest, it will be swapped with itself and not be moved You will need to be able to reassign the value of minIndex as you iterate through the array Then, write another for loop, using j as the iterator This loop needs to start at the index after i and iterate through the rest of the array --hints--\nYou should use let to declare minIndex js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/)\nYou should set minIndex to i js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /)\nYou should have a nested for loop js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/)\nYour for loop should initialize j to i + 1 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "2d6ab9a8f84d7ae3e84211fe4a63eca2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "another for loop, using j as the iterator This loop needs to start at the index after i and iterate through the rest of the array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/);\nYour for loop should iterate through the rest of the array js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "d9dc8150559f451ccb524eb9b2e3cec4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "after i and iterate through the rest of the array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 529,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "0b1206fa43652fec1d245d41bff4bd57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "i and iterate through the rest of the array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 559,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "700b1390c399a5c16346630d9388ee47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "i and iterate through the rest of the array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 594,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "207e5db7f147cff535d2d4f600fcaa9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "i and iterate through the rest of the array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;/);\nYour for loop should increment j",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 605,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "d3b9b99d6ddbf45eec21bc51e971ef36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "of the array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;/); Your for loop should increment jjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 602,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "20f1d59d6b087976d24a3bc0e7a9f118",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "the array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;/); Your for loop should increment jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 661,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "9df27ef945aca280ef022d61daf4feb9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;/); Your for loop should increment jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 691,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "cdbc1fb271a0cc4bfa972cd1d2273e68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;/); Your for loop should increment jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 726,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "b8f136e6001e5c1dae201241227ae279",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "array --hints-- You should use let to declare minIndex js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=/) You should set minIndex to i js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; /) You should have a nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(/) Your for loop should initialize j to i + 1 js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;/); Your for loop should iterate through the rest of the array js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;/); Your for loop should increment jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 1179,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "39a9c83dd6ca80a9a4c1625f5d1ba7b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "efa22eb4896d3faba79f07c3f4a750ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = selectionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\n--fcc-editable-region--\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10218,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fb3b68429716a810ea4b.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "66d1c6efa9f3aafec3e5ebb7470d217f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110727cefd3d1d9bdb0128.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64110727cefd3d1d9bdb0128\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nFinally, after your outer loop has finished, you need to return the array Once you've done so, you should be able to see the Output change when you click the Sort button again --hints--\nYou should return the array after your outer loop completes js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*; \\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*=\\s*temp\\s*; \\s*}\\s*return\\s+array\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110727cefd3d1d9bdb0128.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "fa931ddd17852e842409ab1b31119a17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110727cefd3d1d9bdb0128.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64110727cefd3d1d9bdb0128\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nFinally, after your outer loop has finished, you need to return the array Once you've done so, you should be able to see the Output change when you click the Sort button again --hints--\nYou should return the array after your outer loop completes js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*; \\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*=\\s*temp\\s*; \\s*}\\s*return\\s+array\\s*;\\s*/)\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110727cefd3d1d9bdb0128.md",
      "source_type": "git_repo"
    },
    "token_count": 871,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "71568ce56a79e76fb16f953073a11ec7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110727cefd3d1d9bdb0128.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110727cefd3d1d9bdb0128.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "89718b183ac66805812c480c6dd4a5d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110727cefd3d1d9bdb0128.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = selectionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\n--fcc-editable-region--\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nconsole log(array, array[j], array[minIndex]);\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110727cefd3d1d9bdb0128.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1305f345d2aeb286d755ae09b0c9b234",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411083020a3101e9514a0f5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6411083020a3101e9514a0f5\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nWith your selection sort now functional, remove your console log() statement --hints--\nYou should remove the console log() statement from selectionSort() js\n// Thanks loop-protect\nassert notMatch(selectionSort toString(), /console\\ log\\(\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411083020a3101e9514a0f5.md",
      "source_type": "git_repo"
    },
    "token_count": 92,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "65133a2f682651d1517f1cee7bcdf07d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411083020a3101e9514a0f5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6411083020a3101e9514a0f5\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nWith your selection sort now functional, remove your console log() statement --hints--\nYou should remove the console log() statement from selectionSort() js\n// Thanks loop-protect\nassert notMatch(selectionSort toString(), /console\\ log\\(\\s*(\"Potential infinite)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411083020a3101e9514a0f5.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d3aeccc4b615503cd7198510142d0cc1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411083020a3101e9514a0f5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411083020a3101e9514a0f5.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "dbc8312da8941a31612d2883444e3016",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411083020a3101e9514a0f5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = selectionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\n--fcc-editable-region--\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nconsole log(array, array[j], array[minIndex]);\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411083020a3101e9514a0f5.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0f156299b8559eb617f8c080a3c460ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110998bc00321fd8052ab5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64110998bc00321fd8052ab5\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nThe last sorting algorithm you will implement is the insertion sort This algorithm works by building up a sorted array at the beginning of the list It begins the sorted array with the first element Then it inspects the next element and swaps it backward into the sorted array until it is in a sorted position, and so on Start by declaring an insertionSort variable and assigning it an arrow function which takes an array parameter --hints--\nYou should use const to declare an insertionSort variable js\nassert match(code, /const\\s+insertionSort\\s*=/);\ninsertionSort should be a function js\nassert isFunction(insertionSort);\ninsertionSort should use arrow syntax js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\ninsertionSort should take a single array parameter js\nassert match(code, /const\\s+insertionSort\\s*=\\s*\\( \\s*array/);\ninsertionSort should be empty js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9334,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110998bc00321fd8052ab5.md",
      "source_type": "git_repo"
    },
    "token_count": 247,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1459925de7e4b9c84faba3f24d09ee15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110998bc00321fd8052ab5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "until it is in a sorted position, and so on Start by declaring an insertionSort variable and assigning it an arrow function which takes an array parameter --hints-- You should use const to declare an insertionSort variable js assert match(code, /const\\s+insertionSort\\s*=/); insertionSort should be a function js assert isFunction(insertionSort); insertionSort should use arrow syntax js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); insertionSort should take a single array parameter js assert match(code, /const\\s+insertionSort\\s*=\\s*\\( \\s*array/); insertionSort should be empty js assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9334,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110998bc00321fd8052ab5.md",
      "source_type": "git_repo"
    },
    "token_count": 622,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "79a84759c2bfea11666ebfb651559de9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110998bc00321fd8052ab5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9334,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110998bc00321fd8052ab5.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f7bca1d4d04d6f6e45b6504c03ad7e0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110998bc00321fd8052ab5.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = selectionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\n--fcc-editable-region--\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9334,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110998bc00321fd8052ab5.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2e64c5134c13f76bf52117984c48ff0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6411024727181d190ef03166\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nAfter your nested for loop, you've found the smallest value You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints--\nAfter your nested for loop, you should declare a temp variable js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/);\nYou should assign array[i] to temp js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 27
  },
  {
    "id": "430e99413e2786b652147084b51b99e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "your nested for loop, you've found the smallest value You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 27
  },
  {
    "id": "7eb7da893a5c43cbc2ba9b7261e73b7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "nested for loop, you've found the smallest value You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 528,
    "chunk_index": 2,
    "total_chunks": 27
  },
  {
    "id": "143be4e86d324ecd2b5eadd5dfea33a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "nested for loop, you've found the smallest value You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 580,
    "chunk_index": 3,
    "total_chunks": 27
  },
  {
    "id": "620a1dc599e08b950ac71021070d5359",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "nested for loop, you've found the smallest value You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/)\nYou should assign array[minIndex] to array[i]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 618,
    "chunk_index": 4,
    "total_chunks": 27
  },
  {
    "id": "98ceebc5754289b38b0f283a82167afa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "smallest value You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 614,
    "chunk_index": 5,
    "total_chunks": 27
  },
  {
    "id": "c760a93fb38e2ca8f4be88ed707e070e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 672,
    "chunk_index": 6,
    "total_chunks": 27
  },
  {
    "id": "b42da10de9527a3eff8954a8e87bb996",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 702,
    "chunk_index": 7,
    "total_chunks": 27
  },
  {
    "id": "33310ee15850ac782574f34f3caf9bac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 737,
    "chunk_index": 8,
    "total_chunks": 27
  },
  {
    "id": "fb7b74e4889a078007264b5173bb8176",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 757,
    "chunk_index": 9,
    "total_chunks": 27
  },
  {
    "id": "ea8d9057e8da3731f89c3f92e849f38f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 799,
    "chunk_index": 10,
    "total_chunks": 27
  },
  {
    "id": "506b47517740b4cc033706cf20098f60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 851,
    "chunk_index": 11,
    "total_chunks": 27
  },
  {
    "id": "c35f39d247248c7aff6c87897d607b67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 880,
    "chunk_index": 12,
    "total_chunks": 27
  },
  {
    "id": "49d88b9ff9781aa295b93b85dd830056",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You need to swap it with your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/)\nYou should assign temp to array[minIndex]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 917,
    "chunk_index": 13,
    "total_chunks": 27
  },
  {
    "id": "da41b6dcf8088e4f134b7bae99dcd19f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "your current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 914,
    "chunk_index": 14,
    "total_chunks": 27
  },
  {
    "id": "b35845a5a037e9160304a92c1846beff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "current value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 973,
    "chunk_index": 15,
    "total_chunks": 27
  },
  {
    "id": "bdea3e3aeffa9df9962a7e89a5bdf897",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1003,
    "chunk_index": 16,
    "total_chunks": 27
  },
  {
    "id": "cb8d41c14efd3ac9bbadfa60274056b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1038,
    "chunk_index": 17,
    "total_chunks": 27
  },
  {
    "id": "d189bf795c19f89f7acfcea3514a2dbf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1058,
    "chunk_index": 18,
    "total_chunks": 27
  },
  {
    "id": "a6d84d4d51a1291ddb9807e322620822",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1100,
    "chunk_index": 19,
    "total_chunks": 27
  },
  {
    "id": "d628a5e3c5da08fa99105d4684254794",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1152,
    "chunk_index": 20,
    "total_chunks": 27
  },
  {
    "id": "426f8a58b1529ec58d803e13a3d3b455",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1181,
    "chunk_index": 21,
    "total_chunks": 27
  },
  {
    "id": "4d3c69742f9abc419662e52e4527d3ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1211,
    "chunk_index": 22,
    "total_chunks": 27
  },
  {
    "id": "49c3f2c0445abd323f378f2293dfda3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*;\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*=\\s*temp\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1233,
    "chunk_index": 23,
    "total_chunks": 27
  },
  {
    "id": "6592781a1d31432552239e98fa3cdb57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value Like you did in your bubble sort, use a temp variable to extract the value at array[i], then swap the values at array[i] and array[minIndex] --hints-- After your nested for loop, you should declare a temp variable js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*; \\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*; \\s*}\\s*}\\s*const\\s+temp\\s*=/); You should assign array[i] to temp js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]/) You should assign array[minIndex] to array[i]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]/) You should assign temp to array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}\\s*}\\s*const\\s+temp\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*array\\s*\\[\\s*i\\s*\\]\\s*=\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*;\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*=\\s*temp\\s*;\\s*}/)\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 1673,
    "chunk_index": 24,
    "total_chunks": 27
  },
  {
    "id": "0c2e0e25163de3ec3a4d00e737da0fe0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 25,
    "total_chunks": 27
  },
  {
    "id": "9efb7ec0e44382aeb5c3f8ac32dd67fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = selectionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\n--fcc-editable-region--\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nconsole log(array, array[j], array[minIndex]);\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10994,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411024727181d190ef03166.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 26,
    "total_chunks": 27
  },
  {
    "id": "281e0252d2f993fda0efd51bfadc2a09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110a03f6a450209b01f45c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64110a03f6a450209b01f45c\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nAs before, update your sortedValues variable to be the result of insertionSort instead of selectionSort --hints--\nYou should call insertionSort with your inputValues array js\nassert match(code, /const\\s+sortedValues\\s*=\\s*insertionSort\\s*\\(\\s*inputValues\\s*\\)/);\nYou should not call selectionSort in your code js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110a03f6a450209b01f45c.md",
      "source_type": "git_repo"
    },
    "token_count": 116,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a469560c431d3b6d8b29a748366108ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110a03f6a450209b01f45c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64110a03f6a450209b01f45c\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nAs before, update your sortedValues variable to be the result of insertionSort instead of selectionSort --hints--\nYou should call insertionSort with your inputValues array js\nassert match(code, /const\\s+sortedValues\\s*=\\s*insertionSort\\s*\\(\\s*inputValues\\s*\\)/);\nYou should not call selectionSort in your code js\nassertnotMatch(code, /selectionSort\\s*\\(/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110a03f6a450209b01f45c.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6f6ce37dd92df250158a626f68a74aa0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110a03f6a450209b01f45c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110a03f6a450209b01f45c.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "80282fa0c8fb8433d8198d4ef68a9bc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110a03f6a450209b01f45c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n--fcc-editable-region--\nconst sortedValues = selectionSort(inputValues);\n--fcc-editable-region--\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\nconst insertionSort = (array) => {\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110a03f6a450209b01f45c.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "90ff474991345eca1242f20c8827a634",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110b1849454521871243ca.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64110b1849454521871243ca\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nAn insertion sort algorithm starts the sort at the beginning of the list, meaning the first element is already sorted With this in mind, create a for loop that starts at the second element in the array - it should still iterate through the rest of the array --hints--\nYou should use a for loop to iterate through the array js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(/);\nYour for loop should initialize i at 1 js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*/);\nYour for loop should have a condition that checks the value of i is less than the length of the array js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*/);\nYour for loop should increment i by 1 each time it runs js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*/);\nYour for loop should be empty js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110b1849454521871243ca.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "bf27c23cdb209ceb6dbc425ec1d927b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110b1849454521871243ca.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "for loop to iterate through the array js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(/); Your for loop should initialize i at 1 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*/); Your for loop should have a condition that checks the value of i is less than the length of the array js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*/); Your for loop should increment i by 1 each time it runs js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*/); Your for loop should be empty js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*}\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110b1849454521871243ca.md",
      "source_type": "git_repo"
    },
    "token_count": 825,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d86a332020615af32c03798e551c82ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110b1849454521871243ca.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110b1849454521871243ca.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d60d157ea7a5bd83f5c01f8170303163",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110b1849454521871243ca.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = insertionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\n--fcc-editable-region--\nconst insertionSort = (array) => {\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64110b1849454521871243ca.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b5752949a594db4d10c7d78f3b8b2d9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6411108bc8b9c324f66aab4c\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nDeclare a currValue variable and assign it the value at array[i] Then, declare a j variable and assign it i - 1 Your j variable should be re-assignable --hints--\nYou should declare a currValue variable with const js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=/);\nYou should assign currValue the value at array[i] js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; /);\nYou should declare a j variable with let js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=/);\nYou should assign j the value of i - 1 js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9660,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "b32493f5056b5df55e81e08cd0b78585",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value at array[i] Then, declare a j variable and assign it i - 1 Your j variable should be re-assignable --hints-- You should declare a currValue variable with const js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=/); You should assign currValue the value at array[i] js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; /); You should declare a j variable with let js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=/); You should assign j the value of i - 1 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9660,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "be0383e5700a70797fbfb9d2cde83114",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value at array[i] Then, declare a j variable and assign it i - 1 Your j variable should be re-assignable --hints-- You should declare a currValue variable with const js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=/); You should assign currValue the value at array[i] js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; /); You should declare a j variable with let js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=/); You should assign j the value of i - 1 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9660,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "90091ffbd0bc1ca8bdf46d1da6955244",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value at array[i] Then, declare a j variable and assign it i - 1 Your j variable should be re-assignable --hints-- You should declare a currValue variable with const js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=/); You should assign currValue the value at array[i] js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; /); You should declare a j variable with let js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=/); You should assign j the value of i - 1 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9660,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
      "source_type": "git_repo"
    },
    "token_count": 940,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "3ad9f0b76219fa3025cda502aef7a4f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9660,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "a40e1f72515c9ee9622cc4dbed8fde74",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = insertionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\n--fcc-editable-region--\nconst insertionSort = (array) => {\nfor (let i = 1; i < array length; i++) {\n}\n}\n--fcc-editable-region--\nsortButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9660,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "280324ab3285e14dd3816fa5e9ccbd29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "=> { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } --fcc-editable-region-- const insertionSort = (array) => { for (let i = 1; i < array length; i++) { } } --fcc-editable-region-- sortButtonaddEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9660,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411108bc8b9c324f66aab4c.md",
      "source_type": "git_repo"
    },
    "token_count": 136,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "23e6f848a940bd87741c077757e47732",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6410fcd1f731fd17cdb101a7\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nInside your nested for loop, add a console log() call to check the values of array, array[j], and array[minIndex] at each iteration You can click the Sort button to see how your algorithm is traversing the array Then write an if statement that checks if the value at array[j] is smaller than the value at array[minIndex] If it is, set minIndex to j --hints--\nYou should have a console log() call inside your nested for loop js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/);\nYou should pass array as the first argument to console log() js\nassert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/);\nYou should pass array[j] as the second argument to console log() js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 40
  },
  {
    "id": "95df33f2c76aa54359f19b6016619355",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "if statement that checks if the value at array[j] is smaller than the value at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 40
  },
  {
    "id": "8f30788d951b1382614f4d9ad80a6b15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "that checks if the value at array[j] is smaller than the value at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 2,
    "total_chunks": 40
  },
  {
    "id": "2741d671a0c3909fe034169d681e7f3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "that checks if the value at array[j] is smaller than the value at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 3,
    "total_chunks": 40
  },
  {
    "id": "944ecf66cd268c31fa52abbce82dd966",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "that checks if the value at array[j] is smaller than the value at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/);\nYou should pass array[minIndex] as the third argument to console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 570,
    "chunk_index": 4,
    "total_chunks": 40
  },
  {
    "id": "c460926b5a4a281f9dd6b1818ad81da0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "the value at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 560,
    "chunk_index": 5,
    "total_chunks": 40
  },
  {
    "id": "72c97d499faa9e6fc32ebcecf021b21c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "the value at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 6,
    "total_chunks": 40
  },
  {
    "id": "13d5d281efe7eeef5ab98144e871fc01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "value at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 622,
    "chunk_index": 7,
    "total_chunks": 40
  },
  {
    "id": "0df9cef8c370438652fbcfd41b77c031",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 652,
    "chunk_index": 8,
    "total_chunks": 40
  },
  {
    "id": "5a3d9157736d6eb7551af168d7f39f59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 687,
    "chunk_index": 9,
    "total_chunks": 40
  },
  {
    "id": "fa185d19399d82fc93abbcb0507bda5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 707,
    "chunk_index": 10,
    "total_chunks": 40
  },
  {
    "id": "1b7d48e8c5204145128e0f32182299b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 749,
    "chunk_index": 11,
    "total_chunks": 40
  },
  {
    "id": "bce86e520e98255bee9658ff2a1464f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "at array[minIndex] If it is, set minIndex to j --hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/);\nYou should have an if statement after your console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 759,
    "chunk_index": 12,
    "total_chunks": 40
  },
  {
    "id": "36c7898e2dcd3802f03430f9820edfd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "--hints-- You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 748,
    "chunk_index": 13,
    "total_chunks": 40
  },
  {
    "id": "4d317185e2edc129596c515c0a6fb0ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 748,
    "chunk_index": 14,
    "total_chunks": 40
  },
  {
    "id": "f557dbe863982b3a2c3cbd6ca79e2187",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "should have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 807,
    "chunk_index": 15,
    "total_chunks": 40
  },
  {
    "id": "4461eec9d3a2c4a5ccd5ed48753bb86a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 837,
    "chunk_index": 16,
    "total_chunks": 40
  },
  {
    "id": "84fd3d1b5d133cf9856c76f63f234179",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 872,
    "chunk_index": 17,
    "total_chunks": 40
  },
  {
    "id": "ce48d7eaaae3c1677020e9895ffd664c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 892,
    "chunk_index": 18,
    "total_chunks": 40
  },
  {
    "id": "1435ec12f59d1f17372ec5d4971046f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 934,
    "chunk_index": 19,
    "total_chunks": 40
  },
  {
    "id": "116acf56a96e67a9cf948e90ddeb883a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 940,
    "chunk_index": 20,
    "total_chunks": 40
  },
  {
    "id": "d5094c0ebf714a4dc3bd913192d5e079",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "have a console log() call inside your nested for loop js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/);\nYou should have a condition in your if statement that checks if array[j] is less than array[minIndex]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 963,
    "chunk_index": 21,
    "total_chunks": 40
  },
  {
    "id": "0c6b6cbd8d71f107acf89db1e798a08a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "log\\(/); You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 805,
    "chunk_index": 22,
    "total_chunks": 40
  },
  {
    "id": "7e710bdf882a6443436b8fd953c87c6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "You should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 861,
    "chunk_index": 23,
    "total_chunks": 40
  },
  {
    "id": "31d798a0c5abdb3ff6849674b0337d3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 891,
    "chunk_index": 24,
    "total_chunks": 40
  },
  {
    "id": "56944882c232a6b590b432935d367542",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 926,
    "chunk_index": 25,
    "total_chunks": 40
  },
  {
    "id": "5ab4d387456f909bc7aec4c81a888ae9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 946,
    "chunk_index": 26,
    "total_chunks": 40
  },
  {
    "id": "466d97e1bc46e7e278736d3e6a781523",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 988,
    "chunk_index": 27,
    "total_chunks": 40
  },
  {
    "id": "bcd21f9c6fffb5acc3d5dd67bb922db2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1028,
    "chunk_index": 28,
    "total_chunks": 40
  },
  {
    "id": "c2f56d2f10fd5c1e1ed9526806909a66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "should pass array as the first argument to console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/);\nYour if statement should set minIndex to j",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1038,
    "chunk_index": 29,
    "total_chunks": 40
  },
  {
    "id": "d75b10f4d1d694f4337ba40a359cb2bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "console log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/); Your if statement should set minIndex to jjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1033,
    "chunk_index": 30,
    "total_chunks": 40
  },
  {
    "id": "2688293a8f16fb2727031231d6651058",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "log() js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/); Your if statement should set minIndex to jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1092,
    "chunk_index": 31,
    "total_chunks": 40
  },
  {
    "id": "a4ec6e8011ea0e16cbd921356bfbdf0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/); Your if statement should set minIndex to jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1121,
    "chunk_index": 32,
    "total_chunks": 40
  },
  {
    "id": "798785cba74ba62a4852546bf6f1c567",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/); Your if statement should set minIndex to jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1156,
    "chunk_index": 33,
    "total_chunks": 40
  },
  {
    "id": "3f042c170951900268a8648f591834d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/); Your if statement should set minIndex to jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1176,
    "chunk_index": 34,
    "total_chunks": 40
  },
  {
    "id": "4800aed44facb4102d6bc3a22d1a8ec2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/); Your if statement should set minIndex to jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1218,
    "chunk_index": 35,
    "total_chunks": 40
  },
  {
    "id": "93c5268b22c49492dafb54cd33761cfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/); Your if statement should set minIndex to jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1270,
    "chunk_index": 36,
    "total_chunks": 40
  },
  {
    "id": "3a6a3abc8f38014efba9e74c7f9a13ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "js assert match(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*; \\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\ length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\ log\\(\\s*array\\s*,/); You should pass array[j] as the second argument to console log() js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,/); You should pass array[minIndex] as the third argument to consolelog()js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;/); You should have an if statement after your consolelog() calljs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(/); You should have a condition in your if statement that checks if array[j] is less than array[minIndex]js assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{/); Your if statement should set minIndex to jjs assertmatch(code, /const\\s+selectionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*let\\s+minIndex\\s*=\\s*i\\s*;\\s*for\\s*\\(\\s*let\\s+j\\s*=\\s*i\\s*\\+\\s*1\\s*;\\s*j\\s*<\\s*array\\length\\s*;\\s*j\\s*\\+\\+\\s*\\)\\s*{\\s*console\\log\\(\\s*array\\s*,\\s*array\\s*\\[\\s*j\\s*\\]\\s*,\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*;\\s*if\\s*\\(\\s*array\\s*\\[\\s*j\\s*\\]\\s*<\\s*array\\s*\\[\\s*minIndex\\s*\\]\\s*\\)\\s*{\\s*minIndex\\s*=\\s*j\\s*;\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 1710,
    "chunk_index": 37,
    "total_chunks": 40
  },
  {
    "id": "937963d2d6f83571431087cdcc0cdd59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 38,
    "total_chunks": 40
  },
  {
    "id": "5aa7499fc41085322f93ab91d1efb598",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = selectionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\n--fcc-editable-region--\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\n}\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6410fcd1f731fd17cdb101a7.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 39,
    "total_chunks": 40
  },
  {
    "id": "c13a8f575c75dddeb37d701a523e3774",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6411135e9ee2fa26c882eb02\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nOn each iteration of your while loop, it is finding an element that is larger than your current value You need to move that element to the right to make room for your current value Do so by assigning the value at the j index to the next index --hints--\nBefore decrementing j, assign the value at j to the index j + 1 js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)\\s*{\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*; \\s*j--\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "e715f0b2db68ecef6ec2ea4ea4d46210",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "0 dashedName: step-38 --description-- On each iteration of your while loop, it is finding an element that is larger than your current value You need to move that element to the right to make room for your current value Do so by assigning the value at the j index to the next index --hints-- Before decrementing j, assign the value at j to the index j + 1 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)\\s*{\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*; \\s*j--\\s*;\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
      "source_type": "git_repo"
    },
    "token_count": 730,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "647d56b78dae1424c4e17adfee91ae8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ba540992f05120027d92317e8c526a46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = insertionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\n--fcc-editable-region--\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "2d339157ec0cdadee5a6a48e932a7a89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } --fcc-editable-region-- const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\nj--;\n}\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6411135e9ee2fa26c882eb02.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "d87f6f843bb6d71862da8faefd637d74",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64112c9cf53d632910ea2f9b\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nAfter your while loop, you need to insert your current value Remember that your loop ends when j is either out of the array bounds, or when the value at j is less than your current value Use the assignment operator to insert your current value into the correct index --hints--\nYou should assign currValue to the index j + 1 js\nassert match(code, /const\\s+insertionSort\\s*=\\s*\\(\\s*array\\s*\\)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)\\s*{\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*; \\s*j--\\s*; \\s*\\}\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*currValue\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "f4c59c0992c04c4cb502ebfe81405be8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "39 challengeType: 0 dashedName: step-39 --description-- After your while loop, you need to insert your current value Remember that your loop ends when j is either out of the array bounds, or when the value at j is less than your current value Use the assignment operator to insert your current value into the correct index --hints-- You should assign currValue to the index j + 1 js assert match(code, /const\\s+insertionSort\\s*=\\s*\\(\\s*array\\s*\\)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)\\s*{\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*; \\s*j--\\s*; \\s*\\}\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*currValue\\s*;/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
      "source_type": "git_repo"
    },
    "token_count": 757,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "982e5e033b0c21d2ff3c8a2364219ba6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "cc10cad474a7eb1842b0848b7270ec14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = insertionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\n--fcc-editable-region--\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "440f4315055a23ab7805f1380dda74d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } --fcc-editable-region-- const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\narray[j + 1] = array[j];\nj--;\n}\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112c9cf53d632910ea2f9b.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b95dd463c84b5b7d02c7bd02cce2d81d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64112cea9e6ac22a314628b0\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nAfter your for loop has finished, you need to return the array You should then be able to see the Output change when you click the Sort button again --hints--\nYou should return the array js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)\\s*{\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*; \\s*j--\\s*; \\s*\\}\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*currValue\\s*; \\s*\\}\\s*return\\s+array\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "74aa6b9ab4aff433d88e136db68f3f1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64112cea9e6ac22a314628b0\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nAfter your for loop has finished, you need to return the array You should then be able to see the Output change when you click the Sort button again --hints--\nYou should return the array js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)\\s*{\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*array\\s*\\[\\s*j\\s*\\]\\s*; \\s*j--\\s*; \\s*\\}\\s*array\\s*\\[\\s*j\\s*\\+\\s*1\\s*\\]\\s*=\\s*currValue\\s*; \\s*\\}\\s*return\\s+array\\s*;\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
      "source_type": "git_repo"
    },
    "token_count": 773,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "b3e709d51dce4f536794d13074d25f31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f128534c4c6d897eee2ccf79414b2626",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = insertionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\n--fcc-editable-region--\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d2ad438bef19bbe3e7943344e37940a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } --fcc-editable-region-- const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\narray[j + 1] = array[j];\nj--;\n}\narray[j + 1] = currValue;\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112cea9e6ac22a314628b0.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "f02f43170bd9a4c6a84a4f3cfc8daa6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64112d0943e1bb2aef11e2d1\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nTo sort the elements of an array, you can use the built-in method called sort() Therefore, you can update the sortedValues variable by assigning it the result of calling sort() on the inputValues array --hints--\nYou should update your sortedValues variable to be the result of calling the sort() method on your inputValues array js\nassert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(/);\nYou should not pass anything into the sort() method js\nassert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*\\)/);\nYou should not call selectionSort in your code js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9243,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
      "source_type": "git_repo"
    },
    "token_count": 192,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6708bd301d9b3f356c0f09b2e0c5739b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "you can use the built-in method called sort() Therefore, you can update the sortedValues variable by assigning it the result of calling sort() on the inputValues array --hints-- You should update your sortedValues variable to be the result of calling the sort() method on your inputValues array js assert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(/); You should not pass anything into the sort() method js assert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*\\)/); You should not call selectionSort in your code js assertnotMatch(code, /selectionSort\\s*\\(/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9243,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
      "source_type": "git_repo"
    },
    "token_count": 585,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "71e152020fd9b4fd7e4bb38b0ee2350d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9243,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "8956f66e069fa93a6c1ba7006bc31326",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n--fcc-editable-region--\nconst sortedValues = insertionSort(inputValues);\nupdateUI(sortedValues);\n--fcc-editable-region--\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9243,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "dc7a51c83f0e607cde4b388e357624de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "} return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\narray[j + 1] = array[j];\nj--;\n}\narray[j + 1] = currValue;\n}\nreturn array;\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9243,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112d0943e1bb2aef11e2d1.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "f1d8c8bb09f5b24a85976b9acab890df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 641110e4fb696b259dbf0bcf\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nFor this algorithm, you'll want to use a while loop This loop needs two conditions:\nFirst, it should not run beyond the beginning of the array (accessed with j) Second, the loop should not run after it finds a value smaller than the current value To prevent an infinite loop, decrement j inside your loop --hints--\nYou should use a while loop js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/);\nYour while loop should have its first condition that checks the value of j is greater than or equal to 0 js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/);\nYour while loop should use the AND operator js\nassert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 16
  },
  {
    "id": "048de5bc9106e6286f32e8271a85c44a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "not run after it finds a value smaller than the current value To prevent an infinite loop, decrement j inside your loop --hints-- You should use a while loop js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/);\nYour while loop should have a condition that checks the value of array[j] is greater than currValue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 16
  },
  {
    "id": "cff1e094a5e65139941ca91dd0821e8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "inside your loop --hints-- You should use a while loop js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 16
  },
  {
    "id": "1c34a217564139b8a8286dd38fe936eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "your loop --hints-- You should use a while loop js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 544,
    "chunk_index": 3,
    "total_chunks": 16
  },
  {
    "id": "a382542853043a6a95fe9e63c36f0634",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "loop --hints-- You should use a while loop js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 583,
    "chunk_index": 4,
    "total_chunks": 16
  },
  {
    "id": "ea1882e20530a24763b061302b46e1e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "loop --hints-- You should use a while loop js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 602,
    "chunk_index": 5,
    "total_chunks": 16
  },
  {
    "id": "0829cece7dc8810ced69e0de3e1143f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "loop --hints-- You should use a while loop js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)/);\nYour while loop should decrement j inside the loop",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 652,
    "chunk_index": 6,
    "total_chunks": 16
  },
  {
    "id": "09f86d8cc22fb74031646b7393e11d86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)/); Your while loop should decrement j inside the loopjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 644,
    "chunk_index": 7,
    "total_chunks": 16
  },
  {
    "id": "cbccee9e945826fb789722887a6e94a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)/); Your while loop should decrement j inside the loopjs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 704,
    "chunk_index": 8,
    "total_chunks": 16
  },
  {
    "id": "9a813a9c6a073511f63a3e6c18553da0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "/const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)/); Your while loop should decrement j inside the loopjs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 741,
    "chunk_index": 9,
    "total_chunks": 16
  },
  {
    "id": "31895618636a5614f0a8cc7dea0528dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "/const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)/); Your while loop should decrement j inside the loopjs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 760,
    "chunk_index": 10,
    "total_chunks": 16
  },
  {
    "id": "68c0a8d0ade1c840bfbde9ee5674339d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "/const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)/); Your while loop should decrement j inside the loopjs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)\\s*{\\s*j--\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 810,
    "chunk_index": 11,
    "total_chunks": 16
  },
  {
    "id": "93c98276cbdf6a877e6baadc477d024c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "/const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(/); Your while loop should have its first condition that checks the value of j is greater than or equal to 0 js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\ length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0/); Your while loop should use the AND operator js assert match(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*; \\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*; \\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&/); Your while loop should have a condition that checks the value of array[j] is greater than currValuejs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)/); Your while loop should decrement j inside the loopjs assertmatch(code, /const\\s+insertionSort\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*{\\s*for\\s*\\(\\s*let\\s+i\\s*=\\s*1\\s*;\\s*i\\s*<\\s*array\\length\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{\\s*const\\s+currValue\\s*=\\s*array\\s*\\[\\s*i\\s*\\]\\s*;\\s*let\\s+j\\s*=\\s*i\\s*-\\s*1\\s*;\\s*while\\s*\\(\\s*j\\s*>=\\s*0\\s*&&\\s*array\\s*\\[\\s*j\\s*\\]\\s*>\\s*currValue\\s*\\)\\s*{\\s*j--\\s*;\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 1250,
    "chunk_index": 12,
    "total_chunks": 16
  },
  {
    "id": "115ed9aac599c21f862d33f983242165",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 13,
    "total_chunks": 16
  },
  {
    "id": "574b8dbce87d57bd9fbfeb22165a4d79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = insertionSort(inputValues);\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\n--fcc-editable-region--\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 14,
    "total_chunks": 16
  },
  {
    "id": "dc4ff88f0510308f0d7a5969fbb607dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } --fcc-editable-region-- const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\n}\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641110e4fb696b259dbf0bcf.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 15,
    "total_chunks": 16
  },
  {
    "id": "e1488343a9cd912620c5a52dff03f56b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 641130423e5f512d8972dae1\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nNotice how the number 10 is placed at the beginning of the array This is because the default behavior of sort() is to convert the numbers values to strings, and sort them alphabetically And \"10\" comes before \"2\" alphabetically To fix this, you can pass a callback function to the sort() method The callback function has two parameters - for yours, use a and b The parameters of a and b represent the number values in the array that will be sorted Leave the function empty for now --hints--\nYou should pass a callback function to the sort() method Remember to use arrow syntax js\nassert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nThe callback function should have two parameters, a and b js\nassert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>/);\nThe callback function should be empty js\nassert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ad43b8262760171b23986c9ee02cb53c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "- for yours, use a and b The parameters of a and b represent the number values in the array that will be sorted Leave the function empty for now --hints-- You should pass a callback function to the sort() method Remember to use arrow syntax js assert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/); The callback function should have two parameters, a and b js assert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>/); The callback function should be empty js assert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\\\s*sort\\s*\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n10\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
      "source_type": "git_repo"
    },
    "token_count": 644,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "7a72068c98ff7b9081837853df36d3fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b55d5a28f44d55b777437f715491bb6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n--fcc-editable-region--\nconst sortedValues = inputValues sort();\n--fcc-editable-region--\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d3d701ffe0f2e1a349584cf0a6943d5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "} return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\narray[j + 1] = array[j];\nj--;\n}\narray[j + 1] = currValue;\n}\nreturn array;\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\641130423e5f512d8972dae1.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "1a23e4321e7b133775cd4676573364e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64112fa63a0f812c66499a54\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nThe Sort button may appear to work correctly when clicked, but this is only because all the values in the array are single digits, and the sorting may not work as expected with more complex values Change the value and text of the option element that is selected from 1 to 10, and click the Sort button again --hints--\nYou should update the value of the option element that is selected to 10 js\nconst values = document querySelectorAll(' values-dropdown') [3];\nconst option = values querySelector('option[selected]');\nassert equal(option value, '10');\nYou should update the text of the option element that is selected to 10 js\nconst values = document querySelectorAll(' values-dropdown') [3];\nconst option = values querySelector('option[selected]');\nassert equal(option",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "b0070523c2d463023cfe6a1dbcd9ab4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "option element that is selected from 1 to 10, and click the Sort button again --hints-- You should update the value of the option element that is selected to 10 js const values = document querySelectorAll(' values-dropdown') [3]; const option = values querySelector('option[selected]'); assert equal(option value, '10'); You should update the text of the option element that is selected to 10 js const values = document querySelectorAll(' values-dropdown') [3]; const option = values querySelector('option[selected]'); assert equal(optiontextContent, '10');\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n--fcc-editable-region--\n1\n--fcc-editable-region--\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
      "source_type": "git_repo"
    },
    "token_count": 567,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "2909a05ebe55beefc8a4bda9fe2261ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b246c37d38c5ad5e1791edbf378c5634",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = inputValues sort();\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "bd04066cdc8ba338fd7760966590c754",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "} return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\narray[j + 1] = array[j];\nj--;\n}\narray[j + 1] = currValue;\n}\nreturn array;\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64112fa63a0f812c66499a54.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e10e35f24cfcf8f69f37481a4c527eeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64113124efd2852edafaf25f\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nThe callback to sort() should return a number That number determines how to sort the elements a and b:\nIf the number is negative, sort a before b If the number is positive, sort b before a If the number is zero, do not change the order of a and b Keeping in mind that you want the numbers to be sorted in ascending order (smallest to largest), return a single subtraction calculation using a and b that will correctly sort the numbers with the above logic --hints--\nYour callback function should use an explicit return js\nassert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*{\\s*return/);\nYour callback function should return a - b js\nassert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*{\\s*return\\s+( :parseInt) ( :Number) \\( a\\) \\s*-\\s*( :parseInt) ( :Number) \\( b\\) \\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4d602d586834bb0f01e8e124ea2cfdcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "b Keeping in mind that you want the numbers to be sorted in ascending order (smallest to largest), return a single subtraction calculation using a and b that will correctly sort the numbers with the above logic --hints-- Your callback function should use an explicit return js assert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*{\\s*return/); Your callback function should return a - b js assert match(code, /const\\s+sortedValues\\s*=\\s*inputValues\\s*\\ \\s*sort\\s*\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>\\s*{\\s*return\\s+( :parseInt) ( :Number) \\( a\\) \\s*-\\s*( :parseInt) ( :Number) \\( b\\) \\s*;\\s*}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n10\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
      "source_type": "git_repo"
    },
    "token_count": 636,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "dd4129344aa51e56d69990019a35bc16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "55f21e94c868c3a05f374c1cd29acd5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\n--fcc-editable-region--\nconst sortedValues = inputValues sort((a, b) => {\n});\n--fcc-editable-region--\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5080e44adc1ce8434f9ba6c244c0421c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "} return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\narray[j + 1] = array[j];\nj--;\n}\narray[j + 1] = currValue;\n}\nreturn array;\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113124efd2852edafaf25f.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "026ba8acea0ff556d6e8f1d1c11b0e87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621c5f02a5c272761db8661.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6621c5f02a5c272761db8661\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nYou should use console log() to print out the result of inputValues Write the code for this inside the sortInputArray function To see the logged inputValues array, click on the sort button and open up the console You should see an array of strings like this:\njs\n[ \"8\", \"2\", \"4\", \"1\", \"3\" ]\nBefore going further, make sure you observe the data type of the printed result in the console In the next step, you will convert those strings into numbers --hints--\nYou should call console log() js\nassert match(code, /console\\ log\\( *\\); /);\nYou should pass inputValues to your console log() call js\nassert match(code, /console\\ log\\(\\s*inputValues\\s*\\);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621c5f02a5c272761db8661.md",
      "source_type": "git_repo"
    },
    "token_count": 197,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a7317abe9d686b354a4e8579c06ea898",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621c5f02a5c272761db8661.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "open up the console You should see an array of strings like this: js [ \"8\", \"2\", \"4\", \"1\", \"3\" ] Before going further, make sure you observe the data type of the printed result in the console In the next step, you will convert those strings into numbers --hints-- You should call console log() js assert match(code, /console\\ log\\( *\\); /); You should pass inputValues to your console log() call js assert match(code, /console\\ log\\(\\s*inputValues\\s*\\);/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621c5f02a5c272761db8661.md",
      "source_type": "git_repo"
    },
    "token_count": 552,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "64abe04a4eca397928d1b6f284311436",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621c5f02a5c272761db8661.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621c5f02a5c272761db8661.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "80f24e8dc875d71c4f32c2274a4a1347",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621c5f02a5c272761db8661.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\n--fcc-editable-region--\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")] map((dropdown) => dropdown value);\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621c5f02a5c272761db8661.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "3ae98cddf1a934627ce588a7e495488c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621d0dd6798b121bd2ed823.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 6621d0dd6798b121bd2ed823\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nUpdate your map() callback to call the Number() function Pass dropdown value to that function call Open the Console tab to see that your inputValues is an array of numbers now --hints--\nYou should call the Number() function in your map() callback js\nassert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\(\\s*dropdown\\s*\\)|dropdown)\\s*=>\\s*Number\\s*\\(\\s* *\\s*\\)/);\nYou should pass dropdown value to your Number() call js\nassert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\(\\s*dropdown\\s*\\)|dropdown)\\s*=>\\s*Number\\s*\\(\\s*dropdown\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621d0dd6798b121bd2ed823.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4a13f686e283a0d13f8a0cce8ed4d6f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621d0dd6798b121bd2ed823.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "9 challengeType: 0 dashedName: step-9 --description-- Update your map() callback to call the Number() function Pass dropdown value to that function call Open the Console tab to see that your inputValues is an array of numbers now --hints-- You should call the Number() function in your map() callback js assert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\(\\s*dropdown\\s*\\)|dropdown)\\s*=>\\s*Number\\s*\\(\\s* *\\s*\\)/); You should pass dropdown value to your Number() call js assert match(code, /inputValues\\s*=\\s*\\[\\s*\\ \\ \\ document\\ getElementsByClassName\\(\\s*('|\"|`)values-dropdown\\1\\s*\\)\\s*\\]\\s*\\ map\\s*\\(\\s*(\\(\\s*dropdown\\s*\\)|dropdown)\\s*=>\\s*Number\\s*\\(\\s*dropdown\\value\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621d0dd6798b121bd2ed823.md",
      "source_type": "git_repo"
    },
    "token_count": 662,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "302c2b422de58f592b8559759d56ef80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621d0dd6798b121bd2ed823.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621d0dd6798b121bd2ed823.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b305ec2b3eabfcc468036113b5a8ac17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621d0dd6798b121bd2ed823.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\n--fcc-editable-region--\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")] map((dropdown) => dropdown value);\nconsole log(inputValues);\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8143,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\6621d0dd6798b121bd2ed823.md",
      "source_type": "git_repo"
    },
    "token_count": 247,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "590ade068f4abb560577460b983f422c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a115879a6d51422652cbfc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a115879a6d51422652cbfc\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nIn your role playing game, users will be able to track their stats, buy weapons, and fight monsters. Before you can continue with the interactive JavaScript portion of the game, you need to first create the HTML elements that will display the game information.\nCreate four div elements within your #game element. Give them the following respective id values, in order: stats, controls, monsterStats, and text.\n--hints--\nYou should create four new div elements.\njs\nassert.equal(document.querySelectorAll('div')?.length, 5);\nYou should give one of the new div elements an id  of stats.\njs\nassert.exists(document.querySelector('div#stats'));\nYou should give one of the new div elements an id of controls.\njs\nassert.exists(document.querySelector('div#controls'));\nYou should give one of the new div elements an id of monsterStats.\njs\nassert.exists(document.querySelector('div#monsterStats'));\nYou should give one of the new div elements an id of text.\njs\nassert.exists(document.querySelector('div#text'));\nYou should place the new div elements in the correct order.\njs\nfunction __t(a, b) {\nreturn document.querySelector(a)?.nextElementSibling?.getAttribute('id') === b;\n}\nassert(__t('div#stats','controls') && __t('div#controls','monsterStats') && __t('div#monsterStats','text'));\nYou should place the new div elements within the #game element.\njs\nassert.equal(document.querySelector('#game')?.children?.length, 4);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n--fcc-editable-region--\n--fcc-editable-region--\n```\njs\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a115879a6d51422652cbfc.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4ca07cfd6e2a88e3f0ccd91c22ca39b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a1166ed9a56d439c0770e7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a1166ed9a56d439c0770e7\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nCreate three span elements within your #stats element. Give each of them the class stat. Then give the first one the text XP: 0, the second one the text Health: 100, and the third one the text Gold: 50.\n--hints--\nYou should have three span elements within the #stats element.\njs\nconst spans = document.querySelectorAll('#stats > span');\nassert.equal(spans?.length, 3);\nYou should give the new three span elements a class of stat.\njs\nassert.lengthOf(document.querySelectorAll('#stats > .stat'), 3);\nYour first .stat element should have the provided text XP: 0.\njs\nassert(document.querySelectorAll('#stats > .stat')?.[0]?.innerText === 'XP: 0');\nYour second .stat element should have the provided text Health: 100.\njs\nassert(document.querySelectorAll('#stats > .stat')?.[1]?.innerText === 'Health: 100');\nYour third .stat element should have the provided text Gold: 50.\njs\nassert(document.querySelectorAll('#stats > .stat')?.[2]?.innerText === 'Gold: 50');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n--fcc-editable-region--\n--fcc-editable-region--\n```\njs\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1782,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a1166ed9a56d439c0770e7.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5d48989ac5ffc35b9d5bb6b8d08d179a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\5d5a813321b9e3db6c106a46.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5d5a813321b9e3db6c106a46\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nJavaScript is a powerful language which allows you to build websites that are interactive Note: For all remaining projects in this curriculum, you will need a basic level of knowledge in HTML and CSS If you are new to HTML and CSS, please go through the Responsive Web Design Certification To get started, create your standard HTML boilerplate with a DOCTYPE, html, head, and body, then add a meta tag for the charset Add a title element and use the text RPG - Dragon Repeller for it Include a link tag for your stylesheet to link the styles css file Finally, create a div element with id set to game within your body --hints--\nYour code should contain the DOCTYPE reference js\nassert(code match(/< DOCTYPE/gi));\nYou should include a space after the DOCTYPE reference js\nassert(code match(/< DOCTYPE\\s+/gi));\nYou should define the document type to be html js\nassert(code match(/< DOCTYPE\\s+html/gi));\nYou should close the DOCTYPE declaration with a > after the type js\nassert(code match(/< DOCTYPE\\s+html\\s*>/gi));\nYour html element should have an opening tag Don't forget the lang attribute js\nassert(code match(/<html\\s+lang\\s*=\\s*('|\")en\\1\\s*>/gi));\nYour html element should have a closing tag js\nassert(code match(/<\\/html\\s*>/));\nYour DOCTYPE declaration should be at the beginning of your HTML js\nassert(__helpers removeHtmlComments(code) match(/^\\s*< DOCTYPE\\s+html\\s*>/i));\nYou should have an opening head tag js\nassert(code match(/<head\\s*>/i));\nYou should have a closing head tag js\nassert(code match(/<\\/head\\s*>/i));\nYou should have an opening body tag js\nassert(code match(/<body\\s*>/i));\nYou should have a closing body tag js\nassert(code match(/<\\/body\\s*>/i));\nThe head and body elements should be siblings js\nassert match(code, /<head\\s*> *<\\/head\\s*> *<body\\s*> *<\\/body\\s*>/s)\nThe head element should be within the html element js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\5d5a813321b9e3db6c106a46.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c1868ff6359870f049b8c946dadf3d50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\5d5a813321b9e3db6c106a46.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the beginning of your HTML js assert(__helpers removeHtmlComments(code) match(/^\\s*< DOCTYPE\\s+html\\s*>/i)); You should have an opening head tag js assert(code match(/<head\\s*>/i)); You should have a closing head tag js assert(code match(/<\\/head\\s*>/i)); You should have an opening body tag js assert(code match(/<body\\s*>/i)); You should have a closing body tag js assert(code match(/<\\/body\\s*>/i)); The head and body elements should be siblings js assert match(code, /<head\\s*> *<\\/head\\s*> *<body\\s*> *<\\/body\\s*>/s) The head element should be within the html element js assertmatch(code, /<html[^>]*> *<head\\s*> *<\\/head\\s*> *<\\/html\\s*>/s);\nThe body element should be within the html element js\nassert match(code, /<html[^>]*> *<body\\s*> *<\\/body\\s*> *<\\/html\\s*>/s);\nYour code should have a meta element js\nconst meta = document querySelector('meta');\nassert exists(meta);\nYour meta element should have a charset attribute with the value UTF-8 js\nassert match(code, /<meta[\\s\\S]+ charset=('|\"|`)UTF-8\\1/i)\nYour code should have a title element js\nconst title = document querySelector('title');\nassert exists(title);\nYou should have a closing title tag js\nassert(code match(/<\\/title\\s*>/i));\nYour code should have a link element js\nconst link = document querySelector('head > link');\nassert exists(link);\nYou should have a div element js\nconst div = document querySelector('div');\nassert exists(div);\nYour div element should have an id attribute with the value game js\nconst div = document querySelector('div');\nassert equal(div id, 'game');\nYour div element should be within the body element js\nconst div = document querySelector('div');\nassert equal(div parentElement localName, 'body');\n--seed--\n--seed-contents--\n```html\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\5d5a813321b9e3db6c106a46.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f112981d6fdaa223787cbc17d13219dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\662236690376072dc79d9c27.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 662236690376072dc79d9c27\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nNow that you have confirmed the data type of the inputValues elements, remove your console log() call --hints--\nYou should no longer log inputValues to the console js\nassert notMatch(code, /console\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\662236690376072dc79d9c27.md",
      "source_type": "git_repo"
    },
    "token_count": 81,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c56ea2839cb3ef5112d328cb0c87916f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\662236690376072dc79d9c27.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 662236690376072dc79d9c27\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nNow that you have confirmed the data type of the inputValues elements, remove your console log() call --hints--\nYou should no longer log inputValues to the console js\nassert notMatch(code, /console\\log\\(\\s*inputValues\\s*\\);/);\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\662236690376072dc79d9c27.md",
      "source_type": "git_repo"
    },
    "token_count": 529,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1febdf6c52f0e686fb0a0dcc00758ca9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\662236690376072dc79d9c27.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\662236690376072dc79d9c27.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e264057138bab9c3739eddc0e380ac36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\662236690376072dc79d9c27.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\n--fcc-editable-region--\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")] map((dropdown) => Number(dropdown value));\nconsole log(inputValues);\n}\n--fcc-editable-region--\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\662236690376072dc79d9c27.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "66b2fa9fb284d80ec26176dd86456398",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23cb9bc467a147516b500.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a23cb9bc467a147516b500\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nFor your #controls element, create three button elements. The first should have the id set to button1, and the text Go to store. The second should have the id set to button2, and the text Go to cave. The third should have the id set to button3, and the text Fight dragon.\n--hints--\nYou should add three button elements to your #controls element.\njs\nconst buttons = document.querySelectorAll('#controls > button');\nassert.exists(buttons);\nassert.equal(buttons.length, 3);\nYour first button should have the id set to button1.\njs\nconst buttons = document.querySelectorAll('#controls > button');\nconst button1 = buttons[0];\nassert.equal(button1.id, 'button1');\nYour first button should have the text Go to store.\njs\nconst buttons = document.querySelectorAll('#controls > button');\nconst button1 = buttons[0];\nassert.equal(button1.innerText, 'Go to store');\nYour second button should have the id set to button2.\njs\nconst buttons = document.querySelectorAll('#controls > button');\nconst button2 = buttons[1];\nassert.equal(button2.id, 'button2');\nYour second button should have the text Go to cave.\njs\nconst buttons = document.querySelectorAll('#controls > button');\nconst button2 = buttons[1];\nassert.equal(button2.innerText, 'Go to cave');\nYour third button should have the id set to button3.\njs\nconst buttons = document.querySelectorAll('#controls > button');\nconst button3 = buttons[2];\nassert.equal(button3.id, 'button3');\nYour third button should have the text Fight dragon.\njs\nconst buttons = document.querySelectorAll('#controls > button');\nconst button3 = buttons[2];\nassert.equal(button3.innerText, 'Fight dragon');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\n--fcc-editable-region--\n--fcc-editable-region--\n```\njs\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2744,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23cb9bc467a147516b500.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a58668651e7ef9bd347c270f19b0dbe3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a2401b9842721796b72850.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a2401b9842721796b72850\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nGive your #text element the following text:\nmarkup\nWelcome to Dragon Repeller. You must defeat the dragon that is preventing people from leaving the town.\nYou are in the town square. Where do you want to go? Use the buttons above.\n--hints--\nYour #text element should have the above quoted text.\njs\nconst text = document.querySelector('#text');\nassert.equal(text.innerText, \"Welcome to Dragon Repeller. You must defeat the dragon that is preventing people from leaving the town. You are in the town square. Where do you want to go? Use the buttons above.\");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document.querySelector(\"#button1\");\nconst button2 = document.querySelector(\"#button2\");\nconst button3 = document.querySelector(\"#button3\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2106,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a2401b9842721796b72850.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "31607f902809fb64ab536e0a8c574c36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24068d60b671847d1d4e2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a24068d60b671847d1d4e2\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nNow we need some quick styling. Start by giving the body a background-color set to #0a0a23.\n--hints--\nYou should have a body selector.\njs\nconst body = new __helpers.CSSHelp(document).getStyle('body');\nassert.exists(body);\nYour body selector should have a background-color property set to #0a0a23.\njs\nconst background = new __helpers.CSSHelp(document).getStyle('body')?.getPropertyValue('background-color');\nassert.equal(background, 'rgb(10, 10, 35)');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller. You must defeat the dragon that is preventing people from leaving the town. You are in the town square. Where do you want to go? Use the buttons above.\n```\n```css\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document.querySelector(\"#button1\");\nconst button2 = document.querySelector(\"#button2\");\nconst button3 = document.querySelector(\"#button3\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2211,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24068d60b671847d1d4e2.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c397c4c0b270d649d5c5bf33027e00b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23c1d505bfa13747c8a9b.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a23c1d505bfa13747c8a9b\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nWrap the numbers 0, 100, and 50 in span elements, and wrap those new span elements in strong elements Then give your new span elements id values of xpText, healthText, and goldText, respectively Your answer should follow this basic structure:\nhtml\n<span class=\"stat\">TEXT <strong><span id=\"VALUE\">TEXT</span></strong></span>\n--hints--\nYou should add a strong element in your first stat element js\nconst stat = document querySelectorAll(' stat')[0];\nconst strong = stat querySelector('strong');\nassert exists(strong);\nYour first new strong element should have a span element js\nconst stat = document querySelectorAll(' stat')[0];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert exists(span);\nYour first nested span element should have the id of xpText js\nconst stat = document querySelectorAll(' stat')[0];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert equal(span id, 'xpText');\nYour first span element should be wrapped around the text 0 js\nconst stat = document querySelectorAll(' stat')[0];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert equal(span innerText trim(), '0');\nThe text of your first stat element should still be XP: 0 js\nconst stat = document querySelectorAll(' stat')[0];\nassert equal(stat innerText trimEnd(), 'XP: 0');\nYou should add a strong element in your second stat element js\nconst stat = document querySelectorAll(' stat')[1];\nconst strong = stat querySelector('strong');\nassert exists(strong);\nYour second new strong element should have a span element js\nconst stat = document querySelectorAll(' stat')[1];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert exists(span);\nYour second nested span element should have the id of healthText js\nconst stat = document querySelectorAll(' stat')[1];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert equal(span id, 'healthText');\nYour second span element should be wrapped around the text 100 js\nconst stat = document querySelectorAll('",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23c1d505bfa13747c8a9b.md",
      "source_type": "git_repo"
    },
    "token_count": 517,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "871d90fafe68479365679c1d55f91890",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23c1d505bfa13747c8a9b.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "new strong element should have a span element js const stat = document querySelectorAll(' stat')[1]; const strong = stat querySelector('strong'); const span = strong querySelector('span'); assert exists(span); Your second nested span element should have the id of healthText js const stat = document querySelectorAll(' stat')[1]; const strong = stat querySelector('strong'); const span = strong querySelector('span'); assert equal(span id, 'healthText'); Your second span element should be wrapped around the text 100 js const stat = document querySelectorAll('stat')[1];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert equal(span innerText trim(), '100');\nThe text of your second stat element should still be Health: 100 js\nconst stat = document querySelectorAll(' stat')[1];\nassert equal(stat innerText trimEnd(), 'Health: 100');\nYou should add a strong element in your third stat element js\nconst stat = document querySelectorAll(' stat')[2];\nconst strong = stat querySelector('strong');\nassert exists(strong);\nYour third new strong element should have a span element js\nconst stat = document querySelectorAll(' stat')[2];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert exists(span);\nYour third nested span element should have the id of goldText js\nconst stat = document querySelectorAll(' stat')[2];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert equal(span id, 'goldText');\nYour third span element should be wrapped around the text 50 js\nconst stat = document querySelectorAll(' stat')[2];\nconst strong = stat querySelector('strong');\nconst span = strong querySelector('span');\nassert equal(span innerText trim(), '50');\nThe text of your third stat element should still be Gold: 50 js\nconst stat = document querySelectorAll(' stat')[2];\nassert equal(stat innerText trimEnd(), 'Gold: 50');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n--fcc-editable-region--\nXP: 0\nHealth: 100\nGold: 50\n--fcc-editable-region--\n```\njs\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23c1d505bfa13747c8a9b.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "02fabb0d57727ecbf640b9f8785913b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a2409897ec621942234cf6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a2409897ec621942234cf6\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nGive the #text element a background-color of #0a0a23, a color of #ffffff, and 10px of padding on all sides.\n--hints--\nYou should have a #text selector.\njs\nconst text = new __helpers.CSSHelp(document).getStyle('#text');\nassert.exists(text);\nYour #text element should have a background-color of #0a0a23.\njs\nconst background = new __helpers.CSSHelp(document).getStyle('#text')?.getPropertyValue('background-color');\nassert.equal(background, 'rgb(10, 10, 35)');\nYour #text element should have a color of #ffffff.\njs\nconst color = new __helpers.CSSHelp(document).getStyle('#text')?.getPropertyValue('color');\nassert.equal(color, 'rgb(255, 255, 255)');\nYour #text element should have 10px of padding on all sides.\njs\nconst padding = new __helpers.CSSHelp(document).getStyle('#text')?.getPropertyValue('padding');\nassert.equal(padding, '10px');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller. You must defeat the dragon that is preventing people from leaving the town. You are in the town square. Where do you want to go? Use the buttons above.\n```\n```css\nbody {\nbackground-color: #0a0a23;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document.querySelector(\"#button1\");\nconst button2 = document.querySelector(\"#button2\");\nconst button3 = document.querySelector(\"#button3\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a2409897ec621942234cf6.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "68fe6556b16aeaefe6c2fc834633da4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23d1c5f1c93161f3582ae.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a23d1c5f1c93161f3582ae\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nSimilar to your #stats element, your #monsterStats element needs two span elements Give them the class stat and give the first element the text Monster Name: and the second the text Health: After the text in each, add a strong element with an empty nested span element Give the first inner span element an id of monsterName and the second inner span element an id of monsterHealth --hints--\nYour #monsterStats element should have two span elements js\nconst spans = document querySelectorAll(`#monsterStats > span`);\nassert equal(spans length, 2);\nYour new span elements should both have a class value of stat js\nconst spans = document querySelectorAll(`#monsterStats > span`);\nassert equal(spans[0] className, 'stat');\nassert equal(spans[1] className, 'stat');\nYour first span element should have a strong element with an empty nested span element js\nconst spans = document querySelectorAll(`#monsterStats > span`);\nconst strong = spans[0] querySelector('strong');\nconst span = strong querySelector('span');\nassert exists(strong);\nassert exists(span);\nYour second span element should have a strong element with an empty nested span element js\nconst spans = document querySelectorAll(`#monsterStats > span`);\nconst strong = spans[1] querySelector('strong');\nconst span = strong querySelector('span');\nassert exists(strong);\nassert exists(span);\nYour first span element should have the text Monster Name: Make sure the spacing is correct js\nconst spans = document querySelectorAll(`#monsterStats > span`);\nassert match(spans[0] innerHTML, /Monster Name:\\s+/);\nYour second span element should have the text Health: Make sure the spacing is correct js\nconst spans = document querySelectorAll(`#monsterStats > span`);\nassert match(spans[1] innerHTML, /Health:\\s+/);\nYour strong and span elements should come after the text js\nconst spans = document querySelectorAll(`#monsterStats > span`);\nassert match(spans[0] innerHTML, /Monster Name:\\s+<strong>/);\nassert match(spans[1] innerHTML, /Health:\\s+<strong>/);\nYour first inner span element should have an id of monsterName js\nconst spans = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3997,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23d1c5f1c93161f3582ae.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9c15f2ba2c9ba4d74b9a754588f2c2ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23d1c5f1c93161f3582ae.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "span`); assert match(spans[0] innerHTML, /Monster Name:\\s+/); Your second span element should have the text Health: Make sure the spacing is correct js const spans = document querySelectorAll(`#monsterStats > span`); assert match(spans[1] innerHTML, /Health:\\s+/); Your strong and span elements should come after the text js const spans = document querySelectorAll(`#monsterStats > span`); assert match(spans[0] innerHTML, /Monster Name:\\s+<strong>/); assert match(spans[1] innerHTML, /Health:\\s+<strong>/); Your first inner span element should have an id of monsterName js const spans = documentquerySelectorAll(`#monsterStats > span`);\nconst span = spans[0] querySelector('span');\nconst spanId = span id;\nassert equal(spanId, 'monsterName');\nYour second inner span element should have an id of monsterHealth js\nconst spans = document querySelectorAll(`#monsterStats > span`);\nconst span = spans[1] querySelector('span');\nconst spanId = span id;\nassert equal(spanId, 'monsterHealth');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector(\"#button1\");\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3997,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a23d1c5f1c93161f3582ae.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "681d90454818ac9d3f7bb2608648a577",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "id: 64113249bab9952fb2ce4469\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nIf you press the Sort button again, you should see that 10 is now in the correct position of the Output To finish this project, change your option back to a value and text of 1 --hints--\nYou should update the value of the option element that is selected to 1 js\nconst values = document querySelectorAll(' values-dropdown') [3];\nconst option = values querySelector('option[selected]');\nassert equal(option value, '1');\nYou should update the text of the option element that is selected to 1 js\nconst values = document querySelectorAll(' values-dropdown') [3];\nconst option = values querySelector('option[selected]');\nassert equal(option",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "7c145de738f16a3652f29883838e81e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "To finish this project, change your option back to a value and text of 1 --hints-- You should update the value of the option element that is selected to 1 js const values = document querySelectorAll(' values-dropdown') [3]; const option = values querySelector('option[selected]'); assert equal(option value, '1'); You should update the text of the option element that is selected to 1 js const values = document querySelectorAll(' values-dropdown') [3]; const option = values querySelector('option[selected]'); assert equal(optiontextContent, '1');\n--seed--\n--seed-contents--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n--fcc-editable-region--\n10\n--fcc-editable-region--\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 566,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "d3921a33ca302f252dfddd99ec4c1a06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "3a8a5269a4b027d051d4606c9493532a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = inputValues sort((a, b) => {\nreturn a - b;\n});\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "07d4dbc6b401700e9f8f318e5b257342",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "} return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\narray[j + 1] = array[j];\nj--;\n}\narray[j + 1] = currValue;\n}\nreturn array;\n}\nsortButton",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 183,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "cec7959610baf5864cfa4dab118cdf0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) { const currValue = array[i]; let j = i - 1; while (j >= 0 && array[j] > currValue) { array[j + 1] = array[j]; j--; } array[j + 1] = currValue; } return array; } sortButtonaddEventListener(\"click\", sortInputArray);\n```\n--solutions--\n```html\nNumber Sorter\nNumber Sorter\nInput:\n[\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n,\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n]\nSort\nOutput:\n[\n0\n,\n0\n,\n0\n,\n0\n,\n0\n]\n```\n```css\n:root {\n--gray-00: #ffffff;\n--gray-05: #f5f6f7;\n--gray-15: #d0d0d5;\n--gray-75: #3b3b4f;\n--gray-85: #1b1b32;\n--gray-90: #0a0a23;\n--blue-50: #198eee;\n--error: #a94442;\n--danger-color: #850000;\n--danger-background: #ffadad;\n}\n*,\n::before,\n::after {\npadding: 0;\nmargin: 0;\nbox-sizing: border-box;\n}\nbody {\nfont-family: \"Lato\", Helvetica, Arial, sans-serif;\nfont-size: 18px;\nbackground-color: var(--gray-85);\ncolor: var(--gray-05);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n}\nh1 {\nmargin: 30px auto;\n}\nh2 {\nmargin-bottom: 15px;\n}\nform {\nwidth: 100%;\ntext-align: center;\npadding: 15px;\n}\nfieldset {\nborder: 0 none;\nheight: 100%;\nmargin: auto;\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\n}\nfieldset div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 571,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "4b9aaae07c40553bb30da71d6bca8dfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "padding: 0; margin: 0; box-sizing: border-box; } body { font-family: \"Lato\", Helvetica, Arial, sans-serif; font-size: 18px; background-color: var(--gray-85); color: var(--gray-05); } main { display: flex; flex-direction: column; align-items: center; } h1 { margin: 30px auto; } h2 { margin-bottom: 15px; } form { width: 100%; text-align: center; padding: 15px; } fieldset { border: 0 none; height: 100%; margin: auto; display: flex; justify-content: space-around; align-items: center; } fieldset div { display: flex; justify-content: center; align-items: center; }bracket, comma {\nfont-size: 2 3em;\n}\nform comma {\nmargin-left: 2px;\n}\nselect {\nfont-family: inherit;\nfont-size: inherit;\nline-height: inherit;\nheight: 38px;\nwidth: 50px;\ntext-align: center;\n}\nbutton {\ncursor: pointer;\nmargin-top: 15px;\ntext-decoration: none;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\npadding: 10px 16px;\nfont-size: 23px;\nwidth: 100%;\n}\nselect:focus-visible,\nbutton:focus-visible {\noutline: 3px solid var(--blue-50);\n} output-container {\nwidth: 95%;\nmin-height: 55px;\nmargin-top: 25px;\nborder-radius: 0;\npadding: 15px;\noverflow-wrap: break-word;\ntext-align: center;\n} output-array {\nwidth: 100%;\nmargin: auto;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n} output-value {\nfont-size: 2em;\n} alert {\nbackground-color: var(--danger-background);\nborder: 3px solid var(--danger-color);\ncolor: var(--danger-color);\n}\n@media (min-width: 550px) {\nform, output-container {\nmax-width: 480px;\n}\nfieldset {\nmax-width: 400px;\n} output-array {\nmax-width: 420px;\n}\n}\n```\n```js\nconst sortButton = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "26fdc11cd21802d234e5124e4b095b66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "solid var(--blue-50); } output-container { width: 95%; min-height: 55px; margin-top: 25px; border-radius: 0; padding: 15px; overflow-wrap: break-word; text-align: center; } output-array { width: 100%; margin: auto; display: flex; align-items: center; justify-content: space-around; } output-value { font-size: 2em; } alert { background-color: var(--danger-background); border: 3px solid var(--danger-color); color: var(--danger-color); } @media (min-width: 550px) { form, output-container { max-width: 480px; } fieldset { max-width: 400px; } output-array { max-width: 420px; } } ``` ```js const sortButton = documentgetElementById(\"sort\");\nconst sortInputArray = (event) => {\nevent preventDefault();\nconst inputValues = [ document getElementsByClassName(\"values-dropdown\")\n] map((dropdown) => Number(dropdown value));\nconst sortedValues = inputValues sort((a, b) => {\nreturn a - b;\n});\nupdateUI(sortedValues);\n}\nconst updateUI = (array = []) => {\narray forEach((num, i) => {\nconst outputValueNode = document getElementById(output-value-${i});\noutputValueNode innerText = num;\n})\n}\nconst bubbleSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nfor (let j = 0; j < array length - 1; j++) {\nif (array[j] > array[j + 1]) {\nconst temp = array[j];\narray[j] = array[j + 1];\narray[j + 1] = temp;\n}\n}\n}\nreturn array;\n}\nconst selectionSort = (array) => {\nfor (let i = 0; i < array length; i++) {\nlet minIndex = i;\nfor (let j = i + 1; j < array length; j++) {\nif (array[j] < array[minIndex]) {\nminIndex = j;\n}\n}\nconst temp = array[i];\narray[i] = array[minIndex];\narray[minIndex] = temp;\n}\nreturn array;\n}\nconst insertionSort = (array) => {\nfor (let i = 1; i < array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "eadf2ae91a447e4d3cf47883ded8a284",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
    "source_type": "git_repo",
    "title": "Number Sorter",
    "content": "} return array; } const selectionSort = (array) => { for (let i = 0; i < array length; i++) { let minIndex = i; for (let j = i + 1; j < array length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } const temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } return array; } const insertionSort = (array) => { for (let i = 1; i < arraylength; i++) {\nconst currValue = array[i];\nlet j = i - 1;\nwhile (j >= 0 && array[j] > currValue) {\narray[j + 1] = array[j];\nj--;\n}\narray[j + 1] = currValue;\n}\nreturn array;\n}\nsortButton addEventListener(\"click\", sortInputArray);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17671,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-algorithmic-thinking-by-building-a-number-sorter\\64113249bab9952fb2ce4469.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "a854ccd09528f10149797927777da46b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24128d5e8af1b47ad1aab.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a24128d5e8af1b47ad1aab\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nUsing a selector list (selector1, selector2) give both your #controls and #stats elements a border of 1px solid #0a0a23, a #0a0a23 text color, and 5px of padding --hints--\nYou should have a #controls, #stats selector list js\nconst selector = new __helpers CSSHelp(document) getStyle('#controls, #stats');\nassert exists(selector);\nYour #controls, #stats selector should have a border of 1px solid #0a0a23 js\nassert equal(new __helpers CSSHelp(document) getStyle('#controls, #stats') border, '1px solid rgb(10, 10, 35)');\nYour #controls, #stats selector should have a color of #0a0a23 js\nconst color = new __helpers CSSHelp(document) getStyle('#controls, #stats') getPropertyValue('color');\nassert equal(color, 'rgb(10, 10, 35)');\nYour #controls, #stats selector should have 5px of padding js\nconst padding = new __helpers CSSHelp(document) getStyle('#controls, #stats') getPropertyValue('padding');\nassert equal(padding, '5px');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2988,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24128d5e8af1b47ad1aab.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c2a89ffff90fdbcf93b66f57c625ae56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24128d5e8af1b47ad1aab.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "selector should have 5px of padding js const padding = new __helpers CSSHelp(document) getStyle('#controls, #stats') getPropertyValue('padding'); assert equal(padding, '5px'); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector(\"#button1\");\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2988,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24128d5e8af1b47ad1aab.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f1060fe1f6184529b0e3521ac252cfeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a241df03c1f61ce936f5d9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a241df03c1f61ce936f5d9\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nNext, give your .stat elements a padding-right of 10px.\n--hints--\nYou should have a .stat selector.\njs\nconst stat = new __helpers.CSSHelp(document).getStyle('.stat');\nassert.exists(stat);\nYour .stat selector should have a padding-right of 10px.\njs\nconst paddingRight = new __helpers.CSSHelp(document).getStyle('.stat')?.getPropertyValue('padding-right');\nassert.equal(paddingRight, '10px');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller. You must defeat the dragon that is preventing people from leaving the town. You are in the town square. Where do you want to go? Use the buttons above.\n```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document.querySelector(\"#button1\");\nconst button2 = document.querySelector(\"#button2\");\nconst button3 = document.querySelector(\"#button3\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2619,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a241df03c1f61ce936f5d9.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eb2485f073884fa61830adab4323baab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a240c67f3dbb1a1e6d95ee.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a240c67f3dbb1a1e6d95ee\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nGive your #game a maximum width of 500px and a maximum height of 400px Set the background-color to #ffffff and the color to #ffffff Use margins to center it by setting the top margin to 30px, bottom margin to 0px, and the left and right margin to auto Finally, give it 10px of padding on all four sides --hints--\nYou should have a #game selector js\nconst game = new __helpers CSSHelp(document) getStyle('#game');\nassert exists(game);\nYour #game selector should have a max-width of 500px js\nconst maxWidth = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('max-width');\nassert equal(maxWidth, '500px');\nYour #game selector should have a max-height of 400px js\nconst maxHeight = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('max-height');\nassert equal(maxHeight, '400px');\nYour #game selector should have a background-color of #ffffff js\nconst background = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('background-color');\nassert equal(background, 'rgb(255, 255, 255)');\nYour #game selector should have a color of #ffffff js\nconst color = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('color');\nassert equal(color, 'rgb(255, 255, 255)');\nYour #game selector should have a margin-top set to 30px js\nconst margin = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('margin-top');\nassert equal(margin, '30px');\nYour #game selector should have a margin-left set to auto js\nconst margin = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('margin-left');\nassert equal(margin, 'auto');\nYour #game selector should have a margin-right set to auto js\nconst margin = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('margin-right');\nassert equal(margin, 'auto');\nYour #game selector should have a margin-bottom set to 0px js\nconst margin = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('margin-bottom');\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a240c67f3dbb1a1e6d95ee.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d1367991ccb5f55a969d85b35abb4a7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a240c67f3dbb1a1e6d95ee.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "js const margin = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('margin-top'); assert equal(margin, '30px'); Your #game selector should have a margin-left set to auto js const margin = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('margin-left'); assert equal(margin, 'auto'); Your #game selector should have a margin-right set to auto js const margin = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('margin-right'); assert equal(margin, 'auto'); Your #game selector should have a margin-bottom set to 0px js const margin = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('margin-bottom'); assertequal(margin, '0px');\nYour #game selector should have 10px of padding on all sides js\nconst padding = new __helpers CSSHelp(document) getStyle('#game') getPropertyValue('padding');\nassert equal(padding, '10px');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector(\"#button1\");\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a240c67f3dbb1a1e6d95ee.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "99adcb6809e73a4505c96606aa75ef18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a2509ba163e020bb9d84ea.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a2509ba163e020bb9d84ea\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nNow you can start writing your JavaScript. Begin by creating a script element. This element is used to load JavaScript into your HTML file.\n```html\n```\n--hints--\nYou should have a script element.\njs\nassert.isAtLeast(document.querySelectorAll('script').length, 1);\nYour script element should have an opening tag.\njs\nassert.match(code, /<script\\s*>/i);\nYour script element should have a closing tag.\njs\nassert.match(code, /<\\/script\\s*>/i);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 958,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a2509ba163e020bb9d84ea.md",
      "source_type": "git_repo"
    },
    "token_count": 175,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "85fa1c03363faf29db2c86019d8fd871",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a257659d0d1e2456f24ba2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a257659d0d1e2456f24ba2\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nBefore you start writing your project code, you should move it to its own file to keep things organized.\nRemove your console.log(\"Hello World\"); line. Then give your now empty script element a src attribute set to ./script.js.\n--hints--\nYou should not have a console.log(\"Hello World\"); line in your code.\njs\nassert.notMatch(code, /console\\.log\\(\\s*('|\")Hello World\\1\\s*\\)\\s*;/);\nYour script element should have a src attribute set to ./script.js.\njs\nconst script = document.querySelector(\"script[data-src$='script.js']\");\nassert.exists(script);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1074,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a257659d0d1e2456f24ba2.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c5c61b3a3fdaba7ed87e1dff057f5c5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a255dae245b52317da824a.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a255dae245b52317da824a\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nOne of the most powerful tools is your developer console. Depending on your browser, this might be opened by pressing F12 or Ctrl+Shift+I. On Mac, you can press Option + ⌘ + C and select \"Console\". You can also click the \"Console\" button above the preview window to see our built-in console.\nThe developer console will include errors that are produced by your code, but you can also use it to see values of variables in your code, which is helpful for debugging.\nAdd a console.log(\"Hello World\"); line between your script tags. Then click the \"Console\" button to open the console. You should see the text \"Hello World\".\n--hints--\nYou should add a console.log(\"Hello World\"); line to your code.\njs\nassert.match(code, /console\\.log\\(\\s*('|\")Hello World\\1\\s*\\)\\s*;?/);\nYour console.log(\"Hello World\"); line should be between your script tags.\njs\nassert.match(code, /<script\\s*>\\s*console\\.log\\(\\s*('|\")Hello World\\1\\s*\\)\\s*;?\\s*<\\/script>/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1441,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a255dae245b52317da824a.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "755be9b2695abb2043a1303c8455b6ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24190868ca51c0b6e83c7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a24190868ca51c0b6e83c7\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nFor now, hide your #monsterStats element with the display property Do not change any of the other styling --hints--\nYou should have a #monsterStats selector js\nconst monsterStats = new __helpers CSSHelp(document) getStyle('#monsterStats');\nassert exists(monsterStats);\nYour #monsterStats selector should have a display property of none js\nconst display = new __helpers CSSHelp(document) getStyle('#monsterStats') getPropertyValue('display');\nassert equal(display, 'none');\nYour #monsterStats selector should have a border of 1px solid #0a0a23 js\nconst border = new __helpers CSSHelp(document) getStyle('#monsterStats') getPropertyValue('border');\nassert equal(border, '1px solid rgb(10, 10, 35)');\nYour #monsterStats selector should have 5px of padding js\nconst padding = new __helpers CSSHelp(document) getStyle('#monsterStats') getPropertyValue('padding');\nassert equal(padding, '5px');\nYour #monsterStats selector should have a color of #ffffff js\nconst color = new __helpers CSSHelp(document) getStyle('#monsterStats') getPropertyValue('color');\nassert equal(color, 'rgb(255, 255, 255)');\nYour #monsterStats selector should have a background-color of #c70d0d js\nconst background = new __helpers CSSHelp(document) getStyle('#monsterStats') getPropertyValue('background-color');\nassert equal(background, 'rgb(199, 13, 13)');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24190868ca51c0b6e83c7.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fa17776110dcde9635421c9f9820e85f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24190868ca51c0b6e83c7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "have a background-color of #c70d0d js const background = new __helpers CSSHelp(document) getStyle('#monsterStats') getPropertyValue('background-color'); assert equal(background, 'rgb(199, 13, 13)'); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\n--fcc-editable-region--\nmonsterStats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}\n--fcc-editable-region--\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector(\"#button1\");\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a24190868ca51c0b6e83c7.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "070dc1bd967db3623a2acdf84b92e65f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a39f5a5790eb27c1e5d4bf.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a39f5a5790eb27c1e5d4bf\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nYour view has been switched to your new script.js file. Remember that you can use the tabs above to switch between files.\nAdd your console.log(\"Hello World\"); line to this file, and see it appear in your console.\n--hints--\nYou should have a console.log(\"Hello World\"); line in your code.\njs\nassert.match(code, /console\\.log\\(\\s*('|\")Hello World\\1\\s*\\)\\s*;/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a39f5a5790eb27c1e5d4bf.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f011f207d0ce1d816ee7329b05599aa4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3a7e4f1060e2fc5ffb34b.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3a7e4f1060e2fc5ffb34b\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nCreate another variable called currentWeaponIndex and set it to 0.\n--hints--\nYou should use let to declare a variable called currentWeaponIndex.\njs\nassert.match(code, /let\\s+currentWeaponIndex/i);\nYou should use camelCase to name your variable.\njs\nassert.match(code, /currentWeaponIndex/);\nYour currentWeaponIndex variable should be set to 0.\njs\nassert.equal(currentWeaponIndex, 0);\nYou should initialize your variable to 0.\njs\nassert.match(code, /let\\s+currentWeaponIndex\\s*=\\s*0/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n```\njs\n--fcc-editable-region--\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3a7e4f1060e2fc5ffb34b.md",
      "source_type": "git_repo"
    },
    "token_count": 216,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fcc915882f7d534bfb27029e2a677fcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3a0a3c0a4b32915d26a6e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3a0a3c0a4b32915d26a6e\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nRemove your console.log(\"Hello World\"); line to begin writing your project code.\nIn the previous project, you learned how to work with variables and the let keyword like this:\njs\nlet camperbot;\nYou also learned how to initialize a variable with a value like this:\njs\nlet age = 32;\nUse the let keyword to declare a variable called xp and assign it the value of 0, a number.\n--hints--\nYou should not have a console.log(\"Hello World\"); line in your code.\njs\nassert.notMatch(code, /console\\.log\\(\\s*('|\")Hello World\\1\\s*\\)\\s*;/);\nYou should use the let keyword to declare your variable.\njs\nassert.match(code, /let/);\nYou should declare a variable named xp.\njs\nassert.match(code, /let\\s+xp/);\nxp should have a value of 0.\njs\nassert.equal(xp, 0);\nYou should initialize the xp variable to 0.\njs\nassert.match(code, /let\\s+xp\\s*=\\s*0\\s*;?/)\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n```\njs\n--fcc-editable-region--\nconsole.log(\"Hello World\");\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3a0a3c0a4b32915d26a6e.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1fb8dd5ee7370ea550d074430af17ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3a75d8466a12e009eff76.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3a75d8466a12e009eff76\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nInitialize another variable called health with a value of 100, and a variable called gold with a value of 50.\n--hints--\nYou should use let to declare a variable called health.\njs\nassert.match(code, /let\\s+health/);\nYou should initialize a variable called health with a value of 100.\njs\nassert.match(code, /let\\s+health\\s*=\\s*100/);\nYou should use let to declare a variable called gold.\njs\nassert.match(code, /let\\s+gold/);\nYou should initialize a variable called gold with a value of 50.\njs\nassert.match(code, /let\\s+gold\\s*=\\s*50/);\nhealth should have a value of 100.\njs\nassert.equal(health, 100);\ngold should have a value of 50.\njs\nassert.equal(gold, 50);\nxp should still have a value of 0.\njs\nassert.equal(xp, 0);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n```\njs\n--fcc-editable-region--\nlet xp = 0;\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1310,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3a75d8466a12e009eff76.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dbb8e9d69c1c7f52213bc80745b585df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3b3eab50e193608c19fc6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3b3eab50e193608c19fc6\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nDeclare a variable called fighting but do not initialize it with a value.\n--hints--\nYou should use let to declare a variable fighting.\njs\nassert.match(code, /let\\s+fighting/);\nYour fighting variable should not have a value.\njs\nassert.isUndefined(fighting);\nYou should not assign a value to your fighting variable.\njs\nassert.match(code, /let\\s+fighting\\s*;?/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n```\njs\n--fcc-editable-region--\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 954,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3b3eab50e193608c19fc6.md",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5dad7306b0506ddcca98ebdf6fb6947a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3b79d520a7f3d0e25afd6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3b79d520a7f3d0e25afd6\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nJavaScript interacts with the HTML using the Document Object Model, or DOM. The DOM is a tree of objects that represents the HTML. You can access the HTML using the document object, which represents your entire HTML document.\nOne method for finding specific elements in your HTML is using the querySelector() method. The querySelector() method takes a CSS selector as an argument and returns the first element that matches that selector. For example, to find the <h1> element in your HTML, you would write:\njs\nlet h1 = document.querySelector(\"h1\");\nNote that h1 is a string and matches the CSS selector you would use.\nCreate a button1 variable and use querySelector() to assign it your element with the id of button1. Remember that CSS id selectors are prefixed with a #.\n--hints--\nYou should use let to declare a button1 variable.\njs\nassert.match(code, /let\\s+button1/);\nYou should use document.querySelector().\njs\nassert.match(code, /document\\.querySelector/);\nYou should use the \"#button1\" selector.\njs\nassert.match(code, /querySelector\\(\\s*('|\")#button1\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2316,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3b79d520a7f3d0e25afd6.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d968bd493ceab85b4061eccfa05aba43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3b41c9494f937560640ab.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3b41c9494f937560640ab\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nDeclare two more variables named monsterHealth and inventory.\nFor your inventory variable, assign it the value of an array containing the string \"stick\".\nRemember that you worked with arrays in the previous project like this:\njs\nlet exampleArray = [\"first\", \"second\", \"third\"];\n--hints--\nYou should use let to declare your monsterHealth variable.\njs\nassert.match(code, /let\\s+monsterHealth/i);\nYou should use camelCase to name your monsterHealth variable.\njs\nassert.match(code, /monsterHealth/);\nmonsterHealth should not have a value.\njs\nassert.isUndefined(monsterHealth);\nYou should not assign a value to your monsterHealth variable.\njs\nassert.match(code, /let\\s+monsterHealth\\s*;?/);\nYou should use let to declare your inventory variable.\njs\nassert.match(code, /let\\s+inventory/i);\nYour inventory variable should still be an array.\njs\nassert.isArray(inventory);\nYour inventory variable should only have one value.\njs\nassert.lengthOf(inventory, 1);\nYour inventory variable should include the string \"stick\".\njs\nassert.include(inventory, \"stick\");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\n```\njs\n--fcc-editable-region--\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3b41c9494f937560640ab.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f1a962c3961280db564eebc228825f12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3bb9aeefe4b3fc43c6d7b.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3bb9aeefe4b3fc43c6d7b\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nbutton1 is a variable that is not going to be reassigned. If you are not going to assign a new value to a variable, it is best practice to use the const keyword to declare it instead of the let keyword. This will tell JavaScript to throw an error if you accidentally reassign it.\nChange your button1 variable to be declared with the const keyword.\n--hints--\nYour button1 variable should be declared with const.\njs\nassert.match(code, /const\\s+button1/);\nYour button1 variable should still have the value of your #button1 element.\njs\nassert.deepEqual(button1, document.querySelector(\"#button1\"));\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\n--fcc-editable-region--\nlet button1 = document.querySelector(\"#button1\");\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1850,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3bb9aeefe4b3fc43c6d7b.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8859c9aaa5f22d9ec02d78e565129563",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c0ab883fd9435cd5c518.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3c0ab883fd9435cd5c518\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nIn the previous project, you learned how to work with single line and multi-line comments like this:\n```js\n// I am a single-line comment\n/\nI am a multi-line comment\n/\n```\nAdd a single-line comment that says initialize buttons --hints--\nYou should use the // symbol to start a single-line comment js\nassert match(code, /\\/\\//);\nYour comment should have the text initialize buttons js\nassert match(code, /\\/\\/\\s*initialize buttons/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c0ab883fd9435cd5c518.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4d1912d19b4aef637363222d3b987e92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c0ab883fd9435cd5c518.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = documentquerySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\n--fcc-editable-region--\nfunction goStore() {\nconsole log(\"Going to store \");\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c0ab883fd9435cd5c518.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9773a78b816aab32367dbe8495cf19f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c2fccf186146b59c6e96.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3c2fccf186146b59c6e96\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nbutton1 represents your first button element These elements have a special property called onclick, which you can use to determine what happens when someone clicks that button You can access properties in JavaScript a couple of different ways The first is with dot notation Here is an example of using dot notation to set the onclick property of a button to a function reference js\nbutton onclick = myFunction;\nIn this example, button is the button element, and myFunction is a reference to a function When the button is clicked, myFunction will be called Use dot notation to set the onclick property of your button1 to the function reference of goStore Note that button1 is already declared, so you don't need to use let or const --hints--\nYou should use dot notation to access the onclick property of button1 js\nassert match(code, /button1\\ onclick/);\nYou should not use let or const js\nassert notMatch(code, /(let|const)\\s+button1\\ onclick/);\nYou should assign the goStore function reference to button1 onclick Make sure not to call the function js\nassert match(code, /button1\\ onclick\\s*=\\s*goStore\\s*; \\s*$/m);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4204,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c2fccf186146b59c6e96.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0de45742171581d7af422eb55fba21e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c2fccf186146b59c6e96.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "goStore function reference to button1 onclick Make sure not to call the function js assert match(code, /button1\\ onclick\\s*=\\s*goStore\\s*; \\s*$/m); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4204,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c2fccf186146b59c6e96.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5690e538a2aa118427a534e6473b93f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c2fccf186146b59c6e96.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\n--fcc-editable-region--\n// initialize buttons\n--fcc-editable-region--\nfunction goStore() {\nconsole log(\"Going to store \");\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4204,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c2fccf186146b59c6e96.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f993c7089dad0f44e646fbcc6e6a4a8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3bec30ea7f941412512dc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3bec30ea7f941412512dc\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nJust like you did with the buttons, create variables for the following ids and use querySelector() to give them the element as a value:\ntext, xpText, healthText, goldText, monsterStats, and monsterName Remember to declare these with the const keyword, and name the variables to match the ids --hints--\nYou should declare a text variable with const js\nassert match(code, /const\\s+text/);\nYour text variable should have the value of your #text element js\nassert match(code, /const\\s+text\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#text\\1\\s*\\)\\s*/);\nYou should declare a xpText variable with const js\nassert match(code, /const\\s+xpText/);\nYour xpText variable should have the value of your #xpText element js\nassert match(code, /const\\s+xpText\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#xpText\\1\\s*\\)\\s*/);\nYou should declare a healthText variable with const js\nassert match(code, /const\\s+healthText/);\nYour healthText variable should have the value of your #healthText element js\nassert match(code, /const\\s+healthText\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#healthText\\1\\s*\\)\\s*/);\nYou should declare a goldText variable with const js\nassert match(code, /const\\s+goldText/);\nYour goldText variable should have the value of your #goldText element js\nassert match(code, /const\\s+goldText\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#goldText\\1\\s*\\)\\s*/);\nYou should declare a monsterStats variable with const js\nassert match(code, /const\\s+monsterStats/);\nYour monsterStats variable should have the value of your #monsterStats element js\nassert match(code, /const\\s+monsterStats\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#monsterStats\\1\\s*\\)\\s*/);\nYou should declare a monsterName variable with const js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3bec30ea7f941412512dc.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7fee87a34bf0e32c75d79ed76dc01708",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3bec30ea7f941412512dc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "value of your #healthText element js assert match(code, /const\\s+healthText\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#healthText\\1\\s*\\)\\s*/); You should declare a goldText variable with const js assert match(code, /const\\s+goldText/); Your goldText variable should have the value of your #goldText element js assert match(code, /const\\s+goldText\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#goldText\\1\\s*\\)\\s*/); You should declare a monsterStats variable with const js assert match(code, /const\\s+monsterStats/); Your monsterStats variable should have the value of your #monsterStats element js assert match(code, /const\\s+monsterStats\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#monsterStats\\1\\s*\\)\\s*/); You should declare a monsterName variable with const js assertmatch(code, /const\\s+monsterName/);\nYour monsterName variable should have the value of your #monsterName element js\nassert match(code, /const\\s+monsterName\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#monsterName\\1\\s*\\)\\s*/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3bec30ea7f941412512dc.md",
      "source_type": "git_repo"
    },
    "token_count": 363,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e1b5fb945be09c1b269872410623249c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3bec30ea7f941412512dc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "js assertmatch(code, /const\\s+monsterName/); Your monsterName variable should have the value of your #monsterName element js assert match(code, /const\\s+monsterName\\s*=\\s*document\\s*\\ \\s*querySelector\\s*\\(\\s*('|\")#monsterName\\1\\s*\\)\\s*/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\n--fcc-editable-region--\nconst button1 = document querySelector(\"#button1\");\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3bec30ea7f941412512dc.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "17e7b6b2bbf32ddcb37a4c5b2aa4862b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c668afc43b4a134cca81.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3c668afc43b4a134cca81\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nIn the previous project, you learned how to create a function like this:\n```js\nfunction functionName() {\n}\n```\nCreate an empty function named goStore --hints--\nYou should declare goStore with the function keyword js\nassert match(code, /function\\s+goStore()/);\ngoStore should be defined js\nassert isDefined(goStore);\ngoStore should be a function js\nassert isFunction(goStore);\ngoStore should be an empty function js\nassert equal(goStore toString(), \"function goStore() {}\");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c668afc43b4a134cca81.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f67857606e34ad6da83d8be27a10b252",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c668afc43b4a134cca81.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = documentquerySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c668afc43b4a134cca81.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9a6405fbdcb106302f53d9946a1edce0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c8bf3980c14c438d2aed.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3c8bf3980c14c438d2aed\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nFor now, make your goStore function output the message \"Going to store \" to the console --hints--\nYou should have a console log(\"Going to store \"); line in your code js\nassert match(code, /console\\ log\\(\\s*('|\")Going to store\\ \\1\\s*\\)\\s*; /);\nYour console log(\"Going to store \"); line should be in your goStore function js\nassert match(goStore toString(), /console\\ log\\(\\s*('|\")Going to store\\ \\1\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3257,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c8bf3980c14c438d2aed.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "89748245bf3a14dc73d6ac177f224df1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c8bf3980c14c438d2aed.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\nfunction goStore() {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3257,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c8bf3980c14c438d2aed.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fe85269a8d48798c33f60fe231e0da6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c91a2bab1b4d6fabb726.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3c91a2bab1b4d6fabb726\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nNow create a goCave function that prints \"Going to cave \" to the console --hints--\nYou should use the function keyword to declare goCave js\nassert match(code, /function\\s+goCave/);\ngoCave should be a function js\nassert isFunction(goCave);\nYou should have a console log(\"Going to cave \"); line in your code js\nassert match(code, /console\\ log\\(\\s*('|\")Going to cave\\ \\1\\s*\\)/);\nYour console log(\"Going to cave \"); line should be inside your goCave function js\nassert match(goCave toString(), /console\\ log\\(\\s*('|\")Going to cave\\ \\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c91a2bab1b4d6fabb726.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fd99e7b906c5b0486c0ead6d72b6cffc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c91a2bab1b4d6fabb726.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nfunction goStore() {\nconsole log(\"Going to store \");\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c91a2bab1b4d6fabb726.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6e9d520cf5ca094047cddd5af9aad76a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c4a0e52767482c5202d4.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3c4a0e52767482c5202d4\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nUsing the same syntax, set the onclick properties of button2 and button3 to goCave and fightDragon respectively Once you have done that, open your console and try clicking the buttons on your project --hints--\nYou should assign the goStore function reference to button1 onclick Make sure not to call the function js\nassert match(code, /button1\\ onclick\\s*=\\s*goStore\\s*; \\s*$/m);\nYou should use dot notation to access the onclick property of button2 js\nassert match(code, /button2\\ onclick/);\nYou should not use let or const to assign button2 onclick js\nassert notMatch(code, /(let|const)\\s+button2\\ onclick/);\nYou should assign the goCave function reference to button2 onclick Make sure not to call the function js\nassert match(code, /button2\\ onclick\\s*=\\s*goCave\\s*; \\s*$/m);\nYou should use dot notation to access the onclick property of button3 js\nassert match(code, /button3\\ onclick/);\nYou should not use let or const to assign button3 onclick js\nassert notMatch(code, /(let|const)\\s+button3\\ onclick/);\nYou should assign the fightDragon function reference to button3 onclick Make sure not to call the function js\nassert match(code, /button3\\ onclick\\s*=\\s*fightDragon\\s*; \\s*$/m);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c4a0e52767482c5202d4.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "dd53888baa7e1ea30066aad9ceb7b74f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c4a0e52767482c5202d4.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "fightDragon function reference to button3 onclick Make sure not to call the function js assert match(code, /button3\\ onclick\\s*=\\s*fightDragon\\s*; \\s*$/m); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\n// initialize buttons\nbutton1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c4a0e52767482c5202d4.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b58097f1b2754b8fe7829844039c551f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c4a0e52767482c5202d4.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); --fcc-editable-region-- // initialize buttons button1onclick = goStore;\n--fcc-editable-region--\nfunction goStore() {\nconsole log(\"Going to store \");\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3c4a0e52767482c5202d4.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7541d160e3d71f1db0957ac20d3a6f49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cfc8328d3351b95d4f61.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3cfc8328d3351b95d4f61\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nThe innerText property controls the text that appears in an HTML element For example:\n```html\nDemo content\n```\njs\nconst info = document querySelector(\"#info\");\ninfo innerText = \"Hello World\";\nThe example above would change the text of the p element from Demo content to Hello World When a player clicks your Go to store button, you want to change the buttons and text Remove the code inside the goStore function and add a line that updates the text of button1 to say \"Buy 10 health (10 gold)\" --hints--\nYou should not have a console log(\"Going to store \"); line in your code js\nassert notMatch(code, /console\\ log\\(\\s*('|\")Going to store\\ \\1\\s*\\)/);\nYou should use dot notation to access the innerText property of button1 js\nassert match(code, /button1\\ innerText/);\nYou should not use let or const to access the innerText property of button1 js\nassert notMatch(code, /(let|const)\\s+button1\\ innerText/);\nYou should update the innerText property of button1 to be Buy 10 health (10 gold) js\nassert match(code, /button1\\ innerText\\s*=\\s*('|\")Buy 10 health \\(10 gold\\)\\1/);\nYou should update the innerText property within your goStore function js\nassert match(goStore toString(), /button1\\ innerText\\s*=\\s*('|\")Buy 10 health \\(10 gold\\)\\1/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4436,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cfc8328d3351b95d4f61.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b443c7c9cc66108f3ab265b5ca0df1b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cfc8328d3351b95d4f61.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "should update the innerText property within your goStore function js assert match(goStore toString(), /button1\\ innerText\\s*=\\s*('|\")Buy 10 health \\(10 gold\\)\\1/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4436,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cfc8328d3351b95d4f61.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d4027f8a41db9adc3a2800f5b75bd4eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cfc8328d3351b95d4f61.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "= 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); // initialize buttons button1 onclick = goStore; button2onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction goStore() {\nconsole log(\"Going to store \");\n}\n--fcc-editable-region--\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4436,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cfc8328d3351b95d4f61.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "103ebb033eb709cff967adcd677c1acd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cdb11478a34ff4a6470d.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a3cdb11478a34ff4a6470d\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nNow create a fightDragon function that prints \"Fighting dragon \" to the console --hints--\nYou should use the function keyword to declare fightDragon js\nassert match(code, /function\\s+fightDragon/);\nfightDragon should be a function js\nassert isFunction(fightDragon);\nYou should have a console log(\"Fighting dragon \"); line in your code js\nassert match(code, /console\\ log\\(\\s*('|\")Fighting dragon\\ \\1\\s*\\)/);\nYour console log(\"Fighting dragon \"); line should be inside your fightDragon function js\nassert match(fightDragon toString(), /console\\ log\\(\\s*('|\")Fighting dragon\\ \\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cdb11478a34ff4a6470d.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "73cb9d0e4b15d1d9f5da32de048d9fde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cdb11478a34ff4a6470d.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nfunction goStore() {\nconsole log(\"Going to store \");\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a3cdb11478a34ff4a6470d.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "32d7bacb460325d2e164645005190793",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7beb1ad61211ac153707f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a7beb1ad61211ac153707f\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nNow, add a line that updates the text of button2 to say \"Buy weapon (30 gold)\" and update the text of button3 to say \"Go to town square\" --hints--\nYou should use dot notation to access the innerText property of button2 js\nassert match(code, /button2\\ innerText/);\nYou should not use let or const to access the innerText property of button2 js\nassert notMatch(code, /(let|const)\\s+button2\\ innerText/);\nYou should update the innerText property of button2 to be \"Buy weapon (30 gold)\" js\nassert match(code, /button2\\ innerText\\s*=\\s*('|\")Buy weapon \\(30 gold\\)\\1/);\nYou should update the innerText property within your goStore function js\nassert match(goStore toString(), /button2\\ innerText\\s*=\\s*('|\")Buy weapon \\(30 gold\\)\\1/);\nYou should use dot notation to access the innerText property of button3 js\nassert match(code, /button3\\ innerText/);\nYou should not use let or const to access the innerText property of button3 js\nassert notMatch(code, /(let|const)\\s+button3\\ innerText/);\nYou should update the innerText property of button3 to be \"Go to town square\" js\nassert match(code, /button3\\ innerText\\s*=\\s*('|\")Go to town square\\1/);\nYou should update the innerText property within your goStore function js\nassert match(goStore toString(), /button3\\ innerText\\s*=\\s*('|\")Go to town square\\1/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4518,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7beb1ad61211ac153707f.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "01d9d416e8a62c312fc7d9f1182ecf03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7beb1ad61211ac153707f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You should update the innerText property within your goStore function js assert match(goStore toString(), /button3\\ innerText\\s*=\\s*('|\")Go to town square\\1/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4518,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7beb1ad61211ac153707f.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c583d5e6766ceb26f97c24f6f2f63174",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7beb1ad61211ac153707f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "= 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3onclick = fightDragon;\n--fcc-editable-region--\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\n}\n--fcc-editable-region--\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4518,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7beb1ad61211ac153707f.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6354ec15aa4866f351dcf36bbcd4f6ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfd9179b7f1f6a15fb1e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a7bfd9179b7f1f6a15fb1e\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nCreate three new empty functions called buyHealth, buyWeapon, and goTown --hints--\nYou should declare buyHealth with the function keyword js\nassert match(code, /function\\s+buyHealth/);\nYou should declare buyWeapon with the function keyword js\nassert match(code, /function\\s+buyWeapon/);\nYou should declare goTown with the function keyword js\nassert match(code, /function\\s+goTown/);\nbuyHealth should be an empty function js\nassert equal(buyHealth toString(), 'function buyHealth() {}');\nbuyWeapon should be an empty function js\nassert equal(buyWeapon toString(), 'function buyWeapon() {}');\ngoTown should be an empty function js\nassert equal(goTown toString(), 'function goTown() {}');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4082,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfd9179b7f1f6a15fb1e.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "38c6303e2ec4d96ee1195dc2dfa73328",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfd9179b7f1f6a15fb1e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4082,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfd9179b7f1f6a15fb1e.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f977d606c883924cb568211982b7c610",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfd9179b7f1f6a15fb1e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "// initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function goStore() { button1 innerText = \"Buy 10 health (10 gold)\"; button2 innerText = \"Buy weapon (30 gold)\"; button3 innerText = \"Go to town square\"; button1 onclick = buyHealth; button2 onclick = buyWeapon; button3 onclick = goTown; text innerText = \"You enter the store \"; } function goCave() { console log(\"Going to cave \"); } function fightDragon() { console log(\"Fighting dragon\");\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4082,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfd9179b7f1f6a15fb1e.md",
      "source_type": "git_repo"
    },
    "token_count": 141,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "22eb1732777faa9e2b6230a85d4fdcdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfabe119461eb13ccbd6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a7bfabe119461eb13ccbd6\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nNow you need to modify your display text Change the innerText property of the text variable to be \"You enter the store \" --hints--\nYou should use dot notation to access the innerText property of text js\nassert match(code, /text\\ innerText/);\nYou should not use let or const to access the innerText property of text js\nassert notMatch(code, /(let|const)\\s+text\\ innerText/);\nYou should update the innerText property of text to be \"You enter the store \" js\nassert match(code, /text\\ innerText\\s*=\\s*('|\")You enter the store \\1/);\nYou should update the innerText property within your goStore function js\nassert match(goStore toString(), /text\\ innerText\\s*=\\s*('|\")You enter the store \\1/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfabe119461eb13ccbd6.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "21685b6fe1c25edc9546b3335cad8333",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfabe119461eb13ccbd6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\n}\n--fcc-editable-region--\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfabe119461eb13ccbd6.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "da1a0316818bb28aac107708f033c01a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfabe119461eb13ccbd6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "= document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; --fcc-editable-region-- function goStore() { button1 innerText = \"Buy 10 health (10 gold)\"; button2 innerText = \"Buy weapon (30 gold)\"; button3 innerText = \"Go to town square\"; button1 onclick = buyHealth; button2 onclick = buyWeapon; button3 onclick = goTown; } --fcc-editable-region-- function goCave() { console log(\"Going to cave \"); } function fightDragon() { consolelog(\"Fighting dragon \");\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bfabe119461eb13ccbd6.md",
      "source_type": "git_repo"
    },
    "token_count": 151,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9dacd0d529d1ac0859e4ca150204522c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c011eef9fb2084b966db.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a7c011eef9fb2084b966db\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nMove your goTown function above your goStore function Then copy and paste the contents of the goStore function into the goTown function --hints--\nYour goTown function should come before your goStore function js\nconst goTown = code split(\" \") indexOf(\"goTown()\");\nconst goStore = code split(\" \") indexOf(\"goStore()\");\nassert isBelow(goTown, goStore);\nYour goTown function should have the same contents as your goStore function js\nconst goTownString = goTown toString() replace(\"goTown\", \"\");\nconst goStoreString = goStore toString() replace(\"goStore\", \"\");\nassert equal(goTownString, goStoreString);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c011eef9fb2084b966db.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e89d4e1a7c5febd45ba72eac952f1e8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c011eef9fb2084b966db.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c011eef9fb2084b966db.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b414ca930467f6039b39fd69a42762cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c011eef9fb2084b966db.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; --fcc-editable-region-- function goStore() { button1 innerText = \"Buy 10 health (10 gold)\"; button2 innerText = \"Buy weapon (30 gold)\"; button3 innerText = \"Go to town square\"; button1 onclick = buyHealth; button2 onclick = buyWeapon; button3 onclick = goTown; text innerText = \"You enter the store \"; } function goCave() { console log(\"Going to cave\");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\nfunction goTown() {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c011eef9fb2084b966db.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "14106c8c2b632b0d3579d80b4acc3ad7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bf06d2ad9d1c5024e833.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a7bf06d2ad9d1c5024e833\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nYou will also need to update the functions that run when the buttons are clicked again In your goStore() function, update the onclick property for each button to run buyHealth, buyWeapon, and goTown, respectively --hints--\nYou should use dot notation to access the onclick property of button1 js\nassert match(goStore toString(), /button1\\ onclick/);\nYou should not use let or const to access the onclick property of button1 js\nassert notMatch(code, /(let|const)\\s+button1\\ onclick/);\nYou should set the onclick property of button1 to be buyHealth js\nassert match(code, /button1\\ onclick\\s*=\\s*buyHealth/);\nYou should set the onclick property of button1 in your goStore function js\nassert match(goStore toString(), /button1\\ onclick\\s*=\\s*buyHealth/);\nYou should use dot notation to access the onclick property of button2 js\nassert match(goStore toString(), /button2\\ onclick/);\nYou should not use let or const to access the onclick property of button2 js\nassert notMatch(code, /(let|const)\\s+button2\\ onclick/);\nYou should set the onclick property of button2 to be buyWeapon js\nassert match(code, /button2\\ onclick\\s*=\\s*buyWeapon/);\nYou should set the onclick property of button2 in your goStore function js\nassert match(goStore toString(), /button2\\ onclick\\s*=\\s*buyWeapon/);\nYou should use dot notation to access the onclick property of button3 js\nassert match(goStore toString(), /button3\\ onclick/);\nYou should not use let or const to access the onclick property of button3 js\nassert notMatch(code, /(let|const)\\s+button3\\ onclick/);\nYou should set the onclick property of button3 to be goTown js\nassert match(code, /button3\\ onclick\\s*=\\s*goTown/);\nYou should set the onclick property of button3 in your goStore function js\nassert match(goStore toString(), /button3\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bf06d2ad9d1c5024e833.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ad0ad8e163a924f333dee93eacc8652b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bf06d2ad9d1c5024e833.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "js assert match(goStore toString(), /button2\\ onclick\\s*=\\s*buyWeapon/); You should use dot notation to access the onclick property of button3 js assert match(goStore toString(), /button3\\ onclick/); You should not use let or const to access the onclick property of button3 js assert notMatch(code, /(let|const)\\s+button3\\ onclick/); You should set the onclick property of button3 to be goTown js assert match(code, /button3\\ onclick\\s*=\\s*goTown/); You should set the onclick property of button3 in your goStore function js assert match(goStore toString(), /button3\\onclick\\s*=\\s*goTown/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bf06d2ad9d1c5024e833.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2aa5973ef052ccf2ac6efd4fe6f04a46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bf06d2ad9d1c5024e833.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\n}\n--fcc-editable-region--\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7bf06d2ad9d1c5024e833.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1448b613db0e77253b34299ed83a72ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c071219da921758a35bb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a7c071219da921758a35bb\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nIn your goTown function, change your button elements' innerText properties to be \"Go to store\", \"Go to cave\", and \"Fight dragon\" Update your onclick properties to be goStore, goCave, and fightDragon, respectively Finally, update innerText property of your text to be \"You are in the town square You see a sign that says Store \" --hints--\nYou should set the button1 innerText property to be \"Go to store\" in your goTown function js\nassert match(goTown toString(), /button1\\ innerText\\s*=\\s*('|\")Go to store\\1/);\nYou should set the button2 innerText property to be \"Go to cave\" in your goTown function js\nassert match(goTown toString(), /button2\\ innerText\\s*=\\s*('|\")Go to cave\\1/);\nYou should set the button3 innerText property to be \"Fight dragon\" in your goTown function js\nassert match(goTown toString(), /button3\\ innerText\\s*=\\s*('|\")Fight dragon\\1/);\nYou should set the button1 onclick property to be goStore in your goTown function js\nassert match(goTown toString(), /button1\\ onclick\\s*=\\s*goStore/);\nYou should set the button2 onclick property to be goCave in your goTown function js\nassert match(goTown toString(), /button2\\ onclick\\s*=\\s*goCave/);\nYou should set the button3 onclick property to be fightDragon in your goTown function js\nassert match(goTown toString(), /button3\\ onclick\\s*=\\s*fightDragon/);\nYou should set the text innerText property to be \"You are in the town square You see a sign that says Store \" in your goTown function js\nassert match(goTown toString(), /text\\ innerText\\s*=\\s*('|\")You are in the town square You see a sign that says Store\\ \\1/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c071219da921758a35bb.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "58a0e7ee7ecf4719162c15c42c21d7fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c071219da921758a35bb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "/button3\\ onclick\\s*=\\s*fightDragon/); You should set the text innerText property to be \"You are in the town square You see a sign that says Store \" in your goTown function js assert match(goTown toString(), /text\\ innerText\\s*=\\s*('|\")You are in the town square You see a sign that says Store\\ \\1/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon RepellerYou must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c071219da921758a35bb.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "399d539b1d4a09097d0ca8b8719c5d7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c071219da921758a35bb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "#0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = documentquerySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction goTown() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\n--fcc-editable-region--\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5383,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c071219da921758a35bb.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "57ef76e2587c7ef3ea7bb551055929cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7cc99577fbf25ee7a7d76.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a7cc99577fbf25ee7a7d76\ntitle: Step 46\nchallengeType: 0\ndashedName: step-46\n--description--\nYou have repetition in the goTown and goStore functions Repetition in your code is a sign that you need another function In the previous project, you learned how to work with function parameters like this:\njs\nfunction myFunction(param) {\nconsole log(param);\n}\nFunction parameters act as placeholders for values that you pass to the function when you call it Create an empty update function that takes a parameter called location --hints--\nYou should use the function keyword to declare update js\nassert match(code, /function\\s+update/);\nYour update function should take a parameter called location js\nassert match(update toString(), /update\\(\\s*location\\s*\\)/);\nYour update function should be empty js\nassert equal(update toString(), function update(location) {});\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7cc99577fbf25ee7a7d76.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "25901be8448c46242889f518755e3003",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7cc99577fbf25ee7a7d76.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\n--fcc-editable-region--\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\nfunction goStore() {\nbutton1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7cc99577fbf25ee7a7d76.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2f95d07d07f2eb1ffd14d6369099dd91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7cc99577fbf25ee7a7d76.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "const monsterHealthText = document querySelector(\"#monsterHealth\"); // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; --fcc-editable-region-- --fcc-editable-region-- function goTown() { button1 innerText = \"Go to store\"; button2 innerText = \"Go to cave\"; button3 innerText = \"Fight dragon\"; button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; text innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \"; } function goStore() { button1innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7cc99577fbf25ee7a7d76.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "eb73007b18e034c01c82d4cddfc0ef10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c23e6b511f22ed71197a.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a7c23e6b511f22ed71197a\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nYou need to wrap the text Store in double quotes Because your string is already wrapped in double quotes, you'll need to escape the quotes around Store You can escape them with a backslash \\ Here is an example:\njs\nconst escapedString = \"Naomi likes to play \\\"Zelda\\\" sometimes \";\nWrap the text Store in double quotes within your text innerText line --hints--\nYou should wrap the text Store in double quotes js\nassert match(goTown toString(), /text\\ innerText\\s*=\\s*\"You are in the town square You see a sign that says \\\\\"Store\\\\\" \"/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4241,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c23e6b511f22ed71197a.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "603decd8f8d5812f5f1f333c984a3c49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c23e6b511f22ed71197a.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says Store \";\n}\n--fcc-editable-region--\nfunction goStore() {\nbutton1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4241,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c23e6b511f22ed71197a.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "24074b782e65df252bea15a08da7428e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c23e6b511f22ed71197a.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "const monsterHealthText = document querySelector(\"#monsterHealth\"); // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; --fcc-editable-region-- function goTown() { button1 innerText = \"Go to store\"; button2 innerText = \"Go to cave\"; button3 innerText = \"Fight dragon\"; button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; text innerText = \"You are in the town square You see a sign that says Store \"; } --fcc-editable-region-- function goStore() { button1innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4241,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a7c23e6b511f22ed71197a.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "386833c6f2b1057d7362e6d03acd017e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a929e4260d08093756d2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8a929e4260d08093756d2\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nIn your role playing game, you will be able to visit different locations like the store, the cave, and the town square You will need to create a data structure that will hold the different locations Use const to create a variable called locations and assign it an empty array --hints--\nYou should use const to declare locations js\nassert match(code, /const\\s+locations/);\nlocations should be an array js\nassert isArray(locations);\nlocations should be empty js\nassert equal(locations length, 0);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a929e4260d08093756d2.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "802ece472aef9949b9b1e9b8d8483db6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a929e4260d08093756d2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = documentquerySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\n--fcc-editable-region--\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\n}\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a929e4260d08093756d2.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f70ea4a3a830909e45ce90644a09199c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a929e4260d08093756d2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"You are in the town square You see a sign that says \\\"Store\\\" \"; } function goStore() { button1 innerText = \"Buy 10 health (10 gold)\"; button2 innerText = \"Buy weapon (30 gold)\"; button3 innerText = \"Go to town square\"; button1 onclick = buyHealth; button2 onclick = buyWeapon; button3 onclick = goTown; text innerText = \"You enter the store \"; } function goCave() { console log(\"Going to cave \"); } function fightDragon() { console log(\"Fighting dragon\");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a929e4260d08093756d2.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d37becfc62cfcffbf99a1a43bfb4bf6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a9d876b2580943ba9351.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8a9d876b2580943ba9351\ntitle: Step 54\nchallengeType: 0\ndashedName: step-54\n--description--\nYour locations array will hold different locations like the store, the cave, and the town square Each location will be represented as an object Inside your locations array, add an object Inside that object add a key called name with a value of \"town square\" Remember to follow this syntax:\njs\n{\nkey: value\n}\n--hints--\nYour first value of locations should be an object js\nassert isObject(locations[0]);\nYour first value of locations should have a name property js\nassert isDefined(locations[0] name);\nYour first value of locations should have a name property with a value of \"town square\" js\nassert equal(locations[0] name, \"town square\");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a9d876b2580943ba9351.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fd6238ac7a3ac6efff455cb3bc585fd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a9d876b2580943ba9351.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\nconst locations = [\n];\n--fcc-editable-region--\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\n}\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a9d876b2580943ba9351.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "dfe64538d44f490ab0bda99edad79b9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a9d876b2580943ba9351.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "document querySelector(\"#monsterHealth\"); --fcc-editable-region-- const locations = [ ]; --fcc-editable-region-- // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { } function goTown() { button1 innerText = \"Go to store\"; button2 innerText = \"Go to cave\"; button3 innerText = \"Fight dragon\"; button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; text innerText = \"You are in the town square You see a sign that says \\\"Store\\\"\";\n}\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8a9d876b2580943ba9351.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a42d6b46e1616c5e943750e7b240943c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ac194679e60cb561b0a8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ac194679e60cb561b0a8\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nGive your empty button text array three string elements Use the three strings being assigned to the button innerText properties in the goTown function Remember that array values are separated by commas --hints--\nYour button text array should have three elements js\nassert lengthOf(locations[0][\"button text\"], 3);\nYour button text array should have three strings js\nassert isString(locations[0][\"button text\"][0]);\nassert isString(locations[0][\"button text\"][1]);\nassert isString(locations[0][\"button text\"][2]);\nThe first value in the button text array should be \"Go to store\" js\nassert equal(locations[0][\"button text\"][0], \"Go to store\");\nThe second value in the button text array should be \"Go to cave\" js\nassert equal(locations[0][\"button text\"][1], \"Go to cave\");\nThe third value in the button text array should be \"Fight dragon\" js\nassert equal(locations[0][\"button text\"][2], \"Fight dragon\");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ac194679e60cb561b0a8.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3552d508f4c2c8cacbdd41be605d13f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ac194679e60cb561b0a8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\",\n\"button text\": []\n}\n];\n--fcc-editable-region--\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\n}\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ac194679e60cb561b0a8.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4c49e2cec96504e2883f9ef63585d6fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ac194679e60cb561b0a8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); --fcc-editable-region-- const locations = [ { name: \"town square\", \"button text\": [] } ]; --fcc-editable-region-- // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { } function goTown() { button1 innerText = \"Go to store\"; button2 innerText = \"Go to cave\"; button3 innerText = \"Fight dragon\"; button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; textinnerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ac194679e60cb561b0a8.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1c4ba12dc94b6ca5221fb1237244e1ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ab0e27cbaf0b54ba8a42.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ab0e27cbaf0b54ba8a42\ntitle: Step 55\nchallengeType: 0\ndashedName: step-55\n--description--\nJust like array values, object properties are separated by a comma Add a comma after your name property and add a button text property with the value of an empty array Since the property name has a space in it, you will need to surround it with quotes js\n{\nname: \"Naomi\",\n\"favorite color\": \"purple\"\n}\n--hints--\nYour first locations value should be an object js\nassert isObject(locations[0]);\nYour first locations value should have a button text property js\nassert isDefined(locations[0][\"button text\"]);\nYour first locations value should have a button text property with a value that is an array js\nassert isArray(locations[0][\"button text\"]);\nYour first locations value should have a button text property with a value that is an empty array js\nassert equal(locations[0][\"button text\"] length, 0);\nYou should not remove or change the name property js\nassert equal(locations[0] name, \"town square\");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ab0e27cbaf0b54ba8a42.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b79d7270cf741a15e735aa5efe1c61f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ab0e27cbaf0b54ba8a42.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\"\n}\n];\n--fcc-editable-region--\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\n}\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ab0e27cbaf0b54ba8a42.md",
      "source_type": "git_repo"
    },
    "token_count": 513,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c7c5dd8adcf9ad7e71b835671b2d6d20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ab0e27cbaf0b54ba8a42.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterHealthText = document querySelector(\"#monsterHealth\"); --fcc-editable-region-- const locations = [ { name: \"town square\" } ]; --fcc-editable-region-- // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { } function goTown() { button1 innerText = \"Go to store\"; button2 innerText = \"Go to cave\"; button3 innerText = \"Fight dragon\"; button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; text innerText = \"You are in the town squareYou see a sign that says \\\"Store\\\" \";\n}\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ab0e27cbaf0b54ba8a42.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b5a356dde48377c2807e126e4dff4a4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ad8e01d7cb0deae5ec66.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ad8e01d7cb0deae5ec66\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCreate another property in your object called button functions Give this property an array containing the three functions assigned to the onclick properties in the goTown function Remember that these functions are variables, not strings, and should not be wrapped in quotes --hints--\nYour first locations object should have a button functions property js\nassert isDefined(locations[0][\"button functions\"]);\nYour button functions property should be an array js\nassert isArray(locations[0][\"button functions\"]);\nYour button functions property should have three values in it js\nassert lengthOf(locations[0][\"button functions\"], 3);\nYour first button functions array value should be the function goStore js\nassert equal(locations[0][\"button functions\"][0], goStore);\nYour second button functions array value should be the function goCave js\nassert equal(locations[0][\"button functions\"][1], goCave);\nYour third button functions array value should be the function fightDragon js\nassert equal(locations[0][\"button functions\"][2], fightDragon);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4953,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ad8e01d7cb0deae5ec66.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3ac79cf75bdf8d067abe28bcb01d0afe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ad8e01d7cb0deae5ec66.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"]\n}\n];\n--fcc-editable-region--\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\n}\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4953,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ad8e01d7cb0deae5ec66.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1b220a46f61aad0da039f160f6f5bf18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ad8e01d7cb0deae5ec66.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); --fcc-editable-region-- const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"] } ]; --fcc-editable-region-- // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { } function goTown() { button1 innerText = \"Go to store\"; button2 innerText = \"Go to cave\"; button3 innerText = \"Fight dragon\"; button1 onclick = goStore; button2onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4953,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ad8e01d7cb0deae5ec66.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fb2bdea459e2e6f284515e93caeecb44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ade9b2f5b30ef0b606c2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ade9b2f5b30ef0b606c2\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\nAdd one final property to the object named text Give this property the same string value as the one assigned to text innerText in the goTown function --hints--\nYour first locations value should have a text property js\nassert isDefined(locations[0][\"text\"]);\nYour text property should be a string js\nassert isString(locations[0][\"text\"]);\nYour text property should have the value \"You are in the town square You see a sign that says \\\"Store\\\" \"\njs\nassert equal(locations[0][\"text\"], \"You are in the town square You see a sign that says \\\"Store\\\" \");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ade9b2f5b30ef0b606c2.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a2ddecf0a202121208423044ff734903",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ade9b2f5b30ef0b606c2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon]\n}\n];\n--fcc-editable-region--\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\n}\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ade9b2f5b30ef0b606c2.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4454d352c2c8c3cded0a9147fa02f978",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ade9b2f5b30ef0b606c2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); --fcc-editable-region-- const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon] } ]; --fcc-editable-region-- // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { } function goTown() { button1 innerText = \"Go to store\"; button2 innerText = \"Go to cave\"; button3innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ade9b2f5b30ef0b606c2.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4b338fbdfc4abade3809e29f25fb3f4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ae85fcaedc0fddc7ca4f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ae85fcaedc0fddc7ca4f\ntitle: Step 59\nchallengeType: 0\ndashedName: step-59\n--description--\nAdd a second object to your locations array (remember to separate them with a comma) Following the pattern you used in the first object, create the same properties but use the values from the goStore function Set the name property to store --hints--\nYour locations array should have two values js\nassert lengthOf(locations, 2);\nBoth locations values should be objects js\nassert isObject(locations[0]);\nassert isObject(locations[1]);\nYour second locations object should have a name property with the value of store js\nassert equal(locations[1] name, \"store\");\nYour second locations object should have a button text property which is an array js\nassert isArray(locations[1][\"button text\"]);\nYour button text property should have the string values \"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", and \"Go to town square\" js\nassert equal(locations[1][\"button text\"][0], \"Buy 10 health (10 gold)\");\nassert equal(locations[1][\"button text\"][1], \"Buy weapon (30 gold)\");\nassert equal(locations[1][\"button text\"][2], \"Go to town square\");\nYour second locations object should have a button functions property which is an array js\nassert isArray(locations[1][\"button functions\"]);\nYour button functions property should have the function values buyHealth, buyWeapon, and goTown js\nassert equal(locations[1][\"button functions\"][0], buyHealth);\nassert equal(locations[1][\"button functions\"][1], buyWeapon);\nassert equal(locations[1][\"button functions\"][2], goTown);\nYour second locations object should have a text property which is a string js\nassert isString(locations[1] text);\nYour second locations object should have a text property with the value of \"You enter the store \" js\nassert equal(locations[1] text, \"You enter the store \");\nYou should not modify the first locations object js\nassert deepEqual(locations[0], {\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ae85fcaedc0fddc7ca4f.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1ca54cee1e946fb64667dc3ddaf11fef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ae85fcaedc0fddc7ca4f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "string js assert isString(locations[1] text); Your second locations object should have a text property with the value of \"You enter the store \" js assert equal(locations[1] text, \"You enter the store \"); You should not modify the first locations object js assert deepEqual(locations[0], { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n});\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ae85fcaedc0fddc7ca4f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "61126d38899ca7dba4f989ee2b97856f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ae85fcaedc0fddc7ca4f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = documentquerySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n}\n];\n--fcc-editable-region--\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\n}\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ae85fcaedc0fddc7ca4f.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "99604296e6dd6d75713428ca806a4d73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ae85fcaedc0fddc7ca4f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Fight dragon\"; button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; text innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \"; } function goStore() { button1 innerText = \"Buy 10 health (10 gold)\"; button2 innerText = \"Buy weapon (30 gold)\"; button3 innerText = \"Go to town square\"; button1 onclick = buyHealth; button2 onclick = buyWeapon; button3 onclick = goTown; text innerText = \"You enter the store\";\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ae85fcaedc0fddc7ca4f.md",
      "source_type": "git_repo"
    },
    "token_count": 164,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "20e89ad76520496f130678ef5aabfb52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b0b5053f16111b0b6b5f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8b0b5053f16111b0b6b5f\ntitle: Step 60\nchallengeType: 0\ndashedName: step-60\n--description--\nNow you can consolidate some of your code Start by copying the code from inside the goTown function and paste it into your update function Then, remove all the code from inside the goTown and goStore functions --hints--\nYour update function should set button1 innerText to \"Go to store\" js\nassert match(update toString(), /button1\\ innerText\\s*=\\s*('|\")Go to store\\1/);\nYour update function should set button2 innerText to \"Go to cave\" js\nassert match(update toString(), /button2\\ innerText\\s*=\\s*('|\")Go to cave\\1/);\nYour update function should set button3 innerText to \"Fight dragon\" js\nassert match(update toString(), /button3\\ innerText\\s*=\\s*('|\")Fight dragon\\1/);\nYour update function should set button1 onclick to goStore js\nassert match(update toString(), /button1\\ onclick\\s*=\\s*goStore/);\nYour update function should set button2 onclick to goCave js\nassert match(update toString(), /button2\\ onclick\\s*=\\s*goCave/);\nYour update function should set button3 onclick to fightDragon js\nassert match(update toString(), /button3\\ onclick\\s*=\\s*fightDragon/);\nYour update function should set text innerText to \"You are in the town square You see a sign that says \\\"Store\\\" \" js\nassert match(update toString(), /text\\ innerText\\s*=\\s*\"You are in the town square You see a sign that says \\\\\"Store\\\\\"\\ \"/);\nYour goTown function should be empty js\nassert match(goTown toString(), /function goTown\\(\\s*\\) \\{\\}/);\nYour goStore function should be empty js\nassert match(goStore toString(), /function goStore\\(\\s*\\) \\{\\}/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b0b5053f16111b0b6b5f.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e4faf3e735e907282fdac7fad4110f76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b0b5053f16111b0b6b5f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "should be empty js assert match(goTown toString(), /function goTown\\(\\s*\\) \\{\\}/); Your goStore function should be empty js assert match(goStore toString(), /function goStore\\(\\s*\\) \\{\\}/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to goUse the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b0b5053f16111b0b6b5f.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4d271e3e86fd62dd39749c6d43188454",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b0b5053f16111b0b6b5f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction update(location) {\n}\nfunction goTown() {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\nfunction goStore() {\nbutton1 innerText = \"Buy 10 health (10 gold)\";\nbutton2 innerText = \"Buy weapon (30 gold)\";\nbutton3 innerText = \"Go to town square\";\nbutton1 onclick = buyHealth;\nbutton2 onclick = buyWeapon;\nbutton3 onclick = goTown;\ntext innerText = \"You enter the store \";\n}\n--fcc-editable-region--\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b0b5053f16111b0b6b5f.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c3471691e6b8d5394ae67b959384cfab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b1762b7775124622e1a3.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8b1762b7775124622e1a3\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nInstead of assigning the innerText and onclick properties to specific strings and functions, the update function will use data from the location that is passed into it First, that data needs to be passed Inside the goTown function, call the update function Here is an example of calling a function named myFunction:\njs\nmyFunction();\n--hints--\nYou should call the update function in the goTown function js\nassert match(goTown toString(), /update\\(\\s*\\)/);\nDon't forget your ending semicolon js\nassert match(goTown toString(), /update\\(\\s*\\)\\s*;/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b1762b7775124622e1a3.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "23f92d12d029a3ceba9c3a13fa112597",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b1762b7775124622e1a3.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b1762b7775124622e1a3.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e14962e8213fba1f83ac3e77c088735a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b1762b7775124622e1a3.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\n--fcc-editable-region--\nfunction goTown() {\n}\n--fcc-editable-region--\nfunction goStore() {\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b1762b7775124622e1a3.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "cafaf4eff68591b32194add9f25c83ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b3cc436db8139cc5fc09.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8b3cc436db8139cc5fc09\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nNow it is time to use your update function Pass in your locations array into the update function call You pass arguments by including them within the parentheses of the function call For example, calling myFunction with an arg argument would look like:\njs\nmyFunction(arg)\nPass your locations array into the update call --hints--\nYou should pass the locations array into the update call js\nassert match(goTown toString(), /update\\(\\s*locations\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b3cc436db8139cc5fc09.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ffed2d082971c66ae6c8e20a976e9944",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b3cc436db8139cc5fc09.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = documentquerySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b3cc436db8139cc5fc09.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "44b13bcb738e007d8e2fd629176dbb32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b3cc436db8139cc5fc09.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = \"Go to store\"; button2 innerText = \"Go to cave\"; button3 innerText = \"Fight dragon\"; button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; text innerText = \"You are in the town square You see a sign that says \\\"Store\\\"\";\n}\n--fcc-editable-region--\nfunction goTown() {\nupdate();\n}\n--fcc-editable-region--\nfunction goStore() {\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b3cc436db8139cc5fc09.md",
      "source_type": "git_repo"
    },
    "token_count": 192,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1d56e4b13d418c2b1f71c4792b1d7571",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b6536156c51500739b41.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8b6536156c51500739b41\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nThe locations array contains two locations: the \"town square\" and the \"store\" Currently you are passing that entire array into the update function Pass in only the first element of the locations array by adding [0] at the end of the variable For example: myFunction(arg[0]); This is called bracket notation Values in an array are accessed by index Indices are numerical values and start at 0 - this is called zero-based indexing arg[0] would be the first element in the arg array --hints--\nYou should use bracket notation with locations js\nassert match(code, /locations\\s*\\[/);\nYou should access the first object in the locations array Remember that arrays are zero-based js\nassert match(code, /locations\\s*\\[\\s*0\\s*\\]/);\nYou should pass the first object in the locations array into the update function js\nassert match(code, /update\\(\\s*locations\\s*\\[\\s*0\\s*\\]\\s*\\)\\s*; /);\nThis call should still be in your goTown() function js\nassert match(goTown toString(), /update\\(\\s*locations\\s*\\[\\s*0\\s*\\]\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b6536156c51500739b41.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a73bac1525afc5fb157246ed7bfe1cd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b6536156c51500739b41.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "assert match(code, /update\\(\\s*locations\\s*\\[\\s*0\\s*\\]\\s*\\)\\s*; /); This call should still be in your goTown() function js assert match(goTown toString(), /update\\(\\s*locations\\s*\\[\\s*0\\s*\\]\\s*\\)\\s*; /); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b6536156c51500739b41.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9373bc9777ca7f39d51d22c5e371e515",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b6536156c51500739b41.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "#ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = documentquerySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\n--fcc-editable-region--\nfunction goTown() {\nupdate(locations);\n}\n--fcc-editable-region--\nfunction goStore() {\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b6536156c51500739b41.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b8021236bfc4628bc6e25b1c4a29d723",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b711ab7a12161c7d9b67.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8b711ab7a12161c7d9b67\ntitle: Step 64\nchallengeType: 0\ndashedName: step-64\n--description--\nNow your update function needs to use the argument you pass into it Inside the update function, change the value of the button1 innerText assignment to be location[\"button text\"] That way, you use bracket notation to get the \"button text\" property of the location object passed into the function --hints--\nYour update function should use bracket notation to get the \"button text\" property of the location object passed into the function js\nassert match(update toString(), /location\\[('|\")button text\\1\\]/);\nYou should assign the value of the \"button text\" property of the location object to the innerText property of button1 js\nassert match(update toString(), /button1\\ innerText\\s*=\\s*location\\s*\\[\\s*('|\")button text\\1\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b711ab7a12161c7d9b67.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "730a960edec7b9eac3c2725b09929bd1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b711ab7a12161c7d9b67.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b711ab7a12161c7d9b67.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d437606d6963c496bd82a10b43d39f34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b711ab7a12161c7d9b67.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction update(location) {\nbutton1 innerText = \"Go to store\";\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\n--fcc-editable-region--\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b711ab7a12161c7d9b67.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a9af6736b05b3e5550a864219fb6423f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b9770050d217d2247801.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8b9770050d217d2247801\ntitle: Step 65\nchallengeType: 0\ndashedName: step-65\n--description--\nlocation[\"button text\"] is an array with three elements Change the button1 innerText assignment to be location[\"button text\"][0] which represents the first element of the array --hints--\nYou should access the first element of the \"button text\" property of the location parameter js\nassert match(update toString(), /location\\s*\\[\\s*('|\")button text\\1\\s*\\]\\s*\\[\\s*0\\s*\\]/);\nYou should set the button1 innerText property to be the first element of the \"button text\" property of the location parameter js\nassert match(update toString(), /button1\\ innerText\\s*=\\s*location\\s*\\[\\s*('|\")button text\\1\\s*\\]\\s*\\[\\s*0\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4586,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b9770050d217d2247801.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5d7b782b6c15eee917aa6000abd6265b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b9770050d217d2247801.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4586,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b9770050d217d2247801.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e2830ae6d1a4716cb88fbb5d4f7cbe6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b9770050d217d2247801.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction update(location) {\nbutton1 innerText = location[\"button text\"];\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\n--fcc-editable-region--\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4586,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8b9770050d217d2247801.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7e3329b38bde6a74e953ed33b2460ff6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c0c8313e891a15ec23e7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c0c8313e891a15ec23e7\ntitle: Step 66\nchallengeType: 0\ndashedName: step-66\n--description--\nNow update button2 innerText and button3 innerText to be assigned the second and third values of the \"button text\" array, respectively --hints--\nYou should access the second element of the \"button text\" property of the location parameter js\nassert match(update toString(), /location\\s*\\[\\s*('|\")button text\\1\\s*\\]\\s*\\[\\s*1\\s*\\]/);\nYou should set the button2 innerText property to be the second element of the \"button text\" property of the location parameter js\nassert match(update toString(), /button2\\ innerText\\s*=\\s*location\\s*\\[\\s*('|\")button text\\1\\s*\\]\\s*\\[\\s*1\\s*\\]/);\nYou should access the third element of the \"button text\" property of the location parameter js\nassert match(update toString(), /location\\s*\\[\\s*('|\")button text\\1\\s*\\]\\s*\\[\\s*2\\s*\\]/);\nYou should set the button3 innerText property to be the third element of the \"button text\" property of the location parameter js\nassert match(update toString(), /button3\\ innerText\\s*=\\s*location\\s*\\[\\s*('|\")button text\\1\\s*\\]\\s*\\[\\s*2\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the  town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c0c8313e891a15ec23e7.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c0d936cf69fb268dc7daa1598109fff9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c0c8313e891a15ec23e7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "the third element of the \"button text\" property of the location parameter js assert match(update toString(), /button3\\ innerText\\s*=\\s*location\\s*\\[\\s*('|\")button text\\1\\s*\\]\\s*\\[\\s*2\\s*\\]/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c0c8313e891a15ec23e7.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4f375cb2b5a45979df2179b9c26db3ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c0c8313e891a15ec23e7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = \"Go to cave\";\nbutton3 innerText = \"Fight dragon\";\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\n--fcc-editable-region--\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c0c8313e891a15ec23e7.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a28ab620d2130c02e9071d3093d4a8d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c1154d3ae11aee80353f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c1154d3ae11aee80353f\ntitle: Step 67\nchallengeType: 0\ndashedName: step-67\n--description--\nFollowing the same pattern as you did for the button text, update the three buttons' onclick assignments to be the first, second, and third values of the \"button functions\" array --hints--\nYou should access the first element of the \"button functions\" property of the location parameter js\nassert match(update toString(), /location\\s*\\[\\s*('|\")button functions\\1\\s*\\]\\s*\\[\\s*0\\s*\\]/);\nYou should set the button1 onclick property to be the first element of the \"button functions\" property of the location parameter js\nassert match(update toString(), /button1\\ onclick\\s*=\\s*location\\s*\\[\\s*('|\")button functions\\1\\s*\\]\\s*\\[\\s*0\\s*\\]/);\nYou should access the second element of the \"button functions\" property of the location parameter js\nassert match(update toString(), /location\\s*\\[\\s*('|\")button functions\\1\\s*\\]\\s*\\[\\s*1\\s*\\]/);\nYou should set the button2 onclick property to be the second element of the \"button functions\" property of the location parameter js\nassert match(update toString(), /button2\\ onclick\\s*=\\s*location\\s*\\[\\s*('|\")button functions\\1\\s*\\]\\s*\\[\\s*1\\s*\\]/);\nYou should access the third element of the \"button functions\" property of the location parameter js\nassert match(update toString(), /location\\s*\\[\\s*('|\")button functions\\1\\s*\\]\\s*\\[\\s*2\\s*\\]/);\nYou should set the button3 onclick property to be the third element of the \"button functions\" property of the location parameter js\nassert match(update toString(), /button3\\ onclick\\s*=\\s*location\\s*\\[\\s*('|\")button functions\\1\\s*\\]\\s*\\[\\s*2\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5582,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c1154d3ae11aee80353f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4127383b1f907a58a6bd1aba3c979dcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c1154d3ae11aee80353f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "parameter js assert match(update toString(), /location\\s*\\[\\s*('|\")button functions\\1\\s*\\]\\s*\\[\\s*2\\s*\\]/); You should set the button3 onclick property to be the third element of the \"button functions\" property of the location parameter js assert match(update toString(), /button3\\ onclick\\s*=\\s*location\\s*\\[\\s*('|\")button functions\\1\\s*\\]\\s*\\[\\s*2\\s*\\]/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the townYou are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5582,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c1154d3ae11aee80353f.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4b955dbcad7b6cc763329ac48bc622c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c1154d3ae11aee80353f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = documentquerySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\ntext innerText = \"You are in the town square You see a sign that says \\\"Store \\\"\";\n}\n--fcc-editable-region--\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5582,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c1154d3ae11aee80353f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "1bf94b7b088f79663d512753bb9882e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c1154d3ae11aee80353f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "= fightDragon; --fcc-editable-region-- function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; text innerText = \"You are in the town square You see a sign that says \\\"Store \\\"\"; } --fcc-editable-region-- function goTown() { update(locations[0]); } function goStore() { } function goCave() { console log(\"Going to cave \"); } function fightDragon() { console log(\"Fighting dragon\");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5582,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c1154d3ae11aee80353f.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "67a072385d427d0c49735d2d9d2c7b5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c151b23bf21bc7c4fcba.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c151b23bf21bc7c4fcba\ntitle: Step 68\nchallengeType: 0\ndashedName: step-68\n--description--\nFinally, update the text innerText assignment to equal the text from the location object However, instead of using bracket notation, use dot notation Here is an example of accessing the name property of an object called person:\njs\nperson name\n--hints--\nYou should use dot notation to access the text property of the location object js\nassert match(update toString(), /location\\ text/);\nYou should set the text innerText property to be the text property of the location object js\nassert match(update toString(), /text\\ innerText\\s*=\\s*location\\ text/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c151b23bf21bc7c4fcba.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ca46c2ef49f4f4157f8bf7f719cafecb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c151b23bf21bc7c4fcba.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c151b23bf21bc7c4fcba.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5245d85301f6f2124cf10cbf284d008d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c151b23bf21bc7c4fcba.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\n--fcc-editable-region--\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = \"You are in the town square You see a sign that says \\\"Store\\\" \";\n}\n--fcc-editable-region--\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c151b23bf21bc7c4fcba.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b3b8828ee17ac866a2e147949f07b867",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c173949f851c83c64756.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c173949f851c83c64756\ntitle: Step 69\nchallengeType: 0\ndashedName: step-69\n--description--\nNow update your goStore function to call the update function Pass the second element of the locations array as your argument To make sure your refactoring is correct, try clicking your first button again You should see the same changes to your webpage that you saw earlier --hints--\nYour goStore function should call the update function js\nassert match(goStore toString(), /update\\(/);\nYour goStore function should pass the second element of the locations array as your argument to update() js\nassert match(goStore toString(), /update\\(\\s*locations\\s*\\[\\s*1\\s*\\]\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c173949f851c83c64756.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "73e48a58b3725172f34232c0a91e0be8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c173949f851c83c64756.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c173949f851c83c64756.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1adfb26152b910d52cb868e18676cc2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c173949f851c83c64756.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\n--fcc-editable-region--\nfunction goStore() {\n}\n--fcc-editable-region--\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4590,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c173949f851c83c64756.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9ae1b5632d45af21182dc4237954ad2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c242b25a531f2909e5bc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c242b25a531f2909e5bc\ntitle: Step 70\nchallengeType: 0\ndashedName: step-70\n--description--\nCreate two more empty functions named fightSlime and fightBeast These functions will be used in your upcoming cave object --hints--\nfightSlime should be a function js\nassert isFunction(fightSlime);\nfightBeast should be a function js\nassert isFunction(fightBeast);\nfightSlime should be empty js\nassert match(fightSlime toString(), /function fightSlime\\(\\s*\\) \\{\\}/);\nfightBeast should be empty js\nassert match(fightBeast toString(), /function fightBeast\\(\\s*\\) \\{\\}/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4528,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c242b25a531f2909e5bc.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d910da60a5bb44420304a29844491810",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c242b25a531f2909e5bc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4528,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c242b25a531f2909e5bc.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6e50b569dc71d65febdd87cfa4b4842c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c242b25a531f2909e5bc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4528,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c242b25a531f2909e5bc.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3c40f8c2bc5fb4715c05c1272f8ac7ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c2bbbd8aa82052f47c53.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c2bbbd8aa82052f47c53\ntitle: Step 71\nchallengeType: 0\ndashedName: step-71\n--description--\nAdd a third object to the locations array Give it the same properties as the other two objects Set name to cave Set button text to an array with the strings \"Fight slime\", \"Fight fanged beast\", and \"Go to town square\" Set the \"button functions\" to an array with the variables fightSlime, fightBeast, and goTown Set the text property to \"You enter the cave You see some monsters \" --hints--\nYou should have three values in your locations array js\nassert lengthOf(locations, 3);\nYour third locations value should be an object js\nassert isObject(locations[2]);\nYour third locations object should have a name property with the value of \"cave\" js\nassert equal(locations[2] name, \"cave\");\nYour third locations object should have a \"button text\" property which is an array js\nassert isArray(locations[2][\"button text\"]);\nYour \"button text\" property should have the string values \"Fight slime\", \"Fight fanged beast\", and \"Go to town square\" js\nassert equal(locations[2][\"button text\"][0], \"Fight slime\");\nassert equal(locations[2][\"button text\"][1], \"Fight fanged beast\");\nassert equal(locations[2][\"button text\"][2], \"Go to town square\");\nYour third locations object should have a \"button functions\" property which is an array js\nassert isArray(locations[2][\"button functions\"]);\nYour \"button functions\" property should have the function values fightSlime, fightBeast, and goTown js\nassert equal(locations[2][\"button functions\"][0], fightSlime);\nassert equal(locations[2][\"button functions\"][1], fightBeast);\nassert equal(locations[2][\"button functions\"][2], goTown);\nYour third locations object should have a text property which is a string js\nassert isString(locations[2] text);\nYour third locations object should have a text property with the value of \"You enter the cave You see some monsters \" js\nassert equal(locations[2] text, \"You enter the cave You see some monsters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6102,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c2bbbd8aa82052f47c53.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d67feb6049f957be6531fab135a5088f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c2bbbd8aa82052f47c53.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"button functions\" property should have the function values fightSlime, fightBeast, and goTown js assert equal(locations[2][\"button functions\"][0], fightSlime); assert equal(locations[2][\"button functions\"][1], fightBeast); assert equal(locations[2][\"button functions\"][2], goTown); Your third locations object should have a text property which is a string js assert isString(locations[2] text); Your third locations object should have a text property with the value of \"You enter the cave You see some monsters \" js assert equal(locations[2] text, \"You enter the cave You see some monsters\");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6102,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c2bbbd8aa82052f47c53.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6928397a14e5b4e3eacaf9fb9f2725c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c2bbbd8aa82052f47c53.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = documentquerySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n--fcc-editable-region--\n--fcc-editable-region--\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6102,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c2bbbd8aa82052f47c53.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "4842c714173ae11bb3f07e83fd9aacf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c2bbbd8aa82052f47c53.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, --fcc-editable-region-- --fcc-editable-region-- ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1 onclick = location[\"button functions\"][0]; button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = locationtext;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6102,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c2bbbd8aa82052f47c53.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "71289582569b14aa808aabd8c254c9ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c3ebc6c35e23785e1a19.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c3ebc6c35e23785e1a19\ntitle: Step 74\nchallengeType: 0\ndashedName: step-74\n--description--\nAfter the gold is updated, add a line to set health equal to health plus 10 --hints--\nYou should add 10 to health js\nassert match(code, /health\\s*=\\s*health\\s*\\+\\s*10/);\nYour buyHealth function should increase health by 10 js\nhealth = 10;\nbuyHealth();\nassert equal(health, 20);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4603,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c3ebc6c35e23785e1a19.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0b0c67d13882442a703439316be1d68d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c3ebc6c35e23785e1a19.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = documentquerySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4603,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c3ebc6c35e23785e1a19.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2a0c8b604407132b539558a25b4ad2d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c3ebc6c35e23785e1a19.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1 onclick = location[\"button functions\"][0]; button2onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\nfunction buyHealth() {\ngold = gold - 10;\n}\n--fcc-editable-region--\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4603,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c3ebc6c35e23785e1a19.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fb1dfa19cb5d5eea8ef294ee617cc625",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c31ec0ec78216a1c36a0.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c31ec0ec78216a1c36a0\ntitle: Step 72\nchallengeType: 0\ndashedName: step-72\n--description--\nNow that you have a \"cave\" location object, update your goCave function to call update and pass that new \"cave\" location Remember that this is the third element in your locations array Don't forget to remove your console log call --hints--\nYou should use bracket notation to access the third element in your locations array js\nassert match(code, /locations\\s*\\[\\s*2\\s*\\]/);\nYou should pass the third element in your locations array to update js\nassert match(code, /update\\(\\s*locations\\s*\\[\\s*2\\s*\\]\\s*\\)/);\nYou should call update with the third element in your locations array in your goCave function js\nassert match(goCave toString(), /update\\(\\s*locations\\s*\\[\\s*2\\s*\\]\\s*\\)/);\nYou should not have the console log statement in your goCave function js\nassert notMatch(goCave toString(), /console\\ log/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c31ec0ec78216a1c36a0.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ba5eddf81dda56f5792566fa8e9f58df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c31ec0ec78216a1c36a0.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c31ec0ec78216a1c36a0.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3dbcef45b027517d68b46b164cbadafb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c31ec0ec78216a1c36a0.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\n--fcc-editable-region--\nfunction goCave() {\nconsole log(\"Going to cave \");\n}\n--fcc-editable-region--\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\n}\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c31ec0ec78216a1c36a0.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5728370cb63fcfe5d7f370023edb6322",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c370ad8c68227137e0bc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c370ad8c68227137e0bc\ntitle: Step 73\nchallengeType: 0\ndashedName: step-73\n--description--\nNow that your \"store\" and \"cave\" locations are complete, you can code the actions the player takes at those locations Inside the buyHealth function, set gold equal to gold minus 10 For example, here is how you would set num equal to 5 less than num: num = num - 5; --hints--\nYou should subtract 10 from gold js\nassert match(code, /gold\\s*=\\s*gold\\s*-\\s*10/);\nYour buyHealth function should reduce gold by 10 js\ngold = 10;\nbuyHealth();\nassert equal(gold, 0);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c370ad8c68227137e0bc.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6447bf00d9cc6e480a1c5499f61b6333",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c370ad8c68227137e0bc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c370ad8c68227137e0bc.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b9352ec987a578ceb3ee48001eb1c6bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c370ad8c68227137e0bc.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\nfunction buyHealth() {\n}\n--fcc-editable-region--\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c370ad8c68227137e0bc.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d2372f010e65d235c95a542b07f112f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c41ecaf1bd24536129b8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c41ecaf1bd24536129b8\ntitle: Step 75\nchallengeType: 0\ndashedName: step-75\n--description--\nThere is a shorthand way to add or subtract from a variable called compound assignment For example, changing num = num + 5 to compound assignment would look like num += 5 Update both lines inside your buyHealth function to use compound assignment --hints--\nYou should change gold to use compound assignment js\nassert notMatch(code, /gold\\s*=\\s*gold\\s*-\\s*10/);\nYou should change health to use compound assignment js\nassert notMatch(code, /health\\s*=\\s*health\\s*\\+\\s*10/);\nYour buyHealth function should still update the values js\ngold = 10;\nhealth = 10;\nbuyHealth();\nassert equal(gold, 0);\nassert equal(health, 20);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c41ecaf1bd24536129b8.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7ba85cb3dccecf8aecc3cdee5ae2b983",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c41ecaf1bd24536129b8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c41ecaf1bd24536129b8.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ec3cadc1041f70d6ec45196dfff010e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c41ecaf1bd24536129b8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\nfunction buyHealth() {\ngold = gold - 10;\nhealth = health + 10;\n}\n--fcc-editable-region--\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c41ecaf1bd24536129b8.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a1a7e948a319eca69544ca615c4eae14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c465fa7b0c252f4a8f0c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c465fa7b0c252f4a8f0c\ntitle: Step 76\nchallengeType: 0\ndashedName: step-76\n--description--\nNow that you are updating the gold and health variables, you need to display those new values on the game screen You have retrieved the healthText and goldText elements in a prior step After your assignment lines, assign the innerText property of goldText to be the variable gold Use the same pattern to update healthText with the health variable You can test this by clicking your \"Go to store\" button, followed by your \"Buy Health\" button Note: Your answer should only be two lines of code --hints--\nYour buyHealth function should update the text of healthText to be the value of health js\nhealth = 10;\nbuyHealth();\nconst target = document querySelector('#healthText');\nassert equal(target innerText, '20');\nYour buyHealth function should update the text of goldText to be the value of gold js\ngold = 10;\nbuyHealth();\nconst target = document querySelector('#goldText');\nassert equal(target innerText, '0');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5272,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c465fa7b0c252f4a8f0c.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9fca622ed5e24bc7097271caaab80558",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c465fa7b0c252f4a8f0c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5272,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c465fa7b0c252f4a8f0c.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2ff1983095360db208c9282315f1ddde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c465fa7b0c252f4a8f0c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\nfunction buyHealth() {\ngold -= 10;\nhealth += 10;\n}\n--fcc-editable-region--\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5272,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c465fa7b0c252f4a8f0c.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2fce3a3e6dc3df53589f18cccc32aae5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c4db0710f3260f867a92.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c4db0710f3260f867a92\ntitle: Step 77\nchallengeType: 0\ndashedName: step-77\n--description--\nWhat if the player doesn't have enough gold to buy health You should use an if statement to check if the player has enough gold to buy health In the previous project, you learned how to work with if statements like this:\njs\nconst num = 5;\nif (num >= 3) {\nconsole log(\"This code will run because num is greater than or equal to 3 \");\n}\nStart by placing all of the code in your buyHealth function inside an if statement For the if statement condition, check if gold is greater than or equal to 10 --hints--\nYour buyHealth function should have an if statement js\nassert match(buyHealth toString(), /if/);\nYour if statement should check if gold is greater than or equal to 10 js\nassert match(buyHealth toString(), /if\\s*\\(\\s*gold\\s*>=\\s*10\\s*\\)/);\nAll of your buyHealth code should be inside the if statement js\nassert match(buyHealth toString(), /if\\s*\\(\\s*gold\\s*>=\\s*10\\s*\\)\\s*{\\s*gold\\s*-=\\s*10\\s*; \\s*health\\s*\\+=\\s*10\\s*; \\s*goldText\\ innerText\\s*=\\s*gold\\s*; \\s*healthText\\ innerText\\s*=\\s*health\\s*; \\s*}/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c4db0710f3260f867a92.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1f09dcd191462749096aafdef4b4d5eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c4db0710f3260f867a92.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "buyHealth code should be inside the if statement js assert match(buyHealth toString(), /if\\s*\\(\\s*gold\\s*>=\\s*10\\s*\\)\\s*{\\s*gold\\s*-=\\s*10\\s*; \\s*health\\s*\\+=\\s*10\\s*; \\s*goldText\\ innerText\\s*=\\s*gold\\s*; \\s*healthText\\ innerText\\s*=\\s*health\\s*; \\s*}/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c4db0710f3260f867a92.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "eb833e57e016b25f48b0d6186f1bdea8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c4db0710f3260f867a92.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = documentquerySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c4db0710f3260f867a92.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "eb7e10a4ddadb7b5324c456125ef75d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c4db0710f3260f867a92.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1 onclick = location[\"button functions\"][0]; button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = locationtext;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\nfunction buyHealth() {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n}\n--fcc-editable-region--\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c4db0710f3260f867a92.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "30478070265a03e24830878f31323289",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c5db7888af27af23f0dd.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c5db7888af27af23f0dd\ntitle: Step 78\nchallengeType: 0\ndashedName: step-78\n--description--\nNow when a player tries to buy health, it will only work if they have enough money If they do not, nothing will happen Add an else statement where you can put code to run if a player does not have enough money In the previous project, you learned how to work with else statements like this:\n```js\nif (num >= 5) {\n} else {\n}\n```\n--hints--\nYour buyHealth function should have an else statement js\nassert match(buyHealth toString(), /else/);\nYour else statement should come after your if statement js\nconst split = buyHealth toString() split(/\\s/);\nassert isAbove(split indexOf('else'), split indexOf('if'));\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the  town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c5db7888af27af23f0dd.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c828bc84579751aa2d9b5fde5fb4cbb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c5db7888af27af23f0dd.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c5db7888af27af23f0dd.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c8eea9965ed91f39f7d35c0a99288f0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c5db7888af27af23f0dd.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c5db7888af27af23f0dd.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d2d083ded9c3d0a9255fb536901cbe16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c65b75664c28a8e59c16.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c65b75664c28a8e59c16\ntitle: Step 79\nchallengeType: 0\ndashedName: step-79\n--description--\nInside the else statement, set text innerText to equal \"You do not have enough gold to buy health \" --hints--\nYour buyHealth function should set text innerText to equal \"You do not have enough gold to buy health \" js\nassert match(buyHealth toString(), /text\\ innerText\\s*=\\s*('|\")You do not have enough gold to buy health\\ \\1/);\nYour buyHealth function should update text innerText when gold is less than 10 js\ngold = 5;\nhealth = 10;\nbuyHealth();\nassert equal(text innerText, 'You do not have enough gold to buy health ');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c65b75664c28a8e59c16.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "50efdfa95e247e5b0f85dfe54e1d812d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c65b75664c28a8e59c16.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c65b75664c28a8e59c16.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1c58fa41efd47d5f7e38cafae799f043",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c65b75664c28a8e59c16.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c65b75664c28a8e59c16.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "03a2cab1f5a2dad1df38e5b0b7d36394",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c6815f5f1a29735efe1b.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c6815f5f1a29735efe1b\ntitle: Step 80\nchallengeType: 0\ndashedName: step-80\n--description--\nUse const to create a weapons variable above your locations array Assign it an empty array --hints--\nYou should use const to declare your weapons variable js\nassert match(code, /const\\s+weapons/i);\nYour weapons variable should be an array js\nassert isArray(weapons);\nYour weapons variable should be empty js\nassert equal(weapons length, 0);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c6815f5f1a29735efe1b.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7fd3cd47f2cc80267446ebb84c4a0315",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c6815f5f1a29735efe1b.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = documentquerySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\n--fcc-editable-region--\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c6815f5f1a29735efe1b.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "27d9523c1822e0049f27d3ea2fcf95af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c6815f5f1a29735efe1b.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c6815f5f1a29735efe1b.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c267d30dc0ac375cb6b24725762f7e27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7322e42962ad53ad204.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c7322e42962ad53ad204\ntitle: Step 81\nchallengeType: 0\ndashedName: step-81\n--description--\nJust like your locations array, your weapons array will hold objects Add four objects to the weapons array, each with two properties: name and power The first should have the name set to \"stick\" and the power set to 5 The second should be \"dagger\" and 30 The third, \"claw hammer\" and 50 The fourth, \"sword\" and 100 --hints--\nYour weapons array should have four values js\nassert lengthOf(weapons, 4);\nYour weapons array should have four objects js\nassert isObject(weapons[0]);\nassert isObject(weapons[1]);\nassert isObject(weapons[2]);\nassert isObject(weapons[3]);\nYour first weapons object should have the name set to \"stick\" and the power set to 5 js\nassert equal(weapons[0] name, 'stick');\nassert equal(weapons[0] power, 5);\nYour second weapons object should have the name set to \"dagger\" and the power set to 30 js\nassert equal(weapons[1] name, 'dagger');\nassert equal(weapons[1] power, 30);\nYour third weapons object should have the name set to \"claw hammer\" and the power set to 50 js\nassert equal(weapons[2] name, 'claw hammer');\nassert equal(weapons[2] power, 50);\nYour fourth weapons object should have the name set to \"sword\" and the power set to 100 js\nassert equal(weapons[3] name, 'sword');\nassert equal(weapons[3] power, 100);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5867,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7322e42962ad53ad204.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7588a898dc404f8b9bfae7c6a4fae71c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7322e42962ad53ad204.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "name set to \"sword\" and the power set to 100 js assert equal(weapons[3] name, 'sword'); assert equal(weapons[3] power, 100); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5867,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7322e42962ad53ad204.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e6fafb4ad8b4a70a2f1ebb6dc062e99f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7322e42962ad53ad204.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\n--fcc-editable-region--\nconst weapons = [];\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5867,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7322e42962ad53ad204.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ec01fc96567166f6dac511b2754c05aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7322e42962ad53ad204.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1 onclick = location[\"button functions\"][0]; button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = location text; } function goTown() { update(locations[0]); } function goStore() { update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon\");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5867,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7322e42962ad53ad204.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bf7af9b920cf53368708cb080d240acf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7a59e72c02bb1c717d2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c7a59e72c02bb1c717d2\ntitle: Step 82\nchallengeType: 0\ndashedName: step-82\n--description--\nInside your buyWeapon function, add an if statement to check if gold is greater than or equal to 30 --hints--\nYour buyWeapon function should have an if statement js\nassert include(buyWeapon toString(), 'if');\nYour if statement should check if gold is greater than or equal to 30 js\nassert match(buyWeapon toString(), /if\\s*\\(\\s*gold\\s*>=\\s*30\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7a59e72c02bb1c717d2.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "19f757cde61c09a286d9a13c5cec84e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7a59e72c02bb1c717d2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = documentquerySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7a59e72c02bb1c717d2.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "029ab9011fc6e295e7bd565b65f2d759",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7a59e72c02bb1c717d2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c7a59e72c02bb1c717d2.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a509544b59cacccbde32920f64332bab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c89e4272512d44fc1c66.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c89e4272512d44fc1c66\ntitle: Step 83\nchallengeType: 0\ndashedName: step-83\n--description--\nSimilar to your buyHealth function, set gold equal to 30 less than its current value Make sure this is inside your if statement --hints--\nYou should use compound assignment to subtract 30 from gold js\nassert match(buyWeapon toString(), /gold\\s*-=\\s*30/);\nYour buyWeapon function should reduce gold by 30 js\ngold = 30;\nbuyWeapon();\nassert equal(gold, 0);\nYour code should be in your if statement js\ngold = 20;\nbuyWeapon();\nassert equal(gold, 20);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5145,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c89e4272512d44fc1c66.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7f6297e2438c24e10a96304315e51d25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c89e4272512d44fc1c66.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5145,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c89e4272512d44fc1c66.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5f3c7ae1bc9162e09964c4256294d605",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c89e4272512d44fc1c66.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5145,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c89e4272512d44fc1c66.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1673b1b3b951540d0b57e244a53ba3c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c8cee8e5cf2e001789b4.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8c8cee8e5cf2e001789b4\ntitle: Step 84\nchallengeType: 0\ndashedName: step-84\n--description--\nThe value of the currentWeaponIndex variable corresponds to an index in the weapons array The player starts with a \"stick\", since currentWeaponIndex starts at 0 and weapons[0] is the \"stick\" weapon In the buyWeapon function, use compound assignment to add 1 to currentWeaponIndex - the user is buying the next weapon in the weapons array --hints--\nYou should use compound assignment to add one to currentWeaponIndex js\nassert match(buyWeapon toString(), /currentWeaponIndex\\s*\\+=\\s*1/);\nYour buyWeapon function should increase currentWeaponIndex by 1 js\ngold = 30;\ncurrentWeaponIndex = 0;\nbuyWeapon();\nassert equal(currentWeaponIndex, 1);\nYour code should be in your if statement js\ngold = 20;\ncurrentWeaponIndex = 0;\nbuyWeapon();\nassert equal(currentWeaponIndex, 0);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c8cee8e5cf2e001789b4.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "85e234b7ac5a08d35a6a26ef18dc00f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c8cee8e5cf2e001789b4.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c8cee8e5cf2e001789b4.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "3ff0a8f295012c338e9b7603fec5bc4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c8cee8e5cf2e001789b4.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c8cee8e5cf2e001789b4.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "1eb635106af5eb5cc2586c602f5465e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c8cee8e5cf2e001789b4.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = location text; } function goTown() { update(locations[0]); } function goStore() { update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health\";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8c8cee8e5cf2e001789b4.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "db6ff5d58d712a51992bc4d5e1ad3e34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ca22d29fe62f3952bdf5.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ca22d29fe62f3952bdf5\ntitle: Step 85\nchallengeType: 0\ndashedName: step-85\n--description--\nIn the previous project, you learned how to use the increment operator to increase a variable by 1 js\nlet num = 5;\nnum++;\n// prints 6\nconsole log(num);\nChange your currentWeaponIndex assignment to use the increment operator --hints--\nYou should use the increment operator to increase currentWeaponIndex by 1 js\nassert match(buyWeapon toString(), /currentWeaponIndex\\s*\\+\\s*\\+/);\nYou should not use compound assignment to increase currentWeaponIndex by 1 js\nassert notMatch(buyWeapon toString(), /currentWeaponIndex\\s*\\+=\\s*1/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ca22d29fe62f3952bdf5.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3cc3023f3f58372db6d772dda8556285",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ca22d29fe62f3952bdf5.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ca22d29fe62f3952bdf5.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0f4d7092bcd857e218cc4ae19a9b9df4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ca22d29fe62f3952bdf5.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ca22d29fe62f3952bdf5.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c87d6d9433062cfb9348304f0eebe7a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ca22d29fe62f3952bdf5.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = location text; } function goTown() { update(locations[0]); } function goStore() { update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health\";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex += 1;\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ca22d29fe62f3952bdf5.md",
      "source_type": "git_repo"
    },
    "token_count": 188,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7daff33ceba0228b0ac927c844aaa0c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cb19bd7f8a304e5427a1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8cb19bd7f8a304e5427a1\ntitle: Step 86\nchallengeType: 0\ndashedName: step-86\n--description--\nNow update the goldText element to display the new value of gold, and update the text element to display \"You now have a new weapon \" --hints--\nYou should update the innerText property of the goldText element to be gold js\nassert match(buyWeapon toString(), /goldText\\ innerText\\s*=\\s*gold/);\nYou should update the innerText property of the text element to be \"You now have a new weapon \" js\nassert match(buyWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You now have a new weapon\\ \\1/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cb19bd7f8a304e5427a1.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "96d48d70e2e9362963081d8d3b09570b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cb19bd7f8a304e5427a1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cb19bd7f8a304e5427a1.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "51e19fdcf86e20d38e8f8bbc832aae37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cb19bd7f8a304e5427a1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cb19bd7f8a304e5427a1.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e74006b104099a7e2f19e6baf7eb4dfa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cb19bd7f8a304e5427a1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = location text; } function goTown() { update(locations[0]); } function goStore() { update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health\";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cb19bd7f8a304e5427a1.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "78c2813783fd25beb40a7f4ee884de46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cbd1e3595431d5a2b3f1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8cbd1e3595431d5a2b3f1\ntitle: Step 87\nchallengeType: 0\ndashedName: step-87\n--description--\nYou should tell the player what weapon they bought In between the two lines you just wrote, use let to initialize a new variable called newWeapon Set this to equal weapons --hints--\nYour buyWeapon function should have a variable named newWeapon js\nassert match(buyWeapon toString(), /newWeapon/);\nYou should use let to declare newWeapon js\nassert match(code, /let\\s+newWeapon/);\nnewWeapon should be initialised to have the value of weapons Don't forget your semicolon js\nassert match(buyWeapon toString(), /newWeapon\\s*=\\s*weapons\\s*;/);\nnewWeapon should be declared before you modify text js\nconst splitBySpaces = buyWeapon toString() split(/\\s+/);\nconst textLocation = splitBySpaces indexOf('text innerText');\nconst newWeaponIndex = splitBySpaces indexOf('newWeapon');\nconst newWeaponLocation = newWeaponIndex == -1 newWeaponIndex : textLocation;\nassert isBelow(newWeaponLocation, textLocation);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5742,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cbd1e3595431d5a2b3f1.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "07554fd9c7b54c606e09abcc3a6b2cf0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cbd1e3595431d5a2b3f1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5742,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cbd1e3595431d5a2b3f1.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0fc1bf7c93099d2c3f533cbe1fe5a5f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cbd1e3595431d5a2b3f1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\ntext innerText = \"You now have a new weapon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5742,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cbd1e3595431d5a2b3f1.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "1323760b7f432972c385fd02a2b14449",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cbd1e3595431d5a2b3f1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; text innerText = \"You now have a new weapon\";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5742,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cbd1e3595431d5a2b3f1.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d4c8e186f2aac1dd281d5785154fd2fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cce1b0c32c33017cf2e9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8cce1b0c32c33017cf2e9\ntitle: Step 88\nchallengeType: 0\ndashedName: step-88\n--description--\nUse bracket notation to access an object within the weapons array and assign it to your newWeapon variable Place the variable currentWeaponIndex within the brackets When you use a variable in bracket notation, you are accessing the property or index by the value of that variable For example, this code uses the index variable to access a value of array js\nlet value = array[index];\n--hints--\nYou should update newWeapon to have the value of weapons[currentWeaponIndex] js\nassert match(buyWeapon toString(), /newWeapon\\s*=\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cce1b0c32c33017cf2e9.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "248a77b6dff562c3b53b3a68e3d4a87e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cce1b0c32c33017cf2e9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cce1b0c32c33017cf2e9.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f47a4836355dde38c0cbb9b69067ada2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cce1b0c32c33017cf2e9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons;\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cce1b0c32c33017cf2e9.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "fc1c957e4806eff3ccae9e13f89cde0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cce1b0c32c33017cf2e9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons; textinnerText = \"You now have a new weapon \";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cce1b0c32c33017cf2e9.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b47a7929cd00281f2316d92da3171231",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce1dfc990134162b3bd9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ce1dfc990134162b3bd9\ntitle: Step 89\nchallengeType: 0\ndashedName: step-89\n--description--\nweapons[currentWeaponIndex] is an object Use dot notation to get the name property of that object --hints--\nYou should update newWeapon to have the value of weapons[currentWeaponIndex] name js\nassert match(buyWeapon toString(), /newWeapon\\s*=\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\ name\\s*; /);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce1dfc990134162b3bd9.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ffe6d3a947ed97f63d022fadebf64214",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce1dfc990134162b3bd9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = documentquerySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce1dfc990134162b3bd9.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1d374116941a59a6420088ccfae93352",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce1dfc990134162b3bd9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex];\ntext innerText = \"You now have a new weapon \";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce1dfc990134162b3bd9.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "80ac510119bb132f70cc674a94a80aab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0337d7c67377a4a76c6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d0337d7c67377a4a76c6\ntitle: Step 92\nchallengeType: 0\ndashedName: step-92\n--description--\nUp until now, any time text innerText was updated, the old text was erased This time, use the += operator to add text to the end of text innerText Add the string \" In your inventory you have: \" - include the spaces at the beginning and the end --hints--\nYou should add a new line with text innerText js\nconst matches = buyWeapon toString() match(/text\\ innerText/g);\nassert lengthOf(matches, 2);\nYou should use the += operator to add to text innerText js\nassert match(buyWeapon toString(), /text\\ innerText\\s*\\+=\\s*/)\nYou should add the string \" In your inventory you have: \" to the end of text innerText Mind the spaces js\nassert match(buyWeapon toString(), /text\\ innerText\\s*\\+=\\s*('|\")\\sIn your inventory you have:\\s\\1/)\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0337d7c67377a4a76c6.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a8c1fd78214cbe5887b009d33c60b4f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0337d7c67377a4a76c6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0337d7c67377a4a76c6.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "36674a76660a09de5fb355e96a082519",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0337d7c67377a4a76c6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0337d7c67377a4a76c6.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "28464bb4c28dc569c8c92cdfb77fa4ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0337d7c67377a4a76c6.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons[currentWeaponIndex]name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0337d7c67377a4a76c6.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d58ff1f11c9e4e26a0d84781fb900d72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cf22272d6d35af80d4ac.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8cf22272d6d35af80d4ac\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nBack at the beginning of this project, you created the inventory array Add the newWeapon to the end of the inventory array using the push() method In the previous project, you learned how to work with the push method like this:\njs\nconst myArray = [];\nmyArray push(\"new item\");\n// myArray is now [\"new item\"]\n--hints--\nYou should use the push method on inventory js\nassert match(buyWeapon toString(), /inventory\\ push/)\nYou should push the value of newWeapon to the inventory array js\nassert match(buyWeapon toString(), /inventory\\ push\\s*\\(\\s*newWeapon\\s*\\)/)\nYour buyWeapon function should add the value of newWeapon to the inventory array js\ninventory = [];\ncurrentWeaponIndex = 0;\nbuyWeapon();\nassert deepEqual(inventory, [\"dagger\"]);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cf22272d6d35af80d4ac.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "42103d811135b43e8f16cfa80e328359",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cf22272d6d35af80d4ac.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cf22272d6d35af80d4ac.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7dc5995258ca57823da49976f4bf8fe6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cf22272d6d35af80d4ac.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cf22272d6d35af80d4ac.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ced15148737e8c13766964f5f2727a38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cf22272d6d35af80d4ac.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons[currentWeaponIndex]name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5641,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8cf22272d6d35af80d4ac.md",
      "source_type": "git_repo"
    },
    "token_count": 173,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "cd367a8e6378fe9b479c4a9686ab3331",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d08668fa8b38732486e9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d08668fa8b38732486e9\ntitle: Step 93\nchallengeType: 0\ndashedName: step-93\n--description--\nAt the end of the second text innerText string you just added, use the concatenation operator to add the contents of inventory to the string --hints--\nYou should not change the \" In your inventory you have: \" string js\nassert match(buyWeapon toString(), /text\\ innerText\\s*\\+=\\s*('|\")\\sIn your inventory you have:\\s\\1/)\nYou should use the concatenation operator + to add the contents of inventory to the string js\nassert match(buyWeapon toString(), /text\\ innerText\\s*\\+=\\s*('|\")\\sIn your inventory you have:\\s\\1\\s*\\+\\s*inventory/)\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d08668fa8b38732486e9.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "57a7ca93fdc114689e288ebe452866f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d08668fa8b38732486e9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d08668fa8b38732486e9.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "87540687d9015ad2916d5733a4c4948c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d08668fa8b38732486e9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d08668fa8b38732486e9.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ec4f104234dd8645134edd5c32029563",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d08668fa8b38732486e9.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons[currentWeaponIndex]name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d08668fa8b38732486e9.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "54d6c20d84baecd60ba3f65c24efea9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce73d0dce43468f6689c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ce73d0dce43468f6689c\ntitle: Step 90\nchallengeType: 0\ndashedName: step-90\n--description--\nIn the previous project, you learned how to work with the concatenation operator to insert variables into a string like this:\n```js\nconst organization = \"freeCodeCamp\";\n// \"Hello, our name is freeCodeCamp \"\n\"Hello, our name is \" + organization + \" \";\n```\nUpdate the string \"You now have a new weapon \" to \"You now have a \" followed by the name of the new weapon, and remember to end the sentence with a period --hints--\nYou should update the text innerText assignment to start with the string \"You now have a \" js\nassert match(buyWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You now have a \\1/);\nYou should use the concatenation operator to add newWeapon to the end of the text innerText string js\nassert match(buyWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You now have a \\1\\s*\\+\\s*newWeapon/);\nYou should use the concatenation operator to end your text innerText string with a js\nassert match(buyWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You now have a \\1\\s*\\+\\s*newWeapon\\s*\\+\\s*('|\")\\ \\2/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce73d0dce43468f6689c.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d4b5903a7e7b3bf6a220e1bbcfc8e5e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce73d0dce43468f6689c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "to end your text innerText string with a js assert match(buyWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You now have a \\1\\s*\\+\\s*newWeapon\\s*\\+\\s*('|\")\\ \\2/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce73d0dce43468f6689c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6a188cd8bcebf2c153ffa822d12e9bd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce73d0dce43468f6689c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce73d0dce43468f6689c.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0538ed4aa65d4a02a0de6dc3c66c66e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce73d0dce43468f6689c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1 onclick = location[\"button functions\"][0]; button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = locationtext;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a new weapon \";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5882,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ce73d0dce43468f6689c.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5289573ec47012662cf66edcfd20a26f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0c4f12c2239b6618582.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d0c4f12c2239b6618582\ntitle: Step 94\nchallengeType: 0\ndashedName: step-94\n--description--\nAdd an else statement to your buyWeapon function In that statement, set text innerText to equal \"You do not have enough gold to buy a weapon \" --hints--\nYou should add an else statement to your buyWeapon function js\nassert match(buyWeapon toString(), /else/);\nYour else statement should come after your if statement js\nconst split = buyWeapon toString() split(/\\s|\\n/);\nassert isAbove(split indexOf('else'), split indexOf('if'));\nYou should set text innerText to \"You do not have enough gold to buy a weapon \" js\nassert match(buyWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You do not have enough gold to buy a weapon \\1/);\nYour else statement should set text innerText to \"You do not have enough gold to buy a weapon \" js\ngold = 20;\nbuyWeapon();\nassert equal(text innerText, 'You do not have enough gold to buy a weapon ');\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0c4f12c2239b6618582.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "8833657900e991d497352be67ab29adf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0c4f12c2239b6618582.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0c4f12c2239b6618582.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "001013a90c73c4adcc0ac8f216f7e20d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0c4f12c2239b6618582.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0c4f12c2239b6618582.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "487e41a20e1f50992750e37c04d24325",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0c4f12c2239b6618582.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons[currentWeaponIndex]name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0c4f12c2239b6618582.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1f1bbf9c546d0f4935e7a356e57f3ad0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0fdf2dad83a92883a80.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d0fdf2dad83a92883a80\ntitle: Step 95\nchallengeType: 0\ndashedName: step-95\n--description--\nOnce a player has the best weapon, they cannot buy another one Wrap all of the code in your buyWeapon function inside another if statement The condition should check if currentWeaponIndex is less than 3 - the index of the last weapon --hints--\nYou should have a new if statement that checks if currentWeaponIndex is less than 3 js\nassert match(buyWeapon toString(), /currentWeaponIndex\\s*\\<\\s*3/)\nYour existing if statement should be within your new if statement js\ncurrentWeaponIndex = 5;\ngold = 50;\nbuyWeapon();\nassert equal(gold, 50);\nYour existing else statement should be within your new if statement js\ncurrentWeaponIndex = 5;\ngold = 10;\nbuyWeapon();\nassert notEqual(text innerText, \"You do not have enough gold to buy a weapon \");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0fdf2dad83a92883a80.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6ae9742539a7b168d97a9a0172bc7903",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0fdf2dad83a92883a80.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0fdf2dad83a92883a80.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8e632734114547b14d849e13841540b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0fdf2dad83a92883a80.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0fdf2dad83a92883a80.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bc59dd504c056efb049c43de9315b6f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0fdf2dad83a92883a80.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons[currentWeaponIndex]name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d0fdf2dad83a92883a80.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "58896c617821c39efca9ec468352db17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d1c72e8bb13c2074d93c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d1c72e8bb13c2074d93c\ntitle: Step 98\nchallengeType: 0\ndashedName: step-98\n--description--\nWhen you were testing your function, you should have seen an error message in the console This error is due to the condition in the buyWeapon function The currentWeaponIndex variable is the index of the weapons array, but array indexing starts at zero The index of the last element in an array is one less than the length of the array Change the if condition to check weapons length - 1, instead of weapons length Test out your buyWeapon function again to see the error message disappear --hints--\nYou should update the condition to subtract 1 from weapons length js\nassert match(buyWeapon toString(), /weapons\\ length\\s*-\\s*1/);\nYour condition should check if currentWeaponIndex is less than weapons length - 1 js\nassert match(buyWeapon toString(), /currentWeaponIndex\\s*<\\s*weapons\\ length\\s*-\\s*1/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 250\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d1c72e8bb13c2074d93c.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "83b32b327135381cf6de1a935658e7f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d1c72e8bb13c2074d93c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 250;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d1c72e8bb13c2074d93c.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a9adcf59c0631ae3028e73a1a21b607c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d1c72e8bb13c2074d93c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d1c72e8bb13c2074d93c.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "864c075762ed4abfa015993f1799c492",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d1c72e8bb13c2074d93c.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (currentWeaponIndex < weapons length) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d1c72e8bb13c2074d93c.md",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "290fe323d0e09c3c4a1dc7a95da737ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d143f2a58e3b6d6e9c33.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d143f2a58e3b6d6e9c33\ntitle: Step 96\nchallengeType: 0\ndashedName: step-96\n--description--\nArrays have a length property that returns the number of items in the array You may want to add new values to the weapons array in the future Change your if condition to check if currentWeaponIndex is less than the length of the weapons array An example of checking the length of an array myArray would look like myArray length --hints--\nYou should use the length property on the weapons array js\nassert match(buyWeapon toString(), /weapons\\ length/);\nYour if statement should check if currentWeaponIndex is less than weapons length js\nassert match(buyWeapon toString(), /currentWeaponIndex\\s*<\\s*weapons\\ length/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d143f2a58e3b6d6e9c33.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9e3c96c0e8b56ed1ea806c566a305516",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d143f2a58e3b6d6e9c33.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d143f2a58e3b6d6e9c33.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "96f0a1f1a314cb0f1f7afb1427f96ded",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d143f2a58e3b6d6e9c33.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (currentWeaponIndex < 3) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d143f2a58e3b6d6e9c33.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0f5d7311e0ca84c9573bad460b22206f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d143f2a58e3b6d6e9c33.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "goStore() { update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (currentWeaponIndex < 3) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d143f2a58e3b6d6e9c33.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f6acbfbcd61e87bde5ea6918bd7220c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2146a3e853d0a6e28ca.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d2146a3e853d0a6e28ca\ntitle: Step 99\nchallengeType: 0\ndashedName: step-99\n--description--\nIf the player has purchased all of the weapons in the weapons array, the player should not be able to purchase any more and a message should be displayed Add an else statement for your outer if statement Inside this new else statement, set text innerText to \"You already have the most powerful weapon \" Test your buyWeapon function again to make sure the message is displayed when the player has the most powerful weapon --hints--\nYou should have another else statement in your buyWeapon function js\nconst matches = buyWeapon toString() match(/else/g);\nassert equal(matches length, 2);\nYou should set text innerText to \"You already have the most powerful weapon \" js\nassert match(buyWeapon toString(), /('|\")You already have the most powerful weapon \\1/);\nYou should modify your text innerText to \"You already have the most powerful weapon \" within your outer else statement js\ncurrentWeaponIndex = 5;\nbuyWeapon();\nassert equal(text innerText, \"You already have the most powerful weapon \");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 250\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2146a3e853d0a6e28ca.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a5789ff9e55040777c3f57e462f2dc9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2146a3e853d0a6e28ca.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 250;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2146a3e853d0a6e28ca.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9c45855db938ffb61357d1e4143e7ea5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2146a3e853d0a6e28ca.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2146a3e853d0a6e28ca.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "38cfbf4dc05aa581945a8e06c1f67880",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2146a3e853d0a6e28ca.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2146a3e853d0a6e28ca.md",
      "source_type": "git_repo"
    },
    "token_count": 220,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4b961eb4a061418163224813ad579e30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d31ebbc10e3fe1b28e03.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d31ebbc10e3fe1b28e03\ntitle: Step 103\nchallengeType: 0\ndashedName: step-103\n--description--\nPlayers should not be able to sell their only weapon Inside the sellWeapon function, add an if statement with a condition that checks if the length of the inventory array is greater than 1 --hints--\nYour sellWeapon function should have an if statement js\nassert match(sellWeapon toString(), /if/);\nYour if statement should check if inventory length is greater than 1 js\nassert match(sellWeapon toString(), /if\\s*\\(\\s*inventory\\ length\\s*>\\s*1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5768,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d31ebbc10e3fe1b28e03.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a784c90cf54d8c69e72e46712b0d4b47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d31ebbc10e3fe1b28e03.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5768,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d31ebbc10e3fe1b28e03.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b3785b1b5dee59e3c01dd599912ea04c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d31ebbc10e3fe1b28e03.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5768,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d31ebbc10e3fe1b28e03.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d413aa4b51b27534f3724c6897198106",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d31ebbc10e3fe1b28e03.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\n--fcc-editable-region--\nfunction sellWeapon() {\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5768,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d31ebbc10e3fe1b28e03.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1c0d7dcaef2762f2649456e2c4764bf3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d24c97461b3ddb9397c8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d24c97461b3ddb9397c8\ntitle: Step 101\nchallengeType: 0\ndashedName: step-101\n--description--\nOnce a player has the most powerful weapon, you can give them the ability to sell their old weapons In the outer else statement, set button2 innerText to \"Sell weapon for 15 gold\" Also set button2 onclick to the function name sellWeapon --hints--\nYou should set the value of button2 innerText js\nassert match(buyWeapon toString(), /button2\\ innerText/);\nYou should set the value of button2 innerText to \"Sell weapon for 15 gold\" js\nassert match(buyWeapon toString(), /button2\\ innerText\\s*=\\s*('|\")Sell weapon for 15 gold\\1\\s*; /);\nYou should set the value of button2 onclick js\nassert match(buyWeapon toString(), /button2\\ onclick/);\nYou should set the value of button2 onclick to sellWeapon js\nassert match(buyWeapon toString(), /button2\\ onclick\\s*=\\s*sellWeapon\\s*; /);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6004,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d24c97461b3ddb9397c8.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f30ed113ba460b957bd7d2c993e1b859",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d24c97461b3ddb9397c8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6004,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d24c97461b3ddb9397c8.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5c88b79c67d4cb6c7ce97b56f56a9abb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d24c97461b3ddb9397c8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\n--fcc-editable-region--\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6004,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d24c97461b3ddb9397c8.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ce5f305e33cc5ad1a3cbfb48580b9a5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d24c97461b3ddb9397c8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } --fcc-editable-region-- function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6004,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d24c97461b3ddb9397c8.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "90878ef6cc1237fdf02c3b29d19685e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2e2a073be3edb46116f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d2e2a073be3edb46116f\ntitle: Step 102\nchallengeType: 0\ndashedName: step-102\n--description--\nCreate an empty sellWeapon function --hints--\nYou should use the function keyword to declare a sellWeapon variable js\nassert isFunction(sellWeapon);\nsellWeapon should be an empty function js\nassert match(sellWeapon toString(), /sellWeapon\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2e2a073be3edb46116f.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3b6ca260f457b5b10941e4c065c7ccfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2e2a073be3edb46116f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = documentquerySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2e2a073be3edb46116f.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ac31f98a461b61009d7f9960911288f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2e2a073be3edb46116f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\n--fcc-editable-region--\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d2e2a073be3edb46116f.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a72bba13e6b2b724864a8f186ce67f0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d35660db4040ba292193.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d35660db4040ba292193\ntitle: Step 104\nchallengeType: 0\ndashedName: step-104\n--description--\nInside the if statement, set gold equal to 15 more than its current value Also update goldText innerText to the new value --hints--\nYou should use compound assignment to increase gold by 15 js\nassert match(sellWeapon toString(), /gold\\s*\\+=\\s*15/);\nYou should set goldText innerText to gold js\nassert match(sellWeapon toString(), /goldText\\ innerText\\s*=\\s*gold/);\nYour code should be in your if statement js\ninventory = [\"Naomi\"];\ngold = 0\nsellWeapon();\nassert equal(gold, 0);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d35660db4040ba292193.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "383a8660109b78285dd2b8b9f20cc726",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d35660db4040ba292193.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d35660db4040ba292193.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "38b00c08b88db587898a1e9d9133bac1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d35660db4040ba292193.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d35660db4040ba292193.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "3a098939cd03eab61dc1fa9d9534affb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d35660db4040ba292193.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\n--fcc-editable-region--\nfunction sellWeapon() {\nif (inventory length > 1) {\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d35660db4040ba292193.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e156d61cd427b232e2b699b4ffc090ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d382cd075f4169223e14.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d382cd075f4169223e14\ntitle: Step 105\nchallengeType: 0\ndashedName: step-105\n--description--\nThe next step is to create a variable called currentWeapon js\nlet num = 1;\nif (num === 1) {\nlet num = 2; // this num is scoped to the if statement\nconsole log(num); // expected output: 2\n}\nconsole log(num); // expected output: 1 (the global variable)\nUse the let keyword to create a variable named currentWeapon Don't assign it a value yet --hints--\nYou should use let to declare a currentWeapon variable js\nassert match(sellWeapon toString(), /currentWeapon/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d382cd075f4169223e14.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "10f26f34724ba254da891486dc56b14a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d382cd075f4169223e14.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d382cd075f4169223e14.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "37aaf034d77f107536ce97c16d9b6ba7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d382cd075f4169223e14.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d382cd075f4169223e14.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "869c2b884e0e2ea5405aa0c45cf18003",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d382cd075f4169223e14.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\n--fcc-editable-region--\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d382cd075f4169223e14.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b7e0aa419750be9cc3672c776fd31bc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d539dc11cb42b5dd7ec8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d539dc11cb42b5dd7ec8\ntitle: Step 106\nchallengeType: 0\ndashedName: step-106\n--description--\nIn the previous project, you learned how to work with the shift() method to remove the first element from an array like this:\njs\nconst myArray = [\"first\", \"second\", \"third\"];\nconst firstElement = myArray shift();\n// myArray is now [\"second\", \"third\"]\nUse the shift() method to take the first element from the inventory array and assign it to your currentWeapon variable --hints--\nYour sellWeapon function should use the shift() method js\nassert match(sellWeapon toString(), /shift\\(\\s*\\)/);\nYou should use the shift() method on the inventory array js\nassert match(sellWeapon toString(), /inventory\\ shift\\(\\s*\\)/);\nYou should assign the value of inventory shift() to your currentWeapon variable js\nassert match(sellWeapon toString(), /currentWeapon\\s*=\\s*inventory\\ shift\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6222,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d539dc11cb42b5dd7ec8.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "89f126bc27bb283d779a5077e1937161",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d539dc11cb42b5dd7ec8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6222,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d539dc11cb42b5dd7ec8.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4be2be53a78b2d5dba01624cca41c108",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d539dc11cb42b5dd7ec8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6222,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d539dc11cb42b5dd7ec8.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bf004aec6c28022c12c8aa4805b812c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d539dc11cb42b5dd7ec8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\n--fcc-editable-region--\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon;\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6222,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d539dc11cb42b5dd7ec8.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "097387be81ddda9ee626e8c8c97d39cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d6c7001ebc45350e3d16.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d6c7001ebc45350e3d16\ntitle: Step 108\nchallengeType: 0\ndashedName: step-108\n--description--\nNow use the += operator to add the string \" In your inventory you have: \" and the contents of inventory to the text innerText Make sure to include the space at the beginning and end of the \" In your inventory you have: \" string --hints--\nYou should add another text innerText line js\nconst matches = sellWeapon toString() match(/text\\ innerText/g);\nassert equal(matches length, 2);\nYou should use compound assignment on text innerText js\nconst matches = sellWeapon toString() match(/text\\ innerText\\s*\\+=/g);\nassert equal(matches length, 1);\nYou should add the string \" In your inventory you have: \" to the second text innerText line Spacing matters js\nassert match(sellWeapon toString(), /text\\ innerText\\s*\\+=\\s*('|\") In your inventory you have: \\1/);\nYou should use the concatenation operator to add the value of inventory to the end of your second text innerText line js\nassert match(sellWeapon toString(), /text\\ innerText\\s*\\+=\\s*('|\") In your inventory you have: \\1\\s*\\+\\s*inventory/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d6c7001ebc45350e3d16.md",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "afe8edd407f1648fb0a1685d702f21bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d6c7001ebc45350e3d16.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "end of your second text innerText line js assert match(sellWeapon toString(), /text\\ innerText\\s*\\+=\\s*('|\") In your inventory you have: \\1\\s*\\+\\s*inventory/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d6c7001ebc45350e3d16.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "04286493bee70c2b1070dae3ed0c0022",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d6c7001ebc45350e3d16.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d6c7001ebc45350e3d16.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "cb5fd1545a43cd13f3573f4d5490e0a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d6c7001ebc45350e3d16.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1 onclick = location[\"button functions\"][0]; button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = locationtext;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\n--fcc-editable-region--\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d6c7001ebc45350e3d16.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "df07b49ea3fc8a6b187ed168f831e628",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d61ddfe35744369365b7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d61ddfe35744369365b7\ntitle: Step 107\nchallengeType: 0\ndashedName: step-107\n--description--\nAfter your currentWeapon, use the concatenation operator to set text innerText to the string \"You sold a \", then currentWeapon, then the string \" \" --hints--\nYou should use the assignment operator with text innerText js\nassert match(sellWeapon toString(), /text\\ innerText\\s*=/);\nYou should add \"You sold a \" to text innerText Spacing is important js\nassert match(sellWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You sold a \\1/);\nYou should add the value of currentWeapon to the \"You sold a \" string Use the concatenation operator to do this on the same line js\nassert match(sellWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You sold a\\s\\1\\s*\\+\\s*currentWeapon/);\nYou should add the string \" \" to the value of currentWeapon Use the concatenation operator to do this on the same line js\nassert match(sellWeapon toString(), /text\\ innerText\\s*=\\s*('|\")You sold a \\1\\s*\\+\\s*currentWeapon\\s+\\+\\s+('|\")\\ \\2/);\nYour text innerText should update to the proper string js\ninventory = [\"first\", \"second\"];\ntext innerText = \"Hello\";\nsellWeapon();\nassert equal(text innerText, \"You sold a first \");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d61ddfe35744369365b7.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4fd6ce211d6af67eeaad08f9b6626f9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d61ddfe35744369365b7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "string js inventory = [\"first\", \"second\"]; text innerText = \"Hello\"; sellWeapon(); assert equal(text innerText, \"You sold a first \"); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d61ddfe35744369365b7.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "42bc8a9c051c868c640b5cea9048cc2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d61ddfe35744369365b7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d61ddfe35744369365b7.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "34c4e233b83584be2b2c41dc9ce8422a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d61ddfe35744369365b7.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3 innerText = location[\"button text\"][2]; button1 onclick = location[\"button functions\"][0]; button2 onclick = location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = locationtext;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\n--fcc-editable-region--\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d61ddfe35744369365b7.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6a0453bab8e24ba37b236ff0b841bf42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d7b8ab568b4649998954.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d7b8ab568b4649998954\ntitle: Step 109\nchallengeType: 0\ndashedName: step-109\n--description--\nUse an else statement to run when the inventory length is not more than one Set the text innerText to say \"Don't sell your only weapon \" --hints--\nYour sellWeapon function should have an else statement js\nassert match(sellWeapon toString(), /else/);\nYou should set text innerText to \"Don't sell your only weapon \" js\nassert match(sellWeapon toString(), /text\\ innerText\\s*=\\s*('|\")Don't sell your only weapon \\1/);\nYour new text innerText line should be in your else statement js\ninventory = [\"Naomi\"];\nsellWeapon();\nassert equal(text innerText, \"Don't sell your only weapon \");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6156,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d7b8ab568b4649998954.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5236fac8c08481c8644fd1093de99001",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d7b8ab568b4649998954.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6156,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d7b8ab568b4649998954.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "56b02be3f6ecee1b23b836ff99afe189",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d7b8ab568b4649998954.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\"\"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6156,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d7b8ab568b4649998954.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "066ed50553ff769393ac921575667626",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d7b8ab568b4649998954.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "update(locations[1]); } function goCave() { update(locations[2]); } function fightDragon() { console log(\"Fighting dragon \"); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldTextinnerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\n--fcc-editable-region--\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6156,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d7b8ab568b4649998954.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5e989a5772699b0f7b6be3f8000e7869",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd468debb449b4454086.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8dd468debb449b4454086\ntitle: Step 111\nchallengeType: 0\ndashedName: step-111\n--description--\nFighting each type of monster will use similar logic Create an empty function called goFight to manage this logic --hints--\nYou should use the function keyword to declare goFight js\nassert match(code, /function\\s+goFight/);\ngoFight should be an empty function js\nassert match(goFight toString(), /goFight\\s*\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6150,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd468debb449b4454086.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "870723b89866d9a62cf62599acbf6e6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd468debb449b4454086.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = documentquerySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6150,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd468debb449b4454086.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f4c02dc8d3a8518b9d2f78a92df506e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd468debb449b4454086.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ name: \"dragon\", level: 20, health: 300 } ] const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6150,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd468debb449b4454086.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ce3bfbe8cc4691dcff1d323bd79af175",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd468debb449b4454086.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons[currentWeaponIndex] name; text innerText = \"You now have a \" + newWeapon + \" \"; inventory push(newWeapon); text innerText += \" In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { textinnerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6150,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd468debb449b4454086.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e7a36b2403be995d008d959a20c97746",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8d81f539f004776dd9b1e\ntitle: Step 110\nchallengeType: 0\ndashedName: step-110\n--description--\nNow you can start the code to fight monsters To keep your code organized, your fightDragon function has been moved for you to be near the other fight functions Below your weapons array, define a monsters variable and assign it an array Set that array to have three objects, each with a name, level, and health properties The first object's values should be \"slime\", 2, and 15, in order The second should be \"fanged beast\", 8, and 60 The third should be \"dragon\", 20, and 300 --hints--\nYou should use const to declare a monsters variable js\nassert match(code, /const\\s+monsters/);\nYour monsters variable should be an array js\nassert isArray(monsters);\nYour monsters variable should have 3 values js\nassert lengthOf(monsters, 3);\nYour monsters array should have 3 objects js\nassert(monsters every(val => typeof val === \"object\"));\nThe first value in your monsters array should be an object with a name property set to \"slime\" js\nassert equal(monsters[0] name, \"slime\");\nThe first value in your monsters array should be an object with a level property set to 2 js\nassert equal(monsters[0] level, 2);\nThe first value in your monsters array should be an object with a health property set to 15 js\nassert equal(monsters[0] health, 15);\nThe second value in your monsters array should be an object with a name property set to \"fanged beast\" js\nassert equal(monsters[1] name, \"fanged beast\");\nThe second value in your monsters array should be an object with a level property set to 8 js\nassert equal(monsters[1] level, 8);\nThe second value in your monsters array should be an object with a health property set to 60 js\nassert equal(monsters[1] health, 60);\nThe third value in your monsters array should be an object with a name property set to \"dragon\" js\nassert equal(monsters[2] name, \"dragon\");\nThe third value in your monsters array should be an object with a level property set to 20 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "7f7f5c99586be0387ee90a6e093f4f03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "level property set to 8 js assert equal(monsters[1] level, 8); The second value in your monsters array should be an object with a health property set to 60 js assert equal(monsters[1] health, 60); The third value in your monsters array should be an object with a name property set to \"dragon\" js assert equal(monsters[2] name, \"dragon\"); The third value in your monsters array should be an object with a level property set to 20 js assertequal(monsters[2] level, 20);\nThe third value in your monsters array should be an object with a health property set to 300 js\nassert equal(monsters[2] health, 300);\nYou should not add any extra properties to your objects js\nassert deepEqual(monsters, [\n{name: \"slime\", level: 2, health: 15},\n{name: \"fanged beast\", level: 8, health: 60},\n{name: \"dragon\", level: 20, health: 300}\n])\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1ea0e4946a053cf8706978ce1a8bb617",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\n--fcc-editable-region--\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "284183de17d363d736a029388e97164a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = document querySelector(\"#monsterHealth\"); const weapons = [ { name: 'stick', power: 5 }, { name: 'dagger', power: 30 }, { name: 'claw hammer', power: 50 }, { name: 'sword', power: 100 } ]; --fcc-editable-region-- --fcc-editable-region-- const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town squareYou see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "51f4bb2560ce26d30c7c25472e139a68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "= location[\"button functions\"][1]; button3 onclick = location[\"button functions\"][2]; text innerText = location text; } function goTown() { update(locations[0]); } function goStore() { update(locations[1]); } function goCave() { update(locations[2]); } function buyHealth() { if (gold >= 10) { gold -= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } function buyWeapon() { if (currentWeaponIndex < weaponslength - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\n}\nfunction fightBeast() {\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8d81f539f004776dd9b1e.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "fbc28e5cb23b5c8417f0f05c1fa1a84c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8dd9cdb16324b04cfd958\ntitle: Step 112\nchallengeType: 0\ndashedName: step-112\n--description--\nIn your fightSlime function, set fighting equal to 0 - the index of slime in the monsters array Remember that you already declared fighting earlier in your code, so you do not need let or const here On the next line, call the goFight function --hints--\nYou should set fighting equal to 0 js\nassert match(fightSlime toString(), /fighting\\s*=\\s*0\\s*; /);\nYou should not use let or const js\nassert notMatch(fightSlime toString(), /let|const/);\nYou should call the goFight function js\nassert match(fightSlime toString(), /goFight\\(\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6418,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ddc6892ccd89fc6caab871bb5242f283",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6418,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "00b8129a426d21aa20a9f14b1b2d84c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6418,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "97dd32b7df791ecd3f3d14a610320827",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6418,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "cd6f42ba985271c76af1466fcd4b2504",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); text innerText = \"You sold a \" + currentWeapon + \" \"; text innerText += \" In your inventory you have: \" + inventory; } else { text innerText = \"Don't sell your only weapon\";\n}\n}\n--fcc-editable-region--\nfunction fightSlime() {\n}\n--fcc-editable-region--\nfunction fightBeast() {\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\nfunction goFight() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6418,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dd9cdb16324b04cfd958.md",
      "source_type": "git_repo"
    },
    "token_count": 154,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a8876fc4b3344f9dc32da45fd371f887",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8dfcf7fb1044d2f478fd1\ntitle: Step 113\nchallengeType: 0\ndashedName: step-113\n--description--\nFollowing the same pattern as the fightSlime function, use that code in the fightBeast and fightDragon functions Remember that beast is at index 1 and dragon is at index 2 Also, remove the console log call from your fightDragon function --hints--\nYou should set fighting to 1 in your fightBeast function js\nassert match(fightBeast toString(), /fighting\\s*=\\s*1\\s*; /);\nYou should set fighting to 2 in your fightDragon function js\nassert match(fightDragon toString(), /fighting\\s*=\\s*2\\s*; /);\nYou should remove the console log from your fightDragon function js\nassert notMatch(fightDragon toString(), /console\\ log/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6528,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "40d343c5588325711928c757b7c2a056",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6528,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1679e269cb506f8a914097a54b396ec5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6528,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0e83328f96130556444d947bb912dc14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6528,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4db9ff8bb00c6713201ee1862577172f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); text innerText = \"You sold a \" + currentWeapon + \" \"; text innerText += \" In your inventory you have: \" + inventory; } else { text innerText = \"Don't sell your only weapon\";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\n--fcc-editable-region--\nfunction fightBeast() {\n}\nfunction fightDragon() {\nconsole log(\"Fighting dragon \");\n}\n--fcc-editable-region--\nfunction goFight() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6528,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8dfcf7fb1044d2f478fd1.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "f1cf5877ec5003335174a867631ff94e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e0d1d0110b4ec421489f\ntitle: Step 114\nchallengeType: 0\ndashedName: step-114\n--description--\nAt the end of your code, create two empty functions named attack and dodge --hints--\nYou should use the function keyword to declare attack js\nassert match(code, /function\\s+attack/);\nattack should be an empty function js\nassert match(attack toString(), /attack\\s*\\(\\s*\\)\\s*\\{\\s*\\}/);\nYou should use the function keyword to declare dodge js\nassert match(code, /function\\s+dodge/);\ndodge should be an empty function js\nassert match(dodge toString(), /dodge\\s*\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "2d99019b52800eba560f393fa7b98d81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "63e807519a292e1a13e25488df3d8592",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a24ad772291f545c8a1ef15c321f2752",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2 innerText = location[\"button text\"][1]; button3innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "891e1fddc7a04b4b43a601764bd8575f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); text innerText = \"You sold a \" + currentWeapon + \" \"; text innerText += \" In your inventory you have: \" + inventory; } else { text innerText = \"Don't sell your only weapon\";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\nfunction goFight() {\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e0d1d0110b4ec421489f.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "81e524b45319e3a2db867c2a79884034",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e142f7f0bd4fed898de3\ntitle: Step 115\nchallengeType: 0\ndashedName: step-115\n--description--\nAdd a new object to the end of the locations array, following the same properties as the rest of the objects Set name to \"fight\", \"button text\" to an array with \"Attack\", \"Dodge\", and \"Run\", \"button functions\" to an array with attack, dodge, and goTown, and text to \"You are fighting a monster \" --hints--\nYour locations array should have 4 values in it js\nassert lengthOf(locations, 4);\nYour new value should be an object js\nassert isObject(locations[3]);\nYour new object should have a name property set to \"fight\" js\nassert equal(locations[3] name, \"fight\");\nYour new object should have a \"button text\" property set to an array with the strings \"Attack\", \"Dodge\", and \"Run\" js\nassert deepEqual(locations[3][\"button text\"], [\"Attack\", \"Dodge\", \"Run\"]);\nYour new object should have a \"button functions\" property set to an array with the variables attack, dodge, and goTown js\nassert deepEqual(locations[3][\"button functions\"], [attack, dodge, goTown]);\nYour new object should have a text property set to \"You are fighting a monster \" js\nassert equal(locations[3] text, \"You are fighting a monster \");\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7127,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6a81a2dd2cdf5055121a0bb41dda136d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "property set to \"You are fighting a monster \" js assert equal(locations[3] text, \"You are fighting a monster \"); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7127,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "19b21b138333d0ce7980924a66534f14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\n--fcc-editable-region--\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n}\n];\n--fcc-editable-region--\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7127,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "17e03a0e942aa1fb93b0b146465494b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" } ]; --fcc-editable-region-- // initialize buttons button1 onclick = goStore; button2 onclick = goCave; button3 onclick = fightDragon; function update(location) { button1 innerText = location[\"button text\"][0]; button2innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7127,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "68d3989a9d57d7c647fc26d47f7f2f36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); text innerText = \"You sold a \" + currentWeapon + \" \"; text innerText += \" In your inventory you have: \" + inventory; } else { textinnerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\nfunction goFight() {\n}\nfunction attack() {\n}\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7127,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e142f7f0bd4fed898de3.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "02f73e21359a9f3bf913a49e3fada976",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e21398ad61520edb724f\ntitle: Step 117\nchallengeType: 0\ndashedName: step-117\n--description--\nBelow your update call, set the monsterHealth to be the health of the current monster You can get this value by accessing the health property of monsters[fighting] with dot notation --hints--\nYou should use bracket notation to access the monsters array at the fighting index js\nassert match(goFight toString(), /monsters\\s*\\[\\s*fighting\\s*\\]/);\nYou should assign the value of the health property of monsters[fighting] to the monsterHealth variable js\nassert match(goFight toString(), /monsterHealth\\s*=\\s*monsters\\s*\\[\\s*fighting\\s*\\]\\s*(\\ health|\\[\\s*('|\")health\\2\\s*\\])/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6715,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "449245c8f3ae88fb20cd1af23b6a38b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6715,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "f747ffba1af55cd20cd8087863c9284c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6715,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5b6294273a7f1689f1bd4c285ba59890",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" }, { name: \"fight\", \"button text\": [\"Attack\", \"Dodge\", \"Run\"], \"button functions\": [attack, dodge, goTown], text: \"You are fighting a monster \" } ]; // initialize buttons button1 onclick = goStore; button2onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6715,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "160945d0b7248ef7473a685e71a9e5b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); textinnerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\n--fcc-editable-region--\nfunction goFight() {\nupdate(locations[3]);\n}\n--fcc-editable-region--\nfunction attack() {\n}\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6715,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e21398ad61520edb724f.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "5511d0957af0a929d60194f402a86150",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e1dc897df55108bcb5e8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e1dc897df55108bcb5e8\ntitle: Step 116\nchallengeType: 0\ndashedName: step-116\n--description--\nIn the goFight function, call your update function with the fourth object in locations as an argument --hints--\nYou should call update in your goFight function js\nassert match(goFight toString(), /update/);\nYou should pass the fourth object in your locations array to your update call js\nassert match(goFight toString(), /update\\(\\s*locations\\s*\\[\\s*3\\s*\\]\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6476,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e1dc897df55108bcb5e8.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e92f405e4dbe6d34edb87b3da6c85e68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e1dc897df55108bcb5e8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = documentquerySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6476,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e1dc897df55108bcb5e8.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d1ec175f94e261e1544ac2600c72de59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e1dc897df55108bcb5e8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ name: \"dragon\", level: 20, health: 300 } ] const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6476,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e1dc897df55108bcb5e8.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "4dbf58dfbf7ac7dfb97681a4a1f2e9b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e1dc897df55108bcb5e8.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "-= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons[currentWeaponIndex] name; text innerText = \"You now have a \" + newWeapon + \" \"; inventory push(newWeapon); textinnerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\n--fcc-editable-region--\nfunction goFight() {\n}\n--fcc-editable-region--\nfunction attack() {\n}\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6476,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e1dc897df55108bcb5e8.md",
      "source_type": "git_repo"
    },
    "token_count": 345,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ba423d6a82f2952057f0473294f0e8ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e24c673b075317cc0b09\ntitle: Step 118\nchallengeType: 0\ndashedName: step-118\n--description--\nBy default, the HTML element that shows the monster's stats has been hidden with CSS When the player clicks the \"Fight dragon\" button, the monster's stats should be displayed You can accomplish this by using the style and display properties on the monsterStats element The style property is used to access the inline style of an element and the display property is used to set the visibility of an element Here is an example of how to update the display for a paragraph element:\njs\nconst paragraph = document querySelector('p');\nparagraph style display = 'block';\nDisplay the monsterStats element by updating the display property of the style property to block --hints--\nYou should use dot notation to access the style property of monsterStats js\nassert match(goFight toString(), /monsterStats\\ style/);\nYou should use dot notation to access the display property of the style property js\nassert match(goFight toString(), /monsterStats\\ style\\ display/);\nYou should set the display property to block js\nassert match(goFight toString(), /monsterStats\\ style\\ display\\s*=\\s*('|\")block\\1/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "bfa64fc5b7507e6b589d2a52b5d74dcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "toString(), /monsterStats\\ style\\ display/); You should set the display property to block js assert match(goFight toString(), /monsterStats\\ style\\ display\\s*=\\s*('|\")block\\1/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "f6a46bed1ff616c3ae04ffb4288b2860",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "590467f5b2e275386b99e17a78da7eaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" }, { name: \"fight\", \"button text\": [\"Attack\", \"Dodge\", \"Run\"], \"button functions\": [attack, dodge, goTown], text: \"You are fighting a monster \" } ]; // initialize buttons button1 onclick = goStore; button2onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "59f28a5994fa09bbdd0dedbb38d62301",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); textinnerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\n--fcc-editable-region--\nfunction goFight() {\nupdate(locations[3]);\nmonsterHealth = monsters[fighting] health;\n}\n--fcc-editable-region--\nfunction attack() {\n}\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e24c673b075317cc0b09.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "0c5021a342839cdf98d22ed7d045431f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e35675c18c56354c08cf\ntitle: Step 120\nchallengeType: 0\ndashedName: step-120\n--description--\nNow you can build the attack function First, update the text message to say \"The <monster name> attacks \", replacing <monster name> with the name of the monster Remember you can use the concatenation operator for this --hints--\nYou should use dot notation to access the innerText property of text js\nassert match(attack toString(), /text\\ innerText/);\nYou should assign the string \"The \" to innerText property of text js\nassert match(attack toString(), /text\\ innerText\\s*=\\s*('|\")The \\1/);\nYou should use the concatenation operator to add the value of monsters[fighting] name to the string \"The \" js\nassert match(attack toString(), /text\\ innerText\\s*=\\s*('|\")The \\1\\s*\\+\\s*monsters\\s*\\[\\s*fighting\\s*\\]\\s*\\ name/);\nYou should use the concatenation operator to add the string \" attacks \" to the monsters[fighting] name string js\nassert match(attack toString(), /text\\ innerText\\s*=\\s*('|\")The \\1\\s*\\+\\s*monsters\\s*\\[\\s*fighting\\s*\\]\\s*\\ name\\s*\\+\\s*('|\") attacks\\ \\2/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "9039435d63cbd78ceb7f7c52d3023673",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "string \" attacks \" to the monsters[fighting] name string js assert match(attack toString(), /text\\ innerText\\s*=\\s*('|\")The \\1\\s*\\+\\s*monsters\\s*\\[\\s*fighting\\s*\\]\\s*\\ name\\s*\\+\\s*('|\") attacks\\ \\2/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "42b1ece4da8164ede6117c3ec91a3d27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "#ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = documentquerySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "defce63e6c72ac5ad916e69586b05016",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" }, { name: \"fight\", \"button text\": [\"Attack\", \"Dodge\", \"Run\"], \"button functions\": [attack, dodge, goTown], text: \"You are fighting a monster\"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "86ae4e05da9ae825eef11305cecef510",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "= \"You now have a \" + newWeapon + \" \"; inventory push(newWeapon); text innerText += \" In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventorylength > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\nfunction goFight() {\nupdate(locations[3]);\nmonsterHealth = monsters[fighting] health;\nmonsterStats style display = \"block\";\nmonsterName innerText = monsters[fighting] name;\nmonsterHealthText innerText = monsterHealth;\n}\n--fcc-editable-region--\nfunction attack() {\n}\n--fcc-editable-region--\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e35675c18c56354c08cf.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "aaac62187caea31ce0a54893e9fcc383",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e45cc600c3591cee671a.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e45cc600c3591cee671a\ntitle: Step 122\nchallengeType: 0\ndashedName: step-122\n--description--\nNext, set health to equal health minus the monster's level Remember you can get this from the monsters[fighting] level property --hints--\nYou should use compound assignment with health js\nassert match(attack toString(), /health\\s*-=/);\nYou should subtract the monster's current level from health js\nassert match(attack toString(), /health\\s*-=\\s*monsters\\s*\\[\\s*fighting\\s*\\]\\s*\\ level/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e45cc600c3591cee671a.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c3b190ca4f2af74b50e75702b7937e6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e45cc600c3591cee671a.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; } stat { padding-right: 10px; } button { cursor: pointer; color: #0a0a23; background-color: #feac32; background-image: linear-gradient(#fecc4c, #ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = documentquerySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e45cc600c3591cee671a.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "28067670f246fb6e936604e9e93f64a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e45cc600c3591cee671a.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "{ name: \"dragon\", level: 20, health: 300 } ] const locations = [ { name: \"town square\", \"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"], \"button functions\": [goStore, goCave, fightDragon], text: \"You are in the town square You see a sign that says \\\"Store\\\" \" }, { name: \"store\", \"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store\"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e45cc600c3591cee671a.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "eeb210815bf54037d1d2780027d884ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e45cc600c3591cee671a.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "-= 10; health += 10; goldText innerText = gold; healthText innerText = health; } else { text innerText = \"You do not have enough gold to buy health \"; } } function buyWeapon() { if (currentWeaponIndex < weapons length - 1) { if (gold >= 30) { gold -= 30; currentWeaponIndex++; goldText innerText = gold; let newWeapon = weapons[currentWeaponIndex] name; text innerText = \"You now have a \" + newWeapon + \" \"; inventory push(newWeapon); textinnerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\nfunction goFight() {\nupdate(locations[3]);\nmonsterHealth = monsters[fighting] health;\nmonsterStats style display = \"block\";\nmonsterName innerText = monsters[fighting] name;\nmonsterHealthText innerText = monsterHealth;\n}\n--fcc-editable-region--\nfunction attack() {\ntext innerText = \"The \" + monsters[fighting] name + \" attacks \";\ntext innerText += \" You attack it with your \" + weapons[currentWeaponIndex] name + \" \";\n}\n--fcc-editable-region--\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e45cc600c3591cee671a.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f2fcf4bb2f4c97c02af58a9ecc4619a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e271f8e3d1541f9624ad\ntitle: Step 119\nchallengeType: 0\ndashedName: step-119\n--description--\nNow, you will need to update the text for the current monster's name and health Start by assigning monsters[fighting] name to the innerText property of monsterName Then, assign monsterHealth to the innerText property of monsterHealthText --hints--\nYou should use dot notation to access the innerText property of monsterName js\nassert match(goFight toString(), /monsterName\\ innerText/);\nYou should assign monsters[fighting] name to monsterName innerText js\nassert match(goFight toString(), /monsterName\\ innerText\\s*=\\s*monsters\\s*\\[\\s*fighting\\s*\\]\\s*\\ name/);\nYou should use dot notation to access the innerText property of monsterHealthText js\nassert match(goFight toString(), /monsterHealthText\\ innerText/);\nYou should assign monsterHealth to monsterHealthText innerText js\nassert match(goFight toString(), /monsterHealthText\\ innerText\\s*=\\s*monsterHealth|monsterHealthText\\ innerText\\s*=\\s*monsters\\s*\\[\\s*fighting\\s*\\]\\s*\\ health/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "19e06159bafe79e447e1dda4a617edf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "match(goFight toString(), /monsterHealthText\\ innerText/); You should assign monsterHealth to monsterHealthText innerText js assert match(goFight toString(), /monsterHealthText\\ innerText\\s*=\\s*monsterHealth|monsterHealthText\\ innerText\\s*=\\s*monsters\\s*\\[\\s*fighting\\s*\\]\\s*\\ health/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ab6ab310cfd40bd073630f2e9d65f1f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "#ffac33); border: 3px solid #feac32; } ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = documentquerySelector(\"#monsterName\");\nconst monsterHealthText = document querySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a0e2523c8cba2db3d168362422e4388e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" }, { name: \"fight\", \"button text\": [\"Attack\", \"Dodge\", \"Run\"], \"button functions\": [attack, dodge, goTown], text: \"You are fighting a monster\"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2 onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "27efc0d03fc4b8dde1de48519001fdd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "= \"You now have a \" + newWeapon + \" \"; inventory push(newWeapon); text innerText += \" In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventorylength > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext innerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\n--fcc-editable-region--\nfunction goFight() {\nupdate(locations[3]);\nmonsterHealth = monsters[fighting] health;\nmonsterStats style display = \"block\";\n}\n--fcc-editable-region--\nfunction attack() {\n}\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e271f8e3d1541f9624ad.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "8a9a897f95e0ea431f27c1fc6806b08a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e41e2f190c58404dd46e\ntitle: Step 121\nchallengeType: 0\ndashedName: step-121\n--description--\nOn a new line, use the addition assignment operator(+=), to add the string \" You attack it with your <weapon> \" to the text value, replacing <weapon> with the player's current weapon Additionally, remember that this line of text starts with a space so it will properly display --hints--\nYou should use dot notation to access the innerText property of text on a new line js\nconst match = attack toString() match(/text\\ innerText/g);\nassert lengthOf(match, 2);\nYou should use compound assignment with text innerText js\nassert match(attack toString(), /text\\ innerText\\s*\\+=/);\nYou should add the string \" You attack it with your \" to the text innerText value Remember that spacing matters js\nassert match(attack toString(), /text\\ innerText\\s*\\+=\\s*('|\") You attack it with your \\1/);\nYou should use the concatenation operator to add the current weapon to the string You can get the current weapon with weapons[currentWeaponIndex] name js\nassert match(attack toString(), /text\\ innerText\\s*\\+=\\s*('|\") You attack it with your \\1\\s*\\+\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\ name/);\nYou should use the concatenation operator to end your string with \" \" js\nassert match(attack toString(), /text\\ innerText\\s*\\+=\\s*('|\") You attack it with your \\1\\s*\\+\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\ name\\s*\\+\\s*('|\")\\ \\2/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "3706b02052d1863f55035d39c5a39b4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "your string with \" \" js assert match(attack toString(), /text\\ innerText\\s*\\+=\\s*('|\") You attack it with your \\1\\s*\\+\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\ name\\s*\\+\\s*('|\")\\ \\2/); --seed-- --seed-contents-- ```html RPG - Dragon Repeller XP: 0 Health: 100 Gold: 50 Go to store Go to cave Fight dragon Monster Name: Health: Welcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n} stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "8993cd17df8db0fb5477de041df3a892",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5cad06a303d9f6a52e19be7a10213913",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" }, { name: \"fight\", \"button text\": [\"Attack\", \"Dodge\", \"Run\"], \"button functions\": [attack, dodge, goTown], text: \"You are fighting a monster \" } ]; // initialize buttons button1 onclick = goStore; button2onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "104c654ab7e3f1213443789ef6447787",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); textinnerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\nfunction goFight() {\nupdate(locations[3]);\nmonsterHealth = monsters[fighting] health;\nmonsterStats style display = \"block\";\nmonsterName innerText = monsters[fighting] name;\nmonsterHealthText innerText = monsterHealth;\n}\n--fcc-editable-region--\nfunction attack() {\ntext innerText = \"The \" + monsters[fighting] name + \" attacks \";\n}\n--fcc-editable-region--\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e41e2f190c58404dd46e.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e416af7b007f0b959657e756c4dbf056",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e49f4df7af5ae2d7a616\ntitle: Step 123\nchallengeType: 0\ndashedName: step-123\n--description--\nSet monsterHealth to monsterHealth minus the power of the player's current weapon Remember that you can access the power of the player's current weapon using weapons[currentWeaponIndex] power --hints--\nYou should use compound assignment to modify the monsterHealth variable js\nassert match(attack toString(), /monsterHealth\\s*-=/);\nYou should use bracket notation with currentWeaponIndex to access weapons js\nassert lengthOf(attack toString() match(/weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]/g), 2);\nYou should use dot notation to access the power property of weapons[currentWeaponIndex] js\nassert match(attack toString(), /weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\ power/);\nYou should subtract the power of the current weapon from monsterHealth js\nassert match(attack toString(), /monsterHealth\\s*-=\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\ power/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "d3e218dbcf20c97c373b77bef555b656",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "914d3bf41644669a94aefae56873aa33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "90343e8e14dfd8d116479ff22185fb1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" }, { name: \"fight\", \"button text\": [\"Attack\", \"Dodge\", \"Run\"], \"button functions\": [attack, dodge, goTown], text: \"You are fighting a monster \" } ]; // initialize buttons button1 onclick = goStore; button2onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "0fb4310d887ab757f9c2c60b0e930ad0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); textinnerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\nfunction goFight() {\nupdate(locations[3]);\nmonsterHealth = monsters[fighting] health;\nmonsterStats style display = \"block\";\nmonsterName innerText = monsters[fighting] name;\nmonsterHealthText innerText = monsterHealth;\n}\n--fcc-editable-region--\nfunction attack() {\ntext innerText = \"The \" + monsters[fighting] name + \" attacks \";\ntext innerText += \" You attack it with your \" + weapons[currentWeaponIndex] name + \" \";\nhealth -= monsters[fighting] level;\n}\n--fcc-editable-region--\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e49f4df7af5ae2d7a616.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "c214bea97f516748dea76b5654ab5a0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8ed36d7a7915dfa444ba2\ntitle: Step 125\nchallengeType: 0\ndashedName: step-125\n--description--\nUpdate healthText innerText and monsterHealthText innerText to equal health and monsterHealth --hints--\nYou should update healthText innerText js\nassert match(attack toString(), /healthText\\ innerText/);\nYou should set healthText innerText to health js\nassert match(attack toString(), /healthText\\ innerText\\s*=\\s*health/);\nYou should update monsterHealthText innerText js\nassert match(attack toString(), /monsterHealthText\\ innerText/);\nYou should set monsterHealthText innerText to monsterHealth js\nassert match(attack toString(), /monsterHealthText\\ innerText\\s*=\\s*monsterHealth/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5f42daa8d58863a5097a1e07db86d464",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d3016e64c739c10eca56561a9d5ee51d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "6ba4c1d50e9039568cc79743bea1d6a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" }, { name: \"fight\", \"button text\": [\"Attack\", \"Dodge\", \"Run\"], \"button functions\": [attack, dodge, goTown], text: \"You are fighting a monster \" } ]; // initialize buttons button1 onclick = goStore; button2onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "e5aa53438042fd57d81cdab27c51d049",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); textinnerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\nfunction goFight() {\nupdate(locations[3]);\nmonsterHealth = monsters[fighting] health;\nmonsterStats style display = \"block\";\nmonsterName innerText = monsters[fighting] name;\nmonsterHealthText innerText = monsterHealth;\n}\n--fcc-editable-region--\nfunction attack() {\ntext innerText = \"The \" + monsters[fighting] name + \" attacks \";\ntext innerText += \" You attack it with your \" + weapons[currentWeaponIndex] name + \" \";\nhealth -= monsters[fighting] level;\nmonsterHealth -= weapons[currentWeaponIndex] power + Math floor(Math random() * xp) + 1;\n}\n--fcc-editable-region--\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7217,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8ed36d7a7915dfa444ba2.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "86ddddd6387f44955b1f8a72e16344ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8e4dc6a60f85bf256a0cb\ntitle: Step 124\nchallengeType: 0\ndashedName: step-124\n--description--\nThe Math object in JavaScript contains static properties and methods for mathematical constants and functions One of those is Math random(), which generates a random number from 0 (inclusive) to 1 (exclusive) Another is Math floor(), which rounds a given number down to the nearest integer Using these, you can generate a random number within a range For example, this generates a random number between 1 and 5: Math floor(Math random() * 5) + 1; Following this pattern, use the addition operator (+) to add a random number between 1 and the value of xp to your monsterHealth -= weapons[currentWeaponIndex] power --hints--\nYou should use the same monsterHealth line you already wrote js\nassert lengthOf(attack toString() match(/monsterHealth/g), 1);\nYou should add to the weapons[currentWeaponIndex] power value js\nassert match(attack toString(), /monsterHealth\\s*-=\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\ power\\s*\\+/);\nYou should use Math floor() js\nassert match(attack toString(), /Math\\ floor/);\nYou should use Math random() js\nassert match(attack toString(), /Math\\ random/);\nYou should multiply Math random() by the value of xp js\nassert match(attack toString(), /Math\\ random\\(\\s*\\)\\s*\\*\\s*xp/);\nYou should use Math floor() to round the result of Math random() * xp down js\nassert match(attack toString(), /Math\\ floor\\(\\s*Math\\ random\\(\\s*\\)\\s*\\*\\s*xp\\s* *\\)/);\nYou should add 1 to the result of Math floor() js\nassert match(attack toString(), /Math\\ floor\\(\\s*Math\\ random\\(\\s*\\)\\s*\\*\\s*xp\\s*(\\+\\s*1\\s*\\)|\\)\\s*\\+\\s*1)/);\nYou should add the result of Math floor(Math random() * xp) + 1 to the result of weapons[currentWeaponIndex] power js\nassert match(attack toString(), /monsterHealth\\s*-=\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8511,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "6c02c1643145d391f132276bb7b36569",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "random() by the value of xp js assert match(attack toString(), /Math\\ random\\(\\s*\\)\\s*\\*\\s*xp/); You should use Math floor() to round the result of Math random() * xp down js assert match(attack toString(), /Math\\ floor\\(\\s*Math\\ random\\(\\s*\\)\\s*\\*\\s*xp\\s* *\\)/); You should add 1 to the result of Math floor() js assert match(attack toString(), /Math\\ floor\\(\\s*Math\\ random\\(\\s*\\)\\s*\\*\\s*xp\\s*(\\+\\s*1\\s*\\)|\\)\\s*\\+\\s*1)/); You should add the result of Math floor(Math random() * xp) + 1 to the result of weapons[currentWeaponIndex] power js assert match(attack toString(), /monsterHealth\\s*-=\\s*weapons\\s*\\[\\s*currentWeaponIndex\\s*\\]\\s*\\power\\s*\\+\\s*Math\\ floor\\(\\s*Math\\ random\\(\\s*\\)\\s*\\*\\s*xp\\s*(\\+\\s*1\\s*\\)|\\)\\s*\\+\\s*1)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8511,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "9216df87a80f16996b58ed8281210ed7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "You are in the town square Where do you want to go Use the buttons above ``` ```css body { background-color: #0a0a23; } text { background-color: #0a0a23; color: #ffffff; padding: 10px; } game { max-width: 500px; max-height: 400px; background-color: #ffffff; color: #ffffff; margin: 30px auto 0px; padding: 10px; } controls, stats { border: 1px solid #0a0a23; padding: 5px; color: #0a0a23; } monsterStats { display: none; border: 1px solid #0a0a23; padding: 5px; color: #ffffff; background-color: #c70d0d; }stat {\npadding-right: 10px;\n}\nbutton {\ncursor: pointer;\ncolor: #0a0a23;\nbackground-color: #feac32;\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder: 3px solid #feac32;\n}\n```\n```js\nlet xp = 0;\nlet health = 100;\nlet gold = 50;\nlet currentWeaponIndex = 0;\nlet fighting;\nlet monsterHealth;\nlet inventory = [\"stick\"];\nconst button1 = document querySelector('#button1');\nconst button2 = document querySelector(\"#button2\");\nconst button3 = document querySelector(\"#button3\");\nconst text = document querySelector(\"#text\");\nconst xpText = document querySelector(\"#xpText\");\nconst healthText = document querySelector(\"#healthText\");\nconst goldText = document querySelector(\"#goldText\");\nconst monsterStats = document querySelector(\"#monsterStats\");\nconst monsterName = document querySelector(\"#monsterName\");\nconst monsterHealthText = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8511,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "ea169fc9270fcf222fbcf12ada4de7c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "} ``` ```js let xp = 0; let health = 100; let gold = 50; let currentWeaponIndex = 0; let fighting; let monsterHealth; let inventory = [\"stick\"]; const button1 = document querySelector('#button1'); const button2 = document querySelector(\"#button2\"); const button3 = document querySelector(\"#button3\"); const text = document querySelector(\"#text\"); const xpText = document querySelector(\"#xpText\"); const healthText = document querySelector(\"#healthText\"); const goldText = document querySelector(\"#goldText\"); const monsterStats = document querySelector(\"#monsterStats\"); const monsterName = document querySelector(\"#monsterName\"); const monsterHealthText = documentquerySelector(\"#monsterHealth\");\nconst weapons = [\n{ name: 'stick', power: 5 },\n{ name: 'dagger', power: 30 },\n{ name: 'claw hammer', power: 50 },\n{ name: 'sword', power: 100 }\n];\nconst monsters = [\n{\nname: \"slime\",\nlevel: 2,\nhealth: 15\n},\n{\nname: \"fanged beast\",\nlevel: 8,\nhealth: 60\n},\n{\nname: \"dragon\",\nlevel: 20,\nhealth: 300\n}\n]\nconst locations = [\n{\nname: \"town square\",\n\"button text\": [\"Go to store\", \"Go to cave\", \"Fight dragon\"],\n\"button functions\": [goStore, goCave, fightDragon],\ntext: \"You are in the town square You see a sign that says \\\"Store\\\" \"\n},\n{\nname: \"store\",\n\"button text\": [\"Buy 10 health (10 gold)\", \"Buy weapon (30 gold)\", \"Go to town square\"],\n\"button functions\": [buyHealth, buyWeapon, goTown],\ntext: \"You enter the store \"\n},\n{\nname: \"cave\",\n\"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"],\n\"button functions\": [fightSlime, fightBeast, goTown],\ntext: \"You enter the cave You see some monsters \"\n},\n{\nname: \"fight\",\n\"button text\": [\"Attack\", \"Dodge\", \"Run\"],\n\"button functions\": [attack, dodge, goTown],\ntext: \"You are fighting a monster \"\n}\n];\n// initialize buttons\nbutton1 onclick = goStore;\nbutton2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8511,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "908afccbf3c08db188a273f5df8f3cd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "\"Go to town square\"], \"button functions\": [buyHealth, buyWeapon, goTown], text: \"You enter the store \" }, { name: \"cave\", \"button text\": [\"Fight slime\", \"Fight fanged beast\", \"Go to town square\"], \"button functions\": [fightSlime, fightBeast, goTown], text: \"You enter the cave You see some monsters \" }, { name: \"fight\", \"button text\": [\"Attack\", \"Dodge\", \"Run\"], \"button functions\": [attack, dodge, goTown], text: \"You are fighting a monster \" } ]; // initialize buttons button1 onclick = goStore; button2onclick = goCave;\nbutton3 onclick = fightDragon;\nfunction update(location) {\nbutton1 innerText = location[\"button text\"][0];\nbutton2 innerText = location[\"button text\"][1];\nbutton3 innerText = location[\"button text\"][2];\nbutton1 onclick = location[\"button functions\"][0];\nbutton2 onclick = location[\"button functions\"][1];\nbutton3 onclick = location[\"button functions\"][2];\ntext innerText = location text;\n}\nfunction goTown() {\nupdate(locations[0]);\n}\nfunction goStore() {\nupdate(locations[1]);\n}\nfunction goCave() {\nupdate(locations[2]);\n}\nfunction buyHealth() {\nif (gold >= 10) {\ngold -= 10;\nhealth += 10;\ngoldText innerText = gold;\nhealthText innerText = health;\n} else {\ntext innerText = \"You do not have enough gold to buy health \";\n}\n}\nfunction buyWeapon() {\nif (currentWeaponIndex < weapons length - 1) {\nif (gold >= 30) {\ngold -= 30;\ncurrentWeaponIndex++;\ngoldText innerText = gold;\nlet newWeapon = weapons[currentWeaponIndex] name;\ntext innerText = \"You now have a \" + newWeapon + \" \";\ninventory push(newWeapon);\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"You do not have enough gold to buy a weapon \";\n}\n} else {\ntext innerText = \"You already have the most powerful weapon \";\nbutton2 innerText = \"Sell weapon for 15 gold\";\nbutton2 onclick = sellWeapon;\n}\n}\nfunction sellWeapon() {\nif (inventory length > 1) {\ngold += 15;\ngoldText innerText = gold;\nlet currentWeapon = inventory shift();\ntext",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8511,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a37ff76be86870759d56bd024d510933",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "In your inventory you have: \" + inventory; } else { text innerText = \"You do not have enough gold to buy a weapon \"; } } else { text innerText = \"You already have the most powerful weapon \"; button2 innerText = \"Sell weapon for 15 gold\"; button2 onclick = sellWeapon; } } function sellWeapon() { if (inventory length > 1) { gold += 15; goldText innerText = gold; let currentWeapon = inventory shift(); textinnerText = \"You sold a \" + currentWeapon + \" \";\ntext innerText += \" In your inventory you have: \" + inventory;\n} else {\ntext innerText = \"Don't sell your only weapon \";\n}\n}\nfunction fightSlime() {\nfighting = 0;\ngoFight();\n}\nfunction fightBeast() {\nfighting = 1;\ngoFight();\n}\nfunction fightDragon() {\nfighting = 2;\ngoFight();\n}\nfunction goFight() {\nupdate(locations[3]);\nmonsterHealth = monsters[fighting] health;\nmonsterStats style display = \"block\";\nmonsterName innerText = monsters[fighting] name;\nmonsterHealthText innerText = monsterHealth;\n}\nfunction attack() {\ntext innerText = \"The \" + monsters[fighting] name + \" attacks \";\ntext innerText += \" You attack it with your \" + weapons[currentWeaponIndex] name + \" \";\nhealth -= monsters[fighting] level;\n--fcc-editable-region--\nmonsterHealth -= weapons[currentWeaponIndex] power;\n--fcc-editable-region--\n}\nfunction dodge() {\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8511,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8e4dc6a60f85bf256a0cb.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "2981604c1a638e97d9016fe4d586cb33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8edd05e27cc668051686f.md",
    "source_type": "git_repo",
    "title": "RPG - Dragon Repeller",
    "content": "id: 62a8edd05e27cc668051686f\ntitle: Step 126\nchallengeType: 0\ndashedName: step-126\n--description--\nAdd an if statement to check if health is less than or equal to 0 If it is, call the lose function --hints--\nYour attack function should have an if statement js\nassert match(attack toString(), /if/);\nYour if statement should check if health is less than or equal to 0 js\nassert match(attack toString(), /if\\s*\\(\\s*health\\s*<=\\s*0\\s*\\)/);\nYour if statement should call the lose function js\nassert match(attack toString(), /lose\\(\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nRPG - Dragon Repeller\nXP: 0\nHealth: 100\nGold: 50\nGo to store\nGo to cave\nFight dragon\nMonster Name:\nHealth:\nWelcome to Dragon Repeller You must defeat the dragon that is preventing people from leaving the town You are in the town square Where do you want to go Use the buttons above ```\n```css\nbody {\nbackground-color: #0a0a23;\n}\ntext {\nbackground-color: #0a0a23;\ncolor: #ffffff;\npadding: 10px;\n}\ngame {\nmax-width: 500px;\nmax-height: 400px;\nbackground-color: #ffffff;\ncolor: #ffffff;\nmargin: 30px auto 0px;\npadding: 10px;\n}\ncontrols,\nstats {\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #0a0a23;\n}\nmonsterStats {\ndisplay: none;\nborder: 1px solid #0a0a23;\npadding: 5px;\ncolor: #ffffff;\nbackground-color: #c70d0d;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7141,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-basic-javascript-by-building-a-role-playing-game\\62a8edd05e27cc668051686f.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 0,
    "total_chunks": 5
  }
]