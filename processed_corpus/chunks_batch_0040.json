[
  {
    "id": "fe3fa4901f710e49edaac8a8b23ade77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66331384245d028fd8b1be23.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66331384245d028fd8b1be23\ntitle: Task 32\nchallengeType: 19\ndashedName: task-32\n--description--\nPlease answer the question below --questions--\n--text--\nWhat does that refer to in Tom's statement --answers--\nThat he should rewrite the functions\n--feedback--\nTom's use of that does not imply rewriting but understanding the existing functions as explained by Sarah That he should read the function names and comments to understand what the functions do\nThat he should ignore the comments\n--feedback--\nTom acknowledges the importance of reading comments, not ignoring them, as they help explain the function's purpose That he needs to learn programming from scratch\n--feedback--\nThis is not suggested in any part of the conversation Tom is discussing how to better understand functions, not learning programming from the beginning --video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-roof png\",\n\"characters\": [\n{\n\"character\": \"Sarah\",\n\"position\": {\n\"x\": 50,\n\"y\": 0,\n\"z\": 1 4\n},\n\"opacity\": 0\n},\n{\n\"character\": \"Tom\",\n\"position\": {\n\"x\": 50,\n\"y\": 15,\n\"z\": 1 2\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5 2-2 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 14 06,\n\"finishTimestamp\": 25 86\n}\n},\n\"commands\": [\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sarah\",\n\"startTime\": 1,\n\"finishTime\": 5 08,\n\"dialogue\": {\n\"text\": \"No problem, Tom To understand them, you can look at their names and comments \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"startTime\": 5 46,\n\"finishTime\": 7 36,\n\"dialogue\": {\n\"text\": \"Comments explain that function's purpose \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 7 59\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 7 59\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 7",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66331384245d028fd8b1be23.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1e94061271bf052f270201bd6533a8ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66331384245d028fd8b1be23.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "}, { \"character\": \"Sarah\", \"startTime\": 1, \"finishTime\": 5 08, \"dialogue\": { \"text\": \"No problem, Tom To understand them, you can look at their names and comments \", \"align\": \"center\" } }, { \"character\": \"Sarah\", \"startTime\": 5 46, \"finishTime\": 7 36, \"dialogue\": { \"text\": \"Comments explain that function's purpose \", \"align\": \"center\" } }, { \"character\": \"Sarah\", \"opacity\": 0, \"startTime\": 7 59 }, { \"character\": \"Tom\", \"opacity\": 1, \"startTime\": 7 59 }, { \"character\": \"Tom\", \"startTime\": 782,\n\"finishTime\": 12 8,\n\"dialogue\": {\n\"text\": \"Got it So that means I should read the function names and comments to what these functions do \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 13 3\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66331384245d028fd8b1be23.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9a42bca937635885c36bfab3e5ad72d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633511c7b197798ad5fd703.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633511c7b197798ad5fd703\ntitle: Task 39\nchallengeType: 19\ndashedName: task-39\n--description--\nPlease answer the question below.\n--questions--\n--text--\nWhat is Tom working on, and what problem is he experiencing?\n--answers--\nHe is working on a software that uses many variables but can't decide which programming language to use.\n--feedback--\nTom's problem is not about choosing a programming language, but about managing many variables.\nHe is working on a project and is unsure how to manage variables in the project.\nHe is developing a new application that involves many variables and is struggling with too much data.\n--feedback--\nWhile it mentions variables and a struggle, Tom specifically said his challenge is managing the variables, not handling too much data.\nHe is creating a database that includes many variables but is unsure about the structure.\n--feedback--\nThis option isn't accurate because Tom mentioned he is working on a project, not specifically a database, and his issue is with managing the variables.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center.png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": {\n\"x\": 50,\n\"y\": 15,\n\"z\": 1.2\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0,\n\"finishTimestamp\": 6.14\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 1,\n\"finishTime\": 7.14,\n\"dialogue\": {\n\"text\": \"Hey, Sophie, I'm working on a project that uses many variables. I'm not sure how to manage them all.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 7.64\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2083,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633511c7b197798ad5fd703.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "61a5a81754fd735556dc6b0eb2bbf893",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66339d408258519c61151a64.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66339d408258519c61151a64\ntitle: Task 42\nchallengeType: 19\ndashedName: task-42\n--description--\nPlease answer the question below.\n--questions--\n--text--\nHow do variables work in programming?\n--answers--\nVariables organize code and are accessed through specific keywords.\n--feedback--\nVariables store information, not just organize code, and the method mentioned doesn't specifically involve using the equals symbol.\nVariables track changes in values using mathematical symbols.\n--feedback--\nThis isn't right because it incorrectly suggests that variables track changes by themselves and emphasizes mathematical symbols, not assignment.\nVariables control program flow and use commands to modify data.\n--feedback--\nThis option misrepresents variables as controlling program flow, which is not their primary function.\nVariables store information and use the equals symbol to assign values.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center.png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\n\"x\": 50,\n\"y\": 0,\n\"z\": 1.4\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 6.48,\n\"finishTimestamp\": 14.32\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 5.7,\n\"dialogue\": {\n\"text\": \"Variables help you store information in your code, like names, numbers, and more.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 5.92,\n\"finishTime\": 8.64,\n\"dialogue\": {\n\"text\": \"You can use the equals symbol to assign values to them.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 9.14\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66339d408258519c61151a64.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8fe4507fc7b98b312b02b9d8ffb4d4ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\663352b4860f03995736b6cd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663352b4860f03995736b6cd\ntitle: Task 40\nchallengeType: 22\ndashedName: task-40\n--description--\nStore information means to keep or save data in a specific location, usually in a variable Variables are like containers in your code that hold information, such as numbers, text, or other types of data You can think of them as named storage spots where you can access the stored information later in your code For example, int age = 30; Here, the variable age stores the number 30 The word like is used as a preposition to give examples or to compare similar things For instance, if you say, I love fruits like apples and oranges You are using like to give examples of the type of fruits you love, suggesting that there might be more fruits on that list --fillInTheBlank--\n--sentence--\nVariables help you BLANK BLANK in your code, BLANK names, numbers, and more --blanks--\nstore\n--feedback--\nThis word means to keep or save something for future use In the context, it refers to keeping data in a variable information\n--feedback--\nIt refers to data or details that are kept in the computer In this sentence, it means the data saved in variables like\n--feedback--\nIt is used to give examples of what can be stored in variables --scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\n\"x\": 50,\n\"y\": 0,\n\"z\": 1 4\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5 2-3 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 6 48,\n\"finishTimestamp\": 11 18\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 5 7,\n\"dialogue\": {\n\"text\": \"Variables help you store information in your code, like names, numbers, and more \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 6 2\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\663352b4860f03995736b6cd.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "29fd049d07b418c1d0413d9b411ca7ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66339e21256f099cd722292f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66339e21256f099cd722292f\ntitle: Task 43\nchallengeType: 19\ndashedName: task-43\n--description--\nA constant in programming is similar to a variable, but once it is assigned a value, that value cannot be changed. Constants are used when you have values that you know will not need to be modified throughout the program. They are often written in uppercase letters to distinguish them from variables.\nFor example, const PI = 3.14; In many programming languages, const is used to declare a constant. Here, PI is a constant with assigned value 3.14.\n--questions--\n--text--\nWhat is a constant in programming?\n--answers--\nA value that changes over time\n--feedback--\nA constant is a value that does not change once it's set, unlike a variable.\nA type of programming language\n--feedback--\nA constant is a concept within programming languages, not a language itself.\nA value that does not change once set\nA part of the computer hardware\n--feedback--\nA constant is a coding concept, not a physical component of computers.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1123,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66339e21256f099cd722292f.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "678c8f7cbcdf2e7ef003926d29654fe7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\663354f60aafd69a4c0138da.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663354f60aafd69a4c0138da\ntitle: Task 41\nchallengeType: 22\ndashedName: task-41\n--description--\nThe equals symbol (=) is commonly used for assignment It's used to assign a value to a variable The variable name is written on the left of the equals symbol, and the value you want to store in the variable is on the right For example, name = \"Sophie\"; assigns the string \"Sophie\" to the variable name To assign a value in programming means to give a specific value to a variable The equals symbol (=) is commonly used for this purpose When you assign a value to a variable, you are telling the program to remember that value for use later For example, age = 25 assigns the value 25 to the variable age --fillInTheBlank--\n--sentence--\nYou can use the BLANK BLANK to BLANK BLANK to them --blanks--\nequals\n--feedback--\nIt refers to the = sign in programming, used for setting a variable to a specific value symbol\n--feedback--\nIt refers to a graphical sign or character used to represent an operation or process in programming assign\n--feedback--\nIt means to give a particular value to a variable It's like telling the computer \"this variable holds this data\" values\n--feedback--\nThey are the actual data or information you want to store in a variable, like a number, text, or other types of data --scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\n\"x\": 50,\n\"y\": 0,\n\"z\": 1 4\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5 2-3 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 11 4,\n\"finishTimestamp\": 14 32\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 3 92,\n\"dialogue\": {\n\"text\": \"You can use the equals symbol to assign values to them \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2308,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\663354f60aafd69a4c0138da.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ae634563a31e8349e9b679295bbbbcdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\663354f60aafd69a4c0138da.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"character\": \"Sophie\", \"position\": { \"x\": 50, \"y\": 0, \"z\": 1 4 }, \"opacity\": 0 } ], \"audio\": { \"filename\": \"5 2-3 mp3\", \"startTime\": 1, \"startTimestamp\": 11 4, \"finishTimestamp\": 14 32 } }, \"commands\": [ { \"character\": \"Sophie\", \"opacity\": 1, \"startTime\": 0 }, { \"character\": \"Sophie\", \"startTime\": 1, \"finishTime\": 3 92, \"dialogue\": { \"text\": \"You can use the equals symbol to assign values to them \", \"align\": \"center\" } }, { \"character\": \"Sophie\", \"opacity\": 0, \"startTime\": 442\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2308,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\663354f60aafd69a4c0138da.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "618777e03ef0b97982c13900d0b61649",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a14f17a4669e1c980d91.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633a14f17a4669e1c980d91\ntitle: Task 45\nchallengeType: 19\ndashedName: task-45\n--description--\nPlease answer the question below.\n--questions--\n--text--\nWhat does Tom want to know?\n--answers--\nHow to define constants in his project\n--feedback--\nTom is asking about the distinction between two concepts, not how to define constants.\nWhy he should use constants instead of variables\n--feedback--\nThis isn't correct because Tom's question is about understanding the differences, not the reasons for using one over the other.\nThe difference between variables and constants\nWhich is better to use in his project: variables or constants\n--feedback--\nThis option is misleading. Tom is looking for clarification on the differences, not advice on which is better to use.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center.png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": {\n\"x\": 50,\n\"y\": 15,\n\"z\": 1.2\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 14.5,\n\"finishTimestamp\": 21.96\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 1,\n\"finishTime\": 5.48,\n\"dialogue\": {\n\"text\": \"Thanks, Sophie. I'm also using many constants in my project.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 5.9,\n\"finishTime\": 8.64,\n\"dialogue\": {\n\"text\": \"But what's the difference between variables and constants?\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 9.14\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a14f17a4669e1c980d91.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ae83a4d9b209c4804c26cd2dd8026566",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a2a86218659eb77fb9a1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633a2a86218659eb77fb9a1\ntitle: Task 46\nchallengeType: 22\ndashedName: task-46\n--description--\nThe modal verb can is used to indicate possibility or ability. For example, in the sentence You can see the stars at night, can shows that it is possible to see the stars during nighttime.\nChange means to make or become different. In everyday life, you might change your clothes after work, indicating you switch from work clothes to casual ones.\nStay the same means to remain unchanged or constant. For example, The rules of the game stay the same every year. This means the rules do not alter from one year to the next.\n--fillInTheBlank--\n--sentence--\nGreat question, Tom. Variables can BLANK their values, but constants BLANK BLANK BLANK.\n--blanks--\nchange\n--feedback--\nIt describes how the values of variables can be altered or modified during the execution of a program.\nstay\n--feedback--\nIt is used here as part of the phrase meaning to remain in the same state or condition.\nthe\n--feedback--\nIt is used as part of the phrase indicating that the state being referred to is specific and defined.\nsame\n--feedback--\nIt completes the phrase emphasizing that something does not vary or alter from its original state.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center.png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\n\"x\": 50,\n\"y\": 0,\n\"z\": 1.4\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 22.24,\n\"finishTimestamp\": 27.02\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 5.78,\n\"dialogue\": {\n\"text\": \"Great question, Tom. Variables can change their values, but constants stay the same.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 6.28\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2265,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a2a86218659eb77fb9a1.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ac899a40cca6125de8693f19de86df08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a45ce837ac9f95394eab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633a45ce837ac9f95394eab\ntitle: Task 47\nchallengeType: 19\ndashedName: task-47\n--description--\nPlease answer the question below.\n--questions--\n--text--\nWhat is the difference between variables and constants according to Sophie?\n--answers--\nVariables' values can be different, but constants remain unchanged.\nVariables and constants are both used to store values permanently.\n--feedback--\nThis option isn't correct because constants are permanent, but variables can change.\nConstants can change their values just like variables.\n--feedback--\nThis isn't accurate. Constants do not change their values—they stay the same, unlike variables.\nVariables are used less frequently than constants in programming.\n--feedback--\nThe frequency of use isn't discussed, and Sophie's statement focuses on usage rather than their functional difference.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center.png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\n\"x\": 50,\n\"y\": 0,\n\"z\": 1.4\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 22.24,\n\"finishTimestamp\": 27.02\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 5.78,\n\"dialogue\": {\n\"text\": \"Great question, Tom. Variables can change their values, but constants stay the same.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 6.28\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a45ce837ac9f95394eab.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "34f9e6909ae5f9c8c70f6b2563b57b8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66339f1995bdea9d4aa28cd8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66339f1995bdea9d4aa28cd8\ntitle: Task 44\nchallengeType: 22\ndashedName: task-44\n--description--\nThe word difference refers to the way in which two or more things are not the same It highlights the distinct characteristics or qualities between items or concepts For example, if you look at an apple and an orange, the difference includes their color, taste, and texture The preposition between is often used in the phrase difference between to compare two things or discuss the contrasts that exist when comparing two things For instance, He explained the difference between Java and Python --fillInTheBlank--\n--sentence--\nThanks, Sophie I'm also using many BLANK in my project But BLANK the BLANK BLANK variables and constants --blanks--\nconstants\n--feedback--\nIt refer to fixed values in programming that do not change throughout the execution of the program, unlike variables what's\n--feedback--\nIt is a contraction commonly used in questions to inquire about something, in this case, asking for an explanation or clarification difference\n--feedback--\nIt means two or more things which you are comparing are not the same It's used to highlight distinctions between\n--feedback--\nIt is used to refer to two things being compared --scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": {\n\"x\": 50,\n\"y\": 15,\n\"z\": 1 2\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5 2-3 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 14 5,\n\"finishTimestamp\": 21 96\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 1,\n\"finishTime\": 5 48,\n\"dialogue\": {\n\"text\": \"Thanks, Sophie I'm also using many constants in my project \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 5 9,\n\"finishTime\": 8 64,\n\"dialogue\": {\n\"text\": \"But what's the difference between variables and constants \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 9",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66339f1995bdea9d4aa28cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5c2e0d4b7cccbb11ace73762880fb819",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66339f1995bdea9d4aa28cd8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"startTimestamp\": 14 5, \"finishTimestamp\": 21 96 } }, \"commands\": [ { \"character\": \"Tom\", \"opacity\": 1, \"startTime\": 0 }, { \"character\": \"Tom\", \"startTime\": 1, \"finishTime\": 5 48, \"dialogue\": { \"text\": \"Thanks, Sophie I'm also using many constants in my project \", \"align\": \"center\" } }, { \"character\": \"Tom\", \"startTime\": 5 9, \"finishTime\": 8 64, \"dialogue\": { \"text\": \"But what's the difference between variables and constants \", \"align\": \"center\" } }, { \"character\": \"Tom\", \"opacity\": 0, \"startTime\": 914\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66339f1995bdea9d4aa28cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a1985375bedcfcb2ab1985aa2f8c0694",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66334fd916a3a697e1d2c631.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66334fd916a3a697e1d2c631\ntitle: \"Dialogue 3: Getting Help with Variables\"\nchallengeType: 21\ndashedName: dialogue-3-getting-help-with-variables\n--description--\nWatch the video to understand the context of the upcoming lessons --assignment--\nWatch the video\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Sophie\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 }\n}\n],\n\"audio\": {\n\"filename\": \"5 2-3 mp3\",\n\"startTime\": 1\n},\n\"alwaysShowDialogue\": true\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"position\": { \"x\": 25, \"y\": 0, \"z\": 1 },\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"position\": { \"x\": 70, \"y\": 0, \"z\": 1 },\n\"startTime\": 0 5\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 1,\n\"finishTime\": 7 14,\n\"dialogue\": {\n\"text\": \"Hey, Sophie I'm working on a project that uses many variables I'm not sure how to manage them all \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 7 88,\n\"finishTime\": 12 18,\n\"dialogue\": {\n\"text\": \"Variables help you store information in your code, like names, numbers, and more \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 12 6,\n\"finishTime\": 15 32,\n\"dialogue\": {\n\"text\": \"You can use the equals symbol to assign values to them \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 15 7,\n\"finishTime\": 19 78,\n\"dialogue\": {\n\"text\": \"Thanks, Sophie I'm also using many constants in my project \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 20",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3473,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66334fd916a3a697e1d2c631.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c7199d6e01f0a5fdab0a0c3d5fc43cc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66334fd916a3a697e1d2c631.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you store information in your code, like names, numbers, and more \", \"align\": \"right\" } }, { \"character\": \"Sophie\", \"startTime\": 12 6, \"finishTime\": 15 32, \"dialogue\": { \"text\": \"You can use the equals symbol to assign values to them \", \"align\": \"right\" } }, { \"character\": \"Tom\", \"startTime\": 15 7, \"finishTime\": 19 78, \"dialogue\": { \"text\": \"Thanks, Sophie I'm also using many constants in my project \", \"align\": \"left\" } }, { \"character\": \"Tom\", \"startTime\": 202,\n\"finishTime\": 22 76,\n\"dialogue\": {\n\"text\": \"But what's the difference between variables and constants \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 23 24,\n\"finishTime\": 28 02,\n\"dialogue\": {\n\"text\": \"Great question, Tom Variables can change their values, but constants stay the same \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 28 02,\n\"finishTime\": 31 14,\n\"dialogue\": {\n\"text\": \"Think of variables as containers that you can fill and empty,\",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 31 14,\n\"finishTime\": 34 62,\n\"dialogue\": {\n\"text\": \"and constants as locked boxes that keep the same contents \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 35 44,\n\"finishTime\": 38 98,\n\"dialogue\": {\n\"text\": \"I see So that means I can change the values in these variables,\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 39 12,\n\"finishTime\": 41 62,\n\"dialogue\": {\n\"text\": \"but I can't touch the values in these constants \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 },\n\"startTime\": 42",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3473,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66334fd916a3a697e1d2c631.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d2e67d97dfe23859d9d99ee77f434b30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66334fd916a3a697e1d2c631.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "same contents \", \"align\": \"right\" } }, { \"character\": \"Tom\", \"startTime\": 35 44, \"finishTime\": 38 98, \"dialogue\": { \"text\": \"I see So that means I can change the values in these variables,\", \"align\": \"left\" } }, { \"character\": \"Tom\", \"startTime\": 39 12, \"finishTime\": 41 62, \"dialogue\": { \"text\": \"but I can't touch the values in these constants \", \"align\": \"left\" } }, { \"character\": \"Sophie\", \"position\": { \"x\": 125, \"y\": 0, \"z\": 1 }, \"startTime\": 4212\n},\n{\n\"character\": \"Tom\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 42 62\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3473,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\66334fd916a3a697e1d2c631.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2f42a35fa843dc4cbceb4b545aa555f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a97f928771a163b59745.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633a97f928771a163b59745\ntitle: Task 49\nchallengeType: 19\ndashedName: task-49\n--description--\nPlease answer the question below.\n--questions--\n--text--\nWhich sentence accurately describes the difference between variables and constants as explained by Sophie?\n--answers--\nVariables are flexible storage units, while constants are secure storage units that cannot be altered.\n--feedback--\nThis option, while somewhat accurate, doesn't fully capture the metaphor of filling and emptying versus locked boxes that Sophie used.\nVariables can store multiple types of data at once, whereas constants can only store one type.\n--feedback--\nThis statement is misleading because it focuses on the types of data rather than how the data can be altered or remains fixed, which is the main point of Sophie's explanation.\nVariables act as containers that can be filled and emptied, while constants act as locked boxes that keep unchanged contents.\nVariables are always changing, and constants are never used more than once.\n--feedback--\nConstants are used repeatedly but their values do not change.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center.png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\n\"x\": 50,\n\"y\": 0,\n\"z\": 1.4\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 27.02,\n\"finishTimestamp\": 33.62\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 7.6,\n\"dialogue\": {\n\"text\": \"Think of variables as containers that you can fill and empty, and constants as locked boxes that keep the same contents.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 8.1\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2194,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a97f928771a163b59745.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9bd3c0b2bfcc9549c8e0cc9f72688bd7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633abfc050e82a29a76dd42.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633abfc050e82a29a76dd42\ntitle: Task 51\nchallengeType: 19\ndashedName: task-51\n--description--\nCan is used to show that something is possible or someone is capable of doing something, while can't is a contraction of cannot, indicating that something is impossible or someone is incapable of doing something. Both words should be followed by the base form of verbs.\nExamples:\nI can swim. (showing ability)\nI can't swim. (showing inability or lack of ability)\n--questions--\n--text--\nWhich sentence is using can or can't correctly?\n--answers--\nI can to play the guitar.\n--feedback--\nThis sentence is incorrect because to should not be used with can. The correct sentence would be: I can play the guitar.\nShe can't see without her glasses.\nWe can goes to the park tomorrow.\n--feedback--\nThe modal can is followed by a base form of the verb, so goes should be go.\nHe can driving at night.\n--feedback--\nCan should be followed by the base form of the verb, without the -ing ending. The correct sentence should be: He can drive at night.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1163,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633abfc050e82a29a76dd42.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aa77b3125ab6180618e11e53df37098b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633aa9cf90591a1f63a431e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633aa9cf90591a1f63a431e\ntitle: Task 50\nchallengeType: 19\ndashedName: task-50\n--description--\nThe connector so is used to introduce a result or effect related to what has been said. It often shows a cause-and-effect relationship between two parts of a sentence.\nFor example, It was raining, so we canceled the picnic. This shows that the picnic was canceled because of the rain.\n--questions--\n--text--\nWhich sentence is using so correctly?\n--answers--\nI was hungry so I am eating.\n--feedback--\nThis sentence almost uses so correctly, but the tense in the second part should match the first. It would be correct to say: I was hungry, so I ate.\nShe is late to work, so she misses the meeting.\n--feedback--\nThe use of so suggests a consequence, but the tenses are mismatched. It should be: She is late to work, so she will miss the meeting.\nIt started raining, so we took shelter.\nHe likes to read books, so he buys a lamp.\n--feedback--\nThis sentence does not correctly use so because buying a lamp is not a direct result of liking to read books. A better use might be: He likes to read at night, so he bought a lamp.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633aa9cf90591a1f63a431e.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a45f7da890f0bbf7db66393e3427bca9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a64567c725a05a94b68f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633a64567c725a05a94b68f\ntitle: Task 48\nchallengeType: 22\ndashedName: task-48\n--description--\nIn this task, you'll explore the metaphorical use of terms to understand programming concepts Metaphors are a powerful way to visualize and explain complex ideas by relating them to everyday objects or actions Container is used metaphorically to describe variables as things that can hold and store different data, much like how a container can hold different items The actions fill and empty describe how you can add or remove data from variables, similar to how you might fill a water bottle or pour the water out Locked boxes describes constants as secure, unchangeable containers, emphasizing they can't be changed once set The phrase keep the same contents highlights that the data in constants does not change, like a box that is locked and always holds the same things inside --fillInTheBlank--\n--sentence--\nThink of variables as BLANK that you can BLANK and BLANK, and constants as BLANK boxes that keep the same BLANK --blanks--\ncontainers\n--feedback--\nIt metaphorically represent variables, emphasizing their ability to hold various types of data that can be changed over time fill\n--feedback--\nIt describes adding data to variables empty\n--feedback--\nIt is the process of removing data from variables locked\n--feedback--\nIt emphasizes that constants are secure and cannot be changed once they are set, similar to a box with a lock contents\n--feedback--\nIt refers to the data held within constants, which remains the same throughout the program --scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\n\"x\": 50,\n\"y\": 0,\n\"z\": 1 4\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5 2-3 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 27 02,\n\"finishTimestamp\": 33 62\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 7",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a64567c725a05a94b68f.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f69307ddf34607ac02e53b5a4ce3499f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a64567c725a05a94b68f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- It refers to the data held within constants, which remains the same throughout the program --scene-- json { \"setup\": { \"background\": \"company2-center png\", \"characters\": [ { \"character\": \"Sophie\", \"position\": { \"x\": 50, \"y\": 0, \"z\": 1 4 }, \"opacity\": 0 } ], \"audio\": { \"filename\": \"5 2-3 mp3\", \"startTime\": 1, \"startTimestamp\": 27 02, \"finishTimestamp\": 33 62 } }, \"commands\": [ { \"character\": \"Sophie\", \"opacity\": 1, \"startTime\": 0 }, { \"character\": \"Sophie\", \"startTime\": 1, \"finishTime\": 76,\n\"dialogue\": {\n\"text\": \"Think of variables as containers that you can fill and empty, and constants as locked boxes that keep the same contents \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 8 1\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633a64567c725a05a94b68f.md",
      "source_type": "git_repo"
    },
    "token_count": 230,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f585a2af4ea9b8e337e67fb4063f423f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633ae85f1fb7aa3ca13234d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633ae85f1fb7aa3ca13234d\ntitle: Task 53\nchallengeType: 19\ndashedName: task-53\n--description--\nPlease answer the question below.\n--questions--\n--text--\nBased on Tom's explanation, which scenario best illustrates the difference between variables and constants in a practical situation?\n--answers--\nVariables are like the volume of a radio, which you can adjust anytime, whereas constants are like a sealed CD, whose songs cannot be altered.\nVariables and constants both need regular updates to stay effective.\n--feedback--\nConstants do not change or need updates; they remain the same, unlike variables which can be updated.\nYou can pause or play music on a radio, just as you can switch variables and constants on and off.\n--feedback--\nThis isn't right because constants, unlike variables, cannot be 'switched off' or altered; they are permanent once set.\nTom can only use constants during certain times of the day, while variables can be used anytime.\n--feedback--\nThis statement is misleading as it suggests that the use of constants is time-restricted, which isn't true. Constants, like variables, do not have usage restrictions based on time but are defined by their unchangeable nature.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center.png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": {\n\"x\": 50,\n\"y\": 15,\n\"z\": 1.2\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 34.04,\n\"finishTimestamp\": 40.82\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 1,\n\"finishTime\": 7.78,\n\"dialogue\": {\n\"text\": \"I see. So that means I can change the values in these variables, but I can't touch the values in these constants.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 8.28\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2283,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633ae85f1fb7aa3ca13234d.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "70be4b57e2f81ced714d878ad76a5e29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\665632c4ace6cb00ab832023.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 665632c4ace6cb00ab832023\ntitle: Task 22\nchallengeType: 19\ndashedName: task-22\n--description--\nListen to Tom as he asks Sarah about programming.\n--questions--\n--text--\nWhat seems to be the problem he's having?\n--answers--\nHe does not know what code he's going to write next\n--feedback--\nHe says he's learning about something, but he does not know how to use it.\nHe does not have a computer, so he can't write code\n--feedback--\nTom does not mention not having a computer.\nHis computer is not functioning correctly\n--feedback--\nHe asks about functions, but that does not mean this is a problem with the computer.\nHe does not understand how to use functions.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-roof.png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": {\n\"x\": 50,\n\"y\": 15,\n\"z\": 1.2\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0,\n\"finishTimestamp\": 4.26\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 1,\n\"finishTime\": 5.26,\n\"dialogue\": {\n\"text\": \"Sarah, I'm learning about functions in programming and I'm not sure how to use them.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 5.76\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1685,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\665632c4ace6cb00ab832023.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "972c671544b1bc7a5dcb7c6720008bea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633ad387b6914a3313339b3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633ad387b6914a3313339b3\ntitle: Task 52\nchallengeType: 22\ndashedName: task-52\n--description--\nTouch often means to come into physical contact with something It can also be used metaphorically in contexts like programming, where it means to alter or affect something These is used to refer to specific items that are close to the speaker or are being actively discussed In this challenge, you'll review the difference between can and can't to express a person's ability or inability to do something Listen to what Tom says and fill in the blanks --fillInTheBlank--\n--sentence--\nI see BLANK that means I BLANK change the values in BLANK variables, but I BLANK BLANK the values in these constants --blanks--\nSo\n--feedback--\nIt is used here to introduce a conclusion or result based on what was previously stated, linking it logically can\n--feedback--\nIt expresses the ability to do something In this context, it means Tom has the ability to modify the variables these\n--feedback--\nIt is used to specify which variables Tom is talking about, pointing to a particular group of variables that are close in context can't\n--feedback--\nIt indicates an inability to perform an action Here, it emphasizes that Tom is not able to alter the constants touch\n--feedback--\nIn the context, it means to alter or affect Tom is saying he is not allowed to change the constants --scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-center png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": {\n\"x\": 50,\n\"y\": 15,\n\"z\": 1 2\n},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"5 2-3 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 34 04,\n\"finishTimestamp\": 40 82\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Tom\",\n\"startTime\": 1,\n\"finishTime\": 7 78,\n\"dialogue\": {\n\"text\": \"I see So that means I can change the values in these variables, but I can't touch the values in these constants",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633ad387b6914a3313339b3.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ee6ce7d6fbe51ca7f482011fa6d7516a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633ad387b6914a3313339b3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ \"character\": \"Tom\", \"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 }, \"opacity\": 0 } ], \"audio\": { \"filename\": \"5 2-3 mp3\", \"startTime\": 1, \"startTimestamp\": 34 04, \"finishTimestamp\": 40 82 } }, \"commands\": [ { \"character\": \"Tom\", \"opacity\": 1, \"startTime\": 0 }, { \"character\": \"Tom\", \"startTime\": 1, \"finishTime\": 7 78, \"dialogue\": { \"text\": \"I see So that means I can change the values in these variables, but I can't touch the values in these constants\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 8 28\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\6633ad387b6914a3313339b3.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "704e10272399830a4aaa26144eed8769",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\685916f5a78e6c0f9dd7e751.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 685916f5a78e6c0f9dd7e751\ntitle: Task 21\nchallengeType: 22\ndashedName: task-21\n--description--\nThis is a review of the entire dialogue you just studied.\n--instructions--\nWrite the following words or phrases in the correct spot:\ndocumentation, int, matches, data types, string, computer, and store.\n--fillInTheBlank--\n--sentence--\nJake: Sarah, can you explain BLANK to me? I'm a bit confused.\nSarah: Sure. Data types are fundamental in programming. You use them to tell the BLANK what kind of data you're working with.\nJake: Thanks, but I see many data types listed in the BLANK. How do I know which one to choose?\nSarah: Good question. You usually choose data types based on the kind of information you want to BLANK. For example, if you're working with text, you'd use this data type: BLANK. If it's whole numbers, you'd choose BLANK.\nJake: Ah, I see. So this means I should pick the data type that BLANK the information I want to work with.\n--blanks--\ndata types\n--feedback--\nDifferent kinds of information you can use in code, like numbers or text.\ncomputer\n--feedback--\nA machine that follows instructions to do tasks like calculations or showing information.\ndocumentation\n--feedback--\nHelpful information that explains how to use code, tools, or programs.\nstore\n--feedback--\nTo keep information in a variable or memory for later use.\nstring\n--feedback--\nA type of data that includes text, like words or sentences.\nint\n--feedback--\nShort for integer, this is a data type for whole numbers.\nmatches\n--feedback--\nThis means two things are the same or go together correctly.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\685916f5a78e6c0f9dd7e751.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "af7ac86cf0f011613caf4be2c668a757",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\685917530d8061101ef7e3f0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 685917530d8061101ef7e3f0\ntitle: Task 37\nchallengeType: 22\ndashedName: task-37\n--description--\nThis is a review of the entire dialogue you just studied.\n--instructions--\nWrite the following words or phrases in the correct spot:\nfunctions, names, in our code, reusable tasks, purpose, and comments.\n--fillInTheBlank--\n--sentence--\nTom: Sarah, I'm learning about BLANK in programming and I'm not sure how to use them.\nSarah: Functions are like small BLANK that you can use in your code.\nTom: Thanks for explaining, Sarah. I see many functions BLANK but I'm not sure what each of these does.\nSarah: No problem, Tom. To understand them, you can look at their names and BLANK. Comments explain that function's BLANK.\nTom: Got it. So that means I should read the function BLANK and comments to know what these functions do.\n--blanks--\nfunctions\n--feedback--\nParts of code that do a job and can be used again and again.\nreusable tasks\n--feedback--\nJobs in code you can do many times without writing them again.\nin our code\n--feedback--\nThis means inside the program or script you are writing.\ncomments\n--feedback--\nNotes in the code to explain what it does. The computer doesn't read them.\npurpose\n--feedback--\nThe reason why something is done or exists.\nnames\n--feedback--\nWords you use to identify things like variables, functions, or classes.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1493,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\685917530d8061101ef7e3f0.md",
      "source_type": "git_repo"
    },
    "token_count": 323,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7b74bd0cb1519c5a3aa88f8119b0fd71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\685917c4259afc10d195c229.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 685917c4259afc10d195c229\ntitle: Task 54\nchallengeType: 22\ndashedName: task-54\n--description--\nThis is a review of the entire dialogue you just studied.\n--instructions--\nWrite the following words or phrases in the correct spot:\nvalues, equals symbol, containers, constants, contents, and variables.\n--fillInTheBlank--\n--sentence--\nTom: Hey, Sophie. I'm working on a project that uses many BLANK. I'm not sure how to manage them all.\nSophie: Variables help you store information in your code, like names, numbers, and more. You can use the BLANK to assign values to them.\nTom: Thanks, Sophie. I'm also using many BLANK in my project. But what's the difference between variables and constants?\nSophie: Great question, Tom. Variables can change their BLANK, but constants stay the same. Think of variables as BLANK that you can fill and empty, and constants as locked boxes that keep the same BLANK.\nTom: I see. So that means I can change the values in these variables, but I can't touch the values in these constants.\n--blanks--\nvariables\n--feedback--\nNames that hold information, like numbers or words, in a program.\nequals symbol\n--feedback--\nThe = sign used to give a value to a variable.\nconstants\n--feedback--\nValues that do not change while the program is running.\nvalues\n--feedback--\nThe information stored in variables, like 5, \"hello\", or true.\ncontainers\n--feedback--\nThings like variables that hold or carry information in a program.\ncontents\n--feedback--\nThe information or value inside a container or variable.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1684,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-how-to-use-code-related-concepts-and-terms\\685917c4259afc10d195c229.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f64cd307720803e109219f51ec0dde40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b2296130e541911943345.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b2296130e541911943345\ntitle: Task 1\nchallengeType: 22\ndashedName: task-1\n--description--\nListen to Alice's introduction and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nHi, BLANK! My BLANK is Alice, and I'm happy to BLANK BLANK of the BLANK.\n--blanks--\neveryone\n--feedback--\nThis word is used to address all the people present. Alice uses it to greet the group.\nname\n--feedback--\nThis word refers to what someone is called. Alice uses it to introduce herself.\nbe\n--feedback--\nThis word is a verb used to talk about existence or identity. Alice uses it to express her feelings.\npart\n--feedback--\nThis word indicates a piece or segment of something larger. Alice uses it to describe her role in the group.\nteam\n--feedback--\nThis word refers to a group of people working together. Alice uses it to identify the group she is joining.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 3.82\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 4.82,\n\"dialogue\": {\n\"text\": \"Hi, everyone. My name is Alice and I'm happy to be part of the team.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.32\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1831,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b2296130e541911943345.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6913f54a397fedfee9e45ba942ccab93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b236691c67b197cd382f4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b236691c67b197cd382f4\ntitle: Task 2\nchallengeType: 19\ndashedName: task-2\n--description--\nPronouns are used for personal reference.\n--questions--\n--text--\nIn Alice's introduction, which pronoun does she use to refer to herself?\n--answers--\nYou\n--feedback--\nYou is used to refer to the person being spoken to, not the speaker.\nHe\n--feedback--\nHe is a pronoun used to refer to a male individual, not the speaker if they are female.\nShe\n--feedback--\nShe is used to refer to another female individual, not the speaker herself.\nI\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 3.82\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 4.82,\n\"dialogue\": {\n\"text\": \"Hi, everyone. My name is Alice and I'm happy to be part of the team.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.32\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b236691c67b197cd382f4.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "af923937b61463654134e7a5a49958d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b400653813a1caa228aca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b400653813a1caa228aca\ntitle: Task 3\nchallengeType: 19\ndashedName: task-3\n--description--\nSentences with the verb to be are often used to describe feelings and emotions. In the present simple tense, you use it to talk about how you feel right now. For example:\nI'm excited to be part of the team. (The person is expressing their current positive feelings)\n--questions--\n--text--\nWhat does the expression I'm happy indicate in the present simple tense?\n--answers--\nA future plan\n--feedback--\nI'm happy is not a future plan.\nA past event\n--feedback--\nThe expression doesn't refer to something from the past.\nA current emotion or feeling\nA general fact\n--feedback--\nThe phrase doesn't indicates a general fact.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 3.82\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 4.82,\n\"dialogue\": {\n\"text\": \"Hi, everyone. My name is Alice and I'm happy to be part of the team.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.32\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b400653813a1caa228aca.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f48b5370a5bfbb291cb5e28c89ddd23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b438144bd421e49e202e2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b438144bd421e49e202e2\ntitle: Task 4\nchallengeType: 22\ndashedName: task-4\n--description--\nIn English, many professions are named by adding er to the end of a word that describes what the person does.\nFor example, a programmer is someone who programs, a developer is someone who develops software or systems. Another example is a designer, who is a person that designs websites, graphics, or products.\nBy adding er to a verb, you create a noun that describes a person's job. It doesn´t apply to all professions but you'll see this pattern in many.\n--fillInTheBlank--\n--sentence--\nI'm a BLANK and I love creating BLANK that helps people in their daily activities.\n--blanks--\nprogrammer\n--feedback--\nProgram is a word that ends in consonant, vowel, consonant (r a m), in those cases what you want to do is to repeat the last consonant , in this case m, and add er. Now it should work.\nsoftware\n--feedback--\nThis word refers to the programs and other operating information used by a computer.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 4.44,\n\"finishTimestamp\": 8.60\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 5.16,\n\"dialogue\": {\n\"text\": \"I'm a programmer and I love creating software that helps people in their daily activities.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.66\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b438144bd421e49e202e2.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "67500972f03c9f76f21e4b4956b13221",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b44fd1219f01f3afa8fb1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b44fd1219f01f3afa8fb1\ntitle: Task 5\nchallengeType: 19\ndashedName: task-5\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhat is Alice's profession?\n--answers--\nShe is a teacher\n--feedback--\nAlice does not say she is a teacher. Listen again to her profession.\nShe is a programmer\nShe is a doctor\n--feedback--\nAlice does not say she is a doctor. Listen again to her profession.\nHe is a programmer\n--feedback--\nThe pronoun he is incorrect as Alice is speaking about herself.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 4.44,\n\"finishTimestamp\": 8.60\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 5.16,\n\"dialogue\": {\n\"text\": \"I'm a programmer and I love creating software that helps people in their daily activities.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.66\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b44fd1219f01f3afa8fb1.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cfe0692881111c5dd26cebff29653e39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5bd17d068521ee895631.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b5bd17d068521ee895631\ntitle: Task 6\nchallengeType: 22\ndashedName: task-6\n--description--\nDaily means something that happens every day. For example:\nI read the news daily means I read the news every day.\n--fillInTheBlank--\n--sentence--\nI'm a programmer and I love creating software that helps people in BLANK BLANK activities.\n--blanks--\ntheir\n--feedback--\nA possessive pronoun used to describe something that belongs to or is related to people. Third person plural.\ndaily\n--feedback--\nIt means something that happens every day.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 4.44,\n\"finishTimestamp\": 8.60\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 5.16,\n\"dialogue\": {\n\"text\": \"I'm a programmer and I love creating software that helps people in their daily activities.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.66\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5bd17d068521ee895631.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0e0bb7763a421c375998cf95f8211c35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5c45e603ca227abf904a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b5c45e603ca227abf904a\ntitle: Task 7\nchallengeType: 19\ndashedName: task-7\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhat kind of things does Alice like to create?\n--answers--\nFood recipes\n--feedback--\nAlice doesn't talk about food recipes.\nSoftware that helps people\nGardening tools\n--feedback--\nAlice doesn't talk about gardening tools.\nMusic albums\n--feedback--\nAlice doesn't talk about music production.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 4.44,\n\"finishTimestamp\": 8.60\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 5.16,\n\"dialogue\": {\n\"text\": \"I'm a programmer and I love creating software that helps people in their daily activities.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.66\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1345,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5c45e603ca227abf904a.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "50663513fb82f4d0f1c2466272466730",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\651dd5a46ffb500e3f2ce47b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 651dd5a46ffb500e3f2ce47b\ntitle: \"Dialogue 1: A Mobile Developer Joins the Team\"\nchallengeType: 21\ndashedName: dialogue-a-mobile-developer-joins-the-team\n--description--\nWatch the video below to understand the context of the upcoming lessons --assignment--\nWatch the video\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 }\n}\n],\n\"audio\": {\n\"filename\": \"1 2-1 mp3\",\n\"startTime\": 1\n},\n\"alwaysShowDialogue\": true\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"position\": { \"x\": 25, \"y\": 0, \"z\": 1 },\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 70, \"y\": 0, \"z\": 1 },\n\"startTime\": 0 5\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1 3,\n\"finishTime\": 5 2,\n\"dialogue\": {\n\"text\": \"Hi, everyone My name is Alice, and I'm happy to be part of the team \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 5 4,\n\"finishTime\": 7 4,\n\"dialogue\": {\n\"text\": \"I'm a programmer and I love creating software\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 7 4,\n\"finishTime\": 9 9,\n\"dialogue\": {\n\"text\": \"that helps people in their daily activities \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 10 1,\n\"finishTime\": 14 1,\n\"dialogue\": {\n\"text\": \"In my previous job, I developed mobile apps for small businesses \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 14 3,\n\"finishTime\": 16",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2920,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\651dd5a46ffb500e3f2ce47b.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5bfacf0c4b842235a015ba033c480066",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\651dd5a46ffb500e3f2ce47b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "4, \"dialogue\": { \"text\": \"I'm a programmer and I love creating software\", \"align\": \"left\" } }, { \"character\": \"Alice\", \"startTime\": 7 4, \"finishTime\": 9 9, \"dialogue\": { \"text\": \"that helps people in their daily activities \", \"align\": \"left\" } }, { \"character\": \"Alice\", \"startTime\": 10 1, \"finishTime\": 14 1, \"dialogue\": { \"text\": \"In my previous job, I developed mobile apps for small businesses \", \"align\": \"left\" } }, { \"character\": \"Alice\", \"startTime\": 14 3, \"finishTime\": 163,\n\"dialogue\": {\n\"text\": \"I really want to collaborate with you\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 16 3,\n\"finishTime\": 18 3,\n\"dialogue\": {\n\"text\": \"and to contribute to our projects here at the company \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 18 5,\n\"finishTime\": 20 5,\n\"dialogue\": {\n\"text\": \"It's nice to have you here, Alice \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 20 6,\n\"finishTime\": 23 3,\n\"dialogue\": {\n\"text\": \"I'm Bob, the project manager Welcome aboard \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 23 8,\n\"finishTime\": 26 8,\n\"dialogue\": {\n\"text\": \"I'm sure your experience will be of great help to us \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 },\n\"startTime\": 26 8\n},\n{\n\"character\": \"Alice\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 27 3\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2920,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\651dd5a46ffb500e3f2ce47b.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8342223f7e05f1c07c174f12142985d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5cec02f00e23028cdbd5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b5cec02f00e23028cdbd5\ntitle: Task 8\nchallengeType: 19\ndashedName: task-8\n--description--\nDaily activities refer to the things that people do on a regular basis in their everyday lives, such as eating, working, studying, or exercising.\n--questions--\n--text--\nWhat are daily activities?\n--answers--\nSpecial occasions\n--feedback--\nDaily activities do not refer to rare events.\nThings people do every day\nWeekend plans\n--feedback--\nDaily activities refer to everyday actions, not just weekends.\nTravel destinations\n--feedback--\nDaily activities are not places.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5cec02f00e23028cdbd5.md",
      "source_type": "git_repo"
    },
    "token_count": 140,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "87008a9f4b5ffed5ddd1a8a25e8f74e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5de322bdee236e353230.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b5de322bdee236e353230\ntitle: Task 9\nchallengeType: 19\ndashedName: task-9\n--description--\nYour previous job is the work you did before your current or most recent position. It refers to employment you had in the past. For example, if you used to work as a teacher and now you work as a programmer, your previous job was teacher.\n--questions--\n--text--\nWhat does previous job mean?\n--answers--\nA job you are currently doing\n--feedback--\nThe term previous indicates something from the past, not the present.\nA job you want in the future\n--feedback--\nThe term previous does not refer to future aspirations.\nA job you had in the past\nA job that is very challenging\n--feedback--\nPrevious is not about the difficulty of the job.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 9.14,\n\"finishTimestamp\": 12.58\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 4.44,\n\"dialogue\": {\n\"text\": \"In my previous job, I developed mobile apps for small businesses.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 4.94\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5de322bdee236e353230.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "213b76564a3f52425bed12abc59111b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5f2319bc2223f2fc408a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b5f2319bc2223f2fc408a\ntitle: Task 10\nchallengeType: 22\ndashedName: task-10\n--description--\nDevelop means to make or create something, especially something new. For example, someone might develop a new game or a website.\nMobile means something that can be moved or used on the go, like mobile phones or tablets. An app is short for application, a type of software designed to perform a specific task.\nSo, mobile apps are applications specifically created to run on mobile devices. These apps can do many things, like help you shop, learn a new language, or play games.\n--fillInTheBlank--\n--sentence--\nIn my previous job, I developed BLANK BLANK for small businesses.\n--blanks--\nmobile\n--feedback--\nThis word describes things that can be used while moving around, like smartphones.\napps\n--feedback--\nThis word is short for applications, which are types of software for specific tasks or uses. This word is in the plural, try to add s to the end of the word.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 9.14,\n\"finishTimestamp\": 12.58\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 4.44,\n\"dialogue\": {\n\"text\": \"In my previous job, I developed mobile apps for small businesses.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 4.94\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1901,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b5f2319bc2223f2fc408a.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6b8a5d45a47d9f9fdb8ba287531ec247",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b631cc34605266f81b9bb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b631cc34605266f81b9bb\ntitle: Task 13\nchallengeType: 19\ndashedName: task-13\n--description--\nDo you remember this definition?\n--questions--\n--text--\nWhat is a mobile app?\n--answers--\nA type of fruit\n--feedback--\nConsider the context of digital technology and how it relates to the term.\nA type of computer\n--feedback--\nThink about what runs on a device rather than the device itself.\nA software program for mobile devices\nA book about mobile phones\n--feedback--\nReflect on the difference between a physical object and digital software.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b631cc34605266f81b9bb.md",
      "source_type": "git_repo"
    },
    "token_count": 137,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f5e9aa645f310b8bfb6413ebb7ed1775",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b602d5bf54224a94cbfa6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b602d5bf54224a94cbfa6\ntitle: Task 11\nchallengeType: 22\ndashedName: task-11\n--description--\nSmall means not big, often with fewer employees or less money. For example: She works for a small company.\nLarge means big, usually with many employees or a lot of money. For instance, He got a job at a large corporation.\nA business means one company. Many businesses means several companies. Notice how -es was added to the word to make it plural.\n--fillInTheBlank--\n--sentence--\nIn my previous job, I developed mobile apps for BLANK BLANK.\n--blanks--\nsmall\n--feedback--\nDescribes the size of the businesses as not very big.\nbusinesses\n--feedback--\nThis word refers to companies or commercial organizations. It is in its plural form.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 9.14,\n\"finishTimestamp\": 12.58\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 4.44,\n\"dialogue\": {\n\"text\": \"In my previous job, I developed mobile apps for small businesses.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 4.94\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b602d5bf54224a94cbfa6.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7e057f964c64f7686772898ae5329d0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b64017820f626f6a092c2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b64017820f626f6a092c2\ntitle: Task 14\nchallengeType: 19\ndashedName: task-14\n--description--\nA small business is a company or enterprise that is typically independently owned and operated. It has relatively few employees and a smaller scale of operations compared to larger corporations.\n--questions--\n--text--\nWhat is a small business?\n--answers--\nA very large company\n--feedback--\nReflect on the size and scale differences between various types of businesses.\nA type of restaurant\n--feedback--\nConsider the broader range of businesses beyond specific sectors like restaurants.\nA small-scale company with a few employees\nA nonprofit organization\n--feedback--\nThink about the primary characteristics that define a small business's scale and operation.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 9.14,\n\"finishTimestamp\": 12.58\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 4.44,\n\"dialogue\": {\n\"text\": \"In my previous job, I developed mobile apps for small businesses.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 4.94\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1625,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b64017820f626f6a092c2.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "af55a3c2a2b316c7f180233196a3e87e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b615cdee8f12537d6f90c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b615cdee8f12537d6f90c\ntitle: Task 12\nchallengeType: 19\ndashedName: task-12\n--description--\nIn this task, you'll listen to Alice talking about her previous job. Pay attention to what she says about the kind of work she did.\n--questions--\n--text--\nWhat does Alice mention about her work in her previous job?\n--answers--\nShe created mobile apps for large corporations.\n--feedback--\nThe audio mentions small businesses, not large corporations.\nShe developed software for personal use.\n--feedback--\nThe audio doesn't mention personal use.\nShe worked on projects unrelated to programming.\n--feedback--\nShe clearly mentioned something that is related to programming.\nShe developed mobile apps for small businesses.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 9.14,\n\"finishTimestamp\": 12.58\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 4.44,\n\"dialogue\": {\n\"text\": \"In my previous job, I developed mobile apps for small businesses.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 4.94\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b615cdee8f12537d6f90c.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4038fc9e82bf54898c54b923fbbd7f90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b6531fad8572767c5b4dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b6531fad8572767c5b4dc\ntitle: Task 15\nchallengeType: 19\ndashedName: task-15\n--description--\nContribute means to give or add something, such as ideas, effort, or resources, to a cause, project, or group in order to help achieve a common goal. In a technological context, this could look like:\nShe contributes code to the open-source project every week.\nWe contribute our technical skills to develop the app.\n--questions--\n--text--\nWhat does contribute mean?\n--answers--\nTo take away from something\n--feedback--\nFocus on actions that add value or support to a group or project.\nTo give or add something to help with a project\nTo compete with others\n--feedback--\nThink about collaboration and support rather than competition.\nTo keep something a secret\n--feedback--\nReflect on the aspect of sharing or adding to a project or group.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 13.04,\n\"finishTimestamp\": 17.10\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 5.06,\n\"dialogue\": {\n\"text\": \"I really want to collaborate with you and to contribute to our projects here at the company.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.56\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1740,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b6531fad8572767c5b4dc.md",
      "source_type": "git_repo"
    },
    "token_count": 404,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dbd85542a5f7c89f74c9e6ae1caf3533",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b661cc0427227c7e7aec0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b661cc0427227c7e7aec0\ntitle: Task 16\nchallengeType: 19\ndashedName: task-16\n--description--\nFollowing the concept of contribute, let's explore how it applies specifically in technology projects. When someone contributes to a tech project, they might add code, ideas, or even help with documentation. Remember the examples from the previous task:\nHe contributes by testing new features in the app.\nThey contribute to the software's documentation.\n--questions--\n--text--\nIn the context of technology, what might contributing to a project involve?\n--answers--\nAdding code, testing features, or writing documentation\nOnly using the software for personal tasks\n--feedback--\nContributing involves actively adding value to the project, not just using it.\nAttending meetings without participating\n--feedback--\nContributing means actively participating or adding something, not just being present.\nIgnoring project updates\n--feedback--\nIgnoring updates is not contributing; contributing requires active involvement.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1109,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b661cc0427227c7e7aec0.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1b119dc29fa5567addc5faa8ae19c93d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b66c57499db2828adac5e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b66c57499db2828adac5e\ntitle: Task 17\nchallengeType: 19\ndashedName: task-17\n--description--\nTo collaborate means to work together with others to achieve a common goal, often involving shared responsibilities and teamwork. While contributing involves adding something to a project, collaborating emphasizes working together as a team. For example:\nIn our team, we collaborate by sharing ideas and responsibilities.\nCollaborating on the project means we all work together to solve problems.\n--questions--\n--text--\nWhat does to collaborate generally involve in a team setting?\n--answers--\nWorking individually without communication\n--feedback--\nThink about the importance of teamwork and interaction in collaboration.\nCompeting with team members to show superiority\n--feedback--\nCollaboration is about working together, not competing against each other.\nWorking together with others, sharing ideas and tasks\nFocusing only on personal goals\n--feedback--\nCollaboration involves collective goals rather than just personal ones.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b66c57499db2828adac5e.md",
      "source_type": "git_repo"
    },
    "token_count": 211,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9b6d07a88c7cfc540ba86eda5330009d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b674c711e5428985017ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b674c711e5428985017ca\ntitle: Task 18\nchallengeType: 22\ndashedName: task-18\n--description--\nListen to the sentence and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nI really want to BLANK with you and to BLANK to our projects here at the company.\n--blanks--\ncollaborate\n--feedback--\nThis word means to work jointly with others or together, especially in an intellectual endeavor.\ncontribute\n--feedback--\nThis word refers to giving or adding something to a project or cause to help achieve a common goal.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 13.04,\n\"finishTimestamp\": 17.10\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 5.06,\n\"dialogue\": {\n\"text\": \"I really want to collaborate with you and to contribute to our projects here at the company.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.56\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b674c711e5428985017ca.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7d6abd146595b9d4eabe5006c3a55ce7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b67daf0b2d128ece96345.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b67daf0b2d128ece96345\ntitle: Task 19\nchallengeType: 19\ndashedName: task-19\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nHow does Alice express her desire to collaborate with the team?\n--answers--\nShe wants to work alone on her projects.\n--feedback--\nReflect on how working alone contrasts with the idea of collaboration.\nShe prefers not to contribute to the team's projects.\n--feedback--\nConsider what it means to contribute to a team, and how this contrasts with not wanting to contribute.\nShe wants to collaborate and contribute to projects.\nShe wants to keep her skills a secret.\n--feedback--\nThink about how sharing skills and knowledge relates to the concepts of collaboration and contribution.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 13.04,\n\"finishTimestamp\": 17.10\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 5.06,\n\"dialogue\": {\n\"text\": \"I really want to collaborate with you and to contribute to our projects here at the company.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.56\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1760,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b67daf0b2d128ece96345.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e96396dbf71c0c9c045c12becb55a030",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b6940d1ad7829b4d9a918.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b6940d1ad7829b4d9a918\ntitle: Task 21\nchallengeType: 22\ndashedName: task-21\n--description--\nIn this task, listen to the sentence and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nIt's BLANK to BLANK you here, Alice. I'm Bob, the project BLANK. Welcome aboard. I'm sure your BLANK will be of great help to us.\n--blanks--\nnice\n--feedback--\nThis word is often used to express pleasure or satisfaction in greetings.\nhave\n--feedback--\nThink about the usage of this verb in expressions of possession or presence.\nmanager\n--feedback--\nThis is a common term for someone who oversees and directs a project or team.\nexperience\n--feedback--\nRefers to the knowledge or skill acquired by a period of involvement in a field.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 17.72,\n\"finishTimestamp\": 25.26\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 2.44,\n\"dialogue\": {\n\"text\": \"It's nice to have you here, Alice.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 2.46,\n\"finishTime\": 5.26,\n\"dialogue\": {\n\"text\": \"I'm Bob, the project manager. Welcome aboard.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 5.7,\n\"finishTime\": 8.54,\n\"dialogue\": {\n\"text\": \"I'm sure your experience will be of great help to us.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 9.04\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b6940d1ad7829b4d9a918.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "90fc5495dea1d1c8fafcab724fa72f09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b68caf6debb2975503948.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b68caf6debb2975503948\ntitle: Task 20\nchallengeType: 19\ndashedName: task-20\n--description--\nIt's nice to is used to express a positive sentiment or feeling about something or someone.\n--questions--\n--text--\nWhat is Bob expressing in his sentence?\n--answers--\nA negative opinion about Alice's presence\n--feedback--\nThink about how the phrase nice to usually conveys positive feelings.\nA neutral statement about Alice's presence\n--feedback--\nConsider the warmth usually conveyed by the phrase nice to.\nAn apology for Alice's presence\n--feedback--\nReflect on the purpose of the phrase nice to in welcoming contexts.\nA positive and welcoming sentiment about Alice's presence\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 17.72,\n\"finishTimestamp\": 18.98\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 2.26,\n\"dialogue\": {\n\"text\": \"It's nice to have you here, Alice.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 2.76\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b68caf6debb2975503948.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4bf1b61b203b16a40823682e34891e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b6a7dd8fb2f2a52da24f5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657b6a7dd8fb2f2a52da24f5\ntitle: Task 22\nchallengeType: 19\ndashedName: task-22\n--description--\nThis task focuses on understanding the implication of Bob's statement about Alice's experience.\n--questions--\n--text--\nWhat does Bob mean with his sentence?\n--answers--\nBob is confident that Alice's past work and skills will contribute positively to the team.\nBob is unsure about Alice's ability to assist the team.\n--feedback--\nConsider the phrase will be of great help and what it suggests about Bob's confidence in Alice's abilities.\nBob thinks Alice needs more experience to be helpful.\n--feedback--\nReflect on the meaning of your experience in the context of Alice's current abilities.\nBob feels Alice's experience is irrelevant to the team's needs.\n--feedback--\nThink about the positive connotation of the phrase will be of great help.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-1.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 22.42,\n\"finishTimestamp\": 25.26\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.84,\n\"dialogue\": {\n\"text\": \"I'm sure your experience will be of great help to us.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 4.34\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1775,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657b6a7dd8fb2f2a52da24f5.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "49eda99816bcee43331ab4cc9944964a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c9900c2df3b6ffdd86129.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657c9900c2df3b6ffdd86129\ntitle: Task 24\nchallengeType: 22\ndashedName: task-24\n--description--\nIntroductions are important when a new team member joins. It helps everyone get to know each other and makes the new person feel welcome.\n--fillInTheBlank--\n--sentence--\nAlright, team. This is Alice's BLANK day with us, so please let me BLANK you BLANK BLANK her.\n--blanks--\nfirst\n--feedback--\nThis word describes something that happens before all others in time or order.\nintroduce\n--feedback--\nThis word means to present someone by name to another in order to establish an acquaintance.\nall\n--feedback--\nThis word is used to refer to the whole number or entire sum of the team.\nto\n--feedback--\nThis preposition is often used to indicate direction or contact.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 6.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.64,\n\"dialogue\": {\n\"text\": \"All right team this is Alice's first day with us\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4.64,\n\"finishTime\": 7.18,\n\"dialogue\": {\n\"text\": \"so please let me introduce you all to her.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 7.68\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1918,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c9900c2df3b6ffdd86129.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "79d63c13d0dcdae95550dd51ed93af43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c99c084204371fcb8d6a8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657c99c084204371fcb8d6a8\ntitle: Task 25\nchallengeType: 22\ndashedName: task-25\n--description--\nYou can use object pronouns to replace nouns in a sentence. This avoids repetition and makes the sentence sound more natural. Listen for the object pronouns Bob uses in this audio.\n--fillInTheBlank--\n--sentence--\nAlright, team. This is Alice's first day with BLANK , so please let BLANK introduce BLANK all to BLANK.\n--blanks--\nus\n--feedback--\nThis pronoun is used as the object to refer to the speaker and one or more other people.\nme\n--feedback--\nThis pronoun is used by the speaker to refer to themselves as the object of a verb or preposition.\nyou\n--feedback--\nThis pronoun is used to refer to the person or people that the speaker is addressing.\nher\n--feedback--\nThis pronoun is used to refer to a female person or animal previously mentioned or easily identified.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 6.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.64,\n\"dialogue\": {\n\"text\": \"All right team this is Alice's first day with us\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4.64,\n\"finishTime\": 7.18,\n\"dialogue\": {\n\"text\": \"so please let me introduce you all to her.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 7.68\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2043,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c99c084204371fcb8d6a8.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b1ae4368dd530f1e9f62a79c0e5bc1d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca06716e21b803ffb55d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ca06716e21b803ffb55d5\ntitle: Task 26\nchallengeType: 19\ndashedName: task-26\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nIn Bob's sentence, who does the pronoun her refer to?\n--answers--\nThe team\n--feedback--\nHer is not used for a group like the team.\nAlice\nBob\n--feedback--\nIn this context, Her is not for Bob.\nYou\n--feedback--\nHer does not refer to the listener.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 6.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.64,\n\"dialogue\": {\n\"text\": \"All right team this is Alice's first day with us\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4.64,\n\"finishTime\": 7.18,\n\"dialogue\": {\n\"text\": \"so please let me introduce you all to her.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 7.68\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1591,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca06716e21b803ffb55d5.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "548e3b2ccc9a1fcd5c7fc5f22846a3b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca33bb1f197812c1a358b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ca33bb1f197812c1a358b\ntitle: Task 27\nchallengeType: 19\ndashedName: task-27\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nIn Bob's sentence, who does the pronoun us refer to?\n--answers--\nAlice\n--feedback--\nUs does not refer to a single person like Alice.\nBob and the team\nThe listeners\n--feedback--\nUs does not directly refer to the audience listening to the conversation.\nThe new project\n--feedback--\nUs refers to people, not objects or projects.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 6.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.64,\n\"dialogue\": {\n\"text\": \"All right team this is Alice's first day with us\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4.64,\n\"finishTime\": 7.18,\n\"dialogue\": {\n\"text\": \"so please let me introduce you all to her.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 7.68\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca33bb1f197812c1a358b.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9e6033625c80cf9b66b62c1902c611d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca36eacc797817451ece6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ca36eacc797817451ece6\ntitle: Task 28\nchallengeType: 19\ndashedName: task-28\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nIn Bob's sentence, who does the pronouns me and you refer to?\n--answers--\nMe refers to Bob, and You to the listeners\nMe refers to the listeners, and You to Alice\n--feedback--\nIn this context, me does not refer to the listener, and you does not refer to Alice.\nMe refers to Alice, and You refers to Bob\n--feedback--\nMe and you are not used to refer to Alice and Bob in this way.\nMe refers to the team, and You to the project\n--feedback--\nMe and you are not used to refer to a group or an object.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 6.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.64,\n\"dialogue\": {\n\"text\": \"All right team this is Alice's first day with us\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4.64,\n\"finishTime\": 7.18,\n\"dialogue\": {\n\"text\": \"so please let me introduce you all to her.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 7.68\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1867,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca36eacc797817451ece6.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "03730454a9428b332ffd1ebf1b40df0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca45e1fc9398243722c8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ca45e1fc9398243722c8c\ntitle: Task 29\nchallengeType: 19\ndashedName: task-29\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhich words in Bob's sentence indicate that he is talking to a group of people?\n--answers--\nAlice\n--feedback--\nWhile Alice is mentioned, this word doesn't indicate that Bob is speaking to a group.\nfirst day\n--feedback--\nFirst day refers to a period of time, not to a group of people.\nintroduce\n--feedback--\nIntroduce is an action but does not by itself indicate that Bob is addressing a group.\nteam and you all\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 6.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.64,\n\"dialogue\": {\n\"text\": \"All right team this is Alice's first day with us\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4.64,\n\"finishTime\": 7.18,\n\"dialogue\": {\n\"text\": \"so please let me introduce you all to her.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 7.68\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca45e1fc9398243722c8c.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "654a688dc89b6af02877b86d25133e55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca50a95d1c3828ee5a991.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ca50a95d1c3828ee5a991\ntitle: Task 30\nchallengeType: 19\ndashedName: task-30\n--description--\nThe expression to see new faces joining the team is often used in a professional or group setting. It means that someone is happy or pleased to welcome new members to a group or team. New faces is a friendly way to refer to new people or members.\n--questions--\n--text--\nWhat does Bob mean in his sentence?\n--answers--\nHe is looking forward to a team meeting.\n--feedback--\nThis option does not capture the meaning of welcoming new members.\nHe is pleased with the current team members.\n--feedback--\nWhile this might be true, it doesn't directly relate to the phrase about new members.\nHe is happy to welcome new members to the team.\nHe is planning to introduce new rules to the team.\n--feedback--\nThe phrase refers to welcoming people, not introducing new rules.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 6.26,\n\"finishTimestamp\": 11.82\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 1.3,\n\"dialogue\": {\n\"text\": \"Well I'm Bob your project manager.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1.3,\n\"finishTime\": 6.56,\n\"dialogue\": {\n\"text\": \"I'm really happy to see new faces joining the team.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 7.06\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2031,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca50a95d1c3828ee5a991.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "84835762c24c9043f5a469c340bf4217",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca59e6e559782e4c10056.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ca59e6e559782e4c10056\ntitle: Task 31\nchallengeType: 22\ndashedName: task-31\n--description--\nIn companies, job titles often include words that indicate the level of seniority. Senior means having a higher level or more experience in a role. For instance, a senior software developer usually has more experience than a software developer.\nOther common terms include junior, for less experienced roles, and lead or head, for top-level positions. Here are some examples:\nJunior Accountant: An entry-level position in accounting.\nLead Engineer: A top-level engineering role with leadership responsibilities.\nSenior Manager: A managerial role with significant experience.\n--fillInTheBlank--\n--sentence--\nThis is Sarah, the BLANK software developer.\n--blanks--\nsenior\n--feedback--\nUsed here to indicate that Sarah has more experience and expertise in her role as a software developer.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Sarah\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 12.2,\n\"finishTimestamp\": 14.62\n}\n},\n\"commands\": [\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.42,\n\"dialogue\": {\n\"text\": \"This is Sarah the senior software developer.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 3.92\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1776,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca59e6e559782e4c10056.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d4fb20dadf14ac181f26a46e1acde0b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca8e65f9c2c836eecd834.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ca8e65f9c2c836eecd834\ntitle: Task 32\nchallengeType: 19\ndashedName: task-32\n--description--\nThe phrase has been is used in English to talk about something that started in the past and is still happening now. It is often used with expressions of time. For example:\nShe has been with the company for ten years means that this person started working at the company ten years ago and is still working there.\n--questions--\n--text--\nWhat does Bob say about the time Sarah is in the company?\n--answers--\nShe started working at the company five years ago and is still there.\nShe worked at the company five years ago but left.\n--feedback--\nRemember, has been indicates something that started in the past and continues to the present.\nShe has been working at different companies over five years.\n--feedback--\nThe phrase specifically mentions she has been with the same company for five years.\nShe visits the company every five years.\n--feedback--\nHas been with the company refers to continuous employment, not periodic visits.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Sarah\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 14.96,\n\"finishTimestamp\": 18.60\n}\n},\n\"commands\": [\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.64,\n\"dialogue\": {\n\"text\": \"She's been with the company for five years now working on several projects.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 5.14\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2007,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca8e65f9c2c836eecd834.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "90227b28a564b09219c29943412f1878",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca996f3fdf683f408f632.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ca996f3fdf683f408f632\ntitle: Task 33\nchallengeType: 19\ndashedName: task-33\n--description--\nSeveral is a word used to indicate an unspecified quantity that is more than two but not many. It's often used when the exact number is not important or not known.\n--questions--\n--text--\nWhat does several imply in Bob's phrase?\n--answers--\nWorking on two projects.\n--feedback--\nSeveral usually means more than two.\nWorking on a large number of projects.\n--feedback--\nSeveral implies more than a few but not a very large number.\nWorking on a few projects, more than two but not many.\nWorking on one major project.\n--feedback--\nSeveral indicates multiple items, not just one.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Sarah\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 14.96,\n\"finishTimestamp\": 18.60\n}\n},\n\"commands\": [\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.64,\n\"dialogue\": {\n\"text\": \"She's been with the company for five years now working on several projects.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 5.14\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1660,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ca996f3fdf683f408f632.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "25f08c0dd14245ad33f449cb20856c14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657caa4012f1cf846dcaa619.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657caa4012f1cf846dcaa619\ntitle: Task 34\nchallengeType: 19\ndashedName: task-34\n--description--\nA database administrator is a professional responsible for managing and maintaining databases. They ensure that data is secure (safe from unauthorized access) and efficient (easily accessible and usable). This role is crucial in any organization that handles large amounts of data.\n--questions--\n--text--\nAccording to Bob what is John's main responsibility?\n--answers--\nDesigning websites and graphics.\n--feedback--\nThis is not related to managing databases.\nMaking sure their data is secure and efficient.\nTeaching database courses.\n--feedback--\nWhile some might teach, it's not the primary responsibility mentioned.\nSelling database software.\n--feedback--\nThis role is more about management, not sales.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Mark\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 19.18,\n\"finishTimestamp\": 26.58\n}\n},\n\"commands\": [\n{\n\"character\": \"Mark\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.34,\n\"dialogue\": {\n\"text\": \"This is John the database administrator.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 3.34,\n\"finishTime\": 5.34,\n\"dialogue\": {\n\"text\": \"He's been here for three years.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 5.34,\n\"finishTime\": 8.4,\n\"dialogue\": {\n\"text\": \"He makes sure that our data is secure and efficient.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Mark\",\n\"opacity\": 0,\n\"startTime\": 8.9\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2205,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657caa4012f1cf846dcaa619.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d3fe666b9fe1dc5c9365d964925d2f76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657caec5163c6c85e5b31284.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657caec5163c6c85e5b31284\ntitle: Task 36\nchallengeType: 22\ndashedName: task-36\n--description--\nHe's can be a short form for he has or he is. You can understand which one it is by looking at the context. When he's is followed by a verb in the past participle (like been, done, seen), it means he has. For example:\nHe's been working means he has been working.\nIf he's is followed by an adjective or a present participle (like tired, going, sleeping), it means he is. For example:\nHe's tired means he is tired. Understanding this helps you know exactly what someone means when they say he's.\n--fillInTheBlank--\n--sentence--\nThis is John, the database administrator. BLANK been here for three years.\n--blanks--\nHe's\n--feedback--\nA contraction indicating the duration of time John has been at the company. The first letter should be capitalized.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Mark\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 19.18,\n\"finishTimestamp\": 23.52\n}\n},\n\"commands\": [\n{\n\"character\": \"Mark\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.34,\n\"dialogue\": {\n\"text\": \"This is John the database administrator.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 3.34,\n\"finishTime\": 5.34,\n\"dialogue\": {\n\"text\": \"He's been here for three years.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Mark\",\n\"opacity\": 0,\n\"startTime\": 5.84\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657caec5163c6c85e5b31284.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "01faf07012e95eb0aba10fa5f541c4fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cad90d6745e85569cdc06.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cad90d6745e85569cdc06\ntitle: Task 35\nchallengeType: 22\ndashedName: task-35\n--description--\nIn the context of database management, secure means keeping data safe from unauthorized access or cyber threats. Efficient refers to how well the data is managed and used, ensuring it is easily accessible and performs well.\n--fillInTheBlank--\n--sentence--\nHe makes sure our data is BLANK and BLANK.\n--blanks--\nsecure\n--feedback--\nThis term refers to the safety and protection of data.\nefficient\n--feedback--\nThis word describes how well the data is managed for performance and accessibility.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Mark\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 19.18,\n\"finishTimestamp\": 26.58\n}\n},\n\"commands\": [\n{\n\"character\": \"Mark\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.34,\n\"dialogue\": {\n\"text\": \"This is John the database administrator.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 3.34,\n\"finishTime\": 5.34,\n\"dialogue\": {\n\"text\": \"He's been here for three years.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 5.34,\n\"finishTime\": 8.4,\n\"dialogue\": {\n\"text\": \"He makes sure that our data is secure and efficient.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Mark\",\n\"opacity\": 0,\n\"startTime\": 8.9\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1958,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cad90d6745e85569cdc06.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0a5fd85614dc5a26c521bbfe49e00c9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cafc142a867006734c3ed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cafc142a867006734c3ed\ntitle: Task 37\nchallengeType: 19\ndashedName: task-37\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nHow long has John been working as a database administrator at the company?\n--answers--\nOne year\n--feedback--\nListen carefully to the duration mentioned in the audio.\nTwo years\n--feedback--\nThe duration mentioned is longer than two years.\nFive years\n--feedback--\nThe duration mentioned is not as long as five years.\nThree years\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Mark\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 19.18,\n\"finishTimestamp\": 23.52\n}\n},\n\"commands\": [\n{\n\"character\": \"Mark\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.34,\n\"dialogue\": {\n\"text\": \"This is John the database administrator.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 3.34,\n\"finishTime\": 5.34,\n\"dialogue\": {\n\"text\": \"He's been here for three years.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Mark\",\n\"opacity\": 0,\n\"startTime\": 5.84\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cafc142a867006734c3ed.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5c69cfc2a8daa0c6aeccdacf3f651204",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccd18f62d4c0292a97808.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ccd18f62d4c0292a97808\ntitle: Task 38\nchallengeType: 19\ndashedName: task-38\n--description--\nUX stands for User Experience, and UI stands for User Interface. A UX/UI designer works on designing websites or applications to make them easy and pleasant to use.\nThe UX part focuses on the overall feel of the experience, while UI focuses on the specific layout and design of the interface.\n--questions--\n--text--\nWhat is the main responsibility of a UX/UI designer like Linda?\n--answers--\nManaging company finances.\n--feedback--\nThis is not related to UX/UI design, which is about creating user-friendly digital products.\nDesigning user-friendly websites and applications.\nTeaching computer programming.\n--feedback--\nUX/UI design is different from teaching programming; it's about designing digital interfaces.\nOrganizing company events.\n--feedback--\nOrganizing events is not typically a responsibility of a UX/UI designer.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 27.18,\n\"finishTimestamp\": 30.38\n}\n},\n\"commands\": [\n{\n\"character\": \"Linda\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.2,\n\"dialogue\": {\n\"text\": \"Finally this is Linda our UX UI designer.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Linda\",\n\"opacity\": 0,\n\"startTime\": 4.7\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1789,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccd18f62d4c0292a97808.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75c9da9f042f723e410ef8ab28cee24b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccd8e0b8383034fa1be0b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ccd8e0b8383034fa1be0b\ntitle: Task 39\nchallengeType: 22\ndashedName: task-39\n--description--\nJoin and joined are different forms of the same verb. Join is the base form, used for the present tense or imperative.\nJoined is the past tense, used for actions completed in the past.\n--fillInTheBlank--\n--sentence--\nShe BLANK the team last year.\n--blanks--\njoined\n--feedback--\nThe past tense of join, appropriate for talking about something that happened in the past.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 27.18,\n\"finishTimestamp\": 32.24\n}\n},\n\"commands\": [\n{\n\"character\": \"Linda\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 6.6,\n\"dialogue\": {\n\"text\": \"Finally this is Linda our UX UI designer. She joined the team last year.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Linda\",\n\"opacity\": 0,\n\"startTime\": 7.1\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccd8e0b8383034fa1be0b.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ee2c18a05e325edbc2094a65949dd2b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccdeb0919a803c00c8cbd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ccdeb0919a803c00c8cbd\ntitle: Task 40\nchallengeType: 19\ndashedName: task-40\n--description--\nLast year refers to the year before the current one. For example, if it is 2043 now, last year was 2042. This year refers to the current year, 2043 in this example.\nNext year will be the year after the current one, which would be 2044 in this case. Understanding these expressions helps in placing events correctly in time.\n--questions--\n--text--\nWhen did Linda join the team?\n--answers--\nThis year.\n--feedback--\nThe expression last year refers to the year before the current one, not this year.\nNext year.\n--feedback--\nLast year means the year before the current year.\nLast year.\nFive years ago.\n--feedback--\nLast year indicates a more recent time than five years ago.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 27.18,\n\"finishTimestamp\": 32.24\n}\n},\n\"commands\": [\n{\n\"character\": \"Linda\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 6.6,\n\"dialogue\": {\n\"text\": \"Finally this is Linda our UX UI designer. She joined the team last year.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Linda\",\n\"opacity\": 0,\n\"startTime\": 7.1\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1760,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccdeb0919a803c00c8cbd.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ee94f58824b158e40025323073d386df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccee0cbd78d044dfe4a77.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ccee0cbd78d044dfe4a77\ntitle: Task 41\nchallengeType: 22\ndashedName: task-41\n--description--\nIn the context of UX/UI design, user-friendly refers to something that is easy and pleasant to use, especially digital products like websites or apps.\nAn interface is the part of a computer system or program that users interact with. These terms are key in understanding what makes a good design from the user's perspective.\n--fillInTheBlank--\n--sentence--\nShe loves creating user-BLANK BLANK.\n--blanks--\nfriendly\n--feedback--\nThis term describes products that are easy and pleasant for people to use.\ninterfaces\n--feedback--\nThis term refers to the parts of computer systems or programs that people use or interact with. It is in plural form.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 27.18,\n\"finishTimestamp\": 34.84\n}\n},\n\"commands\": [\n{\n\"character\": \"Linda\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.2,\n\"dialogue\": {\n\"text\": \"Finally this is Linda our UX UI designer.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4.2,\n\"finishTime\": 8.2,\n\"dialogue\": {\n\"text\": \"She joined the team last year. She loves creating user-friendly interfaces.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Linda\",\n\"opacity\": 0,\n\"startTime\": 8.7\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccee0cbd78d044dfe4a77.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5db67de4744c1263eb5bd8614ce65d09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccf3ab9ef2604c6ba696f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ccf3ab9ef2604c6ba696f\ntitle: Task 42\nchallengeType: 19\ndashedName: task-42\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhich of the following statements is true based on the audio about Linda?\n--answers--\nShe started working with the team this year.\n--feedback--\nRemember, the dialogue mentioned when Linda joined the team.\nShe is responsible for financial management in the company.\n--feedback--\nConsider Linda's role as mentioned in the dialogue.\nShe has been with the team for five years.\n--feedback--\nRecall the specific time frame mentioned about Linda's tenure with the team.\nShe creates user-friendly interfaces and joined the team last year.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 27.18,\n\"finishTimestamp\": 34.84\n}\n},\n\"commands\": [\n{\n\"character\": \"Linda\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.2,\n\"dialogue\": {\n\"text\": \"Finally this is Linda our UX UI designer.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4.2,\n\"finishTime\": 8.2,\n\"dialogue\": {\n\"text\": \"She joined the team last year. She loves creating user-friendly interfaces.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Linda\",\n\"opacity\": 0,\n\"startTime\": 8.7\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1926,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccf3ab9ef2604c6ba696f.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f3b136951e0b5c6b7e0d96ec26144982",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccfa7eeb47305177d4a45.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ccfa7eeb47305177d4a45\ntitle: Task 43\nchallengeType: 19\ndashedName: task-43\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhat is Bob inviting the team to do?\n--answers--\nTo leave the meeting.\n--feedback--\nThis does not match the intent of welcoming a new team member.\nTo start working immediately.\n--feedback--\nThe focus is on welcoming a new member, not beginning work.\nTo welcome Alice to the team.\nTo finish their projects.\n--feedback--\nThe statement is about introducing a new member, not about project completion.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 35.72,\n\"finishTimestamp\": 38.04\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.32,\n\"dialogue\": {\n\"text\": \"Everybody let's welcome Alice to the team.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 3.82\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1471,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ccfa7eeb47305177d4a45.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2ac4a792ca8ba854b21b17d7c860893f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657c836198f77668f5cfd122\ntitle: \"Dialogue 2: Introducing the New Junior Developer\"\nchallengeType: 21\ndashedName: dialogue-introducing-the-new-junior-developer\n--description--\nWatch the video below to understand the context of the upcoming lessons --assignment--\nWatch the video --scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Mark\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Sarah\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 }\n}\n],\n\"audio\": {\n\"filename\": \"1 2-2 mp3\",\n\"startTime\": 1\n},\n\"alwaysShowDialogue\": true\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"position\": { \"x\": 15, \"y\": 0, \"z\": 1 },\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 30, \"y\": 0, \"z\": 1 },\n\"startTime\": 0 5\n},{\n\"character\": \"Linda\",\n\"position\": { \"x\": 55, \"y\": 0, \"z\": 1 },\n\"startTime\": 0 6\n},{\n\"character\": \"Mark\",\n\"position\": { \"x\": 85, \"y\": 0, \"z\": 1 },\n\"startTime\": 0 7\n},{\n\"character\": \"Sarah\",\n\"position\": { \"x\": 70, \"y\": 0, \"z\": 1 },\n\"startTime\": 0 8\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1 3,\n\"finishTime\": 2 3,\n\"dialogue\": {\n\"text\": \"Alright, team",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "332590316e04aa77756e2d60a9bd9603",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "}, { \"character\": \"Bob\", \"position\": { \"x\": 30, \"y\": 0, \"z\": 1 }, \"startTime\": 0 5 },{ \"character\": \"Linda\", \"position\": { \"x\": 55, \"y\": 0, \"z\": 1 }, \"startTime\": 0 6 },{ \"character\": \"Mark\", \"position\": { \"x\": 85, \"y\": 0, \"z\": 1 }, \"startTime\": 0 7 },{ \"character\": \"Sarah\", \"position\": { \"x\": 70, \"y\": 0, \"z\": 1 }, \"startTime\": 0 8 }, { \"character\": \"Bob\", \"startTime\": 1 3, \"finishTime\": 2 3, \"dialogue\": { \"text\": \"Alright, team\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 2 5,\n\"finishTime\": 7 2,\n\"dialogue\": {\n\"text\": \"This is Alice's first day with us, so please let me introduce you all to her \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 7 4,\n\"finishTime\": 9 9,\n\"dialogue\": {\n\"text\": \"Well, I'm Bob, your project manager \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 10 1,\n\"finishTime\": 13 2,\n\"dialogue\": {\n\"text\": \"I'm really happy to see new faces joining the team \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Linda\",\n\"opacity\": 0,\n\"startTime\": 13 3\n},\n{\n\"character\": \"Mark\",\n\"opacity\": 0,\n\"startTime\": 13 3\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 13 3,\n\"finishTime\": 15 8,\n\"dialogue\": {\n\"text\": \"This is Sarah, the senior software developer \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 15 9,\n\"finishTime\": 19 9,\n\"dialogue\": {\n\"text\": \"She has been with the company for five years now, working on several projects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "75482e266d625589d8335fa76478545e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "joining the team \", \"align\": \"left\" } }, { \"character\": \"Linda\", \"opacity\": 0, \"startTime\": 13 3 }, { \"character\": \"Mark\", \"opacity\": 0, \"startTime\": 13 3 }, { \"character\": \"Bob\", \"startTime\": 13 3, \"finishTime\": 15 8, \"dialogue\": { \"text\": \"This is Sarah, the senior software developer \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"startTime\": 15 9, \"finishTime\": 19 9, \"dialogue\": { \"text\": \"She has been with the company for five years now, working on several projects\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 19 9\n},\n{\n\"character\": \"Mark\",\n\"opacity\": 1,\n\"startTime\": 19 9\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 20 3,\n\"finishTime\": 22 8,\n\"dialogue\": {\n\"text\": \"This is John, the database administrator \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 23,\n\"finishTime\": 24 9,\n\"dialogue\": {\n\"text\": \"He's been here for three years \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 25 1,\n\"finishTime\": 28 1,\n\"dialogue\": {\n\"text\": \"He makes sure our data is secure and efficient \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Mark\",\n\"opacity\": 0,\n\"startTime\": 28 1\n},\n{\n\"character\": \"Linda\",\n\"opacity\": 1,\n\"startTime\": 28 1\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 28 3,\n\"finishTime\": 31 6,\n\"dialogue\": {\n\"text\": \"Finally, this is Linda, our UX/UI designer \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 31 8,\n\"finishTime\": 33 6,\n\"dialogue\": {\n\"text\": \"She joined the team last year \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 33 8,\n\"finishTime\": 36",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "c82b88a189f436fd4352d2332826b461",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"left\" } }, { \"character\": \"Mark\", \"opacity\": 0, \"startTime\": 28 1 }, { \"character\": \"Linda\", \"opacity\": 1, \"startTime\": 28 1 }, { \"character\": \"Bob\", \"startTime\": 28 3, \"finishTime\": 31 6, \"dialogue\": { \"text\": \"Finally, this is Linda, our UX/UI designer \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"startTime\": 31 8, \"finishTime\": 33 6, \"dialogue\": { \"text\": \"She joined the team last year \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"startTime\": 33 8, \"finishTime\": 363,\n\"dialogue\": {\n\"text\": \"She loves creating user-friendly interfaces \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 36 3\n},\n{\n\"character\": \"Mark\",\n\"opacity\": 1,\n\"startTime\": 36 3\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 36 5,\n\"finishTime\": 39,\n\"dialogue\": {\n\"text\": \"Everybody, let's welcome Alice to the team \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 40,\n\"finishTime\": 41 8,\n\"dialogue\": {\n\"text\": \"Great Thanks, everybody \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 42,\n\"finishTime\": 45 7,\n\"dialogue\": {\n\"text\": \"Well, I'm Alice I'm starting as a junior developer today \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 46 2,\n\"finishTime\": 50 2,\n\"dialogue\": {\n\"text\": \"I really like learning new things and I can't wait to start contributing to our projects \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Alice\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 50",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "d8d1498b2931d4a1f8f3b0d05bdf4727",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"right\" } }, { \"character\": \"Alice\", \"startTime\": 42, \"finishTime\": 45 7, \"dialogue\": { \"text\": \"Well, I'm Alice I'm starting as a junior developer today \", \"align\": \"right\" } }, { \"character\": \"Alice\", \"startTime\": 46 2, \"finishTime\": 50 2, \"dialogue\": { \"text\": \"I really like learning new things and I can't wait to start contributing to our projects \", \"align\": \"right\" } }, { \"character\": \"Alice\", \"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }, \"startTime\": 502\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 50 7\n},\n{\n\"character\": \"Mark\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 },\n\"startTime\": 50 8\n},\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 },\n\"startTime\": 51\n},\n{\n\"character\": \"Sarah\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 },\n\"startTime\": 51 2\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657c836198f77668f5cfd122.md",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a3494e009128eed4e68a991c998ca3f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd0e81302a205cfbc10a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd0e81302a205cfbc10a2\ntitle: Task 44\nchallengeType: 22\ndashedName: task-44\n--description--\nIn a professional self-introduction, it's common to state your name and your role. This structure Alice uses is simple but very effective.\n--fillInTheBlank--\n--sentence--\nGreat! Thanks, everybody! Well, BLANK Alice. I'm starting as a BLANK developer today.\n--blanks--\nI'm\n--feedback--\nThis structure is used before people mention their names.\njunior\n--feedback--\nHere, you state your role or position.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 39.50,\n\"finishTimestamp\": 44.20\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 3.72,\n\"dialogue\": {\n\"text\": \"Great thanks everybody. Well I'm Alice.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 3.72,\n\"finishTime\": 5.70,\n\"dialogue\": {\n\"text\": \"I'm starting as a junior developer today.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 6.20\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd0e81302a205cfbc10a2.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b15d627fdfe0496ac02abfaa73baac52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd2ab46d95e075065d952.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd2ab46d95e075065d952\ntitle: Task 46\nchallengeType: 22\ndashedName: task-46\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nI'm starting as a BLANK BLANK today. I really like learning new things and can't wait to start BLANK to our projects.\n--blanks--\njunior\n--feedback--\nThis term indicates the level or rank within a job role.\ndeveloper\n--feedback--\nThis word specifies the professional role or job title.\ncontributing\n--feedback--\nThis word refers to the act of adding value or participating in team projects.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 42.38,\n\"finishTimestamp\": 48.82\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 2.82,\n\"dialogue\": {\n\"text\": \"I'm starting as a junior developer today.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 2.83,\n\"finishTime\": 4.51,\n\"dialogue\": {\n\"text\": \"I really like learning new things\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 4.51,\n\"finishTime\": 7.44,\n\"dialogue\": {\n\"text\": \"and can't wait to start contributing to our projects.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 7.94\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd2ab46d95e075065d952.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d70b09082bcef7b3d44ef4c06b53ef7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd1cdaa5260067b6fb93e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd1cdaa5260067b6fb93e\ntitle: Task 45\nchallengeType: 19\ndashedName: task-45\n--description--\nPhrases like I really like [subject], with subject being a subject you like, or I can't wait to do [activity], with activity being an activity you want to do, are sentences that show your excitement and interest about something.\n--questions--\n--text--\nWhat does Alice express about her interests and enthusiasm in her introduction?\n--answers--\nShe prefers working alone and not in a team.\n--feedback--\nAlice's introduction indicates her eagerness to learn and contribute, not a preference for working alone.\nShe wants to learn new things and start contributing to the projects.\nShe is only interested in senior developer roles.\n--feedback--\nAlice mentions she is starting as a junior developer, indicating an openness to her current role.\nShe is not interested in learning or contributing to projects.\n--feedback--\nAlice explicitly states her interest in learning new things and contributing.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-2.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 44.62,\n\"finishTimestamp\": 48.82\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 2.68,\n\"dialogue\": {\n\"text\": \"I really like learning new things\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 2.68,\n\"finishTime\": 5.20,\n\"dialogue\": {\n\"text\": \"and can't wait to start contributing to our projects.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 5.70\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2169,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd1cdaa5260067b6fb93e.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "135bdc697c071aed8f19e293620c4765",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd5bac0e2df08b433b29d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd5bac0e2df08b433b29d\ntitle: Task 49\nchallengeType: 19\ndashedName: task-49\n--description--\nThe phrase I hope you're all well is a caring expression often used in emails, letters, and personal greetings. It reflects a kind gesture of wishing someone health and happiness.\nThis phrase is versatile and can be used in both casual and formal settings.\n--questions--\n--text--\nWhat does the phrase I hope you're all well mean?\n--answers--\nIt's a way to ask for help.\n--feedback--\nThis phrase is not typically used for asking for help, but for expressing good wishes.\nIt's a polite way to ask about someone's health and happiness.\nIt's a phrase used to express happiness.\n--feedback--\nWhile it conveys good wishes, it is not directly expressing personal happiness.\nIt's a formal greeting used only in business meetings.\n--feedback--\nThis phrase can be used in both casual and formal settings, not just in business meetings.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 2.84\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.84,\n\"dialogue\": {\n\"text\": \"Good morning, everyone. I hope you're well.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 4.34\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1767,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd5bac0e2df08b433b29d.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "43f5f9d1c4bf43a1abfe8bb6ad8ed762",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd6c342d0e8093dd5c540.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd6c342d0e8093dd5c540\ntitle: Task 50\nchallengeType: 22\ndashedName: task-50\n--description--\nThe word hope is used to express a wish for something to be true or to happen. For example, saying I hope you're doing well means you wish that the person is fine or happy.\nWell is often used to mean in good health or in a good condition. For example, Are you feeling well today? is asking if someone is in good health.\n--fillInTheBlank--\n--sentence--\nGood BLANK, everyone! I BLANK you're all BLANK.\n--blanks--\nmorning\n--feedback--\nThis word indicates the time of day and is used as a greeting.\nhope\n--feedback--\nUsed to express a wish or desire for something.\nwell\n--feedback--\nIn this context refers to being in good health or condition.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 2.84\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.84,\n\"dialogue\": {\n\"text\": \"Good morning, everyone. I hope you're well.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 4.34\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd6c342d0e8093dd5c540.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0fb85c0711dfd04cef25e55106a80267",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd7778a28e4099f0ca6e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd7778a28e4099f0ca6e9\ntitle: Task 51\nchallengeType: 22\ndashedName: task-51\n--description--\nThis sentence is commonly used in professional environments to announce the arrival of a new team member. Each word plays a specific role in the sentence, from indicating the time to describing the action happening.\n--fillInTheBlank--\n--sentence--\nBLANK, we BLANK a new BLANK BLANK our team.\n--blanks--\nToday\n--feedback--\nThis word indicates the specific time when the action is happening. This word should be capitalized.\nhave\n--feedback--\nIt means possessing or holding something, used here to indicate the presence of a new person.\nmember\n--feedback--\nIt refers to a person who is part of a group, in this case, the team.\njoining\n--feedback--\nThis word describes the action of becoming part of a group or team.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 3.18,\n\"finishTimestamp\": 5.70\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.52,\n\"dialogue\": {\n\"text\": \"Today, we have a new member joining our team.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 4.02\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1713,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd7778a28e4099f0ca6e9.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "41d1e313284f694aaca8989b66f197fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd301c8cef107941a5552.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd301c8cef107941a5552\ntitle: Task 47\nchallengeType: 19\ndashedName: task-47\n--description--\nListen to the audio and answer the question --questions--\n--text--\nWhat is the sequence of statements in Alice's self-introduction --answers--\nShe introduces herself, mentions her new role, expresses her interests, and her interest to contribute She mentions her new role, introduces herself, expresses her interest to contribute, and then her interests --feedback--\nListen again to the order in which Alice introduces these elements She expresses her interests, introduces herself, mentions her new role, and her interest to contribute --feedback--\nThe sequence is slightly different Focus on how she starts her introduction She introduces herself, expresses her interest to contribute, mentions her new role, and then her interests --feedback--\nPay attention to the order of her introduction and when she talks about her role --video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Alice\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1 4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1 2-2 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 39 5,\n\"finishTimestamp\": 48 82\n}\n},\n\"commands\": [\n{\n\"character\": \"Alice\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 1,\n\"finishTime\": 3 72,\n\"dialogue\": {\n\"text\": \"Great thanks everybody Well I'm Alice \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 3 72,\n\"finishTime\": 5 54,\n\"dialogue\": {\n\"text\": \"I'm starting as a junior developer today \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 5 54,\n\"finishTime\": 7 36,\n\"dialogue\": {\n\"text\": \"I really like learning new things\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"startTime\": 7 36,\n\"finishTime\": 10 32,\n\"dialogue\": {\n\"text\": \"and can't wait to start contributing to our projects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2618,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd301c8cef107941a5552.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "64abc459d31c845d57a60046b16926ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd301c8cef107941a5552.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "everybody Well I'm Alice \", \"align\": \"center\" } }, { \"character\": \"Alice\", \"startTime\": 3 72, \"finishTime\": 5 54, \"dialogue\": { \"text\": \"I'm starting as a junior developer today \", \"align\": \"center\" } }, { \"character\": \"Alice\", \"startTime\": 5 54, \"finishTime\": 7 36, \"dialogue\": { \"text\": \"I really like learning new things\", \"align\": \"center\" } }, { \"character\": \"Alice\", \"startTime\": 7 36, \"finishTime\": 10 32, \"dialogue\": { \"text\": \"and can't wait to start contributing to our projects\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Alice\",\n\"opacity\": 0,\n\"startTime\": 10 82\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2618,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd301c8cef107941a5552.md",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d34461c2d68a7b76eda579c04830b94b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd816f3caf509f85e4d4a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd816f3caf509f85e4d4a\ntitle: Task 52\nchallengeType: 19\ndashedName: task-52\n--description--\nWould like is used to express a desire or wish in a polite way. For example, I would like to show you something indicates a polite intention.\nIn spoken English, it's often abbreviated to I'd. For example, I'd like to show you something. This contraction is very common in everyday conversation.\n--questions--\n--text--\nWhat does Bob express in the audio?\n--answers--\nA command to meet Lisa.\n--feedback--\nWould like is used for polite requests or offers, not commands.\nBob expresses his dislike for Lisa.\n--feedback--\nThe phrase would like is used to express a desire or wish, not dislike.\nBob asks if Lisa is a front-end developer.\n--feedback--\nBob is introducing Lisa, not asking about her.\nBob is politely introducing Lisa as the new front-end developer.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"desk.png\",\n\"characters\": [\n{\n\"character\": \"Lisa\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 6,\n\"finishTimestamp\": 9.9\n}\n},\n\"commands\": [\n{\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.9,\n\"dialogue\": {\n\"text\": \"I'd like to introduce you to Lisa. She's our new front-end developer.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 5.4\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd816f3caf509f85e4d4a.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ce7c79807bbe2c4667e298db9756ef66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd8d94290160a8732893d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd8d94290160a8732893d\ntitle: Task 53\nchallengeType: 22\ndashedName: task-53\n--description--\nThe word brief means short in duration or length. When people say something is brief, it indicates that it won't take a lot of time.\nBriefly is the adverb form of brief and is used to describe how an action is done. For example, I will speak briefly means the speaking will be done for a short time.\n--fillInTheBlank--\n--sentence--\nBLANK me introduce you all BLANK.\n--blanks--\nLet\n--feedback--\nThis word is used to give permission or to allow an action to happen. This word is capitalized.\nbriefly\n--feedback--\nIt means to do something for a short time or in a quick manner.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 10.66,\n\"finishTimestamp\": 12.20\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 2.54,\n\"dialogue\": {\n\"text\": \"Let me introduce you all briefly.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 3.04\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1536,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd8d94290160a8732893d.md",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12c38ab361e0324324b21a3d8ec529f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd9ae412af80b2a7ff265.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd9ae412af80b2a7ff265\ntitle: Task 55\nchallengeType: 22\ndashedName: task-55\n--description--\nAny is used to indicate no matter which one, no matter when, or no matter what. For example, You can ask me any question means you can ask all kinds of questions.\nEven is used to emphasize something unexpected or to include something in addition. For example, She can speak many languages, even Tupi means that it's surprising or notable that she can also speak Tupi, in addition to other languages.\nThe word even highlights something extra or beyond what is usual.\n--fillInTheBlank--\n--sentence--\nYou can talk to her BLANK time, BLANK in this virtual setting, if you have questions, Lisa.\n--blanks--\nany\n--feedback--\nThis word is used to indicate no specific time; any time is acceptable.\neven\n--feedback--\nIt is used to emphasize something that might be surprising or not usually expected.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Sarah\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 14.86,\n\"finishTimestamp\": 19.94\n}\n},\n\"commands\": [\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 6.08,\n\"dialogue\": {\n\"text\": \"You can talk to her anytime, even in this virtual setting, if you have questions, Lisa.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 6.58\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1870,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd9ae412af80b2a7ff265.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "39050c0b8a6afa155f83a9be5bf65194",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd938cf0b0c0ad751ac23.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd938cf0b0c0ad751ac23\ntitle: Task 54\nchallengeType: 22\ndashedName: task-54\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nBLANK is Sarah, the BLANK developer.\n--blanks--\nThis\n--feedback--\nIt is used to introduce someone or something in the present context. This word is capitalized.\nsenior\n--feedback--\nThis word indicates a higher level of experience or rank in a job role.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Sarah\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 12.6,\n\"finishTimestamp\": 14.6\n}\n},\n\"commands\": [\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3,\n\"dialogue\": {\n\"text\": \"This is Sarah, the senior developer.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 3.5\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1297,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd938cf0b0c0ad751ac23.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6eda572334796262469a960cd29f257a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cda710736e30ba719e441.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cda710736e30ba719e441\ntitle: Task 56\nchallengeType: 19\ndashedName: task-56\n--description--\nIn Bob's statement, he uses the word even to introduce a surprising or notable aspect. Even is often used to emphasize something that may not be expected or is additional to what has already been mentioned.\n--questions--\n--text--\nWhat aspect of Bob's statement to Lisa is considered surprising?\n--answers--\nThat Lisa can talk to Sarah at any time.\n--feedback--\nWhile this is part of the statement, it's not the surprising element.\nThat Lisa can talk to Sarah at any time even in a virtual setting.\nThat Lisa might have questions.\n--feedback--\nHaving questions is quite normal and not the surprising part of the statement.\nThat Lisa is talking to Sarah, not Bob.\n--feedback--\nThe statement is about whom Lisa can talk to, not about who is currently talking.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Sarah\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 14.86,\n\"finishTimestamp\": 19.94\n}\n},\n\"commands\": [\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 6.08,\n\"dialogue\": {\n\"text\": \"You can talk to her anytime, even in this virtual setting, if you have questions, Lisa.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 6.58\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cda710736e30ba719e441.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a7bd3e5b5561925b95400b218da2ef79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cdf0217569e0ce2e40cd1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cdf0217569e0ce2e40cd1\ntitle: Task 57\nchallengeType: 22\ndashedName: task-57\n--description--\nThe word expertise refers to special skills or knowledge that someone has, especially because of their experience or training.\nFor example, She has expertise in web design means she is very skilled or knowledgeable in web design.\nIt's often used in a professional context to talk about the strengths or special abilities someone brings to a team or a project.\n--fillInTheBlank--\n--sentence--\nI'm BLANK to work with all of you and learn from your BLANK.\n--blanks--\nexcited\n--feedback--\nThis word is used to express a feeling of great enthusiasm and eagerness.\nexpertise\n--feedback--\nIt refers to special skills or knowledge in a specific area.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"desk.png\",\n\"characters\": [\n{\n\"character\": \"Lisa\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 21.06,\n\"finishTimestamp\": 25.54\n}\n},\n\"commands\": [\n{\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 1,\n\"finishTime\": 5.48,\n\"dialogue\": {\n\"text\": \"Hi, Sarah. Thank you. I'm excited to work with all of you and learn from your expertise.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 5.98\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1704,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cdf0217569e0ce2e40cd1.md",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5003fb2b67afc2b792f7f7fb1d8d1fd1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cdfc400c4130d43bab6e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cdfc400c4130d43bab6e9\ntitle: Task 58\nchallengeType: 22\ndashedName: task-58\n--description--\nAll of you is a phrase used to include every person in a group. For example, I want to thank all of you for coming means thanking every person who came.\nThe word your can refer to something that belongs to either an individual or a group, depending on the context.\nWhen talking to one person, your refers to something belonging to that individual. For example, Your book is on the table means the book belongs to the individual you're speaking to.\nIn contrast, when speaking to a group, your can refer to something that belongs to all of them. For example, Your project is impressive means the project belonging to the entire group is impressive. Understanding the context helps to determine if your is singular or plural.\n--fillInTheBlank--\n--sentence--\nI'm excited to work with BLANK BLANK you and learn from BLANK expertise.\n--blanks--\nall\n--feedback--\nThis word is used to include everyone in the group.\nof\n--feedback--\nThis word helps to link all with you, forming a phrase that refers to the entire group.\nyour\n--feedback--\nIt indicates possession or relation to the group being addressed.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"desk.png\",\n\"characters\": [\n{\n\"character\": \"Lisa\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 22.60,\n\"finishTimestamp\": 25.54\n}\n},\n\"commands\": [\n{\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 1,\n\"finishTime\": 3.94,\n\"dialogue\": {\n\"text\": \"I'm excited to work with all of you and learn from your expertise.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 4.44\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cdfc400c4130d43bab6e9.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1f72ca35065d84d3467b25c3c69c446c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce2aee8f1d30e17cf89e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ce2aee8f1d30e17cf89e5\ntitle: Task 59\nchallengeType: 19\ndashedName: task-59\n--description--\nInterested in is a phrase used to ask or talk about someone's preferences, hobbies, or areas of professional focus. For example, in What are you interested in?, they want to know about your hobbies, likes, or professional interests.\nIt's a common way to learn more about a person's preferences in a friendly way.\n--questions--\n--text--\nWhat does Bob want to know about Lisa?\n--answers--\nBob wants to know if Lisa is interested in any specific area of design or development.\nBob is asking about Lisa's favorite color.\n--feedback--\nThe phrase interested in is used to inquire about preferences or focus areas, not specifically about colors.\nBob wants to know if Lisa is interested in changing her job.\n--feedback--\nBob's question is about Lisa's interests within her current field, not about changing her job.\nBob is asking if Lisa is ready to start working.\n--feedback--\nThe question is about Lisa's interests, not about her readiness to start work.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 26.14,\n\"finishTimestamp\": 33.44\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 8.2,\n\"dialogue\": {\n\"text\": \"This is Tom, our new graphic designer. Is there any specific area of design or development that you're interested in?\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 8.7\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2117,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce2aee8f1d30e17cf89e5.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3ee9fe1e2d318018b629313259d203b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce387f809d60eb54f06d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ce387f809d60eb54f06d6\ntitle: Task 60\nchallengeType: 22\ndashedName: task-60\n--description--\nGo-to person is used to describe a person who is an expert or the best person to approach in a specific field or for a particular issue.\nFor example, He's the go-to guy for computer problems means he is the person best suited to help with computer issues.\n--fillInTheBlank--\n--sentence--\nIs there any BLANK area of design or development you're interested in? He's your BLANK-to BLANK for that.\n--blanks--\nspecific\n--feedback--\nThis word is used to indicate a particular or clearly defined area.\ngo\n--feedback--\nThis part of the phrase indicates the person to whom you should approach or consult.\nguy\n--feedback--\nRefers to the person who is an expert or the best in a particular field.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 29.12,\n\"finishTimestamp\": 35.54\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 7.4,\n\"dialogue\": {\n\"text\": \"Is there any specific area of design or development that you're interested in? He's your go-to guy for that.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 7.9\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1811,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce387f809d60eb54f06d6.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ada729d603e9a355e5f8aba1b3a95b71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce469dc28f40f4b7ac75d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ce469dc28f40f4b7ac75d\ntitle: Task 61\nchallengeType: 19\ndashedName: task-61\n--description--\nIs there and Are there are used at the beginning of questions to ask about the existence or presence of something.\nIs there is used for singular nouns, like in Is there a solution? Are there is used for plural nouns, such as in Are there any questions?\n--questions--\n--text--\nWhich is the correct way to ask about the existence of something using there is or there are?\n--answers--\nIs there a meeting scheduled for today?\nAre there the new designer in the office?\n--feedback--\nRemember to use Is there for singular and Are there for plural. The correct form should be Is there a new designer in the office?\nIs there any chairs in the meeting room?\n--feedback--\nChairs is plural, so the correct form is Are there any chairs in the meeting room?\nAre there a new designer in the office?\n--feedback--\nThis question is about one person, so it should use Is there instead of Are there. The correct form is Is there a new designer in the office?\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1167,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce469dc28f40f4b7ac75d.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3c937858221a5da2409aa181687c01ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce691d6c57c107e650c5e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ce691d6c57c107e650c5e\ntitle: Task 63\nchallengeType: 19\ndashedName: task-63\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nBased on the audio, what is Bob communicating to Lisa about Tom?\n--answers--\nBob is informing that Tom is available for any kind of task.\n--feedback--\nFocus on the specific roles and areas mentioned by Bob in the context of Tom's expertise.\nBob is introducing Tom as the new graphic designer.\nBob is asking Tom to lead the next team meeting.\n--feedback--\nThis line is about Tom's role and expertise, not about leading meetings.\nBob is asking if anyone wants to transfer to a different department.\n--feedback--\nThe conversation focuses on introducing Tom and his area of expertise, not departmental transfers.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Tom\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 26.14,\n\"finishTimestamp\": 35.54\n}\n},\n\"commands\": [\n{\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.48,\n\"dialogue\": {\n\"text\": \"This is Tom, our new graphic designer.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 3.48,\n\"finishTime\": 7.8,\n\"dialogue\": {\n\"text\": \"Is there any specific area of design or development that you're interested in?\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 7.8,\n\"finishTime\": 9.58,\n\"dialogue\": {\n\"text\": \"He's your go-to guy for that.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 10.18\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2224,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce691d6c57c107e650c5e.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "04efc2ce1f1a438f81aace8e15ade211",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce5caa3e1460ff657c6b0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ce5caa3e1460ff657c6b0\ntitle: Task 62\nchallengeType: 22\ndashedName: task-62\n--description--\nPracticing the correct usage of is there and are there in questions is crucial. Remember, is there is used for singular nouns and are there for plural nouns. This task will help you understand how to form questions correctly using these phrases.\nThe sentence below doesn't have an audio, you need to deduct the correct words by understanding the context.\n--fillInTheBlank--\n--sentence--\nBLANK there any specific area you're interested in? BLANK there any questions you have for Tom?\n--blanks--\nIs\n--feedback--\nThis is used for asking about a singular item or concept. This word is capitalized.\nAre\n--feedback--\nThis is used for inquiring about multiple items or concepts. This word is capitalized.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce5caa3e1460ff657c6b0.md",
      "source_type": "git_repo"
    },
    "token_count": 187,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7a7e1dbac3fd13510a9051dbaebccb03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce738f6c4eb10e81fd937.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ce738f6c4eb10e81fd937\ntitle: Task 64\nchallengeType: 19\ndashedName: task-64\n--description--\nLisa answers to a question about her professional interests.\n--questions--\n--text--\nWhat are Lisa's main areas of interest?\n--answers--\nUI/UX design and front-end development, and she's open to exploring more.\nAccounting and finance management.\n--feedback--\nLisa mentions different areas of interest related to design and development, not finance.\nHuman resources and team management.\n--feedback--\nThe focus of Lisa's interests is on design and development, not on HR or team management.\nUI/UX and marketing strategies.\n--feedback--\nLisa's response is centered on design and development areas, not marketing.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"desk.png\",\n\"characters\": [\n{\n\"character\": \"Lisa\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 36.1,\n\"finishTimestamp\": 42.22\n}\n},\n\"commands\": [\n{\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 1,\n\"finishTime\": 6.92,\n\"dialogue\": {\n\"text\": \"Hi, Tom. I'm interested in UI UX design and front-end development, but I'm open to exploring more.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 7.42\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce738f6c4eb10e81fd937.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "494326d35a205bbb29fea49dba17547b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657daa5ab8505427a5b99cd2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657daa5ab8505427a5b99cd2\ntitle: Task 66\nchallengeType: 19\ndashedName: task-66\n--description--\nIn the audio, Bob introduces himself and states his role in the company.\n--questions--\n--text--\nWhat is Bob's role in the company?\n--answers--\nHe is the team's project manager.\nHe is the team's graphic designer.\n--feedback--\nRemember to listen carefully to the specific role mentioned in the introduction.\nHe is the new intern.\n--feedback--\nBob introduces himself with a specific management role, not as an intern.\nHe is the company's CEO.\n--feedback--\nBob's introduction clearly states a different role, not the CEO.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 42.84,\n\"finishTimestamp\": 45.06\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.22,\n\"dialogue\": {\n\"text\": \"And I'm Bob, the team's project manager.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 3.72\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1525,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657daa5ab8505427a5b99cd2.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dba92a29c9143a490a60207ac423fd47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657daad61699f1281c5dca55.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657daad61699f1281c5dca55\ntitle: Task 67\nchallengeType: 19\ndashedName: task-67\n--description--\nA project manager is a key role in many companies. This person is responsible for planning, organizing, and directing the completion of specific projects while ensuring these projects are on time, on budget, and within scope.\nA project manager often coordinates with different team members, sets deadlines, assigns responsibilities, and monitors the progress of the project.\n--questions--\n--text--\nWhich activities best describe what a project manager does?\n--answers--\nDesigns the products and creates marketing strategies.\n--feedback--\nThese tasks are typically handled by other specialized roles, not the project manager.\nPlans and organizes projects, sets deadlines, and monitors progress.\nTeaches new employees and manages company finances.\n--feedback--\nWhile important, these activities are not typically the primary responsibilities of a project manager.\nPrepares food and serves customers in a restaurant.\n--feedback--\nThis description fits roles in the food service industry, not a project manager.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 45.42,\n\"finishTimestamp\": 50.98\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 6.56,\n\"dialogue\": {\n\"text\": \"I'm the person you always need to talk to if you have any questions about the team's goals and schedule.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 7.06\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657daad61699f1281c5dca55.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "79947df574326db305d1317fe8c03d16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce7ed5eb7171156711c77.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ce7ed5eb7171156711c77\ntitle: Task 65\nchallengeType: 22\ndashedName: task-65\n--description--\nWhen someone says I'm open to, it means they are willing to consider new ideas or experiences. It shows that they are flexible and interested in trying different things.\nFor instance, saying I'm open to learning more means the person is ready to learn new things. It's a useful phrase to express a positive attitude towards new opportunities or changes.\n--fillInTheBlank--\n--sentence--\nI'm BLANK in UI/UX design and front-end BLANK, but I'm BLANK to BLANK more.\n--blanks--\ninterested\n--feedback--\nThis word is used to express curiosity or a liking for something.\ndevelopment\n--feedback--\nRefers to the process of developing something, in this case, in the field of front-end.\nopen\n--feedback--\nIndicates a willingness or readiness to consider new possibilities.\nexploring\n--feedback--\nSuggests looking into or examining new areas or opportunities.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"desk.png\",\n\"characters\": [\n{\n\"character\": \"Lisa\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 36.7,\n\"finishTimestamp\": 42.22\n}\n},\n\"commands\": [\n{\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 1,\n\"finishTime\": 6.92,\n\"dialogue\": {\n\"text\": \"I'm interested in UI UX design and front-end development, but I'm open to exploring more.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 7.42\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1954,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657ce7ed5eb7171156711c77.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f44c43c1b45cf0143eb18fca800c5460",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657cd51dc73ba908478c9f70\ntitle: 'Dialogue 3: Team Meeting Introduction'\nchallengeType: 21\ndashedName: dialogue-team-meeting-introduction\n--description--\nWatch the video below to understand the context of the upcoming lessons --assignment--\nWatch the video\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 0\n},\n{\n\"character\": \"Lisa\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 0\n},\n{\n\"character\": \"Sarah\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1 4 },\n\"opacity\": 0\n},\n{\n\"character\": \"Tom\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1 2-3 mp3\",\n\"startTime\": 1\n},\n\"alwaysShowDialogue\": true\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 1,\n\"startTime\": 1\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1 3,\n\"finishTime\": 3 5,\n\"dialogue\": {\n\"text\": \"Good morning, everyone I hope you're well \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 4 2,\n\"finishTime\": 6 9,\n\"dialogue\": {\n\"text\": \"Today, we have a new member joining our team \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 7 1,\n\"finishTime\": 9 1,\n\"dialogue\": {\n\"text\": \"I'd like to introduce you to Lisa \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 9 1\n},\n{\n\"background\": \"desk",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6928,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "53fcf2bd0f74ab2816718a6b23795ad8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ \"text\": \"Good morning, everyone I hope you're well \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"startTime\": 4 2, \"finishTime\": 6 9, \"dialogue\": { \"text\": \"Today, we have a new member joining our team \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"startTime\": 7 1, \"finishTime\": 9 1, \"dialogue\": { \"text\": \"I'd like to introduce you to Lisa \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"opacity\": 0, \"startTime\": 9 1 }, { \"background\": \"deskpng\",\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 9 2\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 9 3,\n\"finishTime\": 11 3,\n\"dialogue\": {\n\"text\": \"She's our new front-end developer \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 11 5,\n\"finishTime\": 13 5,\n\"dialogue\": {\n\"text\": \"Let me introduce you all briefly \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 13 5\n},\n{\n\"background\": \"company2-boardroom png\",\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 13 6\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 13 7,\n\"finishTime\": 15 2,\n\"dialogue\": {\n\"text\": \"This is Sarah, the senior developer \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 16 2,\n\"finishTime\": 21 4,\n\"dialogue\": {\n\"text\": \"You can talk to her any time, even in this virtual setting, if you have questions, Lisa \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 21 5\n},\n{\n\"background\": \"desk png\",\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 21 6\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 21 7,\n\"finishTime\": 23",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6928,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ebbfd97a1f68fc831ed3f8a95a90ed09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ \"text\": \"This is Sarah, the senior developer \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"startTime\": 16 2, \"finishTime\": 21 4, \"dialogue\": { \"text\": \"You can talk to her any time, even in this virtual setting, if you have questions, Lisa \", \"align\": \"left\" } }, { \"character\": \"Sarah\", \"opacity\": 0, \"startTime\": 21 5 }, { \"background\": \"desk png\", \"character\": \"Lisa\", \"opacity\": 1, \"startTime\": 21 6 }, { \"character\": \"Lisa\", \"startTime\": 21 7, \"finishTime\": 237,\n\"dialogue\": {\n\"text\": \"Hi, Sarah Thank you \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 23 9,\n\"finishTime\": 27 1,\n\"dialogue\": {\n\"text\": \"I'm excited to work with all of you and learn from your expertise \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 27 1\n},\n{\n\"background\": \"company2-boardroom png\",\n\"character\": \"Tom\",\n\"opacity\": 1,\n\"startTime\": 27 2\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 27 3,\n\"finishTime\": 29 3,\n\"dialogue\": {\n\"text\": \"This is Tom, our new graphic designer \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 29 4,\n\"finishTime\": 31 4,\n\"dialogue\": {\n\"text\": \"Is there any specific area of design or development you're interested in \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 35,\n\"finishTime\": 36 3,\n\"dialogue\": {\n\"text\": \"He's your go-to guy for that \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Tom\",\n\"opacity\": 0,\n\"startTime\": 36 4\n},\n{\n\"background\": \"desk png\",\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 36 4\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 36 5,\n\"finishTime\": 43",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6928,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "d798d419508669e7e02a9fdacb769b36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "29 4, \"finishTime\": 31 4, \"dialogue\": { \"text\": \"Is there any specific area of design or development you're interested in \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"startTime\": 35, \"finishTime\": 36 3, \"dialogue\": { \"text\": \"He's your go-to guy for that \", \"align\": \"left\" } }, { \"character\": \"Tom\", \"opacity\": 0, \"startTime\": 36 4 }, { \"background\": \"desk png\", \"character\": \"Lisa\", \"opacity\": 1, \"startTime\": 36 4 }, { \"character\": \"Lisa\", \"startTime\": 36 5, \"finishTime\": 435,\n\"dialogue\": {\n\"text\": \"Hi, Tom I'm interested in UI/UX design and front-end development, but I'm open to exploring more \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 43 6\n},\n{\n\"background\": \"company2-boardroom png\",\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 43 6\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 43 7,\n\"finishTime\": 46 7,\n\"dialogue\": {\n\"text\": \"And I'm Bob, the team's project manager \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 46 9,\n\"finishTime\": 52 2,\n\"dialogue\": {\n\"text\": \"I'm the person you always need to talk to if you have any questions about the team's goals and schedule \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 52 3\n},\n{\n\"background\": \"desk png\",\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 52 3\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 52 4,\n\"finishTime\": 54 6,\n\"dialogue\": {\n\"text\": \"Hi, Bob It's great to meet you too \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 54 7\n},\n{\n\"background\": \"company2-boardroom",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6928,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "be0a69fb1add80b9332c4f7d976464dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "talk to if you have any questions about the team's goals and schedule \", \"align\": \"left\" } }, { \"character\": \"Bob\", \"opacity\": 0, \"startTime\": 52 3 }, { \"background\": \"desk png\", \"character\": \"Lisa\", \"opacity\": 1, \"startTime\": 52 3 }, { \"character\": \"Lisa\", \"startTime\": 52 4, \"finishTime\": 54 6, \"dialogue\": { \"text\": \"Hi, Bob It's great to meet you too \", \"align\": \"right\" } }, { \"character\": \"Lisa\", \"opacity\": 0, \"startTime\": 54 7 }, { \"background\": \"company2-boardroompng\",\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 54 7\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 54 8,\n\"finishTime\": 59 6,\n\"dialogue\": {\n\"text\": \"Excellent Lisa, it's great to have you join our team, even if just online \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 60 2,\n\"finishTime\": 63 7,\n\"dialogue\": {\n\"text\": \"OK, team Let's help Lisa with the support she needs to start \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 64,\n\"finishTime\": 66 5,\n\"dialogue\": {\n\"text\": \"Now here are the topics on today's agenda…\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 67\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6928,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657cd51dc73ba908478c9f70.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "62865f0b65c4d09e4439efbaa6df007b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657daf702ed04a29ee42de69.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657daf702ed04a29ee42de69\ntitle: Task 70\nchallengeType: 22\ndashedName: task-70\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nHi, Bob. It's BLANK to meet you BLANK.\n--blanks--\ngreat\n--feedback--\nThis word expresses positive feelings or satisfaction.\ntoo\n--feedback--\nIndicates agreement or similarity with something already mentioned.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"desk.png\",\n\"characters\": [\n{\n\"character\": \"Lisa\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 51.58,\n\"finishTimestamp\": 53.38\n}\n},\n\"commands\": [\n{\n\"character\": \"Lisa\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Lisa\",\n\"startTime\": 1,\n\"finishTime\": 2.80,\n\"dialogue\": {\n\"text\": \"Hi, Bob. It's great to meet you too.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Lisa\",\n\"opacity\": 0,\n\"startTime\": 3.30\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1243,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657daf702ed04a29ee42de69.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5208420173113bca7c249719acfd902e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657dadfc7d21eb294c9f057e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657dadfc7d21eb294c9f057e\ntitle: Task 69\nchallengeType: 19\ndashedName: task-69\n--description--\nIn this audio, Bob is explaining his role as a project manager and what he can help with.\n--questions--\n--text--\nWhich part of Bob's sentence tells Lisa what she can ask him for help with?\n--answers--\nI'm the person you always need to talk to\n--feedback--\nThis part introduces Bob as the point of contact but doesn't specify what for.\nAnd I'm Bob, the team's project manager\n--feedback--\nWhile this introduces Bob's role, it doesn't specify the kind of help he offers.\nif you have any questions\n--feedback--\nThis phrase suggests that questions are welcome but doesn't detail the topics.\nabout the team's goals and schedule\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 42.84,\n\"finishTimestamp\": 50.98\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.22,\n\"dialogue\": {\n\"text\": \"And I'm Bob, the team's project manager.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 3.23,\n\"finishTime\": 5,\n\"dialogue\": {\n\"text\": \"I'm the person you always need to talk to.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 5,\n\"finishTime\": 9.14,\n\"dialogue\": {\n\"text\": \"if you have any questions about the team's goals and schedule.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 9.64\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2175,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657dadfc7d21eb294c9f057e.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "39be7c13479fad123099b803b727ccfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df2b22d7649667734d71e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657df2b22d7649667734d71e\ntitle: Task 72\nchallengeType: 19\ndashedName: task-72\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhat is Bob expressing to Lisa?\n--answers--\nBob is asking Lisa for a team report.\n--feedback--\nThis option doesn't match the welcoming nature of Bob's statement.\nBob is expressing dissatisfaction with Lisa joining online.\n--feedback--\nBob's tone and words are welcoming, not expressing dissatisfaction.\nBob is welcoming Lisa to the team and acknowledging that it is online.\nBob is assigning Lisa a new project.\n--feedback--\nThe statement is about welcoming Lisa, not assigning projects.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 53.38,\n\"finishTimestamp\": 58.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 5.80,\n\"dialogue\": {\n\"text\": \"Excellent. Lisa, it's great to have you join our team, even if just online.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 6.30\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1631,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df2b22d7649667734d71e.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "be65f04efa0e7c6eab1445e2511436a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df21cc45b1f66112fb8fc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657df21cc45b1f66112fb8fc\ntitle: Task 71\nchallengeType: 22\ndashedName: task-71\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nBLANK! Lisa, it's great to BLANK you BLANK our team, BLANK if just online.\n--blanks--\nExcellent\n--feedback--\nThis word is used to express happiness or satisfaction with something. This word is capitalized.\nhave\n--feedback--\nIndicates possession or the experience of something happening.\njoin\n--feedback--\nUsed to describe the action of becoming part of a group.\neven\n--feedback--\nThis word adds emphasis and can introduce an exception or contrast.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 53.38,\n\"finishTimestamp\": 58.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 5.80,\n\"dialogue\": {\n\"text\": \"Excellent. Lisa, it's great to have you join our team, even if just online.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 6.30\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1597,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df21cc45b1f66112fb8fc.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a102b7b694353fccd49d02807cd2d949",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df30a140de766c3896294.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657df30a140de766c3896294\ntitle: Task 73\nchallengeType: 22\ndashedName: task-73\n--description--\nIn a team context, to support means to provide help or assistance to someone. It's about making sure team members have what they need to succeed.\n--fillInTheBlank--\n--sentence--\nOkay, team. BLANK help Lisa with the BLANK she BLANK to start.\n--blanks--\nLet's\n--feedback--\nThis word is a contraction of let us, used to suggest a proposal or offer for the group. First word is capitalized.\nsupport\n--feedback--\nRefers to the help or assistance provided to someone.\nneeds\n--feedback--\nIndicates what Lisa needs.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 58.82,\n\"finishTimestamp\": 62.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.36,\n\"dialogue\": {\n\"text\": \"Okay, team, let's help Lisa with the support she needs to start.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 4.86\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df30a140de766c3896294.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "01a2b0a9bc3f018eb897f189e2ca531e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657dab674b9de728828aa020.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657dab674b9de728828aa020\ntitle: Task 68\nchallengeType: 22\ndashedName: task-68\n--description--\nIn a professional context, a schedule refers to a planned timeline for tasks or events Understanding a project's schedule is key to managing time effectively For example:\nThis is the schedule of the day refers to all activities and actions planned for that day Team's goals are the objectives or targets that a team works towards --fillInTheBlank--\n--sentence--\nAnd I'm Bob, the team's project BLANK I'm the BLANK you always need to talk to if you have BLANK questions about the team's BLANK and BLANK --blanks--\nmanager\n--feedback--\nRefers to the person responsible for overseeing a project person\n--feedback--\nIndicates an individual, in this case, Bob, who is responsible for certain tasks any\n--feedback--\nUsed to indicate any amount or type, suggesting openness to various questions goals\n--feedback--\nRefers to the objectives or targets set by the team schedule\n--feedback--\nRefers to the planned timeline for tasks or events in a project --scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1 2-3 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 42 84,\n\"finishTimestamp\": 50 98\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3 22,\n\"dialogue\": {\n\"text\": \"And I'm Bob, the team's project manager \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 3 23,\n\"finishTime\": 5,\n\"dialogue\": {\n\"text\": \"I'm the person you always need to talk to \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 5,\n\"finishTime\": 9 14,\n\"dialogue\": {\n\"text\": \"if you have any questions about the team's goals and schedule",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2513,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657dab674b9de728828aa020.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "baf757b2ad73c4007901ee1809081cff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657dab674b9de728828aa020.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"Bob\", \"opacity\": 1, \"startTime\": 0 }, { \"character\": \"Bob\", \"startTime\": 1, \"finishTime\": 3 22, \"dialogue\": { \"text\": \"And I'm Bob, the team's project manager \", \"align\": \"center\" } }, { \"character\": \"Bob\", \"startTime\": 3 23, \"finishTime\": 5, \"dialogue\": { \"text\": \"I'm the person you always need to talk to \", \"align\": \"center\" } }, { \"character\": \"Bob\", \"startTime\": 5, \"finishTime\": 9 14, \"dialogue\": { \"text\": \"if you have any questions about the team's goals and schedule\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 9 64\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2513,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657dab674b9de728828aa020.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ee8b463ecf835d73f35ca53c7275e989",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df429a575a6679e72d48f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657df429a575a6679e72d48f\ntitle: Task 75\nchallengeType: 22\ndashedName: task-75\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nNow here are the BLANK on BLANK agenda…\n--blanks--\ntopics\n--feedback--\nThese are the points or subjects that are planned for discussion or consideration. The word is in plural.\ntoday's\n--feedback--\nA possessive form indicating something belonging to or associated with the current day. Remember to use 's.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 62.64,\n\"finishTimestamp\": 65.00\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 3.36,\n\"dialogue\": {\n\"text\": \"Now, here are the topics on today's agenda.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 3.86\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1363,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df429a575a6679e72d48f.md",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c33d4fc4cf093bce828f30255704b82e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df39e98ace1673de4c399.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657df39e98ace1673de4c399\ntitle: Task 74\nchallengeType: 19\ndashedName: task-74\n--description--\nBob is asking something to the team.\n--questions--\n--text--\nWhat is Bob inviting the team to do?\n--answers--\nBob is asking the team to complete Lisa's tasks for her.\n--feedback--\nBob's statement is about supporting Lisa, not completing her tasks for her.\nBob is asking the team to attend a meeting about Lisa.\n--feedback--\nThere's no mention of a meeting in Bob's statement; it's about offering support to Lisa.\nBob is telling the team to leave Lisa to work independently.\n--feedback--\nBob's statement is about offering support, not leaving Lisa to work alone.\nBob is asking the team to help Lisa with the support she needs to get started.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company2-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-3.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 58.82,\n\"finishTimestamp\": 62.18\n}\n},\n\"commands\": [\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Bob\",\n\"startTime\": 1,\n\"finishTime\": 4.36,\n\"dialogue\": {\n\"text\": \"Okay, team, let's help Lisa with the support she needs to start.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 4.86\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df39e98ace1673de4c399.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "155e2125353d01f33c233ac85b71f567",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df5d14291b56887825276.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657df5d14291b56887825276\ntitle: Task 77\nchallengeType: 22\ndashedName: task-77\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nI'm James and I'm BLANK to BLANK you with your BLANK.\n--blanks--\nhere\n--feedback--\nThis word indicates presence or position in a specific place or situation.\nhelp\n--feedback--\nImplies providing assistance or support to someone.\ntraining\n--feedback--\nRefers to the process of learning skills or knowledge needed for a specific task or job.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 3.70\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 4.70,\n\"dialogue\": {\n\"text\": \"Good morning. I'm James. I'm here to help you with your training.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 5.20\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1462,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df5d14291b56887825276.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3499bb26478bb52e53062a1e52f3c157",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e3c159dc94c6e33ba6115.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e3c159dc94c6e33ba6115\ntitle: Task 79\nchallengeType: 22\ndashedName: task-79\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nCan you BLANK BLANK yourself?\n--blanks--\nbriefly\n--feedback--\nThis word indicates that the introduction should be short and to the point.\nintroduce\n--feedback--\nMeans to present oneself to others, usually stating your name and basic details.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 4.14,\n\"finishTimestamp\": 5.80\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 2.66,\n\"dialogue\": {\n\"text\": \"Can you briefly introduce yourself?\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 3.16\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1281,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e3c159dc94c6e33ba6115.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7b9d5177568901d3097a6b03d9feae74",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e3ca1c4d9636e9012e1a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e3ca1c4d9636e9012e1a9\ntitle: Task 80\nchallengeType: 19\ndashedName: task-80\n--description--\nJames is making a request to Sophie.\n--questions--\n--text--\nWhat is James asking Sophie to do?\n--answers--\nTo explain the details of a project.\n--feedback--\nThis option doesn't align with the request.\nTo discuss her work experience in depth.\n--feedback--\nHe is not asking for a detailed discussion of work experience.\nTo provide a detailed report of her team's performance.\n--feedback--\nJames's request is not about reporting on team performance.\nTo give a short introduction about herself.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 4.14,\n\"finishTimestamp\": 5.80\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 2.66,\n\"dialogue\": {\n\"text\": \"Can you briefly introduce yourself?\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 3.16\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1486,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e3ca1c4d9636e9012e1a9.md",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d64a3598bf83adf7d2a40b98b39f74b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df6018a70e468f5dc016a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657df6018a70e468f5dc016a\ntitle: Task 78\nchallengeType: 19\ndashedName: task-78\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhat is James communicating?\n--answers--\nThat he is the team leader.\n--feedback--\nJames doesn't mention being a team leader.\nThat he is there to help with training.\nThat he is new to the company.\n--feedback--\nJames's introduction is not about his time at the company.\nThat he is looking for help from the team.\n--feedback--\nJames's introduction is not about asking for help.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 3.70\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 4.70,\n\"dialogue\": {\n\"text\": \"Good morning. I'm James. I'm here to help you with your training.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 5.20\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df6018a70e468f5dc016a.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "199a58bb87012abd8784c0d4568dde8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e3dc46c5a816f0b12fb76.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e3dc46c5a816f0b12fb76\ntitle: Task 81\nchallengeType: 22\ndashedName: task-81\n--description--\nTo manage means to be in charge of or control something. For example, He manages a small team at work means he is responsible for overseeing the team.\nManagement refers to the act or skill of managing. Like, Good time management is important for success.\nProject management combines these skills specifically for projects. It means planning, organizing, and running projects to reach goals. An example is She is learning project management to lead her team better.\n--fillInTheBlank--\n--sentence--\nI'm here to BLANK my BLANK management BLANK. I want to learn more about project BLANK.\n--blanks--\nimprove\n--feedback--\nRefers to making something better or enhancing one's abilities.\nproject\n--feedback--\nRelates to a specific task or plan that needs to be completed.\nskills\n--feedback--\nRefers to the abilities or expertise needed to do something well.\nmanagement\n--feedback--\nThis term relates to the process of handling or overseeing projects effectively.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 7.16,\n\"finishTimestamp\": 13.50\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 7.34,\n\"dialogue\": {\n\"text\": \"Hi, I'm Sophie and I'm here to improve my project management skills. I want to learn more about project management.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 7.84\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e3dc46c5a816f0b12fb76.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b57d4d68802c80c13484dcb6cb0c3483",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e3ec58a1c706fb201d719.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e3ec58a1c706fb201d719\ntitle: Task 82\nchallengeType: 19\ndashedName: task-82\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nHow does Sophie structure her response to James?\n--answers--\nShe first talks about her previous job experience, then asks about the team's goals.\n--feedback--\nSophie's response focuses on her reasons for being there and her learning goals, not past job experiences.\nShe introduces herself, states why she is there, expresses her learning goals, and ends with a greeting.\nShe immediately asks about the project schedule without introducing herself.\n--feedback--\nSophie begins by introducing herself, which is an important part of her response.\nShe only greets James and doesn't provide any information about herself.\n--feedback--\nSophie's response is more comprehensive, including self-introduction and her goals.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"Sophie\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 7.16,\n\"finishTimestamp\": 14.76\n}\n},\n\"commands\": [\n{\n\"character\": \"Sophie\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 1,\n\"finishTime\": 8.60,\n\"dialogue\": {\n\"text\": \"Hi, I'm Sophie and I'm here to improve my project management skills. I want to learn more about project management. Nice to meet you, James.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"opacity\": 0,\n\"startTime\": 9.10\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e3ec58a1c706fb201d719.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7d0d9b8a5f0c9be0cbef93e53e225c4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4173056b4771208c184d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4173056b4771208c184d\ntitle: Task 84\nchallengeType: 22\ndashedName: task-84\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nThank you, Sophie. We BLANK a BLANK to BLANK about today.\n--blanks--\nhave\n--feedback--\nThis word shows something is related to or belongs to the group.\nlot\n--feedback--\nMeans many or a large amount, used to describe the quantity of something.\ntalk\n--feedback--\nRefers to discussing or speaking about something.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 16.14,\n\"finishTimestamp\": 18.62\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 3.48,\n\"dialogue\": {\n\"text\": \"Thank you, Sophie. We have a lot to talk about today\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 3.98\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1413,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4173056b4771208c184d.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "241b11aae53371345f06065148bc2e08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e408c387898706d4c1b46.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e408c387898706d4c1b46\ntitle: Task 83\nchallengeType: 19\ndashedName: task-83\n--description--\nIn meetings, phrases like We have a lot to talk about today are often used. We have means something belongs or is related to the group. A lot means many or much, and to talk about means there are things to discuss.\nUnderstanding these phrases helps you follow what is planned for a meeting or a discussion.\n--questions--\n--text--\nWhat does James mean with his sentence?\n--answers--\nThere are many topics to discuss in the meeting today.\nThere will be a short meeting with only one topic.\n--feedback--\nThe phrase implies multiple topics, not just one.\nThe meeting will be canceled today.\n--feedback--\nThe phrase suggests a full agenda, not a cancellation.\nToday's meeting is only for team introductions.\n--feedback--\nA lot to talk about means more than just introductions.\n--video-solution--\n1\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1.2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 16.14,\n\"finishTimestamp\": 18.62\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 3.48,\n\"dialogue\": {\n\"text\": \"Thank you, Sophie. We have a lot to talk about today\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 3.98\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1828,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e408c387898706d4c1b46.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aec27eede7c2f43885c903a6ad97c04a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e421f8d8e9871a83cda7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e421f8d8e9871a83cda7f\ntitle: Task 85\nchallengeType: 22\ndashedName: task-85\n--description--\nInsights are valuable thoughts or understanding gained from experience or learning. For example, gaining insights into a project means learning important things about it.\nA training session is a period of time dedicated to learning new skills or information. It's like a class. For instance, attending a training session on communication means going to a class to learn about communication.\n--fillInTheBlank--\n--sentence--\nWe have a lot to talk about today, and I'm sure we'll have great BLANK to share during our BLANK session.\n--blanks--\ninsights\n--feedback--\nRefers to valuable thoughts or understanding gained from experiences.\ntraining\n--feedback--\nThis word is related to learning new skills or information in a structured setting.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 17.08,\n\"finishTimestamp\": 22.32\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 6.24,\n\"dialogue\": {\n\"text\": \"We have a lot to talk today and I'm sure we'll have great insights to share during our training session.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 6.74\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e421f8d8e9871a83cda7f.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bae7cd1d058bdbc09cb47af8b6d66162",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df4ff04eed86814093f0f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657df4ff04eed86814093f0f\ntitle: \"Dialogue 4: A Training Session\"\nchallengeType: 21\ndashedName: dialogue-a-training-session\n--description--\nWatch the video below to understand the context of the upcoming lessons --assignment--\nWatch the video --scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3 png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Sophie\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 }\n}\n],\n\"audio\": {\n\"filename\": \"1 2-4 mp3\",\n\"startTime\": 1\n},\n\"alwaysShowDialogue\": true\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"position\": { \"x\": 25, \"y\": 0, \"z\": 1 },\n\"startTime\": 0\n},\n{\n\"character\": \"Sophie\",\n\"position\": { \"x\": 70, \"y\": 0, \"z\": 1 },\n\"startTime\": 0 5\n},\n{\n\"character\": \"James\",\n\"startTime\": 1 3,\n\"finishTime\": 5 3,\n\"dialogue\": {\n\"text\": \"Good morning I'm James I'm here to help you with your training \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"James\",\n\"startTime\": 5 5,\n\"finishTime\": 7 5,\n\"dialogue\": {\n\"text\": \"Can you briefly introduce yourself \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 7 7,\n\"finishTime\": 12 7,\n\"dialogue\": {\n\"text\": \"Hi, I'm Sophie, and I'm here to improve my project management skills \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 12 9,\n\"finishTime\": 14 9,\n\"dialogue\": {\n\"text\": \"I want to learn more about project management \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"startTime\": 15 1,\n\"finishTime\": 16 3,\n\"dialogue\": {\n\"text\": \"Nice to meet you, James",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3092,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df4ff04eed86814093f0f.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "931cb73685be473318f6fdeb8c7b013e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df4ff04eed86814093f0f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\", \"align\": \"left\" } }, { \"character\": \"Sophie\", \"startTime\": 7 7, \"finishTime\": 12 7, \"dialogue\": { \"text\": \"Hi, I'm Sophie, and I'm here to improve my project management skills \", \"align\": \"right\" } }, { \"character\": \"Sophie\", \"startTime\": 12 9, \"finishTime\": 14 9, \"dialogue\": { \"text\": \"I want to learn more about project management \", \"align\": \"right\" } }, { \"character\": \"Sophie\", \"startTime\": 15 1, \"finishTime\": 16 3, \"dialogue\": { \"text\": \"Nice to meet you, James\",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"James\",\n\"startTime\": 16 5,\n\"finishTime\": 18,\n\"dialogue\": {\n\"text\": \"Thank you, Sophie \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"James\",\n\"startTime\": 18 2,\n\"finishTime\": 20 2,\n\"dialogue\": {\n\"text\": \"We have a lot to talk about today,\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"James\",\n\"startTime\": 20 3,\n\"finishTime\": 23 8,\n\"dialogue\": {\n\"text\": \"and I'm sure we'll have great insights to share during our training session \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"James\",\n\"startTime\": 24,\n\"finishTime\": 25 2,\n\"dialogue\": {\n\"text\": \"Let's get started \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Sophie\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 },\n\"startTime\": 25 2\n},\n{\n\"character\": \"James\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 25 7\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3092,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657df4ff04eed86814093f0f.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f4796194779779e20f11989bc1ca7466",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e428ed1d56c720561e571.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e428ed1d56c720561e571\ntitle: Task 86\nchallengeType: 19\ndashedName: task-86\n--description--\nLet's get started is a phrase used to initiate an activity, meeting, or session. It signals that it's time to begin the planned activities. For example, at the start of a meeting, someone might say, Let's get started with the first topic.\n--questions--\n--text--\nWhat does the phrase Let's get started typically mean in a meeting?\n--answers--\nIt's a request for everyone to leave the meeting.\n--feedback--\nLet's get started is about beginning something, not ending it or leaving.\nIt means to begin the meeting or start the planned activities.\nIt's an instruction to stop working and take a break.\n--feedback--\nThe phrase is used to initiate work or activity, not to take breaks.\nIt indicates that the meeting will continue later.\n--feedback--\nLet's get started is used for starting immediately, not for postponing.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3.png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": {\"x\":50,\"y\":15,\"z\":1.2},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-4.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 22.80,\n\"finishTimestamp\": 23.70\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 1.90,\n\"dialogue\": {\n\"text\": \"Let's get started!\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 2.40\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1740,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e428ed1d56c720561e571.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e648780f4812990ff86b5eb16c4b2397",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e496dda7af77d6798e7f7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e496dda7af77d6798e7f7\ntitle: Task 89\nchallengeType: 22\ndashedName: task-89\n--description--\nA corporation is a type of business or company. It's a legal entity that is separate from its owners. Corporations can own property, be sued, and make contracts.\n--fillInTheBlank--\n--sentence--\nWelcome, BLANK. Today, we have with us our BLANK from FCC BLANK.\n--blanks--\neveryone\n--feedback--\nThis word is used to address all the people present.\nclients\n--feedback--\nRefers to customers or companies that receive services or goods from another business.\ncorporation\n--feedback--\nA type of business entity that is legally separate from its owners.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Maria\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.5},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 4.74\n}\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 5.74,\n\"dialogue\": {\n\"text\": \"Welcome everyone. Today we have with us our clients from FCC Corporation.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Maria\",\n\"opacity\": 0,\n\"startTime\": 6.24\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e496dda7af77d6798e7f7.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1b5daaff818a254449e65d96da89bc00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4ab5b857f77e36c82a4d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4ab5b857f77e36c82a4d\ntitle: Task 91\nchallengeType: 19\ndashedName: task-91\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhat is Maria planning to do based on what she says to David?\n--answers--\nShe plans to take a break and resume the meeting later.\n--feedback--\nThe statement is about introducing and explaining, not about taking a break.\nShe is going to introduce the team and give a short explanation of their work.\nShe intends to ask David for his opinion on the team's work.\n--feedback--\nMaria's focus is on introducing the team and explaining their role, not on seeking opinions.\nShe wants to discuss the financial aspects of the team's work.\n--feedback--\nThe audio indicates an introduction and overview of work, not a financial discussion.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Maria\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.5},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 5.44,\n\"finishTimestamp\": 8.68\n}\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 4.24,\n\"dialogue\": {\n\"text\": \"David, let me introduce the team and briefly explain what we do.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Maria\",\n\"opacity\": 0,\n\"startTime\": 4.74\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4ab5b857f77e36c82a4d.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "85f6370aca3f97dacdd6886a760e8055",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e49f3ee34e67dbe0d8848.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e49f3ee34e67dbe0d8848\ntitle: Task 90\nchallengeType: 19\ndashedName: task-90\n--description--\nA representative is a person chosen or appointed to speak or act on behalf of others. In a business context, representatives from a company attend meetings to discuss their needs or collaborate on projects.\nFor example, He is our representative at the conference means he is the person attending the conference to represent the interests of his company.\n--questions--\n--text--\nWho is Maria introducing to the team?\n--answers--\nTheir new team member.\n--feedback--\nMaria doesn't mention a new team member.\nThe clients from FCC Corporation.\nThe company's new CEO.\n--feedback--\nThe introduction is about clients from another company, not about a CEO.\nThe cleaning staff.\n--feedback--\nMaria is introducing business clients, not staff members.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Maria\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.5},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 0.00,\n\"finishTimestamp\": 4.74\n}\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 5.74,\n\"dialogue\": {\n\"text\": \"Welcome everyone. Today we have with us our clients from FCC Corporation.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Maria\",\n\"opacity\": 0,\n\"startTime\": 6.24\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e49f3ee34e67dbe0d8848.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c45d7df4c338ad5107ccbc2bc546395a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e42d9cf8693725896cc49.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e42d9cf8693725896cc49\ntitle: Task 87\nchallengeType: 22\ndashedName: task-87\n--description--\nListen to the audio and fill in the missing words --fillInTheBlank--\n--sentence--\nThank you, Sophie We have a BLANK to talk about today, and I'm BLANK we'll have great BLANK to BLANK during our BLANK session Let's get BLANK --blanks--\nlot\n--feedback--\nRefers to a large amount or many, often used to describe the quantity of something sure\n--feedback--\nMeans confident or certain about something insights\n--feedback--\nValuable thoughts or understanding gained from experience share\n--feedback--\nMeans to give a part of something to others or to let others use something together training\n--feedback--\nRelated to learning or teaching new skills or information started\n--feedback--\nIndicates beginning something, used here to start the meeting or session --scene--\njson\n{\n\"setup\": {\n\"background\": \"interview-room3 png\",\n\"characters\": [\n{\n\"character\": \"James\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1 2-4 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 16 14,\n\"finishTimestamp\": 23 7\n}\n},\n\"commands\": [\n{\n\"character\": \"James\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"James\",\n\"startTime\": 1,\n\"finishTime\": 3 1,\n\"dialogue\": {\n\"text\": \"Thank you, Sophie We have a lot to talk about today,\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"startTime\": 3 1,\n\"finishTime\": 6 8,\n\"dialogue\": {\n\"text\": \"and I'm sure we'll have great insights to share during our training session \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"startTime\": 6 8,\n\"finishTime\": 8 56,\n\"dialogue\": {\n\"text\": \"Let's get started \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"James\",\n\"opacity\": 0,\n\"startTime\": 9 06\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e42d9cf8693725896cc49.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7285a0908181f416448781832e322fcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4cd7f87d4f7f6954446d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4cd7f87d4f7f6954446d\ntitle: Task 94\nchallengeType: 19\ndashedName: task-94\n--description--\nListen to the audio and answer the question --questions--\n--text--\nWho is responsible for the coordinating efforts and the technical aspects in the project --answers--\nBob is responsible for both coordinating efforts and technical aspects --feedback--\nThe audio indicates different roles for Bob and Maria Maria is responsible for technical aspects, and Bob for coordinating efforts Both Maria and Bob are responsible for marketing --feedback--\nThe responsibilities mentioned are different from marketing Maria is in charge of client relations, and Bob handles technical support --feedback--\nListen again to understand their specific roles as mentioned --video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Maria\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1 5 },\n\"opacity\": 0\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1 2-5 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 9 18,\n\"finishTimestamp\": 19 08\n}\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 5 18,\n\"dialogue\": {\n\"text\": \"I'm Maria, the lead developer I'm responsible for the technical aspects of the project \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Maria\",\n\"opacity\": 0,\n\"startTime\": 5 18\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 5 19\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 5 19,\n\"finishTime\": 10 9,\n\"dialogue\": {\n\"text\": \"This is Bob, the project manager He's responsible for coordinating our efforts to meet your needs \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 11 4\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2421,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4cd7f87d4f7f6954446d.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4f2f8cca9286fd06f9009d03096fb18a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4c1f0bd3e97ef2d46644.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4c1f0bd3e97ef2d46644\ntitle: Task 93\nchallengeType: 19\ndashedName: task-93\n--description--\nTo meet someone's needs means to fulfill or satisfy what someone requires or wants In a project, this could mean making sure that the work done fits the client's requirements For example, Our team works hard to meet the client's needs means the team aims to do what the client wants This phrase is often used in customer service and project management --questions--\n--text--\nWhat are Maria and Bob's roles in the project --answers--\nMaria is the team leader, and Bob is in charge of finances --feedback--\nListen again to their specific responsibilities mentioned in the audio Bob is the lead developer, and Maria manages the schedule --feedback--\nThe audio describes different roles for Maria and Bob Maria is responsible for technical aspects, and Bob coordinates the team's efforts They both are responsible for marketing the project --feedback--\nTheir roles are focused on development and management, not marketing --video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Maria\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1 5 },\n\"opacity\": 0\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1 2-5 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 9 18,\n\"finishTimestamp\": 19 08\n}\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 5 18,\n\"dialogue\": {\n\"text\": \"I'm Maria, the lead developer I'm responsible for the technical aspects of the project \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Maria\",\n\"opacity\": 0,\n\"startTime\": 5 18\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 5 19\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 5 19,\n\"finishTime\": 10",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2695,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4c1f0bd3e97ef2d46644.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a532ee68e3ceb5b0f2d98e3bd34ba087",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4c1f0bd3e97ef2d46644.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"startTime\": 1, \"startTimestamp\": 9 18, \"finishTimestamp\": 19 08 } }, \"commands\": [ { \"character\": \"Maria\", \"opacity\": 1, \"startTime\": 0 }, { \"character\": \"Maria\", \"startTime\": 1, \"finishTime\": 5 18, \"dialogue\": { \"text\": \"I'm Maria, the lead developer I'm responsible for the technical aspects of the project \", \"align\": \"center\" } }, { \"character\": \"Maria\", \"opacity\": 0, \"startTime\": 5 18 }, { \"character\": \"Bob\", \"opacity\": 1, \"startTime\": 5 19 }, { \"character\": \"Maria\", \"startTime\": 5 19, \"finishTime\": 109,\n\"dialogue\": {\n\"text\": \"This is Bob, the project manager He's responsible for coordinating our efforts to meet your needs \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 11 4\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2695,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4c1f0bd3e97ef2d46644.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d7e9dd932d888e0cbed7e59e30d3caae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4b7d381d567e8d97967c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4b7d381d567e8d97967c\ntitle: Task 92\nchallengeType: 22\ndashedName: task-92\n--description--\nTo coordinate means to arrange for things to work together effectively For example, She coordinates the team's meetings means she arranges the meetings so everyone can attend Efforts are the attempts or hard work put into doing something Like, His efforts in the project were noticeable Coordinating efforts in a project means organizing everyone's work so the project is successful It's like making sure all parts of a puzzle fit together --fillInTheBlank--\n--sentence--\nI'm responsible for the BLANK aspects of the project He's responsible for BLANK our BLANK to meet your needs --blanks--\ntechnical\n--feedback--\nRefers to skills or knowledge related to the practical use of machines or science coordinating\n--feedback--\nMeans arranging or organizing things to work together effectively This word ends in -ing\nefforts\n--feedback--\nRefers to the attempts or hard work put into doing something --scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Maria\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1 5 },\n\"opacity\": 0\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 50, \"y\": 15, \"z\": 1 2 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1 2-5 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 9 18,\n\"finishTimestamp\": 19 08\n}\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 5 18,\n\"dialogue\": {\n\"text\": \"I'm Maria, the lead developer I'm responsible for the technical aspects of the project \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Maria\",\n\"opacity\": 0,\n\"startTime\": 5 18\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 1,\n\"startTime\": 5 19\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 5 19,\n\"finishTime\": 10",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2656,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4b7d381d567e8d97967c.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bf1f21c0fb7000aac136beea81e69f64",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4b7d381d567e8d97967c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"startTime\": 1, \"startTimestamp\": 9 18, \"finishTimestamp\": 19 08 } }, \"commands\": [ { \"character\": \"Maria\", \"opacity\": 1, \"startTime\": 0 }, { \"character\": \"Maria\", \"startTime\": 1, \"finishTime\": 5 18, \"dialogue\": { \"text\": \"I'm Maria, the lead developer I'm responsible for the technical aspects of the project \", \"align\": \"center\" } }, { \"character\": \"Maria\", \"opacity\": 0, \"startTime\": 5 18 }, { \"character\": \"Bob\", \"opacity\": 1, \"startTime\": 5 19 }, { \"character\": \"Maria\", \"startTime\": 5 19, \"finishTime\": 109,\n\"dialogue\": {\n\"text\": \"This is Bob, the project manager He's responsible for coordinating our efforts to meet your needs \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Bob\",\n\"opacity\": 0,\n\"startTime\": 11 4\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2656,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4b7d381d567e8d97967c.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4f92f9dceb76832e2b86f83ad14444af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4db2e3fc8d7fb41b8b85.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4db2e3fc8d7fb41b8b85\ntitle: Task 95\nchallengeType: 22\ndashedName: task-95\n--description--\nListen to the audio and fill in the missing word.\n--fillInTheBlank--\n--sentence--\nHey, Bob. How's it BLANK?\n--blanks--\ngoing\n--feedback--\nThis word is used to inquire about someone's current state or activities.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 19.54,\n\"finishTimestamp\": 20.90\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 2.36,\n\"dialogue\": {\n\"text\": \"Hey Bob, how's it going?\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 2.86\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4db2e3fc8d7fb41b8b85.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f588bfb4477e64eb00f36823bddeb364",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e47d5fa5dea7cbdaf484b\ntitle: \"Dialogue 5: Meeting a Client\"\nchallengeType: 21\ndashedName: dialogue-meeting-a-client\n--description--\nWatch the video below to understand the context of the upcoming lessons --assignment--\nWatch the video\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom png\",\n\"characters\": [\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Sarah\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"Maria\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }\n},\n{\n\"character\": \"David\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 }\n}\n],\n\"audio\": {\n\"filename\": \"1 2-5 mp3\",\n\"startTime\": 1\n},\n\"alwaysShowDialogue\": true\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"position\": { \"x\": 30, \"y\": 0, \"z\": 1 },\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"position\": { \"x\": 70, \"y\": 0, \"z\": 1 },\n\"startTime\": 0 5\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1 3,\n\"finishTime\": 2 5,\n\"dialogue\": {\n\"text\": \"Welcome, everyone \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 3,\n\"finishTime\": 6 5,\n\"dialogue\": {\n\"text\": \"Today, we have with us our clients from FCC Corporation \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 6 7,\n\"finishTime\": 10 2,\n\"dialogue\": {\n\"text\": \"David, let me introduce the team and briefly explain what we do",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "f20014a87ef0c8cc025a38353a39675a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"z\": 1 }, \"startTime\": 0 5 }, { \"character\": \"Maria\", \"startTime\": 1 3, \"finishTime\": 2 5, \"dialogue\": { \"text\": \"Welcome, everyone \", \"align\": \"left\" } }, { \"character\": \"Maria\", \"startTime\": 3, \"finishTime\": 6 5, \"dialogue\": { \"text\": \"Today, we have with us our clients from FCC Corporation \", \"align\": \"left\" } }, { \"character\": \"Maria\", \"startTime\": 6 7, \"finishTime\": 10 2, \"dialogue\": { \"text\": \"David, let me introduce the team and briefly explain what we do\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 10 3,\n\"finishTime\": 11 8,\n\"dialogue\": {\n\"text\": \"I'm Maria, the lead developer \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 12,\n\"finishTime\": 15 2,\n\"dialogue\": {\n\"text\": \"I'm responsible for the technical aspects of the project \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": 15, \"y\": 0, \"z\": 1 },\n\"startTime\": 15 4\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 15 4,\n\"finishTime\": 17 4,\n\"dialogue\": {\n\"text\": \"This is Bob, the project manager \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 17 6,\n\"finishTime\": 20 6,\n\"dialogue\": {\n\"text\": \"He's responsible for coordinating our efforts to meet your needs \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"David\",\n\"startTime\": 20 8,\n\"finishTime\": 22 8,\n\"dialogue\": {\n\"text\": \"Hey, Bob How's it going \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Bob\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 22",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6e9123910641ecb93b7b346e4c55533e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ \"text\": \"This is Bob, the project manager \", \"align\": \"left\" } }, { \"character\": \"Maria\", \"startTime\": 17 6, \"finishTime\": 20 6, \"dialogue\": { \"text\": \"He's responsible for coordinating our efforts to meet your needs \", \"align\": \"left\" } }, { \"character\": \"David\", \"startTime\": 20 8, \"finishTime\": 22 8, \"dialogue\": { \"text\": \"Hey, Bob How's it going \", \"align\": \"right\" } }, { \"character\": \"Bob\", \"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }, \"startTime\": 229\n},\n{\n\"character\": \"Sarah\",\n\"position\": { \"x\": 15, \"y\": 0, \"z\": 1 },\n\"startTime\": 23\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 23,\n\"finishTime\": 26,\n\"dialogue\": {\n\"text\": \"This is Sarah, the senior developer \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 26 2,\n\"finishTime\": 29 2,\n\"dialogue\": {\n\"text\": \"She and I work together to ensure the project's success \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"David\",\n\"startTime\": 29 4,\n\"finishTime\": 31,\n\"dialogue\": {\n\"text\": \"Great to meet you, Sarah \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 31\n},\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 15, \"y\": 0, \"z\": 1 },\n\"startTime\": 31 1\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 31 2,\n\"finishTime\": 33 7,\n\"dialogue\": {\n\"text\": \"And this is Linda, she's our UX/UI designer \",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 33 9,\n\"finishTime\": 37 9,\n\"dialogue\": {\n\"text\": \"She works in user experience and she creates our interface design",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f2c42c307e1ba8e7013980b45d05c271",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 }, \"startTime\": 31 }, { \"character\": \"Linda\", \"position\": { \"x\": 15, \"y\": 0, \"z\": 1 }, \"startTime\": 31 1 }, { \"character\": \"Maria\", \"startTime\": 31 2, \"finishTime\": 33 7, \"dialogue\": { \"text\": \"And this is Linda, she's our UX/UI designer \", \"align\": \"left\" } }, { \"character\": \"Maria\", \"startTime\": 33 9, \"finishTime\": 37 9, \"dialogue\": { \"text\": \"She works in user experience and she creates our interface design\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"David\",\n\"startTime\": 37 9,\n\"finishTime\": 39 5,\n\"dialogue\": {\n\"text\": \"Wonderful to meet you all \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 39 6\n},\n{\n\"character\": \"David\",\n\"startTime\": 39 7,\n\"finishTime\": 42 2,\n\"dialogue\": {\n\"text\": \"I'm David, the project manager from FCC Corp \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"David\",\n\"startTime\": 42 4,\n\"finishTime\": 46 9,\n\"dialogue\": {\n\"text\": \"I'll be your point of contact and I'll make sure our collaboration is great \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"David\",\n\"startTime\": 47 1,\n\"finishTime\": 49 6,\n\"dialogue\": {\n\"text\": \"We're excited about this project \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"David\",\n\"startTime\": 49 8,\n\"finishTime\": 52 3,\n\"dialogue\": {\n\"text\": \"I'm confident that we can achieve great results \",\n\"align\": \"right\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 52 5,\n\"finishTime\": 53 5,\n\"dialogue\": {\n\"text\": \"Thanks",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "62e1fedd1eb4c7fc5cbfd9c224669aa3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "point of contact and I'll make sure our collaboration is great \", \"align\": \"right\" } }, { \"character\": \"David\", \"startTime\": 47 1, \"finishTime\": 49 6, \"dialogue\": { \"text\": \"We're excited about this project \", \"align\": \"right\" } }, { \"character\": \"David\", \"startTime\": 49 8, \"finishTime\": 52 3, \"dialogue\": { \"text\": \"I'm confident that we can achieve great results \", \"align\": \"right\" } }, { \"character\": \"Maria\", \"startTime\": 52 5, \"finishTime\": 53 5, \"dialogue\": { \"text\": \"Thanks\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 53 7,\n\"finishTime\": 56 2,\n\"dialogue\": {\n\"text\": \"Now let's get started with the project details\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 56 2,\n\"finishTime\": 58 7,\n\"dialogue\": {\n\"text\": \"and your specific requirements, David…\",\n\"align\": \"left\"\n}\n},\n{\n\"character\": \"David\",\n\"position\": { \"x\": 125, \"y\": 0, \"z\": 1 },\n\"startTime\": 58 7\n},\n{\n\"character\": \"Maria\",\n\"position\": { \"x\": -25, \"y\": 0, \"z\": 1 },\n\"startTime\": 59 2\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e47d5fa5dea7cbdaf484b.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "4430f49bdd84060543959b855eb804de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4fd2ecf31280ef673f0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4fd2ecf31280ef673f0d\ntitle: Task 98\nchallengeType: 19\ndashedName: task-98\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhat does Linda do?\n--answers--\nShe manages the company's finances.\n--feedback--\nThe introduction clearly states Linda's role in design, not in finance management.\nShe is responsible for marketing and sales.\n--feedback--\nLinda's role is described as related to design, not marketing and sales.\nShe works in user experience and creates interface design.\nShe is in charge of human resources.\n--feedback--\nMaria's introduction mentions Linda's work in design, not human resources.\n--video-solution--\n3\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Linda\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.5 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 30.12,\n\"finishTimestamp\": 36.08\n}\n},\n\"commands\": [\n{\n\"character\": \"Linda\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 6.96,\n\"dialogue\": {\n\"text\": \"And this is Linda. She's our UX UI designer. She works in user experience and she creates our interface design.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Linda\",\n\"opacity\": 0,\n\"startTime\": 7.46\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1710,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4fd2ecf31280ef673f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d61f2b00223c9750394ed659bb7467cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4e3b02a2128049c344c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4e3b02a2128049c344c8\ntitle: Task 97\nchallengeType: 22\ndashedName: task-97\n--description--\nListen to the audio and fill in the missing words.\n--fillInTheBlank--\n--sentence--\nBLANK to BLANK you, Sarah.\n--blanks--\nGreat\n--feedback--\nThis word expresses positivity or satisfaction about something, in this case, meeting someone. This word is capitalized.\nmeet\n--feedback--\nRefers to the act of being introduced to someone for the first time.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 27.38,\n\"finishTimestamp\": 29.06\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 2.68,\n\"dialogue\": {\n\"text\": \"Great to meet you, Sarah.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 3.18\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4e3b02a2128049c344c8.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3edb6da66c6ccc205d013976a4f41ed4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4de2c8c70a7ff7e1546d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e4de2c8c70a7ff7e1546d\ntitle: Task 96\nchallengeType: 19\ndashedName: task-96\n--description--\nTo ensure means to make certain or guarantee that something happens. For example, We ensure quality by checking every product means they make sure every product is good.\nIn a project, ensuring success means doing things that help the project succeed, like planning well or solving problems quickly.\n--questions--\n--text--\nWhat do Maria and Sarah work together to do?\n--answers--\nTo write reports for the company.\n--feedback--\nThe focus is on project success, not just writing reports.\nTo organize team meetings.\n--feedback--\nWhile important, the statement specifically mentions ensuring the project's success.\nTo plan company events.\n--feedback--\nTheir collaboration is centered around the project, not event planning.\nTo ensure the project's success.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Sarah\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.5},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 22.22,\n\"finishTimestamp\": 27.38\n}\n},\n\"commands\": [\n{\n\"character\": \"Sarah\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 6.16,\n\"dialogue\": {\n\"text\": \"And this is Sarah, the senior developer. She and I work together to ensure the project's success.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Sarah\",\n\"opacity\": 0,\n\"startTime\": 6.66\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e4de2c8c70a7ff7e1546d.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a98975d8de68852baff60cece2114723",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e51218ff18f8191b76ea9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e51218ff18f8191b76ea9\ntitle: Task 99\nchallengeType: 22\ndashedName: task-99\n--description--\nWonderful to meet you means the speaker is happy to be introduced to others. For example:\nPerson 1: Let me introduce you Maria.\nMaria: Hello everyone, wonderful to meet you all. - This means Maria feels good about meeting the group for the first time.\nCorp. is a contraction for corporation, which is a large company or group of companies.\nCompanies usually have many kinds of employees. Some do a lot of talking, planning, and asking for updates in meetings. These people are often called managers.\n--fillInTheBlank--\n--sentence--\nBLANK to meet you all. I'm David, the project BLANK from FCC Corp.\n--blanks--\nWonderful\n--feedback--\nExpresses David's positive feeling about meeting the group. The first letter is capitalized.\nmanager\n--feedback--\nThis word tells David's role in the company. It is the singular form of managers.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 37.24,\n\"finishTimestamp\": 41.84\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 5.60,\n\"dialogue\": {\n\"text\": \"Wonderful to meet you all. I'm David, the project manager from FCC Corp.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 6.10\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e51218ff18f8191b76ea9.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ebb2c38a65329048f073c3dd0022f05c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e523fcaaa0e823b3789e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e523fcaaa0e823b3789e5\ntitle: Task 100\nchallengeType: 19\ndashedName: task-100\n--description--\nThis task is designed to assess your understanding of David's introduction and his role within his organization.\n--questions--\n--text--\nWhat is David's role at FCC Corp?\n--answers--\nHe is a team member from Maria's team.\n--feedback--\nHe's not part of Maria's team.\nHe is a project consultant at FCC Corp.\n--feedback--\nWhile David is involved in projects, this is not his role.\nHe is a doctor from FCC Corp.\n--feedback--\nDavid is not a doctor.\nHe is the project manager from FCC Corp.\n--video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 37.24,\n\"finishTimestamp\": 41.84\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 5.60,\n\"dialogue\": {\n\"text\": \"Wonderful to meet you all. I'm David, the project manager from FCC Corp.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 6.10\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1568,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e523fcaaa0e823b3789e5.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0e1cca75bf3e1c3707eb1bf14a9a662d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e54f51fe1c983d840cb70.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e54f51fe1c983d840cb70\ntitle: Task 103\nchallengeType: 19\ndashedName: task-103\n--description--\nListen to the audio and answer the question.\n--questions--\n--text--\nWhat is David's role in this collaboration?\n--answers--\nHe is committed to providing technical support.\n--feedback--\nDavid doesn't work with technical support.\nHe is dedicated to ensuring effective collaboration.\nHe will lead the project team.\n--feedback--\nMaria is the lead.\nHe will manage the project's finances.\n--feedback--\nDavid doesn't mention finances\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 42.10,\n\"finishTimestamp\": 46.32\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 5.22,\n\"dialogue\": {\n\"text\": \"I'll be your point of contact and I'll make sure our collaboration is great.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 5.72\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e54f51fe1c983d840cb70.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a349e4b187f6c87c17e1ab326342296c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e5477269b94834908826f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e5477269b94834908826f\ntitle: Task 102\nchallengeType: 22\ndashedName: task-102\n--description--\nCollaboration refers to working together with others to achieve a common goal.\n--fillInTheBlank--\n--sentence--\nI'll be your BLANK of contact and I'll help make sure our BLANK is great.\n--blanks--\npoint\n--feedback--\nIndicates the person to connect with for project-related matters.\ncollaboration\n--feedback--\nCollaboration signifies the process of working jointly with others, emphasizing teamwork and cooperative effort.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 42.10,\n\"finishTimestamp\": 46.32\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 5.22,\n\"dialogue\": {\n\"text\": \"I'll be your point of contact and I'll make sure our collaboration is great.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 5.72\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e5477269b94834908826f.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "42125a5b1686160c389853aeee8cfc4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e539471b4aa82c7402c15.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e539471b4aa82c7402c15\ntitle: Task 101\nchallengeType: 19\ndashedName: task-101\n--description--\nPoint of contact refers to the person you can talk to or ask questions when you need help or information.\nThis person acts as the main communicator or liaison for a specific matter or project. For example, Laura is our point of contact for the new project means you can go to Laura for information or assistance related to that project.\n--questions--\n--text--\nWhat is David's role as he mentions in his statement?\n--answers--\nHe is the lead developer on the project.\n--feedback--\nThis choice isn't correct. David's role as a point of contact doesn't specifically imply he's the lead developer.\nHe is the team's main contact for communication and collaboration.\nHe is responsible for handling all the technical issues in the project.\n--feedback--\nWhile David might assist with issues, his stated role is more about communication and support, not solely technical problems.\nHe is the external consultant for the team.\n--feedback--\nDavid's role as a point of contact suggests he is part of the team, not an external consultant.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 42.10,\n\"finishTimestamp\": 46.32\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 5.22,\n\"dialogue\": {\n\"text\": \"I'll be your point of contact and I'll make sure our collaboration is great.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 5.72\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2127,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e539471b4aa82c7402c15.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2a8475a39fc9b34eda886d25199851f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e55e612fac9847dc7ce03.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e55e612fac9847dc7ce03\ntitle: Task 104\nchallengeType: 22\ndashedName: task-104\n--description--\nThe task focuses on expressions of enthusiasm and confidence in a project setting.\n--fillInTheBlank--\n--sentence--\nBLANK excited about this project. BLANK confident that BLANK can achieve great results.\n--blanks--\nWe're\n--feedback--\nContracted for of a pronoun that talks about a group including the person who is speaking and the verb to be.\nI'm\n--feedback--\nContracted for of a pronoun and verb to be.\nwe\n--feedback--\nPronoun that talks about a group including the person who is speaking.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": {\"x\":50,\"y\":0,\"z\":1.4},\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 46.84,\n\"finishTimestamp\": 51.00\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 5.16,\n\"dialogue\": {\n\"text\": \"We're excited about this project. I'm confident that we can achieve great results.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 5.66\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1566,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e55e612fac9847dc7ce03.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7148a378e962337d7af34800a1f7dbee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c7717e93e15e498d93b5af.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67c7717e93e15e498d93b5af\ntitle: Task 23\nchallengeType: 22\ndashedName: task-23\n--description--\nThis is a review of the entire dialogue you just studied.\n--instructions--\nWrite the following words or phrases in the correct spot:\naboard, our projects, previous, part of, their, and nice to have.\n--fillInTheBlank--\n--sentence--\nAlice: Hi, everyone! My name is Alice, and I'm happy to be BLANK the team. I'm a programmer and I love creating software that helps people in BLANK daily activities. In my BLANK job, I developed mobile apps for small businesses. I really want to collaborate with you and to contribute to BLANK here at the company.\nBob: It's BLANK you here, Alice. I'm Bob, the project manager. Welcome BLANK. I'm sure your experience will be of great help to us.\n--blanks--\npart of\n--feedback--\nThis indicates belonging to a group or team. It begins with a noun meaning a section or piece of something followed by a preposition showing inclusion.\ntheir\n--feedback--\nThis refers to something that belongs to other people. It is used before a noun.\nprevious\n--feedback--\nThis describes something that happened before the present time. It is commonly used to talk about past experiences or jobs.\nour projects\n--feedback--\nThis refers to work or tasks that belong to a group. It begins with a possessive adjective followed by a noun meaning \"planned work with a specific goal\".\nnice to have\n--feedback--\nThis expresses that something is welcome or beneficial. It begins with an adjective meaning \"pleasant\" followed by a preposition, then a verb meaning \"to own\".\naboard\n--feedback--\nCombined with welcome, this is used to wish someone a good start in a team, company, or organization.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c7717e93e15e498d93b5af.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5fb986501fb484e8464ed4b5c064cb90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e57c429a4dc8662a61c96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e57c429a4dc8662a61c96\ntitle: Task 106\nchallengeType: 22\ndashedName: task-106\n--description--\nSpecific means something very clear and exact. For example, The client has specific goals for the project means the client's goals are clear.\nRequirements are things that are needed. Like when you have a list of things you must do for a project. For example, The project has several key requirements refers to essential tasks or conditions for the project.\nSpecific requirements means very clear and exact things you need to do. Like a list that tells you exactly what to do for a project. It combines the clarity of specific with the needs of requirements. Like saying, We need to meet the specific requirements of the client which means meeting the precise needs or conditions the client has set.\n--fillInTheBlank--\n--sentence--\nThanks. Now let's BLANK started with the BLANK details and your specific BLANK, David…\n--blanks--\nget\n--feedback--\nMeans to begin, in this case, with the project.\nproject\n--feedback--\nRefers to the particular task or plan that Maria and David are discussing.\nrequirements\n--feedback--\nIndicates the needs or conditions that David has for the project.\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Maria\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.5 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 52.12,\n\"finishTimestamp\": 56.54\n}\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 5.42,\n\"dialogue\": {\n\"text\": \"Thanks. Now let's get started with the project details and your specific requirements, David.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Maria\",\n\"opacity\": 0,\n\"startTime\": 5.92\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2205,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e57c429a4dc8662a61c96.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e6e720b934ed4fe2c9085e540d87038e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e59605c6f688785fbb46d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e59605c6f688785fbb46d\ntitle: Task 107\nchallengeType: 19\ndashedName: task-107\n--description--\nThis task checks your understanding of a conversation about beginning work on a project. It's important to grasp what is being planned and what is needed for a project in professional settings.\n--questions--\n--text--\nWhat is Maria suggesting they do next?\n--answers--\nShe is thanking David and ending the meeting.\n--feedback--\nMaria is not ending the meeting.\nShe is proposing to start discussing the project details and David's needs for the project.\nShe is asking David to take over the meeting.\n--feedback--\nMaria is not asking David to take over the meeting.\nShe is asking David to provide a summary of the project.\n--feedback--\nMaria is not asking for a summary.\n--video-solution--\n2\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom.png\",\n\"characters\": [\n{\n\"character\": \"Maria\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1.5 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1.2-5.mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 52.12,\n\"finishTimestamp\": 56.54\n}\n},\n\"commands\": [\n{\n\"character\": \"Maria\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"Maria\",\n\"startTime\": 1,\n\"finishTime\": 5.42,\n\"dialogue\": {\n\"text\": \"Thanks. Now let's get started with the project details and your specific requirements, David.\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"Maria\",\n\"opacity\": 0,\n\"startTime\": 5.92\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e59605c6f688785fbb46d.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5a20a1b2c0e18fb685c749d2151b5da2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c772faaccc414b3666a7a0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67c772faaccc414b3666a7a0\ntitle: Task 48\nchallengeType: 22\ndashedName: task-48\n--description--\nThis is a review of the entire dialogue you just studied.\n--instructions--\nWrite the following words or phrases in the correct spot:\nintroduce you all, Finally, senior, learning, Alright, working on, and starting.\n--fillInTheBlank--\n--sentence--\nBob: BLANK, team. This is Alice's first day with us, so please let me BLANK to her. Well, I'm Bob, your project manager. I'm really happy to see new faces joining the team. This is Sarah, the BLANK software developer. She has been with the company for five years now, BLANK several projects. This is John, the database administrator. He's been here for three years. He makes sure our data is secure and efficient. BLANK, this is Linda, our UX/UI designer. She joined the team last year. She loves creating user-friendly interfaces. Everybody, let's welcome Alice to the team.\nAlice: Great! Thanks, everybody! Well, I'm Alice. I'm BLANK as a junior developer today. I really like BLANK new things and can't wait to start contributing to our projects.\n--blanks--\nAlright\n--feedback--\nThis is an informal greeting used to get attention or start a conversation.\nintroduce you all\n--feedback--\nThis is used when presenting a group of people to someone. It begins with a verb meaning \"to make someone known\", followed by a pronoun, and a word that emphasizes the entire group.\nsenior\n--feedback--\nThis describes someone with more experience in a role or profession.\nworking on\n--feedback--\nThis describes \"being engaged in a task or project\". It begins with a verb followed by a preposition.\nFinally\n--feedback--\nThis is used to introduce the last item in a sequence or list.\nstarting\n--feedback--\nThis means beginning something new, such as a job or project.\nlearning\n--feedback--\nThis describes the process of gaining knowledge or skills in something new.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c772faaccc414b3666a7a0.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4f8fdbd23f0d735754f0b230c5f77e73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e56e7034d2d858b6e9e00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e56e7034d2d858b6e9e00\ntitle: Task 105\nchallengeType: 19\ndashedName: task-105\n--description--\nIn this task, you will focus on understanding references made in a conversation David uses the word we twice in his statement, each time referring to different groups It's important in conversations to understand who is being talked about or represented, especially in professional settings --questions--\n--text--\nIn David's statement, what do the two uses of we refer to --answers--\nBoth refer to David and his team at FCC Corp --feedback--\nThe second we is not just about FCC Corp Both refer to the entire group, including Maria's team and FCC Corp --feedback--\nJust the second we indicates the collaboration between both teams The first we refers to Maria's team, and the second we refers to FCC Corp --feedback--\nThis choice reverses the references The first we refers to FCC Corp, and the second we refers to the collaboration between Maria's team and FCC Corp --video-solution--\n4\n--scene--\njson\n{\n\"setup\": {\n\"background\": \"company1-boardroom png\",\n\"characters\": [\n{\n\"character\": \"David\",\n\"position\": { \"x\": 50, \"y\": 0, \"z\": 1 4 },\n\"opacity\": 0\n}\n],\n\"audio\": {\n\"filename\": \"1 2-5 mp3\",\n\"startTime\": 1,\n\"startTimestamp\": 37 24,\n\"finishTimestamp\": 51 0\n}\n},\n\"commands\": [\n{\n\"character\": \"David\",\n\"opacity\": 1,\n\"startTime\": 0\n},\n{\n\"character\": \"David\",\n\"startTime\": 1,\n\"finishTime\": 5 6,\n\"dialogue\": {\n\"text\": \"Wonderful to meet you all I'm David, the project manager from FCC Corp \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"startTime\": 5 6,\n\"finishTime\": 9 82,\n\"dialogue\": {\n\"text\": \"I'll be your point of contact and I'll make sure our collaboration is great \",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"startTime\": 9 82,\n\"finishTime\": 14 76,\n\"dialogue\": {\n\"text\": \"We're excited about this project I'm confident that we can achieve great results",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e56e7034d2d858b6e9e00.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a414934356b2a2d8ff11aff6e569443e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e56e7034d2d858b6e9e00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ \"text\": \"Wonderful to meet you all I'm David, the project manager from FCC Corp \", \"align\": \"center\" } }, { \"character\": \"David\", \"startTime\": 5 6, \"finishTime\": 9 82, \"dialogue\": { \"text\": \"I'll be your point of contact and I'll make sure our collaboration is great \", \"align\": \"center\" } }, { \"character\": \"David\", \"startTime\": 9 82, \"finishTime\": 14 76, \"dialogue\": { \"text\": \"We're excited about this project I'm confident that we can achieve great results\",\n\"align\": \"center\"\n}\n},\n{\n\"character\": \"David\",\n\"opacity\": 0,\n\"startTime\": 15 26\n}\n]\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\657e56e7034d2d858b6e9e00.md",
      "source_type": "git_repo"
    },
    "token_count": 169,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d23c5e9cdcfa8cb5f09bd040c3726d8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c86d68cceb4d498a72fe19.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67c86d68cceb4d498a72fe19\ntitle: Task 88\nchallengeType: 22\ndashedName: task-88\n--description--\nThis is a review of the entire dialogue you just studied.\n--instructions--\nWrite the following words or phrases in the correct spot:\nhave, yourself, here to help, our training, here to improve, and have a lot.\n--fillInTheBlank--\n--sentence--\nJames: Good morning. I'm James and I'm BLANK you with your training. Can you briefly introduce BLANK?\nSophie: Hi, I'm Sophie, and I'm BLANK my project management skills. I want to learn more about project management. Nice to meet you, James.\nJames: Thank you, Sophie. We BLANK to talk about today, and I'm sure we'll BLANK great insights to share during BLANK session. Let's get started!\n--blanks--\nhere to help\n--feedback--\nThis expresses that someone is available to assist another person. It begins with an adverb indicating presence, followed by a preposition, then a verb meaning \"to assist\".\nyourself\n--feedback--\nThis pronoun is used when asking someone to introduce or describe themselves.\nhere to improve\n--feedback--\nThis expresses that someone is present with the goal of developing their skills. It begins with an adverb indicating location followed by a preposition, then a verb meaning \"to make better\".\nhave a lot\n--feedback--\nThis indicates \"possessing a significant amount of something\". It begins with a verb followed by an indefinite article, then a noun meaning \"a large quantity\".\nhave\n--feedback--\nThis means to \"possess or contain something\".\nour training\n--feedback--\nThis refers to a group educational session. It begins with a possessive adjective followed by a noun referring to instruction or practice.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1816,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c86d68cceb4d498a72fe19.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f0b2426ca215af6c68b0d76c329c21d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\add-logic-to-c-sharp-console-applications\\evaluate-boolean-expressions-to-make-decisions-in-c-sharp.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e21708acb466c97ccbee3\ntitle: Evaluate Boolean Expressions to Make Decisions in C#\nchallengeType: 19\ndashedName: evaluate-boolean-expressions-to-make-decisions-in-c-sharp\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/csharp-evaluate-boolean-expressions/ and complete all the tasks for the \"Evaluate Boolean Expressions to Make Decisions in C#\" module. This is required to earn the \"Add Logic to C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Evaluate Boolean Expressions to Make Decisions in C# module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhich of the following lines of code is a valid use of the conditional operator?\n--answers--\nint value = amount >= 10 ? 10 : 20;\nint value = amount >= 10 : 10 ? 20;\nint value = amount >= 10 ? 10 | 20;\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1424,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\add-logic-to-c-sharp-console-applications\\evaluate-boolean-expressions-to-make-decisions-in-c-sharp.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3a6fb1aca9fde93e47b975baae0a1ae8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\add-logic-to-c-sharp-console-applications\\trophy-add-logic-to-c-sharp-console-applications.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647f882207d29547b3bee1c0\ntitle: Trophy - Add Logic to C# Console Applications\nchallengeType: 18\ndashedName: trophy-add-logic-to-c-sharp-console-applications\nmsTrophyId: learn.wwl.get-started-c-sharp-part-3.trophy\n--description--\nNow that you've completed all of the \"Add Logic to C# Console Applications\" challenges, you should have earned the trophy for it on the Microsoft Learn platform. If you don't see this trophy when viewing your achievements page, you have not completed all the tasks and your trophy cannot be verified.\nLink your Microsoft username to your freeCodeCamp account and click the \"Verify Trophy\" button below to complete the challenge. This trophy is required to qualify for the certification exam.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\add-logic-to-c-sharp-console-applications\\trophy-add-logic-to-c-sharp-console-applications.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d7471ad14f2499a0ae1ba869e948df05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\challenge-project-create-a-mini-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e22338acb466c97ccbeed\ntitle: Challenge Project - Create a Mini-Game\nchallengeType: 19\ndashedName: challenge-project-create-a-mini-game\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/challenge-project-create-mini-game/ and complete all the tasks for the \"Challenge Project - Create a Mini-Game\" module. This is required to earn the \"Create Methods in C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Create a Mini-Game challenge project on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nA developer wants to create a method that returns a value in an array. Which of the following options would be a good choice for a method signature?\n--answers--\nstring GetValueAtIndex(string[] array, int index)\nbool GetValueAtIndex(string[] array, int index)\nint GetValueAtIndex(int index)\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\challenge-project-create-a-mini-game.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cb2f37f0a90e2aaaee1923eb8ead76ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-and-run-simple-c-sharp-console-applications\\install-and-configure-visual-studio-code.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e21f88acb466c97ccbeeb\ntitle: Install and Configure Visual Studio Code\nchallengeType: 19\ndashedName: install-and-configure-visual-studio-code\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/install-configure-visual-studio-code/ and complete all the tasks for the \"Install and Configure Visual Studio Code\" module. This is required to earn the \"Create and Run Simple C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Install and Configure Visual Studio Code module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhich of the following choices provides the best description of an Integrated Development Environment (IDE)?\n--answers--\nVisual Studio Code is an Integrated Development Environment.\nAn Integrated Development Environment is tool that makes it easier to write code.\nAn IDE is a suite of tools that supports the full software development lifecycle.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-and-run-simple-c-sharp-console-applications\\install-and-configure-visual-studio-code.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d474868f3e0699ebbf78058466ac4498",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\create-c-sharp-methods-that-return-values.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e223c8acb466c97ccbeee\ntitle: Create C# Methods that Return Values\nchallengeType: 19\ndashedName: create-c-sharp-methods-that-return-values\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/create-c-sharp-methods-return-values/ and complete all the tasks for the \"Create C# Methods that Return Values\" module. This is required to earn the \"Create Methods in C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Create C# Methods that Return Values module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhich of the following options correctly returns a string value?\n--answers--\nreturn \"\";\nreturn 'a';\nreturn 5;\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1279,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\create-c-sharp-methods-that-return-values.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9e70f565f63147e46855ba4f2cb8d1d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\create-c-sharp-methods-with-parameters.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e224b8acb466c97ccbeef\ntitle: Create C# Methods with Parameters\nchallengeType: 19\ndashedName: create-c-sharp-methods-with-parameters\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/create-c-sharp-methods-parameters/ and complete all the tasks for the \"Create C# Methods with Parameters\" module. This is required to earn the \"Create Methods in C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Create C# Methods with Parameters module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nGiven the method signature,\nclike\nvoid Print(string name, string number = \"\", bool member = false)\nWhich of the following options correctly uses named and optional arguments?\n--answers--\nPrint(\"Tony\", member: true);\nPrint(number: \"555\", member: false)\nPrint(\"Tony\", false)\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1428,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\create-c-sharp-methods-with-parameters.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c2ed66f51d84cad1543aaadd6e027dcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c774c74b69734d08b1ecbb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67c774c74b69734d08b1ecbb\ntitle: Task 76\nchallengeType: 22\ndashedName: task-76\n--description--\nThis is a review of the entire dialogue you just studied --instructions--\nWrite the following words or phrases in the correct spot:\neven in, interested in, I'd like to, even if, learn from, and any questions --fillInTheBlank--\n--sentence--\nBob: Good morning, everyone I hope you're all well Today, we have a new member joining our team BLANK introduce Lisa She's our new front-end developer Let me introduce you all briefly This is Sarah, the senior developer You can talk to her any time, BLANK this virtual setting, if you have any questions, Lisa Lisa: Hi, Sarah Thank you I'm excited to work with all of you and BLANK your expertise Bob: This is Tom, our new graphic designer Is there any specific area of design or development you're BLANK He's your go-to guy for that Lisa: Hi, Tom I'm interested in UI/UX design and front-end development, but I'm open to exploring more Bob: And I'm Bob, the team's project manager I'm the person you always need to talk to if you have BLANK about the team's goals and schedule Lisa: Hi, Bob It's great to meet you too Bob: Excellent Lisa, it's great to have you join our team, BLANK just online OK, team Let's help Lisa with the support she needs to start Now here are the topics on today's agenda…\n--blanks--\nI'd like to\n--feedback--\nThis introduces a polite request or desire It begins with a contraction of I and would followed by a verb and then a preposition even in\n--feedback--\nThis emphasizes that something applies regardless of a particular situation It begins with an adverb followed by a preposition learn from\n--feedback--\nThis expresses \"gaining knowledge or skills from someone or something\" It begins with a verb followed by a preposition interested in\n--feedback--\nThis indicates curiosity or enthusiasm about a subject It begins with an adjective followed by a preposition any questions\n--feedback--\nThis refers to inquiries someone might have It begins with a determiner followed by a plural noun even if\n--feedback--\nThis introduces a condition that remains true regardless of circumstances It begins with an adverb, followed by a conjunction",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2441,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c774c74b69734d08b1ecbb.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "790833dd79b81244ceecaba0916c37a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\trophy-create-methods-in-c-sharp-console-applications.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647f877f07d29547b3bee1be\ntitle: Trophy - Create Methods in C# Console Applications\nchallengeType: 18\ndashedName: trophy-create-methods-in-c-sharp-console-applications\nmsTrophyId: learn.wwl.get-started-c-sharp-part-5.trophy\n--description--\nNow that you've completed all of the \"Create Methods in C# Console Applications\" challenges, you should have earned the trophy for it on the Microsoft Learn platform. If you don't see this trophy when viewing your achievements page, you have not completed all the tasks and your trophy cannot be verified.\nLink your Microsoft username to your freeCodeCamp account and click the \"Verify Trophy\" button below to complete the challenge. This trophy is required to qualify for the certification exam.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 871,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\trophy-create-methods-in-c-sharp-console-applications.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "060d3cd09e27ef3543175bab2d8a9b9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\guided-project-plan-a-petting-zoo-visit.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e225e8acb466c97ccbef0\ntitle: Guided Project - Plan a Petting Zoo Visit\nchallengeType: 19\ndashedName: guided-project-plan-a-petting-zoo-visit\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/guided-project-visit-petting-zoo/ and complete all the tasks for the \"Guided Project - Plan a Petting Zoo Visit\" module. This is required to earn the \"Create Methods in C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Plan a Petting Zoo Visit guided project on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhat is the purpose of defining an optional parameter in a method?\n--answers--\nTo cause a method to perform a different task.\nTo overload a method.\nTo simplify the required parameters when a parameter isn't significant to the result.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\guided-project-plan-a-petting-zoo-visit.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d007dd2484e2314b9a0eeaa834d03a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c86f54f0b8aa4c3dd5bacd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67c86f54f0b8aa4c3dd5bacd\ntitle: Task 108\nchallengeType: 22\ndashedName: task-108\n--description--\nThis is a review of the entire dialogue you just studied --instructions--\nWrite the following words or phrases in the correct spot:\nlet's get started, She works in, He's responsible for, I'm responsible for, We're excited, and She and I --fillInTheBlank--\n--sentence--\nMaria: Welcome, everyone Today, we have with us our clients from FCC Corporation David, let me introduce the team and briefly explain what we do I'm Maria, the lead developer BLANK the technical aspects of the project This is Bob, the project manager BLANK coordinating our efforts to meet your needs David: Hey, Bob How's it going Maria: This is Sarah, the senior developer BLANK work together to ensure the project's success David: Great to meet you, Sarah Maria: And this is Linda, she's our UX/UI designer BLANK user experience and she creates our interface design David: Wonderful to meet you all I'm David, the project manager from FCC Corp I'll be your point of contact and I'll help make sure our collaboration is great BLANK about this project I'm confident that we can achieve great results Maria: Thanks Now BLANK with the project details and your specific requirements, David…\n--blanks--\nI'm responsible for\n--feedback--\nThis expresses ownership of a duty or task It begins with a pronoun, followed by a contracted verb, then a preposition indicating duty He's responsible for\n--feedback--\nThis describes someone else's role in a task It begins with a pronoun, followed by the contraction of is then a preposition indicating duty She and I\n--feedback--\nThis introduces two people as the subject of the sentence It begins with the pronoun for a third person female followed by a conjunction and then the pronoun referring to oneself She works in\n--feedback--\nThis indicates a person's professional field or area It begins with a pronoun followed by a verb and then a preposition showing location or specialization We're excited\n--feedback--\nThis expresses enthusiasm about something It begins with a pronoun, followed by a contraction of are and then an adjective meaning \"thrilled\" or \"eager\" let's get started\n--feedback--\nThis is used to begin an activity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c86f54f0b8aa4c3dd5bacd.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "207889924ae8e168ddeccacaab2e7dd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c86f54f0b8aa4c3dd5bacd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a conjunction and then the pronoun referring to oneself She works in --feedback-- This indicates a person's professional field or area It begins with a pronoun followed by a verb and then a preposition showing location or specialization We're excited --feedback-- This expresses enthusiasm about something It begins with a pronoun, followed by a contraction of are and then an adjective meaning \"thrilled\" or \"eager\" let's get started --feedback-- This is used to begin an activityIt begins with a contraction of let and us followed by a verb, and then the past participle of start",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2577,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\21-a2-english-for-developers\\learn-introductions-in-an-online-team-meeting\\67c86f54f0b8aa4c3dd5bacd.md",
      "source_type": "git_repo"
    },
    "token_count": 118,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ae5aa1210d6b038af5e7d9bcdc3f1153",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\create-and-throw-exceptions-in-c-sharp-console-applications.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e228a8acb466c97ccbef3\ntitle: Create and Throw Exceptions in C# Console Applications\nchallengeType: 19\ndashedName: create-and-throw-exceptions-in-c-sharp-console-applications\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/create-throw-exceptions-c-sharp/ and complete all the tasks for the \"Create and Throw Exceptions in C# Console Applications\" module. This is required earn to the \"Debug C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Create and Throw Exceptions in C# Console Applications module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhen should a method throw an exception?\n--answers--\nA method should throw an exception when the method can complete its intended purpose.\nA method should throw an exception when the method can't complete its intended purpose.\nA method should throw an exception when an exception type matches the intended purpose of the method.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1535,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\create-and-throw-exceptions-in-c-sharp-console-applications.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5da1693ace6f15abe1d5e92d0a820767",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\write-your-first-c-sharp-method.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e226a8acb466c97ccbef1\ntitle: Write Your First C# Method\nchallengeType: 19\ndashedName: write-your-first-c-sharp-method\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/write-first-c-sharp-method/ and complete all the tasks for the \"Write Your First C# Method\" module. This is required to earn the \"Create Methods in C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Write Your First C# Method module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhich of the following correctly declares a method?\n--answers--\nDisplayNumbers();\nvoid DisplayNumbers{};\nvoid DisplayNumbers() { }\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\create-methods-in-c-sharp-console-applications\\write-your-first-c-sharp-method.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "adca7c064aa5ed817fa113286c205099",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\implement-the-visual-studio-code-debugging-tools-for-c-sharp.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e22b38acb466c97ccbef6\ntitle: Implement the Visual Studio Code Debugging Tools for C#\nchallengeType: 19\ndashedName: implement-the-visual-studio-code-debugging-tools-for-c-sharp\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/implement-visual-studio-code-debugging-tools/ and complete all the tasks for the \"Implement the Visual Studio Code Debugging Tools for C#\" module. This is required to earn the \"Debug C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Implement the Visual Studio Code Debugging Tools for C# module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhich section of the RUN AND DEBUG view is used to track the current point of execution within the running application?\n--answers--\nThe VARIABLES section.\nThe CALL STACK section.\nThe WATCH section.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\implement-the-visual-studio-code-debugging-tools-for-c-sharp.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c7c6a062afa83b700a228f27ff359664",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\implement-exception-handling-in-c-sharp-console-applications.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e22a08acb466c97ccbef5\ntitle: Implement Exception Handling in C# Console Applications\nchallengeType: 19\ndashedName: implement-exception-handling-in-c-sharp-console-applications\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/implement-exception-handling-c-sharp/ and complete all the tasks for the \"Implement Exception Handling in C# Console Applications\" module. This is required to earn the \"Debug C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Implement Exception Handling in C# Console Applications module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhen is an ArrayTypeMismatchException exception thrown?\n--answers--\nAn ArrayTypeMismatchException exception is thrown when an attempt is made to store a value of one type in an array of another type.\nAn ArrayTypeMismatchException exception is thrown when attempting to access a member on a type whose value is null.\nAn ArrayTypeMismatchException exception is thrown when an attempt is made to index an array outside the bounds of the array.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\implement-exception-handling-in-c-sharp-console-applications.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "daf61e1b7a5ccd60d11675b837d6757f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\review-the-principles-of-code-debugging-and-exception-handling.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e22c08acb466c97ccbef7\ntitle: Review the Principles of Code Debugging and Exception Handling\nchallengeType: 19\ndashedName: review-the-principles-of-code-debugging-and-exception-handling\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/review-principles-code-debugging-exception-handling-c-sharp/ and complete all the tasks for the \"Review the Principles of Code Debugging and Exception Handling\" module. This is required to earn the \"Debug C# Console Applications\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Review the Principles of Code Debugging and Exception Handling module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhat is the relationship between the type of exception and the information it contains?\n--answers--\nThe type of exception determines the information it contains.\nThe type of exception and the information it contains are unrelated.\nThe information contained in an exception determines the type of exception.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1624,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\review-the-principles-of-code-debugging-and-exception-handling.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f25b75ae38b42946ca37c3b74ba34100",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\trophy-debug-c-sharp-console-applications.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647f86ff07d29547b3bee1bd\ntitle: Trophy - Debug C# Console Applications\nchallengeType: 18\ndashedName: trophy-debug-c-sharp-console-applications\nmsTrophyId: learn.wwl.get-started-c-sharp-part-6.trophy\n--description--\nNow that you've completed all of the \"Debug C# Console Applications\" challenges, you should have earned the trophy for it on the Microsoft Learn platform. If you don't see this trophy when viewing your achievements page, you have not completed all the tasks and your trophy cannot be verified.\nLink your Microsoft username to your freeCodeCamp account and click the \"Verify Trophy\" button below to complete the challenge. This trophy is required to qualify for the certification exam.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 835,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\debug-c-sharp-console-applications\\trophy-debug-c-sharp-console-applications.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9926a170b620899f6c19120bc3c5ea3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\guided-project-calculate-final-gpa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e236d8acb466c97ccbf01\ntitle: Guided Project - Calculate Final GPA\nchallengeType: 19\ndashedName: guided-project-calculate-final-gpa\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/guided-project-calculate-final-gpa/ and complete all the tasks for the \"Guided Project - Calculate Final GPA\" module. This is required to earn the \"Write Your First Code Using C#\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Calculate Final GPA guided project on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nSuppose decimal gradePointAverage = 3.99872831m;.\nWhat is the value of (int) gradePointAverage?\n--answers--\n3.99\n4\n3\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1250,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\guided-project-calculate-final-gpa.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9ab41fd4f8405d0e80a237f3ceb7b978",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\perform-basic-operations-on-numbers-in-c-sharp.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e23788acb466c97ccbf02\ntitle: Perform Basic Operations on Numbers in C#\nchallengeType: 19\ndashedName: perform-basic-operations-on-numbers-in-c-sharp\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/csharp-basic-operations/ and complete all the tasks for the \"Perform Basic Operations on Numbers in C#\" module. This is required to earn the \"Write Your First Code Using C#\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Perform Basic Operations on Numbers in C# module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhat is the value of the following result?\nclike\nint result = 3 + 1 * 5 / 2;\n--answers--\n10\n5\n6\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\perform-basic-operations-on-numbers-in-c-sharp.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "772314d4a04495ec2e7748bfe4843685",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\guided-project-calculate-and-print-student-grades.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e235a8acb466c97ccbf00\ntitle: Guided Project - Calculate and Print Student Grades\nchallengeType: 19\ndashedName: guided-project-calculate-and-print-student-grades\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/guided-project-calculate-print-student-grades/ and complete all the tasks for the \"Guided Project - Calculate and Print Student Grades\" module. This is required to earn the \"Write Your First Code Using C#\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Calculate and Print Student Grades guided project on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhat is wrong with the following code?\nclike\nint sophiaSum;\nConsole.WriteLine(\"Sophia: \" + sophiaSum);\n--answers--\nsophiaSum is not initialized before use\nsophiaSum is not implicitly typed to a string\nsophiaSum should use the var keyword\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1473,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\guided-project-calculate-and-print-student-grades.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5f41600257548a96a831aec11893fdbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\perform-basic-string-formatting-in-c-sharp.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e23828acb466c97ccbf03\ntitle: Perform Basic String Formatting in C#\nchallengeType: 19\ndashedName: perform-basic-string-formatting-in-c-sharp\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/csharp-basic-formatting/ and complete all the tasks for the \"Perform Basic String Formatting in C#\" module. This is required to earn the \"Write Your First Code Using C#\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Perform Basic String Formatting in C# module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhich of the following lines of code correctly uses string interpolation assuming that the variable value is a string?\n--answers--\nConsole.WriteLine(@\"My value: {value}\");\nConsole.WriteLine($\"My value: {value}\");\nConsole.WriteLine(@\"My value: [value]\");\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1377,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\perform-basic-string-formatting-in-c-sharp.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3ff88c6fb7eaf800d80e848ae5fca970",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\trophy-write-your-first-code-using-c-sharp.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647f85d407d29547b3bee1bb\ntitle: Trophy - Write Your First Code Using C#\nchallengeType: 18\ndashedName: trophy-write-your-first-code-using-c-sharp\nmsTrophyId: learn.wwl.get-started-c-sharp-part-1.trophy\n--description--\nNow that you've completed all of the \"Write Your First Code Using C#\" challenges, you should have earned the trophy for it on the Microsoft Learn platform. If you don't see this trophy when viewing your achievements page, you have not completed all the tasks and your trophy cannot be verified.\nLink your Microsoft username to your freeCodeCamp account and click the \"Verify Trophy\" button below to complete the challenge. This trophy is required to qualify for the certification exam.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 838,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\trophy-write-your-first-code-using-c-sharp.md",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ad9024e303acbd9194f0809a6122e400",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\write-your-first-c-sharp-code.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 647e239e8acb466c97ccbf05\ntitle: Write Your First C# Code\nchallengeType: 19\ndashedName: write-your-first-c-sharp-code\n--description--\nThis challenge will be partially completed on the Microsoft Learn platform. Follow these instructions to complete the challenge:\nGo to https://learn.microsoft.com/training/modules/csharp-write-first/ and complete all the tasks in the \"Write Your First C# Code\" module. This is required to earn the \"Write Your First Code Using C#\" trophy on Microsoft Learn, and qualify for the certification exam.\nWhen you are finished, come back and correctly answer the question below.\n--assignment--\nComplete the Write Your First C# Code module on Microsoft Learn. Then, answer the question below.\n--questions--\n--text--\nWhat is the difference between Console.Write and Console.WriteLine?\n--answers--\nConsole.Write prints the output on a new line.\nConsole.WriteLine prints the output on a new line.\nConsole.WriteLine appends a new line after the output.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\19-foundational-c-sharp-with-microsoft\\write-your-first-code-using-c-sharp\\write-your-first-c-sharp-code.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4b14ba86a93e90ee28f433aab108ca28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-1-multiples-of-3-or-5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f36e1000cf542c50fe80\ntitle: 'Problem 1: Multiples of 3 or 5'\nchallengeType: 1\nforumTopicId: 301722\ndashedName: problem-1-multiples-of-3-or-5\n--description--\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below the provided parameter value number.\n--hints--\nmultiplesOf3Or5(10) should return a number.\njs\nassert.isNumber(multiplesOf3Or5(10));\nmultiplesOf3Or5(49) should return 543.\njs\nassert.strictEqual(multiplesOf3Or5(49), 543);\nmultiplesOf3Or5(1000) should return 233168.\njs\nassert.strictEqual(multiplesOf3Or5(1000), 233168);\nmultiplesOf3Or5(8456) should return 16687353.\njs\nassert.strictEqual(multiplesOf3Or5(8456), 16687353);\nmultiplesOf3Or5(19564) should return 89301183.\njs\nassert.strictEqual(multiplesOf3Or5(19564), 89301183);\n--seed--\n--seed-contents--\n```js\nfunction multiplesOf3Or5(number) {\nreturn true;\n}\nmultiplesOf3Or5(1000);\n```\n--solutions--\n```js\nconst multiplesOf3Or5 = (number) => {\nvar total = 0;\nfor(var i = 0; i < number; i++) {\nif(i % 3 == 0 || i % 5 == 0) {\ntotal += i;\n}\n}\nreturn total;\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-1-multiples-of-3-or-5.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b3f11f54b3d4c5306de4bc12631f7c0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-10-summation-of-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3761000cf542c50fe89\ntitle: 'Problem 10: Summation of primes'\nchallengeType: 1\nforumTopicId: 301723\ndashedName: problem-10-summation-of-primes\n--description--\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17 Find the sum of all the primes below n --hints--\nprimeSummation(17) should return a number js\nassert isNumber(primeSummation(17));\nprimeSummation(17) should return 41 js\nassert strictEqual(primeSummation(17), 41);\nprimeSummation(2001) should return 277050 js\nassert strictEqual(primeSummation(2001), 277050);\nprimeSummation(140759) should return 873608362 js\nassert strictEqual(primeSummation(140759), 873608362);\nprimeSummation(2000000) should return 142913828922 js\nassert strictEqual(primeSummation(2000000), 142913828922);\n--seed--\n--seed-contents--\n```js\nfunction primeSummation(n) {\nreturn true;\n}\nprimeSummation(2000000);\n```\n--solutions--\n```js\nclass PrimeSeive {\nconstructor(num) {\nconst seive = Array(Math floor((num - 1) / 2)) fill(true);\nconst upper = Math floor((num - 1) / 2);\nconst sqrtUpper = Math floor((Math sqrt(num) - 1) / 2);\nfor (let i = 0; i <= sqrtUpper; i++) {\nif (seive[i]) {\n// Mark value in seive array\nconst prime = 2 * i + 3;\n// Mark all multiples of this number as false (not prime)\nconst primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\nfor (let j = primeSquaredIndex; j < upper; j += prime) {\nseive[j] = false;\n}\n}\n}\nthis _seive = seive;\n}\nisPrime(num) {\nreturn num === 2 true\n: num % 2 === 0 false\n: this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-10-summation-of-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7d21e78d1b5ba7b8faf03af28330f4bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-10-summation-of-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "value in seive array const prime = 2 * i + 3; // Mark all multiples of this number as false (not prime) const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3; for (let j = primeSquaredIndex; j < upper; j += prime) { seive[j] = false; } } } this _seive = seive; } isPrime(num) { return num === 2 true : num % 2 === 0 false : thisisOddPrime(num);\n}\nisOddPrime(num) {\nreturn this _seive[(num - 3) / 2];\n}\n};\nfunction primeSummation(num) {\nconst primeSeive = new PrimeSeive(num);\nlet sum = 2;\nfor (let i = 3; i < num; i += 2) {\nif (primeSeive isOddPrime(i)) sum += i;\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-10-summation-of-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cbcc088e860a44d6cfcb874f51a9482e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-100-arranged-probability.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d01000cf542c50fee3\ntitle: 'Problem 100: Arranged probability'\nchallengeType: 1\nforumTopicId: 301724\ndashedName: problem-100-arranged-probability\n--description--\nIf a box contains twenty-one colored discs, composed of fifteen blue discs and six red discs, and two discs were taken at random, it can be seen that the probability of taking two blue discs $${P(BB)} = \\frac{15}{21}×\\frac{14}{20} = \\frac{1}{2}$$\nThe next such arrangement, for which there is exactly a 50% chance of taking two blue discs at random, is a box containing eighty-five blue discs and thirty-five red discs By finding the first arrangement to contain over limit discs in total, determine the number of blue discs that the box would contain --hints--\narrangedProbability(20) should return a number js\nassert(typeof arrangedProbability(10) === 'number');\narrangedProbability(20) should return 15 js\nassert strictEqual(arrangedProbability(20), 15);\narrangedProbability(100) should return 85 js\nassert strictEqual(arrangedProbability(100), 85);\narrangedProbability(100000) should return 97513 js\nassert strictEqual(arrangedProbability(100000), 97513);\narrangedProbability(1000000000) should return 3822685023 js\nassert strictEqual(arrangedProbability(1000000000), 3822685023);\narrangedProbability(1000000000000) should return 756872327473 js\nassert strictEqual(arrangedProbability(1000000000000), 756872327473);\n--seed--\n--seed-contents--\n```js\nfunction arrangedProbability(limit) {\nreturn true;\n}\narrangedProbability(20);\n```\n--solutions--\n```js\nfunction arrangedProbability(limit) {\n// Based on https://www mathblog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1990,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-100-arranged-probability.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4fc0ca881d7145a35baaf56684e8c40c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-100-arranged-probability.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the box would contain --hints-- arrangedProbability(20) should return a number js assert(typeof arrangedProbability(10) === 'number'); arrangedProbability(20) should return 15 js assert strictEqual(arrangedProbability(20), 15); arrangedProbability(100) should return 85 js assert strictEqual(arrangedProbability(100), 85); arrangedProbability(100000) should return 97513 js assert strictEqual(arrangedProbability(100000), 97513); arrangedProbability(1000000000) should return 3822685023 js assert strictEqual(arrangedProbability(1000000000), 3822685023); arrangedProbability(1000000000000) should return 756872327473 js assert strictEqual(arrangedProbability(1000000000000), 756872327473); --seed-- --seed-contents-- ```js function arrangedProbability(limit) { return true; } arrangedProbability(20); ``` --solutions-- ```js function arrangedProbability(limit) { // Based on https://www mathblogdk/project-euler-100-blue-discs-two-blue/\nlet blue = 15;\nlet discs = 21;\nwhile (discs < limit) {\nconst nextBlue = 3 * blue + 2 * discs - 2;\nconst nextDiscs = 4 * blue + 3 * discs - 3;\nblue = nextBlue;\ndiscs = nextDiscs;\n}\nreturn blue;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1990,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-100-arranged-probability.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "df4fa85f963def1434cf272355afb9d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-12-highly-divisible-triangular-number.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3781000cf542c50fe8b\ntitle: 'Problem 12: Highly divisible triangular number'\nchallengeType: 1\nforumTopicId: 301746\ndashedName: problem-12-highly-divisible-triangular-number\n--description--\nThe sequence of triangle numbers is generated by adding the natural numbers So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28 The first ten terms would be:\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, Let us list the factors of the first seven triangle numbers:\n1: 1\n3: 1, 3\n6: 1, 2, 3, 6\n10: 1, 2, 5, 10\n15: 1, 3, 5, 15\n21: 1, 3, 7, 21\n28: 1, 2, 4, 7, 14, 28\nWe can see that 28 is the first triangle number to have over five divisors What is the value of the first triangle number to have over n divisors --hints--\ndivisibleTriangleNumber(5) should return a number js\nassert isNumber(divisibleTriangleNumber(5));\ndivisibleTriangleNumber(5) should return 28 js\nassert strictEqual(divisibleTriangleNumber(5), 28);\ndivisibleTriangleNumber(23) should return 630 js\nassert strictEqual(divisibleTriangleNumber(23), 630);\ndivisibleTriangleNumber(167) should return 1385280 js\nassert strictEqual(divisibleTriangleNumber(167), 1385280);\ndivisibleTriangleNumber(374) should return 17907120 js\nassert strictEqual(divisibleTriangleNumber(374), 17907120);\ndivisibleTriangleNumber(500) should return 76576500 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2956,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-12-highly-divisible-triangular-number.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "98fe4e224e34e27700d8ec12ad433428",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-12-highly-divisible-triangular-number.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "We can see that 28 is the first triangle number to have over five divisors What is the value of the first triangle number to have over n divisors --hints-- divisibleTriangleNumber(5) should return a number js assert isNumber(divisibleTriangleNumber(5)); divisibleTriangleNumber(5) should return 28 js assert strictEqual(divisibleTriangleNumber(5), 28); divisibleTriangleNumber(23) should return 630 js assert strictEqual(divisibleTriangleNumber(23), 630); divisibleTriangleNumber(167) should return 1385280 js assert strictEqual(divisibleTriangleNumber(167), 1385280); divisibleTriangleNumber(374) should return 17907120 js assert strictEqual(divisibleTriangleNumber(374), 17907120); divisibleTriangleNumber(500) should return 76576500 js assertstrictEqual(divisibleTriangleNumber(500), 76576500);\n--seed--\n--seed-contents--\n```js\nfunction divisibleTriangleNumber(n) {\nreturn true;\n}\ndivisibleTriangleNumber(500);\n```\n--solutions--\n```js\nfunction divisibleTriangleNumber(n) {\nif (n === 1) return 3;\nlet counter = 1;\nlet triangleNumber = counter++;\nwhile (noOfFactors(triangleNumber) < n) {\ntriangleNumber += counter++;\n}\nreturn triangleNumber;\n}\nfunction noOfFactors(num) {\nconst primeFactors = getPrimeFactors(num);\nlet prod = 1;\nfor(let p in primeFactors) {\nprod *= (primeFactors[p] + 1)\n}\nreturn prod;\n}\nfunction getPrimeFactors(num) {\nlet n = num;\nlet primes = {};\nlet p = 2;\nlet sqrt = Math sqrt(num);\nfunction checkAndUpdate(inc) {\nif (n % p === 0) {\nconst curr = primes[p];\nif (curr) {\nprimes[p]++\n} else {\nprimes[p] = 1;\n}\nn /= p;\n} else {\np += inc;\n}\n}\nwhile(p === 2 && p <= n) {\ncheckAndUpdate(1);\n}\nwhile (p <= n && p <= sqrt) {\ncheckAndUpdate(2);\n}\nif(Object keys(primes) length === 0) {\nprimes[num] = 1;\n} else if(n == 1) {\nprimes[n] = 1;\n}\nreturn primes;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2956,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-12-highly-divisible-triangular-number.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "39f9ffc8da7dbb44ed085a8ce7e13669",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-15-lattice-paths.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f37b1000cf542c50fe8e\ntitle: 'Problem 15: Lattice paths'\nchallengeType: 1\nforumTopicId: 301780\ndashedName: problem-15-lattice-paths\n--description--\nStarting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.\nHow many such routes are there through a given gridSize?\n--hints--\nlatticePaths(4) should return a number.\njs\nassert.isNumber(latticePaths(4));\nlatticePaths(4) should return 70.\njs\nassert.strictEqual(latticePaths(4), 70);\nlatticePaths(9) should return 48620.\njs\nassert.strictEqual(latticePaths(9), 48620);\nlatticePaths(20) should return 137846528820.\njs\nassert.strictEqual(latticePaths(20), 137846528820);\n--seed--\n--seed-contents--\n```js\nfunction latticePaths(gridSize) {\nreturn true;\n}\nlatticePaths(4);\n```\n--solutions--\n```js\nfunction latticePaths(gridSize) {\nlet paths = 1;\nfor (let i = 0; i < gridSize; i++) {\npaths *= (2 * gridSize) - i;\npaths /= i + 1;\n}\nreturn paths;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1372,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-15-lattice-paths.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c476c72c86dd3fc76f27fb9bcec3019b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-16-power-digit-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f37d1000cf542c50fe8f\ntitle: 'Problem 16: Power digit sum'\nchallengeType: 1\nforumTopicId: 301791\ndashedName: problem-16-power-digit-sum\n--description--\n215 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.\nWhat is the sum of the digits of the number 2exponent?\n--hints--\npowerDigitSum(15) should return a number.\njs\nassert.isNumber(powerDigitSum(15));\npowerDigitSum(15) should return 26.\njs\nassert.strictEqual(powerDigitSum(15), 26);\npowerDigitSum(128) should return 166.\njs\nassert.strictEqual(powerDigitSum(128), 166);\npowerDigitSum(1000) should return 1366.\njs\nassert.strictEqual(powerDigitSum(1000), 1366);\n--seed--\n--seed-contents--\n```js\nfunction powerDigitSum(exponent) {\nreturn true;\n}\npowerDigitSum(15);\n```\n--solutions--\n```js\nfunction powerDigitSum(exponent) {\nconst bigNum = [1];\nlet sum = 0;\nfor (let i = 1; i <= exponent; i++) {\nlet count = bigNum.length + 1;\nlet overflow = 0;\nfor (let j = 0; j < count; j++) {\nlet digit = bigNum[j] || 0;\ndigit = 2 * digit + overflow;\nif (digit > 9) {\ndigit -= 10;\noverflow = 1;\n} else {\noverflow = 0;\n}\nbigNum[j] = digit;\n}\n}\nbigNum.forEach(function(num) {\nreturn sum += num;\n});\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-16-power-digit-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3aa19e68a51c882cb967ebe88841473d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-14-longest-collatz-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f37a1000cf542c50fe8d\ntitle: 'Problem 14: Longest Collatz sequence'\nchallengeType: 1\nforumTopicId: 301768\ndashedName: problem-14-longest-collatz-sequence\n--description--\nThe following iterative sequence is defined for the set of positive integers:\nn → n/2 (n is even)\nn → 3n + 1 (n is odd)\nUsing the rule above and starting with 13, we generate the following sequence:\n13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\nIt can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1 Which starting number, under the given limit, produces the longest chain Note: Once the chain starts the terms are allowed to go above limit --hints--\nlongestCollatzSequence(14) should return a number js\nassert isNumber(longestCollatzSequence(14));\nlongestCollatzSequence(14) should return 9 js\nassert strictEqual(longestCollatzSequence(14), 9);\nlongestCollatzSequence(5847) should return 3711 js\nassert strictEqual(longestCollatzSequence(5847), 3711);\nlongestCollatzSequence(46500) should return 35655 js\nassert strictEqual(longestCollatzSequence(46500), 35655);\nlongestCollatzSequence(54512) should return 52527 js\nassert strictEqual(longestCollatzSequence(54512), 52527);\nlongestCollatzSequence(100000) should return 77031 js\nassert strictEqual(longestCollatzSequence(100000), 77031);\nlongestCollatzSequence(1000000) should return 837799 js\nassert strictEqual(longestCollatzSequence(1000000), 837799);\n--seed--\n--seed-contents--\n```js\nfunction longestCollatzSequence(limit) {\nreturn true;\n}\nlongestCollatzSequence(14);\n```\n--solutions--\n```js\nfunction longestCollatzSequence(limit) {\nlet longest = 1;\nlet maxLength = 1;\nfor (let i = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2514,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-14-longest-collatz-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "59d2d8cfe46af1fc67ae75ba627744ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-14-longest-collatz-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return 9 js assert strictEqual(longestCollatzSequence(14), 9); longestCollatzSequence(5847) should return 3711 js assert strictEqual(longestCollatzSequence(5847), 3711); longestCollatzSequence(46500) should return 35655 js assert strictEqual(longestCollatzSequence(46500), 35655); longestCollatzSequence(54512) should return 52527 js assert strictEqual(longestCollatzSequence(54512), 52527); longestCollatzSequence(100000) should return 77031 js assert strictEqual(longestCollatzSequence(100000), 77031); longestCollatzSequence(1000000) should return 837799 js assert strictEqual(longestCollatzSequence(1000000), 837799); --seed-- --seed-contents-- ```js function longestCollatzSequence(limit) { return true; } longestCollatzSequence(14); ``` --solutions-- ```js function longestCollatzSequence(limit) { let longest = 1; let maxLength = 1; for (let i = Mathfloor(limit / 2); i < limit; i++) {\nlet len = colLen(i);\nif (len > maxLength) {\nlongest = i;\nmaxLength = len;\n}\n}\nreturn longest;\n}\nconst knownSequence = { '1': 1 };\nfunction colLen(n) {\nif (knownSequence[n]) {\nreturn knownSequence[n];\n} else {\nconst len = n % 2 === 0 colLen(n / 2) + 1 : colLen((3 * n + 1) / 2) + 2;\nknownSequence[n] = len;\nreturn len;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2514,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-14-longest-collatz-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aec7ede45a924fe1b3fec818621b149f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-17-number-letter-counts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f37d1000cf542c50fe90\ntitle: 'Problem 17: Number letter counts'\nchallengeType: 1\nforumTopicId: 301804\ndashedName: problem-17-number-letter-counts\n--description--\nIf the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total If all the numbers from 1 to given limit inclusive were written out in words, how many letters would be used Note: Do not count spaces or hyphens For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters The use of \"and\" when writing out numbers is in compliance with British usage --hints--\nnumberLetterCounts(5) should return a number js\nassert isNumber(numberLetterCounts(5));\nnumberLetterCounts(5) should return 19 js\nassert strictEqual(numberLetterCounts(5), 19);\nnumberLetterCounts(150) should return 1903 js\nassert strictEqual(numberLetterCounts(150), 1903);\nnumberLetterCounts(1000) should return 21124 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-17-number-letter-counts.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "33a57628a301dd142d52c7e9bb1f6f3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-17-number-letter-counts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "many letters would be used Note: Do not count spaces or hyphens For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters The use of \"and\" when writing out numbers is in compliance with British usage --hints-- numberLetterCounts(5) should return a number js assert isNumber(numberLetterCounts(5)); numberLetterCounts(5) should return 19 js assert strictEqual(numberLetterCounts(5), 19); numberLetterCounts(150) should return 1903 js assert strictEqual(numberLetterCounts(150), 1903); numberLetterCounts(1000) should return 21124 js assertstrictEqual(numberLetterCounts(1000), 21124);\n--seed--\n--seed-contents--\n```js\nfunction numberLetterCounts(limit) {\nreturn true;\n}\nnumberLetterCounts(5);\n```\n--solutions--\n```js\nfunction numberLetterCounts(limit) {\nconst dictionary = {\n0: '',\n1: 'one',\n2: 'two',\n3: 'three',\n4: 'four',\n5: 'five',\n6: 'six',\n7: 'seven',\n8: 'eight',\n9: 'nine',\n10: 'ten',\n11: 'eleven',\n12: 'twelve',\n13: 'thirteen',\n14: 'fourteen',\n15: 'fifteen',\n16: 'sixteen',\n17: 'seventeen',\n18: 'eighteen',\n19: 'nineteen',\n20: 'twenty',\n30: 'thirty',\n40: 'forty',\n50: 'fifty',\n60: 'sixty',\n70: 'seventy',\n80: 'eighty',\n90: 'ninety',\n1000: 'onethousand'\n};\nlet numString = '';\nfunction convertToString(num) {\n// check dictionary for number\nif (dictionary[num]) {\nreturn dictionary[num];\n} else {\nconst hundreds = Math floor(num / 100);\nconst tens =  Math floor((num / 10) % 10) * 10;\nconst remainder = num % 10;\nlet tempStr = '';\nif (hundreds === 0) {\ntempStr += dictionary[tens] + dictionary[remainder];\n} else {\ntempStr += dictionary[hundreds] + 'hundred';\nif (tens == 0 || remainder",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-17-number-letter-counts.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f7bcdaff659b28e51051b17c2e4120af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-17-number-letter-counts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'ninety', 1000: 'onethousand' }; let numString = ''; function convertToString(num) { // check dictionary for number if (dictionary[num]) { return dictionary[num]; } else { const hundreds = Math floor(num / 100); const tens = Math floor((num / 10) % 10) * 10; const remainder = num % 10; let tempStr = ''; if (hundreds === 0) { tempStr += dictionary[tens] + dictionary[remainder]; } else { tempStr += dictionary[hundreds] + 'hundred'; if (tens == 0 || remainder== 0) {\ntempStr += 'and';\n}\nif (tens < 20) {\nconst lessThanTwenty = tens + remainder;\ntempStr += dictionary[lessThanTwenty];\n} else {\ntempStr += dictionary[tens] + dictionary[remainder];\n}\n}\nreturn tempStr;\n}\n}\nfor (let i = 1; i <= limit; i++) {\nnumString += convertToString(i);\n}\nreturn numString length;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-17-number-letter-counts.md",
      "source_type": "git_repo"
    },
    "token_count": 222,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e612852acfd021fe1762f4b337b00418",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3781000cf542c50fe8a\ntitle: 'Problem 11: Largest product in a grid'\nchallengeType: 1\nforumTopicId: 301734\ndashedName: problem-11-largest-product-in-a-grid\n--description--\nIn the 20×20 grid below, four numbers along a diagonal line have been marked in red",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
      "source_type": "git_repo"
    },
    "token_count": 80,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "2beabb28bcf2379a81b1fe4f335e2fcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3781000cf542c50fe8a\ntitle: 'Problem 11: Largest product in a grid'\nchallengeType: 1\nforumTopicId: 301734\ndashedName: problem-11-largest-product-in-a-grid\n--description--\nIn the 20×20 grid below, four numbers along a diagonal line have been marked in red08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\nThe product of these numbers is 26 × 63 × 78 × 14 = 1788696",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
      "source_type": "git_repo"
    },
    "token_count": 902,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "88cc24558846860b789486fd8139923e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 The product of these numbers is 26 × 63 × 78 × 14 = 1788696What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in a given arr grid --hints--\nlargestGridProduct(testGrid) should return a number js\nassert isNumber(largestGridProduct(testGrid));\nlargestGridProduct(testGrid) should return 14169081 js\nassert strictEqual(largestGridProduct(testGrid), 14169081);\nlargestGridProduct(grid) should return 70600674 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "6314e0f999af9ce35a07debd66d5a91b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 The product of these numbers is 26 × 63 × 78 × 14 = 1788696What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in a given arr grid --hints-- largestGridProduct(testGrid) should return a number js assert isNumber(largestGridProduct(testGrid)); largestGridProduct(testGrid) should return 14169081 js assert strictEqual(largestGridProduct(testGrid), 14169081); largestGridProduct(grid) should return 70600674 js assertstrictEqual(largestGridProduct(grid), 70600674);\n--seed--\n--seed-contents--\n```js\nfunction largestGridProduct(arr) {\nreturn true;\n}\n// Only change code above this line\nconst grid = [\n[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],\n[49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],\n[81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],\n[52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],\n[22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],\n[24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],\n[32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],\n[67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],\n[24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],\n[21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],\n[78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],\n[16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],\n[86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],\n[19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],\n[4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],\n[88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],\n[4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],\n[20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],\n[20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],\n[1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]\n];\nconst testGrid = [\n[40, 17, 81, 18, 57],\n[74, 4, 36, 16, 29],\n[36, 42, 69, 73, 45],\n[51, 54, 69, 16, 92],\n[7, 97, 57, 32, 16]\n];\nlargestGridProduct(testGrid);\n```\n--solutions--\n```js\nfunction largestGridProduct(arr) {\nlet maxProduct = 0;\nlet currProduct = 0;\nfunction maxProductChecker(n) {\nif (n > maxProduct) {\nreturn maxProduct = n;\n}\n}\n// loop rows\nfor (let r = 0; r < arr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
      "source_type": "git_repo"
    },
    "token_count": 1551,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "211e4c5800c3dbd14526e7e7facc1be1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1, 89, 19, 67, 48] ]; const testGrid = [ [40, 17, 81, 18, 57], [74, 4, 36, 16, 29], [36, 42, 69, 73, 45], [51, 54, 69, 16, 92], [7, 97, 57, 32, 16] ]; largestGridProduct(testGrid); ``` --solutions-- ```js function largestGridProduct(arr) { let maxProduct = 0; let currProduct = 0; function maxProductChecker(n) { if (n > maxProduct) { return maxProduct = n; } } // loop rows for (let r = 0; r < arrlength; r++) {\n// loop columns\nfor (let c = 0; c < arr[r] length; c++) {\nconst limit = arr[r]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "fd3598fdfbb41e46055015e5b3238304",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[36, 42, 69, 73, 45], [51, 54, 69, 16, 92], [7, 97, 57, 32, 16] ]; largestGridProduct(testGrid); ``` --solutions-- ```js function largestGridProduct(arr) { let maxProduct = 0; let currProduct = 0; function maxProductChecker(n) { if (n > maxProduct) { return maxProduct = n; } } // loop rows for (let r = 0; r < arrlength; r++) { // loop columns for (let c = 0; c < arr[r] length; c++) { const limit = arr[r]length - 3;\n// check horizontal\nif (c < limit) {\ncurrProduct = arr[r][c] * arr[r][c + 1] * arr[r][c + 2] * arr[r][c + 3];\nmaxProductChecker(currProduct);\n}\n// check vertical\nif (r < limit) {\ncurrProduct = arr[r][c] * arr[r + 1][c] * arr[r + 2][c] * arr[r + 3][c];\nmaxProductChecker(currProduct);\n}\n// check diagonal [\\]\nif (c < limit && r < limit) {\ncurrProduct = arr[r][c] * arr[r + 1][c + 1] * arr[r + 2][c + 2] * arr[r + 3][c + 3];\nmaxProductChecker(currProduct);\n}\n// check diagonal [/]\nif (c > 3 && r < limit) {\ncurrProduct = arr[r][c] * arr[r + 1][c - 1] * arr[r + 2][c - 2] * arr[r + 3][c - 3];\nmaxProductChecker(currProduct);\n}\n}\n}\nreturn maxProduct;\n}\nconst grid = [  [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],\n[49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],\n[81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],\n[52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],\n[22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],\n[24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],\n[32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],\n[67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],\n[24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],\n[21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],\n[78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],\n[16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],\n[86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],\n[19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],\n[4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],\n[88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],\n[4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],\n[20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],\n[20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],\n[1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]\n];\nconst testGrid = [\n[40, 17, 81, 18, 57],\n[74, 4, 36, 16, 29],\n[36, 42, 69, 73, 45],\n[51, 54, 69, 16, 92],\n[7, 97, 57, 32, 16]\n];\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md",
      "source_type": "git_repo"
    },
    "token_count": 1690,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "799def4f668e1b7ec8b7fe6f4b1f3251",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-19-counting-sundays.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f37f1000cf542c50fe92\ntitle: 'Problem 19: Counting Sundays'\nchallengeType: 1\nforumTopicId: 301827\ndashedName: problem-19-counting-sundays\n--description--\nYou are given the following information, but you may prefer to do some research for yourself.\n1 Jan 1900 was a Monday.\nThirty days has September,April, June and November.All the rest have thirty-one,Saving February alone,Which has twenty-eight, rain or shine.And on leap years, twenty-nine.\nA leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\nHow many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?\n--hints--\ncountingSundays(1943, 1946) should return a number.\njs\nassert.isNumber(countingSundays(1943, 1946));\ncountingSundays(1943, 1946) should return 6.\njs\nassert.strictEqual(countingSundays(1943, 1946), 6);\ncountingSundays(1995, 2000) should return 10.\njs\nassert.strictEqual(countingSundays(1995, 2000), 10);\ncountingSundays(1901, 2000) should return 171.\njs\nassert.strictEqual(countingSundays(1901, 2000), 171);\n--seed--\n--seed-contents--\n```js\nfunction countingSundays(firstYear, lastYear) {\nreturn true;\n}\ncountingSundays(1943, 1946);\n```\n--solutions--\n```js\nfunction countingSundays(firstYear, lastYear) {\nlet sundays = 0;\nfor (let year = firstYear; year <= lastYear; year++) {\nfor (let month = 0; month <= 11; month++) {\nconst thisDate = new Date(year, month, 1);\nif (thisDate.getDay() === 0) {\nsundays++;\n}\n}\n}\nreturn sundays;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-19-counting-sundays.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "96079a5c0c3d72cf53c239d4aabda942",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-20-factorial-digit-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3801000cf542c50fe93\ntitle: 'Problem 20: Factorial digit sum'\nchallengeType: 1\nforumTopicId: 301839\ndashedName: problem-20-factorial-digit-sum\n--description--\nn! means n × (n − 1) × ... × 3 × 2 × 1\nFor example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,\nand the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.\nFind the sum of the digits n!\n--hints--\nsumFactorialDigits(10) should return a number.\njs\nassert.isNumber(sumFactorialDigits(10));\nsumFactorialDigits(10) should return 27.\njs\nassert.strictEqual(sumFactorialDigits(10), 27);\nsumFactorialDigits(25) should return 72.\njs\nassert.strictEqual(sumFactorialDigits(25), 72);\nsumFactorialDigits(50) should return 216.\njs\nassert.strictEqual(sumFactorialDigits(50), 216);\nsumFactorialDigits(75) should return 432.\njs\nassert.strictEqual(sumFactorialDigits(75), 432);\nsumFactorialDigits(100) should return 648.\njs\nassert.strictEqual(sumFactorialDigits(100), 648);\n--seed--\n--seed-contents--\n```js\nfunction sumFactorialDigits(n) {\nreturn n;\n}\nsumFactorialDigits(100);\n```\n--solutions--\n```js\nlet factorial = (n) => n <= 1 ? BigInt(n) : BigInt(n) * BigInt(factorial(--n));\nlet sumDigits = n => n.toString().split('').map(x => parseInt(x)).reduce((a,b) => a + b);\nfunction sumFactorialDigits(n) {\nreturn sumDigits(factorial(n));\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-20-factorial-digit-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "db736316c48f5b4f47434dd18e75fd6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-2-even-fibonacci-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f36e1000cf542c50fe81\ntitle: 'Problem 2: Even Fibonacci Numbers'\nchallengeType: 1\nforumTopicId: 301838\ndashedName: problem-2-even-fibonacci-numbers\n--description--\nEach new term in the Fibonacci sequence is generated by adding the previous two terms By starting with 1 and 2, the first 10 terms will be:\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms --hints--\nfiboEvenSum(10) should return a number js\nassert isNumber(fiboEvenSum(10));\nYour function should return an even value js\nassert equal(fiboEvenSum(10) % 2 === 0, true);\nYour function should sum the even-valued Fibonacci numbers: fiboEvenSum(8) should return 10 js\nassert strictEqual(fiboEvenSum(8), 10);\nfiboEvenSum(10) should return 10 js\nassert strictEqual(fiboEvenSum(10), 10);\nfiboEvenSum(34) should return 44 js\nassert strictEqual(fiboEvenSum(34), 44);\nfiboEvenSum(60) should return 44 js\nassert strictEqual(fiboEvenSum(60), 44);\nfiboEvenSum(1000) should return 798 js\nassert strictEqual(fiboEvenSum(1000), 798);\nfiboEvenSum(100000) should return 60696 js\nassert strictEqual(fiboEvenSum(100000), 60696);\nfiboEvenSum(4000000) should return 4613732 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1984,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-2-even-fibonacci-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4ba0aa942d401c5d39778c0a08aa81ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-2-even-fibonacci-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "function should return an even value js assert equal(fiboEvenSum(10) % 2 === 0, true); Your function should sum the even-valued Fibonacci numbers: fiboEvenSum(8) should return 10 js assert strictEqual(fiboEvenSum(8), 10); fiboEvenSum(10) should return 10 js assert strictEqual(fiboEvenSum(10), 10); fiboEvenSum(34) should return 44 js assert strictEqual(fiboEvenSum(34), 44); fiboEvenSum(60) should return 44 js assert strictEqual(fiboEvenSum(60), 44); fiboEvenSum(1000) should return 798 js assert strictEqual(fiboEvenSum(1000), 798); fiboEvenSum(100000) should return 60696 js assert strictEqual(fiboEvenSum(100000), 60696); fiboEvenSum(4000000) should return 4613732 js assertstrictEqual(fiboEvenSum(4000000), 4613732);\n--seed--\n--seed-contents--\n```js\nfunction fiboEvenSum(n) {\nreturn true;\n}\n```\n--solutions--\njs\nconst fiboEvenSum = (number) => {\nif (number <= 1) {\nreturn 0;\n} else {\nlet evenSum = 0,\nprevFibNum = 1,\nfibNum = 2; // According to problem description our Fibonacci series starts with 1, 2\nfor (let i = 2; fibNum <= number; i++) {\nif (fibNum % 2 == 0) {\nevenSum += fibNum;\n}\n[prevFibNum, fibNum] = [fibNum, prevFibNum + fibNum];\n}\nreturn evenSum;\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1984,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-2-even-fibonacci-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "900c405e819ebaf9097b2972649c6be9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-21-amicable-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3811000cf542c50fe94\ntitle: 'Problem 21: Amicable numbers'\nchallengeType: 1\nforumTopicId: 301851\ndashedName: problem-21-amicable-numbers\n--description--\nLet d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n) If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284 The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220 Evaluate the sum of all the amicable numbers under n --hints--\nsumAmicableNum(1000) should return a number js\nassert isNumber(sumAmicableNum(1000));\nsumAmicableNum(1000) should return 504 js\nassert strictEqual(sumAmicableNum(1000), 504);\nsumAmicableNum(2000) should return 2898 js\nassert strictEqual(sumAmicableNum(2000), 2898);\nsumAmicableNum(5000) should return 8442 js\nassert strictEqual(sumAmicableNum(5000), 8442);\nsumAmicableNum(10000) should return 31626 js\nassert strictEqual(sumAmicableNum(10000), 31626);\n--seed--\n--seed-contents--\n```js\nfunction sumAmicableNum(n) {\nreturn n;\n}\nsumAmicableNum(10000);\n```\n--solutions--\njs\nconst sumAmicableNum = (n) => {\nconst fsum = (n) => {\nlet sum = 1;\nfor (let i = 2; i <= Math floor(Math sqrt(n)); i++)\nif (Math floor(n % i) === 0)\nsum += i + Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1774,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-21-amicable-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "20fc75381cfe065638a7c941b86d5d3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-21-amicable-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sumAmicableNum(2000) should return 2898 js assert strictEqual(sumAmicableNum(2000), 2898); sumAmicableNum(5000) should return 8442 js assert strictEqual(sumAmicableNum(5000), 8442); sumAmicableNum(10000) should return 31626 js assert strictEqual(sumAmicableNum(10000), 31626); --seed-- --seed-contents-- ```js function sumAmicableNum(n) { return n; } sumAmicableNum(10000); ``` --solutions-- js const sumAmicableNum = (n) => { const fsum = (n) => { let sum = 1; for (let i = 2; i <= Math floor(Math sqrt(n)); i++) if (Math floor(n % i) === 0) sum += i + Mathfloor(n / i);\nreturn sum;\n};\nlet d = [];\nlet amicableSum = 0;\nfor (let i=2; i<n; i++) d[i] = fsum(i);\nfor (let i=2; i<n; i++) {\nlet dsum = d[i];\nif (d[dsum]===i && i ==dsum) amicableSum += i+dsum;\n}\nreturn amicableSum/2;\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1774,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-21-amicable-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "04f33839192f8eb9bcd3181251bcc15a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f37e1000cf542c50fe91\ntitle: 'Problem 18: Maximum path sum I'\nchallengeType: 1\nforumTopicId: 301815\ndashedName: problem-18-maximum-path-sum-i\n--description--\nBy starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23 3\n7 4\n2 4 6\n8 5 9 3\nThat is, 3 + 7 + 4 + 9 = 23 Find the maximum total from top to bottom of the triangle below:\n75\n95 64\n17 47 82\n18 35 87 10\n20 04 82 47 65\n19 01 23 75 03 34\n88 02 77 73 07 63 67\n99 65 04 28 06 16 70 92\n41 41 26 56 83 40 80 70 33\n41 48 72 33 47 32 37 16 94 29\n53 71 44 65 25 43 91 52 97 51 14\n70 11 33 28 77 73 17 78 39 68 17 57\n91 71 52 38 17 14 91 43 58 50 27 29 48\n63 66 04 68 89 53 67 30 73 16 69 87 40 31\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\nNOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method ;o)\n--hints--\nmaximumPathSumI([[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return a number js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "58c04ab0b58ca084a5d1e3e0962c1d29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "23 09 70 98 73 93 38 53 60 04 23 NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method ;o) --hints-- maximumPathSumI([[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return a number js assertisNumber(maximumPathSumI(_testTriangle));\nmaximumPathSumI([[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return 23 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
      "source_type": "git_repo"
    },
    "token_count": 205,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "368cd9a0fa204fcd1f9b82ee04d44b23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is possible to solve this problem by trying every route However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method ;o) --hints-- maximumPathSumI([[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return a number js assertisNumber(maximumPathSumI(_testTriangle)); maximumPathSumI([[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return 23 js assertstrictEqual(maximumPathSumI(_testTriangle), 23);\nmaximumPathSumI([[75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [95, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 47, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [18, 35, 87, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [20, 4, 82, 47, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [19, 1, 23, 75, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0], [88, 2, 77, 73, 7, 63, 67, 0, 0, 0, 0, 0, 0, 0, 0], [99, 65, 4, 28, 6, 16, 70, 92, 0, 0, 0, 0, 0, 0, 0], [41, 41, 26, 56, 83, 40, 80, 70, 33, 0, 0, 0, 0, 0, 0], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29, 0, 0, 0, 0, 0], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]) should return 1074",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
      "source_type": "git_repo"
    },
    "token_count": 869,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "2b805cb62d6c0e2e45f9dd4d37cda1dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]) should return 1074js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c6b910b28dad9a7abebbcf16fe6192c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]) should return 1074js assertstrictEqual(maximumPathSumI(_numTriangle), 1074);\n--seed--\n--before-user-code--\n```js\nconst _numTriangle = [[75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [95, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 47, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [18, 35, 87, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [20, 4, 82, 47, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [19, 1, 23, 75, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0], [88, 2, 77, 73, 7, 63, 67, 0, 0, 0, 0, 0, 0, 0, 0], [99, 65, 4, 28, 6, 16, 70, 92, 0, 0, 0, 0, 0, 0, 0], [41, 41, 26, 56, 83, 40, 80, 70, 33, 0, 0, 0, 0, 0, 0], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29, 0, 0, 0, 0, 0], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]];\nconst _testTriangle = [[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]];\n```\n--seed-contents--\n```js\nfunction maximumPathSumI(triangle) {\nreturn true;\n}\n```\n--solutions--\n```js\nconst testTriangle = [[3, 0, 0, 0],\n[7, 4, 0, 0],\n[2, 4, 6, 0],\n[8, 5, 9, 3]];\nfunction maximumPathSumI(triangle) {\nlet maxSum = triangle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
      "source_type": "git_repo"
    },
    "token_count": 1077,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "5ad9fdcfa27e41ced7aab809144823da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "16, 69, 87, 40, 31, 0], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]; const _testTriangle = [[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]; ``` --seed-contents-- ```js function maximumPathSumI(triangle) { return true; } ``` --solutions-- ```js const testTriangle = [[3, 0, 0, 0], [7, 4, 0, 0], [2, 4, 6, 0], [8, 5, 9, 3]]; function maximumPathSumI(triangle) { let maxSum = triangleslice();\nfor (let i = triangle length - 1; i > 0; i--) {\nlet currentRow = maxSum[i];\nlet previousRow = maxSum[i - 1];\nconst temp = [];\nfor (let j = 0; j < i; j++) {\ntemp push(Math max((currentRow[j] + previousRow[j]), (currentRow[j + 1] + previousRow[j])));\n}\nmaxSum[i - 1] = temp;\nmaxSum pop();\n}\nreturn maxSum[0][0];\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "c7298fda07bcdf76f97806c57722e86a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-24-lexicographic-permutations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3841000cf542c50fe97\ntitle: 'Problem 24: Lexicographic permutations'\nchallengeType: 1\nforumTopicId: 301885\ndashedName: problem-24-lexicographic-permutations\n--description--\nA permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:\n012   021   102   120   201   210\nWhat is the nth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?\n--hints--\nlexicographicPermutations(699999) should return a number.\njs\nassert.isNumber(lexicographicPermutations(699999));\nlexicographicPermutations(699999) should return 1938246570.\njs\nassert.strictEqual(lexicographicPermutations(699999), 1938246570);\nlexicographicPermutations(899999) should return 2536987410.\njs\nassert.strictEqual(lexicographicPermutations(899999), 2536987410);\nlexicographicPermutations(900000) should return 2537014689.\njs\nassert.strictEqual(lexicographicPermutations(900000), 2537014689);\nlexicographicPermutations(999999) should return 2783915460.\njs\nassert.strictEqual(lexicographicPermutations(999999), 2783915460);\n--seed--\n--seed-contents--\n```js\nfunction lexicographicPermutations(n) {\nreturn n;\n}\nlexicographicPermutations(999999);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-24-lexicographic-permutations.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1bce26252a2a0e0c038936845980aa90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-23-non-abundant-sums.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3831000cf542c50fe96\ntitle: 'Problem 23: Non-abundant sums'\nchallengeType: 1\nforumTopicId: 301873\ndashedName: problem-23-non-abundant-sums\n--description--\nA perfect number is a number for which the sum of its proper divisors is exactly equal to the number For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24 By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit Find the sum of all positive integers <= n which cannot be written as the sum of two abundant numbers --hints--\nsumOfNonAbundantNumbers(10000) should return a number js\nassert isNumber(sumOfNonAbundantNumbers(10000));\nsumOfNonAbundantNumbers(10000) should return 3731004 js\nassert strictEqual(sumOfNonAbundantNumbers(10000), 3731004);\nsumOfNonAbundantNumbers(15000) should return 4039939 js\nassert strictEqual(sumOfNonAbundantNumbers(15000), 4039939);\nsumOfNonAbundantNumbers(20000) should return 4159710 js\nassert strictEqual(sumOfNonAbundantNumbers(20000), 4159710);\nsumOfNonAbundantNumbers(28123) should return 4179871 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2721,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-23-non-abundant-sums.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9f265b9c82b3f62a411f60ff0a638b76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-23-non-abundant-sums.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "number that cannot be expressed as the sum of two abundant numbers is less than this limit Find the sum of all positive integers <= n which cannot be written as the sum of two abundant numbers --hints-- sumOfNonAbundantNumbers(10000) should return a number js assert isNumber(sumOfNonAbundantNumbers(10000)); sumOfNonAbundantNumbers(10000) should return 3731004 js assert strictEqual(sumOfNonAbundantNumbers(10000), 3731004); sumOfNonAbundantNumbers(15000) should return 4039939 js assert strictEqual(sumOfNonAbundantNumbers(15000), 4039939); sumOfNonAbundantNumbers(20000) should return 4159710 js assert strictEqual(sumOfNonAbundantNumbers(20000), 4159710); sumOfNonAbundantNumbers(28123) should return 4179871 js assertstrictEqual(sumOfNonAbundantNumbers(28123), 4179871);\n--seed--\n--seed-contents--\n```js\nfunction sumOfNonAbundantNumbers(n) {\nreturn n;\n}\nsumOfNonAbundantNumbers(28123);\n```\n--solutions--\n```js\nfunction abundantCheck(number) {\nlet sum = 1;\nfor (let i = 2; i <= Math sqrt(number); i += 1) {\nif(number % i === 0) {\nsum += i + +(i == Math sqrt(number) && number / i);\n}\n}\nreturn sum > number;\n}\nfunction sumOfNonAbundantNumbers(n) {\nlet sum = 0;\nconst memo = {};\nlet abundantList = [];\n// Function checkSum checks if num can be represented as a sum of numbers in the stack (array)\nconst checkSum = (num, stack, memo) => {\nfor (let i = 0; i < stack length; i += 1) {\nif ((num - stack[i]) in memo) return true;\n}\nreturn false;\n};\nfor (let i = 1; i <= n; i += 1) {\nif (abundantCheck(i)) {\nabundantList push(i);\nmemo[i] = 1;\n}\nif (checkSum(i, abundantList, memo)) continue;\nsum += i;\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2721,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-23-non-abundant-sums.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "64f44b9b178a30f4bd4832fdadc00318",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-25-1000-digit-fibonacci-number.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3851000cf542c50fe98\ntitle: 'Problem 25: 1000-digit Fibonacci number'\nchallengeType: 1\nforumTopicId: 301897\ndashedName: problem-25-1000-digit-fibonacci-number\n--description--\nThe Fibonacci sequence is defined by the recurrence relation:\nFn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.\nHence the first 12 terms will be:\nF1 = 1F2 = 1F3 = 2F4 = 3F5 = 5F6 = 8F7 = 13F8 = 21F9 = 34F10 = 55F11 = 89F12 = 144\nThe 12th term, F12, is the first term to contain three digits.\nWhat is the index of the first term in the Fibonacci sequence to contain n digits?\n--hints--\ndigitFibonacci(5) should return a number.\njs\nassert.isNumber(digitFibonacci(5));\ndigitFibonacci(5) should return 21.\njs\nassert.strictEqual(digitFibonacci(5), 21);\ndigitFibonacci(10) should return 45.\njs\nassert.strictEqual(digitFibonacci(10), 45);\ndigitFibonacci(15) should return 69.\njs\nassert.strictEqual(digitFibonacci(15), 69);\ndigitFibonacci(20) should return 93.\njs\nassert.strictEqual(digitFibonacci(20), 93);\n--seed--\n--seed-contents--\n```js\nfunction digitFibonacci(n) {\nreturn n;\n}\ndigitFibonacci(20);\n```\n--solutions--\njs\nconst digitFibonacci = (n) => {\nconst digits = (num) => {\nreturn num.toString().length;\n};\nlet f1 = 1;\nlet f2 = 1;\nlet index = 3;\nwhile (true) {\nlet fn = f1 + f2;\nif (digits(fn) === n) return index;\n[f1, f2] = [f2, fn];\nindex++;\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1931,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-25-1000-digit-fibonacci-number.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2ec39fabfe237e9e734f28a9d0e4026a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-26-reciprocal-cycles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3861000cf542c50fe99\ntitle: 'Problem 26: Reciprocal cycles'\nchallengeType: 1\nforumTopicId: 301908\ndashedName: problem-26-reciprocal-cycles\n--description--\nA unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:\n1/2 = 0.51/3 = 0.(3)1/4 = 0.251/5 = 0.21/6 = 0.1(6)1/7 = 0.(142857)1/8 = 0.1251/9 = 0.(1)1/10 = 0.1\nWhere 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.\nFind the value of d < n for which 1/d contains the longest recurring cycle in its decimal fraction part.\n--hints--\nreciprocalCycles(700) should return a number.\njs\nassert(typeof reciprocalCycles(700) === 'number');\nreciprocalCycles(700) should return 659.\njs\nassert(reciprocalCycles(700) == 659);\nreciprocalCycles(800) should return 743.\njs\nassert(reciprocalCycles(800) == 743);\nreciprocalCycles(900) should return 887.\njs\nassert(reciprocalCycles(900) == 887);\nreciprocalCycles(1000) should return 983.\njs\nassert(reciprocalCycles(1000) == 983);\n--seed--\n--seed-contents--\n```js\nfunction reciprocalCycles(n) {\nreturn n;\n}\nreciprocalCycles(1000);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1756,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-26-reciprocal-cycles.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "27ae72e9947d12d574c78d72f0d9c5ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-28-number-spiral-diagonals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3881000cf542c50fe9b\ntitle: 'Problem 28: Number spiral diagonals'\nchallengeType: 1\nforumTopicId: 301930\ndashedName: problem-28-number-spiral-diagonals\n--description--\nStarting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:\n21 22 23 24 25\n20  7  8  9 10\n19  6  1  2 11\n18  5  4  3 12\n17 16 15 14 13\nIt can be verified that the sum of the numbers on the diagonals is 101.\nWhat is the sum of the numbers on the diagonals in an n by n spiral formed in the same way?\n--hints--\nspiralDiagonals(101) should return a number.\njs\nassert(typeof spiralDiagonals(101) === 'number');\nspiralDiagonals(101) should return 692101.\njs\nassert(spiralDiagonals(101) == 692101);\nspiralDiagonals(303) should return 18591725.\njs\nassert(spiralDiagonals(303) == 18591725);\nspiralDiagonals(505) should return 85986601.\njs\nassert(spiralDiagonals(505) == 85986601);\nspiralDiagonals(1001) should return 669171001.\njs\nassert(spiralDiagonals(1001) == 669171001);\n--seed--\n--seed-contents--\n```js\nfunction spiralDiagonals(n) {\nreturn n;\n}\nspiralDiagonals(1001);\n```\n--solutions--\njs\nconst spiralDiagonals = (n) => {\nconst Sn2 = (n) => {\nreturn n*(n+1)*(2*n+1)/6;\n};\nconst Sn = (n) => {\nreturn n*(n+1)/2;\n};\nlet sum = (Sn2(n-1) + Sn(n-1) + n-1) + (Math.floor(n/2) + Sn2(n));\nreturn sum;\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1952,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-28-number-spiral-diagonals.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dbe2c87384c93306d9ebed2626ee8648",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-29-distinct-powers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3891000cf542c50fe9c\ntitle: 'Problem 29: Distinct powers'\nchallengeType: 1\nforumTopicId: 301941\ndashedName: problem-29-distinct-powers\n--description--\nConsider all integer combinations of $a^b$ for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n22=4, 23=8, 24=16, 25=32\n32=9, 33=27, 34=81, 35=243\n42=16, 43=64, 44=256, 45=1024\n52=25, 53=125, 54=625, 55=3125\nIf they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:\n4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\nHow many distinct terms are in the sequence generated by $a^b$ for 2 ≤ a ≤ n and 2 ≤ b ≤ n?\n--hints--\ndistinctPowers(15) should return a number.\njs\nassert(typeof distinctPowers(15) === 'number');\ndistinctPowers(15) should return 177.\njs\nassert.strictEqual(distinctPowers(15), 177);\ndistinctPowers(20) should return 324.\njs\nassert.strictEqual(distinctPowers(20), 324);\ndistinctPowers(25) should return 519.\njs\nassert.strictEqual(distinctPowers(25), 519);\ndistinctPowers(30) should return 755.\njs\nassert.strictEqual(distinctPowers(30), 755);\n--seed--\n--seed-contents--\n```js\nfunction distinctPowers(n) {\nreturn n;\n}\ndistinctPowers(30);\n```\n--solutions--\njs\nconst distinctPowers = (n) => {\nlet list = [];\nfor (let a=2; a<=n; a++) {\nfor (let b=2; b<=n; b++) {\nlet term = Math.pow(a, b);\nif (list.indexOf(term)===-1) list.push(term);\n}\n}\nreturn list.length;\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1821,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-29-distinct-powers.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9fa6bf0253494882d1cb915644e2957a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-27-quadratic-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3871000cf542c50fe9a\ntitle: 'Problem 27: Quadratic primes'\nchallengeType: 1\nforumTopicId: 301919\ndashedName: problem-27-quadratic-primes\n--description--\nEuler discovered the remarkable quadratic formula:\n$n^2 + n + 41$\nIt turns out that the formula will produce 40 primes for the consecutive integer values $0 \\le n \\le 39$ However, when $n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41$ is divisible by 41, and certainly when $n = 41, 41^2 + 41 + 41$ is clearly divisible by 41 The incredible formula $n^2 - 79n + 1601$ was discovered, which produces 80 primes for the consecutive values $0 \\le n \\le 79$ The product of the coefficients, −79 and 1601, is −126479 Considering quadratics of the form:\n$n^2 + an + b$, where $|a| < range$ and $|b| \\le range$\nwhere $|n|$ is the modulus/absolute value of $n$\ne g $|11| = 11$ and $|-4| = 4$\nFind the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n = 0$ --hints--\nquadraticPrimes(200) should return a number js\nassert(typeof quadraticPrimes(200) === 'number');\nquadraticPrimes(200) should return -4925 js\nassert(quadraticPrimes(200) == -4925);\nquadraticPrimes(500) should return -18901 js\nassert(quadraticPrimes(500) == -18901);\nquadraticPrimes(800) should return -43835 js\nassert(quadraticPrimes(800) == -43835);\nquadraticPrimes(1000) should return -59231",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1820,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-27-quadratic-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b75d901fdce30bc3e1102f55daab3033",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-27-quadratic-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "$|11| = 11$ and $|-4| = 4$ Find the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n = 0$ --hints-- quadraticPrimes(200) should return a number js assert(typeof quadraticPrimes(200) === 'number'); quadraticPrimes(200) should return -4925 js assert(quadraticPrimes(200) == -4925); quadraticPrimes(500) should return -18901 js assert(quadraticPrimes(500) == -18901); quadraticPrimes(800) should return -43835 js assert(quadraticPrimes(800) == -43835); quadraticPrimes(1000) should return -59231js\nassert(quadraticPrimes(1000) == -59231);\n--seed--\n--seed-contents--\n```js\nfunction quadraticPrimes(range) {\nreturn range;\n}\nquadraticPrimes(1000);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1820,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-27-quadratic-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "85ab10a207a4edb901c33a3c8d341786",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-22-names-scores.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a51eabcad78bf416f316e2a\ntitle: 'Problem 22: Names scores'\nchallengeType: 1\nforumTopicId: 301862\ndashedName: problem-22-names-scores\n--description--\nUsing names, an array defined in the background containing over five-thousand first names, begin by sorting it into alphabetical order Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list So, COLIN would obtain a score of 938 × 53 = 49714 What is the total of all the name scores in the array --hints--\nnamesScores(test1) should return a number js\nassert isNumber(namesScores(test1));\nnamesScores(test1) should return 791 js\nassert strictEqual(namesScores(test1), 791);\nnamesScores(test2) should return 1468 js\nassert strictEqual(namesScores(test2), 1468);\nnamesScores(names) should return 871198282 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 48519,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-22-names-scores.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2a2919300678bf5df5afd5d2317f26c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-22-names-scores.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list So, COLIN would obtain a score of 938 × 53 = 49714 What is the total of all the name scores in the array --hints-- namesScores(test1) should return a number js assert isNumber(namesScores(test1)); namesScores(test1) should return 791 js assert strictEqual(namesScores(test1), 791); namesScores(test2) should return 1468 js assert strictEqual(namesScores(test2), 1468); namesScores(names) should return 871198282 js assertstrictEqual(namesScores(names), 871198282);\n--seed--\n--before-user-code--\njs\nconst names = ['MARY','PATRICIA','LINDA','BARBARA','ELIZABETH','JENNIFER','MARIA','SUSAN','MARGARET','DOROTHY','LISA','NANCY','KAREN','BETTY','HELEN','SANDRA','DONNA','CAROL','RUTH','SHARON','MICHELLE','LAURA','SARAH','KIMBERLY','DEBORAH','JESSICA','SHIRLEY','CYNTHIA','ANGELA','MELISSA','BRENDA','AMY','ANNA','REBECCA','VIRGINIA','KATHLEEN','PAMELA','MARTHA','DEBRA','AMANDA','STEPHANIE','CAROLYN','CHRISTINE','MARIE','JANET','CATHERINE','FRANCES','ANN','JOYCE','DIANE','ALICE','JULIE','HEATHER','TERESA','DORIS','GLORIA','EVELYN','JEAN','CHERYL','MILDRED','KATHERINE','JOAN','ASHLEY','JUDITH','ROSE','JANICE','KELLY','NICOLE','JUDY','CHRISTINA','KATHY','THERESA','BEVERLY','DENISE','TAMMY','IRENE','JANE','LORI','RACHEL','MARILYN','ANDREA','KATHRYN','LOUISE','SARA','ANNE','JACQUELINE','WANDA','BONNIE','JULIA','RUBY','LOIS','TINA','PHYLLIS','NORMA','PAULA','DIANA','ANNIE','LILLIAN','EMILY','ROBIN','PEGGY','CRYSTAL','GLADYS','RITA','DAWN','CONNIE','FLORENCE','TRACY','EDNA','TIFFANY','CARMEN','ROSA','CINDY','GRACE','WENDY','VICTORIA','EDITH','KIM','SHERRY','SYLVIA','JOSEPHINE','THELMA','SHANNON','SHEILA','ETHEL','ELLEN','ELAINE','MARJORIE','CARRIE','CHARLOTTE','MONICA','ESTHER','PAULINE','EMMA','JUANITA','ANITA','RHONDA','HAZEL','AMBER','EVA','DEBBIE','APRIL','LESLIE','CLARA','LUCILLE','JAMIE','JOANNE','ELEANOR','VALERIE','DANIELLE','MEGAN','ALICIA','SUZANNE','MICHELE','GAIL','BERTHA','DARLENE','VERONICA','JILL','ERIN','GERALDINE','LAUREN','CATHY','JOANN','LORRAINE','LYNN','SALLY','REGINA','ERICA','BEATRICE','DOLORES','BERNICE','AUDREY','YVONNE','ANNETTE','JUNE','SAMANTHA','MARION','DANA','STACY','ANA','RENEE','IDA','VIVIAN','ROBERTA','HOLLY','BRITTANY','MELANIE','LORETTA','YOLANDA','JEANETTE','LAURIE','KATIE','KRISTEN','VANESSA','ALMA','SUE','ELSIE','BETH','JEANNE','VICKI','CARLA','TARA','ROSEMARY','EILEEN','TERRI','GERTRUDE','LUCY','TONYA','ELLA','STACEY','WILMA','GINA','KRISTIN','JESSIE','NATALIE','AGNES','VERA','WILLIE','CHARLENE','BESSIE','DELORES','MELINDA','PEARL','ARLENE','MAUREEN','COLLEEN','ALLISON','TAMARA','JOY','GEORGIA','CONSTANCE','LILLIE','CLAUDIA','JACKIE','MARCIA','TANYA','NELLIE','MINNIE','MARLENE','HEIDI','GLENDA','LYDIA','VIOLA','COURTNEY','MARIAN','STELLA','CAROLINE','DORA','JO','VICKIE','MATTIE','TERRY','MAXINE','IRMA','MABEL','MARSHA','MYRTLE','LENA','CHRISTY','DEANNA','PATSY','HILDA','GWENDOLYN','JENNIE','NORA','MARGIE','NINA','CASSANDRA','LEAH','PENNY','KAY','PRISCILLA','NAOMI','CAROLE','BRANDY','OLGA','BILLIE','DIANNE','TRACEY','LEONA','JENNY','FELICIA','SONIA','MIRIAM','VELMA','BECKY','BOBBIE','VIOLET','KRISTINA','TONI','MISTY','MAE','SHELLY','DAISY','RAMONA','SHERRI','ERIKA','KATRINA','CLAIRE','LINDSEY','LINDSAY','GENEVA','GUADALUPE','BELINDA','MARGARITA','SHERYL','CORA','FAYE','ADA','NATASHA','SABRINA','ISABEL','MARGUERITE','HATTIE','HARRIET','MOLLY','CECILIA','KRISTI','BRANDI','BLANCHE','SANDY','ROSIE','JOANNA','IRIS','EUNICE','ANGIE','INEZ','LYNDA','MADELINE','AMELIA','ALBERTA','GENEVIEVE','MONIQUE','JODI','JANIE','MAGGIE','KAYLA','SONYA','JAN','LEE','KRISTINE','CANDACE','FANNIE','MARYANN','OPAL','ALISON','YVETTE','MELODY','LUZ','SUSIE','OLIVIA','FLORA','SHELLEY','KRISTY','MAMIE','LULA','LOLA','VERNA','BEULAH','ANTOINETTE','CANDICE','JUANA','JEANNETTE','PAM','KELLI','HANNAH','WHITNEY','BRIDGET','KARLA','CELIA','LATOYA','PATTY','SHELIA','GAYLE','DELLA','VICKY','LYNNE','SHERI','MARIANNE','KARA','JACQUELYN','ERMA','BLANCA','MYRA','LETICIA','PAT','KRISTA','ROXANNE','ANGELICA','JOHNNIE','ROBYN','FRANCIS','ADRIENNE','ROSALIE','ALEXANDRA','BROOKE','BETHANY','SADIE','BERNADETTE','TRACI','JODY','KENDRA','JASMINE','NICHOLE','RACHAEL','CHELSEA','MABLE','ERNESTINE','MURIEL','MARCELLA','ELENA','KRYSTAL','ANGELINA','NADINE','KARI','ESTELLE','DIANNA','PAULETTE','LORA','MONA','DOREEN','ROSEMARIE','ANGEL','DESIREE','ANTONIA','HOPE','GINGER','JANIS','BETSY','CHRISTIE','FREDA','MERCEDES','MEREDITH','LYNETTE','TERI','CRISTINA','EULA','LEIGH','MEGHAN','SOPHIA','ELOISE','ROCHELLE','GRETCHEN','CECELIA','RAQUEL','HENRIETTA','ALYSSA','JANA','KELLEY','GWEN','KERRY','JENNA','TRICIA','LAVERNE','OLIVE','ALEXIS','TASHA','SILVIA','ELVIRA','CASEY','DELIA','SOPHIE','KATE','PATTI','LORENA','KELLIE','SONJA','LILA','LANA','DARLA','MAY','MINDY','ESSIE','MANDY','LORENE','ELSA','JOSEFINA','JEANNIE','MIRANDA','DIXIE','LUCIA','MARTA','FAITH','LELA','JOHANNA','SHARI','CAMILLE','TAMI','SHAWNA','ELISA','EBONY','MELBA','ORA','NETTIE','TABITHA','OLLIE','JAIME','WINIFRED','KRISTIE','MARINA','ALISHA','AIMEE','RENA','MYRNA','MARLA','TAMMIE','LATASHA','BONITA','PATRICE','RONDA','SHERRIE','ADDIE','FRANCINE','DELORIS','STACIE','ADRIANA','CHERI','SHELBY','ABIGAIL','CELESTE','JEWEL','CARA','ADELE','REBEKAH','LUCINDA','DORTHY','CHRIS','EFFIE','TRINA','REBA','SHAWN','SALLIE','AURORA','LENORA','ETTA','LOTTIE','KERRI','TRISHA','NIKKI','ESTELLA','FRANCISCA','JOSIE','TRACIE','MARISSA','KARIN','BRITTNEY','JANELLE','LOURDES','LAUREL','HELENE','FERN','ELVA','CORINNE','KELSEY','INA','BETTIE','ELISABETH','AIDA','CAITLIN','INGRID','IVA','EUGENIA','CHRISTA','GOLDIE','CASSIE','MAUDE','JENIFER','THERESE','FRANKIE','DENA','LORNA','JANETTE','LATONYA','CANDY','MORGAN','CONSUELO','TAMIKA','ROSETTA','DEBORA','CHERIE','POLLY','DINA','JEWELL','FAY','JILLIAN','DOROTHEA','NELL','TRUDY','ESPERANZA','PATRICA','KIMBERLEY','SHANNA','HELENA','CAROLINA','CLEO','STEFANIE','ROSARIO','OLA','JANINE','MOLLIE','LUPE','ALISA','LOU','MARIBEL','SUSANNE','BETTE','SUSANA','ELISE','CECILE','ISABELLE','LESLEY','JOCELYN','PAIGE','JONI','RACHELLE','LEOLA','DAPHNE','ALTA','ESTER','PETRA','GRACIELA','IMOGENE','JOLENE','KEISHA','LACEY','GLENNA','GABRIELA','KERI','URSULA','LIZZIE','KIRSTEN','SHANA','ADELINE','MAYRA','JAYNE','JACLYN','GRACIE','SONDRA','CARMELA','MARISA','ROSALIND','CHARITY','TONIA','BEATRIZ','MARISOL','CLARICE','JEANINE','SHEENA','ANGELINE','FRIEDA','LILY','ROBBIE','SHAUNA','MILLIE','CLAUDETTE','CATHLEEN','ANGELIA','GABRIELLE','AUTUMN','KATHARINE','SUMMER','JODIE','STACI','LEA','CHRISTI','JIMMIE','JUSTINE','ELMA','LUELLA','MARGRET','DOMINIQUE','SOCORRO','RENE','MARTINA','MARGO','MAVIS','CALLIE','BOBBI','MARITZA','LUCILE','LEANNE','JEANNINE','DEANA','AILEEN','LORIE','LADONNA','WILLA','MANUELA','GALE','SELMA','DOLLY','SYBIL','ABBY','LARA','DALE','IVY','DEE','WINNIE','MARCY','LUISA','JERI','MAGDALENA','OFELIA','MEAGAN','AUDRA','MATILDA','LEILA','CORNELIA','BIANCA','SIMONE','BETTYE','RANDI','VIRGIE','LATISHA','BARBRA','GEORGINA','ELIZA','LEANN','BRIDGETTE','RHODA','HALEY','ADELA','NOLA','BERNADINE','FLOSSIE','ILA','GRETA','RUTHIE','NELDA','MINERVA','LILLY','TERRIE','LETHA','HILARY','ESTELA','VALARIE','BRIANNA','ROSALYN','EARLINE','CATALINA','AVA','MIA','CLARISSA','LIDIA','CORRINE','ALEXANDRIA','CONCEPCION','TIA','SHARRON','RAE','DONA','ERICKA','JAMI','ELNORA','CHANDRA','LENORE','NEVA','MARYLOU','MELISA','TABATHA','SERENA','AVIS','ALLIE','SOFIA','JEANIE','ODESSA','NANNIE','HARRIETT','LORAINE','PENELOPE','MILAGROS','EMILIA','BENITA','ALLYSON','ASHLEE','TANIA','TOMMIE','ESMERALDA','KARINA','EVE','PEARLIE','ZELMA','MALINDA','NOREEN','TAMEKA','SAUNDRA','HILLARY','AMIE','ALTHEA','ROSALINDA','JORDAN','LILIA','ALANA','GAY','CLARE','ALEJANDRA','ELINOR','MICHAEL','LORRIE','JERRI','DARCY','EARNESTINE','CARMELLA','TAYLOR','NOEMI','MARCIE','LIZA','ANNABELLE','LOUISA','EARLENE','MALLORY','CARLENE','NITA','SELENA','TANISHA','KATY','JULIANNE','JOHN','LAKISHA','EDWINA','MARICELA','MARGERY','KENYA','DOLLIE','ROXIE','ROSLYN','KATHRINE','NANETTE','CHARMAINE','LAVONNE','ILENE','KRIS','TAMMI','SUZETTE','CORINE','KAYE','JERRY','MERLE','CHRYSTAL','LINA','DEANNE','LILIAN','JULIANA','ALINE','LUANN','KASEY','MARYANNE','EVANGELINE','COLETTE','MELVA','LAWANDA','YESENIA','NADIA','MADGE','KATHIE','EDDIE','OPHELIA','VALERIA','NONA','MITZI','MARI','GEORGETTE','CLAUDINE','FRAN','ALISSA','ROSEANN','LAKEISHA','SUSANNA','REVA','DEIDRE','CHASITY','SHEREE','CARLY','JAMES','ELVIA','ALYCE','DEIRDRE','GENA','BRIANA','ARACELI','KATELYN','ROSANNE','WENDI','TESSA','BERTA','MARVA','IMELDA','MARIETTA','MARCI','LEONOR','ARLINE','SASHA','MADELYN','JANNA','JULIETTE','DEENA','AURELIA','JOSEFA','AUGUSTA','LILIANA','YOUNG','CHRISTIAN','LESSIE','AMALIA','SAVANNAH','ANASTASIA','VILMA','NATALIA','ROSELLA','LYNNETTE','CORINA','ALFREDA','LEANNA','CAREY','AMPARO','COLEEN','TAMRA','AISHA','WILDA','KARYN','CHERRY','QUEEN','MAURA','MAI','EVANGELINA','ROSANNA','HALLIE','ERNA','ENID','MARIANA','LACY','JULIET','JACKLYN','FREIDA','MADELEINE','MARA','HESTER','CATHRYN','LELIA','CASANDRA','BRIDGETT','ANGELITA','JANNIE','DIONNE','ANNMARIE','KATINA','BERYL','PHOEBE','MILLICENT','KATHERYN','DIANN','CARISSA','MARYELLEN','LIZ','LAURI','HELGA','GILDA','ADRIAN','RHEA','MARQUITA','HOLLIE','TISHA','TAMERA','ANGELIQUE','FRANCESCA','BRITNEY','KAITLIN','LOLITA','FLORINE','ROWENA','REYNA','TWILA','FANNY','JANELL','INES','CONCETTA','BERTIE','ALBA','BRIGITTE','ALYSON','VONDA','PANSY','ELBA','NOELLE','LETITIA','KITTY','DEANN','BRANDIE','LOUELLA','LETA','FELECIA','SHARLENE','LESA','BEVERLEY','ROBERT','ISABELLA','HERMINIA','TERRA','CELINA','TORI','OCTAVIA','JADE','DENICE','GERMAINE','SIERRA','MICHELL','CORTNEY','NELLY','DORETHA','SYDNEY','DEIDRA','MONIKA','LASHONDA','JUDI','CHELSEY','ANTIONETTE','MARGOT','BOBBY','ADELAIDE','NAN','LEEANN','ELISHA','DESSIE','LIBBY','KATHI','GAYLA','LATANYA','MINA','MELLISA','KIMBERLEE','JASMIN','RENAE','ZELDA','ELDA','MA','JUSTINA','GUSSIE','EMILIE','CAMILLA','ABBIE','ROCIO','KAITLYN','JESSE','EDYTHE','ASHLEIGH','SELINA','LAKESHA','GERI','ALLENE','PAMALA','MICHAELA','DAYNA','CARYN','ROSALIA','SUN','JACQULINE','REBECA','MARYBETH','KRYSTLE','IOLA','DOTTIE','BENNIE','BELLE','AUBREY','GRISELDA','ERNESTINA','ELIDA','ADRIANNE','DEMETRIA','DELMA','CHONG','JAQUELINE','DESTINY','ARLEEN','VIRGINA','RETHA','FATIMA','TILLIE','ELEANORE','CARI','TREVA','BIRDIE','WILHELMINA','ROSALEE','MAURINE','LATRICE','YONG','JENA','TARYN','ELIA','DEBBY','MAUDIE','JEANNA','DELILAH','CATRINA','SHONDA','HORTENCIA','THEODORA','TERESITA','ROBBIN','DANETTE','MARYJANE','FREDDIE','DELPHINE','BRIANNE','NILDA','DANNA','CINDI','BESS','IONA','HANNA','ARIEL','WINONA','VIDA','ROSITA','MARIANNA','WILLIAM','RACHEAL','GUILLERMINA','ELOISA','CELESTINE','CAREN','MALISSA','LONA','CHANTEL','SHELLIE','MARISELA','LEORA','AGATHA','SOLEDAD','MIGDALIA','IVETTE','CHRISTEN','ATHENA','JANEL','CHLOE','VEDA','PATTIE','TESSIE','TERA','MARILYNN','LUCRETIA','KARRIE','DINAH','DANIELA','ALECIA','ADELINA','VERNICE','SHIELA','PORTIA','MERRY','LASHAWN','DEVON','DARA','TAWANA','OMA','VERDA','CHRISTIN','ALENE','ZELLA','SANDI','RAFAELA','MAYA','KIRA','CANDIDA','ALVINA','SUZAN','SHAYLA','LYN','LETTIE','ALVA','SAMATHA','ORALIA','MATILDE','MADONNA','LARISSA','VESTA','RENITA','INDIA','DELOIS','SHANDA','PHILLIS','LORRI','ERLINDA','CRUZ','CATHRINE','BARB','ZOE','ISABELL','IONE','GISELA','CHARLIE','VALENCIA','ROXANNA','MAYME','KISHA','ELLIE','MELLISSA','DORRIS','DALIA','BELLA','ANNETTA','ZOILA','RETA','REINA','LAURETTA','KYLIE','CHRISTAL','PILAR','CHARLA','ELISSA','TIFFANI','TANA','PAULINA','LEOTA','BREANNA','JAYME','CARMEL','VERNELL','TOMASA','MANDI','DOMINGA','SANTA','MELODIE','LURA','ALEXA','TAMELA','RYAN','MIRNA','KERRIE','VENUS','NOEL','FELICITA','CRISTY','CARMELITA','BERNIECE','ANNEMARIE','TIARA','ROSEANNE','MISSY','CORI','ROXANA','PRICILLA','KRISTAL','JUNG','ELYSE','HAYDEE','ALETHA','BETTINA','MARGE','GILLIAN','FILOMENA','CHARLES','ZENAIDA','HARRIETTE','CARIDAD','VADA','UNA','ARETHA','PEARLINE','MARJORY','MARCELA','FLOR','EVETTE','ELOUISE','ALINA','TRINIDAD','DAVID','DAMARIS','CATHARINE','CARROLL','BELVA','NAKIA','MARLENA','LUANNE','LORINE','KARON','DORENE','DANITA','BRENNA','TATIANA','SAMMIE','LOUANN','LOREN','JULIANNA','ANDRIA','PHILOMENA','LUCILA','LEONORA','DOVIE','ROMONA','MIMI','JACQUELIN','GAYE','TONJA','MISTI','JOE','GENE','CHASTITY','STACIA','ROXANN','MICAELA','NIKITA','MEI','VELDA','MARLYS','JOHNNA','AURA','LAVERN','IVONNE','HAYLEY','NICKI','MAJORIE','HERLINDA','GEORGE','ALPHA','YADIRA','PERLA','GREGORIA','DANIEL','ANTONETTE','SHELLI','MOZELLE','MARIAH','JOELLE','CORDELIA','JOSETTE','CHIQUITA','TRISTA','LOUIS','LAQUITA','GEORGIANA','CANDI','SHANON','LONNIE','HILDEGARD','CECIL','VALENTINA','STEPHANY','MAGDA','KAROL','GERRY','GABRIELLA','TIANA','ROMA','RICHELLE','RAY','PRINCESS','OLETA','JACQUE','IDELLA','ALAINA','SUZANNA','JOVITA','BLAIR','TOSHA','RAVEN','NEREIDA','MARLYN','KYLA','JOSEPH','DELFINA','TENA','STEPHENIE','SABINA','NATHALIE','MARCELLE','GERTIE','DARLEEN','THEA','SHARONDA','SHANTEL','BELEN','VENESSA','ROSALINA','ONA','GENOVEVA','COREY','CLEMENTINE','ROSALBA','RENATE','RENATA','MI','IVORY','GEORGIANNA','FLOY','DORCAS','ARIANA','TYRA','THEDA','MARIAM','JULI','JESICA','DONNIE','VIKKI','VERLA','ROSELYN','MELVINA','JANNETTE','GINNY','DEBRAH','CORRIE','ASIA','VIOLETA','MYRTIS','LATRICIA','COLLETTE','CHARLEEN','ANISSA','VIVIANA','TWYLA','PRECIOUS','NEDRA','LATONIA','LAN','HELLEN','FABIOLA','ANNAMARIE','ADELL','SHARYN','CHANTAL','NIKI','MAUD','LIZETTE','LINDY','KIA','KESHA','JEANA','DANELLE','CHARLINE','CHANEL','CARROL','VALORIE','LIA','DORTHA','CRISTAL','SUNNY','LEONE','LEILANI','GERRI','DEBI','ANDRA','KESHIA','IMA','EULALIA','EASTER','DULCE','NATIVIDAD','LINNIE','KAMI','GEORGIE','CATINA','BROOK','ALDA','WINNIFRED','SHARLA','RUTHANN','MEAGHAN','MAGDALENE','LISSETTE','ADELAIDA','VENITA','TRENA','SHIRLENE','SHAMEKA','ELIZEBETH','DIAN','SHANTA','MICKEY','LATOSHA','CARLOTTA','WINDY','SOON','ROSINA','MARIANN','LEISA','JONNIE','DAWNA','CATHIE','BILLY','ASTRID','SIDNEY','LAUREEN','JANEEN','HOLLI','FAWN','VICKEY','TERESSA','SHANTE','RUBYE','MARCELINA','CHANDA','CARY','TERESE','SCARLETT','MARTY','MARNIE','LULU','LISETTE','JENIFFER','ELENOR','DORINDA','DONITA','CARMAN','BERNITA','ALTAGRACIA','ALETA','ADRIANNA','ZORAIDA','RONNIE','NICOLA','LYNDSEY','KENDALL','JANINA','CHRISSY','AMI','STARLA','PHYLIS','PHUONG','KYRA','CHARISSE','BLANCH','SANJUANITA','RONA','NANCI','MARILEE','MARANDA','CORY','BRIGETTE','SANJUANA','MARITA','KASSANDRA','JOYCELYN','IRA','FELIPA','CHELSIE','BONNY','MIREYA','LORENZA','KYONG','ILEANA','CANDELARIA','TONY','TOBY','SHERIE','OK','MARK','LUCIE','LEATRICE','LAKESHIA','GERDA','EDIE','BAMBI','MARYLIN','LAVON','HORTENSE','GARNET','EVIE','TRESSA','SHAYNA','LAVINA','KYUNG','JEANETTA','SHERRILL','SHARA','PHYLISS','MITTIE','ANABEL','ALESIA','THUY','TAWANDA','RICHARD','JOANIE','TIFFANIE','LASHANDA','KARISSA','ENRIQUETA','DARIA','DANIELLA','CORINNA','ALANNA','ABBEY','ROXANE','ROSEANNA','MAGNOLIA','LIDA','KYLE','JOELLEN','ERA','CORAL','CARLEEN','TRESA','PEGGIE','NOVELLA','NILA','MAYBELLE','JENELLE','CARINA','NOVA','MELINA','MARQUERITE','MARGARETTE','JOSEPHINA','EVONNE','DEVIN','CINTHIA','ALBINA','TOYA','TAWNYA','SHERITA','SANTOS','MYRIAM','LIZABETH','LISE','KEELY','JENNI','GISELLE','CHERYLE','ARDITH','ARDIS','ALESHA','ADRIANE','SHAINA','LINNEA','KAROLYN','HONG','FLORIDA','FELISHA','DORI','DARCI','ARTIE','ARMIDA','ZOLA','XIOMARA','VERGIE','SHAMIKA','NENA','NANNETTE','MAXIE','LOVIE','JEANE','JAIMIE','INGE','FARRAH','ELAINA','CAITLYN','STARR','FELICITAS','CHERLY','CARYL','YOLONDA','YASMIN','TEENA','PRUDENCE','PENNIE','NYDIA','MACKENZIE','ORPHA','MARVEL','LIZBETH','LAURETTE','JERRIE','HERMELINDA','CAROLEE','TIERRA','MIRIAN','META','MELONY','KORI','JENNETTE','JAMILA','ENA','ANH','YOSHIKO','SUSANNAH','SALINA','RHIANNON','JOLEEN','CRISTINE','ASHTON','ARACELY','TOMEKA','SHALONDA','MARTI','LACIE','KALA','JADA','ILSE','HAILEY','BRITTANI','ZONA','SYBLE','SHERRYL','RANDY','NIDIA','MARLO','KANDICE','KANDI','DEB','DEAN','AMERICA','ALYCIA','TOMMY','RONNA','NORENE','MERCY','JOSE','INGEBORG','GIOVANNA','GEMMA','CHRISTEL','AUDRY','ZORA','VITA','VAN','TRISH','STEPHAINE','SHIRLEE','SHANIKA','MELONIE','MAZIE','JAZMIN','INGA','HOA','HETTIE','GERALYN','FONDA','ESTRELLA','ADELLA','SU','SARITA','RINA','MILISSA','MARIBETH','GOLDA','EVON','ETHELYN','ENEDINA','CHERISE','CHANA','VELVA','TAWANNA','SADE','MIRTA','LI','KARIE','JACINTA','ELNA','DAVINA','CIERRA','ASHLIE','ALBERTHA','TANESHA','STEPHANI','NELLE','MINDI','LU','LORINDA','LARUE','FLORENE','DEMETRA','DEDRA','CIARA','CHANTELLE','ASHLY','SUZY','ROSALVA','NOELIA','LYDA','LEATHA','KRYSTYNA','KRISTAN','KARRI','DARLINE','DARCIE','CINDA','CHEYENNE','CHERRIE','AWILDA','ALMEDA','ROLANDA','LANETTE','JERILYN','GISELE','EVALYN','CYNDI','CLETA','CARIN','ZINA','ZENA','VELIA','TANIKA','PAUL','CHARISSA','THOMAS','TALIA','MARGARETE','LAVONDA','KAYLEE','KATHLENE','JONNA','IRENA','ILONA','IDALIA','CANDIS','CANDANCE','BRANDEE','ANITRA','ALIDA','SIGRID','NICOLETTE','MARYJO','LINETTE','HEDWIG','CHRISTIANA','CASSIDY','ALEXIA','TRESSIE','MODESTA','LUPITA','LITA','GLADIS','EVELIA','DAVIDA','CHERRI','CECILY','ASHELY','ANNABEL','AGUSTINA','WANITA','SHIRLY','ROSAURA','HULDA','EUN','BAILEY','YETTA','VERONA','THOMASINA','SIBYL','SHANNAN','MECHELLE','LUE','LEANDRA','LANI','KYLEE','KANDY','JOLYNN','FERNE','EBONI','CORENE','ALYSIA','ZULA','NADA','MOIRA','LYNDSAY','LORRETTA','JUAN','JAMMIE','HORTENSIA','GAYNELL','CAMERON','ADRIA','VINA','VICENTA','TANGELA','STEPHINE','NORINE','NELLA','LIANA','LESLEE','KIMBERELY','ILIANA','GLORY','FELICA','EMOGENE','ELFRIEDE','EDEN','EARTHA','CARMA','BEA','OCIE','MARRY','LENNIE','KIARA','JACALYN','CARLOTA','ARIELLE','YU','STAR','OTILIA','KIRSTIN','KACEY','JOHNETTA','JOEY','JOETTA','JERALDINE','JAUNITA','ELANA','DORTHEA','CAMI','AMADA','ADELIA','VERNITA','TAMAR','SIOBHAN','RENEA','RASHIDA','OUIDA','ODELL','NILSA','MERYL','KRISTYN','JULIETA','DANICA','BREANNE','AUREA','ANGLEA','SHERRON','ODETTE','MALIA','LORELEI','LIN','LEESA','KENNA','KATHLYN','FIONA','CHARLETTE','SUZIE','SHANTELL','SABRA','RACQUEL','MYONG','MIRA','MARTINE','LUCIENNE','LAVADA','JULIANN','JOHNIE','ELVERA','DELPHIA','CLAIR','CHRISTIANE','CHAROLETTE','CARRI','AUGUSTINE','ASHA','ANGELLA','PAOLA','NINFA','LEDA','LAI','EDA','SUNSHINE','STEFANI','SHANELL','PALMA','MACHELLE','LISSA','KECIA','KATHRYNE','KARLENE','JULISSA','JETTIE','JENNIFFER','HUI','CORRINA','CHRISTOPHER','CAROLANN','ALENA','TESS','ROSARIA','MYRTICE','MARYLEE','LIANE','KENYATTA','JUDIE','JANEY','IN','ELMIRA','ELDORA','DENNA','CRISTI','CATHI','ZAIDA','VONNIE','VIVA','VERNIE','ROSALINE','MARIELA','LUCIANA','LESLI','KARAN','FELICE','DENEEN','ADINA','WYNONA','TARSHA','SHERON','SHASTA','SHANITA','SHANI','SHANDRA','RANDA','PINKIE','PARIS','NELIDA','MARILOU','LYLA','LAURENE','LACI','JOI','JANENE','DOROTHA','DANIELE','DANI','CAROLYNN','CARLYN','BERENICE','AYESHA','ANNELIESE','ALETHEA','THERSA','TAMIKO','RUFINA','OLIVA','MOZELL','MARYLYN','MADISON','KRISTIAN','KATHYRN','KASANDRA','KANDACE','JANAE','GABRIEL','DOMENICA','DEBBRA','DANNIELLE','CHUN','BUFFY','BARBIE','ARCELIA','AJA','ZENOBIA','SHAREN','SHAREE','PATRICK','PAGE','MY','LAVINIA','KUM','KACIE','JACKELINE','HUONG','FELISA','EMELIA','ELEANORA','CYTHIA','CRISTIN','CLYDE','CLARIBEL','CARON','ANASTACIA','ZULMA','ZANDRA','YOKO','TENISHA','SUSANN','SHERILYN','SHAY','SHAWANDA','SABINE','ROMANA','MATHILDA','LINSEY','KEIKO','JOANA','ISELA','GRETTA','GEORGETTA','EUGENIE','DUSTY','DESIRAE','DELORA','CORAZON','ANTONINA','ANIKA','WILLENE','TRACEE','TAMATHA','REGAN','NICHELLE','MICKIE','MAEGAN','LUANA','LANITA','KELSIE','EDELMIRA','BREE','AFTON','TEODORA','TAMIE','SHENA','MEG','LINH','KELI','KACI','DANYELLE','BRITT','ARLETTE','ALBERTINE','ADELLE','TIFFINY','STORMY','SIMONA','NUMBERS','NICOLASA','NICHOL','NIA','NAKISHA','MEE','MAIRA','LOREEN','KIZZY','JOHNNY','JAY','FALLON','CHRISTENE','BOBBYE','ANTHONY','YING','VINCENZA','TANJA','RUBIE','RONI','QUEENIE','MARGARETT','KIMBERLI','IRMGARD','IDELL','HILMA','EVELINA','ESTA','EMILEE','DENNISE','DANIA','CARL','CARIE','ANTONIO','WAI','SANG','RISA','RIKKI','PARTICIA','MUI','MASAKO','MARIO','LUVENIA','LOREE','LONI','LIEN','KEVIN','GIGI','FLORENCIA','DORIAN','DENITA','DALLAS','CHI','BILLYE','ALEXANDER','TOMIKA','SHARITA','RANA','NIKOLE','NEOMA','MARGARITE','MADALYN','LUCINA','LAILA','KALI','JENETTE','GABRIELE','EVELYNE','ELENORA','CLEMENTINA','ALEJANDRINA','ZULEMA','VIOLETTE','VANNESSA','THRESA','RETTA','PIA','PATIENCE','NOELLA','NICKIE','JONELL','DELTA','CHUNG','CHAYA','CAMELIA','BETHEL','ANYA','ANDREW','THANH','SUZANN','SPRING','SHU','MILA','LILLA','LAVERNA','KEESHA','KATTIE','GIA','GEORGENE','EVELINE','ESTELL','ELIZBETH','VIVIENNE','VALLIE','TRUDIE','STEPHANE','MICHEL','MAGALY','MADIE','KENYETTA','KARREN','JANETTA','HERMINE','HARMONY','DRUCILLA','DEBBI','CELESTINA','CANDIE','BRITNI','BECKIE','AMINA','ZITA','YUN','YOLANDE','VIVIEN','VERNETTA','TRUDI','SOMMER','PEARLE','PATRINA','OSSIE','NICOLLE','LOYCE','LETTY','LARISA','KATHARINA','JOSELYN','JONELLE','JENELL','IESHA','HEIDE','FLORINDA','FLORENTINA','FLO','ELODIA','DORINE','BRUNILDA','BRIGID','ASHLI','ARDELLA','TWANA','THU','TARAH','SUNG','SHEA','SHAVON','SHANE','SERINA','RAYNA','RAMONITA','NGA','MARGURITE','LUCRECIA','KOURTNEY','KATI','JESUS','JESENIA','DIAMOND','CRISTA','AYANA','ALICA','ALIA','VINNIE','SUELLEN','ROMELIA','RACHELL','PIPER','OLYMPIA','MICHIKO','KATHALEEN','JOLIE','JESSI','JANESSA','HANA','HA','ELEASE','CARLETTA','BRITANY','SHONA','SALOME','ROSAMOND','REGENA','RAINA','NGOC','NELIA','LOUVENIA','LESIA','LATRINA','LATICIA','LARHONDA','JINA','JACKI','HOLLIS','HOLLEY','EMMY','DEEANN','CORETTA','ARNETTA','VELVET','THALIA','SHANICE','NETA','MIKKI','MICKI','LONNA','LEANA','LASHUNDA','KILEY','JOYE','JACQULYN','IGNACIA','HYUN','HIROKO','HENRY','HENRIETTE','ELAYNE','DELINDA','DARNELL','DAHLIA','COREEN','CONSUELA','CONCHITA','CELINE','BABETTE','AYANNA','ANETTE','ALBERTINA','SKYE','SHAWNEE','SHANEKA','QUIANA','PAMELIA','MIN','MERRI','MERLENE','MARGIT','KIESHA','KIERA','KAYLENE','JODEE','JENISE','ERLENE','EMMIE','ELSE','DARYL','DALILA','DAISEY','CODY','CASIE','BELIA','BABARA','VERSIE','VANESA','SHELBA','SHAWNDA','SAM','NORMAN','NIKIA','NAOMA','MARNA','MARGERET','MADALINE','LAWANA','KINDRA','JUTTA','JAZMINE','JANETT','HANNELORE','GLENDORA','GERTRUD','GARNETT','FREEDA','FREDERICA','FLORANCE','FLAVIA','DENNIS','CARLINE','BEVERLEE','ANJANETTE','VALDA','TRINITY','TAMALA','STEVIE','SHONNA','SHA','SARINA','ONEIDA','MICAH','MERILYN','MARLEEN','LURLINE','LENNA','KATHERIN','JIN','JENI','HAE','GRACIA','GLADY','FARAH','ERIC','ENOLA','EMA','DOMINQUE','DEVONA','DELANA','CECILA','CAPRICE','ALYSHA','ALI','ALETHIA','VENA','THERESIA','TAWNY','SONG','SHAKIRA','SAMARA','SACHIKO','RACHELE','PAMELLA','NICKY','MARNI','MARIEL','MAREN','MALISA','LIGIA','LERA','LATORIA','LARAE','KIMBER','KATHERN','KAREY','JENNEFER','JANETH','HALINA','FREDIA','DELISA','DEBROAH','CIERA','CHIN','ANGELIKA','ANDREE','ALTHA','YEN','VIVAN','TERRESA','TANNA','SUK','SUDIE','SOO','SIGNE','SALENA','RONNI','REBBECCA','MYRTIE','MCKENZIE','MALIKA','MAIDA','LOAN','LEONARDA','KAYLEIGH','FRANCE','ETHYL','ELLYN','DAYLE','CAMMIE','BRITTNI','BIRGIT','AVELINA','ASUNCION','ARIANNA','AKIKO','VENICE','TYESHA','TONIE','TIESHA','TAKISHA','STEFFANIE','SINDY','SANTANA','MEGHANN','MANDA','MACIE','LADY','KELLYE','KELLEE','JOSLYN','JASON','INGER','INDIRA','GLINDA','GLENNIS','FERNANDA','FAUSTINA','ENEIDA','ELICIA','DOT','DIGNA','DELL','ARLETTA','ANDRE','WILLIA','TAMMARA','TABETHA','SHERRELL','SARI','REFUGIO','REBBECA','PAULETTA','NIEVES','NATOSHA','NAKITA','MAMMIE','KENISHA','KAZUKO','KASSIE','GARY','EARLEAN','DAPHINE','CORLISS','CLOTILDE','CAROLYNE','BERNETTA','AUGUSTINA','AUDREA','ANNIS','ANNABELL','YAN','TENNILLE','TAMICA','SELENE','SEAN','ROSANA','REGENIA','QIANA','MARKITA','MACY','LEEANNE','LAURINE','KYM','JESSENIA','JANITA','GEORGINE','GENIE','EMIKO','ELVIE','DEANDRA','DAGMAR','CORIE','COLLEN','CHERISH','ROMAINE','PORSHA','PEARLENE','MICHELINE','MERNA','MARGORIE','MARGARETTA','LORE','KENNETH','JENINE','HERMINA','FREDERICKA','ELKE','DRUSILLA','DORATHY','DIONE','DESIRE','CELENA','BRIGIDA','ANGELES','ALLEGRA','THEO','TAMEKIA','SYNTHIA','STEPHEN','SOOK','SLYVIA','ROSANN','REATHA','RAYE','MARQUETTA','MARGART','LING','LAYLA','KYMBERLY','KIANA','KAYLEEN','KATLYN','KARMEN','JOELLA','IRINA','EMELDA','ELENI','DETRA','CLEMMIE','CHERYLL','CHANTELL','CATHEY','ARNITA','ARLA','ANGLE','ANGELIC','ALYSE','ZOFIA','THOMASINE','TENNIE','SON','SHERLY','SHERLEY','SHARYL','REMEDIOS','PETRINA','NICKOLE','MYUNG','MYRLE','MOZELLA','LOUANNE','LISHA','LATIA','LANE','KRYSTA','JULIENNE','JOEL','JEANENE','JACQUALINE','ISAURA','GWENDA','EARLEEN','DONALD','CLEOPATRA','CARLIE','AUDIE','ANTONIETTA','ALISE','ALEX','VERDELL','VAL','TYLER','TOMOKO','THAO','TALISHA','STEVEN','SO','SHEMIKA','SHAUN','SCARLET','SAVANNA','SANTINA','ROSIA','RAEANN','ODILIA','NANA','MINNA','MAGAN','LYNELLE','LE','KARMA','JOEANN','IVANA','INELL','ILANA','HYE','HONEY','HEE','GUDRUN','FRANK','DREAMA','CRISSY','CHANTE','CARMELINA','ARVILLA','ARTHUR','ANNAMAE','ALVERA','ALEIDA','AARON','YEE','YANIRA','VANDA','TIANNA','TAM','STEFANIA','SHIRA','PERRY','NICOL','NANCIE','MONSERRATE','MINH','MELYNDA','MELANY','MATTHEW','LOVELLA','LAURE','KIRBY','KACY','JACQUELYNN','HYON','GERTHA','FRANCISCO','ELIANA','CHRISTENA','CHRISTEEN','CHARISE','CATERINA','CARLEY','CANDYCE','ARLENA','AMMIE','YANG','WILLETTE','VANITA','TUYET','TINY','SYREETA','SILVA','SCOTT','RONALD','PENNEY','NYLA','MICHAL','MAURICE','MARYAM','MARYA','MAGEN','LUDIE','LOMA','LIVIA','LANELL','KIMBERLIE','JULEE','DONETTA','DIEDRA','DENISHA','DEANE','DAWNE','CLARINE','CHERRYL','BRONWYN','BRANDON','ALLA','VALERY','TONDA','SUEANN','SORAYA','SHOSHANA','SHELA','SHARLEEN','SHANELLE','NERISSA','MICHEAL','MERIDITH','MELLIE','MAYE','MAPLE','MAGARET','LUIS','LILI','LEONILA','LEONIE','LEEANNA','LAVONIA','LAVERA','KRISTEL','KATHEY','KATHE','JUSTIN','JULIAN','JIMMY','JANN','ILDA','HILDRED','HILDEGARDE','GENIA','FUMIKO','EVELIN','ERMELINDA','ELLY','DUNG','DOLORIS','DIONNA','DANAE','BERNEICE','ANNICE','ALIX','VERENA','VERDIE','TRISTAN','SHAWNNA','SHAWANA','SHAUNNA','ROZELLA','RANDEE','RANAE','MILAGRO','LYNELL','LUISE','LOUIE','LOIDA','LISBETH','KARLEEN','JUNITA','JONA','ISIS','HYACINTH','HEDY','GWENN','ETHELENE','ERLINE','EDWARD','DONYA','DOMONIQUE','DELICIA','DANNETTE','CICELY','BRANDA','BLYTHE','BETHANN','ASHLYN','ANNALEE','ALLINE','YUKO','VELLA','TRANG','TOWANDA','TESHA','SHERLYN','NARCISA','MIGUELINA','MERI','MAYBELL','MARLANA','MARGUERITA','MADLYN','LUNA','LORY','LORIANN','LIBERTY','LEONORE','LEIGHANN','LAURICE','LATESHA','LARONDA','KATRICE','KASIE','KARL','KALEY','JADWIGA','GLENNIE','GEARLDINE','FRANCINA','EPIFANIA','DYAN','DORIE','DIEDRE','DENESE','DEMETRICE','DELENA','DARBY','CRISTIE','CLEORA','CATARINA','CARISA','BERNIE','BARBERA','ALMETA','TRULA','TEREASA','SOLANGE','SHEILAH','SHAVONNE','SANORA','ROCHELL','MATHILDE','MARGARETA','MAIA','LYNSEY','LAWANNA','LAUNA','KENA','KEENA','KATIA','JAMEY','GLYNDA','GAYLENE','ELVINA','ELANOR','DANUTA','DANIKA','CRISTEN','CORDIE','COLETTA','CLARITA','CARMON','BRYNN','AZUCENA','AUNDREA','ANGELE','YI','WALTER','VERLIE','VERLENE','TAMESHA','SILVANA','SEBRINA','SAMIRA','REDA','RAYLENE','PENNI','PANDORA','NORAH','NOMA','MIREILLE','MELISSIA','MARYALICE','LARAINE','KIMBERY','KARYL','KARINE','KAM','JOLANDA','JOHANA','JESUSA','JALEESA','JAE','JACQUELYNE','IRISH','ILUMINADA','HILARIA','HANH','GENNIE','FRANCIE','FLORETTA','EXIE','EDDA','DREMA','DELPHA','BEV','BARBAR','ASSUNTA','ARDELL','ANNALISA','ALISIA','YUKIKO','YOLANDO','WONDA','WEI','WALTRAUD','VETA','TEQUILA','TEMEKA','TAMEIKA','SHIRLEEN','SHENITA','PIEDAD','OZELLA','MIRTHA','MARILU','KIMIKO','JULIANE','JENICE','JEN','JANAY','JACQUILINE','HILDE','FE','FAE','EVAN','EUGENE','ELOIS','ECHO','DEVORAH','CHAU','BRINDA','BETSEY','ARMINDA','ARACELIS','APRYL','ANNETT','ALISHIA','VEOLA','USHA','TOSHIKO','THEOLA','TASHIA','TALITHA','SHERY','RUDY','RENETTA','REIKO','RASHEEDA','OMEGA','OBDULIA','MIKA','MELAINE','MEGGAN','MARTIN','MARLEN','MARGET','MARCELINE','MANA','MAGDALEN','LIBRADA','LEZLIE','LEXIE','LATASHIA','LASANDRA','KELLE','ISIDRA','ISA','INOCENCIA','GWYN','FRANCOISE','ERMINIA','ERINN','DIMPLE','DEVORA','CRISELDA','ARMANDA','ARIE','ARIANE','ANGELO','ANGELENA','ALLEN','ALIZA','ADRIENE','ADALINE','XOCHITL','TWANNA','TRAN','TOMIKO','TAMISHA','TAISHA','SUSY','SIU','RUTHA','ROXY','RHONA','RAYMOND','OTHA','NORIKO','NATASHIA','MERRIE','MELVIN','MARINDA','MARIKO','MARGERT','LORIS','LIZZETTE','LEISHA','KAILA','KA','JOANNIE','JERRICA','JENE','JANNET','JANEE','JACINDA','HERTA','ELENORE','DORETTA','DELAINE','DANIELL','CLAUDIE','CHINA','BRITTA','APOLONIA','AMBERLY','ALEASE','YURI','YUK','WEN','WANETA','UTE','TOMI','SHARRI','SANDIE','ROSELLE','REYNALDA','RAGUEL','PHYLICIA','PATRIA','OLIMPIA','ODELIA','MITZIE','MITCHELL','MISS','MINDA','MIGNON','MICA','MENDY','MARIVEL','MAILE','LYNETTA','LAVETTE','LAURYN','LATRISHA','LAKIESHA','KIERSTEN','KARY','JOSPHINE','JOLYN','JETTA','JANISE','JACQUIE','IVELISSE','GLYNIS','GIANNA','GAYNELLE','EMERALD','DEMETRIUS','DANYELL','DANILLE','DACIA','CORALEE','CHER','CEOLA','BRETT','BELL','ARIANNE','ALESHIA','YUNG','WILLIEMAE','TROY','TRINH','THORA','TAI','SVETLANA','SHERIKA','SHEMEKA','SHAUNDA','ROSELINE','RICKI','MELDA','MALLIE','LAVONNA','LATINA','LARRY','LAQUANDA','LALA','LACHELLE','KLARA','KANDIS','JOHNA','JEANMARIE','JAYE','HANG','GRAYCE','GERTUDE','EMERITA','EBONIE','CLORINDA','CHING','CHERY','CAROLA','BREANN','BLOSSOM','BERNARDINE','BECKI','ARLETHA','ARGELIA','ARA','ALITA','YULANDA','YON','YESSENIA','TOBI','TASIA','SYLVIE','SHIRL','SHIRELY','SHERIDAN','SHELLA','SHANTELLE','SACHA','ROYCE','REBECKA','REAGAN','PROVIDENCIA','PAULENE','MISHA','MIKI','MARLINE','MARICA','LORITA','LATOYIA','LASONYA','KERSTIN','KENDA','KEITHA','KATHRIN','JAYMIE','JACK','GRICELDA','GINETTE','ERYN','ELINA','ELFRIEDA','DANYEL','CHEREE','CHANELLE','BARRIE','AVERY','AURORE','ANNAMARIA','ALLEEN','AILENE','AIDE','YASMINE','VASHTI','VALENTINE','TREASA','TORY','TIFFANEY','SHERYLL','SHARIE','SHANAE','SAU','RAISA','PA','NEDA','MITSUKO','MIRELLA','MILDA','MARYANNA','MARAGRET','MABELLE','LUETTA','LORINA','LETISHA','LATARSHA','LANELLE','LAJUANA','KRISSY','KARLY','KARENA','JON','JESSIKA','JERICA','JEANELLE','JANUARY','JALISA','JACELYN','IZOLA','IVEY','GREGORY','EUNA','ETHA','DREW','DOMITILA','DOMINICA','DAINA','CREOLA','CARLI','CAMIE','BUNNY','BRITTNY','ASHANTI','ANISHA','ALEEN','ADAH','YASUKO','WINTER','VIKI','VALRIE','TONA','TINISHA','THI','TERISA','TATUM','TANEKA','SIMONNE','SHALANDA','SERITA','RESSIE','REFUGIA','PAZ','OLENE','NA','MERRILL','MARGHERITA','MANDIE','MAN','MAIRE','LYNDIA','LUCI','LORRIANE','LORETA','LEONIA','LAVONA','LASHAWNDA','LAKIA','KYOKO','KRYSTINA','KRYSTEN','KENIA','KELSI','JUDE','JEANICE','ISOBEL','GEORGIANN','GENNY','FELICIDAD','EILENE','DEON','DELOISE','DEEDEE','DANNIE','CONCEPTION','CLORA','CHERILYN','CHANG','CALANDRA','BERRY','ARMANDINA','ANISA','ULA','TIMOTHY','TIERA','THERESSA','STEPHANIA','SIMA','SHYLA','SHONTA','SHERA','SHAQUITA','SHALA','SAMMY','ROSSANA','NOHEMI','NERY','MORIAH','MELITA','MELIDA','MELANI','MARYLYNN','MARISHA','MARIETTE','MALORIE','MADELENE','LUDIVINA','LORIA','LORETTE','LORALEE','LIANNE','LEON','LAVENIA','LAURINDA','LASHON','KIT','KIMI','KEILA','KATELYNN','KAI','JONE','JOANE','JI','JAYNA','JANELLA','JA','HUE','HERTHA','FRANCENE','ELINORE','DESPINA','DELSIE','DEEDRA','CLEMENCIA','CARRY','CAROLIN','CARLOS','BULAH','BRITTANIE','BOK','BLONDELL','BIBI','BEAULAH','BEATA','ANNITA','AGRIPINA','VIRGEN','VALENE','UN','TWANDA','TOMMYE','TOI','TARRA','TARI','TAMMERA','SHAKIA','SADYE','RUTHANNE','ROCHEL','RIVKA','PURA','NENITA','NATISHA','MING','MERRILEE','MELODEE','MARVIS','LUCILLA','LEENA','LAVETA','LARITA','LANIE','KEREN','ILEEN','GEORGEANN','GENNA','GENESIS','FRIDA','EWA','EUFEMIA','EMELY','ELA','EDYTH','DEONNA','DEADRA','DARLENA','CHANELL','CHAN','CATHERN','CASSONDRA','CASSAUNDRA','BERNARDA','BERNA','ARLINDA','ANAMARIA','ALBERT','WESLEY','VERTIE','VALERI','TORRI','TATYANA','STASIA','SHERISE','SHERILL','SEASON','SCOTTIE','SANDA','RUTHE','ROSY','ROBERTO','ROBBI','RANEE','QUYEN','PEARLY','PALMIRA','ONITA','NISHA','NIESHA','NIDA','NEVADA','NAM','MERLYN','MAYOLA','MARYLOUISE','MARYLAND','MARX','MARTH','MARGENE','MADELAINE','LONDA','LEONTINE','LEOMA','LEIA','LAWRENCE','LAURALEE','LANORA','LAKITA','KIYOKO','KETURAH','KATELIN','KAREEN','JONIE','JOHNETTE','JENEE','JEANETT','IZETTA','HIEDI','HEIKE','HASSIE','HAROLD','GIUSEPPINA','GEORGANN','FIDELA','FERNANDE','ELWANDA','ELLAMAE','ELIZ','DUSTI','DOTTY','CYNDY','CORALIE','CELESTA','ARGENTINA','ALVERTA','XENIA','WAVA','VANETTA','TORRIE','TASHINA','TANDY','TAMBRA','TAMA','STEPANIE','SHILA','SHAUNTA','SHARAN','SHANIQUA','SHAE','SETSUKO','SERAFINA','SANDEE','ROSAMARIA','PRISCILA','OLINDA','NADENE','MUOI','MICHELINA','MERCEDEZ','MARYROSE','MARIN','MARCENE','MAO','MAGALI','MAFALDA','LOGAN','LINN','LANNIE','KAYCE','KAROLINE','KAMILAH','KAMALA','JUSTA','JOLINE','JENNINE','JACQUETTA','IRAIDA','GERALD','GEORGEANNA','FRANCHESCA','FAIRY','EMELINE','ELANE','EHTEL','EARLIE','DULCIE','DALENE','CRIS','CLASSIE','CHERE','CHARIS','CAROYLN','CARMINA','CARITA','BRIAN','BETHANIE','AYAKO','ARICA','AN','ALYSA','ALESSANDRA','AKILAH','ADRIEN','ZETTA','YOULANDA','YELENA','YAHAIRA','XUAN','WENDOLYN','VICTOR','TIJUANA','TERRELL','TERINA','TERESIA','SUZI','SUNDAY','SHERELL','SHAVONDA','SHAUNTE','SHARDA','SHAKITA','SENA','RYANN','RUBI','RIVA','REGINIA','REA','RACHAL','PARTHENIA','PAMULA','MONNIE','MONET','MICHAELE','MELIA','MARINE','MALKA','MAISHA','LISANDRA','LEO','LEKISHA','LEAN','LAURENCE','LAKENDRA','KRYSTIN','KORTNEY','KIZZIE','KITTIE','KERA','KENDAL','KEMBERLY','KANISHA','JULENE','JULE','JOSHUA','JOHANNE','JEFFREY','JAMEE','HAN','HALLEY','GIDGET','GALINA','FREDRICKA','FLETA','FATIMAH','EUSEBIA','ELZA','ELEONORE','DORTHEY','DORIA','DONELLA','DINORAH','DELORSE','CLARETHA','CHRISTINIA','CHARLYN','BONG','BELKIS','AZZIE','ANDERA','AIKO','ADENA','YER','YAJAIRA','WAN','VANIA','ULRIKE','TOSHIA','TIFANY','STEFANY','SHIZUE','SHENIKA','SHAWANNA','SHAROLYN','SHARILYN','SHAQUANA','SHANTAY','SEE','ROZANNE','ROSELEE','RICKIE','REMONA','REANNA','RAELENE','QUINN','PHUNG','PETRONILA','NATACHA','NANCEY','MYRL','MIYOKO','MIESHA','MERIDETH','MARVELLA','MARQUITTA','MARHTA','MARCHELLE','LIZETH','LIBBIE','LAHOMA','LADAWN','KINA','KATHELEEN','KATHARYN','KARISA','KALEIGH','JUNIE','JULIEANN','JOHNSIE','JANEAN','JAIMEE','JACKQUELINE','HISAKO','HERMA','HELAINE','GWYNETH','GLENN','GITA','EUSTOLIA','EMELINA','ELIN','EDRIS','DONNETTE','DONNETTA','DIERDRE','DENAE','DARCEL','CLAUDE','CLARISA','CINDERELLA','CHIA','CHARLESETTA','CHARITA','CELSA','CASSY','CASSI','CARLEE','BRUNA','BRITTANEY','BRANDE','BILLI','BAO','ANTONETTA','ANGLA','ANGELYN','ANALISA','ALANE','WENONA','WENDIE','VERONIQUE','VANNESA','TOBIE','TEMPIE','SUMIKO','SULEMA','SPARKLE','SOMER','SHEBA','SHAYNE','SHARICE','SHANEL','SHALON','SAGE','ROY','ROSIO','ROSELIA','RENAY','REMA','REENA','PORSCHE','PING','PEG','OZIE','ORETHA','ORALEE','ODA','NU','NGAN','NAKESHA','MILLY','MARYBELLE','MARLIN','MARIS','MARGRETT','MARAGARET','MANIE','LURLENE','LILLIA','LIESELOTTE','LAVELLE','LASHAUNDA','LAKEESHA','KEITH','KAYCEE','KALYN','JOYA','JOETTE','JENAE','JANIECE','ILLA','GRISEL','GLAYDS','GENEVIE','GALA','FREDDA','FRED','ELMER','ELEONOR','DEBERA','DEANDREA','DAN','CORRINNE','CORDIA','CONTESSA','COLENE','CLEOTILDE','CHARLOTT','CHANTAY','CECILLE','BEATRIS','AZALEE','ARLEAN','ARDATH','ANJELICA','ANJA','ALFREDIA','ALEISHA','ADAM','ZADA','YUONNE','XIAO','WILLODEAN','WHITLEY','VENNIE','VANNA','TYISHA','TOVA','TORIE','TONISHA','TILDA','TIEN','TEMPLE','SIRENA','SHERRIL','SHANTI','SHAN','SENAIDA','SAMELLA','ROBBYN','RENDA','REITA','PHEBE','PAULITA','NOBUKO','NGUYET','NEOMI','MOON','MIKAELA','MELANIA','MAXIMINA','MARG','MAISIE','LYNNA','LILLI','LAYNE','LASHAUN','LAKENYA','LAEL','KIRSTIE','KATHLINE','KASHA','KARLYN','KARIMA','JOVAN','JOSEFINE','JENNELL','JACQUI','JACKELYN','HYO','HIEN','GRAZYNA','FLORRIE','FLORIA','ELEONORA','DWANA','DORLA','DONG','DELMY','DEJA','DEDE','DANN','CRYSTA','CLELIA','CLARIS','CLARENCE','CHIEKO','CHERLYN','CHERELLE','CHARMAIN','CHARA','CAMMY','BEE','ARNETTE','ARDELLE','ANNIKA','AMIEE','AMEE','ALLENA','YVONE','YUKI','YOSHIE','YEVETTE','YAEL','WILLETTA','VONCILE','VENETTA','TULA','TONETTE','TIMIKA','TEMIKA','TELMA','TEISHA','TAREN','TA','STACEE','SHIN','SHAWNTA','SATURNINA','RICARDA','POK','PASTY','ONIE','NUBIA','MORA','MIKE','MARIELLE','MARIELLA','MARIANELA','MARDELL','MANY','LUANNA','LOISE','LISABETH','LINDSY','LILLIANA','LILLIAM','LELAH','LEIGHA','LEANORA','LANG','KRISTEEN','KHALILAH','KEELEY','KANDRA','JUNKO','JOAQUINA','JERLENE','JANI','JAMIKA','JAME','HSIU','HERMILA','GOLDEN','GENEVIVE','EVIA','EUGENA','EMMALINE','ELFREDA','ELENE','DONETTE','DELCIE','DEEANNA','DARCEY','CUC','CLARINDA','CIRA','CHAE','CELINDA','CATHERYN','CATHERIN','CASIMIRA','CARMELIA','CAMELLIA','BREANA','BOBETTE','BERNARDINA','BEBE','BASILIA','ARLYNE','AMAL','ALAYNA','ZONIA','ZENIA','YURIKO','YAEKO','WYNELL','WILLOW','WILLENA','VERNIA','TU','TRAVIS','TORA','TERRILYN','TERICA','TENESHA','TAWNA','TAJUANA','TAINA','STEPHNIE','SONA','SOL','SINA','SHONDRA','SHIZUKO','SHERLENE','SHERICE','SHARIKA','ROSSIE','ROSENA','RORY','RIMA','RIA','RHEBA','RENNA','PETER','NATALYA','NANCEE','MELODI','MEDA','MAXIMA','MATHA','MARKETTA','MARICRUZ','MARCELENE','MALVINA','LUBA','LOUETTA','LEIDA','LECIA','LAURAN','LASHAWNA','LAINE','KHADIJAH','KATERINE','KASI','KALLIE','JULIETTA','JESUSITA','JESTINE','JESSIA','JEREMY','JEFFIE','JANYCE','ISADORA','GEORGIANNE','FIDELIA','EVITA','EURA','EULAH','ESTEFANA','ELSY','ELIZABET','ELADIA','DODIE','DION','DIA','DENISSE','DELORAS','DELILA','DAYSI','DAKOTA','CURTIS','CRYSTLE','CONCHA','COLBY','CLARETTA','CHU','CHRISTIA','CHARLSIE','CHARLENA','CARYLON','BETTYANN','ASLEY','ASHLEA','AMIRA','AI','AGUEDA','AGNUS','YUETTE','VINITA','VICTORINA','TYNISHA','TREENA','TOCCARA','TISH','THOMASENA','TEGAN','SOILA','SHILOH','SHENNA','SHARMAINE','SHANTAE','SHANDI','SEPTEMBER','SARAN','SARAI','SANA','SAMUEL','SALLEY','ROSETTE','ROLANDE','REGINE','OTELIA','OSCAR','OLEVIA','NICHOLLE','NECOLE','NAIDA','MYRTA','MYESHA','MITSUE','MINTA','MERTIE','MARGY','MAHALIA','MADALENE','LOVE','LOURA','LOREAN','LEWIS','LESHA','LEONIDA','LENITA','LAVONE','LASHELL','LASHANDRA','LAMONICA','KIMBRA','KATHERINA','KARRY','KANESHA','JULIO','JONG','JENEVA','JAQUELYN','HWA','GILMA','GHISLAINE','GERTRUDIS','FRANSISCA','FERMINA','ETTIE','ETSUKO','ELLIS','ELLAN','ELIDIA','EDRA','DORETHEA','DOREATHA','DENYSE','DENNY','DEETTA','DAINE','CYRSTAL','CORRIN','CAYLA','CARLITA','CAMILA','BURMA','BULA','BUENA','BLAKE','BARABARA','AVRIL','AUSTIN','ALAINE','ZANA','WILHEMINA','WANETTA','VIRGIL','VI','VERONIKA','VERNON','VERLINE','VASILIKI','TONITA','TISA','TEOFILA','TAYNA','TAUNYA','TANDRA','TAKAKO','SUNNI','SUANNE','SIXTA','SHARELL','SEEMA','RUSSELL','ROSENDA','ROBENA','RAYMONDE','PEI','PAMILA','OZELL','NEIDA','NEELY','MISTIE','MICHA','MERISSA','MAURITA','MARYLN','MARYETTA','MARSHALL','MARCELL','MALENA','MAKEDA','MADDIE','LOVETTA','LOURIE','LORRINE','LORILEE','LESTER','LAURENA','LASHAY','LARRAINE','LAREE','LACRESHA','KRISTLE','KRISHNA','KEVA','KEIRA','KAROLE','JOIE','JINNY','JEANNETTA','JAMA','HEIDY','GILBERTE','GEMA','FAVIOLA','EVELYNN','ENDA','ELLI','ELLENA','DIVINA','DAGNY','COLLENE','CODI','CINDIE','CHASSIDY','CHASIDY','CATRICE','CATHERINA','CASSEY','CAROLL','CARLENA','CANDRA','CALISTA','BRYANNA','BRITTENY','BEULA','BARI','AUDRIE','AUDRIA','ARDELIA','ANNELLE','ANGILA','ALONA','ALLYN','DOUGLAS','ROGER','JONATHAN','RALPH','NICHOLAS','BENJAMIN','BRUCE','HARRY','WAYNE','STEVE','HOWARD','ERNEST','PHILLIP','TODD','CRAIG','ALAN','PHILIP','EARL','DANNY','BRYAN','STANLEY','LEONARD','NATHAN','MANUEL','RODNEY','MARVIN','VINCENT','JEFFERY','JEFF','CHAD','JACOB','ALFRED','BRADLEY','HERBERT','FREDERICK','EDWIN','DON','RICKY','RANDALL','BARRY','BERNARD','LEROY','MARCUS','THEODORE','CLIFFORD','MIGUEL','JIM','TOM','CALVIN','BILL','LLOYD','DEREK','WARREN','DARRELL','JEROME','FLOYD','ALVIN','TIM','GORDON','GREG','JORGE','DUSTIN','PEDRO','DERRICK','ZACHARY','HERMAN','GLEN','HECTOR','RICARDO','RICK','BRENT','RAMON','GILBERT','MARC','REGINALD','RUBEN','NATHANIEL','RAFAEL','EDGAR','MILTON','RAUL','BEN','CHESTER','DUANE','FRANKLIN','BRAD','RON','ROLAND','ARNOLD','HARVEY','JARED','ERIK','DARRYL','NEIL','JAVIER','FERNANDO','CLINTON','TED','MATHEW','TYRONE','DARREN','LANCE','KURT','ALLAN','NELSON','GUY','CLAYTON','HUGH','MAX','DWAYNE','DWIGHT','ARMANDO','FELIX','EVERETT','IAN','WALLACE','KEN','BOB','ALFREDO','ALBERTO','DAVE','IVAN','BYRON','ISAAC','MORRIS','CLIFTON','WILLARD','ROSS','ANDY','SALVADOR','KIRK','SERGIO','SETH','KENT','TERRANCE','EDUARDO','TERRENCE','ENRIQUE','WADE','STUART','FREDRICK','ARTURO','ALEJANDRO','NICK','LUTHER','WENDELL','JEREMIAH','JULIUS','OTIS','TREVOR','OLIVER','LUKE','HOMER','GERARD','DOUG','KENNY','HUBERT','LYLE','MATT','ALFONSO','ORLANDO','REX','CARLTON','ERNESTO','NEAL','PABLO','LORENZO','OMAR','WILBUR','GRANT','HORACE','RODERICK','ABRAHAM','WILLIS','RICKEY','ANDRES','CESAR','JOHNATHAN','MALCOLM','RUDOLPH','DAMON','KELVIN','PRESTON','ALTON','ARCHIE','MARCO','WM','PETE','RANDOLPH','GARRY','GEOFFREY','JONATHON','FELIPE','GERARDO','ED','DOMINIC','DELBERT','COLIN','GUILLERMO','EARNEST','LUCAS','BENNY','SPENCER','RODOLFO','MYRON','EDMUND','GARRETT','SALVATORE','CEDRIC','LOWELL','GREGG','SHERMAN','WILSON','SYLVESTER','ROOSEVELT','ISRAEL','JERMAINE','FORREST','WILBERT','LELAND','SIMON','CLARK','IRVING','BRYANT','OWEN','RUFUS','WOODROW','KRISTOPHER','MACK','LEVI','MARCOS','GUSTAVO','JAKE','LIONEL','GILBERTO','CLINT','NICOLAS','ISMAEL','ORVILLE','ERVIN','DEWEY','AL','WILFRED','JOSH','HUGO','IGNACIO','CALEB','TOMAS','SHELDON','ERICK','STEWART','DOYLE','DARREL','ROGELIO','TERENCE','SANTIAGO','ALONZO','ELIAS','BERT','ELBERT','RAMIRO','CONRAD','NOAH','GRADY','PHIL','CORNELIUS','LAMAR','ROLANDO','CLAY','PERCY','DEXTER','BRADFORD','DARIN','AMOS','MOSES','IRVIN','SAUL','ROMAN','RANDAL','TIMMY','DARRIN','WINSTON','BRENDAN','ABEL','DOMINICK','BOYD','EMILIO','ELIJAH','DOMINGO','EMMETT','MARLON','EMANUEL','JERALD','EDMOND','EMIL','DEWAYNE','WILL','OTTO','TEDDY','REYNALDO','BRET','JESS','TRENT','HUMBERTO','EMMANUEL','STEPHAN','VICENTE','LAMONT','GARLAND','MILES','EFRAIN','HEATH','RODGER','HARLEY','ETHAN','ELDON','ROCKY','PIERRE','JUNIOR','FREDDY','ELI','BRYCE','ANTOINE','STERLING','CHASE','GROVER','ELTON','CLEVELAND','DYLAN','CHUCK','DAMIAN','REUBEN','STAN','AUGUST','LEONARDO','JASPER','RUSSEL','ERWIN','BENITO','HANS','MONTE','BLAINE','ERNIE','CURT','QUENTIN','AGUSTIN','MURRAY','JAMAL','ADOLFO','HARRISON','TYSON','BURTON','BRADY','ELLIOTT','WILFREDO','BART','JARROD','VANCE','DENIS','DAMIEN','JOAQUIN','HARLAN','DESMOND','ELLIOT','DARWIN','GREGORIO','BUDDY','XAVIER','KERMIT','ROSCOE','ESTEBAN','ANTON','SOLOMON','SCOTTY','NORBERT','ELVIN','WILLIAMS','NOLAN','ROD','QUINTON','HAL','BRAIN','ROB','ELWOOD','KENDRICK','DARIUS','MOISES','FIDEL','THADDEUS','CLIFF','MARCEL','JACKSON','RAPHAEL','BRYON','ARMAND','ALVARO','JEFFRY','DANE','JOESPH','THURMAN','NED','RUSTY','MONTY','FABIAN','REGGIE','MASON','GRAHAM','ISAIAH','VAUGHN','GUS','LOYD','DIEGO','ADOLPH','NORRIS','MILLARD','ROCCO','GONZALO','DERICK','RODRIGO','WILEY','RIGOBERTO','ALPHONSO','TY','NOE','VERN','REED','JEFFERSON','ELVIS','BERNARDO','MAURICIO','HIRAM','DONOVAN','BASIL','RILEY','NICKOLAS','MAYNARD','SCOT','VINCE','QUINCY','EDDY','SEBASTIAN','FEDERICO','ULYSSES','HERIBERTO','DONNELL','COLE','DAVIS','GAVIN','EMERY','WARD','ROMEO','JAYSON','DANTE','CLEMENT','COY','MAXWELL','JARVIS','BRUNO','ISSAC','DUDLEY','BROCK','SANFORD','CARMELO','BARNEY','NESTOR','STEFAN','DONNY','ART','LINWOOD','BEAU','WELDON','GALEN','ISIDRO','TRUMAN','DELMAR','JOHNATHON','SILAS','FREDERIC','DICK','IRWIN','MERLIN','CHARLEY','MARCELINO','HARRIS','CARLO','TRENTON','KURTIS','HUNTER','AURELIO','WINFRED','VITO','COLLIN','DENVER','CARTER','LEONEL','EMORY','PASQUALE','MOHAMMAD','MARIANO','DANIAL','LANDON','DIRK','BRANDEN','ADAN','BUFORD','GERMAN','WILMER','EMERSON','ZACHERY','FLETCHER','JACQUES','ERROL','DALTON','MONROE','JOSUE','EDWARDO','BOOKER','WILFORD','SONNY','SHELTON','CARSON','THERON','RAYMUNDO','DAREN','HOUSTON','ROBBY','LINCOLN','GENARO','BENNETT','OCTAVIO','CORNELL','HUNG','ARRON','ANTONY','HERSCHEL','GIOVANNI','GARTH','CYRUS','CYRIL','RONNY','LON','FREEMAN','DUNCAN','KENNITH','CARMINE','ERICH','CHADWICK','WILBURN','RUSS','REID','MYLES','ANDERSON','MORTON','JONAS','FOREST','MITCHEL','MERVIN','ZANE','RICH','JAMEL','LAZARO','ALPHONSE','RANDELL','MAJOR','JARRETT','BROOKS','ABDUL','LUCIANO','SEYMOUR','EUGENIO','MOHAMMED','VALENTIN','CHANCE','ARNULFO','LUCIEN','FERDINAND','THAD','EZRA','ALDO','RUBIN','ROYAL','MITCH','EARLE','ABE','WYATT','MARQUIS','LANNY','KAREEM','JAMAR','BORIS','ISIAH','EMILE','ELMO','ARON','LEOPOLDO','EVERETTE','JOSEF','ELOY','RODRICK','REINALDO','LUCIO','JERROD','WESTON','HERSHEL','BARTON','PARKER','LEMUEL','BURT','JULES','GIL','ELISEO','AHMAD','NIGEL','EFREN','ANTWAN','ALDEN','MARGARITO','COLEMAN','DINO','OSVALDO','LES','DEANDRE','NORMAND','KIETH','TREY','NORBERTO','NAPOLEON','JEROLD','FRITZ','ROSENDO','MILFORD','CHRISTOPER','ALFONZO','LYMAN','JOSIAH','BRANT','WILTON','RICO','JAMAAL','DEWITT','BRENTON','OLIN','FOSTER','FAUSTINO','CLAUDIO','JUDSON','GINO','EDGARDO','ALEC','TANNER','JARRED','DONN','TAD','PRINCE','PORFIRIO','ODIS','LENARD','CHAUNCEY','TOD','MEL','MARCELO','KORY','AUGUSTUS','KEVEN','HILARIO','BUD','SAL','ORVAL','MAURO','ZACHARIAH','OLEN','ANIBAL','MILO','JED','DILLON','AMADO','NEWTON','LENNY','RICHIE','HORACIO','BRICE','MOHAMED','DELMER','DARIO','REYES','MAC','JONAH','JERROLD','ROBT','HANK','RUPERT','ROLLAND','KENTON','DAMION','ANTONE','WALDO','FREDRIC','BRADLY','KIP','BURL','WALKER','TYREE','JEFFEREY','AHMED','WILLY','STANFORD','OREN','NOBLE','MOSHE','MIKEL','ENOCH','BRENDON','QUINTIN','JAMISON','FLORENCIO','DARRICK','TOBIAS','HASSAN','GIUSEPPE','DEMARCUS','CLETUS','TYRELL','LYNDON','KEENAN','WERNER','GERALDO','COLUMBUS','CHET','BERTRAM','MARKUS','HUEY','HILTON','DWAIN','DONTE','TYRON','OMER','ISAIAS','HIPOLITO','FERMIN','ADALBERTO','BO','BARRETT','TEODORO','MCKINLEY','MAXIMO','GARFIELD','RALEIGH','LAWERENCE','ABRAM','RASHAD','KING','EMMITT','DARON','SAMUAL','MIQUEL','EUSEBIO','DOMENIC','DARRON','BUSTER','WILBER','RENATO','JC','HOYT','HAYWOOD','EZEKIEL','CHAS','FLORENTINO','ELROY','CLEMENTE','ARDEN','NEVILLE','EDISON','DESHAWN','NATHANIAL','JORDON','DANILO','CLAUD','SHERWOOD','RAYMON','RAYFORD','CRISTOBAL','AMBROSE','TITUS','HYMAN','FELTON','EZEQUIEL','ERASMO','STANTON','LONNY','LEN','IKE','MILAN','LINO','JAROD','HERB','ANDREAS','WALTON','RHETT','PALMER','DOUGLASS','CORDELL','OSWALDO','ELLSWORTH','VIRGILIO','TONEY','NATHANAEL','DEL','BENEDICT','MOSE','JOHNSON','ISREAL','GARRET','FAUSTO','ASA','ARLEN','ZACK','WARNER','MODESTO','FRANCESCO','MANUAL','GAYLORD','GASTON','FILIBERTO','DEANGELO','MICHALE','GRANVILLE','WES','MALIK','ZACKARY','TUAN','ELDRIDGE','CRISTOPHER','CORTEZ','ANTIONE','MALCOM','LONG','KOREY','JOSPEH','COLTON','WAYLON','VON','HOSEA','SHAD','SANTO','RUDOLF','ROLF','REY','RENALDO','MARCELLUS','LUCIUS','KRISTOFER','BOYCE','BENTON','HAYDEN','HARLAND','ARNOLDO','RUEBEN','LEANDRO','KRAIG','JERRELL','JEROMY','HOBERT','CEDRICK','ARLIE','WINFORD','WALLY','LUIGI','KENETH','JACINTO','GRAIG','FRANKLYN','EDMUNDO','SID','PORTER','LEIF','JERAMY','BUCK','WILLIAN','VINCENZO','SHON','LYNWOOD','JERE','HAI','ELDEN','DORSEY','DARELL','BRODERICK','ALONSO'];\n--seed-contents--\n```js\nfunction namesScores(arr) {\nreturn arr;\n}\n// Only change code above this line\nconst test1 = ['THIS', 'IS', 'ONLY', 'A', 'TEST'];\nconst test2 = ['I', 'REPEAT', 'THIS', 'IS', 'ONLY', 'A', 'TEST'];\nnamesScores(test1);\n```\n--solutions--\n```js\nfunction nameScoreCalc(word) {\nlet sum = 0;\nlet alphabets = [\"\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\nfor (let i = 0 ; i < word",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 48519,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-22-names-scores.md",
      "source_type": "git_repo"
    },
    "token_count": 20223,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a466a5e01d13efb5ad9c20653e6bb438",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-22-names-scores.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} // Only change code above this line const test1 = ['THIS', 'IS', 'ONLY', 'A', 'TEST']; const test2 = ['I', 'REPEAT', 'THIS', 'IS', 'ONLY', 'A', 'TEST']; namesScores(test1); ``` --solutions-- ```js function nameScoreCalc(word) { let sum = 0; let alphabets = [\"\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]; for (let i = 0 ; i < wordlength; i++)\nsum += alphabets indexOf(word[i] toLowerCase());\nreturn sum;\n}\nfunction namesScores(arr) {\narr = [ arr] sort();\narr unshift('');\nlet total = 0;\nfor (let i = 1 ; i < arr length; i++)\ntotal += nameScoreCalc(arr[i]) * i;\nreturn total;\n}\nconst test1 = ['THIS', 'IS', 'ONLY', 'A', 'TEST'];\nconst test2 = ['I', 'REPEAT', 'THIS', 'IS', 'ONLY', 'A', 'TEST'];\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 48519,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-22-names-scores.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "89dcff69fc96e825cbf6292bb890ba7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-3-largest-prime-factor.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f36f1000cf542c50fe82\ntitle: 'Problem 3: Largest prime factor'\nchallengeType: 1\nforumTopicId: 301952\ndashedName: problem-3-largest-prime-factor\n--description--\nThe prime factors of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the given number?\n--hints--\nlargestPrimeFactor(2) should return a number.\njs\nassert.isNumber(largestPrimeFactor(2));\nlargestPrimeFactor(2) should return 2.\njs\nassert.strictEqual(largestPrimeFactor(2), 2);\nlargestPrimeFactor(3) should return 3.\njs\nassert.strictEqual(largestPrimeFactor(3), 3);\nlargestPrimeFactor(5) should return 5.\njs\nassert.strictEqual(largestPrimeFactor(5), 5);\nlargestPrimeFactor(7) should return 7.\njs\nassert.strictEqual(largestPrimeFactor(7), 7);\nlargestPrimeFactor(8) should return 2.\njs\nassert.strictEqual(largestPrimeFactor(8), 2);\nlargestPrimeFactor(13195) should return 29.\njs\nassert.strictEqual(largestPrimeFactor(13195), 29);\nlargestPrimeFactor(600851475143) should return 6857.\njs\nassert.strictEqual(largestPrimeFactor(600851475143), 6857);\n--seed--\n--seed-contents--\n```js\nfunction largestPrimeFactor(number) {\nreturn true;\n}\nlargestPrimeFactor(13195);\n```\n--solutions--\n```js\nconst largestPrimeFactor = (number) => {\nlet largestFactor = number;\nfor (let i = 2; i <= Math.sqrt(largestFactor); i++) {\nif (!(largestFactor % i)) {\nlet factor = largestFactor / i;\nlet candidate = largestPrimeFactor(factor);\nreturn i > candidate ? i : candidate;\n}\n}\nreturn largestFactor;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1615,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-3-largest-prime-factor.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1dd80c2c8a1ecf79edbbe260bc924599",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f37a1000cf542c50fe8c\ntitle: 'Problem 13: Large sum'\nchallengeType: 1\nforumTopicId: 301757\ndashedName: problem-13-large-sum\n--description--\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 74,
    "chunk_index": 0,
    "total_chunks": 13
  },
  {
    "id": "61926ac47b31549e890b15961c8c9ef1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f37a1000cf542c50fe8c\ntitle: 'Problem 13: Large sum'\nchallengeType: 1\nforumTopicId: 301757\ndashedName: problem-13-large-sum\n--description--\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690\n--hints--\nlargeSum(testNums) should return a number",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 1887,
    "chunk_index": 1,
    "total_chunks": 13
  },
  {
    "id": "2dbcbcc607cb4439862cc0639dc70cab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "78182833757993103614740356856449095527097864797581 16726320100436897842553539920931837441497806860984 48403098129077791799088218795327364475675590848030 87086987551392711854517078544161852424320693150332 59959406895756536782107074926966537676326235447210 69793950679652694742597709739166693763042633987085 41052684708299085211399427365734116182760315001271 65378607361501080857009149939512557028198746004375 35829035317434717326932123578154982629742552737307 94953759765105305946966067683156574377167401875275 88902802571733229619176668713819931811048770190271 25267680276078003013678680992525463401061632866526 36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690 --hints-- largeSum(testNums) should return a numberjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 1275,
    "chunk_index": 2,
    "total_chunks": 13
  },
  {
    "id": "82ed168a7eb17e47cb411cccc563ea57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "16726320100436897842553539920931837441497806860984 48403098129077791799088218795327364475675590848030 87086987551392711854517078544161852424320693150332 59959406895756536782107074926966537676326235447210 69793950679652694742597709739166693763042633987085 41052684708299085211399427365734116182760315001271 65378607361501080857009149939512557028198746004375 35829035317434717326932123578154982629742552737307 94953759765105305946966067683156574377167401875275 88902802571733229619176668713819931811048770190271 25267680276078003013678680992525463401061632866526 36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690 --hints-- largeSum(testNums) should return a numberjs assertisNumber(largeSum(testNums));\nlargeSum(testNums) should return 8348422521",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 1278,
    "chunk_index": 3,
    "total_chunks": 13
  },
  {
    "id": "9f85f1c8c45c33a909b7bc28ded7438a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "contenthints-- largeSum(testNums) should return a numberjs assertisNumber(largeSum(testNums)); largeSum(testNums) should return 8348422521js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 1209,
    "chunk_index": 4,
    "total_chunks": 13
  },
  {
    "id": "0d1ece8dd76026e9a6026aaf4f741977",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "contenthints-- largeSum(testNums) should return a numberjs assertisNumber(largeSum(testNums)); largeSum(testNums) should return 8348422521js assertstrictEqual(largeSum(testNums), 8348422521);\nlargeSum(fiftyDigitNums) should return 5537376230",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 1220,
    "chunk_index": 5,
    "total_chunks": 13
  },
  {
    "id": "11fa1fdd2d7e36b073197813ae5bed60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "25267680276078003013678680992525463401061632866526 36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690 --hints-- largeSum(testNums) should return a numberjs assertisNumber(largeSum(testNums)); largeSum(testNums) should return 8348422521js assertstrictEqual(largeSum(testNums), 8348422521); largeSum(fiftyDigitNums) should return 5537376230js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 1133,
    "chunk_index": 6,
    "total_chunks": 13
  },
  {
    "id": "4497cb6df9e426b18efac5a4e3353d5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690 --hints-- largeSum(testNums) should return a numberjs assertisNumber(largeSum(testNums)); largeSum(testNums) should return 8348422521js assertstrictEqual(largeSum(testNums), 8348422521); largeSum(fiftyDigitNums) should return 5537376230js assertstrictEqual(largeSum(fiftyDigitNums), 5537376230);\n--seed--\n--before-user-code--\n```js\nconst fiftyDigitNums = [\n'37107287533902102798797998220837590246510135740250',\n'46376937677490009712648124896970078050417018260538',\n'74324986199524741059474233309513058123726617309629',\n'91942213363574161572522430563301811072406154908250',\n'23067588207539346171171980310421047513778063246676',\n'89261670696623633820136378418383684178734361726757',\n'28112879812849979408065481931592621691275889832738',\n'44274228917432520321923589422876796487670272189318',\n'47451445736001306439091167216856844588711603153276',\n'70386486105843025439939619828917593665686757934951',\n'62176457141856560629502157223196586755079324193331',\n'64906352462741904929101432445813822663347944758178',\n'92575867718337217661963751590579239728245598838407',\n'58203565325359399008402633568948830189458628227828',\n'80181199384826282014278194139940567587151170094390',\n'35398664372827112653829987240784473053190104293586',\n'86515506006295864861532075273371959191420517255829',\n'71693888707715466499115593487603532921714970056938',\n'54370070576826684624621495650076471787294438377604',\n'53282654108756828443191190634694037855217779295145',\n'36123272525000296071075082563815656710885258350721',\n'45876576172410976447339110607218265236877223636045',\n'17423706905851860660448207621209813287860733969412',\n'81142660418086830619328460811191061556940512689692',\n'51934325451728388641918047049293215058642563049483',\n'62467221648435076201727918039944693004732956340691',\n'15732444386908125794514089057706229429197107928209',\n'55037687525678773091862540744969844508330393682126',\n'18336384825330154686196124348767681297534375946515',\n'80386287592878490201521685554828717201219257766954',\n'78182833757993103614740356856449095527097864797581',\n'16726320100436897842553539920931837441497806860984',\n'48403098129077791799088218795327364475675590848030',\n'87086987551392711854517078544161852424320693150332',\n'59959406895756536782107074926966537676326235447210',\n'69793950679652694742597709739166693763042633987085',\n'41052684708299085211399427365734116182760315001271',\n'65378607361501080857009149939512557028198746004375',\n'35829035317434717326932123578154982629742552737307',\n'94953759765105305946966067683156574377167401875275',\n'88902802571733229619176668713819931811048770190271',\n'25267680276078003013678680992525463401061632866526',\n'36270218540497705585629946580636237993140746255962',\n'24074486908231174977792365466257246923322810917141',\n'91430288197103288597806669760892938638285025333403',\n'34413065578016127815921815005561868836468420090470',\n'23053081172816430487623791969842487255036638784583',\n'11487696932154902810424020138335124462181441773470',\n'63783299490636259666498587618221225225512486764533',\n'67720186971698544312419572409913959008952310058822',\n'95548255300263520781532296796249481641953868218774',\n'76085327132285723110424803456124867697064507995236',\n'37774242535411291684276865538926205024910326572967',\n'23701913275725675285653248258265463092207058596522',\n'29798860272258331913126375147341994889534765745501',\n'18495701454879288984856827726077713721403798879715',\n'38298203783031473527721580348144513491373226651381',\n'34829543829199918180278916522431027392251122869539',\n'40957953066405232632538044100059654939159879593635',\n'29746152185502371307642255121183693803580388584903',\n'41698116222072977186158236678424689157993532961922',\n'62467957194401269043877107275048102390895523597457',\n'23189706772547915061505504953922979530901129967519',\n'86188088225875314529584099251203829009407770775672',\n'11306739708304724483816533873502340845647058077308',\n'82959174767140363198008187129011875491310547126581',\n'97623331044818386269515456334926366572897563400500',\n'42846280183517070527831839425882145521227251250327',\n'55121603546981200581762165212827652751691296897789',\n'32238195734329339946437501907836945765883352399886',\n'75506164965184775180738168837861091527357929701337',\n'62177842752192623401942399639168044983993173312731',\n'32924185707147349566916674687634660915035914677504',\n'99518671430235219628894890102423325116913619626622',\n'73267460800591547471830798392868535206946944540724',\n'76841822524674417161514036427982273348055556214818',\n'97142617910342598647204516893989422179826088076852',\n'87783646182799346313767754307809363333018982642090',\n'10848802521674670883215120185883543223812876952786',\n'71329612474782464538636993009049310363619763878039',\n'62184073572399794223406235393808339651327408011116',\n'66627891981488087797941876876144230030984490851411',\n'60661826293682836764744779239180335110989069790714',\n'85786944089552990653640447425576083659976645795096',\n'66024396409905389607120198219976047599490197230297',\n'64913982680032973156037120041377903785566085089252',\n'16730939319872750275468906903707539413042652315011',\n'94809377245048795150954100921645863754710598436791',\n'78639167021187492431995700641917969777599028300699',\n'15368713711936614952811305876380278410754449733078',\n'40789923115535562561142322423255033685442488917353',\n'44889911501440648020369068063960672322193204149535',\n'41503128880339536053299340368006977710650566631954',\n'81234880673210146739058568557934581403627822703280',\n'82616570773948327592232845941706525094512325230608',\n'22918802058777319719839450180888072429661980811197',\n'77158542502016545090413245809786882778948721859617',\n'72107838435069186155435662884062257473692284509516',\n'20849603980134001723930671666823555245252804609722',\n'53503534226472524250874054075591789781264330331690'\n];\nconst testNums = [\n'37107287533902102798797998220837590246510135740250',\n'46376937677490009712648124896970078050417018260538'\n];\n```\n--seed-contents--\n```js\nfunction largeSum(arr) {\nreturn true;\n}\n// Only change code above this line\nconst testNums = [\n'37107287533902102798797998220837590246510135740250',\n'46376937677490009712648124896970078050417018260538'\n];\nlargeSum(testNums);\n```\n--solutions--\n```js\nfunction largeSum(arr) {\nlet sum = 0;\narr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 3196,
    "chunk_index": 7,
    "total_chunks": 13
  },
  {
    "id": "af58d6b00048edfd6b7c537ff64f7866",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'42846280183517070527831839425882145521227251250327', '55121603546981200581762165212827652751691296897789', '32238195734329339946437501907836945765883352399886', '75506164965184775180738168837861091527357929701337', '62177842752192623401942399639168044983993173312731', '32924185707147349566916674687634660915035914677504', '99518671430235219628894890102423325116913619626622', '73267460800591547471830798392868535206946944540724', '76841822524674417161514036427982273348055556214818', '97142617910342598647204516893989422179826088076852', '87783646182799346313767754307809363333018982642090', '10848802521674670883215120185883543223812876952786', '71329612474782464538636993009049310363619763878039', '62184073572399794223406235393808339651327408011116', '66627891981488087797941876876144230030984490851411', '60661826293682836764744779239180335110989069790714', '85786944089552990653640447425576083659976645795096', '66024396409905389607120198219976047599490197230297', '64913982680032973156037120041377903785566085089252', '16730939319872750275468906903707539413042652315011', '94809377245048795150954100921645863754710598436791', '78639167021187492431995700641917969777599028300699', '15368713711936614952811305876380278410754449733078', '40789923115535562561142322423255033685442488917353', '44889911501440648020369068063960672322193204149535', '41503128880339536053299340368006977710650566631954', '81234880673210146739058568557934581403627822703280', '82616570773948327592232845941706525094512325230608', '22918802058777319719839450180888072429661980811197', '77158542502016545090413245809786882778948721859617', '72107838435069186155435662884062257473692284509516', '20849603980134001723930671666823555245252804609722', '53503534226472524250874054075591789781264330331690' ]; const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; ``` --seed-contents-- ```js function largeSum(arr) { return true; } // Only change code above this line const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; largeSum(testNums); ``` --solutions-- ```js function largeSum(arr) { let sum = 0; arrforEach(function(num) {\nsum += parseInt(num, 10);\n});\nsum = sum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 786,
    "chunk_index": 8,
    "total_chunks": 13
  },
  {
    "id": "5b918f70a274a86763ffa7497d03ca19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'97142617910342598647204516893989422179826088076852', '87783646182799346313767754307809363333018982642090', '10848802521674670883215120185883543223812876952786', '71329612474782464538636993009049310363619763878039', '62184073572399794223406235393808339651327408011116', '66627891981488087797941876876144230030984490851411', '60661826293682836764744779239180335110989069790714', '85786944089552990653640447425576083659976645795096', '66024396409905389607120198219976047599490197230297', '64913982680032973156037120041377903785566085089252', '16730939319872750275468906903707539413042652315011', '94809377245048795150954100921645863754710598436791', '78639167021187492431995700641917969777599028300699', '15368713711936614952811305876380278410754449733078', '40789923115535562561142322423255033685442488917353', '44889911501440648020369068063960672322193204149535', '41503128880339536053299340368006977710650566631954', '81234880673210146739058568557934581403627822703280', '82616570773948327592232845941706525094512325230608', '22918802058777319719839450180888072429661980811197', '77158542502016545090413245809786882778948721859617', '72107838435069186155435662884062257473692284509516', '20849603980134001723930671666823555245252804609722', '53503534226472524250874054075591789781264330331690' ]; const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; ``` --seed-contents-- ```js function largeSum(arr) { return true; } // Only change code above this line const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; largeSum(testNums); ``` --solutions-- ```js function largeSum(arr) { let sum = 0; arrforEach(function(num) { sum += parseInt(num, 10); }); sum = sumtoString(10);\nsum = sum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 622,
    "chunk_index": 9,
    "total_chunks": 13
  },
  {
    "id": "1205ddd22541a2afb757cd869ac77339",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'71329612474782464538636993009049310363619763878039', '62184073572399794223406235393808339651327408011116', '66627891981488087797941876876144230030984490851411', '60661826293682836764744779239180335110989069790714', '85786944089552990653640447425576083659976645795096', '66024396409905389607120198219976047599490197230297', '64913982680032973156037120041377903785566085089252', '16730939319872750275468906903707539413042652315011', '94809377245048795150954100921645863754710598436791', '78639167021187492431995700641917969777599028300699', '15368713711936614952811305876380278410754449733078', '40789923115535562561142322423255033685442488917353', '44889911501440648020369068063960672322193204149535', '41503128880339536053299340368006977710650566631954', '81234880673210146739058568557934581403627822703280', '82616570773948327592232845941706525094512325230608', '22918802058777319719839450180888072429661980811197', '77158542502016545090413245809786882778948721859617', '72107838435069186155435662884062257473692284509516', '20849603980134001723930671666823555245252804609722', '53503534226472524250874054075591789781264330331690' ]; const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; ``` --seed-contents-- ```js function largeSum(arr) { return true; } // Only change code above this line const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; largeSum(testNums); ``` --solutions-- ```js function largeSum(arr) { let sum = 0; arrforEach(function(num) { sum += parseInt(num, 10); }); sum = sumtoString(10); sum = sumsubstring(0, 1) + sum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 574,
    "chunk_index": 10,
    "total_chunks": 13
  },
  {
    "id": "5845bd96e8ab6932f3bb333a5585c441",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'60661826293682836764744779239180335110989069790714', '85786944089552990653640447425576083659976645795096', '66024396409905389607120198219976047599490197230297', '64913982680032973156037120041377903785566085089252', '16730939319872750275468906903707539413042652315011', '94809377245048795150954100921645863754710598436791', '78639167021187492431995700641917969777599028300699', '15368713711936614952811305876380278410754449733078', '40789923115535562561142322423255033685442488917353', '44889911501440648020369068063960672322193204149535', '41503128880339536053299340368006977710650566631954', '81234880673210146739058568557934581403627822703280', '82616570773948327592232845941706525094512325230608', '22918802058777319719839450180888072429661980811197', '77158542502016545090413245809786882778948721859617', '72107838435069186155435662884062257473692284509516', '20849603980134001723930671666823555245252804609722', '53503534226472524250874054075591789781264330331690' ]; const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; ``` --seed-contents-- ```js function largeSum(arr) { return true; } // Only change code above this line const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; largeSum(testNums); ``` --solutions-- ```js function largeSum(arr) { let sum = 0; arrforEach(function(num) { sum += parseInt(num, 10); }); sum = sumtoString(10); sum = sumsubstring(0, 1) + sumsubstring(2);\nlet firstTen = sum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 526,
    "chunk_index": 11,
    "total_chunks": 13
  },
  {
    "id": "3d88e0839ca6db1456e07a6949ba5036",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'16730939319872750275468906903707539413042652315011', '94809377245048795150954100921645863754710598436791', '78639167021187492431995700641917969777599028300699', '15368713711936614952811305876380278410754449733078', '40789923115535562561142322423255033685442488917353', '44889911501440648020369068063960672322193204149535', '41503128880339536053299340368006977710650566631954', '81234880673210146739058568557934581403627822703280', '82616570773948327592232845941706525094512325230608', '22918802058777319719839450180888072429661980811197', '77158542502016545090413245809786882778948721859617', '72107838435069186155435662884062257473692284509516', '20849603980134001723930671666823555245252804609722', '53503534226472524250874054075591789781264330331690' ]; const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; ``` --seed-contents-- ```js function largeSum(arr) { return true; } // Only change code above this line const testNums = [ '37107287533902102798797998220837590246510135740250', '46376937677490009712648124896970078050417018260538' ]; largeSum(testNums); ``` --solutions-- ```js function largeSum(arr) { let sum = 0; arrforEach(function(num) { sum += parseInt(num, 10); }); sum = sumtoString(10); sum = sumsubstring(0, 1) + sumsubstring(2); let firstTen = sumslice(0, 10);\nreturn parseInt(firstTen, 10);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 12,
    "total_chunks": 13
  },
  {
    "id": "ca4958f1586ef8a5100c34470abf4fcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-30-digit-n-powers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f38a1000cf542c50fe9d\ntitle: 'Problem 30: Digit n powers'\nchallengeType: 1\nforumTopicId: 301953\ndashedName: problem-30-digit-n-powers\n--description--\nSurprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:\n1634 = 14 + 64 + 34 + 44\n8208 = 84 + 24 + 04 + 84\n9474 = 94 + 44 + 74 + 44\nAs 1 = 14 is not a sum it is not included.\nThe sum of these numbers is 1634 + 8208 + 9474 = 19316.\nFind the sum of all the numbers that can be written as the sum of n powers of their digits.\n--hints--\ndigitnPowers(2) should return a number.\njs\nassert(typeof digitnPowers(2) === 'number');\ndigitnPowers(2) should return 0.\njs\nassert(digitnPowers(2) == 0);\ndigitnPowers(3) should return 1301.\njs\nassert(digitnPowers(3) == 1301);\ndigitnPowers(4) should return 19316.\njs\nassert(digitnPowers(4) == 19316);\ndigitnPowers(5) should return 443839.\njs\nassert(digitnPowers(5) == 443839);\n--seed--\n--seed-contents--\n```js\nfunction digitnPowers(n) {\nreturn n;\n}\ndigitnPowers(5);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-30-digit-n-powers.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "79519bbcd6977f74395eb1c9e67be950",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-31-coin-sums.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f38b1000cf542c50fe9e\ntitle: 'Problem 31: Coin sums'\nchallengeType: 1\nforumTopicId: 301965\ndashedName: problem-31-coin-sums\n--description--\nIn England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:\n1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).\nIt is possible to make £2 in the following way:\n1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p\nHow many different ways can n pence be made using any number of coins?\n--hints--\ncoinSums(50) should return a number.\njs\nassert(typeof coinSums(50) === 'number');\ncoinSums(50) should return 451.\njs\nassert(coinSums(50) == 451);\ncoinSums(100) should return 4563.\njs\nassert(coinSums(100) == 4563);\ncoinSums(150) should return 21873.\njs\nassert(coinSums(150) == 21873);\ncoinSums(200) should return 73682.\njs\nassert(coinSums(200) == 73682);\n--seed--\n--seed-contents--\n```js\nfunction coinSums(n) {\nreturn n;\n}\ncoinSums(200);\n```\n--solutions--\njs\nconst coinSums = (n) => {\nconst getWays = (n, m=8, c=[1, 2, 5, 10, 20, 50, 100, 200]) => {\nif (n === 0) return 1;\nif (m === 0 || n < 0) return 0;\nreturn getWays(n - c[m - 1], m, c) + getWays(n, m - 1, c);\n};\nreturn getWays(n);\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1372,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-31-coin-sums.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "63f76a16fc7eb8efed7edf78f326740f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-34-digit-factorials.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f38e1000cf542c50fea1\ntitle: 'Problem 34: Digit factorials'\nchallengeType: 1\nforumTopicId: 301998\ndashedName: problem-34-digit-factorials\n--description--\n145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.\nFind the numbers and the sum of the numbers which are equal to the sum of the factorial of their digits.\nNote: as 1! = 1 and 2! = 2 are not sums they are not included.\n--hints--\ndigitFactorial() should return an object.\njs\nassert.typeOf(digitFactorial(), 'object');\ndigitFactorial() should return { sum: 40730, numbers: [145, 40585] }.\njs\nassert.deepEqual(digitFactorial(), { sum: 40730, numbers: [145, 40585] });\n--seed--\n--seed-contents--\n```js\nfunction digitFactorial() {\nvar sum = 0;\nvar numbers = [];\nreturn { sum, numbers };\n}\ndigitFactorial();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-34-digit-factorials.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "736e9b8627f0818657c1cdd84946f1be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-32-pandigital-products.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f38c1000cf542c50fe9f\ntitle: 'Problem 32: Pandigital products'\nchallengeType: 1\nforumTopicId: 301976\ndashedName: problem-32-pandigital-products\n--description--\nWe shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through n pandigital Hint: Some products can be obtained in more than one way so be sure to only include it once in your sum --hints--\npandigitalProducts(4) should return a number js\nassert(typeof pandigitalProducts(4) === 'number');\npandigitalProducts(4) should return 12 js\nassert strictEqual(pandigitalProducts(4), 12);\npandigitalProducts(6) should return 162 js\nassert strictEqual(pandigitalProducts(6), 162);\npandigitalProducts(7) should return 0 js\nassert strictEqual(pandigitalProducts(7), 0);\npandigitalProducts(8) should return 13458 js\nassert strictEqual(pandigitalProducts(8), 13458);\npandigitalProducts(9) should return 45228 js\nassert strictEqual(pandigitalProducts(9), 45228);\n--seed--\n--seed-contents--\n```js\nfunction pandigitalProducts(n) {\nreturn true;\n}\npandigitalProducts(4);\n```\n--solutions--\n```js\n// Check for pandigital number\nfunction isPandigital(digitStr) {\nreturn digitStr split('') sort() every((c, i) => c == i + 1);\n}\n// Concatenate 3 numbers\nfunction concatenate3Nums(a, b, c) {\nreturn a toString() + b toString() + c toString();\n}\n// Find sum of all pandigital products\nfunction pandigitalProducts(n) {\nconst products = [];\nlet sum = 0;\nconst max = Number(Array(n) fill(0)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2589,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-32-pandigital-products.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "671453b30786fb51d8d25832e7ca7dc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-32-pandigital-products.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--seed-- --seed-contents-- ```js function pandigitalProducts(n) { return true; } pandigitalProducts(4); ``` --solutions-- ```js // Check for pandigital number function isPandigital(digitStr) { return digitStr split('') sort() every((c, i) => c == i + 1); } // Concatenate 3 numbers function concatenate3Nums(a, b, c) { return a toString() + b toString() + c toString(); } // Find sum of all pandigital products function pandigitalProducts(n) { const products = []; let sum = 0; const max = Number(Array(n) fill(0)map((_, i) => (n - i) toString()) join(''));\nconst outerLimit = Math sqrt(max);\nfor (let factor1 = 2; factor1 < outerLimit; factor1++) {\nconst innerLimit = max / factor1;\nfor (let factor2 = factor1; factor2 < innerLimit; factor2++) {\nconst product = factor1 * factor2;\nconst concatenated = concatenate3Nums(factor1, factor2, product);\nif (concatenated length > n) {\nbreak;\n} else if (concatenated length == n &&\nisPandigital(concatenated) && products includes(product)\n) {\nproducts push(product);\nsum += product;\n}\n}\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2589,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-32-pandigital-products.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5d2a94c95de4d607bb256a31117dec7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-33-digit-cancelling-fractions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f38d1000cf542c50fea0\ntitle: 'Problem 33: Digit cancelling fractions'\nchallengeType: 1\nforumTopicId: 301987\ndashedName: problem-33-digit-cancelling-fractions\n--description--\nThe fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s We shall consider fractions like, 30/50 = 3/5, to be trivial examples There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator If the product of these four fractions is given in its lowest common terms, find the value of the denominator --hints--\ndigitCancellingFractions() should return a number js\nassert(typeof digitCancellingFractions() === 'number');\ndigitCancellingFractions() should return 100 js\nassert strictEqual(digitCancellingFractions(), 100);\n--seed--\n--seed-contents--\n```js\nfunction digitCancellingFractions() {\nreturn true;\n}\ndigitCancellingFractions();\n```\n--solutions--\n```js\nfunction digitCancellingFractions() {\nfunction isCurious(numerator, denominator) {\nconst fraction = numerator / denominator;\nconst numString = numerator toString();\nconst denString = denominator toString();\nif (numString[1] === '0' && denString[1] === '0') {\n// trivial\nreturn false;\n}\nfor (let i = 0; i < 2; i++) {\nfor (let j = 0; j < 2; j++) {\nif (numString[i] === denString[j]) {\nconst newNum = parseInt(numString[1 - i], 10);\nconst newDen = parseInt(denString[1 - j], 10);\nif (newNum / newDen === fraction) {\nreturn true;\n}\n}\n}\n}\nreturn false;\n}\nfunction findLargestDivisor(a, b) {\nlet gcd = a > b",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-33-digit-cancelling-fractions.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "af41526f6d742c584df1651133f72e2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-33-digit-cancelling-fractions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'0' && denString[1] === '0') { // trivial return false; } for (let i = 0; i < 2; i++) { for (let j = 0; j < 2; j++) { if (numString[i] === denString[j]) { const newNum = parseInt(numString[1 - i], 10); const newDen = parseInt(denString[1 - j], 10); if (newNum / newDen === fraction) { return true; } } } } return false; } function findLargestDivisor(a, b) { let gcd = a > bb : a;\nwhile (gcd > 1) {\nif (a % gcd === 0 && b % gcd === 0) {\nreturn gcd;\n}\ngcd--;\n}\nreturn gcd;\n}\nfunction simplifyFraction(numerator, denominator) {\nconst divisor = findLargestDivisor(numerator, denominator);\nreturn [numerator / divisor, denominator / divisor];\n}\nlet multipleNumerator = 1;\nlet multipleDenominator = 1;\nfor (let denominator = 11; denominator < 100; denominator++) {\nfor (let numerator = 10; numerator < denominator; numerator++) {\nif (isCurious(numerator, denominator)) {\nmultipleNumerator = numerator;\nmultipleDenominator = denominator;\n}\n}\n}\nreturn simplifyFraction(multipleNumerator, multipleDenominator)[1];\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-33-digit-cancelling-fractions.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f3e5cb0dd53bf230425558ae6d03dda7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-37-truncatable-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3911000cf542c50fea4\ntitle: 'Problem 37: Truncatable primes'\nchallengeType: 1\nforumTopicId: 302031\ndashedName: problem-37-truncatable-primes\n--description--\nThe number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.\nFind the sum of the only n (8 ≤ n ≤ 11) primes that are both truncatable from left to right and right to left.\nNOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.\n--hints--\ntruncatablePrimes(8) should return a number.\njs\nassert(typeof truncatablePrimes(8) === 'number');\ntruncatablePrimes(8) should return 1986.\njs\nassert(truncatablePrimes(8) == 1986);\ntruncatablePrimes(9) should return 5123.\njs\nassert(truncatablePrimes(9) == 5123);\ntruncatablePrimes(10) should return 8920.\njs\nassert(truncatablePrimes(10) == 8920);\ntruncatablePrimes(11) should return 748317.\njs\nassert(truncatablePrimes(11) == 748317);\n--seed--\n--seed-contents--\n```js\nfunction truncatablePrimes(n) {\nreturn n;\n}\ntruncatablePrimes(11);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1279,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-37-truncatable-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "61cecd33f0ed00c41e91b852e940cf38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-35-circular-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f38f1000cf542c50fea2\ntitle: 'Problem 35: Circular primes'\nchallengeType: 1\nforumTopicId: 302009\ndashedName: problem-35-circular-primes\n--description--\nThe number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97 How many circular primes are there below n, whereas 100 ≤ n ≤ 1000000 Note:\nCircular primes individual rotation can exceed n --hints--\ncircularPrimes(100) should return a number js\nassert(typeof circularPrimes(100) === 'number');\ncircularPrimes(100) should return 13 js\nassert(circularPrimes(100) == 13);\ncircularPrimes(100000) should return 43 js\nassert(circularPrimes(100000) == 43);\ncircularPrimes(250000) should return 45 js\nassert(circularPrimes(250000) == 45);\ncircularPrimes(500000) should return 49 js\nassert(circularPrimes(500000) == 49);\ncircularPrimes(750000) should return 49 js\nassert(circularPrimes(750000) == 49);\ncircularPrimes(1000000) should return 55 js\nassert(circularPrimes(1000000) == 55);\n--seed--\n--seed-contents--\n```js\nfunction circularPrimes(n) {\nreturn n;\n}\ncircularPrimes(1000000);\n```\n--solutions--\n```js\nfunction rotate(n) {\nif (n length == 1) return n;\nreturn n slice(1) + n[0];\n}\nfunction circularPrimes(n) {\n// Nearest n < 10^k\nconst bound = 10 ** Math ceil(Math log10(n));\nconst primes = [0, 0, 2];\nlet count = 0;\n// Making primes array\nfor (let i = 4; i <= bound; i += 2) {\nprimes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-35-circular-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "59d9db5174ae4d2eb8272882e0df77bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-35-circular-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js assert(circularPrimes(1000000) == 55); --seed-- --seed-contents-- ```js function circularPrimes(n) { return n; } circularPrimes(1000000); ``` --solutions-- ```js function rotate(n) { if (n length == 1) return n; return n slice(1) + n[0]; } function circularPrimes(n) { // Nearest n < 10^k const bound = 10 ** Math ceil(Math log10(n)); const primes = [0, 0, 2]; let count = 0; // Making primes array for (let i = 4; i <= bound; i += 2) { primespush(i - 1);\nprimes push(0);\n}\n// Getting upperbound\nconst upperBound = Math ceil(Math sqrt(bound));\n// Setting other non-prime numbers to 0\nfor (let i = 3; i < upperBound; i += 2) {\nif (primes[i]) {\nfor (let j = i * i; j < bound; j += i) {\nprimes[j] = 0;\n}\n}\n}\n// Iterating through the array\nfor (let i = 2; i < n; i++) {\nif (primes[i]) {\nlet curr = String(primes[i]);\nlet tmp = 1; // tmp variable to hold the no of rotations\nfor (let x = rotate(curr); x = curr; x = rotate(x)) {\nif (x > n && primes[x]) {\ncontinue;\n}\nelse if ( primes[x]) {\n// If the rotated value is 0 then it isn't a circular prime, break the loop\ntmp = 0;\nbreak;\n}\ntmp++;\nprimes[x] = 0;\n}\ncount += tmp;\n}\n}\nreturn count;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-35-circular-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "180138ebf8b4d058afd6c2c725f15c50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-39-integer-right-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3931000cf542c50fea6\ntitle: 'Problem 39: Integer right triangles'\nchallengeType: 1\nforumTopicId: 302054\ndashedName: problem-39-integer-right-triangles\n--description--\nIf p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120 {20,48,52}, {24,45,51}, {30,40,50}\nFor which value of p ≤ n, is the number of solutions maximized --hints--\nintRightTriangles(500) should return a number js\nassert(typeof intRightTriangles(500) === 'number');\nintRightTriangles(500) should return 420 js\nassert(intRightTriangles(500) == 420);\nintRightTriangles(800) should return 720 js\nassert(intRightTriangles(800) == 720);\nintRightTriangles(900) should return 840 js\nassert(intRightTriangles(900) == 840);\nintRightTriangles(1000) should return 840 js\nassert(intRightTriangles(1000) == 840);\n--seed--\n--seed-contents--\n```js\nfunction intRightTriangles(n) {\nreturn n;\n}\nintRightTriangles(500);\n```\n--solutions--\n```js\n// Original idea for this solution came from\n// https://www xarg org/puzzle/project-euler/problem-39/\nfunction intRightTriangles(n) {\n// store the number of triangles with a given perimeter\nlet triangles = {};\n// a is the shortest side\nfor (let a = 3; a < n / 3; a++)\n// o is the opposite side and is at least as long as a\nfor (let o = a; o < n / 2; o++) {\nlet h = Math sqrt(a * a + o * o); // hypotenuse\nlet p = a + o + h;  // perimeter\nif ((h % 1) === 0 && p <= n) {\ntriangles[p] = (triangles[p] || 0) + 1;\n}\n}\nlet max = 0, maxp = null;\nfor (let p in triangles) {\nif (max < triangles[p]) {\nmax = triangles[p];\nmaxp = parseInt(p);\n}\n}\nreturn maxp;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1812,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-39-integer-right-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "90744ba7ff35ffd4c6e9fa5a11db1088",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-4-largest-palindrome-product.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3701000cf542c50fe83\ntitle: 'Problem 4: Largest palindrome product'\nchallengeType: 1\nforumTopicId: 302065\ndashedName: problem-4-largest-palindrome-product\n--description--\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\nFind the largest palindrome made from the product of two n-digit numbers.\n--hints--\nlargestPalindromeProduct(2) should return a number.\njs\nassert.isNumber(largestPalindromeProduct(2));\nlargestPalindromeProduct(2) should return 9009.\njs\nassert.strictEqual(largestPalindromeProduct(2), 9009);\nlargestPalindromeProduct(3) should return 906609.\njs\nassert.strictEqual(largestPalindromeProduct(3), 906609);\n--seed--\n--seed-contents--\n```js\nfunction largestPalindromeProduct(n) {\nreturn true;\n}\nlargestPalindromeProduct(3);\n```\n--solutions--\njs\nconst largestPalindromeProduct = (digit)=>{\nlet start = 1;\nlet end = Number(`1e${digit}`) - 1;\nlet palindrome = [];\nfor(let i=start;i<=end;i++){\nfor(let j=start;j<=end;j++){\nlet product = i*j;\nlet palindromeRegex = /\\b(\\d)(\\d?)(\\d?).?\\3\\2\\1\\b/gi;\npalindromeRegex.test(product) && palindrome.push(product);\n}\n}\nreturn Math.max(...palindrome);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-4-largest-palindrome-product.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ea0625e7e86d4bc7b643cf12862c47e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-36-double-base-palindromes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3901000cf542c50fea3\ntitle: 'Problem 36: Double-base palindromes'\nchallengeType: 1\nforumTopicId: 302020\ndashedName: problem-36-double-base-palindromes\n--description--\nThe decimal number, 585 = 10010010012 (binary), is palindromic in both bases Find the sum of all numbers, less than n, whereas 1000 ≤ n ≤ 1000000, which are palindromic in base 10 and base 2 (Please note that the palindromic number, in either base, may not include leading zeros )\n--hints--\ndoubleBasePalindromes(1000) should return a number js\nassert(typeof doubleBasePalindromes(1000) === 'number');\ndoubleBasePalindromes(1000) should return 1772 js\nassert(doubleBasePalindromes(1000) == 1772);\ndoubleBasePalindromes(50000) should return 105795 js\nassert(doubleBasePalindromes(50000) == 105795);\ndoubleBasePalindromes(500000) should return 286602 js\nassert(doubleBasePalindromes(500000) == 286602);\ndoubleBasePalindromes(1000000) should return 872187 js\nassert(doubleBasePalindromes(1000000) == 872187);\n--seed--\n--seed-contents--\n```js\nfunction doubleBasePalindromes(n) {\nreturn n;\n}\ndoubleBasePalindromes(1000000);\n```\n--solutions--\n```js\nfunction buildPalindromesBase10(len) {\n// Base cases\nconst palindromes = [];\nif (len > 0) {\npalindromes push([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n}\nif (len > 1) {\npalindromes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-36-double-base-palindromes.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "37685a3f2392ddcdf1a421f611c15824",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-36-double-base-palindromes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return 1772 js assert(doubleBasePalindromes(1000) == 1772); doubleBasePalindromes(50000) should return 105795 js assert(doubleBasePalindromes(50000) == 105795); doubleBasePalindromes(500000) should return 286602 js assert(doubleBasePalindromes(500000) == 286602); doubleBasePalindromes(1000000) should return 872187 js assert(doubleBasePalindromes(1000000) == 872187); --seed-- --seed-contents-- ```js function doubleBasePalindromes(n) { return n; } doubleBasePalindromes(1000000); ``` --solutions-- ```js function buildPalindromesBase10(len) { // Base cases const palindromes = []; if (len > 0) { palindromes push([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]); } if (len > 1) { palindromespush([11, 22, 33, 44, 55, 66, 77, 88, 99, 0]);\n}\nfor (let i = 3; i <= len; i++) {\nconst lengthIPalindromes = [];\nfor (let j = 1; j < 10; j++) {\nconst firstDigit = j * (10 ** (i - 1));\nconst lastDigit = j;\n// Build off of palindromes 2 digits shorter\n{\nconst shorterPalindromes = palindromes[i - 3];\nfor (const palindrome of shorterPalindromes) {\nlengthIPalindromes push(firstDigit + palindrome * 10 + lastDigit);\n}\n}\n// Build off of palindromes 4 digits shorter\nif (i > 4) {\nconst shorterPalindromes = palindromes[i - 5];\nfor (const palindrome of shorterPalindromes) {\nlengthIPalindromes push(firstDigit + palindrome * 100 + lastDigit);\n}\n}\n}\npalindromes push(lengthIPalindromes);\n}\nreturn palindromes flat();\n}\nfunction isPalindrome(num) {\nconst numAsString = num",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-36-double-base-palindromes.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d687d46d3362f404475db52266570f59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-36-double-base-palindromes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2 digits shorter { const shorterPalindromes = palindromes[i - 3]; for (const palindrome of shorterPalindromes) { lengthIPalindromes push(firstDigit + palindrome * 10 + lastDigit); } } // Build off of palindromes 4 digits shorter if (i > 4) { const shorterPalindromes = palindromes[i - 5]; for (const palindrome of shorterPalindromes) { lengthIPalindromes push(firstDigit + palindrome * 100 + lastDigit); } } } palindromes push(lengthIPalindromes); } return palindromes flat(); } function isPalindrome(num) { const numAsString = numtoString();\nconst numDigits = numAsString length;\nfor (let i = 0; i < numDigits / 2; i++) {\nif (numAsString[i] == numAsString[numDigits - 1 - i]) {\nreturn false;\n}\n}\nreturn true;\n}\nfunction isPalindromeBase2(num) {\nreturn isPalindrome(num toString(2));\n}\nfunction doubleBasePalindromes(n) {\nlet palindromeSum = 0;\nconst maxDigits = Math ceil(Math log10(n));\nconst palindromesBase10 = buildPalindromesBase10(maxDigits);\n// Loop over all palindromes less than n\nfor (let i = 0; i < palindromesBase10 length && palindromesBase10[i] < n; i++) {\nif (isPalindromeBase2(palindromesBase10[i])) {\npalindromeSum += palindromesBase10[i];\n}\n}\nreturn palindromeSum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-36-double-base-palindromes.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "265cc74c1cb3dbf24a436736f9b3998f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-40-champernownes-constant.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3941000cf542c50fea7\ntitle: 'Problem 40: Champernowne''s constant'\nchallengeType: 1\nforumTopicId: 302066\ndashedName: problem-40-champernownes-constant\n--description--\nAn irrational decimal fraction is created by concatenating the positive integers:\n0.123456789101112131415161718192021...\nIt can be seen that the 12th digit of the fractional part is 1.\nIf dn represents the nth digit of the fractional part, find the value of the following expression.\nd1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000\n--hints--\nchampernownesConstant(100) should return a number.\njs\nassert(typeof champernownesConstant(100) === 'number');\nchampernownesConstant(100) should return 5.\njs\nassert.strictEqual(champernownesConstant(100), 5);\nchampernownesConstant(1000) should return 15.\njs\nassert.strictEqual(champernownesConstant(1000), 15);\nchampernownesConstant(1000000) should return 210.\njs\nassert.strictEqual(champernownesConstant(1000000), 210);\n--seed--\n--seed-contents--\n```js\nfunction champernownesConstant(n) {\nreturn true;\n}\nchampernownesConstant(100);\n```\n--solutions--\n```js\nfunction champernownesConstant(n) {\nlet fractionalPart = '';\nfor (let i = 0; fractionalPart.length <= n; i++) {\nfractionalPart += i.toString();\n}\nlet product = 1;\nfor (let i = 0; i < n.toString().length; i++) {\nconst index = 10 ** i;\nproduct *= parseInt(fractionalPart[index], 10);\n}\nreturn product;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1616,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-40-champernownes-constant.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "da89e5a0f55d8807a1a7f8ada00db228",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-38-pandigital-multiples.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3931000cf542c50fea5\ntitle: 'Problem 38: Pandigital multiples'\nchallengeType: 1\nforumTopicId: 302042\ndashedName: problem-38-pandigital-multiples\n--description--\nTake the number 192 and multiply it by each of 1, 2, and 3:\n$$\\begin{align}\n192 × 1 = 192\\\\\n192 × 2 = 384\\\\\n192 × 3 = 576\\\\\n\\end{align}$$\nBy concatenating each product we get the 1 to 9 pandigital, 192384576 We will call 192384576 the concatenated product of 192 and (1, 2, 3) The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1, 2, 3, 4, 5) What is the largest 1 to k pandigital k-digit number that can be formed as the concatenated product of an integer with (1, 2, , n) where n > 1 --hints--\npandigitalMultiples(8) should return a number js\nassert(typeof pandigitalMultiples(8) === 'number');\npandigitalMultiples(8) should return 78156234 js\nassert strictEqual(pandigitalMultiples(8), 78156234);\npandigitalMultiples(9) should return 932718654 js\nassert strictEqual(pandigitalMultiples(9), 932718654);\n--seed--\n--seed-contents--\n```js\nfunction pandigitalMultiples(k) {\nreturn true;\n}\npandigitalMultiples(8);\n```\n--solutions--\n```js\nfunction pandigitalMultiples(k) {\nfunction getKDigitConcatenatedProduct(num, k) {\n// returns false if concatenated product is not k digits\nlet concatenatedProduct = num toString();\nfor (let i = 2; concatenatedProduct length < k; i++) {\nconcatenatedProduct += num * i;\n}\nreturn concatenatedProduct length === k concatenatedProduct : false;\n}\nfunction is1toKPandigital(num, k) {\nconst numStr = num",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-38-pandigital-multiples.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8b85f0920972142aca919ecb5bef46e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-38-pandigital-multiples.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return 932718654 js assert strictEqual(pandigitalMultiples(9), 932718654); --seed-- --seed-contents-- ```js function pandigitalMultiples(k) { return true; } pandigitalMultiples(8); ``` --solutions-- ```js function pandigitalMultiples(k) { function getKDigitConcatenatedProduct(num, k) { // returns false if concatenated product is not k digits let concatenatedProduct = num toString(); for (let i = 2; concatenatedProduct length < k; i++) { concatenatedProduct += num * i; } return concatenatedProduct length === k concatenatedProduct : false; } function is1toKPandigital(num, k) { const numStr = numtoString();\n// check if length is not k\nif (numStr length == k) {\nreturn false;\n}\n// check if pandigital\nfor (let i = k; i > 0; i--) {\nif (numStr indexOf(i toString()) === -1) {\nreturn false;\n}\n}\nreturn true;\n}\nlet largestNum = 0;\nfor (let i = 10 ** Math floor(k / 2) + 1; i >= 1; i--) {\nconst concatenatedProduct = getKDigitConcatenatedProduct(i, k);\nif (is1toKPandigital(concatenatedProduct, k)) {\nconst number = parseInt(concatenatedProduct, 10);\nif (number > largestNum) {\nlargestNum = number;\n}\n}\n}\nreturn largestNum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-38-pandigital-multiples.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "db67b1bbb2b5ebf15d5f8443cbff69d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-41-pandigital-prime.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3951000cf542c50fea8\ntitle: 'Problem 41: Pandigital prime'\nchallengeType: 1\nforumTopicId: 302078\ndashedName: problem-41-pandigital-prime\n--description--\nWe shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once For example, 2143 is a 4-digit pandigital and is also prime What is the largest n-length digit pandigital prime that exists --hints--\npandigitalPrime(4) should return a number js\nassert(typeof pandigitalPrime(4) === 'number');\npandigitalPrime(4) should return 4231 js\nassert(pandigitalPrime(4) == 4231);\npandigitalPrime(7) should return 7652413 js\nassert(pandigitalPrime(7) == 7652413);\n--seed--\n--seed-contents--\n```js\nfunction pandigitalPrime(n) {\nreturn n;\n}\npandigitalPrime(7);\n```\n--solutions--\n```js\nfunction pandigitalPrime(n) {\nfunction isPrime(num) {\nfor (let i = 2, s = Math sqrt(num); i <= s; i++) {\nif (num % i === 0) {\nreturn false;\n}\n}\nreturn num == 1;\n}\nfunction getPermutations(n) {\nif (n === 1) {\npermutations push(digitsArr join(''));\n} else {\nfor (let i = 0; i < n - 1; i++) {\ngetPermutations(n - 1);\n// swap(n % 2 === 0 i : 0, n - 1);\nif (n % 2 === 0) {\nswap(i, n - 1);\n} else {\nswap(0, n - 1);\n}\n}\ngetPermutations(n - 1);\n}\n}\nfunction swap(x, y) {\nlet temp = digitsArr[x];\ndigitsArr[x] = digitsArr[y];\ndigitsArr[y] = temp;\n}\nlet max = 0;\nlet permutations = [];\nlet digitsArr;\nlet pandigitalNum = '';\nfor (let max = n; max > 0; max--) {\npandigitalNum += max;\n}\nfor (let i = 0; i < pandigitalNum",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2269,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-41-pandigital-prime.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ce2e3dbcc48ac20d750ac901439eae47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-41-pandigital-prime.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "if (n % 2 === 0) { swap(i, n - 1); } else { swap(0, n - 1); } } getPermutations(n - 1); } } function swap(x, y) { let temp = digitsArr[x]; digitsArr[x] = digitsArr[y]; digitsArr[y] = temp; } let max = 0; let permutations = []; let digitsArr; let pandigitalNum = ''; for (let max = n; max > 0; max--) { pandigitalNum += max; } for (let i = 0; i < pandigitalNumlength; i++) {\nif (max > 0) {\nbreak;\n} else {\npermutations = [];\nconst currMax = pandigitalNum slice(i);\ndigitsArr = currMax split('');\ngetPermutations(digitsArr length);\n// sort permutations in descending order\npermutations sort(function(a, b) {\nreturn b - a;\n});\nfor (let perm of permutations) {\nconst thisPerm = parseInt(perm);\nif (isPrime(thisPerm)) {\nmax = thisPerm;\nbreak;\n}\n}\n}\n}\nreturn max;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2269,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-41-pandigital-prime.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "922649dff8270ced0f2f87995dd16594",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-43-sub-string-divisibility.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3971000cf542c50feaa\ntitle: 'Problem 43: Sub-string divisibility'\nchallengeType: 1\nforumTopicId: 302100\ndashedName: problem-43-sub-string-divisibility\n--description--\nThe number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property Let $d_1$ be the $1^{st}$ digit, $d_2$ be the $2^{nd}$ digit, and so on In this way, we note the following:\n${d_2}{d_3}{d_4} = 406$ is divisible by 2\n${d_3}{d_4}{d_5} = 063$ is divisible by 3\n${d_4}{d_5}{d_6} = 635$ is divisible by 5\n${d_5}{d_6}{d_7} = 357$ is divisible by 7\n${d_6}{d_7}{d_8} = 572$ is divisible by 11\n${d_7}{d_8}{d_9} = 728$ is divisible by 13\n${d_8}{d_9}{d_{10}} = 289$ is divisible by 17\nFind the sum of all 0 to n pandigital numbers with sub-strings fulfilling n - 2 of these divisibility properties Note: Pandigital numbers starting with 0 are to be considered in the result --hints--\nsubstringDivisibility(5) should return a number js\nassert(typeof substringDivisibility(5) === 'number');\nsubstringDivisibility(5) should return 12444480 js\nassert strictEqual(substringDivisibility(5), 12444480)\nsubstringDivisibility(7) should return 1099210170 js\nassert strictEqual(substringDivisibility(7), 1099210170)\nsubstringDivisibility(8) should return 1113342912 js\nassert strictEqual(substringDivisibility(8), 1113342912)\nsubstringDivisibility(9) should return 16695334890 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3074,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-43-sub-string-divisibility.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e08fb4243c010057578fdf2825cfbce4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-43-sub-string-divisibility.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "by 17 Find the sum of all 0 to n pandigital numbers with sub-strings fulfilling n - 2 of these divisibility properties Note: Pandigital numbers starting with 0 are to be considered in the result --hints-- substringDivisibility(5) should return a number js assert(typeof substringDivisibility(5) === 'number'); substringDivisibility(5) should return 12444480 js assert strictEqual(substringDivisibility(5), 12444480) substringDivisibility(7) should return 1099210170 js assert strictEqual(substringDivisibility(7), 1099210170) substringDivisibility(8) should return 1113342912 js assert strictEqual(substringDivisibility(8), 1113342912) substringDivisibility(9) should return 16695334890 js assertstrictEqual(substringDivisibility(9), 16695334890)\n--seed--\n--seed-contents--\n```js\nfunction substringDivisibility(n) {\nreturn true;\n}\nsubstringDivisibility(5);\n```\n--solutions--\n```js\nfunction substringDivisibility(n) {\nfunction isSubDivisible(digits) {\nconst factors = [2, 3, 5, 7, 11, 13, 17];\nfor (let i = 1; i < digits length - 2; i++) {\nconst subNumber = digits[i] * 100 + digits[i + 1] * 10 + digits[i + 2];\nif (subNumber % factors[i - 1] == 0) {\nreturn false;\n}\n}\nreturn true;\n}\nfunction heapsPermutations(k, digits, conditionCheck, results) {\nif (k === 1) {\nif (conditionCheck(digits)) {\nconst number = parseInt(digits join(''), 10);\nresults",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3074,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-43-sub-string-divisibility.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5294c9225799ed8490faa8653b4a2630",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-43-sub-string-divisibility.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const factors = [2, 3, 5, 7, 11, 13, 17]; for (let i = 1; i < digits length - 2; i++) { const subNumber = digits[i] * 100 + digits[i + 1] * 10 + digits[i + 2]; if (subNumber % factors[i - 1] == 0) { return false; } } return true; } function heapsPermutations(k, digits, conditionCheck, results) { if (k === 1) { if (conditionCheck(digits)) { const number = parseInt(digits join(''), 10); resultspush(number);\n}\nreturn;\n}\nheapsPermutations(k - 1, digits, conditionCheck, results);\nfor (let i = 0; i < k - 1; i++) {\nif (k % 2 === 0) {\n[digits[i], digits[k - 1]] = [digits[k - 1], digits[i]];\n} else {\n[digits[0], digits[k - 1]] = [digits[k - 1], digits[0]];\n}\nheapsPermutations(k - 1, digits, conditionCheck, results);\n}\nreturn;\n}\nconst allowedDigits = [ new Array(n + 1) keys()];\nconst divisiblePandigitals = [];\nheapsPermutations(\nallowedDigits length,\nallowedDigits,\nisSubDivisible,\ndivisiblePandigitals\n);\nlet sum = 0;\nfor (let i = 0; i < divisiblePandigitals length; i++) {\nsum += divisiblePandigitals[i];\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3074,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-43-sub-string-divisibility.md",
      "source_type": "git_repo"
    },
    "token_count": 345,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4722627460879254487898f0fbf78d14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-44-pentagon-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3981000cf542c50feab\ntitle: 'Problem 44: Pentagon numbers'\nchallengeType: 1\nforumTopicId: 302111\ndashedName: problem-44-pentagon-numbers\n--description--\nPentagonal numbers are generated by the formula, Pn=n(3n−1)/2 The first ten pentagonal numbers are:\n1, 5, 12, 22, 35, 51, 70, 92, 117, 145, It can be seen that P4 + P7 = 22 + 70 = 92 = P8 However, their difference, 70 − 22 = 48, is not pentagonal Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimized; what is the value of D --hints--\npentagonNumbers() should return a number js\nassert(typeof pentagonNumbers() === 'number');\npentagonNumbers() should return 5482660 js\nassert strictEqual(pentagonNumbers(), 5482660);\n--seed--\n--seed-contents--\n```js\nfunction pentagonNumbers() {\nreturn true;\n}\npentagonNumbers();\n```\n--solutions--\n```js\nfunction pentagonNumbers() {\nfunction isPentagonal(num) {\n// Formula found by solving pentagonal number\n// equation for n const n = (Math sqrt((24 * num) + 1) + 1) / 6;\nreturn n % 1 === 0;\n}\nfunction pentagonal(num) {\nreturn (num * ((3 * num) - 1)) / 2;\n}\nlet result;\nlet i = 1;\nwhile ( result) {\ni++;\nconst num1 = (i * ((3 * i) - 1)) / 2; // Pentagonal num formula\nconst minDiff = num1 - (((i - 1) * ((3 * (i - 1)) - 1)) / 2);\nlet j = i - 1;\nwhile (j > 0 &&",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1733,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-44-pentagon-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bf88e95570765610b7433af8873a660a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-44-pentagon-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "n % 1 === 0; } function pentagonal(num) { return (num * ((3 * num) - 1)) / 2; } let result; let i = 1; while ( result) { i++; const num1 = (i * ((3 * i) - 1)) / 2; // Pentagonal num formula const minDiff = num1 - (((i - 1) * ((3 * (i - 1)) - 1)) / 2); let j = i - 1; while (j > 0 &&result) {\nconst num2 = (j * ((3 * j) - 1)) / 2;\nif (isPentagonal(num1 - num2) && isPentagonal(num1 + num2)) {\nresult = num1 - num2;\n}\nj--;\n}\n}\nreturn result;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1733,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-44-pentagon-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "64ac1f5ee60c4f9add95e7112a093909",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-45-triangular-pentagonal-and-hexagonal.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3991000cf542c50feac\ntitle: 'Problem 45: Triangular, pentagonal, and hexagonal'\nchallengeType: 1\nforumTopicId: 302122\ndashedName: problem-45-triangular-pentagonal-and-hexagonal\n--description--\nTriangle, pentagonal, and hexagonal numbers are generated by the following formulae:\nTriangleTn=n(n+1)/21, 3, 6, 10, 15, PentagonalPn=n(3n−1)/21, 5, 12, 22, 35, HexagonalHn=n(2n−1)1, 6, 15, 28, 45, It can be verified that T285 = P165 = H143 = 40755 Find the next triangle number that is also pentagonal and hexagonal --hints--\ntriPentaHexa(40756) should return a number js\nassert(typeof triPentaHexa(40756) === 'number');\ntriPentaHexa(40756) should return 1533776805 js\nassert strictEqual(triPentaHexa(40756), 1533776805);\n--seed--\n--seed-contents--\n```js\nfunction triPentaHexa(n) {\nreturn true;\n}\ntriPentaHexa(40756);\n```\n--solutions--\n```js\nfunction triPentaHexa(n) {\nfunction triangular(num) {\nreturn (num * (num + 1)) / 2;\n}\nfunction isPentagonal(num) {\n// Formula found by completing the square and\n// solving for n const n = (Math sqrt((24 * num) + 1) + 1) / 6;\nreturn n % 1 === 0;\n}\nfunction isHexagonal(num) {\n// Formula found by completing the square and\n// solving for n const n = Math sqrt(0 5 * (num + (1 / 8))) + 0 25;\nreturn n % 1 === 0;\n}\nlet iTri = n;\nlet tri;\nlet found = false;\nwhile ( found) {\niTri++;\ntri = triangular(iTri);\nif (isPentagonal(tri) && isHexagonal(tri)) {\nfound = true;\n}\n}\nreturn tri;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2165,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-45-triangular-pentagonal-and-hexagonal.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7824c7e9698120fd3eedcc410bfb5a61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-48-self-powers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f39c1000cf542c50feaf\ntitle: 'Problem 48: Self powers'\nchallengeType: 1\nforumTopicId: 302157\ndashedName: problem-48-self-powers\n--description--\nThe series, 11 + 22 + 33 + ... + 1010 = 10405071317.\nFind the last ten digits of the series, 11 + 22 + 33 + ... + 10001000.\n--hints--\nselfPowers(10, 3) should return a number.\njs\nassert(typeof selfPowers(10, 3) === 'number');\nselfPowers(10, 3) should return 317.\njs\nassert.strictEqual(selfPowers(10, 3), 317);\nselfPowers(150, 6) should return 29045.\njs\nassert.strictEqual(selfPowers(150, 6), 29045);\nselfPowers(673, 7) should return 2473989.\njs\nassert.strictEqual(selfPowers(673, 7), 2473989);\nselfPowers(1000, 10) should return 9110846700.\njs\nassert.strictEqual(selfPowers(1000, 10), 9110846700);\n--seed--\n--seed-contents--\n```js\nfunction selfPowers(power, lastDigits) {\nreturn true;\n}\nselfPowers(1000, 10);\n```\n--solutions--\n```js\nfunction selfPowers(power, lastDigits) {\nlet sum = 0;\nconst modulo = Math.pow(10, lastDigits);\nfor (let i = 1; i <= power; i++) {\nlet temp = i;\nfor (let j = 1; j < i; j++) {\ntemp *= i;\ntemp %= modulo;\n}\nsum += temp;\nsum %= modulo;\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-48-self-powers.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9a22fa0c7ee0cfc0136cb118b6667ba5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-46-goldbachs-other-conjecture.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f39a1000cf542c50fead\ntitle: 'Problem 46: Goldbach''s other conjecture'\nchallengeType: 1\nforumTopicId: 302134\ndashedName: problem-46-goldbachs-other-conjecture\n--description--\nIt was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square 9 = 7 + 2×12\n15 = 7 + 2×22\n21 = 3 + 2×32\n25 = 7 + 2×32\n27 = 19 + 2×22\n33 = 31 + 2×12\nIt turns out that the conjecture was false What is the smallest odd composite that cannot be written as the sum of a prime and twice a square --hints--\ngoldbachsOtherConjecture() should return a number js\nassert(typeof goldbachsOtherConjecture() === 'number');\ngoldbachsOtherConjecture() should return 5777 js\nassert strictEqual(goldbachsOtherConjecture(), 5777);\n--seed--\n--seed-contents--\n```js\nfunction goldbachsOtherConjecture() {\nreturn true;\n}\ngoldbachsOtherConjecture();\n```\n--solutions--\n```js\nfunction goldbachsOtherConjecture() {  function isPrime(num) {\nif (num < 2) {\nreturn false;\n} else if (num === 2) {\nreturn true;\n}\nconst sqrtOfNum = Math floor(num ** 0 5);\nfor (let i = 2; i <= sqrtOfNum + 1; i++) {\nif (num % i === 0) {\nreturn false;\n}\n}\nreturn true;\n}\nfunction isSquare(num) {\nreturn Math sqrt(num) % 1 === 0;\n}\n// construct a list of prime numbers\nconst primes = [];\nfor (let i = 2; primes length < 1000; i++) {\nif (isPrime(i)) primes push(i);\n}\nlet num = 3;\nlet answer;\nwhile ( answer) {\nnum += 2;\nif ( isPrime(num)) {\nlet found = false;\nfor (let primeI = 0; primeI < primes length &&",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2043,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-46-goldbachs-other-conjecture.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fd93ee82ef53a29938fef1b831254279",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-46-goldbachs-other-conjecture.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return false; } } return true; } function isSquare(num) { return Math sqrt(num) % 1 === 0; } // construct a list of prime numbers const primes = []; for (let i = 2; primes length < 1000; i++) { if (isPrime(i)) primes push(i); } let num = 3; let answer; while ( answer) { num += 2; if ( isPrime(num)) { let found = false; for (let primeI = 0; primeI < primes length &&found; primeI++) {\nconst square = (num - primes[primeI]) / 2;\nif (isSquare(square)) {\nfound = true;\nbreak;\n}\n}\nif ( found) answer = num;\n}\n}\nreturn answer;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2043,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-46-goldbachs-other-conjecture.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "702303a196bcca978c5de07c67b8fec6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-42-coded-triangle-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3961000cf542c50fea9\ntitle: 'Problem 42: Coded triangle numbers'\nchallengeType: 1\nforumTopicId: 302089\ndashedName: problem-42-coded-triangle-numbers\n--description--\nThe nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value For example, the word value for SKY is 19 + 11 + 25 = 55 = t10 If the word value is a triangle number then we shall call the word a triangle word Using words array of n-length, how many are triangle words --hints--\ncodedTriangleNumbers(1400) should return a number js\nassert(typeof codedTriangleNumbers(1400) === 'number');\ncodedTriangleNumbers(1400) should return 129 js\nassert(codedTriangleNumbers(1400) == 129);\ncodedTriangleNumbers(1500) should return 137 js\nassert(codedTriangleNumbers(1500) == 137);\ncodedTriangleNumbers(1600) should return 141 js\nassert(codedTriangleNumbers(1600) == 141);\ncodedTriangleNumbers(1786) should return 162",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17880,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-42-coded-triangle-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c70b39a13c8ec3601ffb79c786243860",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-42-coded-triangle-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is 19 + 11 + 25 = 55 = t10 If the word value is a triangle number then we shall call the word a triangle word Using words array of n-length, how many are triangle words --hints-- codedTriangleNumbers(1400) should return a number js assert(typeof codedTriangleNumbers(1400) === 'number'); codedTriangleNumbers(1400) should return 129 js assert(codedTriangleNumbers(1400) == 129); codedTriangleNumbers(1500) should return 137 js assert(codedTriangleNumbers(1500) == 137); codedTriangleNumbers(1600) should return 141 js assert(codedTriangleNumbers(1600) == 141); codedTriangleNumbers(1786) should return 162js\nassert(codedTriangleNumbers(1786) == 162);\n--seed--\n--seed-contents--\n```js\nfunction codedTriangleNumbers(n) {\nreturn 1;\n}\n// Only change code above this line\nconst words = ['A','ABILITY','ABLE','ABOUT','ABOVE','ABSENCE','ABSOLUTELY','ACADEMIC','ACCEPT','ACCESS','ACCIDENT','ACCOMPANY','ACCORDING','ACCOUNT','ACHIEVE','ACHIEVEMENT','ACID','ACQUIRE','ACROSS','ACT','ACTION','ACTIVE','ACTIVITY','ACTUAL','ACTUALLY','ADD','ADDITION','ADDITIONAL','ADDRESS','ADMINISTRATION','ADMIT','ADOPT','ADULT','ADVANCE','ADVANTAGE','ADVICE','ADVISE','AFFAIR','AFFECT','AFFORD','AFRAID','AFTER','AFTERNOON','AFTERWARDS','AGAIN','AGAINST','AGE','AGENCY','AGENT','AGO','AGREE','AGREEMENT','AHEAD','AID','AIM','AIR','AIRCRAFT','ALL','ALLOW','ALMOST','ALONE','ALONG','ALREADY','ALRIGHT','ALSO','ALTERNATIVE','ALTHOUGH','ALWAYS','AMONG','AMONGST','AMOUNT','AN','ANALYSIS','ANCIENT','AND','ANIMAL','ANNOUNCE','ANNUAL','ANOTHER','ANSWER','ANY','ANYBODY','ANYONE','ANYTHING','ANYWAY','APART','APPARENT','APPARENTLY','APPEAL','APPEAR','APPEARANCE','APPLICATION','APPLY','APPOINT','APPOINTMENT','APPROACH','APPROPRIATE','APPROVE','AREA','ARGUE','ARGUMENT','ARISE','ARM','ARMY','AROUND','ARRANGE','ARRANGEMENT','ARRIVE','ART','ARTICLE','ARTIST','AS','ASK','ASPECT','ASSEMBLY','ASSESS','ASSESSMENT','ASSET','ASSOCIATE','ASSOCIATION','ASSUME','ASSUMPTION','AT','ATMOSPHERE','ATTACH','ATTACK','ATTEMPT','ATTEND','ATTENTION','ATTITUDE','ATTRACT','ATTRACTIVE','AUDIENCE','AUTHOR','AUTHORITY','AVAILABLE','AVERAGE','AVOID','AWARD','AWARE','AWAY','AYE','BABY','BACK','BACKGROUND','BAD','BAG','BALANCE','BALL','BAND','BANK','BAR','BASE','BASIC','BASIS','BATTLE','BE','BEAR','BEAT','BEAUTIFUL','BECAUSE','BECOME','BED','BEDROOM','BEFORE','BEGIN','BEGINNING','BEHAVIOUR','BEHIND','BELIEF','BELIEVE','BELONG','BELOW','BENEATH','BENEFIT','BESIDE','BEST','BETTER','BETWEEN','BEYOND','BIG','BILL','BIND','BIRD','BIRTH','BIT','BLACK','BLOCK','BLOOD','BLOODY','BLOW','BLUE','BOARD','BOAT','BODY','BONE','BOOK','BORDER','BOTH','BOTTLE','BOTTOM','BOX','BOY','BRAIN','BRANCH','BREAK','BREATH','BRIDGE','BRIEF','BRIGHT','BRING','BROAD','BROTHER','BUDGET','BUILD','BUILDING','BURN','BUS','BUSINESS','BUSY','BUT','BUY','BY','CABINET','CALL','CAMPAIGN','CAN','CANDIDATE','CAPABLE','CAPACITY','CAPITAL','CAR','CARD','CARE','CAREER','CAREFUL','CAREFULLY','CARRY','CASE','CASH','CAT','CATCH','CATEGORY','CAUSE','CELL','CENTRAL','CENTRE','CENTURY','CERTAIN','CERTAINLY','CHAIN','CHAIR','CHAIRMAN','CHALLENGE','CHANCE','CHANGE','CHANNEL','CHAPTER','CHARACTER','CHARACTERISTIC','CHARGE','CHEAP','CHECK','CHEMICAL','CHIEF','CHILD','CHOICE','CHOOSE','CHURCH','CIRCLE','CIRCUMSTANCE','CITIZEN','CITY','CIVIL','CLAIM','CLASS','CLEAN','CLEAR','CLEARLY','CLIENT','CLIMB','CLOSE','CLOSELY','CLOTHES','CLUB','COAL','CODE','COFFEE','COLD','COLLEAGUE','COLLECT','COLLECTION','COLLEGE','COLOUR','COMBINATION','COMBINE','COME','COMMENT','COMMERCIAL','COMMISSION','COMMIT','COMMITMENT','COMMITTEE','COMMON','COMMUNICATION','COMMUNITY','COMPANY','COMPARE','COMPARISON','COMPETITION','COMPLETE','COMPLETELY','COMPLEX','COMPONENT','COMPUTER','CONCENTRATE','CONCENTRATION','CONCEPT','CONCERN','CONCERNED','CONCLUDE','CONCLUSION','CONDITION','CONDUCT','CONFERENCE','CONFIDENCE','CONFIRM','CONFLICT','CONGRESS','CONNECT','CONNECTION','CONSEQUENCE','CONSERVATIVE','CONSIDER','CONSIDERABLE','CONSIDERATION','CONSIST','CONSTANT','CONSTRUCTION','CONSUMER','CONTACT','CONTAIN','CONTENT','CONTEXT','CONTINUE','CONTRACT','CONTRAST','CONTRIBUTE','CONTRIBUTION','CONTROL','CONVENTION','CONVERSATION','COPY','CORNER','CORPORATE','CORRECT','COS','COST','COULD','COUNCIL','COUNT','COUNTRY','COUNTY','COUPLE','COURSE','COURT','COVER','CREATE','CREATION','CREDIT','CRIME','CRIMINAL','CRISIS','CRITERION','CRITICAL','CRITICISM','CROSS','CROWD','CRY','CULTURAL','CULTURE','CUP','CURRENT','CURRENTLY','CURRICULUM','CUSTOMER','CUT','DAMAGE','DANGER','DANGEROUS','DARK','DATA','DATE','DAUGHTER','DAY','DEAD','DEAL','DEATH','DEBATE','DEBT','DECADE','DECIDE','DECISION','DECLARE','DEEP','DEFENCE','DEFENDANT','DEFINE','DEFINITION','DEGREE','DELIVER','DEMAND','DEMOCRATIC','DEMONSTRATE','DENY','DEPARTMENT','DEPEND','DEPUTY','DERIVE','DESCRIBE','DESCRIPTION','DESIGN','DESIRE','DESK','DESPITE','DESTROY','DETAIL','DETAILED','DETERMINE','DEVELOP','DEVELOPMENT','DEVICE','DIE','DIFFERENCE','DIFFERENT','DIFFICULT','DIFFICULTY','DINNER','DIRECT','DIRECTION','DIRECTLY','DIRECTOR','DISAPPEAR','DISCIPLINE','DISCOVER','DISCUSS','DISCUSSION','DISEASE','DISPLAY','DISTANCE','DISTINCTION','DISTRIBUTION','DISTRICT','DIVIDE','DIVISION','DO','DOCTOR','DOCUMENT','DOG','DOMESTIC','DOOR','DOUBLE','DOUBT','DOWN','DRAW','DRAWING','DREAM','DRESS','DRINK','DRIVE','DRIVER','DROP','DRUG','DRY','DUE','DURING','DUTY','EACH','EAR','EARLY','EARN','EARTH','EASILY','EAST','EASY','EAT','ECONOMIC','ECONOMY','EDGE','EDITOR','EDUCATION','EDUCATIONAL','EFFECT','EFFECTIVE','EFFECTIVELY','EFFORT','EGG','EITHER','ELDERLY','ELECTION','ELEMENT','ELSE','ELSEWHERE','EMERGE','EMPHASIS','EMPLOY','EMPLOYEE','EMPLOYER','EMPLOYMENT','EMPTY','ENABLE','ENCOURAGE','END','ENEMY','ENERGY','ENGINE','ENGINEERING','ENJOY','ENOUGH','ENSURE','ENTER','ENTERPRISE','ENTIRE','ENTIRELY','ENTITLE','ENTRY','ENVIRONMENT','ENVIRONMENTAL','EQUAL','EQUALLY','EQUIPMENT','ERROR','ESCAPE','ESPECIALLY','ESSENTIAL','ESTABLISH','ESTABLISHMENT','ESTATE','ESTIMATE','EVEN','EVENING','EVENT','EVENTUALLY','EVER','EVERY','EVERYBODY','EVERYONE','EVERYTHING','EVIDENCE','EXACTLY','EXAMINATION','EXAMINE','EXAMPLE','EXCELLENT','EXCEPT','EXCHANGE','EXECUTIVE','EXERCISE','EXHIBITION','EXIST','EXISTENCE','EXISTING','EXPECT','EXPECTATION','EXPENDITURE','EXPENSE','EXPENSIVE','EXPERIENCE','EXPERIMENT','EXPERT','EXPLAIN','EXPLANATION','EXPLORE','EXPRESS','EXPRESSION','EXTEND','EXTENT','EXTERNAL','EXTRA','EXTREMELY','EYE','FACE','FACILITY','FACT','FACTOR','FACTORY','FAIL','FAILURE','FAIR','FAIRLY','FAITH','FALL','FAMILIAR','FAMILY','FAMOUS','FAR','FARM','FARMER','FASHION','FAST','FATHER','FAVOUR','FEAR','FEATURE','FEE','FEEL','FEELING','FEMALE','FEW','FIELD','FIGHT','FIGURE','FILE','FILL','FILM','FINAL','FINALLY','FINANCE','FINANCIAL','FIND','FINDING','FINE','FINGER','FINISH','FIRE','FIRM','FIRST','FISH','FIT','FIX','FLAT','FLIGHT','FLOOR','FLOW','FLOWER','FLY','FOCUS','FOLLOW','FOLLOWING','FOOD','FOOT','FOOTBALL','FOR','FORCE','FOREIGN','FOREST','FORGET','FORM','FORMAL','FORMER','FORWARD','FOUNDATION','FREE','FREEDOM','FREQUENTLY','FRESH','FRIEND','FROM','FRONT','FRUIT','FUEL','FULL','FULLY','FUNCTION','FUND','FUNNY','FURTHER','FUTURE','GAIN','GAME','GARDEN','GAS','GATE','GATHER','GENERAL','GENERALLY','GENERATE','GENERATION','GENTLEMAN','GET','GIRL','GIVE','GLASS','GO','GOAL','GOD','GOLD','GOOD','GOVERNMENT','GRANT','GREAT','GREEN','GREY','GROUND','GROUP','GROW','GROWING','GROWTH','GUEST','GUIDE','GUN','HAIR','HALF','HALL','HAND','HANDLE','HANG','HAPPEN','HAPPY','HARD','HARDLY','HATE','HAVE','HE','HEAD','HEALTH','HEAR','HEART','HEAT','HEAVY','HELL','HELP','HENCE','HER','HERE','HERSELF','HIDE','HIGH','HIGHLY','HILL','HIM','HIMSELF','HIS','HISTORICAL','HISTORY','HIT','HOLD','HOLE','HOLIDAY','HOME','HOPE','HORSE','HOSPITAL','HOT','HOTEL','HOUR','HOUSE','HOUSEHOLD','HOUSING','HOW','HOWEVER','HUGE','HUMAN','HURT','HUSBAND','I','IDEA','IDENTIFY','IF','IGNORE','ILLUSTRATE','IMAGE','IMAGINE','IMMEDIATE','IMMEDIATELY','IMPACT','IMPLICATION','IMPLY','IMPORTANCE','IMPORTANT','IMPOSE','IMPOSSIBLE','IMPRESSION','IMPROVE','IMPROVEMENT','IN','INCIDENT','INCLUDE','INCLUDING','INCOME','INCREASE','INCREASED','INCREASINGLY','INDEED','INDEPENDENT','INDEX','INDICATE','INDIVIDUAL','INDUSTRIAL','INDUSTRY','INFLUENCE','INFORM','INFORMATION','INITIAL','INITIATIVE','INJURY','INSIDE','INSIST','INSTANCE','INSTEAD','INSTITUTE','INSTITUTION','INSTRUCTION','INSTRUMENT','INSURANCE','INTEND','INTENTION','INTEREST','INTERESTED','INTERESTING','INTERNAL','INTERNATIONAL','INTERPRETATION','INTERVIEW','INTO','INTRODUCE','INTRODUCTION','INVESTIGATE','INVESTIGATION','INVESTMENT','INVITE','INVOLVE','IRON','IS','ISLAND','ISSUE','IT','ITEM','ITS','ITSELF','JOB','JOIN','JOINT','JOURNEY','JUDGE','JUMP','JUST','JUSTICE','KEEP','KEY','KID','KILL','KIND','KING','KITCHEN','KNEE','KNOW','KNOWLEDGE','LABOUR','LACK','LADY','LAND','LANGUAGE','LARGE','LARGELY','LAST','LATE','LATER','LATTER','LAUGH','LAUNCH','LAW','LAWYER','LAY','LEAD','LEADER','LEADERSHIP','LEADING','LEAF','LEAGUE','LEAN','LEARN','LEAST','LEAVE','LEFT','LEG','LEGAL','LEGISLATION','LENGTH','LESS','LET','LETTER','LEVEL','LIABILITY','LIBERAL','LIBRARY','LIE','LIFE','LIFT','LIGHT','LIKE','LIKELY','LIMIT','LIMITED','LINE','LINK','LIP','LIST','LISTEN','LITERATURE','LITTLE','LIVE','LIVING','LOAN','LOCAL','LOCATION','LONG','LOOK','LORD','LOSE','LOSS','LOT','LOVE','LOVELY','LOW','LUNCH','MACHINE','MAGAZINE','MAIN','MAINLY','MAINTAIN','MAJOR','MAJORITY','MAKE','MALE','MAN','MANAGE','MANAGEMENT','MANAGER','MANNER','MANY','MAP','MARK','MARKET','MARRIAGE','MARRIED','MARRY','MASS','MASTER','MATCH','MATERIAL','MATTER','MAY','MAYBE','ME','MEAL','MEAN','MEANING','MEANS','MEANWHILE','MEASURE','MECHANISM','MEDIA','MEDICAL','MEET','MEETING','MEMBER','MEMBERSHIP','MEMORY','MENTAL','MENTION','MERELY','MESSAGE','METAL','METHOD','MIDDLE','MIGHT','MILE','MILITARY','MILK','MIND','MINE','MINISTER','MINISTRY','MINUTE','MISS','MISTAKE','MODEL','MODERN','MODULE','MOMENT','MONEY','MONTH','MORE','MORNING','MOST','MOTHER','MOTION','MOTOR','MOUNTAIN','MOUTH','MOVE','MOVEMENT','MUCH','MURDER','MUSEUM','MUSIC','MUST','MY','MYSELF','NAME','NARROW','NATION','NATIONAL','NATURAL','NATURE','NEAR','NEARLY','NECESSARILY','NECESSARY','NECK','NEED','NEGOTIATION','NEIGHBOUR','NEITHER','NETWORK','NEVER','NEVERTHELESS','NEW','NEWS','NEWSPAPER','NEXT','NICE','NIGHT','NO','NOBODY','NOD','NOISE','NONE','NOR','NORMAL','NORMALLY','NORTH','NORTHERN','NOSE','NOT','NOTE','NOTHING','NOTICE','NOTION','NOW','NUCLEAR','NUMBER','NURSE','OBJECT','OBJECTIVE','OBSERVATION','OBSERVE','OBTAIN','OBVIOUS','OBVIOUSLY','OCCASION','OCCUR','ODD','OF','OFF','OFFENCE','OFFER','OFFICE','OFFICER','OFFICIAL','OFTEN','OIL','OKAY','OLD','ON','ONCE','ONE','ONLY','ONTO','OPEN','OPERATE','OPERATION','OPINION','OPPORTUNITY','OPPOSITION','OPTION','OR','ORDER','ORDINARY','ORGANISATION','ORGANISE','ORGANIZATION','ORIGIN','ORIGINAL','OTHER','OTHERWISE','OUGHT','OUR','OURSELVES','OUT','OUTCOME','OUTPUT','OUTSIDE','OVER','OVERALL','OWN','OWNER','PACKAGE','PAGE','PAIN','PAINT','PAINTING','PAIR','PANEL','PAPER','PARENT','PARK','PARLIAMENT','PART','PARTICULAR','PARTICULARLY','PARTLY','PARTNER','PARTY','PASS','PASSAGE','PAST','PATH','PATIENT','PATTERN','PAY','PAYMENT','PEACE','PENSION','PEOPLE','PER','PERCENT','PERFECT','PERFORM','PERFORMANCE','PERHAPS','PERIOD','PERMANENT','PERSON','PERSONAL','PERSUADE','PHASE','PHONE','PHOTOGRAPH','PHYSICAL','PICK','PICTURE','PIECE','PLACE','PLAN','PLANNING','PLANT','PLASTIC','PLATE','PLAY','PLAYER','PLEASE','PLEASURE','PLENTY','PLUS','POCKET','POINT','POLICE','POLICY','POLITICAL','POLITICS','POOL','POOR','POPULAR','POPULATION','POSITION','POSITIVE','POSSIBILITY','POSSIBLE','POSSIBLY','POST','POTENTIAL','POUND','POWER','POWERFUL','PRACTICAL','PRACTICE','PREFER','PREPARE','PRESENCE','PRESENT','PRESIDENT','PRESS','PRESSURE','PRETTY','PREVENT','PREVIOUS','PREVIOUSLY','PRICE','PRIMARY','PRIME','PRINCIPLE','PRIORITY','PRISON','PRISONER','PRIVATE','PROBABLY','PROBLEM','PROCEDURE','PROCESS','PRODUCE','PRODUCT','PRODUCTION','PROFESSIONAL','PROFIT','PROGRAM','PROGRAMME','PROGRESS','PROJECT','PROMISE','PROMOTE','PROPER','PROPERLY','PROPERTY','PROPORTION','PROPOSE','PROPOSAL','PROSPECT','PROTECT','PROTECTION','PROVE','PROVIDE','PROVIDED','PROVISION','PUB','PUBLIC','PUBLICATION','PUBLISH','PULL','PUPIL','PURPOSE','PUSH','PUT','QUALITY','QUARTER','QUESTION','QUICK','QUICKLY','QUIET','QUITE','RACE','RADIO','RAILWAY','RAIN','RAISE','RANGE','RAPIDLY','RARE','RATE','RATHER','REACH','REACTION','READ','READER','READING','READY','REAL','REALISE','REALITY','REALIZE','REALLY','REASON','REASONABLE','RECALL','RECEIVE','RECENT','RECENTLY','RECOGNISE','RECOGNITION','RECOGNIZE','RECOMMEND','RECORD','RECOVER','RED','REDUCE','REDUCTION','REFER','REFERENCE','REFLECT','REFORM','REFUSE','REGARD','REGION','REGIONAL','REGULAR','REGULATION','REJECT','RELATE','RELATION','RELATIONSHIP','RELATIVE','RELATIVELY','RELEASE','RELEVANT','RELIEF','RELIGION','RELIGIOUS','RELY','REMAIN','REMEMBER','REMIND','REMOVE','REPEAT','REPLACE','REPLY','REPORT','REPRESENT','REPRESENTATION','REPRESENTATIVE','REQUEST','REQUIRE','REQUIREMENT','RESEARCH','RESOURCE','RESPECT','RESPOND','RESPONSE','RESPONSIBILITY','RESPONSIBLE','REST','RESTAURANT','RESULT','RETAIN','RETURN','REVEAL','REVENUE','REVIEW','REVOLUTION','RICH','RIDE','RIGHT','RING','RISE','RISK','RIVER','ROAD','ROCK','ROLE','ROLL','ROOF','ROOM','ROUND','ROUTE','ROW','ROYAL','RULE','RUN','RURAL','SAFE','SAFETY','SALE','SAME','SAMPLE','SATISFY','SAVE','SAY','SCALE','SCENE','SCHEME','SCHOOL','SCIENCE','SCIENTIFIC','SCIENTIST','SCORE','SCREEN','SEA','SEARCH','SEASON','SEAT','SECOND','SECONDARY','SECRETARY','SECTION','SECTOR','SECURE','SECURITY','SEE','SEEK','SEEM','SELECT','SELECTION','SELL','SEND','SENIOR','SENSE','SENTENCE','SEPARATE','SEQUENCE','SERIES','SERIOUS','SERIOUSLY','SERVANT','SERVE','SERVICE','SESSION','SET','SETTLE','SETTLEMENT','SEVERAL','SEVERE','SEX','SEXUAL','SHAKE','SHALL','SHAPE','SHARE','SHE','SHEET','SHIP','SHOE','SHOOT','SHOP','SHORT','SHOT','SHOULD','SHOULDER','SHOUT','SHOW','SHUT','SIDE','SIGHT','SIGN','SIGNAL','SIGNIFICANCE','SIGNIFICANT','SILENCE','SIMILAR','SIMPLE','SIMPLY','SINCE','SING','SINGLE','SIR','SISTER','SIT','SITE','SITUATION','SIZE','SKILL','SKIN','SKY','SLEEP','SLIGHTLY','SLIP','SLOW','SLOWLY','SMALL','SMILE','SO','SOCIAL','SOCIETY','SOFT','SOFTWARE','SOIL','SOLDIER','SOLICITOR','SOLUTION','SOME','SOMEBODY','SOMEONE','SOMETHING','SOMETIMES','SOMEWHAT','SOMEWHERE','SON','SONG','SOON','SORRY','SORT','SOUND','SOURCE','SOUTH','SOUTHERN','SPACE','SPEAK','SPEAKER','SPECIAL','SPECIES','SPECIFIC','SPEECH','SPEED','SPEND','SPIRIT','SPORT','SPOT','SPREAD','SPRING','STAFF','STAGE','STAND','STANDARD','STAR','START','STATE','STATEMENT','STATION','STATUS','STAY','STEAL','STEP','STICK','STILL','STOCK','STONE','STOP','STORE','STORY','STRAIGHT','STRANGE','STRATEGY','STREET','STRENGTH','STRIKE','STRONG','STRONGLY','STRUCTURE','STUDENT','STUDIO','STUDY','STUFF','STYLE','SUBJECT','SUBSTANTIAL','SUCCEED','SUCCESS','SUCCESSFUL','SUCH','SUDDENLY','SUFFER','SUFFICIENT','SUGGEST','SUGGESTION','SUITABLE','SUM','SUMMER','SUN','SUPPLY','SUPPORT','SUPPOSE','SURE','SURELY','SURFACE','SURPRISE','SURROUND','SURVEY','SURVIVE','SWITCH','SYSTEM','TABLE','TAKE','TALK','TALL','TAPE','TARGET','TASK','TAX','TEA','TEACH','TEACHER','TEACHING','TEAM','TEAR','TECHNICAL','TECHNIQUE','TECHNOLOGY','TELEPHONE','TELEVISION','TELL','TEMPERATURE','TEND','TERM','TERMS','TERRIBLE','TEST','TEXT','THAN','THANK','THANKS','THAT','THE','THEATRE','THEIR','THEM','THEME','THEMSELVES','THEN','THEORY','THERE','THEREFORE','THESE','THEY','THIN','THING','THINK','THIS','THOSE','THOUGH','THOUGHT','THREAT','THREATEN','THROUGH','THROUGHOUT','THROW','THUS','TICKET','TIME','TINY','TITLE','TO','TODAY','TOGETHER','TOMORROW','TONE','TONIGHT','TOO','TOOL','TOOTH','TOP','TOTAL','TOTALLY','TOUCH','TOUR','TOWARDS','TOWN','TRACK','TRADE','TRADITION','TRADITIONAL','TRAFFIC','TRAIN','TRAINING','TRANSFER','TRANSPORT','TRAVEL','TREAT','TREATMENT','TREATY','TREE','TREND','TRIAL','TRIP','TROOP','TROUBLE','TRUE','TRUST','TRUTH','TRY','TURN','TWICE','TYPE','TYPICAL','UNABLE','UNDER','UNDERSTAND','UNDERSTANDING','UNDERTAKE','UNEMPLOYMENT','UNFORTUNATELY','UNION','UNIT','UNITED','UNIVERSITY','UNLESS','UNLIKELY','UNTIL','UP','UPON','UPPER','URBAN','US','USE','USED','USEFUL','USER','USUAL','USUALLY','VALUE','VARIATION','VARIETY','VARIOUS','VARY','VAST','VEHICLE','VERSION','VERY','VIA','VICTIM','VICTORY','VIDEO','VIEW','VILLAGE','VIOLENCE','VISION','VISIT','VISITOR','VITAL','VOICE','VOLUME','VOTE','WAGE','WAIT','WALK','WALL','WANT','WAR','WARM','WARN','WASH','WATCH','WATER','WAVE','WAY','WE','WEAK','WEAPON','WEAR','WEATHER','WEEK','WEEKEND','WEIGHT','WELCOME','WELFARE','WELL','WEST','WESTERN','WHAT','WHATEVER','WHEN','WHERE','WHEREAS','WHETHER','WHICH','WHILE','WHILST','WHITE','WHO','WHOLE','WHOM','WHOSE','WHY','WIDE','WIDELY','WIFE','WILD','WILL','WIN','WIND','WINDOW','WINE','WING','WINNER','WINTER','WISH','WITH','WITHDRAW','WITHIN','WITHOUT','WOMAN','WONDER','WONDERFUL','WOOD','WORD','WORK','WORKER','WORKING','WORKS','WORLD','WORRY','WORTH','WOULD','WRITE','WRITER','WRITING','WRONG','YARD','YEAH','YEAR','YES','YESTERDAY','YET','YOU','YOUNG','YOUR','YOURSELF','YOUTH'];\ncodedTriangleNumbers(1786);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17880,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-42-coded-triangle-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 5714,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "91f2d522fd7a39e05258f027d4f83dfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-47-distinct-primes-factors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f39c1000cf542c50feae\ntitle: 'Problem 47: Distinct primes factors'\nchallengeType: 1\nforumTopicId: 302145\ndashedName: problem-47-distinct-primes-factors\n--description--\nThe first two consecutive numbers to have two distinct prime factors are:\n14 = 2 × 7\n15 = 3 × 5\nThe first three consecutive numbers to have three distinct prime factors are:\n644 = 22 × 7 × 23\n645 = 3 × 5 × 43\n646 = 2 × 17 × 19\nFind the first four consecutive integers to have four distinct prime factors each What is the first of these numbers --hints--\ndistinctPrimeFactors(2, 2) should return a number js\nassert(typeof distinctPrimeFactors(2, 2) === 'number');\ndistinctPrimeFactors(2, 2) should return 14 js\nassert strictEqual(distinctPrimeFactors(2, 2), 14);\ndistinctPrimeFactors(3, 3) should return 644 js\nassert strictEqual(distinctPrimeFactors(3, 3), 644);\ndistinctPrimeFactors(4, 4) should return 134043 js\nassert strictEqual(distinctPrimeFactors(4, 4), 134043);\n--seed--\n--seed-contents--\n```js\nfunction distinctPrimeFactors(targetNumPrimes, targetConsecutive) {\nreturn true;\n}\ndistinctPrimeFactors(4, 4);\n```\n--solutions--\n```js\nfunction distinctPrimeFactors(targetNumPrimes, targetConsecutive) {\nconst primeLimit = targetNumPrimes * targetConsecutive * 10000;\nconst numFactors = Array(primeLimit)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-47-distinct-primes-factors.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "34ac388385fa01cfa463b820b6a6ec51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-47-distinct-primes-factors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "these numbers --hints-- distinctPrimeFactors(2, 2) should return a number js assert(typeof distinctPrimeFactors(2, 2) === 'number'); distinctPrimeFactors(2, 2) should return 14 js assert strictEqual(distinctPrimeFactors(2, 2), 14); distinctPrimeFactors(3, 3) should return 644 js assert strictEqual(distinctPrimeFactors(3, 3), 644); distinctPrimeFactors(4, 4) should return 134043 js assert strictEqual(distinctPrimeFactors(4, 4), 134043); --seed-- --seed-contents-- ```js function distinctPrimeFactors(targetNumPrimes, targetConsecutive) { return true; } distinctPrimeFactors(4, 4); ``` --solutions-- ```js function distinctPrimeFactors(targetNumPrimes, targetConsecutive) { const primeLimit = targetNumPrimes * targetConsecutive * 10000; const numFactors = Array(primeLimit)fill(0);\nlet numConsecutive = 0;\nfor (let i = 2; i < primeLimit; i++) {\nif (numFactors[i] === targetNumPrimes) {\n// Current number is composite with target num factors\nnumConsecutive++;\nif (numConsecutive === targetConsecutive) {\nreturn i - numConsecutive + 1;\n}\n} else {\n// Current number is not matching composite\nnumConsecutive = 0;\nif (numFactors[i] === 0) {\n// Current number is prime\nfor (let j = i; j < primeLimit; j += i) {\nnumFactors[j]++;\n}\n}\n}\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-47-distinct-primes-factors.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "647de8244dcc0047565025a0c4863d05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-5-smallest-multiple.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3711000cf542c50fe84\ntitle: 'Problem 5: Smallest multiple'\nchallengeType: 1\nforumTopicId: 302160\ndashedName: problem-5-smallest-multiple\n--description--\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to n?\n--hints--\nsmallestMult(5) should return a number.\njs\nassert.isNumber(smallestMult(5));\nsmallestMult(5) should return 60.\njs\nassert.strictEqual(smallestMult(5), 60);\nsmallestMult(7) should return 420.\njs\nassert.strictEqual(smallestMult(7), 420);\nsmallestMult(10) should return 2520.\njs\nassert.strictEqual(smallestMult(10), 2520);\nsmallestMult(13) should return 360360.\njs\nassert.strictEqual(smallestMult(13), 360360);\nsmallestMult(20) should return 232792560.\njs\nassert.strictEqual(smallestMult(20), 232792560);\n--seed--\n--seed-contents--\n```js\nfunction smallestMult(n) {\nreturn true;\n}\nsmallestMult(20);\n```\n--solutions--\n```js\nfunction smallestMult(n){\nfunction gcd(a, b) {\nreturn b === 0 ? a : gcd(b, a%b); // Euclidean algorithm\n}\nfunction lcm(a, b) {\nreturn a * b / gcd(a, b);\n}\nvar result = 1;\nfor(var i = 2; i <= n; i++) {\nresult = lcm(result, i);\n}\nreturn result;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1371,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-5-smallest-multiple.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0a5569c9d61054f0174e79e83901f192",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-49-prime-permutations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f39d1000cf542c50feb0\ntitle: 'Problem 49: Prime permutations'\nchallengeType: 1\nforumTopicId: 302159\ndashedName: problem-49-prime-permutations\n--description--\nThe arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence What 12-digit number do you form by concatenating the three terms in this sequence --hints--\nprimePermutations() should return a number js\nassert(typeof primePermutations() === 'number');\nprimePermutations() should return 296962999629 js\nassert strictEqual(primePermutations(), 296962999629);\n--seed--\n--seed-contents--\n```js\nfunction primePermutations() {\nreturn true;\n}\nprimePermutations();\n```\n--solutions--\n```js\nfunction primePermutations() {\nfunction arePermutations(num1, num2) {\nconst numStr1 = num1 toString();\nlet numStr2 = num2 toString();\nif (numStr1 length == numStr2 length) {\nreturn false;\n}\nfor (let i = 0; i < numStr1 length; i++) {\nconst index = numStr2 indexOf(numStr1[i]);\nif (index === -1) {\nreturn false;\n}\nnumStr2 = numStr2 slice(0, index) + numStr2 slice(index + 1);\n}\nreturn true;\n}\nfunction isPrime(num) {\nif (num < 2) {\nreturn false;\n} else if (num === 2) {\nreturn true;\n}\nconst sqrtOfNum = Math floor(num ** 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2180,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-49-prime-permutations.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f67c761a6926c64ab2bbfe44c243738f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-49-prime-permutations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "toString(); if (numStr1 length == numStr2 length) { return false; } for (let i = 0; i < numStr1 length; i++) { const index = numStr2 indexOf(numStr1[i]); if (index === -1) { return false; } numStr2 = numStr2 slice(0, index) + numStr2 slice(index + 1); } return true; } function isPrime(num) { if (num < 2) { return false; } else if (num === 2) { return true; } const sqrtOfNum = Math floor(num ** 05);\nfor (let i = 2; i <= sqrtOfNum + 1; i++) {\nif (num % i === 0) {\nreturn false;\n}\n}\nreturn true;\n}\nfor (let num1 = 1000; num1 <= 9999; num1++) {\nconst num2 = num1 + 3330;\nconst num3 = num2 + 3330;\nif (isPrime(num1) && isPrime(num2) && isPrime(num3)) {\nif (arePermutations(num1, num2) && arePermutations(num1, num3)\n&& num1 == 1487) {\n// concatenate and return numbers\nreturn (num1 * 100000000) + (num2 * 10000) + num3;\n}\n}\n}\nreturn 0;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2180,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-49-prime-permutations.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4676ca15c12bd87c7c2bfc250e9ba5d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-52-permuted-multiples.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a01000cf542c50feb3\ntitle: 'Problem 52: Permuted multiples'\nchallengeType: 1\nforumTopicId: 302163\ndashedName: problem-52-permuted-multiples\n--description--\nIt can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.\nFind the smallest positive integer, such that multiplied by integers $\\{2, 3, \\ldots, n\\}$, contain the same digits.\n--hints--\npermutedMultiples(2) should return a number.\njs\nassert(typeof permutedMultiples(2) === 'number');\npermutedMultiples(2) should return 125874.\njs\nassert.strictEqual(permutedMultiples(2), 125874);\npermutedMultiples(6) should return 142857.\njs\nassert.strictEqual(permutedMultiples(6), 142857);\n--seed--\n--seed-contents--\n```js\nfunction permutedMultiples(n) {\nreturn true;\n}\npermutedMultiples(2);\n```\n--solutions--\n```js\nfunction permutedMultiples(n) {\nconst isPermutation = (a, b) =>\na.length !== b.length\n? false\n: a.split('').sort().join() === b.split('').sort().join();\nlet start = 1;\nlet found = false;\nlet result = 0;\nwhile (!found) {\nstart *= 10;\nfor (let i = start; i < start * 10 / n; i++) {\nfound = true;\nfor (let j = 2; j <= n; j++) {\nif (!isPermutation(i + '', j * i + '')) {\nfound = false;\nbreak;\n}\n}\nif (found) {\nresult = i;\nbreak;\n}\n}\n}\nreturn result;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-52-permuted-multiples.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "30b8ae6b1fc70ff4fb24067b78e821e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-53-combinatoric-selections.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a11000cf542c50feb4\ntitle: 'Problem 53: Combinatoric selections'\nchallengeType: 1\nforumTopicId: 302164\ndashedName: problem-53-combinatoric-selections\n--description--\nThere are exactly ten ways of selecting three from five, 12345:\n123, 124, 125, 134, 135, 145, 234, 235, 245, and 345\nIn combinatorics, we use the notation, $\\displaystyle \\binom 5 3 = 10$\nIn general, $\\displaystyle \\binom n r = \\dfrac{n }{r (n-r) }$, where $r \\le n$, $n = n \\times (n-1) \\times \\times 3 \\times 2 \\times 1$, and $0 = 1$ It is not until $n = 23$, that a value exceeds one-million: $\\displaystyle \\binom {23} {10} = 1144066$ How many, not necessarily distinct, values of $\\displaystyle \\binom n r$ for $1 \\le n \\le 100$, are greater than one-million --hints--\ncombinatoricSelections(1000) should return a number js\nassert(typeof combinatoricSelections(1000) === 'number');\ncombinatoricSelections(1000) should return 4626 js\nassert strictEqual(combinatoricSelections(1000), 4626);\ncombinatoricSelections(10000) should return 4431 js\nassert strictEqual(combinatoricSelections(10000), 4431);\ncombinatoricSelections(100000) should return 4255 js\nassert strictEqual(combinatoricSelections(100000), 4255);\ncombinatoricSelections(1000000) should return 4075 js\nassert strictEqual(combinatoricSelections(1000000), 4075);\n--seed--\n--seed-contents--\n```js\nfunction combinatoricSelections(limit) {\nreturn 1;\n}\ncombinatoricSelections(1000000);\n```\n--solutions--\n```js\nfunction combinatoricSelections(limit) {\nconst factorial = n =>\nArray",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-53-combinatoric-selections.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "22f9ce29855cab25ba5c154fdd19e467",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-53-combinatoric-selections.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "r$ for $1 \\le n \\le 100$, are greater than one-million --hints-- combinatoricSelections(1000) should return a number js assert(typeof combinatoricSelections(1000) === 'number'); combinatoricSelections(1000) should return 4626 js assert strictEqual(combinatoricSelections(1000), 4626); combinatoricSelections(10000) should return 4431 js assert strictEqual(combinatoricSelections(10000), 4431); combinatoricSelections(100000) should return 4255 js assert strictEqual(combinatoricSelections(100000), 4255); combinatoricSelections(1000000) should return 4075 js assert strictEqual(combinatoricSelections(1000000), 4075); --seed-- --seed-contents-- ```js function combinatoricSelections(limit) { return 1; } combinatoricSelections(1000000); ``` --solutions-- ```js function combinatoricSelections(limit) { const factorial = n => Arrayapply(null, { length: n }) map((_, i) => i + 1) reduce((p, c) => p * c, 1);\nlet result = 0;\nconst nMax = 100;\nfor (let n = 1; n <= nMax; n++) {\nfor (let r = 0; r <= n; r++) {\nif (factorial(n) / (factorial(r) * factorial(n - r)) >= limit)\nresult++;\n}\n}\nreturn result;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-53-combinatoric-selections.md",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "32f8791e3a8e92ac9711f315814f769d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-50-consecutive-prime-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f39e1000cf542c50feb1\ntitle: 'Problem 50: Consecutive prime sum'\nchallengeType: 1\nforumTopicId: 302161\ndashedName: problem-50-consecutive-prime-sum\n--description--\nThe prime 41, can be written as the sum of six consecutive primes:\n41 = 2 + 3 + 5 + 7 + 11 + 13\nThis is the longest sum of consecutive primes that adds to a prime below one-hundred The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953 Which prime, below one-million, can be written as the sum of the most consecutive primes --hints--\nconsecutivePrimeSum(1000) should return a number js\nassert(typeof consecutivePrimeSum(1000) === 'number');\nconsecutivePrimeSum(1000) should return 953 js\nassert strictEqual(consecutivePrimeSum(1000), 953);\nconsecutivePrimeSum(1000000) should return 997651 js\nassert strictEqual(consecutivePrimeSum(1000000), 997651);\n--seed--\n--seed-contents--\n```js\nfunction consecutivePrimeSum(limit) {\nreturn true;\n}\nconsecutivePrimeSum(1000000);\n```\n--solutions--\n```js\nclass PrimeSeive {\nconstructor(num) {\nconst seive = Array(Math floor((num - 1) / 2)) fill(true);\nconst primes = [2];\nconst upper = Math floor((num - 1) / 2);\nconst sqrtUpper = Math floor((Math sqrt(num) - 1) / 2);\nfor (let i = 0; i <= sqrtUpper; i++) {\nif (seive[i]) {\n// Mark value in seive array\nconst prime = 2 * i + 3;\nprimes push(prime);\n// Mark all multiples of this number as false (not prime)\nconst primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\nfor (let j = primeSquaredIndex; j < upper; j += prime) {\nseive[j] = false;\n}\n}\n}\nfor (let i = sqrtUpper + 1; i < upper; i++) {\nif (seive[i]) {\nprimes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-50-consecutive-prime-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "aa423ccfec62790431a2f9d027049237",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-50-consecutive-prime-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ // Mark value in seive array const prime = 2 * i + 3; primes push(prime); // Mark all multiples of this number as false (not prime) const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3; for (let j = primeSquaredIndex; j < upper; j += prime) { seive[j] = false; } } } for (let i = sqrtUpper + 1; i < upper; i++) { if (seive[i]) { primespush(2 * i + 3);\n}\n}\nthis _seive = seive;\nthis _primes = primes;\n}\nisPrime(num) {\nreturn num === 2 true\n: num % 2 === 0 false\n: this isOddPrime(num);\n}\nisOddPrime(num) {\nreturn this _seive[(num - 3) / 2];\n}\nget primes() {\nreturn this _primes;\n}\n};\nfunction consecutivePrimeSum(limit) {\n// Initialize seive\nconst primeSeive = new PrimeSeive(limit);\n// Initialize for longest sum < 100\nlet bestPrime = 41;\nlet bestI = 0;\nlet bestJ = 5;\n// Find longest sum < limit\nlet sumOfCurrRange = 41;\nlet i = 0, j = 5;\n// -- Loop while current some starting at i is < limit\nwhile (sumOfCurrRange < limit) {\nlet currSum = sumOfCurrRange;\n// -- Loop while pushing j towards end of PRIMES list\n//      keeping sum under limit\nwhile (currSum < limit) {\nif (primeSeive isPrime(currSum)) {\nbestPrime = sumOfCurrRange = currSum;\nbestI = i;\nbestJ = j;\n}\n// -- Increment inner loop\nj++;\ncurrSum += primeSeive primes[j];\n}\n// -- Increment outer loop\ni++;\nj = i + (bestJ - bestI);\nsumOfCurrRange -= primeSeive primes[i - 1];\nsumOfCurrRange += primeSeive primes[j];\n}\n// Return\nreturn bestPrime;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-50-consecutive-prime-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a7b39286d1517a4372e4138b83df1baf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-51-prime-digit-replacements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f39f1000cf542c50feb2\ntitle: 'Problem 51: Prime digit replacements'\nchallengeType: 1\nforumTopicId: 302162\ndashedName: problem-51-prime-digit-replacements\n--description--\nBy replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993 Consequently 56003, being the first member of this family, is the smallest prime with this property Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an n prime value family --hints--\nprimeDigitReplacements(6) should return a number js\nassert(typeof primeDigitReplacements(6) === 'number');\nprimeDigitReplacements(6) should return 13 js\nassert strictEqual(primeDigitReplacements(6), 13);\nprimeDigitReplacements(7) should return 56003 js\nassert strictEqual(primeDigitReplacements(7), 56003);\nprimeDigitReplacements(8) should return 121313 js\nassert strictEqual(primeDigitReplacements(8), 121313);\n--seed--\n--seed-contents--\n```js\nfunction primeDigitReplacements(n) {\nreturn true;\n}\nprimeDigitReplacements(6);\n```\n--solutions--\n```js\nclass PrimeSeive {\nconstructor(num) {\nconst seive = Array(Math floor((num - 1) / 2)) fill(true);\nconst upper = Math floor((num - 1) / 2);\nconst sqrtUpper = Math floor((Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-51-prime-digit-replacements.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8fcf5139be981cc19cf6055703d4b8e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-51-prime-digit-replacements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "primeDigitReplacements(6) should return a number js assert(typeof primeDigitReplacements(6) === 'number'); primeDigitReplacements(6) should return 13 js assert strictEqual(primeDigitReplacements(6), 13); primeDigitReplacements(7) should return 56003 js assert strictEqual(primeDigitReplacements(7), 56003); primeDigitReplacements(8) should return 121313 js assert strictEqual(primeDigitReplacements(8), 121313); --seed-- --seed-contents-- ```js function primeDigitReplacements(n) { return true; } primeDigitReplacements(6); ``` --solutions-- ```js class PrimeSeive { constructor(num) { const seive = Array(Math floor((num - 1) / 2)) fill(true); const upper = Math floor((num - 1) / 2); const sqrtUpper = Math floor((Mathsqrt(num) - 1) / 2);\nfor (let i = 0; i <= sqrtUpper; i++) {\nif (seive[i]) {\n// Mark value in seive array\nconst prime = 2 * i + 3;\n// Mark all multiples of this number as false (not prime)\nconst primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\nfor (let j = primeSquaredIndex; j < upper; j += prime) {\nseive[j] = false;\n}\n}\n}\nthis _seive = seive;\n}\nisPrime(num) {\nreturn num === 2 true\n: num % 2 === 0 false\n: this isOddPrime(num);\n}\nisOddPrime(num) {\nreturn this _seive[(num - 3) / 2];\n}\n};\nfunction primeDigitReplacements(n) {\nconst primeSeive = new PrimeSeive(n * n * n * 2000);\nfunction isNFamily(number, n) {\nconst prime = number toString();\nconst lastDigit = prime[prime length - 1];\nreturn doesReplacingMakeFamily(prime, '0', n) ||\ndoesReplacingMakeFamily(prime, '2', n) ||\n(lastDigit == '1' && doesReplacingMakeFamily(prime, '1', n));\n}\nfunction doesReplacingMakeFamily(prime, digitToReplace, family) {\nlet miss = 0;\nconst base = parseInt(\nprime",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-51-prime-digit-replacements.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "edabf17f2bd8ec176dcdb3430b275023",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-51-prime-digit-replacements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": ": this isOddPrime(num); } isOddPrime(num) { return this _seive[(num - 3) / 2]; } }; function primeDigitReplacements(n) { const primeSeive = new PrimeSeive(n * n * n * 2000); function isNFamily(number, n) { const prime = number toString(); const lastDigit = prime[prime length - 1]; return doesReplacingMakeFamily(prime, '0', n) || doesReplacingMakeFamily(prime, '2', n) || (lastDigit == '1' && doesReplacingMakeFamily(prime, '1', n)); } function doesReplacingMakeFamily(prime, digitToReplace, family) { let miss = 0; const base = parseInt( primesplit('') map(digit => digit == digitToReplace '0' : digit) join('')\n);\nconst replacements = parseInt(\nprime split('') map(digit => digit === digitToReplace '1' : '0') join('')\n);\nconst start = prime[0] === digitToReplace 1 : 0;\nfor (let i = start; i < 10; i++) {\nconst nextNumber = base + i * replacements;\nif ( isPartOfFamily(nextNumber, prime)) miss++;\nif (10 - start - miss < family) break;\n}\nreturn 10 - start - miss === family;\n}\nfunction isPartOfFamily(number, prime) {\nreturn (\nprimeSeive isPrime(number) && number toString() length === prime length\n);\n}\nfor (let number = 1; number < 125000; number++) {\nif (primeSeive isPrime(number) && isNFamily(number, n)) {\nreturn number;\n}\n}\nreturn -1;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-51-prime-digit-replacements.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6fb39f188070c5745b62c3a1643cf1b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-56-powerful-digit-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a41000cf542c50feb7\ntitle: 'Problem 56: Powerful digit sum'\nchallengeType: 1\nforumTopicId: 302167\ndashedName: problem-56-powerful-digit-sum\n--description--\nA googol ($10^{100}$) is a massive number: one followed by one-hundred zeros; $100^{100}$ is almost unimaginably large: one followed by two-hundred zeros Despite their size, the sum of the digits in each number is only 1 Considering natural numbers of the form, $a^b$, where a, b < n, what is the maximum digital sum --hints--\npowerfulDigitSum(3) should return a number js\nassert(typeof powerfulDigitSum(3) === 'number');\npowerfulDigitSum(3) should return 4 js\nassert strictEqual(powerfulDigitSum(3), 4);\npowerfulDigitSum(10) should return 45 js\nassert strictEqual(powerfulDigitSum(10), 45);\npowerfulDigitSum(50) should return 406 js\nassert strictEqual(powerfulDigitSum(50), 406);\npowerfulDigitSum(75) should return 684 js\nassert strictEqual(powerfulDigitSum(75), 684);\npowerfulDigitSum(100) should return 972 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2009,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-56-powerful-digit-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 284,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e38c7a4722f9e7ce4899416a9fc318b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-56-powerful-digit-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of the digits in each number is only 1 Considering natural numbers of the form, $a^b$, where a, b < n, what is the maximum digital sum --hints-- powerfulDigitSum(3) should return a number js assert(typeof powerfulDigitSum(3) === 'number'); powerfulDigitSum(3) should return 4 js assert strictEqual(powerfulDigitSum(3), 4); powerfulDigitSum(10) should return 45 js assert strictEqual(powerfulDigitSum(10), 45); powerfulDigitSum(50) should return 406 js assert strictEqual(powerfulDigitSum(50), 406); powerfulDigitSum(75) should return 684 js assert strictEqual(powerfulDigitSum(75), 684); powerfulDigitSum(100) should return 972 js assertstrictEqual(powerfulDigitSum(100), 972);\n--seed--\n--seed-contents--\n```js\nfunction powerfulDigitSum(n) {\nreturn true;\n}\npowerfulDigitSum(3);\n```\n--solutions--\n```js\nfunction powerfulDigitSum(n) {\nfunction sumDigitsOfPower(numA, numB) {\nlet digitsSum = 0;\nlet number = power(numA, numB);\nwhile (number > 0n) {\nconst digit = number % 10n;\ndigitsSum += parseInt(digit, 10);\nnumber = number / 10n;\n}\nreturn digitsSum;\n}\nfunction power(numA, numB) {\nlet sum = 1n;\nfor (let b = 0; b < numB; b++) {\nsum = sum * BigInt(numA);\n}\nreturn sum;\n}\nconst limit = n - 1;\nlet maxDigitsSum = 0;\nfor (let a = limit; a > 0; a--) {\nfor (let b = limit; b > 0; b--) {\nconst curDigitSum = sumDigitsOfPower(a, b);\nif (curDigitSum > maxDigitsSum) {\nmaxDigitsSum = curDigitSum;\n}\n}\n}\nreturn maxDigitsSum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2009,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-56-powerful-digit-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5804c3b4e3209ed252b1725c1f8a626f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-55-lychrel-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a31000cf542c50feb6\ntitle: 'Problem 55: Lychrel numbers'\nchallengeType: 1\nforumTopicId: 302166\ndashedName: problem-55-lychrel-numbers\n--description--\nIf we take 47, reverse and add, 47 + 74 = 121, which is palindromic Not all numbers produce palindromes so quickly For example,\n349 + 943 = 1292,\n1292 + 2921 = 4213\n4213 + 3124 = 7337\nThat is, 349 took three iterations to arrive at a palindrome Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome A number that never forms a palindrome through the reverse and add process is called a Lychrel number Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits) Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994 How many Lychrel numbers are there below num Note: Wording was modified slightly on 24 April 2007 to emphasize the theoretical nature of Lychrel numbers --hints--\ncountLychrelNumbers(1000) should return a number js\nassert(typeof countLychrelNumbers(1000) === 'number');\ncountLychrelNumbers(1000) should return 13 js\nassert strictEqual(countLychrelNumbers(1000), 13);\ncountLychrelNumbers(3243) should return 39 js\nassert strictEqual(countLychrelNumbers(3243), 39);\ncountLychrelNumbers(5000) should return 76 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2932,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-55-lychrel-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9cbe374dfcc55e767a133cd45b6c51ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-55-lychrel-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(53 iterations, 28-digits) Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994 How many Lychrel numbers are there below num Note: Wording was modified slightly on 24 April 2007 to emphasize the theoretical nature of Lychrel numbers --hints-- countLychrelNumbers(1000) should return a number js assert(typeof countLychrelNumbers(1000) === 'number'); countLychrelNumbers(1000) should return 13 js assert strictEqual(countLychrelNumbers(1000), 13); countLychrelNumbers(3243) should return 39 js assert strictEqual(countLychrelNumbers(3243), 39); countLychrelNumbers(5000) should return 76 js assertstrictEqual(countLychrelNumbers(5000), 76);\ncountLychrelNumbers(7654) should return 140 js\nassert strictEqual(countLychrelNumbers(7654), 140);\ncountLychrelNumbers(10000) should return 249 js\nassert strictEqual(countLychrelNumbers(10000), 249);\n--seed--\n--seed-contents--\n```js\nfunction countLychrelNumbers(num) {\nreturn true;\n}\ncountLychrelNumbers(10000);\n```\n--solutions--\njs\nconst countLychrelNumbers = (size) => {\nconst numReverse = (num) => {\nreturn Number(num toString() split('') reverse() join(''));\n};\nconst isPalin = (num) => {\nif (numReverse(num) === num) {\nreturn true;\n}\nreturn false;\n};\nlet total = 0;\nfor (let i = 1; i < size; i++) {\nlet loopCount = 1;\nlet sum = i;\nwhile (loopCount < 50) {\nsum = sum + numReverse(sum);\nif (isPalin(sum)) {\nbreak;\n} else {\nloopCount++;\n}\n}\nif (loopCount === 50) {\ntotal++;\n}\n}\nreturn total;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2932,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-55-lychrel-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "322bd77ac0b5a58198108fda509a9ab9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-57-square-root-convergents.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a51000cf542c50feb8\ntitle: 'Problem 57: Square root convergents'\nchallengeType: 1\nforumTopicId: 302168\ndashedName: problem-57-square-root-convergents\n--description--\nIt is possible to show that the square root of two can be expressed as an infinite continued fraction $\\sqrt 2 =1+ \\frac 1 {2+ \\frac 1 {2 +\\frac 1 {2+ \\dots}}}$\nBy expanding this for the first four iterations, we get:\n$1 + \\frac 1 2 = \\frac 32 = 1 5$\n$1 + \\frac 1 {2 + \\frac 1 2} = \\frac 7 5 = 1 4$\n$1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 2}} = \\frac {17}{12} = 1 41666 \\dots$\n$1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 {2+\\frac 1 2}}} = \\frac {41}{29} = 1 41379 \\dots$\nThe next three expansions are $\\frac {99}{70}$, $\\frac {239}{169}$, and $\\frac {577}{408}$, but the eighth expansion, $\\frac {1393}{985}$, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator In the first n expansions, how many fractions contain a numerator with more digits than denominator --hints--\nsquareRootConvergents(10) should return a number js\nassert(typeof squareRootConvergents(10) === 'number');\nsquareRootConvergents(10) should return 1 js\nassert strictEqual(squareRootConvergents(10), 1);\nsquareRootConvergents(100) should return 15 js\nassert strictEqual(squareRootConvergents(100), 15);\nsquareRootConvergents(1000) should return 153 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2292,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-57-square-root-convergents.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cd6eac4e48975a0586a519560c232b4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-57-square-root-convergents.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{577}{408}$, but the eighth expansion, $\\frac {1393}{985}$, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator In the first n expansions, how many fractions contain a numerator with more digits than denominator --hints-- squareRootConvergents(10) should return a number js assert(typeof squareRootConvergents(10) === 'number'); squareRootConvergents(10) should return 1 js assert strictEqual(squareRootConvergents(10), 1); squareRootConvergents(100) should return 15 js assert strictEqual(squareRootConvergents(100), 15); squareRootConvergents(1000) should return 153 js assertstrictEqual(squareRootConvergents(1000), 153);\n--seed--\n--seed-contents--\n```js\nfunction squareRootConvergents(n) {\nreturn true;\n}\nsquareRootConvergents(1000);\n```\n--solutions--\n```js\nfunction squareRootConvergents(n) {\nfunction countDigits(number) {\nlet counter = 0;\nwhile (number > 0) {\ncounter++;\nnumber = number / 10n;\n}\nreturn counter;\n}\n// Use BigInt as integer won't handle all cases\nlet numerator = 3n;\nlet denominator = 2n;\nlet moreDigitsInNumerator = 0;\nfor (let i = 2; i <= n; i++) {\n[numerator, denominator] = [\nnumerator + 2n * denominator,\ndenominator + numerator\n];\nif (countDigits(numerator) > countDigits(denominator)) {\nmoreDigitsInNumerator++;\n}\n}\nreturn moreDigitsInNumerator;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2292,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-57-square-root-convergents.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5299c944d93397d0fb52d4fd1bfdd8bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-58-spiral-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a61000cf542c50feb9\ntitle: 'Problem 58: Spiral primes'\nchallengeType: 1\nforumTopicId: 302169\ndashedName: problem-58-spiral-primes\n--description--\nStarting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed 37 36 35 34 33 32 31\n38 17 16 15 14 13 30\n39 18  5  4  3 12 29\n40 19  6  1  2 11 28\n41 20  7  8  9 10 27\n42 21 22 23 24 25 26\n43 44 45 46 47 48 49\nIt is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62% If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed If this process is continued, what is the side length of the square spiral for which the percent of primes along both diagonals first falls below percent --hints--\nspiralPrimes(50) should return a number js\nassert(typeof spiralPrimes(50) === 'number');\nspiralPrimes(50) should return 11 js\nassert strictEqual(spiralPrimes(50), 11);\nspiralPrimes(15) should return 981 js\nassert strictEqual(spiralPrimes(15), 981);\nspiralPrimes(10) should return 26241 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2709,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-58-spiral-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "664e7c9a65563e49c68d607fe343d8d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-58-spiral-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is wrapped around the spiral above, a square spiral with side length 9 will be formed If this process is continued, what is the side length of the square spiral for which the percent of primes along both diagonals first falls below percent --hints-- spiralPrimes(50) should return a number js assert(typeof spiralPrimes(50) === 'number'); spiralPrimes(50) should return 11 js assert strictEqual(spiralPrimes(50), 11); spiralPrimes(15) should return 981 js assert strictEqual(spiralPrimes(15), 981); spiralPrimes(10) should return 26241 js assertstrictEqual(spiralPrimes(10), 26241);\n--seed--\n--seed-contents--\n```js\nfunction spiralPrimes(percent) {\nreturn true;\n}\nspiralPrimes(50);\n```\n--solutions--\n```js\nfunction spiralPrimes(percent) {\nfunction isPrime(n) {\nif (n <= 3) {\nreturn n > 1;\n} else if (n % 2 === 0 || n % 3 === 0) {\nreturn false;\n}\nfor (let i = 5; i * i <= n; i += 6) {\nif (n % i === 0 || n % (i + 2) === 0) {\nreturn false;\n}\n}\nreturn true;\n}\nlet totalCount = 1;\nlet primesCount = 0;\nlet curNumber = 1;\nlet curSideLength = 1;\nlet ratio = 1;\nconst wantedRatio = percent / 100;\nwhile (ratio >= wantedRatio) {\ncurSideLength += 2;\nfor (let i = 0; i < 4; i++) {\ncurNumber += curSideLength - 1;\ntotalCount++;\nif (i == 3 && isPrime(curNumber)) {\nprimesCount++;\n}\n}\nratio = primesCount / totalCount;\n}\nreturn curSideLength;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2709,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-58-spiral-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b95d3e579fc697b8f385a7bca06e52bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-60-prime-pair-sets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a81000cf542c50febb\ntitle: 'Problem 60: Prime pair sets'\nchallengeType: 1\nforumTopicId: 302172\ndashedName: problem-60-prime-pair-sets\n--description--\nThe primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime. For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.\nFind the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.\n--hints--\nprimePairSets() should return a number.\njs\nassert(typeof primePairSets() === 'number');\nprimePairSets() should return 26033.\njs\nassert.strictEqual(primePairSets(), 26033);\n--seed--\n--seed-contents--\n```js\nfunction primePairSets() {\nreturn true;\n}\nprimePairSets();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 958,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-60-prime-pair-sets.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "628da67d535a07ba5cb0c36777332836",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-6-sum-square-difference.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3721000cf542c50fe85\ntitle: 'Problem 6: Sum square difference'\nchallengeType: 1\nforumTopicId: 302171\ndashedName: problem-6-sum-square-difference\n--description--\nThe sum of the squares of the first ten natural numbers is,\n12 + 22 + ... + 102 = 385\nThe square of the sum of the first ten natural numbers is,\n(1 + 2 + ... + 10)2 = 552 = 3025\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\nFind the difference between the sum of the squares of the first n natural numbers and the square of the sum.\n--hints--\nsumSquareDifference(10) should return a number.\njs\nassert.isNumber(sumSquareDifference(10));\nsumSquareDifference(10) should return 2640.\njs\nassert.strictEqual(sumSquareDifference(10), 2640);\nsumSquareDifference(20) should return 41230.\njs\nassert.strictEqual(sumSquareDifference(20), 41230);\nsumSquareDifference(100) should return 25164150.\njs\nassert.strictEqual(sumSquareDifference(100), 25164150);\n--seed--\n--seed-contents--\n```js\nfunction sumSquareDifference(n) {\nreturn true;\n}\nsumSquareDifference(100);\n```\n--solutions--\n```js\nconst sumSquareDifference = (number)=>{\nlet squareOfSum = Math.pow(sumOfArithmeticSeries(1,1,number),2);\nlet sumOfSquare = sumOfSquareOfNumbers(number);\nreturn squareOfSum - sumOfSquare;\n}\nfunction sumOfArithmeticSeries(a,d,n){\nreturn (n/2)(2a+(n-1)*d);\n}\nfunction sumOfSquareOfNumbers(n){\nreturn (n(n+1)(2*n+1))/6;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1683,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-6-sum-square-difference.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5fca8285512f944b2be391706c39a503",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-59-xor-decryption.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a81000cf542c50feba\ntitle: 'Problem 59: XOR decryption'\nchallengeType: 1\nforumTopicId: 302170\ndashedName: problem-59-xor-decryption\n--description--\nEach character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange) For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107 A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65 For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes The user would keep the encrypted message and the encryption key in different locations, and without both \"halves\", it is impossible to decrypt the message Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message The balance for this method is using a sufficiently long password key for security, but short enough to be memorable Your task has been made easy, as the encryption key consists of three lower case characters Using cipher, an array containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text --hints--\nXORDecryption(cipher) should return a number js\nassert(typeof XORDecryption(cipher) === 'number');\nXORDecryption(cipher) should return 129448 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-59-xor-decryption.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8ed8ce46d77d6cdec12bec27df2b0732",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-59-xor-decryption.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "security, but short enough to be memorable Your task has been made easy, as the encryption key consists of three lower case characters Using cipher, an array containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text --hints-- XORDecryption(cipher) should return a number js assert(typeof XORDecryption(cipher) === 'number'); XORDecryption(cipher) should return 129448 js assertstrictEqual(XORDecryption(cipher), 129448);\n--seed--\n--seed-contents--\n```js\nfunction XORDecryption(arr) {\nreturn true;\n}\n// Only change code above this line\nconst cipher = [\n36,22,80,0,0,4,23,25,19,17,88,4,4,19,21,11,88,22,23,23,29,69,12,24,0,88,25,11,12,2,10,28,5,6,12,25,10,22,80,10,30,80,10,22,21,69,23,22,69,61,5,9,29,2,66,11,80,8,23,3,17,88,19,0,20,21,7,10,17,17,29,20,69,8,17,21,29,2,22,84,80,71,60,21,69,11,5,8,21,25,22,88,3,0,10,25,0,10,5,8,88,2,0,27,25,21,10,31,6,25,2,16,21,82,69,35,63,11,88,4,13,29,80,22,13,29,22,88,31,3,88,3,0,10,25,0,11,80,10,30,80,23,29,19,12,8,2,10,27,17,9,11,45,95,88,57,69,16,17,19,29,80,23,29,19,0,22,4,9,1,80,3,23,5,11,28,92,69,9,5,12,12,21,69,13,30,0,0,0,0,27,4,0,28,28,28,84,80,4,22,80,0,20,21,2,25,30,17,88,21,29,8,2,0,11,3,12,23,30,69,30,31,23,88,4,13,29,80,0,22,4,12,10,21,69,11,5,8,88,31,3,88,4,13,17,3,69,11,21,23,17,21,22,88,65,69,83,80,84,87,68,69,83,80,84,87,73,69,83,80,84,87,65,83,88,91,69,29,4,6,86,92,69,15,24,12,27,24,69,28,21,21,29,30,1,11,80,10,22,80,17,16,21,69,9,5,4,28,2,4,12,5,23,29,80,10,30,80,17,16,21,69,27,25,23,27,28,0,84,80,22,23,80,17,16,17,17,88,25,3,88,4,13,29,80,17,10,5,0,88,3,16,21,80,10,30,80,17,16,25,22,88,3,0,10,25,0,11,80,12,11,80,10,26,4,4,17,30,0,28,92,69,30,2,10,21,80,12,12,80,4,12,80,10,22,19,0,88,4,13,29,80,20,13,17,1,10,17,17,13,2,0,88,31,3,88,4,13,29,80,6,17,2,6,20,21,69,30,31,9,20,31,18,11,94,69,54,17,8,29,28,28,84,80,44,88,24,4,14,21,69,30,31,16,22,20,69,12,24,4,12,80,17,16,21,69,11,5,8,88,31,3,88,4,13,17,3,69,11,21,23,17,21,22,88,25,22,88,17,69,11,25,29,12,24,69,8,17,23,12,80,10,30,80,17,16,21,69,11,1,16,25,2,0,88,31,3,88,4,13,29,80,21,29,2,12,21,21,17,29,2,69,23,22,69,12,24,0,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,67,80,10,10,80,7,1,80,21,13,4,17,17,30,2,88,4,13,29,80,22,13,29,69,23,22,69,12,24,12,11,80,22,29,2,12,29,3,69,29,1,16,25,28,69,12,31,69,11,92,69,17,4,69,16,17,22,88,4,13,29,80,23,25,4,12,23,80,22,9,2,17,80,70,76,88,29,16,20,4,12,8,28,12,29,20,69,26,9,69,11,80,17,23,80,84,88,31,3,88,4,13,29,80,21,29,2,12,21,21,17,29,2,69,12,31,69,12,24,0,88,20,12,25,29,0,12,21,23,86,80,44,88,7,12,20,28,69,11,31,10,22,80,22,16,31,18,88,4,13,25,4,69,12,24,0,88,3,16,21,80,10,30,80,17,16,25,22,88,3,0,10,25,0,11,80,17,23,80,7,29,80,4,8,0,23,23,8,12,21,17,17,29,28,28,88,65,75,78,68,81,65,67,81,72,70,83,64,68,87,74,70,81,75,70,81,67,80,4,22,20,69,30,2,10,21,80,8,13,28,17,17,0,9,1,25,11,31,80,17,16,25,22,88,30,16,21,18,0,10,80,7,1,80,22,17,8,73,88,17,11,28,80,17,16,21,11,88,4,4,19,25,11,31,80,17,16,21,69,11,1,16,25,2,0,88,2,10,23,4,73,88,4,13,29,80,11,13,29,7,29,2,69,75,94,84,76,65,80,65,66,83,77,67,80,64,73,82,65,67,87,75,72,69,17,3,69,17,30,1,29,21,1,88,0,23,23,20,16,27,21,1,84,80,18,16,25,6,16,80,0,0,0,23,29,3,22,29,3,69,12,24,0,88,0,0,10,25,8,29,4,0,10,80,10,30,80,4,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,86,80,35,23,28,9,23,7,12,22,23,69,25,23,4,17,30,69,12,24,0,88,3,4,21,21,69,11,4,0,8,3,69,26,9,69,15,24,12,27,24,69,49,80,13,25,20,69,25,2,23,17,6,0,28,80,4,12,80,17,16,25,22,88,3,16,21,92,69,49,80,13,25,6,0,88,20,12,11,19,10,14,21,23,29,20,69,12,24,4,12,80,17,16,21,69,11,5,8,88,31,3,88,4,13,29,80,22,29,2,12,29,3,69,73,80,78,88,65,74,73,70,69,83,80,84,87,72,84,88,91,69,73,95,87,77,70,69,83,80,84,87,70,87,77,80,78,88,21,17,27,94,69,25,28,22,23,80,1,29,0,0,22,20,22,88,31,11,88,4,13,29,80,20,13,17,1,10,17,17,13,2,0,88,31,3,88,4,13,29,80,6,17,2,6,20,21,75,88,62,4,21,21,9,1,92,69,12,24,0,88,3,16,21,80,10,30,80,17,16,25,22,88,29,16,20,4,12,8,28,12,29,20,69,26,9,69,65,64,69,31,25,19,29,3,69,12,24,0,88,18,12,9,5,4,28,2,4,12,21,69,80,22,10,13,2,17,16,80,21,23,7,0,10,89,69,23,22,69,12,24,0,88,19,12,10,19,16,21,22,0,10,21,11,27,21,69,23,22,69,12,24,0,88,0,0,10,25,8,29,4,0,10,80,10,30,80,4,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,86,80,36,22,20,69,26,9,69,11,25,8,17,28,4,10,80,23,29,17,22,23,30,12,22,23,69,49,80,13,25,6,0,88,28,12,19,21,18,17,3,0,88,18,0,29,30,69,25,18,9,29,80,17,23,80,1,29,4,0,10,29,12,22,21,69,12,24,0,88,3,16,21,3,69,23,22,69,12,24,0,88,3,16,26,3,0,9,5,0,22,4,69,11,21,23,17,21,22,88,25,11,88,7,13,17,19,13,88,4,13,29,80,0,0,0,10,22,21,11,12,3,69,25,2,0,88,21,19,29,30,69,22,5,8,26,21,23,11,94\n];\nXORDecryption(cipher);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-59-xor-decryption.md",
      "source_type": "git_repo"
    },
    "token_count": 3083,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e52abda01b014470102e2f13c4c9341d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-62-cubic-permutations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3aa1000cf542c50febd\ntitle: 'Problem 62: Cubic permutations'\nchallengeType: 1\nforumTopicId: 302174\ndashedName: problem-62-cubic-permutations\n--description--\nThe cube, 41063625 ($345^3$), can be permuted to produce two other cubes: 56623104 ($384^3$) and 66430125 ($405^3$) In fact, 41063625 is the smallest cube which has exactly three permutations of its digits which are also cube Find the smallest cube for which exactly n permutations of its digits are cube --hints--\ncubicPermutations(2) should return a number js\nassert(typeof cubicPermutations(2) === 'number');\ncubicPermutations(2) should return 125 js\nassert strictEqual(cubicPermutations(2), 125);\ncubicPermutations(3) should return 41063625 js\nassert strictEqual(cubicPermutations(3), 41063625);\ncubicPermutations(4) should return 1006012008 js\nassert strictEqual(cubicPermutations(4), 1006012008);\ncubicPermutations(5) should return 127035954683 js\nassert strictEqual(cubicPermutations(5), 127035954683);\n--seed--\n--seed-contents--\n```js\nfunction cubicPermutations(n) {\nreturn true;\n}\ncubicPermutations(2);\n```\n--solutions--\n```js\nfunction cubicPermutations(n) {\nfunction getDigits(num) {\nconst digits = [];\nwhile (num > 0) {\ndigits push(num % 10);\nnum = Math floor(num / 10);\n}\nreturn digits;\n}\nfunction getCube(num) {\nreturn num ** 3;\n}\nconst digitsToCubeCounts = {};\nlet curNum = 1;\nlet digits;\nwhile ( digitsToCubeCounts[digits] || digitsToCubeCounts[digits] count < n) {\nconst cube = getCube(curNum);\ndigits = getDigits(cube) sort() join();\nif ( digitsToCubeCounts[digits]) {\ndigitsToCubeCounts[digits] = {\ncount: 1,\nsmallestCube: cube\n};\n} else {\ndigitsToCubeCounts[digits] count += 1;\n}\ncurNum++;\n}\nreturn digitsToCubeCounts[digits]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-62-cubic-permutations.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dd1486a75a29816a619eff5a3e0596a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-62-cubic-permutations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0) { digits push(num % 10); num = Math floor(num / 10); } return digits; } function getCube(num) { return num ** 3; } const digitsToCubeCounts = {}; let curNum = 1; let digits; while ( digitsToCubeCounts[digits] || digitsToCubeCounts[digits] count < n) { const cube = getCube(curNum); digits = getDigits(cube) sort() join(); if ( digitsToCubeCounts[digits]) { digitsToCubeCounts[digits] = { count: 1, smallestCube: cube }; } else { digitsToCubeCounts[digits] count += 1; } curNum++; } return digitsToCubeCounts[digits]smallestCube;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-62-cubic-permutations.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a9407b80dcf07d13e2eb6d7004e30218",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-63-powerful-digit-counts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ab1000cf542c50febe\ntitle: 'Problem 63: Powerful digit counts'\nchallengeType: 1\nforumTopicId: 302175\ndashedName: problem-63-powerful-digit-counts\n--description--\nThe 5-digit number, 16807 = 75, is also a fifth power Similarly, the 9-digit number, 134217728 = 89, is a ninth power Complete the function so that it returns how many positive integers are of length n and an nth power --hints--\npowerfulDigitCounts(1) should return a number js\nassert(typeof powerfulDigitCounts(1) === 'number');\npowerfulDigitCounts(1) should return 9 js\nassert strictEqual(powerfulDigitCounts(1), 9);\npowerfulDigitCounts(2) should return 6 js\nassert strictEqual(powerfulDigitCounts(2), 6);\npowerfulDigitCounts(3) should return 5 js\nassert strictEqual(powerfulDigitCounts(3), 5);\npowerfulDigitCounts(4) should return 4 js\nassert strictEqual(powerfulDigitCounts(4), 4);\npowerfulDigitCounts(5) should return 3 js\nassert strictEqual(powerfulDigitCounts(5), 3);\npowerfulDigitCounts(6) should return 3 js\nassert strictEqual(powerfulDigitCounts(6), 3);\npowerfulDigitCounts(7) should return 2 js\nassert strictEqual(powerfulDigitCounts(7), 2);\npowerfulDigitCounts(8) should return 2 js\nassert strictEqual(powerfulDigitCounts(8), 2);\npowerfulDigitCounts(10) should return 2 js\nassert strictEqual(powerfulDigitCounts(10), 2);\npowerfulDigitCounts(21) should return 1 js\nassert strictEqual(powerfulDigitCounts(21), 1);\n--seed--\n--seed-contents--\n```js\nfunction powerfulDigitCounts(n) {\nreturn true;\n}\npowerfulDigitCounts(1);\n```\n--solutions--\n```js\nfunction powerfulDigitCounts(n) {\nfunction countDigits(num) {\nlet counter = 0;\nwhile (num > 0) {\nnum = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2139,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-63-powerful-digit-counts.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c1b10a53137ce6581af84b244fe6c595",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-63-powerful-digit-counts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "3 js assert strictEqual(powerfulDigitCounts(5), 3); powerfulDigitCounts(6) should return 3 js assert strictEqual(powerfulDigitCounts(6), 3); powerfulDigitCounts(7) should return 2 js assert strictEqual(powerfulDigitCounts(7), 2); powerfulDigitCounts(8) should return 2 js assert strictEqual(powerfulDigitCounts(8), 2); powerfulDigitCounts(10) should return 2 js assert strictEqual(powerfulDigitCounts(10), 2); powerfulDigitCounts(21) should return 1 js assert strictEqual(powerfulDigitCounts(21), 1); --seed-- --seed-contents-- ```js function powerfulDigitCounts(n) { return true; } powerfulDigitCounts(1); ``` --solutions-- ```js function powerfulDigitCounts(n) { function countDigits(num) { let counter = 0; while (num > 0) { num = Mathfloor(num / 10);\ncounter++;\n}\nreturn counter;\n}\nlet numbersCount = 0;\nlet curNum = 1;\nwhile (curNum < 10) {\nlet power = n;\nif (power === countDigits(curNum ** power)) {\nnumbersCount++;\n}\ncurNum++;\n}\nreturn numbersCount;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2139,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-63-powerful-digit-counts.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "54ca5cd9bbf75f13400cbdb29bbd706d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a91000cf542c50febc\ntitle: 'Problem 61: Cyclical figurate numbers'\nchallengeType: 1\nforumTopicId: 302173\ndashedName: problem-61-cyclical-figurate-numbers\n--description--\nTriangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:\n| Type of Number | Formula                      | Sequence              |\n| -------------- | ---------------------------- | --------------------- |\n| Triangle       | $P_3(n) = \\frac{n(n+1)}{2}$  | 1, 3, 6, 10, 15, |\n| Square         | $P_4(n) = n^2$               | 1, 4, 9, 16, 25, |\n| Pentagonal     | $P_5(n) = \\frac{n(3n−1)}2$   | 1, 5, 12, 22, 35, |\n| Hexagonal      | $P_6(n) = n(2n−1)$           | 1, 6, 15, 28, 45, |\n| Heptagonal     | $P_7(n) = \\frac{n(5n−3)}{2}$ | 1, 7, 18, 34, 55, |\n| Octagonal      | $P_8(n) = n(3n−2)$           | 1, 8, 21, 40, 65, |\nThe ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first) Each polygonal type: triangle ($P_3(127) = 8128$), square ($P_4(91) = 8281$), and pentagonal ($P_5(44) = 2882$), is represented by a different number in the set This is the only set of 4-digit numbers with this property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "964777b09b3affabb5d7c1bc45a86b05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first) Each polygonal type: triangle ($P_3(127) = 8128$), square ($P_4(91) = 8281$), and pentagonal ($P_5(44) = 2882$), is represented by a different number in the set This is the only set of 4-digit numbers with this propertyFind the sum of all numbers in ordered sets of n cyclic 4-digit numbers for which each of the $P_3$ to $P_{n + 2}$ polygonal types, is represented by a different number in the set --hints--\ncyclicalFigurateNums(3) should return a number js\nassert(typeof cyclicalFigurateNums(3) === 'number');\ncyclicalFigurateNums(3) should return 19291 js\nassert strictEqual(cyclicalFigurateNums(3), 19291);\ncyclicalFigurateNums(4) should return 28684 js\nassert strictEqual(cyclicalFigurateNums(4), 28684);\ncyclicalFigurateNums(5) should return 76255 js\nassert strictEqual(cyclicalFigurateNums(5), 76255);\ncyclicalFigurateNums(6) should return 28684 js\nassert strictEqual(cyclicalFigurateNums(6), 28684);\n--seed--\n--seed-contents--\n```js\nfunction cyclicalFigurateNums(n) {\nreturn true;\n}\ncyclicalFigurateNums(3);\n```\n--solutions--\n```js\nfunction cyclicalFigurateNums(n) {\nfunction getChains(chain, n, numberTypes, numsExcludingLastNeededType) {\nif (chain length === n) {\nreturn [chain];\n}\nconst nextNumbers = getNextNumbersInChain(\nchain[chain length - 1],\nnumsExcludingLastNeededType\n);\nconst chains = [];\nfor (let j = 0; j < nextNumbers length; j++) {\nconst nextNumber = nextNumbers[j];\nif (chain",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "8218464dba8b33c0ee72c68d05d0e0a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return 76255 js assert strictEqual(cyclicalFigurateNums(5), 76255); cyclicalFigurateNums(6) should return 28684 js assert strictEqual(cyclicalFigurateNums(6), 28684); --seed-- --seed-contents-- ```js function cyclicalFigurateNums(n) { return true; } cyclicalFigurateNums(3); ``` --solutions-- ```js function cyclicalFigurateNums(n) { function getChains(chain, n, numberTypes, numsExcludingLastNeededType) { if (chain length === n) { return [chain]; } const nextNumbers = getNextNumbersInChain( chain[chain length - 1], numsExcludingLastNeededType ); const chains = []; for (let j = 0; j < nextNumbers length; j++) { const nextNumber = nextNumbers[j]; if (chainindexOf(nextNumber) === -1) {\nconst nextChain = [ chain, nextNumber];\nchains push( getChains(nextChain, n, numberTypes, numsExcludingLastNeededType)\n);\n}\n}\nreturn chains;\n}\nfunction getNextNumbersInChain(num, numsExcludingLastNeededType) {\nconst results = [];\nconst beginning = num % 100;\nnumsExcludingLastNeededType forEach(number => {\nif (Math floor(number / 100) === beginning) {\nresults push(number);\n}\n});\nreturn results;\n}\nfunction fillNumberTypes(n, numberTypes, numsExcludingLastNeededType) {\nconst [, lastTypeCheck, lastTypeArr] = numberTypes[n - 1];\nfor (let i = 1000; i <= 9999; i++) {\nfor (let j = 0; j < n - 1; j++) {\nconst [, typeCheck, typeArr] = numberTypes[j];\nif (typeCheck(i)) {\ntypeArr push(i);\nnumsExcludingLastNeededType add(i);\n}\n}\nif (lastTypeCheck(i)) {\nlastTypeArr push(i);\n}\n}\n}\nfunction isCyclicalChain(chain, n, numberTypes) {\nconst numberTypesInChain = getNumberTypesInChain(chain, numberTypes);\nif ( isChainAllowed(numberTypesInChain, n)) {\nreturn false;\n}\nconst isChainCyclic =\nMath floor(chain[0] / 100) === chain[chain",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "f1975be35e823e7bd1675f15514cdcda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= numberTypes[n - 1]; for (let i = 1000; i <= 9999; i++) { for (let j = 0; j < n - 1; j++) { const [, typeCheck, typeArr] = numberTypes[j]; if (typeCheck(i)) { typeArr push(i); numsExcludingLastNeededType add(i); } } if (lastTypeCheck(i)) { lastTypeArr push(i); } } } function isCyclicalChain(chain, n, numberTypes) { const numberTypesInChain = getNumberTypesInChain(chain, numberTypes); if ( isChainAllowed(numberTypesInChain, n)) { return false; } const isChainCyclic = Math floor(chain[0] / 100) === chain[chainlength - 1] % 100;\nreturn isChainCyclic;\n}\nfunction getNumberTypesInChain(chain, numberTypes) {\nconst numbersInChain = {};\nfor (let i = 0; i < numberTypes length; i++) {\nconst numberTypeName = numberTypes[i][0];\nnumbersInChain[numberTypeName] = [];\n}\nfor (let i = 0; i < chain length; i++) {\nfor (let j = 0; j < n; j++) {\nconst [typeName, , typeNumbers] = numberTypes[j];\nconst typeNumbersInChain = numbersInChain[typeName];\nif (typeNumbers indexOf(chain[i]) == -1) {\ntypeNumbersInChain push(chain[i]);\n}\n}\n}\nreturn numbersInChain;\n}\nfunction isChainAllowed(numberTypesInChain, n) {\nfor (let i = 0; i < n; i++) {\nconst typeName = numberTypes[i][0];\nconst isNumberWithTypeInChain = numberTypesInChain[typeName] length > 0;\nif ( isNumberWithTypeInChain) {\nreturn false;\n}\nfor (let j = i + 1; j < n; j++) {\nconst otherTypeName = numberTypes[j][0];\nif (\nisNumberRepeatedAsOnlyNumberInTwoTypes(\nnumberTypesInChain[typeName],\nnumberTypesInChain[otherTypeName]\n)\n) {\nreturn false;\n}\n}\n}\nreturn true;\n}\nfunction isNumberRepeatedAsOnlyNumberInTwoTypes(\ntypeNumbers,\notherTypeNumbers\n) {\nreturn (\ntypeNumbers length === 1 &&\notherTypeNumbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "4c4fd7e90a5822c1156339c916460b43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "n) { for (let i = 0; i < n; i++) { const typeName = numberTypes[i][0]; const isNumberWithTypeInChain = numberTypesInChain[typeName] length > 0; if ( isNumberWithTypeInChain) { return false; } for (let j = i + 1; j < n; j++) { const otherTypeName = numberTypes[j][0]; if ( isNumberRepeatedAsOnlyNumberInTwoTypes( numberTypesInChain[typeName], numberTypesInChain[otherTypeName] ) ) { return false; } } } return true; } function isNumberRepeatedAsOnlyNumberInTwoTypes( typeNumbers, otherTypeNumbers ) { return ( typeNumbers length === 1 && otherTypeNumberslength === 1 &&\ntypeNumbers[0] === otherTypeNumbers[0]\n);\n}\nfunction isTriangle(num) {\nreturn ((8 * num + 1) ** 0 5 - 1) % 2 === 0;\n}\nfunction isSquare(num) {\nreturn num ** 0 5 === parseInt(num ** 0 5, 10);\n}\nfunction isPentagonal(num) {\nreturn ((24 * num + 1) ** 0 5 + 1) % 6 === 0;\n}\nfunction isHexagonal(num) {\nreturn ((8 * num + 1) ** 0 5 + 1) % 4 === 0;\n}\nfunction isHeptagonal(num) {\nreturn ((40 * num + 9) ** 0 5 + 3) % 10 === 0;\n}\nfunction isOctagonal(num) {\nreturn ((3 * num + 1) ** 0 5 + 1) % 3 === 0;\n}\nconst numberTypes = [\n['triangle', isTriangle, []],\n['square', isSquare, []],\n['pentagonal', isPentagonal, []],\n['hexagonal', isHexagonal, []],\n['heptagonal', isHeptagonal, []],\n['octagonal', isOctagonal, []]\n];\nconst numsExcludingLastNeededType = new Set();\nfillNumberTypes(n, numberTypes, numsExcludingLastNeededType);\nconst nNumberChains = [];\nconst [, , lastType] = numberTypes[n - 1];\nfor (let i = 0; i < lastType",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "9fbf26070b12653e24027d6fc4898b41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "3) % 10 === 0; } function isOctagonal(num) { return ((3 * num + 1) ** 0 5 + 1) % 3 === 0; } const numberTypes = [ ['triangle', isTriangle, []], ['square', isSquare, []], ['pentagonal', isPentagonal, []], ['hexagonal', isHexagonal, []], ['heptagonal', isHeptagonal, []], ['octagonal', isOctagonal, []] ]; const numsExcludingLastNeededType = new Set(); fillNumberTypes(n, numberTypes, numsExcludingLastNeededType); const nNumberChains = []; const [, , lastType] = numberTypes[n - 1]; for (let i = 0; i < lastTypelength; i++) {\nconst startOfChain = lastType[i];\nnNumberChains push( getChains([startOfChain], n, numberTypes, numsExcludingLastNeededType)\n);\n}\nconst cyclicalChains = nNumberChains filter(chain =>\nisCyclicalChain(chain, n, numberTypes)\n);\nlet sum = 0;\nfor (let i = 0; i < cyclicalChains length; i++) {\nfor (let j = 0; j < cyclicalChains[0] length; j++) {\nsum += cyclicalChains[i][j];\n}\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "6d3c9378bf9ad94a4ed534eb45cf9fd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ad1000cf542c50fec0\ntitle: 'Problem 65: Convergents of e'\nchallengeType: 1\nforumTopicId: 302177\ndashedName: problem-65-convergents-of-e\n--description--\nThe square root of 2 can be written as an infinite continued fraction $\\sqrt{2} = 1 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2 + }}}}$\nThe infinite continued fraction can be written, $\\sqrt{2} = [1; (2)]$ indicates that 2 repeats ad infinitum In a similar way, $\\sqrt{23} = [4; (1, 3, 1, 8)]$ It turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations Let us consider the convergents for $\\sqrt{2}$ $1 + \\dfrac{1}{2} = \\dfrac{3}{2}\\\\ 1 + \\dfrac{1}{2 + \\dfrac{1}{2}} = \\dfrac{7}{5}\\\\ 1 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2}}} = \\dfrac{17}{12}\\\\ 1 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2}}}} = \\dfrac{41}{29}$\nHence the sequence of the first ten convergents for $\\sqrt{2}$ are:\n$1, \\dfrac{3}{2}, \\dfrac{7}{5}, \\dfrac{17}{12}, \\dfrac{41}{29}, \\dfrac{99}{70}, \\dfrac{239}{169}, \\dfrac{577}{408}, \\dfrac{1393}{985}, \\dfrac{3363}{2378}, $\nWhat is most surprising is that the important mathematical constant, $e = [2; 1, 2, 1, 1, 4, 1, 1, 6, 1, , 1, 2k, 1, ]$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "bf3bf70067de79cb9ef7c51556a1441d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1 + \\dfrac{1}{2 + \\dfrac{1}{2}} = \\dfrac{7}{5}\\\\ 1 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2}}} = \\dfrac{17}{12}\\\\ 1 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2}}}} = \\dfrac{41}{29}$ Hence the sequence of the first ten convergents for $\\sqrt{2}$ are: $1, \\dfrac{3}{2}, \\dfrac{7}{5}, \\dfrac{17}{12}, \\dfrac{41}{29}, \\dfrac{99}{70}, \\dfrac{239}{169}, \\dfrac{577}{408}, \\dfrac{1393}{985}, \\dfrac{3363}{2378}, $ What is most surprising is that the important mathematical constant, $e = [2; 1, 2, 1, 1, 4, 1, 1, 6, 1, , 1, 2k, 1, ]$The first ten terms in the sequence of convergents for e are:\n$2, 3, \\dfrac{8}{3}, \\dfrac{11}{4}, \\dfrac{19}{7}, \\dfrac{87}{32}, \\dfrac{106}{39}, \\dfrac{193}{71}, \\dfrac{1264}{465}, \\dfrac{1457}{536}, $\nThe sum of digits in the numerator of the 10th convergent is $1 + 4 + 5 + 7 = 17$ Find the sum of digits in the numerator of the nth convergent of the continued fraction for e --hints--\nconvergentsOfE(10) should return a number js\nassert(typeof convergentsOfE(10) === 'number');\nconvergentsOfE(10) should return 17 js\nassert strictEqual(convergentsOfE(10), 17);\nconvergentsOfE(30) should return 53 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0a954b4a7a140e63acc36c58cdf05ac3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are: $2, 3, \\dfrac{8}{3}, \\dfrac{11}{4}, \\dfrac{19}{7}, \\dfrac{87}{32}, \\dfrac{106}{39}, \\dfrac{193}{71}, \\dfrac{1264}{465}, \\dfrac{1457}{536}, $ The sum of digits in the numerator of the 10th convergent is $1 + 4 + 5 + 7 = 17$ Find the sum of digits in the numerator of the nth convergent of the continued fraction for e --hints-- convergentsOfE(10) should return a number js assert(typeof convergentsOfE(10) === 'number'); convergentsOfE(10) should return 17 js assert strictEqual(convergentsOfE(10), 17); convergentsOfE(30) should return 53 js assertstrictEqual(convergentsOfE(30), 53);\nconvergentsOfE(50) should return 91 js\nassert strictEqual(convergentsOfE(50), 91);\nconvergentsOfE(70) should return 169 js\nassert strictEqual(convergentsOfE(70), 169);\nconvergentsOfE(100) should return 272 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "36e379f30536e9134545d2bef3dc23a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is $1 + 4 + 5 + 7 = 17$ Find the sum of digits in the numerator of the nth convergent of the continued fraction for e --hints-- convergentsOfE(10) should return a number js assert(typeof convergentsOfE(10) === 'number'); convergentsOfE(10) should return 17 js assert strictEqual(convergentsOfE(10), 17); convergentsOfE(30) should return 53 js assertstrictEqual(convergentsOfE(30), 53); convergentsOfE(50) should return 91 js assert strictEqual(convergentsOfE(50), 91); convergentsOfE(70) should return 169 js assert strictEqual(convergentsOfE(70), 169); convergentsOfE(100) should return 272 js assertstrictEqual(convergentsOfE(100), 272);\n--seed--\n--seed-contents--\n```js\nfunction convergentsOfE(n) {\nreturn true;\n}\nconvergentsOfE(10);\n```\n--solutions--\n```js\nfunction convergentsOfE(n) {\nfunction sumDigits(num) {\nlet sum = 0n;\nwhile (num > 0) {\nsum += num % 10n;\nnum = num / 10n;\n}\nreturn parseInt(sum);\n}\n// BigInt is needed for high convergents\nlet convergents = [\n[2n, 1n],\n[3n, 1n]\n];\nconst multipliers = [1n, 1n, 2n];\nfor (let i = 2; i < n; i++) {\nconst [secondLastConvergent, lastConvergent] = convergents;\nconst [secondLastNumerator, secondLastDenominator] = secondLastConvergent;\nconst [lastNumerator, lastDenominator] = lastConvergent;\nconst curMultiplier = multipliers[i % 3];\nconst numerator = secondLastNumerator + curMultiplier * lastNumerator;\nconst denominator = secondLastDenominator + curMultiplier * lastDenominator;\nconvergents = [lastConvergent, [numerator, denominator]]\nif (i % 3 === 2) {\nmultipliers[2] += 2n;\n}\n}\nreturn sumDigits(convergents[1][0]);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e5246b013c75dc13a8dcd86cbc80f5cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3a21000cf542c50feb5\ntitle: 'Problem 54: Poker hands'\nchallengeType: 1\nforumTopicId: 302165\ndashedName: problem-54-poker-hands\n--description--\nIn the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:\nHigh Card: Highest value card One Pair: Two cards of the same value Two Pairs: Two different pairs Three of a Kind: Three cards of the same value Straight: All cards are consecutive values Flush: All cards of the same suit Full House: Three of a kind and a pair Four of a Kind: Four cards of the same value Straight Flush: All cards are consecutive values of same suit Royal Flush: Ten, Jack, Queen, King, Ace, in same suit The cards are valued in the order: 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace If two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below) But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so on",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "20118527521dfd81e24816ecb79669d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "King, Ace If two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below) But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so onConsider the following five hands dealt to two players:\n| Hand               | Player 1                                                  | Player 2                                                   | Winner   |\n| ------------------ | --------------------------------------------------------- | ---------------------------------------------------------- | -------- |\n| 1 | 5H 5C 6S 7S KD  Pair of Fives                         | 2C 3S 8S 8D TD  Pair of Eights                         | Player 2 |\n| 2 | 5D 8C 9S JS AC  Highest card Ace                      | 2C 5C 7D 8S QH  Highest card Queen                     | Player 1 |\n| 3 | 2D 9C AS AH AC  Three Aces                            | 3D 6D 7D TD QD  Flush with Diamonds                    | Player 2 |\n| 4 | 4D 6S 9H QH QC  Pair of Queens  Highest card Nine | 3D 6D 7H QD QS  Pair of Queens  Highest card Seven | Player 1 |\n| 5 | 2H 2D 4C 4D 4S  Full House  with Three Fours      | 3C 3D 3S 9S 9D  Full House  with Three Threes      | Player 1 |\nThe global array (handsArr) passed to the function, contains one-thousand random hands dealt to two players Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner How many hands does Player 1 win --hints--\npokerHands(testArr) should return a number",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "420d501d7afae5df1fddc7bc15383f33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "dealt to two players Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner How many hands does Player 1 win --hints-- pokerHands(testArr) should return a numberjs\nassert(typeof pokerHands(testArr) === 'number');\npokerHands(testArr) should return 2 js\nassert strictEqual(pokerHands(testArr), 2);\npokerHands(handsArr) should return 376 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b2398832b9f29537eddbd942deacba28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "first five are Player 1's cards and the last five are Player 2's cards You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner How many hands does Player 1 win --hints-- pokerHands(testArr) should return a numberjs assert(typeof pokerHands(testArr) === 'number'); pokerHands(testArr) should return 2 js assert strictEqual(pokerHands(testArr), 2); pokerHands(handsArr) should return 376 js assertstrictEqual(pokerHands(handsArr), 376);\n--seed--\n--before-user-code--\njs\nconst handsArr = [\n'8C TS KC 9H 4S 7D 2S 5D 3S AC',\n'5C AD 5D AC 9C 7C 5H 8D TD KS',\n'3H 7H 6S KC JS QH TD JC 2D 8S',\n'TH 8H 5C QS TC 9H 4D JC KS JS',\n'7C 5H KC QH JD AS KH 4C AD 4S',\n'5H KS 9C 7D 9H 8D 3S 5D 5C AH',\n'6H 4H 5C 3H 2H 3S QH 5S 6S AS',\n'TD 8C 4H 7C TC KC 4C 3H 7S KS',\n'7C 9C 6D KD 3H 4C QS QC AC KH',\n'JC 6S 5H 2H 2D KD 9D 7C AS JS',\n'AD QH TH 9D 8H TS 6D 3S AS AC',\n'2H 4S 5C 5S TC KC JD 6C TS 3C',\n'QD AS 6H JS 2C 3D 9H KC 4H 8S',\n'KD 8S 9S 7C 2S 3S 6D 6S 4H KC',\n'3C 8C 2D 7D 4D 9S 4S QH 4H JD',\n'8C KC 7S TC 2D TS 8H QD AC 5C',\n'3D KH QD 6C 6S AD AS 8H 2H QS',\n'6S 8D 4C 8S 6C QH TC 6D 7D 9D',\n'2S 8D 8C 4C TS 9S 9D 9C AC 3D',\n'3C QS 2S 4H JH 3D 2D TD 8S 9H',\n'5H QS 8S 6D 3C 8C JD AS 7H 7D',\n'6H TD 9D AS JH 6C QC 9S KD JC',\n'AH 8S QS 4D TH AC TS 3C 3D 5C',\n'5S 4D JS 3D 8H 6C TS 3S AD 8C',\n'6D 7C 5D 5H 3S 5C JC 2H 5S 3D',\n'5H 6H 2S KS 3D 5D JD 7H JS 8H',\n'KH 4H AS JS QS QC TC 6D 7C KS',\n'3D QS TS 2H JS 4D AS 9S JC KD',\n'QD 5H 4D 5D KH 7H 3D JS KD 4H',\n'2C 9H 6H 5C 9D 6C JC 2D TH 9S',\n'7D 6D AS QD JH 4D JS 7C QS 5C',\n'3H KH QD AD 8C 8H 3S TH 9D 5S',\n'AH 9S 4D 9D 8S 4H JS 3C TC 8D',\n'2C KS 5H QD 3S TS 9H AH AD 8S',\n'5C 7H 5D KD 9H 4D 3D 2D KS AD',\n'KS KC 9S 6D 2C QH 9D 9H TS TC',\n'9C 6H 5D QH 4D AD 6D QC JS KH',\n'9S 3H 9D JD 5C 4D 9H AS TC QH',\n'2C 6D JC 9C 3C AD 9S KH 9D 7D',\n'KC 9C 7C JC JS KD 3H AS 3C 7D',\n'QD KH QS 2C 3S 8S 8H 9H 9C JC',\n'QH 8D 3C KC 4C 4H 6D AD 9H 9D',\n'3S KS QS 7H KH 7D 5H 5D JD AD',\n'2H 2C 6H TH TC 7D 8D 4H 8C AS',\n'4S 2H AC QC 3S 6D TH 4D 4C KH',\n'4D TC KS AS 7C 3C 6D 2D 9H 6C',\n'8C TD 5D QS 2C 7H 4C 9C 3H 9H',\n'5H JH TS 7S TD 6H AD QD 8H 8S',\n'5S AD 9C 8C 7C 8D 5H 9D 8S 2S',\n'4H KH KS 9S 2S KC 5S AD 4S 7D',\n'QS 9C QD 6H JS 5D AC 8D 2S AS',\n'KH AC JC 3S 9D 9S 3C 9C 5S JS',\n'AD 3C 3D KS 3S 5C 9C 8C TS 4S',\n'JH 8D 5D 6H KD QS QD 3D 6C KC',\n'8S JD 6C 3S 8C TC QC 3C QH JS',\n'KC JC 8H 2S 9H 9C JH 8S 8C 9S',\n'8S 2H QH 4D QC 9D KC AS TH 3C',\n'8S 6H TH 7C 2H 6S 3C 3H AS 7S',\n'QH 5S JS 4H 5H TS 8H AH AC JC',\n'9D 8H 2S 4S TC JC 3C 7H 3H 5C',\n'3D AD 3C 3S 4C QC AS 5D TH 8C',\n'6S 9D 4C JS KH AH TS JD 8H AD',\n'4C 6S 9D 7S AC 4D 3D 3S TC JD',\n'AD 7H 6H 4H JH KC TD TS 7D 6S',\n'8H JH TC 3S 8D 8C 9S 2C 5C 4D',\n'2C 9D KC QH TH QS JC 9C 4H TS',\n'QS 3C QD 8H KH 4H 8D TD 8S AC',\n'7C 3C TH 5S 8H 8C 9C JD TC KD',\n'QC TC JD TS 8C 3H 6H KD 7C TD',\n'JH QS KS 9C 6D 6S AS 9H KH 6H',\n'2H 4D AH 2D JH 6H TD 5D 4H JD',\n'KD 8C 9S JH QD JS 2C QS 5C 7C',\n'4S TC 7H 8D 2S 6H 7S 9C 7C KC',\n'8C 5D 7H 4S TD QC 8S JS 4H KS',\n'AD 8S JH 6D TD KD 7C 6C 2D 7D',\n'JC 6H 6S JS 4H QH 9H AH 4C 3C',\n'6H 5H AS 7C 7S 3D KH KC 5D 5C',\n'JC 3D TD AS 4D 6D 6S QH JD KS',\n'8C 7S 8S QH 2S JD 5C 7H AH QD',\n'8S 3C 6H 6C 2C 8D TD 7D 4C 4D',\n'5D QH KH 7C 2S 7H JS 6D QC QD',\n'AD 6C 6S 7D TH 6H 2H 8H KH 4H',\n'KS JS KD 5D 2D KH 7D 9C 8C 3D',\n'9C 6D QD 3C KS 3S 7S AH JD 2D',\n'AH QH AS JC 8S 8H 4C KC TH 7D',\n'JC 5H TD 7C 5D KD 4C AD 8H JS',\n'KC 2H AC AH 7D JH KH 5D 7S 6D',\n'9S 5S 9C 6H 8S TD JD 9H 6C AC',\n'7D 8S 6D TS KD 7H AC 5S 7C 5D',\n'AH QC JC 4C TC 8C 2H TS 2C 7D',\n'KD KC 6S 3D 7D 2S 8S 3H 5S 5C',\n'8S 5D 8H 4C 6H KC 3H 7C 5S KD',\n'JH 8C 3D 3C 6C KC TD 7H 7C 4C',\n'JC KC 6H TS QS TD KS 8H 8C 9S',\n'6C 5S 9C QH 7D AH KS KC 9S 2C',\n'4D 4S 8H TD 9C 3S 7D 9D AS TH',\n'6S 7D 3C 6H 5D KD 2C 5C 9D 9C',\n'2H KC 3D AD 3H QD QS 8D JC 4S',\n'8C 3H 9C 7C AD 5D JC 9D JS AS',\n'5D 9H 5C 7H 6S 6C QC JC QD 9S',\n'JC QS JH 2C 6S 9C QC 3D 4S TC',\n'4H 5S 8D 3D 4D 2S KC 2H JS 2C',\n'TD 3S TH KD 4D 7H JH JS KS AC',\n'7S 8C 9S 2D 8S 7D 5C AD 9D AS',\n'8C 7H 2S 6C TH 3H 4C 3S 8H AC',\n'KD 5H JC 8H JD 2D 4H TD JH 5C',\n'3D AS QH KS 7H JD 8S 5S 6D 5H',\n'9S 6S TC QS JC 5C 5D 9C TH 8C',\n'5H 3S JH 9H 2S 2C 6S 7S AS KS',\n'8C QD JC QS TC QC 4H AC KH 6C',\n'TC 5H 7D JH 4H 2H 8D JC KS 4D',\n'5S 9C KH KD 9H 5C TS 3D 7D 2D',\n'5H AS TC 4D 8C 2C TS 9D 3H 8D',\n'6H 8D 2D 9H JD 6C 4S 5H 5S 6D',\n'AD 9C JC 7D 6H 9S 6D JS 9H 3C',\n'AD JH TC QS 4C 5D 9S 7C 9C AH',\n'KD 6H 2H TH 8S QD KS 9D 9H AS',\n'4H 8H 8D 5H 6C AH 5S AS AD 8S',\n'QS 5D 4S 2H TD KS 5H AC 3H JC',\n'9C 7D QD KD AC 6D 5H QH 6H 5S',\n'KC AH QH 2H 7D QS 3H KS 7S JD',\n'6C 8S 3H 6D KS QD 5D 5C 8H TC',\n'9H 4D 4S 6S 9D KH QC 4H 6C JD',\n'TD 2D QH 4S 6H JH KD 3C QD 8C',\n'4S 6H 7C QD 9D AS AH 6S AD 3C',\n'2C KC TH 6H 8D AH 5C 6D 8S 5D',\n'TD TS 7C AD JC QD 9H 3C KC 7H',\n'5D 4D 5S 8H 4H 7D 3H JD KD 2D',\n'JH TD 6H QS 4S KD 5C 8S 7D 8H',\n'AC 3D AS 8C TD 7H KH 5D 6C JD',\n'9D KS 7C 6D QH TC JD KD AS KC',\n'JH 8S 5S 7S 7D AS 2D 3D AD 2H',\n'2H 5D AS 3C QD KC 6H 9H 9S 2C',\n'9D 5D TH 4C JH 3H 8D TC 8H 9H',\n'6H KD 2C TD 2H 6C 9D 2D JS 8C',\n'KD 7S 3C 7C AS QH TS AD 8C 2S',\n'QS 8H 6C JS 4C 9S QC AD TD TS',\n'2H 7C TS TC 8C 3C 9H 2D 6D JC',\n'TC 2H 8D JH KS 6D 3H TD TH 8H',\n'9D TD 9H QC 5D 6C 8H 8C KC TS',\n'2H 8C 3D AH 4D TH TC 7D 8H KC',\n'TS 5C 2D 8C 6S KH AH 5H 6H KC',\n'5S 5D AH TC 4C JD 8D 6H 8C 6C',\n'KC QD 3D 8H 2D JC 9H 4H AD 2S',\n'TD 6S 7D JS KD 4H QS 2S 3S 8C',\n'4C 9H JH TS 3S 4H QC 5S 9S 9C',\n'2C KD 9H JS 9S 3H JC TS 5D AC',\n'AS 2H 5D AD 5H JC 7S TD JS 4C',\n'2D 4S 8H 3D 7D 2C AD KD 9C TS',\n'7H QD JH 5H JS AC 3D TH 4C 8H',\n'6D KH KC QD 5C AD 7C 2D 4H AC',\n'3D 9D TC 8S QD 2C JC 4H JD AH',\n'6C TD 5S TC 8S AH 2C 5D AS AC',\n'TH 7S 3D AS 6C 4C 7H 7D 4H AH',\n'5C 2H KS 6H 7S 4H 5H 3D 3C 7H',\n'3C 9S AC 7S QH 2H 3D 6S 3S 3H',\n'2D 3H AS 2C 6H TC JS 6S 9C 6C',\n'QH KD QD 6D AC 6H KH 2C TS 8C',\n'8H 7D 3S 9H 5D 3H 4S QC 9S 5H',\n'2D 9D 7H 6H 3C 8S 5H 4D 3S 4S',\n'KD 9S 4S TC 7S QC 3S 8S 2H 7H',\n'TC 3D 8C 3H 6C 2H 6H KS KD 4D',\n'KC 3D 9S 3H JS 4S 8H 2D 6C 8S',\n'6H QS 6C TC QD 9H 7D 7C 5H 4D',\n'TD 9D 8D 6S 6C TC 5D TS JS 8H',\n'4H KC JD 9H TC 2C 6S 5H 8H AS',\n'JS 9C 5C 6S 9D JD 8H KC 4C 6D',\n'4D 8D 8S 6C 7C 6H 7H 8H 5C KC',\n'TC 3D JC 6D KS 9S 6H 7S 9C 2C',\n'6C 3S KD 5H TS 7D 9H 9S 6H KH',\n'3D QD 4C 6H TS AC 3S 5C 2H KD',\n'4C AS JS 9S 7C TS 7H 9H JC KS',\n'4H 8C JD 3H 6H AD 9S 4S 5S KS',\n'4C 2C 7D 3D AS 9C 2S QS KC 6C',\n'8S 5H 3D 2S AC 9D 6S 3S 4D TD',\n'QD TH 7S TS 3D AC 7H 6C 5D QC',\n'TC QD AD 9C QS 5C 8D KD 3D 3C',\n'9D 8H AS 3S 7C 8S JD 2D 8D KC',\n'4C TH AC QH JS 8D 7D 7S 9C KH',\n'9D 8D 4C JH 2C 2S QD KD TS 4H',\n'4D 6D 5D 2D JH 3S 8S 3H TC KH',\n'AD 4D 2C QS 8C KD JH JD AH 5C',\n'5C 6C 5H 2H JH 4H KS 7C TC 3H',\n'3C 4C QC 5D JH 9C QD KH 8D TC',\n'3H 9C JS 7H QH AS 7C 9H 5H JC',\n'2D 5S QD 4S 3C KC 6S 6C 5C 4C',\n'5D KH 2D TS 8S 9C AS 9S 7C 4C',\n'7C AH 8C 8D 5S KD QH QS JH 2C',\n'8C 9D AH 2H AC QC 5S 8H 7H 2C',\n'QD 9H 5S QS QC 9C 5H JC TH 4H',\n'6C 6S 3H 5H 3S 6H KS 8D AC 7S',\n'AC QH 7H 8C 4S KC 6C 3D 3S TC',\n'9D 3D JS TH AC 5H 3H 8S 3S TC',\n'QD KH JS KS 9S QC 8D AH 3C AC',\n'5H 6C KH 3S 9S JH 2D QD AS 8C',\n'6C 4D 7S 7H 5S JC 6S 9H 4H JH',\n'AH 5S 6H 9S AD 3S TH 2H 9D 8C',\n'4C 8D 9H 7C QC AD 4S 9C KC 5S',\n'9D 6H 4D TC 4C JH 2S 5D 3S AS',\n'2H 6C 7C KH 5C AD QS TH JD 8S',\n'3S 4S 7S AH AS KC JS 2S AD TH',\n'JS KC 2S 7D 8C 5C 9C TS 5H 9D',\n'7S 9S 4D TD JH JS KH 6H 5D 2C',\n'JD JS JC TH 2D 3D QD 8C AC 5H',\n'7S KH 5S 9D 5D TD 4S 6H 3C 2D',\n'4S 5D AC 8D 4D 7C AD AS AH 9C',\n'6S TH TS KS 2C QC AH AS 3C 4S',\n'2H 8C 3S JC 5C 7C 3H 3C KH JH',\n'7S 3H JC 5S 6H 4C 2S 4D KC 7H',\n'4D 7C 4H 9S 8S 6S AD TC 6C JC',\n'KH QS 3S TC 4C 8H 8S AC 3C TS',\n'QD QS TH 3C TS 7H 7D AH TD JC',\n'TD JD QC 4D 9S 7S TS AD 7D AC',\n'AH 7H 4S 6D 7C 2H 9D KS JC TD',\n'7C AH JD 4H 6D QS TS 2H 2C 5C',\n'TC KC 8C 9S 4C JS 3C JC 6S AH',\n'AS 7D QC 3D 5S JC JD 9D TD KH',\n'TH 3C 2S 6H AH AC 5H 5C 7S 8H',\n'QC 2D AC QD 2S 3S JD QS 6S 8H',\n'KC 4H 3C 9D JS 6H 3S 8S AS 8C',\n'7H KC 7D JD 2H JC QH 5S 3H QS',\n'9H TD 3S 8H 7S AC 5C 6C AH 7C',\n'8D 9H AH JD TD QS 7D 3S 9C 8S',\n'AH QH 3C JD KC 4S 5S 5D TD KS',\n'9H 7H 6S JH TH 4C 7C AD 5C 2D',\n'7C KD 5S TC 9D 6S 6C 5D 2S TH',\n'KC 9H 8D 5H 7H 4H QC 3D 7C AS',\n'6S 8S QC TD 4S 5C TH QS QD 2S',\n'8S 5H TH QC 9H 6S KC 7D 7C 5C',\n'7H KD AH 4D KH 5C 4S 2D KC QH',\n'6S 2C TD JC AS 4D 6C 8C 4H 5S',\n'JC TC JD 5S 6S 8D AS 9D AD 3S',\n'6D 6H 5D 5S TC 3D 7D QS 9D QD',\n'4S 6C 8S 3S 7S AD KS 2D 7D 7C',\n'KC QH JC AC QD 5D 8D QS 7H 7D',\n'JS AH 8S 5H 3D TD 3H 4S 6C JH',\n'4S QS 7D AS 9H JS KS 6D TC 5C',\n'2D 5C 6H TC 4D QH 3D 9H 8S 6C',\n'6D 7H TC TH 5S JD 5C 9C KS KD',\n'8D TD QH 6S 4S 6C 8S KC 5C TC',\n'5S 3D KS AC 4S 7D QD 4C TH 2S',\n'TS 8H 9S 6S 7S QH 3C AH 7H 8C',\n'4C 8C TS JS QC 3D 7D 5D 7S JH',\n'8S 7S 9D QC AC 7C 6D 2H JH KC',\n'JS KD 3C 6S 4S 7C AH QC KS 5H',\n'KS 6S 4H JD QS TC 8H KC 6H AS',\n'KH 7C TC 6S TD JC 5C 7D AH 3S',\n'3H 4C 4H TC TH 6S 7H 6D 9C QH',\n'7D 5H 4S 8C JS 4D 3D 8S QH KC',\n'3H 6S AD 7H 3S QC 8S 4S 7S JS',\n'3S JD KH TH 6H QS 9C 6C 2D QD',\n'4S QH 4D 5H KC 7D 6D 8D TH 5S',\n'TD AD 6S 7H KD KH 9H 5S KC JC',\n'3H QC AS TS 4S QD KS 9C 7S KC',\n'TS 6S QC 6C TH TC 9D 5C 5D KD',\n'JS 3S 4H KD 4C QD 6D 9S JC 9D',\n'8S JS 6D 4H JH 6H 6S 6C KS KH',\n'AC 7D 5D TC 9S KH 6S QD 6H AS',\n'AS 7H 6D QH 8D TH 2S KH 5C 5H',\n'4C 7C 3D QC TC 4S KH 8C 2D JS',\n'6H 5D 7S 5H 9C 9H JH 8S TH 7H',\n'AS JS 2S QD KH 8H 4S AC 8D 8S',\n'3H 4C TD KD 8C JC 5C QS 2D JD',\n'TS 7D 5D 6C 2C QS 2H 3C AH KS',\n'4S 7C 9C 7D JH 6C 5C 8H 9D QD',\n'2S TD 7S 6D 9C 9S QS KH QH 5C',\n'JC 6S 9C QH JH 8D 7S JS KH 2H',\n'8D 5H TH KC 4D 4S 3S 6S 3D QS',\n'2D JD 4C TD 7C 6D TH 7S JC AH',\n'QS 7S 4C TH 9D TS AD 4D 3H 6H',\n'2D 3H 7D JD 3D AS 2S 9C QC 8S',\n'4H 9H 9C 2C 7S JH KD 5C 5D 6H',\n'TC 9H 8H JC 3C 9S 8D KS AD KC',\n'TS 5H JD QS QH QC 8D 5D KH AH',\n'5D AS 8S 6S 4C AH QC QD TH 7H',\n'3H 4H 7D 6S 4S 9H AS 8H JS 9D',\n'JD 8C 2C 9D 7D 5H 5S 9S JC KD',\n'KD 9C 4S QD AH 7C AD 9D AC TD',\n'6S 4H 4S 9C 8D KS TC 9D JH 7C',\n'5S JC 5H 4S QH AC 2C JS 2S 9S',\n'8C 5H AS QD AD 5C 7D 8S QC TD',\n'JC 4C 8D 5C KH QS 4D 6H 2H 2C',\n'TH 4S 2D KC 3H QD AC 7H AD 9D',\n'KH QD AS 8H TH KC 8D 7S QH 8C',\n'JC 6C 7D 8C KH AD QS 2H 6S 2D',\n'JC KH 2D 7D JS QC 5H 4C 5D AD',\n'TS 3S AD 4S TD 2D TH 6S 9H JH',\n'9H 2D QS 2C 4S 3D KH AS AC 9D',\n'KH 6S 8H 4S KD 7D 9D TS QD QC',\n'JH 5H AH KS AS AD JC QC 5S KH',\n'5D 7D 6D KS KD 3D 7C 4D JD 3S',\n'AC JS 8D 5H 9C 3H 4H 4D TS 2C',\n'6H KS KH 9D 7C 2S 6S 8S 2H 3D',\n'6H AC JS 7S 3S TD 8H 3H 4H TH',\n'9H TC QC KC 5C KS 6H 4H AC 8S',\n'TC 7D QH 4S JC TS 6D 6C AC KH',\n'QH 7D 7C JH QS QD TH 3H 5D KS',\n'3D 5S 8D JS 4C 2C KS 7H 9C 4H',\n'5H 8S 4H TD 2C 3S QD QC 3H KC',\n'QC JS KD 9C AD 5S 9D 7D 7H TS',\n'8C JC KH 7C 7S 6C TS 2C QD TH',\n'5S 9D TH 3C 7S QH 8S 9C 2H 5H',\n'5D 9H 6H 2S JS KH 3H 7C 2H 5S',\n'JD 5D 5S 2C TC 2S 6S 6C 3C 8S',\n'4D KH 8H 4H 2D KS 3H 5C 2S 9H',\n'3S 2D TD 7H 8S 6H JD KC 9C 8D',\n'6S QD JH 7C 9H 5H 8S 8H TH TD',\n'QS 7S TD 7D TS JC KD 7C 3C 2C',\n'3C JD 8S 4H 2D 2S TD AS 4D AC',\n'AH KS 6C 4C 4S 7D 8C 9H 6H AS',\n'5S 3C 9S 2C QS KD 4D 4S AC 5D',\n'2D TS 2C JS KH QH 5D 8C AS KC',\n'KD 3H 6C TH 8S 7S KH 6H 9S AC',\n'6H 7S 6C QS AH 2S 2H 4H 5D 5H',\n'5H JC QD 2C 2S JD AS QC 6S 7D',\n'6C TC AS KD 8H 9D 2C 7D JH 9S',\n'2H 4C 6C AH 8S TD 3H TH 7C TS',\n'KD 4S TS 6C QH 8D 9D 9C AH 7D',\n'6D JS 5C QD QC 9C 5D 8C 2H KD',\n'3C QH JH AD 6S AH KC 8S 6D 6H',\n'3D 7C 4C 7S 5S 3S 6S 5H JC 3C',\n'QH 7C 5H 3C 3S 8C TS 4C KD 9C',\n'QD 3S 7S 5H 7H QH JC 7C 8C KD',\n'3C KD KH 2S 4C TS AC 6S 2C 7C',\n'2C KH 3C 4C 6H 4D 5H 5S 7S QD',\n'4D 7C 8S QD TS 9D KS 6H KD 3C',\n'QS 4D TS 7S 4C 3H QD 8D 9S TC',\n'TS QH AC 6S 3C 9H 9D QS 8S 6H',\n'3S 7S 5D 4S JS 2D 6C QH 6S TH',\n'4C 4H AS JS 5D 3D TS 9C AC 8S',\n'6S 9C 7C 3S 5C QS AD AS 6H 3C',\n'9S 8C 7H 3H 6S 7C AS 9H JD KH',\n'3D 3H 7S 4D 6C 7C AC 2H 9C TH',\n'4H 5S 3H AC TC TH 9C 9H 9S 8D',\n'8D 9H 5H 4D 6C 2H QD 6S 5D 3S',\n'4C 5C JD QS 4D 3H TH AC QH 8C',\n'QC 5S 3C 7H AD 4C KS 4H JD 6D',\n'QS AH 3H KS 9H 2S JS JH 5H 2H',\n'2H 5S TH 6S TS 3S KS 3C 5H JS',\n'2D 9S 7H 3D KC JH 6D 7D JS TD',\n'AC JS 8H 2C 8C JH JC 2D TH 7S',\n'5D 9S 8H 2H 3D TC AH JC KD 9C',\n'9D QD JC 2H 6D KH TS 9S QH TH',\n'2C 8D 4S JD 5H 3H TH TC 9C KC',\n'AS 3D 9H 7D 4D TH KH 2H 7S 3H',\n'4H 7S KS 2S JS TS 8S 2H QD 8D',\n'5S 6H JH KS 8H 2S QC AC 6S 3S',\n'JC AS AD QS 8H 6C KH 4C 4D QD',\n'2S 3D TS TD 9S KS 6S QS 5C 8D',\n'3C 6D 4S QC KC JH QD TH KH AD',\n'9H AH 4D KS 2S 8D JH JC 7C QS',\n'2D 6C TH 3C 8H QD QH 2S 3S KS',\n'6H 5D 9S 4C TS TD JS QD 9D JD',\n'5H 8H KH 8S KS 7C TD AD 4S KD',\n'2C 7C JC 5S AS 6C 7D 8S 5H 9C',\n'6S QD 9S TS KH QS 5S QH 3C KC',\n'7D 3H 3C KD 5C AS JH 7H 6H JD',\n'9D 5C 9H KC 8H KS 4S AD 4D 2S',\n'3S JD QD 8D 2S 7C 5S 6S 5H TS',\n'6D 9S KC TD 3S 6H QD JD 5C 8D',\n'5H 9D TS KD 8D 6H TD QC 4C 7D',\n'6D 4S JD 9D AH 9S AS TD 9H QD',\n'2D 5S 2H 9C 6H 9S TD QC 7D TC',\n'3S 2H KS TS 2C 9C 8S JS 9D 7D',\n'3C KC 6D 5D 6C 6H 8S AS 7S QS',\n'JH 9S 2H 8D 4C 8H 9H AD TH KH',\n'QC AS 2S JS 5C 6H KD 3H 7H 2C',\n'QD 8H 2S 8D 3S 6D AH 2C TC 5C',\n'JD JS TS 8S 3H 5D TD KC JC 6H',\n'6S QS TC 3H 5D AH JC 7C 7D 4H',\n'7C 5D 8H 9C 2H 9H JH KH 5S 2C',\n'9C 7H 6S TH 3S QC QD 4C AC JD',\n'2H 5D 9S 7D KC 3S QS 2D AS KH',\n'2S 4S 2H 7D 5C TD TH QH 9S 4D',\n'6D 3S TS 6H 4H KS 9D 8H 5S 2D',\n'9H KS 4H 3S 5C 5D KH 6H 6S JS',\n'KC AS 8C 4C JC KH QC TH QD AH',\n'6S KH 9S 2C 5H TC 3C 7H JC 4D',\n'JD 4S 6S 5S 8D 7H 7S 4D 4C 2H',\n'7H 9H 5D KH 9C 7C TS TC 7S 5H',\n'4C 8D QC TS 4S 9H 3D AD JS 7C',\n'8C QS 5C 5D 3H JS AH KC 4S 9D',\n'TS JD 8S QS TH JH KH 2D QD JS',\n'JD QC 5D 6S 9H 3S 2C 8H 9S TS',\n'2S 4C AD 7H JC 5C 2D 6D 4H 3D',\n'7S JS 2C 4H 8C AD QD 9C 3S TD',\n'JD TS 4C 6H 9H 7D QD 6D 3C AS',\n'AS 7C 4C 6S 5D 5S 5C JS QC 4S',\n'KD 6S 9S 7C 3C 5S 7D JH QD JS',\n'4S 7S JH 2C 8S 5D 7H 3D QH AD',\n'TD 6H 2H 8D 4H 2D 7C AD KH 5D',\n'TS 3S 5H 2C QD AH 2S 5C KH TD',\n'KC 4D 8C 5D AS 6C 2H 2S 9H 7C',\n'KD JS QC TS QS KH JH 2C 5D AD',\n'3S 5H KC 6C 9H 3H 2H AD 7D 7S',\n'7S JS JH KD 8S 7D 2S 9H 7C 2H',\n'9H 2D 8D QC 6S AD AS 8H 5H 6C',\n'2S 7H 6C 6D 7D 8C 5D 9D JC 3C',\n'7C 9C 7H JD 2H KD 3S KH AD 4S',\n'QH AS 9H 4D JD KS KD TS KH 5H',\n'4C 8H 5S 3S 3D 7D TD AD 7S KC',\n'JS 8S 5S JC 8H TH 9C 4D 5D KC',\n'7C 5S 9C QD 2C QH JS 5H 8D KH',\n'TD 2S KS 3D AD KC 7S TC 3C 5D',\n'4C 2S AD QS 6C 9S QD TH QH 5C',\n'8C AD QS 2D 2S KC JD KS 6C JC',\n'8D 4D JS 2H 5D QD 7S 7D QH TS',\n'6S 7H 3S 8C 8S 9D QS 8H 6C 9S',\n'4S TC 2S 5C QD 4D QS 6D TH 6S',\n'3S 5C 9D 6H 8D 4C 7D TC 7C TD',\n'AH 6S AS 7H 5S KD 3H 5H AC 4C',\n'8D 8S AH KS QS 2C AD 6H 7D 5D',\n'6H 9H 9S 2H QS 8S 9C 5D 2D KD',\n'TS QC 5S JH 7D 7S TH 9S 9H AC',\n'7H 3H 6S KC 4D 6D 5C 4S QD TS',\n'TD 2S 7C QD 3H JH 9D 4H 7S 7H',\n'KS 3D 4H 5H TC 2S AS 2D 6D 7D',\n'8H 3C 7H TD 3H AD KC TH 9C KH',\n'TC 4C 2C 9S 9D 9C 5C 2H JD 3C',\n'3H AC TS 5D AD 8D 6H QC 6S 8C',\n'2S TS 3S JD 7H 8S QH 4C 5S 8D',\n'AC 4S 6C 3C KH 3D 7C 2D 8S 2H',\n'4H 6C 8S TH 2H 4S 8H 9S 3H 7S',\n'7C 4C 9C 2C 5C AS 5D KD 4D QH',\n'9H 4H TS AS 7D 8D 5D 9S 8C 2H',\n'QC KD AC AD 2H 7S AS 3S 2D 9S',\n'2H QC 8H TC 6D QD QS 5D KH 3C',\n'TH JD QS 4C 2S 5S AD 7H 3S AS',\n'7H JS 3D 6C 3S 6D AS 9S AC QS',\n'9C TS AS 8C TC 8S 6H 9D 8D 6C',\n'4D JD 9C KC 7C 6D KS 3S 8C AS',\n'3H 6S TC 8D TS 3S KC 9S 7C AS',\n'8C QC 4H 4S 8S 6C 3S TC AH AC',\n'4D 7D 5C AS 2H 6S TS QC AD TC',\n'QD QC 8S 4S TH 3D AH TS JH 4H',\n'5C 2D 9S 2C 3H 3C 9D QD QH 7D',\n'KC 9H 6C KD 7S 3C 4D AS TC 2D',\n'3D JS 4D 9D KS 7D TH QC 3H 3C',\n'8D 5S 2H 9D 3H 8C 4C 4H 3C TH',\n'JC TH 4S 6S JD 2D 4D 6C 3D 4C',\n'TS 3S 2D 4H AC 2C 6S 2H JH 6H',\n'TD 8S AD TC AH AC JH 9S 6S 7S',\n'6C KC 4S JD 8D 9H 5S 7H QH AH',\n'KD 8D TS JH 5C 5H 3H AD AS JS',\n'2D 4H 3D 6C 8C 7S AD 5D 5C 8S',\n'TD 5D 7S 9C 4S 5H 6C 8C 4C 8S',\n'JS QH 9C AS 5C QS JC 3D QC 7C',\n'JC 9C KH JH QS QC 2C TS 3D AD',\n'5D JH AC 5C 9S TS 4C JD 8C KS',\n'KC AS 2D KH 9H 2C 5S 4D 3D 6H',\n'TH AH 2D 8S JC 3D 8C QH 7S 3S',\n'8H QD 4H JC AS KH KS 3C 9S 6D',\n'9S QH 7D 9C 4S AC 7H KH 4D KD',\n'AH AD TH 6D 9C 9S KD KS QH 4H',\n'QD 6H 9C 7C QS 6D 6S 9D 5S JH',\n'AH 8D 5H QD 2H JC KS 4H KH 5S',\n'5C 2S JS 8D 9C 8C 3D AS KC AH',\n'JD 9S 2H QS 8H 5S 8C TH 5C 4C',\n'QC QS 8C 2S 2C 3S 9C 4C KS KH',\n'2D 5D 8S AH AD TD 2C JS KS 8C',\n'TC 5S 5H 8H QC 9H 6H JD 4H 9S',\n'3C JH 4H 9H AH 4S 2H 4C 8D AC',\n'8S TH 4D 7D 6D QD QS 7S TC 7C',\n'KH 6D 2D JD 5H JS QD JH 4H 4S',\n'9C 7S JH 4S 3S TS QC 8C TC 4H',\n'QH 9D 4D JH QS 3S 2C 7C 6C 2D',\n'4H 9S JD 5C 5H AH 9D TS 2D 4C',\n'KS JH TS 5D 2D AH JS 7H AS 8D',\n'JS AH 8C AD KS 5S 8H 2C 6C TH',\n'2H 5D AD AC KS 3D 8H TS 6H QC',\n'6D 4H TS 9C 5H JS JH 6S JD 4C',\n'JH QH 4H 2C 6D 3C 5D 4C QS KC',\n'6H 4H 6C 7H 6S 2S 8S KH QC 8C',\n'3H 3D 5D KS 4H TD AD 3S 4D TS',\n'5S 7C 8S 7D 2C KS 7S 6C 8C JS',\n'5D 2H 3S 7C 5C QD 5H 6D 9C 9H',\n'JS 2S KD 9S 8D TD TS AC 8C 9D',\n'5H QD 2S AC 8C 9H KS 7C 4S 3C',\n'KH AS 3H 8S 9C JS QS 4S AD 4D',\n'AS 2S TD AD 4D 9H JC 4C 5H QS',\n'5D 7C 4H TC 2D 6C JS 4S KC 3S',\n'4C 2C 5D AC 9H 3D JD 8S QS QH',\n'2C 8S 6H 3C QH 6D TC KD AC AH',\n'QC 6C 3S QS 4S AC 8D 5C AD KH',\n'5S 4C AC KH AS QC 2C 5C 8D 9C',\n'8H JD 3C KH 8D 5C 9C QD QH 9D',\n'7H TS 2C 8C 4S TD JC 9C 5H QH',\n'JS 4S 2C 7C TH 6C AS KS 7S JD',\n'JH 7C 9H 7H TC 5H 3D 6D 5D 4D',\n'2C QD JH 2H 9D 5S 3D TD AD KS',\n'JD QH 3S 4D TH 7D 6S QS KS 4H',\n'TC KS 5S 8D 8H AD 2S 2D 4C JH',\n'5S JH TC 3S 2D QS 9D 4C KD 9S',\n'AC KH 3H AS 9D KC 9H QD 6C 6S',\n'9H 7S 3D 5C 7D KC TD 8H 4H 6S',\n'3C 7H 8H TC QD 4D 7S 6S QH 6C',\n'6D AD 4C QD 6C 5D 7D 9D KS TS',\n'JH 2H JD 9S 7S TS KH 8D 5D 8H',\n'2D 9S 4C 7D 9D 5H QD 6D AC 6S',\n'7S 6D JC QD JH 4C 6S QS 2H 7D',\n'8C TD JH KD 2H 5C QS 2C JS 7S',\n'TC 5H 4H JH QD 3S 5S 5D 8S KH',\n'KS KH 7C 2C 5D JH 6S 9C 6D JC',\n'5H AH JD 9C JS KC 2H 6H 4D 5S',\n'AS 3C TH QC 6H 9C 8S 8C TD 7C',\n'KC 2C QD 9C KH 4D 7S 3C TS 9H',\n'9C QC 2S TS 8C TD 9S QD 3S 3C',\n'4D 9D TH JH AH 6S 2S JD QH JS',\n'QD 9H 6C KD 7D 7H 5D 6S 8H AH',\n'8H 3C 4S 2H 5H QS QH 7S 4H AC',\n'QS 3C 7S 9S 4H 3S AH KS 9D 7C',\n'AD 5S 6S 2H 2D 5H TC 4S 3C 8C',\n'QH TS 6S 4D JS KS JH AS 8S 6D',\n'2C 8S 2S TD 5H AS TC TS 6C KC',\n'KC TS 8H 2H 3H 7C 4C 5S TH TD',\n'KD AD KH 7H 7S 5D 5H 5S 2D 9C',\n'AD 9S 3D 7S 8C QC 7C 9C KD KS',\n'3C QC 9S 8C 4D 5C AS QD 6C 2C',\n'2H KC 8S JD 7S AC 8D 5C 2S 4D',\n'9D QH 3D 2S TC 3S KS 3C 9H TD',\n'KD 6S AC 2C 7H 5H 3S 6C 6H 8C',\n'QH TC 8S 6S KH TH 4H 5D TS 4D',\n'8C JS 4H 6H 2C 2H 7D AC QD 3D',\n'QS KC 6S 2D 5S 4H TD 3H JH 4C',\n'7S 5H 7H 8H KH 6H QS TH KD 7D',\n'5H AD KD 7C KH 5S TD 6D 3C 6C',\n'8C 9C 5H JD 7C KC KH 7H 2H 3S',\n'7S 4H AD 4D 8S QS TH 3D 7H 5S',\n'8D TC KS KD 9S 6D AD JD 5C 2S',\n'7H 8H 6C QD 2H 6H 9D TC 9S 7C',\n'8D 6D 4C 7C 6C 3C TH KH JS JH',\n'5S 3S 8S JS 9H AS AD 8H 7S KD',\n'JH 7C 2C KC 5H AS AD 9C 9S JS',\n'AD AC 2C 6S QD 7C 3H TH KS KD',\n'9D JD 4H 8H 4C KH 7S TS 8C KC',\n'3S 5S 2H 7S 6H 7D KS 5C 6D AD',\n'5S 8C 9H QS 7H 7S 2H 6C 7D TD',\n'QS 5S TD AC 9D KC 3D TC 2D 4D',\n'TD 2H 7D JD QD 4C 7H 5D KC 3D',\n'4C 3H 8S KD QH 5S QC 9H TC 5H',\n'9C QD TH 5H TS 5C 9H AH QH 2C',\n'4D 6S 3C AC 6C 3D 2C 2H TD TH',\n'AC 9C 5D QC 4D AD 8D 6D 8C KC',\n'AD 3C 4H AC 8D 8H 7S 9S TD JC',\n'4H 9H QH JS 2D TH TD TC KD KS',\n'5S 6S 9S 8D TH AS KH 5H 5C 8S',\n'JD 2S 9S 6S 5S 8S 5D 7S 7H 9D',\n'5D 8C 4C 9D AD TS 2C 7D KD TC',\n'8S QS 4D KC 5C 8D 4S KH JD KD',\n'AS 5C AD QH 7D 2H 9S 7H 7C TC',\n'2S 8S JD KH 7S 6C 6D AD 5D QC',\n'9H 6H 3S 8C 8H AH TC 4H JS TD',\n'2C TS 4D 7H 2D QC 9C 5D TH 7C',\n'6C 8H QC 5D TS JH 5C 5H 9H 4S',\n'2D QC 7H AS JS 8S 2H 4C 4H 8D',\n'JS 6S AC KD 3D 3C 4S 7H TH KC',\n'QH KH 6S QS 5S 4H 3C QD 3S 3H',\n'7H AS KH 8C 4H 9C 5S 3D 6S TS',\n'9C 7C 3H 5S QD 2C 3D AD AC 5H',\n'JH TD 2D 4C TS 3H KH AD 3S 7S',\n'AS 4C 5H 4D 6S KD JC 3C 6H 2D',\n'3H 6S 8C 2D TH 4S AH QH AD 5H',\n'7C 2S 9H 7H KC 5C 6D 5S 3H JC',\n'3C TC 9C 4H QD TD JH 6D 9H 5S',\n'7C 6S 5C 5D 6C 4S 7H 9H 6H AH',\n'AD 2H 7D KC 2C 4C 2S 9S 7H 3S',\n'TH 4C 8S 6S 3S AD KS AS JH TD',\n'5C TD 4S 4D AD 6S 5D TC 9C 7D',\n'8H 3S 4D 4S 5S 6H 5C AC 3H 3D',\n'9H 3C AC 4S QS 8S 9D QH 5H 4D',\n'JC 6C 5H TS AC 9C JD 8C 7C QD',\n'8S 8H 9C JD 2D QC QH 6H 3C 8D',\n'KS JS 2H 6H 5H QH QS 3H 7C 6D',\n'TC 3H 4S 7H QC 2H 3S 8C JS KH',\n'AH 8H 5S 4C 9H JD 3H 7S JC AC',\n'3C 2D 4C 5S 6C 4S QS 3S JD 3D',\n'5H 2D TC AH KS 6D 7H AD 8C 6H',\n'6C 7S 3C JD 7C 8H KS KH AH 6D',\n'AH 7D 3H 8H 8S 7H QS 5H 9D 2D',\n'JD AC 4H 7S 8S 9S KS AS 9D QH',\n'7S 2C 8S 5S JH QS JC AH KD 4C',\n'AH 2S 9H 4H 8D TS TD 6H QH JD',\n'4H JC 3H QS 6D 7S 9C 8S 9D 8D',\n'5H TD 4S 9S 4C 8C 8D 7H 3H 3D',\n'QS KH 3S 2C 2S 3C 7S TD 4S QD',\n'7C TD 4D 5S KH AC AS 7H 4C 6C',\n'2S 5H 6D JD 9H QS 8S 2C 2H TD',\n'2S TS 6H 9H 7S 4H JC 4C 5D 5S',\n'2C 5H 7D 4H 3S QH JC JS 6D 8H',\n'4C QH 7C QD 3S AD TH 8S 5S TS',\n'9H TC 2S TD JC 7D 3S 3D TH QH',\n'7D 4C 8S 5C JH 8H 6S 3S KC 3H',\n'JC 3H KH TC QH TH 6H 2C AC 5H',\n'QS 2H 9D 2C AS 6S 6C 2S 8C 8S',\n'9H 7D QC TH 4H KD QS AC 7S 3C',\n'4D JH 6S 5S 8H KS 9S QC 3S AS',\n'JD 2D 6S 7S TC 9H KC 3H 7D KD',\n'2H KH 7C 4D 4S 3H JS QD 7D KC',\n'4C JC AS 9D 3C JS 6C 8H QD 4D',\n'AH JS 3S 6C 4C 3D JH 6D 9C 9H',\n'9H 2D 8C 7H 5S KS 6H 9C 2S TC',\n'6C 8C AD 7H 6H 3D KH AS 5D TH',\n'KS 8C 3S TS 8S 4D 5S 9S 6C 4H',\n'9H 4S 4H 5C 7D KC 2D 2H 9D JH',\n'5C JS TC 9D 9H 5H 7S KH JC 6S',\n'7C 9H 8H 4D JC KH JD 2H TD TC',\n'8H 6C 2H 2C KH 6H 9D QS QH 5H',\n'AC 7D 2S 3D QD JC 2D 8D JD JH',\n'2H JC 2D 7H 2C 3C 8D KD TD 4H',\n'3S 4H 6D 8D TS 3H TD 3D 6H TH',\n'JH JC 3S AC QH 9H 7H 8S QC 2C',\n'7H TD QS 4S 8S 9C 2S 5D 4D 2H',\n'3D TS 3H 2S QC 8H 6H KC JC KS',\n'5D JD 7D TC 8C 6C 9S 3D 8D AC',\n'8H 6H JH 6C 5D 8D 8S 4H AD 2C',\n'9D 4H 2D 2C 3S TS AS TC 3C 5D',\n'4D TH 5H KS QS 6C 4S 2H 3D AD',\n'5C KC 6H 2C 5S 3C 4D 2D 9H 9S',\n'JD 4C 3H TH QH 9H 5S AH 8S AC',\n'7D 9S 6S 2H TD 9C 4H 8H QS 4C',\n'3C 6H 5D 4H 8C 9C KC 6S QD QS',\n'3S 9H KD TC 2D JS 8C 6S 4H 4S',\n'2S 4C 8S QS 6H KH 3H TH 8C 5D',\n'2C KH 5S 3S 7S 7H 6C 9D QD 8D',\n'8H KS AC 2D KH TS 6C JS KC 7H',\n'9C KS 5C TD QC AH 6C 5H 9S 7C',\n'5D 4D 3H 4H 6S 7C 7S AH QD TD',\n'2H 7D QC 6S TC TS AH 7S 9D 3H',\n'TH 5H QD 9S KS 7S 7C 6H 8C TD',\n'TH 2D 4D QC 5C 7D JD AH 9C 4H',\n'4H 3H AH 8D 6H QC QH 9H 2H 2C',\n'2D AD 4C TS 6H 7S TH 4H QS TD',\n'3C KD 2H 3H QS JD TC QC 5D 8H',\n'KS JC QD TH 9S KD 8D 8C 2D 9C',\n'3C QD KD 6D 4D 8D AH AD QC 8S',\n'8H 3S 9D 2S 3H KS 6H 4C 7C KC',\n'TH 9S 5C 3D 7D 6H AC 7S 4D 2C',\n'5C 3D JD 4D 2D 6D 5H 9H 4C KH',\n'AS 7H TD 6C 2H 3D QD KS 4C 4S',\n'JC 3C AC 7C JD JS 8H 9S QC 5D',\n'JD 6S 5S 2H AS 8C 7D 5H JH 3D',\n'8D TC 5S 9S 8S 3H JC 5H 7S AS',\n'5C TD 3D 7D 4H 8D 7H 4D 5D JS',\n'QS 9C KS TD 2S 8S 5C 2H 4H AS',\n'TH 7S 4H 7D 3H JD KD 5D 2S KC',\n'JD 7H 4S 8H 4C JS 6H QH 5S 4H',\n'2C QS 8C 5S 3H QC 2S 6C QD AD',\n'8C 3D JD TC 4H 2H AD 5S AC 2S',\n'5D 2C JS 2D AD 9D 3D 4C 4S JH',\n'8D 5H 5D 6H 7S 4D KS 9D TD JD',\n'3D 6D 9C 2S AS 7D 5S 5C 8H JD',\n'7C 8S 3S 6S 5H JD TC AD 7H 7S',\n'2S 9D TS 4D AC 8D 6C QD JD 3H',\n'9S KH 2C 3C AC 3D 5H 6H 8D 5D',\n'KS 3D 2D 6S AS 4C 2S 7C 7H KH',\n'AC 2H 3S JC 5C QH 4D 2D 5H 7S',\n'TS AS JD 8C 6H JC 8S 5S 2C 5D',\n'7S QH 7H 6C QC 8H 2D 7C JD 2S',\n'2C QD 2S 2H JC 9C 5D 2D JD JH',\n'7C 5C 9C 8S 7D 6D 8D 6C 9S JH',\n'2C AD 6S 5H 3S KS 7S 9D KH 4C',\n'7H 6C 2C 5C TH 9D 8D 3S QC AH',\n'5S KC 6H TC 5H 8S TH 6D 3C AH',\n'9C KD 4H AD TD 9S 4S 7D 6H 5D',\n'7H 5C 5H 6D AS 4C KD KH 4H 9D',\n'3C 2S 5C 6C JD QS 2H 9D 7D 3H',\n'AC 2S 6S 7S JS QD 5C QS 6H AD',\n'5H TH QC 7H TC 3S 7C 6D KC 3D',\n'4H 3D QC 9S 8H 2C 3S JC KS 5C',\n'4S 6S 2C 6H 8S 3S 3D 9H 3H JS',\n'4S 8C 4D 2D 8H 9H 7D 9D AH TS',\n'9S 2C 9H 4C 8D AS 7D 3D 6D 5S',\n'6S 4C 7H 8C 3H 5H JC AH 9D 9C',\n'2S 7C 5S JD 8C 3S 3D 4D 7D 6S',\n'3C KC 4S 5D 7D 3D JD 7H 3H 4H',\n'9C 9H 4H 4D TH 6D QD 8S 9S 7S',\n'2H AC 8S 4S AD 8C 2C AH 7D TC',\n'TS 9H 3C AD KS TC 3D 8C 8H JD',\n'QC 8D 2C 3C 7D 7C JD 9H 9C 6C',\n'AH 6S JS JH 5D AS QC 2C JD TD',\n'9H KD 2H 5D 2D 3S 7D TC AH TS',\n'TD 8H AS 5D AH QC AC 6S TC 5H',\n'KS 4S 7H 4D 8D 9C TC 2H 6H 3H',\n'3H KD 4S QD QH 3D 8H 8C TD 7S',\n'8S JD TC AH JS QS 2D KH KS 4D',\n'3C AD JC KD JS KH 4S TH 9H 2C',\n'QC 5S JS 9S KS AS 7C QD 2S JD',\n'KC 5S QS 3S 2D AC 5D 9H 8H KS',\n'6H 9C TC AD 2C 6D 5S JD 6C 7C',\n'QS KH TD QD 2C 3H 8S 2S QC AH',\n'9D 9H JH TC QH 3C 2S JS 5C 7H',\n'6C 3S 3D 2S 4S QD 2D TH 5D 2C',\n'2D 6H 6D 2S JC QH AS 7H 4H KH',\n'5H 6S KS AD TC TS 7C AC 4S 4H',\n'AD 3C 4H QS 8C 9D KS 2H 2D 4D',\n'4S 9D 6C 6D 9C AC 8D 3H 7H KD',\n'JC AH 6C TS JD 6D AD 3S 5D QD',\n'JC JH JD 3S 7S 8S JS QC 3H 4S',\n'JD TH 5C 2C AD JS 7H 9S 2H 7S',\n'8D 3S JH 4D QC AS JD 2C KC 6H',\n'2C AC 5H KD 5S 7H QD JH AH 2D',\n'JC QH 8D 8S TC 5H 5C AH 8C 6C',\n'3H JS 8S QD JH 3C 4H 6D 5C 3S',\n'6D 4S 4C AH 5H 5S 3H JD 7C 8D',\n'8H AH 2H 3H JS 3C 7D QC 4H KD',\n'6S 2H KD 5H 8H 2D 3C 8S 7S QD',\n'2S 7S KC QC AH TC QS 6D 4C 8D',\n'5S 9H 2C 3S QD 7S 6C 2H 7C 9D',\n'3C 6C 5C 5S JD JC KS 3S 5D TS',\n'7C KS 6S 5S 2S 2D TC 2H 5H QS',\n'AS 7H 6S TS 5H 9S 9D 3C KD 2H',\n'4S JS QS 3S 4H 7C 2S AC 6S 9D',\n'8C JH 2H 5H 7C 5D QH QS KH QC',\n'3S TD 3H 7C KC 8D 5H 8S KH 8C',\n'4H KH JD TS 3C 7H AS QC JS 5S',\n'AH 9D 2C 8D 4D 2D 6H 6C KC 6S',\n'2S 6H 9D 3S 7H 4D KH 8H KD 3D',\n'9C TC AC JH KH 4D JD 5H TD 3S',\n'7S 4H 9D AS 4C 7D QS 9S 2S KH',\n'3S 8D 8S KS 8C JC 5C KH 2H 5D',\n'8S QH 2C 4D KC JS QC 9D AC 6H',\n'8S 8C 7C JS JD 6S 4C 9C AC 4S',\n'QH 5D 2C 7D JC 8S 2D JS JH 4C',\n'JS 4C 7S TS JH KC KH 5H QD 4S',\n'QD 8C 8D 2D 6S TD 9D AC QH 5S',\n'QH QC JS 3D 3C 5C 4H KH 8S 7H',\n'7C 2C 5S JC 8S 3H QC 5D 2H KC',\n'5S 8D KD 6H 4H QD QH 6D AH 3D',\n'7S KS 6C 2S 4D AC QS 5H TS JD',\n'7C 2D TC 5D QS AC JS QC 6C KC',\n'2C KS 4D 3H TS 8S AD 4H 7S 9S',\n'QD 9H QH 5H 4H 4D KH 3S JC AD',\n'4D AC KC 8D 6D 4C 2D KH 2C JD',\n'2C 9H 2D AH 3H 6D 9C 7D TC KS',\n'8C 3H KD 7C 5C 2S 4S 5H AS AH',\n'TH JD 4H KD 3H TC 5C 3S AC KH',\n'6D 7H AH 7S QC 6H 2D TD JD AS',\n'JH 5D 7H TC 9S 7D JC AS 5S KH',\n'2H 8C AD TH 6H QD KD 9H 6S 6C',\n'QH KC 9D 4D 3S JS JH 4H 2C 9H',\n'TC 7H KH 4H JC 7D 9S 3H QS 7S',\n'AD 7D JH 6C 7H 4H 3S 3H 4D QH',\n'JD 2H 5C AS 6C QC 4D 3C TC JH',\n'AC JD 3H 6H 4C JC AD 7D 7H 9H',\n'4H TC TS 2C 8C 6S KS 2H JD 9S',\n'4C 3H QS QC 9S 9H 6D KC 9D 9C',\n'5C AD 8C 2C QH TH QD JC 8D 8H',\n'QC 2C 2S QD 9C 4D 3S 8D JH QS',\n'9D 3S 2C 7S 7C JC TD 3C TC 9H',\n'3C TS 8H 5C 4C 2C 6S 8D 7C 4H',\n'KS 7H 2H TC 4H 2C 3S AS AH QS',\n'8C 2D 2H 2C 4S 4C 6S 7D 5S 3S',\n'TH QC 5D TD 3C QS KD KC KS AS',\n'4D AH KD 9H KS 5C 4C 6H JC 7S',\n'KC 4H 5C QS TC 2H JC 9S AH QH',\n'4S 9H 3H 5H 3C QD 2H QC JH 8H',\n'5D AS 7H 2C 3D JH 6H 4C 6S 7D',\n'9C JD 9H AH JS 8S QH 3H KS 8H',\n'3S AC QC TS 4D AD 3D AH 8S 9H',\n'7H 3H QS 9C 9S 5H JH JS AH AC',\n'8D 3C JD 2H AC 9C 7H 5S 4D 8H',\n'7C JH 9H 6C JS 9S 7H 8C 9D 4H',\n'2D AS 9S 6H 4D JS JH 9H AD QD',\n'6H 7S JH KH AH 7H TD 5S 6S 2C',\n'8H JH 6S 5H 5S 9D TC 4C QC 9S',\n'7D 2C KD 3H 5H AS QD 7H JS 4D',\n'TS QH 6C 8H TH 5H 3C 3H 9C 9D',\n'AD KH JS 5D 3H AS AC 9S 5C KC',\n'2C KH 8C JC QS 6D AH 2D KC TC',\n'9D 3H 2S 7C 4D 6D KH KS 8D 7D',\n'9H 2S TC JH AC QC 3H 5S 3S 8H',\n'3S AS KD 8H 4C 3H 7C JH QH TS',\n'7S 6D 7H 9D JH 4C 3D 3S 6C AS',\n'4S 2H 2C 4C 8S 5H KC 8C QC QD',\n'3H 3S 6C QS QC 2D 6S 5D 2C 9D',\n'2H 8D JH 2S 3H 2D 6C 5C 7S AD',\n'9H JS 5D QH 8S TS 2H 7S 6S AD',\n'6D QC 9S 7H 5H 5C 7D KC JD 4H',\n'QC 5S 9H 9C 4D 6S KS 2S 4C 7C',\n'9H 7C 4H 8D 3S 6H 5C 8H JS 7S',\n'2D 6H JS TD 4H 4D JC TH 5H KC',\n'AC 7C 8D TH 3H 9S 2D 4C KC 4D',\n'KD QS 9C 7S 3D KS AD TS 4C 4H',\n'QH 9C 8H 2S 7D KS 7H 5D KD 4C',\n'9C 2S 2H JC 6S 6C TC QC JH 5C',\n'7S AC 8H KC 8S 6H QS JC 3D 6S',\n'JS 2D JH 8C 4S 6H 8H 6D 5D AD',\n'6H 7D 2S 4H 9H 7C AS AC 8H 5S',\n'3C JS 4S 6D 5H 2S QH 6S 9C 2C',\n'3D 5S 6S 9S 4C QS 8D QD 8S TC',\n'9C 3D AH 9H 5S 2C 7D AD JC 3S',\n'7H TC AS 3C 6S 6D 7S KH KC 9H',\n'3S TC 8H 6S 5H JH 8C 7D AC 2S',\n'QD 9D 9C 3S JC 8C KS 8H 5D 4D',\n'JS AH JD 6D 9D 8C 9H 9S 8H 3H',\n'2D 6S 4C 4D 8S AD 4S TC AH 9H',\n'TS AC QC TH KC 6D 4H 7S 8C 2H',\n'3C QD JS 9D 5S JC AH 2H TS 9H',\n'3H 4D QH 5D 9C 5H 7D 4S JC 3S',\n'8S TH 3H 7C 2H JD JS TS AC 8D',\n'9C 2H TD KC JD 2S 8C 5S AD 2C',\n'3D KD 7C 5H 4D QH QD TC 6H 7D',\n'7H 2C KC 5S KD 6H AH QC 7S QH',\n'6H 5C AC 5H 2C 9C 2D 7C TD 2S',\n'4D 9D AH 3D 7C JD 4H 8C 4C KS',\n'TH 3C JS QH 8H 4C AS 3D QS QC',\n'4D 7S 5H JH 6D 7D 6H JS KH 3C',\n'QD 8S 7D 2H 2C 7C JC 2S 5H 8C',\n'QH 8S 9D TC 2H AD 7C 8D QD 6S',\n'3S 7C AD 9H 2H 9S JD TS 4C 2D',\n'3S AS 4H QC 2C 8H 8S 7S TD TC',\n'JH TH TD 3S 4D 4H 5S 5D QS 2C',\n'8C QD QH TC 6D 4S 9S 9D 4H QC',\n'8C JS 9D 6H JD 3H AD 6S TD QC',\n'KC 8S 3D 7C TD 7D 8D 9H 4S 3S',\n'6C 4S 3D 9D KD TC KC KS AC 5S',\n'7C 6S QH 3D JS KD 6H 6D 2D 8C',\n'JD 2S 5S 4H 8S AC 2D 6S TS 5C',\n'5H 8C 5S 3C 4S 3D 7C 8D AS 3H',\n'AS TS 7C 3H AD 7D JC QS 6C 6H',\n'3S 9S 4C AC QH 5H 5D 9H TS 4H',\n'6C 5C 7H 7S TD AD JD 5S 2H 2S',\n'7D 6C KC 3S JD 8D 8S TS QS KH',\n'8S QS 8D 6C TH AC AH 2C 8H 9S',\n'7H TD KH QH 8S 3D 4D AH JD AS',\n'TS 3D 2H JC 2S JH KH 6C QC JS',\n'KC TH 2D 6H 7S 2S TC 8C 9D QS',\n'3C 9D 6S KH 8H 6D 5D TH 2C 2H',\n'6H TC 7D AD 4D 8S TS 9H TD 7S',\n'JS 6D JD JC 2H AC 6C 3D KH 8D',\n'KH JD 9S 5D 4H 4C 3H 7S QS 5C',\n'4H JD 5D 3S 3C 4D KH QH QS 7S',\n'JD TS 8S QD AH 4C 6H 3S 5S 2C',\n'QS 3D JD AS 8D TH 7C 6S QC KS',\n'7S 2H 8C QC 7H AC 6D 2D TH KH',\n'5S 6C 7H KH 7D AH 8C 5C 7S 3D',\n'3C KD AD 7D 6C 4D KS 2D 8C 4S',\n'7C 8D 5S 2D 2S AH AD 2C 9D TD',\n'3C AD 4S KS JH 7C 5C 8C 9C TH',\n'AS TD 4D 7C JD 8C QH 3C 5H 9S',\n'3H 9C 8S 9S 6S QD KS AH 5H JH',\n'QC 9C 5S 4H 2H TD 7D AS 8C 9D',\n'8C 2C 9D KD TC 7S 3D KH QC 3C',\n'4D AS 4C QS 5S 9D 6S JD QH KS',\n'6D AH 6C 4C 5H TS 9H 7D 3D 5S',\n'QS JD 7C 8D 9C AC 3S 6S 6C KH',\n'8H JH 5D 9S 6D AS 6S 3S QC 7H',\n'QD AD 5C JH 2H AH 4H AS KC 2C',\n'JH 9C 2C 6H 2D JS 5D 9H KC 6D',\n'7D 9D KD TH 3H AS 6S QC 6H AD',\n'JD 4H 7D KC 3H JS 3C TH 3D QS',\n'4C 3H 8C QD 5H 6H AS 8H AD JD',\n'TH 8S KD 5D QC 7D JS 5S 5H TS',\n'7D KC 9D QS 3H 3C 6D TS 7S AH',\n'7C 4H 7H AH QC AC 4D 5D 6D TH',\n'3C 4H 2S KD 8H 5H JH TC 6C JD',\n'4S 8C 3D 4H JS TD 7S JH QS KD',\n'7C QC KD 4D 7H 6S AD TD TC KH',\n'5H 9H KC 3H 4D 3D AD 6S QD 6H',\n'TH 7C 6H TS QH 5S 2C KC TD 6S',\n'7C 4D 5S JD JH 7D AC KD KH 4H',\n'7D 6C 8D 8H 5C JH 8S QD TH JD',\n'8D 7D 6C 7C 9D KD AS 5C QH JH',\n'9S 2C 8C 3C 4C KS JH 2D 8D 4H',\n'7S 6C JH KH 8H 3H 9D 2D AH 6D',\n'4D TC 9C 8D 7H TD KS TH KD 3C',\n'JD 9H 8D QD AS KD 9D 2C 2S 9C',\n'8D 3H 5C 7H KS 5H QH 2D 8C 9H',\n'2D TH 6D QD 6C KC 3H 3S AD 4C',\n'4H 3H JS 9D 3C TC 5H QH QC JC',\n'3D 5C 6H 3S 3C JC 5S 7S 2S QH',\n'AC 5C 8C 4D 5D 4H 2S QD 3C 3H',\n'2C TD AH 9C KD JS 6S QD 4C QC',\n'QS 8C 3S 4H TC JS 3H 7C JC AD',\n'5H 4D 9C KS JC TD 9S TS 8S 9H',\n'QD TS 7D AS AC 2C TD 6H 8H AH',\n'6S AD 8C 4S 9H 8D 9D KH 8S 3C',\n'QS 4D 2D 7S KH JS JC AD 4C 3C',\n'QS 9S 7H KC TD TH 5H JS AC JH',\n'6D AC 2S QS 7C AS KS 6S KH 5S',\n'6D 8H KH 3C QS 2H 5C 9C 9D 6C',\n'JS 2C 4C 6H 7D JC AC QD TD 3H',\n'4H QC 8H JD 4C KD KS 5C KC 7S',\n'6D 2D 3H 2S QD 5S 7H AS TH 6S',\n'AS 6D 8D 2C 8S TD 8H QD JC AH',\n'9C 9H 2D TD QH 2H 5C TC 3D 8H',\n'KC 8S 3D KH 2S TS TC 6S 4D JH',\n'9H 9D QS AC KC 6H 5D 4D 8D AH',\n'9S 5C QS 4H 7C 7D 2H 8S AD JS',\n'3D AC 9S AS 2C 2D 2H 3H JC KH',\n'7H QH KH JD TC KS 5S 8H 4C 8D',\n'2H 7H 3S 2S 5H QS 3C AS 9H KD',\n'AD 3D JD 6H 5S 9C 6D AC 9S 3S',\n'3D 5D 9C 2D AC 4S 2S AD 6C 6S',\n'QC 4C 2D 3H 6S KC QH QD 2H JH',\n'QC 3C 8S 4D 9S 2H 5C 8H QS QD',\n'6D KD 6S 7H 3S KH 2H 5C JC 6C',\n'3S 9S TC 6S 8H 2D AD 7S 8S TS',\n'3C 6H 9C 3H 5C JC 8H QH TD QD',\n'3C JS QD 5D TD 2C KH 9H TH AS',\n'9S TC JD 3D 5C 5H AD QH 9H KC',\n'TC 7H 4H 8H 3H TD 6S AC 7C 2S',\n'QS 9D 5D 3C JC KS 4D 6C JH 2S',\n'9S 6S 3C 7H TS 4C KD 6D 3D 9C',\n'2D 9H AH AC 7H 2S JH 3S 7C QC',\n'QD 9H 3C 2H AC AS 8S KD 8C KH',\n'2D 7S TD TH 6D JD 8D 4D 2H 5S',\n'8S QH KD JD QS JH 4D KC 5H 3S',\n'3C KH QC 6D 8H 3S AH 7D TD 2D',\n'5S 9H QH 4S 6S 6C 6D TS TH 7S',\n'6C 4C 6D QS JS 9C TS 3H 8D 8S',\n'JS 5C 7S AS 2C AH 2H AD 5S TC',\n'KD 6C 9C 9D TS 2S JC 4H 2C QD',\n'QS 9H TC 3H KC KS 4H 3C AD TH',\n'KH 9C 2H KD 9D TC 7S KC JH 2D',\n'7C 3S KC AS 8C 5D 9C 9S QH 3H',\n'2D 8C TD 4C 2H QC 5D TC 2C 7D',\n'KS 4D 6C QH TD KH 5D 7C AD 8D',\n'2S 9S 8S 4C 8C 3D 6H QD 7C 7H',\n'6C 8S QH 5H TS 5C 3C 4S 2S 2H',\n'8S 6S 2H JC 3S 3H 9D 8C 2S 7H',\n'QC 2C 8H 9C AC JD 4C 4H 6S 3S',\n'3H 3S 7D 4C 9S 5H 8H JC 3D TC',\n'QH 2S 2D 9S KD QD 9H AD 6D 9C',\n'8D 2D KS 9S JC 4C JD KC 4S TH',\n'KH TS 6D 4D 5C KD 5H AS 9H AD',\n'QD JS 7C 6D 5D 5C TH 5H QH QS',\n'9D QH KH 5H JH 4C 4D TC TH 6C',\n'KH AS TS 9D KD 9C 7S 4D 8H 5S',\n'KH AS 2S 7D 9D 4C TS TH AH 7C',\n'KS 4D AC 8S 9S 8D TH QH 9D 5C',\n'5D 5C 8C QS TC 4C 3D 3S 2C 8D',\n'9D KS 2D 3C KC 4S 8C KH 6C JC',\n'8H AH 6H 7D 7S QD 3C 4C 6C KC',\n'3H 2C QH 8H AS 7D 4C 8C 4H KC',\n'QD 5S 4H 2C TD AH JH QH 4C 8S',\n'3H QS 5S JS 8H 2S 9H 9C 3S 2C',\n'6H TS 7S JC QD AC TD KC 5S 3H',\n'QH AS QS 7D JC KC 2C 4C 5C 5S',\n'QH 3D AS JS 4H 8D 7H JC 2S 9C',\n'5D 4D 2S 4S 9D 9C 2D QS 8H 7H',\n'6D 7H 3H JS TS AC 2D JH 7C 8S',\n'JH 5H KC 3C TC 5S 9H 4C 8H 9D',\n'8S KC 5H 9H AD KS 9D KH 8D AH',\n'JC 2H 9H KS 6S 3H QC 5H AH 9C',\n'5C KH 5S AD 6C JC 9H QC 9C TD',\n'5S 5D JC QH 2D KS 8H QS 2H TS',\n'JH 5H 5S AH 7H 3C 8S AS TD KH',\n'6H 3D JD 2C 4C KC 7S AH 6C JH',\n'4C KS 9D AD 7S KC 7D 8H 3S 9C',\n'7H 5C 5H 3C 8H QC 3D KH 6D JC',\n'2D 4H 5D 7D QC AD AH 9H QH 8H',\n'KD 8C JS 9D 3S 3C 2H 5D 6D 2S',\n'8S 6S TS 3C 6H 8D 5S 3H TD 6C',\n'KS 3D JH 9C 7C 9S QS 5S 4H 6H',\n'7S 6S TH 4S KC KD 3S JC JH KS',\n'7C 3C 2S 6D QH 2C 7S 5H 8H AH',\n'KC 8D QD 6D KH 5C 7H 9D 3D 9C',\n'6H 2D 8S JS 9S 2S 6D KC 7C TC',\n'KD 9C JH 7H KC 8S 2S 7S 3D 6H',\n'4H 9H 2D 4C 8H 7H 5S 8S 2H 8D',\n'AD 7C 3C 7S 5S 4D 9H 3D JC KH',\n'5D AS 7D 6D 9C JC 4C QH QS KH',\n'KD JD 7D 3D QS QC 8S 6D JS QD',\n'6S 8C 5S QH TH 9H AS AC 2C JD',\n'QC KS QH 7S 3C 4C 5C KC 5D AH',\n'6C 4H 9D AH 2C 3H KD 3D TS 5C',\n'TD 8S QS AS JS 3H KD AC 4H KS',\n'7D 5D TS 9H 4H 4C 9C 2H 8C QC',\n'2C 7D 9H 4D KS 4C QH AD KD JS',\n'QD AD AH KH 9D JS 9H JC KD JD',\n'8S 3C 4S TS 7S 4D 5C 2S 6H 7C',\n'JS 7S 5C KD 6D QH 8S TD 2H 6S',\n'QH 6C TC 6H TD 4C 9D 2H QC 8H',\n'3D TS 4D 2H 6H 6S 2C 7H 8S 6C',\n'9H 9D JD JH 3S AH 2C 6S 3H 8S',\n'2C QS 8C 5S 3H 2S 7D 3C AD 4S',\n'5C QC QH AS TS 4S 6S 4C 5H JS',\n'JH 5C TD 4C 6H JS KD KH QS 4H',\n'TC KH JC 4D 9H 9D 8D KC 3C 8H',\n'2H TC 8S AD 9S 4H TS 7H 2C 5C',\n'4H 2S 6C 5S KS AH 9C 7C 8H KD',\n'TS QH TD QS 3C JH AH 2C 8D 7D',\n'5D KC 3H 5S AC 4S 7H QS 4C 2H',\n'3D 7D QC KH JH 6D 6C TD TH KD',\n'5S 8D TH 6C 9D 7D KH 8C 9S 6D',\n'JD QS 7S QC 2S QH JC 4S KS 8D',\n'7S 5S 9S JD KD 9C JC AD 2D 7C',\n'4S 5H AH JH 9C 5D TD 7C 2D 6S',\n'KC 6C 7H 6S 9C QD 5S 4H KS TD',\n'6S 8D KS 2D TH TD 9H JD TS 3S',\n'KH JS 4H 5D 9D TC TD QC JD TS',\n'QS QD AC AD 4C 6S 2D AS 3H KC',\n'4C 7C 3C TD QS 9C KC AS 8D AD',\n'KC 7H QC 6D 8H 6S 5S AH 7S 8C',\n'3S AD 9H JC 6D JD AS KH 6S JH',\n'AD 3D TS KS 7H JH 2D JS QD AC',\n'9C JD 7C 6D TC 6H 6C JC 3D 3S',\n'QC KC 3S JC KD 2C 8D AH QS TS',\n'AS KD 3D JD 8H 7C 8C 5C QD 6C'\n];\n--seed-contents--\n```js\nfunction pokerHands(arr) {\nreturn true;\n}\nconst testArr = [\n'8C TS KC 9H 4S 7D 2S 5D 3S AC',\n'5C AD 5D AC 9C 7C 5H 8D TD KS',\n'3H 7H 6S KC JS QH TD JC 2D 8S',\n'TH 8H 5C QS TC 9H 4D JC KS JS',\n'7C 5H KC QH JD AS KH 4C AD 4S'\n];\npokerHands(testArr);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md",
      "source_type": "git_repo"
    },
    "token_count": 24584,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "376d2ae11ef8cf21713412e0f85ebabf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ac1000cf542c50febf\ntitle: 'Problem 64: Odd period square roots'\nchallengeType: 1\nforumTopicId: 302176\ndashedName: problem-64-odd-period-square-roots\n--description--\nAll square roots are periodic when written as continued fractions and can be written in the form:\n$\\displaystyle \\quad \\quad \\sqrt{N}=a_0+\\frac 1 {a_1+\\frac 1 {a_2+ \\frac 1 {a3+ \\dots}}}$\nFor example, let us consider $\\sqrt{23}$:\n$\\quad \\quad \\sqrt{23}=4+\\sqrt{23}-4=4+\\frac 1 {\\frac 1 {\\sqrt{23}-4}}=4+\\frac 1 {1+\\frac{\\sqrt{23}-3}7}$\nIf we continue we would get the following expansion:\n$\\displaystyle \\quad \\quad \\sqrt{23}=4+\\frac 1 {1+\\frac 1 {3+ \\frac 1 {1+\\frac 1 {8+ \\dots}}}}$\nThe process can be summarized as follows:\n$\\quad \\quad a_0=4, \\frac 1 {\\sqrt{23}-4}=\\frac {\\sqrt{23}+4} 7=1+\\frac {\\sqrt{23}-3} 7$\n$\\quad \\quad a_1=1, \\frac 7 {\\sqrt{23}-3}=\\frac {7(\\sqrt{23}+3)} {14}=3+\\frac {\\sqrt{23}-3} 2$\n$\\quad \\quad a_2=3, \\frac 2 {\\sqrt{23}-3}=\\frac {2(\\sqrt{23}+3)} {14}=1+\\frac {\\sqrt{23}-4} 7$\n$\\quad \\quad a_3=1, \\frac 7 {\\sqrt{23}-4}=\\frac {7(\\sqrt{23}+4)} 7=8+\\sqrt{23}-4$\n$\\quad \\quad a_4=8, \\frac 1 {\\sqrt{23}-4}=\\frac {\\sqrt{23}+4} 7=1+\\frac {\\sqrt{23}-3} 7$\n$\\quad \\quad a_5=1, \\frac 7 {\\sqrt{23}-3}=\\frac {7 (\\sqrt{23}+3)} {14}=3+\\frac {\\sqrt{23}-3} 2$\n$\\quad \\quad a_6=3, \\frac 2 {\\sqrt{23}-3}=\\frac {2(\\sqrt{23}+3)} {14}=1+\\frac {\\sqrt{23}-4} 7$\n$\\quad \\quad a_7=1, \\frac 7 {\\sqrt{23}-4}=\\frac {7(\\sqrt{23}+4)} {7}=8+\\sqrt{23}-4$\nIt can be seen that the sequence is repeating",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
      "source_type": "git_repo"
    },
    "token_count": 636,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "80dbb65cc863d4f8a72b28c9a0aa8f0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "$\\quad \\quad a_1=1, \\frac 7 {\\sqrt{23}-3}=\\frac {7(\\sqrt{23}+3)} {14}=3+\\frac {\\sqrt{23}-3} 2$ $\\quad \\quad a_2=3, \\frac 2 {\\sqrt{23}-3}=\\frac {2(\\sqrt{23}+3)} {14}=1+\\frac {\\sqrt{23}-4} 7$ $\\quad \\quad a_3=1, \\frac 7 {\\sqrt{23}-4}=\\frac {7(\\sqrt{23}+4)} 7=8+\\sqrt{23}-4$ $\\quad \\quad a_4=8, \\frac 1 {\\sqrt{23}-4}=\\frac {\\sqrt{23}+4} 7=1+\\frac {\\sqrt{23}-3} 7$ $\\quad \\quad a_5=1, \\frac 7 {\\sqrt{23}-3}=\\frac {7 (\\sqrt{23}+3)} {14}=3+\\frac {\\sqrt{23}-3} 2$ $\\quad \\quad a_6=3, \\frac 2 {\\sqrt{23}-3}=\\frac {2(\\sqrt{23}+3)} {14}=1+\\frac {\\sqrt{23}-4} 7$ $\\quad \\quad a_7=1, \\frac 7 {\\sqrt{23}-4}=\\frac {7(\\sqrt{23}+4)} {7}=8+\\sqrt{23}-4$ It can be seen that the sequence is repeatingFor conciseness, we use the notation $\\sqrt{23}=[4;(1,3,1,8)]$, to indicate that the block (1,3,1,8) repeats indefinitely",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a64f5fa133920511d578de170b8973fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2 {\\sqrt{23}-3}=\\frac {2(\\sqrt{23}+3)} {14}=1+\\frac {\\sqrt{23}-4} 7$ $\\quad \\quad a_3=1, \\frac 7 {\\sqrt{23}-4}=\\frac {7(\\sqrt{23}+4)} 7=8+\\sqrt{23}-4$ $\\quad \\quad a_4=8, \\frac 1 {\\sqrt{23}-4}=\\frac {\\sqrt{23}+4} 7=1+\\frac {\\sqrt{23}-3} 7$ $\\quad \\quad a_5=1, \\frac 7 {\\sqrt{23}-3}=\\frac {7 (\\sqrt{23}+3)} {14}=3+\\frac {\\sqrt{23}-3} 2$ $\\quad \\quad a_6=3, \\frac 2 {\\sqrt{23}-3}=\\frac {2(\\sqrt{23}+3)} {14}=1+\\frac {\\sqrt{23}-4} 7$ $\\quad \\quad a_7=1, \\frac 7 {\\sqrt{23}-4}=\\frac {7(\\sqrt{23}+4)} {7}=8+\\sqrt{23}-4$ It can be seen that the sequence is repeatingFor conciseness, we use the notation $\\sqrt{23}=[4;(1,3,1,8)]$, to indicate that the block (1,3,1,8) repeats indefinitelyThe first ten continued fraction representations of (irrational) square roots are:\n$\\quad \\quad \\sqrt{2}=[1;(2)]$, period = 1\n$\\quad \\quad \\sqrt{3}=[1;(1,2)]$, period = 2\n$\\quad \\quad \\sqrt{5}=[2;(4)]$, period = 1\n$\\quad \\quad \\sqrt{6}=[2;(2,4)]$, period = 2\n$\\quad \\quad \\sqrt{7}=[2;(1,1,1,4)]$, period = 4\n$\\quad \\quad \\sqrt{8}=[2;(1,4)]$, period = 2\n$\\quad \\quad \\sqrt{10}=[3;(6)]$, period = 1\n$\\quad \\quad \\sqrt{11}=[3;(3,6)]$, period = 2\n$\\quad \\quad \\sqrt{12}=[3;(2,6)]$, period = 2\n$\\quad \\quad \\sqrt{13}=[3;(1,1,1,1,6)]$, period = 5\nExactly four continued fractions, for $N \\le 13$, have an odd period",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
      "source_type": "git_repo"
    },
    "token_count": 577,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "89a0afb4b3aabafc8e706b57986bd583",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(irrational) square roots are: $\\quad \\quad \\sqrt{2}=[1;(2)]$, period = 1 $\\quad \\quad \\sqrt{3}=[1;(1,2)]$, period = 2 $\\quad \\quad \\sqrt{5}=[2;(4)]$, period = 1 $\\quad \\quad \\sqrt{6}=[2;(2,4)]$, period = 2 $\\quad \\quad \\sqrt{7}=[2;(1,1,1,4)]$, period = 4 $\\quad \\quad \\sqrt{8}=[2;(1,4)]$, period = 2 $\\quad \\quad \\sqrt{10}=[3;(6)]$, period = 1 $\\quad \\quad \\sqrt{11}=[3;(3,6)]$, period = 2 $\\quad \\quad \\sqrt{12}=[3;(2,6)]$, period = 2 $\\quad \\quad \\sqrt{13}=[3;(1,1,1,1,6)]$, period = 5 Exactly four continued fractions, for $N \\le 13$, have an odd periodHow many continued fractions for $N \\le n$ have an odd period --hints--\noddPeriodSqrts(13) should return a number js\nassert(typeof oddPeriodSqrts(13) === 'number');\noddPeriodSqrts(500) should return 83 js\nassert strictEqual(oddPeriodSqrts(500), 83);\noddPeriodSqrts(1000) should return 152 js\nassert strictEqual(oddPeriodSqrts(1000), 152);\noddPeriodSqrts(5000) should return 690 js\nassert strictEqual(oddPeriodSqrts(5000), 690);\noddPeriodSqrts(10000) should return 1322 js\nassert strictEqual(oddPeriodSqrts(10000), 1322);\n--seed--\n--seed-contents--\n```js\nfunction oddPeriodSqrts(n) {\nreturn true;\n}\noddPeriodSqrts(13);\n```\n--solutions--\n```js\nfunction oddPeriodSqrts(n) {\n// Based on https://www mathblog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "e98abfb6868af4b32d8fc0f7ac186072",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "periodHow many continued fractions for $N \\le n$ have an odd period --hints-- oddPeriodSqrts(13) should return a number js assert(typeof oddPeriodSqrts(13) === 'number'); oddPeriodSqrts(500) should return 83 js assert strictEqual(oddPeriodSqrts(500), 83); oddPeriodSqrts(1000) should return 152 js assert strictEqual(oddPeriodSqrts(1000), 152); oddPeriodSqrts(5000) should return 690 js assert strictEqual(oddPeriodSqrts(5000), 690); oddPeriodSqrts(10000) should return 1322 js assert strictEqual(oddPeriodSqrts(10000), 1322); --seed-- --seed-contents-- ```js function oddPeriodSqrts(n) { return true; } oddPeriodSqrts(13); ``` --solutions-- ```js function oddPeriodSqrts(n) { // Based on https://www mathblogdk/project-euler-continued-fractions-odd-period/\nfunction getPeriod(num) {\nlet period = 0;\nlet m = 0;\nlet d = 1;\nlet a = Math floor(Math sqrt(num));\nconst a0 = a;\nwhile (2 * a0 == a) {\nm = d * a - m;\nd = Math floor((num - m ** 2) / d);\na = Math floor((Math sqrt(num) + m) / d);\nperiod++;\n}\nreturn period;\n}\nfunction isPerfectSquare(num) {\nreturn Number isInteger(Math sqrt(num));\n}\nlet counter = 0;\nfor (let i = 2; i <= n; i++) {\nif ( isPerfectSquare(i)) {\nif (getPeriod(i) % 2 == 0) {\ncounter++;\n}\n}\n}\nreturn counter;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md",
      "source_type": "git_repo"
    },
    "token_count": 397,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "172e1ff5135e0842bcfb7cdf5619d7be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-66-diophantine-equation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ae1000cf542c50fec1\ntitle: 'Problem 66: Diophantine equation'\nchallengeType: 1\nforumTopicId: 302178\ndashedName: problem-66-diophantine-equation\n--description--\nConsider quadratic Diophantine equations of the form:\nx2 – Dy2 = 1\nFor example, when D=13, the minimal solution in x is 6492 – 13×1802 = 1 It can be assumed that there are no solutions in positive integers when D is square By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:\n32 – 2×22 = 1\n22 – 3×12 = 1\n92 – 5×42 = 1\n52 – 6×22 = 1\n82 – 7×32 = 1\nHence, by considering minimal solutions in x for D ≤ 7, the largest x is obtained when D=5 Find the value of D ≤ n in minimal solutions of x for which the largest value of x is obtained --hints--\ndiophantineEquation(7) should return a number js\nassert(typeof diophantineEquation(7) === 'number');\ndiophantineEquation(7) should return 5 js\nassert strictEqual(diophantineEquation(7), 5);\ndiophantineEquation(100) should return 61 js\nassert strictEqual(diophantineEquation(100), 61);\ndiophantineEquation(409) should return 409 js\nassert strictEqual(diophantineEquation(409), 409);\ndiophantineEquation(500) should return 421 js\nassert strictEqual(diophantineEquation(500), 421);\ndiophantineEquation(1000) should return 661 js\nassert strictEqual(diophantineEquation(1000), 661);\n--seed--\n--seed-contents--\n```js\nfunction diophantineEquation(n) {\nreturn true;\n}\ndiophantineEquation(7);\n```\n--solutions--\n```js\nfunction diophantineEquation(n) {\n// Based on https://www mathblog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-66-diophantine-equation.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "35f3d8a26fe555eaa92293e2fdf806be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-66-diophantine-equation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of x is obtained --hints-- diophantineEquation(7) should return a number js assert(typeof diophantineEquation(7) === 'number'); diophantineEquation(7) should return 5 js assert strictEqual(diophantineEquation(7), 5); diophantineEquation(100) should return 61 js assert strictEqual(diophantineEquation(100), 61); diophantineEquation(409) should return 409 js assert strictEqual(diophantineEquation(409), 409); diophantineEquation(500) should return 421 js assert strictEqual(diophantineEquation(500), 421); diophantineEquation(1000) should return 661 js assert strictEqual(diophantineEquation(1000), 661); --seed-- --seed-contents-- ```js function diophantineEquation(n) { return true; } diophantineEquation(7); ``` --solutions-- ```js function diophantineEquation(n) { // Based on https://www mathblogdk/project-euler-66-diophantine-equation/\nfunction isSolution(D, numerator, denominator) {\nreturn numerator * numerator - BigInt(D) * denominator * denominator === 1n;\n}\nlet result = 0;\nlet biggestX = 0;\nfor (let D = 2; D <= n; D++) {\nlet boundary = Math floor(Math sqrt(D));\nif (boundary ** 2 === D) {\ncontinue;\n}\nlet m = 0n;\nlet d = 1n;\nlet a = BigInt(boundary);\nlet [numerator, prevNumerator] = [a, 1n];\nlet [denominator, prevDenominator] = [1n, 0n];\nwhile ( isSolution(D, numerator, denominator)) {\nm = d * a - m;\nd = (BigInt(D) - m * m) / d;\na = (BigInt(boundary) + m) / d;\n[numerator, prevNumerator] = [a * numerator + prevNumerator, numerator];\n[denominator, prevDenominator] = [\na * denominator + prevDenominator,\ndenominator\n];\n}\nif (numerator > biggestX) {\nbiggestX = numerator;\nresult = D;\n}\n}\nreturn result;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-66-diophantine-equation.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a1843bcd7560f93edaf0422ed57f8689",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-68-magic-5-gon-ring.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b01000cf542c50fec3\ntitle: 'Problem 68: Magic 5-gon ring'\nchallengeType: 1\nforumTopicId: 302180\ndashedName: problem-68-magic-5-gon-ring\n--description--\nConsider the following \"magic\" 3-gon ring, filled with the numbers 1 to 6, and each line adding to nine Working clockwise, and starting from the group of three with the numerically lowest external node (4,3,2 in this example), each solution can be described uniquely For example, the above solution can be described by the set: 4,3,2; 6,2,1; 5,1,3 It is possible to complete the ring with four different totals: 9, 10, 11, and 12 There are eight solutions in total | Total | Solution Set |\n| -------------------------------------- | --------------------------------------------- |\n| 9                                      | 4,2,3; 5,3,1; 6,1,2                           |\n| 9                                      | 4,3,2; 6,2,1; 5,1,3                           |\n| 10                                     | 2,3,5; 4,5,1; 6,1,3                           |\n| 10                                     | 2,5,3; 6,3,1; 4,1,5                           |\n| 11                                     | 1,4,6; 3,6,2; 5,2,4                           |\n| 11                                     | 1,6,4; 5,4,2; 3,2,6                           |\n| 12                                     | 1,5,6; 2,6,4; 3,4,5                           |\n| 12                                     | 1,6,5; 3,5,4; 2,4,6                           |\nBy concatenating each group it is possible to form 9-digit strings; the maximum string for a 3-gon ring is 432621513 Using the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings What is the maximum 16-digit string for a \"magic\" 5-gon ring",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-68-magic-5-gon-ring.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b7a43bce0cd44df63651226e18a9e749",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-68-magic-5-gon-ring.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "| 1,4,6; 3,6,2; 5,2,4 | | 11 | 1,6,4; 5,4,2; 3,2,6 | | 12 | 1,5,6; 2,6,4; 3,4,5 | | 12 | 1,6,5; 3,5,4; 2,4,6 | By concatenating each group it is possible to form 9-digit strings; the maximum string for a 3-gon ring is 432621513 Using the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings What is the maximum 16-digit string for a \"magic\" 5-gon ring--hints--\nmagic5GonRing() should return a number js\nassert(typeof magic5GonRing() === 'number');\nmagic5GonRing() should return 6531031914842725 js\nassert strictEqual(magic5GonRing(), 6531031914842725);\n--seed--\n--seed-contents--\n```js\nfunction magic5GonRing() {\nreturn true;\n}\nmagic5GonRing();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-68-magic-5-gon-ring.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f3a72ce7365a1828e435e570da18c17b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-7-10001st-prime.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3731000cf542c50fe86\ntitle: 'Problem 7: 10001st prime'\nchallengeType: 1\nforumTopicId: 302182\ndashedName: problem-7-10001st-prime\n--description--\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\nWhat is the nth prime number?\n--hints--\nnthPrime(6) should return a number.\njs\nassert.isNumber(nthPrime(6));\nnthPrime(6) should return 13.\njs\nassert.strictEqual(nthPrime(6), 13);\nnthPrime(10) should return 29.\njs\nassert.strictEqual(nthPrime(10), 29);\nnthPrime(100) should return 541.\njs\nassert.strictEqual(nthPrime(100), 541);\nnthPrime(1000) should return 7919.\njs\nassert.strictEqual(nthPrime(1000), 7919);\nnthPrime(10001) should return 104743.\njs\nassert.strictEqual(nthPrime(10001), 104743);\n--seed--\n--seed-contents--\n```js\nfunction nthPrime(n) {\nreturn true;\n}\nnthPrime(10001);\n```\n--solutions--\njs\nconst nthPrime = n => {\nlet pN = 2;\nlet step = 0;\nwhile (step < n) {\nlet isPrime = true;\nlet rootN = Math.sqrt(pN);\nfor (let i = 2; i <= rootN; i++) {\nif (!(pN % i)) {\nisPrime = false;\nbreak;\n}\n}\nisPrime ? step++ : '';\npN++;\n}\nreturn pN - 1;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1269,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-7-10001st-prime.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f263b3868b081697afbbc2c8db73b14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-70-totient-permutation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b21000cf542c50fec5\ntitle: 'Problem 70: Totient permutation'\nchallengeType: 1\nforumTopicId: 302183\ndashedName: problem-70-totient-permutation\n--description--\nEuler's Totient function, ${\\phi}(n)$ (sometimes called the phi function), is used to determine the number of positive numbers less than or equal to n which are relatively prime to n For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, ${\\phi}(9) = 6$ The number 1 is considered to be relatively prime to every positive number, so ${\\phi}(1) = 1$ Interestingly, ${\\phi}(87109) = 79180$, and it can be seen that 87109 is a permutation of 79180 Find the value of n, 1 < n < limit, for which ${\\phi}(n)$ is a permutation of n and the ratio $\\displaystyle\\frac{n}{{\\phi}(n)}$ produces a minimum --hints--\ntotientPermutation(10000) should return a number js\nassert(typeof totientPermutation(10000) === 'number');\ntotientPermutation(10000) should return 4435 js\nassert strictEqual(totientPermutation(10000), 4435);\ntotientPermutation(100000) should return 75841 js\nassert strictEqual(totientPermutation(100000), 75841);\ntotientPermutation(500000) should return 474883 js\nassert strictEqual(totientPermutation(500000), 474883);\ntotientPermutation(10000000) should return 8319823 js\nassert strictEqual(totientPermutation(10000000), 8319823);\n--seed--\n--seed-contents--\n```js\nfunction totientPermutation(limit) {\nreturn true;\n}\ntotientPermutation(10000);\n```\n--solutions--\n```js\nfunction totientPermutation(limit) {\nfunction getSievePrimes(max) {\nconst primes = [];\nconst primesMap = new Array(max)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2785,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-70-totient-permutation.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6d3bc05ecac338cb351bba8f52010854",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-70-totient-permutation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "ratio $\\displaystyle\\frac{n}{{\\phi}(n)}$ produces a minimum --hints-- totientPermutation(10000) should return a number js assert(typeof totientPermutation(10000) === 'number'); totientPermutation(10000) should return 4435 js assert strictEqual(totientPermutation(10000), 4435); totientPermutation(100000) should return 75841 js assert strictEqual(totientPermutation(100000), 75841); totientPermutation(500000) should return 474883 js assert strictEqual(totientPermutation(500000), 474883); totientPermutation(10000000) should return 8319823 js assert strictEqual(totientPermutation(10000000), 8319823); --seed-- --seed-contents-- ```js function totientPermutation(limit) { return true; } totientPermutation(10000); ``` --solutions-- ```js function totientPermutation(limit) { function getSievePrimes(max) { const primes = []; const primesMap = new Array(max)fill(true);\nprimesMap[0] = false;\nprimesMap[1] = false;\nfor (let i = 2; i < max; i += 2) {\nif (primesMap[i]) {\nprimes push(i);\nfor (let j = i * i; j < max; j += i) {\nprimesMap[j] = false;\n}\n}\nif (i === 2) {\ni = 1;\n}\n}\nreturn primes;\n}\nfunction sortDigits(number) {\nreturn number toString() split('') sort() join('');\n}\nfunction isPermutation(numberA, numberB) {\nreturn sortDigits(numberA) === sortDigits(numberB);\n}\nconst MAX_PRIME = 4000;\nconst primes = getSievePrimes(MAX_PRIME);\nlet nValue = 1;\nlet minRatio = Infinity;\nfor (let i = 1; i < primes length; i++) {\nfor (let j = i + 1; j < primes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2785,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-70-totient-permutation.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9dca1c8428e8f370ba589b6bf76676a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-70-totient-permutation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i) { primesMap[j] = false; } } if (i === 2) { i = 1; } } return primes; } function sortDigits(number) { return number toString() split('') sort() join(''); } function isPermutation(numberA, numberB) { return sortDigits(numberA) === sortDigits(numberB); } const MAX_PRIME = 4000; const primes = getSievePrimes(MAX_PRIME); let nValue = 1; let minRatio = Infinity; for (let i = 1; i < primes length; i++) { for (let j = i + 1; j < primeslength; j++) {\nconst num = primes[i] * primes[j];\nif (num > limit) {\nbreak;\n}\nconst phi = (primes[i] - 1) * (primes[j] - 1);\nconst ratio = num / phi;\nif (minRatio > ratio && isPermutation(num, phi)) {\nnValue = num;\nminRatio = ratio;\n}\n}\n}\nreturn nValue;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2785,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-70-totient-permutation.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "804d217427779af2112f94e7f0f47ca8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-69-totient-maximum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b11000cf542c50fec4\ntitle: 'Problem 69: Totient maximum'\nchallengeType: 1\nforumTopicId: 302181\ndashedName: problem-69-totient-maximum\n--description--\nEuler's Totient function, ${\\phi}(n)$ (sometimes called the phi function), is used to determine the number of numbers less than n which are relatively prime to n For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, ${\\phi}(9) = 6$ | $n$ | $\\text{Relatively Prime}$ | $\\displaystyle{\\phi}(n)$ | $\\displaystyle\\frac{n}{{\\phi}(n)}$ |\n| --- | ------------------------- | ------------------------ | ---------------------------------- |\n| 2   | 1                         | 1                        | 2                                  |\n| 3   | 1,2                       | 2                        | 1 5                                |\n| 4   | 1,3                       | 2                        | 2                                  |\n| 5   | 1,2,3,4                   | 4                        | 1 25                               |\n| 6   | 1,5                       | 2                        | 3                                  |\n| 7   | 1,2,3,4,5,6               | 6                        | 1 1666 |\n| 8   | 1,3,5,7                   | 4                        | 2                                  |\n| 9   | 1,2,4,5,7,8               | 6                        | 1 5                                |\n| 10  | 1,3,7,9                   | 4                        | 2 5                                |\nIt can be seen that n = 6 produces a maximum $\\displaystyle\\frac{n}{{\\phi}(n)}$ for n ≤ 10 Find the value of n ≤ limit for which $\\displaystyle\\frac{n}{{\\phi(n)}}$ is a maximum --hints--\ntotientMaximum(10) should return a number js\nassert(typeof totientMaximum(10) === 'number');\ntotientMaximum(10) should return 6 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-69-totient-maximum.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1bd3704d35e5325b477295ef2ee102eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-69-totient-maximum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "| | 8 | 1,3,5,7 | 4 | 2 | | 9 | 1,2,4,5,7,8 | 6 | 1 5 | | 10 | 1,3,7,9 | 4 | 2 5 | It can be seen that n = 6 produces a maximum $\\displaystyle\\frac{n}{{\\phi}(n)}$ for n ≤ 10 Find the value of n ≤ limit for which $\\displaystyle\\frac{n}{{\\phi(n)}}$ is a maximum --hints-- totientMaximum(10) should return a number js assert(typeof totientMaximum(10) === 'number'); totientMaximum(10) should return 6 js assertstrictEqual(totientMaximum(10), 6);\ntotientMaximum(10000) should return 2310 js\nassert strictEqual(totientMaximum(10000), 2310);\ntotientMaximum(500000) should return 30030 js\nassert strictEqual(totientMaximum(500000), 30030);\ntotientMaximum(1000000) should return 510510 js\nassert strictEqual(totientMaximum(1000000), 510510);\n--seed--\n--seed-contents--\n```js\nfunction totientMaximum(limit) {\nreturn true;\n}\ntotientMaximum(10);\n```\n--solutions--\n```js\nfunction totientMaximum(limit) {\nfunction getSievePrimes(max) {\nconst primesMap = new Array(max) fill(true);\nprimesMap[0] = false;\nprimesMap[1] = false;\nconst primes = [];\nfor (let i = 2; i < max; i = i + 2) {\nif (primesMap[i]) {\nprimes push(i);\nfor (let j = i * i; j < max; j = j + i) {\nprimesMap[j] = false;\n}\n}\nif (i === 2) {\ni = 1;\n}\n}\nreturn primes;\n}\nconst MAX_PRIME = 50;\nconst primes = getSievePrimes(MAX_PRIME);\nlet result = 1;\nfor (let i = 0; result * primes[i] < limit; i++) {\nresult *= primes[i];\n}\nreturn result;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-69-totient-maximum.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "69d918161ced2c2ba33f0450d5e51ba4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-71-ordered-fractions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b31000cf542c50fec6\ntitle: 'Problem 71: Ordered fractions'\nchallengeType: 1\nforumTopicId: 302184\ndashedName: problem-71-ordered-fractions\n--description--\nConsider the fraction, $\\frac{n}{d}$, where n and d are positive integers If n < d and highest common factor, ${{HCF}(n, d)} = 1$, it is called a reduced proper fraction If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:\n$$\\frac{1}{8}, \\frac{1}{7}, \\frac{1}{6}, \\frac{1}{5}, \\frac{1}{4}, \\frac{2}{7}, \\frac{1}{3}, \\frac{3}{8}, \\frac{\\textbf2}{\\textbf5}, \\frac{3}{7}, \\frac{1}{2}, \\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$\nIt can be seen that $\\frac{2}{5}$ is the fraction immediately to the left of $\\frac{3}{7}$ By listing the set of reduced proper fractions for d ≤ limit in ascending order of size, find the numerator of the fraction immediately to the left of $\\frac{3}{7}$ --hints--\norderedFractions(8) should return a number js\nassert(typeof orderedFractions(8) === 'number');\norderedFractions(8) should return 2 js\nassert strictEqual(orderedFractions(8), 2);\norderedFractions(10) should return 2 js\nassert strictEqual(orderedFractions(10), 2);\norderedFractions(9994) should return 4283 js\nassert strictEqual(orderedFractions(9994), 4283);\norderedFractions(500000) should return 214283 js\nassert strictEqual(orderedFractions(500000), 214283);\norderedFractions(1000000) should return 428570 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-71-ordered-fractions.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "058f0fb3ac5e916ac58664e85e6c612b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-71-ordered-fractions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the set of reduced proper fractions for d ≤ limit in ascending order of size, find the numerator of the fraction immediately to the left of $\\frac{3}{7}$ --hints-- orderedFractions(8) should return a number js assert(typeof orderedFractions(8) === 'number'); orderedFractions(8) should return 2 js assert strictEqual(orderedFractions(8), 2); orderedFractions(10) should return 2 js assert strictEqual(orderedFractions(10), 2); orderedFractions(9994) should return 4283 js assert strictEqual(orderedFractions(9994), 4283); orderedFractions(500000) should return 214283 js assert strictEqual(orderedFractions(500000), 214283); orderedFractions(1000000) should return 428570 js assertstrictEqual(orderedFractions(1000000), 428570);\n--seed--\n--seed-contents--\n```js\nfunction orderedFractions(limit) {\nreturn true;\n}\norderedFractions(8);\n```\n--solutions--\n```js\nfunction orderedFractions(limit) {\nconst fractions = [];\nconst fractionValues = {};\nconst highBoundary = 3 / 7;\nlet lowBoundary = 2 / 7;\nfor (let denominator = limit; denominator > 2; denominator--) {\nlet numerator = Math floor((3 * denominator - 1) / 7);\nlet value = numerator / denominator;\nif (value > highBoundary || value < lowBoundary) {\ncontinue;\n}\nfractionValues[value] = [numerator, denominator];\nfractions push(value);\nlowBoundary = value;\n}\nfractions sort();\nreturn fractionValues[fractions[fractions length - 1]][0];\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-71-ordered-fractions.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6b3244e4e208d2ec9ea47ecc39477a21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-72-counting-fractions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b41000cf542c50fec7\ntitle: 'Problem 72: Counting fractions'\nchallengeType: 1\nforumTopicId: 302185\ndashedName: problem-72-counting-fractions\n--description--\nConsider the fraction, $\\frac{n}{d}$, where n and d are positive integers If n < d and highest common factor, ${HCF}(n, d) = 1$, it is called a reduced proper fraction If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:\n$$\\frac{1}{8}, \\frac{1}{7}, \\frac{1}{6}, \\frac{1}{5}, \\frac{1}{4}, \\frac{2}{7}, \\frac{1}{3}, \\frac{3}{8}, \\frac{2}{5}, \\frac{3}{7}, \\frac{1}{2}, \\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$\nIt can be seen that there are 21 elements in this set How many elements would be contained in the set of reduced proper fractions for d ≤ limit --hints--\ncountingFractions(8) should return a number js\nassert(typeof countingFractions(8) === 'number');\ncountingFractions(8) should return 21 js\nassert strictEqual(countingFractions(8), 21);\ncountingFractions(20000) should return 121590395 js\nassert strictEqual(countingFractions(20000), 121590395);\ncountingFractions(500000) should return 75991039675 js\nassert strictEqual(countingFractions(500000), 75991039675);\ncountingFractions(1000000) should return 303963552391 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-72-counting-fractions.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a28cc2a512491a85e2aa73c2aaccce46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-72-counting-fractions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$ It can be seen that there are 21 elements in this set How many elements would be contained in the set of reduced proper fractions for d ≤ limit --hints-- countingFractions(8) should return a number js assert(typeof countingFractions(8) === 'number'); countingFractions(8) should return 21 js assert strictEqual(countingFractions(8), 21); countingFractions(20000) should return 121590395 js assert strictEqual(countingFractions(20000), 121590395); countingFractions(500000) should return 75991039675 js assert strictEqual(countingFractions(500000), 75991039675); countingFractions(1000000) should return 303963552391 js assertstrictEqual(countingFractions(1000000), 303963552391);\n--seed--\n--seed-contents--\n```js\nfunction countingFractions(limit) {\nreturn true;\n}\ncountingFractions(8);\n```\n--solutions--\n```js\nfunction countingFractions(limit) {\nconst phi = {};\nlet count = 0;\nfor (let i = 2; i <= limit; i++) {\nif ( phi[i]) {\nphi[i] = i;\n}\nif (phi[i] === i) {\nfor (let j = i; j <= limit; j += i) {\nif ( phi[j]) {\nphi[j] = j;\n}\nphi[j] = (phi[j] / i) * (i - 1);\n}\n}\ncount += phi[i];\n}\nreturn count;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-72-counting-fractions.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c6dbeaefc5736c464fd238a9d3eec318",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-74-digit-factorial-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b61000cf542c50fec9\ntitle: 'Problem 74: Digit factorial chains'\nchallengeType: 1\nforumTopicId: 302187\ndashedName: problem-74-digit-factorial-chains\n--description--\nThe number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:\n$$1 + 4 + 5 = 1 + 24 + 120 = 145$$\nPerhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:\n$$\\begin{align}\n&169 → 363601 → 1454 → 169\\\\\n&871 → 45361 → 871\\\\\n&872 → 45362 → 872\\\\\n\\end{align}$$\nIt is not difficult to prove that EVERY starting number will eventually get stuck in a loop For example,\n$$\\begin{align}\n&69 → 363600 → 1454 → 169 → 363601\\ (→ 1454)\\\\\n&78 → 45360 → 871 → 45361\\ (→ 871)\\\\\n&540 → 145\\ (→ 145)\\\\\n\\end{align}$$\nStarting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms How many chains, with a starting number below n, contain exactly sixty non-repeating terms --hints--\ndigitFactorialChains(2000) should return a number js\nassert(typeof digitFactorialChains(2000) === 'number');\ndigitFactorialChains(2000) should return 6 js\nassert strictEqual(digitFactorialChains(2000), 6);\ndigitFactorialChains(100000) should return 42 js\nassert strictEqual(digitFactorialChains(100000), 42);\ndigitFactorialChains(500000) should return 282 js\nassert strictEqual(digitFactorialChains(500000), 282);\ndigitFactorialChains(1000000) should return 402 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-74-digit-factorial-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5919b4ae97bc68185fcf3f9f37d2e32f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-74-digit-factorial-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms How many chains, with a starting number below n, contain exactly sixty non-repeating terms --hints-- digitFactorialChains(2000) should return a number js assert(typeof digitFactorialChains(2000) === 'number'); digitFactorialChains(2000) should return 6 js assert strictEqual(digitFactorialChains(2000), 6); digitFactorialChains(100000) should return 42 js assert strictEqual(digitFactorialChains(100000), 42); digitFactorialChains(500000) should return 282 js assert strictEqual(digitFactorialChains(500000), 282); digitFactorialChains(1000000) should return 402 js assertstrictEqual(digitFactorialChains(1000000), 402);\n--seed--\n--seed-contents--\n```js\nfunction digitFactorialChains(n) {\nreturn true;\n}\ndigitFactorialChains(2000);\n```\n--solutions--\n```js\nfunction digitFactorialChains(n) {\nfunction sumDigitsFactorials(number) {\nlet sum = 0;\nwhile (number > 0) {\nsum += factorials[number % 10];\nnumber = Math floor(number / 10);\n}\nreturn sum;\n}\nconst factorials = [1];\nfor (let i = 1; i < 10; i++) {\nfactorials push(factorials[factorials length - 1] * i);\n}\nconst sequences = {\n169: 3,\n871: 2,\n872: 2,\n1454: 3,\n45362: 2,\n45461: 2,\n3693601: 3\n};\nlet result = 0;\nfor (let i = 2; i < n; i++) {\nlet curNum = i;\nlet chainLength = 0;\nconst curSequence = [];\nwhile (curSequence indexOf(curNum) === -1) {\ncurSequence push(curNum);\ncurNum = sumDigitsFactorials(curNum);\nchainLength++;\nif (sequences hasOwnProperty(curNum) > 0) {\nchainLength += sequences[curNum];\nbreak;\n}\n}\nif (chainLength === 60) {\nresult++;\n}\nfor (let j = 1; j < curSequence",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-74-digit-factorial-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3539ba4caba51a607624e8b85530ff4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-74-digit-factorial-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "872: 2, 1454: 3, 45362: 2, 45461: 2, 3693601: 3 }; let result = 0; for (let i = 2; i < n; i++) { let curNum = i; let chainLength = 0; const curSequence = []; while (curSequence indexOf(curNum) === -1) { curSequence push(curNum); curNum = sumDigitsFactorials(curNum); chainLength++; if (sequences hasOwnProperty(curNum) > 0) { chainLength += sequences[curNum]; break; } } if (chainLength === 60) { result++; } for (let j = 1; j < curSequencelength; j++) {\nsequences[curSequence[j]] = chainLength - j;\n}\n}\nreturn result;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-74-digit-factorial-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5e52fe9997b2545c0d7e939b70149944",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b61000cf542c50fec8\ntitle: 'Problem 73: Counting fractions in a range'\nchallengeType: 1\nforumTopicId: 302186\ndashedName: problem-73-counting-fractions-in-a-range\n--description--\nConsider the fraction, $\\frac{n}{d}$, where n and d are positive integers If n < d and highest common factor, ${HCF}(n, d) = 1$, it is called a reduced proper fraction If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:\n$$\\frac{1}{8}, \\frac{1}{7}, \\frac{1}{6}, \\frac{1}{5}, \\frac{1}{4}, \\frac{2}{7}, \\frac{1}{3}, \\mathbf{\\frac{3}{8}, \\frac{2}{5}, \\frac{3}{7}}, \\frac{1}{2}, \\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$\nIt can be seen that there are 3 fractions between $\\frac{1}{3}$ and $\\frac{1}{2}$ How many fractions lie between $\\frac{1}{3}$ and $\\frac{1}{2}$ in the sorted set of reduced proper fractions for d ≤ limit --hints--\ncountingFractionsInARange(8) should return a number js\nassert(typeof countingFractionsInARange(8) === 'number');\ncountingFractionsInARange(8) should return 3 js\nassert strictEqual(countingFractionsInARange(8), 3);\ncountingFractionsInARange(1000) should return 50695 js\nassert strictEqual(countingFractionsInARange(1000), 50695);\ncountingFractionsInARange(6000) should return 1823861 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3168,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "402f0ce649ba8ce3008389cb4a4fd314",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$ It can be seen that there are 3 fractions between $\\frac{1}{3}$ and $\\frac{1}{2}$ How many fractions lie between $\\frac{1}{3}$ and $\\frac{1}{2}$ in the sorted set of reduced proper fractions for d ≤ limit --hints-- countingFractionsInARange(8) should return a number js assert(typeof countingFractionsInARange(8) === 'number'); countingFractionsInARange(8) should return 3 js assert strictEqual(countingFractionsInARange(8), 3); countingFractionsInARange(1000) should return 50695 js assert strictEqual(countingFractionsInARange(1000), 50695); countingFractionsInARange(6000) should return 1823861 js assertstrictEqual(countingFractionsInARange(6000), 1823861);\ncountingFractionsInARange(12000) should return 7295372 js\nassert strictEqual(countingFractionsInARange(12000), 7295372);\n--seed--\n--seed-contents--\n```js\nfunction countingFractionsInARange(limit) {\nreturn true;\n}\ncountingFractionsInARange(8);\n```\n--solutions--\n```js\nclass PrimeSeive {\nconstructor(num) {\nconst seive = Array(Math floor((num - 1) / 2)) fill(true);\nconst upper = Math floor((num - 1) / 2);\nconst sqrtUpper = Math floor((Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3168,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "cfd96fc01c10532b72ac80a1555458db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "countingFractionsInARange(8) === 'number'); countingFractionsInARange(8) should return 3 js assert strictEqual(countingFractionsInARange(8), 3); countingFractionsInARange(1000) should return 50695 js assert strictEqual(countingFractionsInARange(1000), 50695); countingFractionsInARange(6000) should return 1823861 js assertstrictEqual(countingFractionsInARange(6000), 1823861); countingFractionsInARange(12000) should return 7295372 js assert strictEqual(countingFractionsInARange(12000), 7295372); --seed-- --seed-contents-- ```js function countingFractionsInARange(limit) { return true; } countingFractionsInARange(8); ``` --solutions-- ```js class PrimeSeive { constructor(num) { const seive = Array(Math floor((num - 1) / 2)) fill(true); const upper = Math floor((num - 1) / 2); const sqrtUpper = Math floor((Mathsqrt(num) - 1) / 2);\nfor (let i = 0; i <= sqrtUpper; i++) {\nif (seive[i]) {\n// Mark value in seive array\nconst prime = 2 * i + 3;\n// Mark all multiples of this number as false (not prime)\nconst primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\nfor (let j = primeSquaredIndex; j < upper; j += prime) {\nseive[j] = false;\n}\n}\n}\nthis _seive = seive;\n}\nisPrime(num) {\nreturn num === 2 true\n: num % 2 === 0 false\n: this isOddPrime(num);\n}\nisOddPrime(num) {\nreturn this _seive[(num - 3) / 2];\n}\n};\nconst primeSeive = new PrimeSeive(12001);\nfunction countingFractionsInARange(num) {\nconst moebius = Array(num + 1) fill(1)\n// Generate Moebis function terms\nfor (let i = 2; i <= num; i++) {\nif ( primeSeive",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3168,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "980a39a5cecd75d415a1c614cd808f22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+= prime) { seive[j] = false; } } } this _seive = seive; } isPrime(num) { return num === 2 true : num % 2 === 0 false : this isOddPrime(num); } isOddPrime(num) { return this _seive[(num - 3) / 2]; } }; const primeSeive = new PrimeSeive(12001); function countingFractionsInARange(num) { const moebius = Array(num + 1) fill(1) // Generate Moebis function terms for (let i = 2; i <= num; i++) { if ( primeSeiveisPrime(i)) continue;\nfor (let j = i; j <= num; j += i) moebius[j] *= -1;\nfor (let j = i * i; j <= num; j += i * i) moebius[j] = 0;\n}\n// Evaluate totient sum\nlet sum = 0;\nfor (let i = 1; i <= num; i++) {\nconst coeff = Math floor(num / i - 2);\nsum += moebius[i] * Math floor(coeff * coeff / 12 + 0 5);\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3168,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "66e856f9e5994d895da4a32244a4dff5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-76-counting-summations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b81000cf542c50fecb\ntitle: 'Problem 76: Counting summations'\nchallengeType: 1\nforumTopicId: 302189\ndashedName: problem-76-counting-summations\n--description--\nIt is possible to write five as a sum in exactly six different ways:\n4 + 1\n3 + 2\n3 + 1 + 1\n2 + 2 + 1\n2 + 1 + 1 + 1\n1 + 1 + 1 + 1 + 1\nHow many different ways can n be written as a sum of at least two positive integers?\n--hints--\ncountingSummations(5) should return a number.\njs\nassert(typeof countingSummations(5) === 'number');\ncountingSummations(5) should return 6.\njs\nassert.strictEqual(countingSummations(5), 6);\ncountingSummations(20) should return 626.\njs\nassert.strictEqual(countingSummations(20), 626);\ncountingSummations(50) should return 204225.\njs\nassert.strictEqual(countingSummations(50), 204225);\ncountingSummations(100) should return 190569291.\njs\nassert.strictEqual(countingSummations(100), 190569291);\n--seed--\n--seed-contents--\n```js\nfunction countingSummations(n) {\nreturn true;\n}\ncountingSummations(5);\n```\n--solutions--\n```js\nfunction countingSummations(n) {\nconst combinations = new Array(n + 1).fill(0);\ncombinations[0] = 1;\nfor (let i = 1; i < n; i++) {\nfor (let j = i; j < n + 1; j++) {\ncombinations[j] += combinations[j - i];\n}\n}\nreturn combinations[n];\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1454,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-76-counting-summations.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bc2d7023d9830ab0717f90b929ed4145",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-75-singular-integer-right-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b71000cf542c50feca\ntitle: 'Problem 75: Singular integer right triangles'\nchallengeType: 1\nforumTopicId: 302188\ndashedName: problem-75-singular-integer-right-triangles\n--description--\nIt turns out that 12 cm is the smallest length of wire that can be bent to form an integer sided right angle triangle in exactly one way, but there are many more examples 12 cm: (3,4,5)\n24 cm: (6,8,10)\n30 cm: (5,12,13)\n36 cm: (9,12,15)\n40 cm: (8,15,17)\n48 cm: (12,16,20)\nIn contrast, some lengths of wire, like 20 cm, cannot be bent to form an integer sided right angle triangle, and other lengths allow more than one solution to be found; for example, using 120 cm it is possible to form exactly three different integer sided right angle triangles 120 cm: (30,40,50), (20,48,52), (24,45,51)\nGiven that L is the length of the wire, for how many values of L ≤ n can exactly one, integer sided right angle, triangle be formed --hints--\nsingularIntRightTriangles(48) should return a number js\nassert(typeof singularIntRightTriangles(48) === 'number');\nsingularIntRightTriangles(48) should return 6 js\nassert strictEqual(singularIntRightTriangles(48), 6);\nsingularIntRightTriangles(700000) should return 75783 js\nassert strictEqual(singularIntRightTriangles(700000), 75783);\nsingularIntRightTriangles(1000000) should return 107876 js\nassert strictEqual(singularIntRightTriangles(1000000), 107876);\nsingularIntRightTriangles(1500000) should return 161667 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-75-singular-integer-right-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bd2b86c11f4a007a1f71d077da2cf039",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-75-singular-integer-right-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "right angle triangles 120 cm: (30,40,50), (20,48,52), (24,45,51) Given that L is the length of the wire, for how many values of L ≤ n can exactly one, integer sided right angle, triangle be formed --hints-- singularIntRightTriangles(48) should return a number js assert(typeof singularIntRightTriangles(48) === 'number'); singularIntRightTriangles(48) should return 6 js assert strictEqual(singularIntRightTriangles(48), 6); singularIntRightTriangles(700000) should return 75783 js assert strictEqual(singularIntRightTriangles(700000), 75783); singularIntRightTriangles(1000000) should return 107876 js assert strictEqual(singularIntRightTriangles(1000000), 107876); singularIntRightTriangles(1500000) should return 161667 js assertstrictEqual(singularIntRightTriangles(1500000), 161667);\n--seed--\n--seed-contents--\n```js\nfunction singularIntRightTriangles(n) {\nreturn true;\n}\nsingularIntRightTriangles(48);\n```\n--solutions--\n```js\nfunction singularIntRightTriangles(limit) {\nfunction euclidFormula(m, n) {\nreturn [m ** 2 - n ** 2, 2 * m * n, m ** 2 + n ** 2];\n}\nfunction gcd(numberA, numberB) {\nif (numberB === 0) {\nreturn numberA;\n}\nreturn gcd(numberB, numberA % numberB);\n}\nfunction notBothOdd(numberA, numberB) {\nreturn (numberA + numberB) % 2 === 1;\n}\nfunction areCoprime(numberA, numberB) {\nreturn gcd(numberA, numberB) === 1;\n}\nconst trianglesWithPerimeter = new Array(limit + 1) fill(0);\nconst mLimit = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-75-singular-integer-right-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "78d47fb4aa7a2f4b474e8a9a5e130c35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-75-singular-integer-right-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "n) { return [m ** 2 - n ** 2, 2 * m * n, m ** 2 + n ** 2]; } function gcd(numberA, numberB) { if (numberB === 0) { return numberA; } return gcd(numberB, numberA % numberB); } function notBothOdd(numberA, numberB) { return (numberA + numberB) % 2 === 1; } function areCoprime(numberA, numberB) { return gcd(numberA, numberB) === 1; } const trianglesWithPerimeter = new Array(limit + 1) fill(0); const mLimit = Mathsqrt(limit / 2);\nfor (let m = 2; m < mLimit; m++) {\nfor (let n = 1; n < m; n++) {\nif (notBothOdd(m, n) && areCoprime(m, n)) {\nconst [sideA, sideB, sideC] = euclidFormula(m, n);\nconst perimeter = sideA + sideB + sideC;\nlet curPerimeter = perimeter;\nwhile (curPerimeter <= limit) {\ntrianglesWithPerimeter[curPerimeter]++;\ncurPerimeter += perimeter;\n}\n}\n}\n}\nreturn trianglesWithPerimeter filter(trianglesCount => trianglesCount === 1) length;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-75-singular-integer-right-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "cc0830038af45e268b96f726e0556b0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-77-prime-summations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b91000cf542c50fecc\ntitle: 'Problem 77: Prime summations'\nchallengeType: 1\nforumTopicId: 302190\ndashedName: problem-77-prime-summations\n--description--\nIt is possible to write ten as the sum of primes in exactly five different ways:\n7 + 3\n5 + 5\n5 + 3 + 2\n3 + 3 + 2 + 2\n2 + 2 + 2 + 2 + 2\nWhat is the first value which can be written as the sum of primes in over n ways --hints--\nprimeSummations(5) should return a number js\nassert(typeof primeSummations(5) === 'number');\nprimeSummations(5) should return 11 js\nassert strictEqual(primeSummations(5), 11);\nprimeSummations(100) should return 31 js\nassert strictEqual(primeSummations(100), 31);\nprimeSummations(1000) should return 53 js\nassert strictEqual(primeSummations(1000), 53);\nprimeSummations(5000) should return 71 js\nassert strictEqual(primeSummations(5000), 71);\n--seed--\n--seed-contents--\n```js\nfunction primeSummations(n) {\nreturn true;\n}\nprimeSummations(5);\n```\n--solutions--\n```js\nfunction primeSummations(n) {\nfunction getSievePrimes(max) {\nconst primesMap = new Array(max) fill(true);\nprimesMap[0] = false;\nprimesMap[1] = false;\nconst primes = [];\nfor (let i = 2; i < max; i += 2) {\nif (primesMap[i]) {\nprimes push(i);\nfor (let j = i * i; j < max; j += i) {\nprimesMap[j] = false;\n}\n}\nif (i === 2) {\ni = 1;\n}\n}\nreturn primes;\n}\nconst MAX_NUMBER = 100;\nconst primes = getSievePrimes(MAX_NUMBER);\nfor (let curNumber = 2; curNumber < MAX_NUMBER; curNumber++) {\nconst combinations = new Array(curNumber + 1)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-77-prime-summations.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a04b4c072265e4f19715bf8c23667148",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-77-prime-summations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= []; for (let i = 2; i < max; i += 2) { if (primesMap[i]) { primes push(i); for (let j = i * i; j < max; j += i) { primesMap[j] = false; } } if (i === 2) { i = 1; } } return primes; } const MAX_NUMBER = 100; const primes = getSievePrimes(MAX_NUMBER); for (let curNumber = 2; curNumber < MAX_NUMBER; curNumber++) { const combinations = new Array(curNumber + 1)fill(0);\ncombinations[0] = 1;\nfor (let i = 0; i < primes length; i++) {\nfor (let j = primes[i]; j <= curNumber; j++) {\ncombinations[j] += combinations[j - primes[i]];\n}\n}\nif (combinations[curNumber] > n) {\nreturn curNumber;\n}\n}\nreturn false;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-77-prime-summations.md",
      "source_type": "git_repo"
    },
    "token_count": 205,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4c16895305e77902312fa0f49abc3924",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-78-coin-partitions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ba1000cf542c50fecd\ntitle: 'Problem 78: Coin partitions'\nchallengeType: 1\nforumTopicId: 302191\ndashedName: problem-78-coin-partitions\n--description--\nLet ${p}(n)$ represent the number of different ways in which n coins can be separated into piles For example, five coins can be separated into piles in exactly seven different ways, so ${p}(5) = 7$ | Coin piles        |\n| ----------------- |\n| OOOOO             |\n| OOOO   O          |\n| OOO   OO          |\n| OOO   O   O       |\n| OO   OO   O       |\n| OO   O   O   O    |\n| O   O   O   O   O |\nFind the least value of n for which ${p}(n)$ is divisible by divisor --hints--\ncoinPartitions(7) should return a number js\nassert(typeof coinPartitions(7) === 'number');\ncoinPartitions(7) should return 5 js\nassert strictEqual(coinPartitions(7), 5);\ncoinPartitions(10000) should return 599 js\nassert strictEqual(coinPartitions(10000), 599);\ncoinPartitions(100000) should return 11224 js\nassert strictEqual(coinPartitions(100000), 11224);\ncoinPartitions(1000000) should return 55374 js\nassert strictEqual(coinPartitions(1000000), 55374);\n--seed--\n--seed-contents--\n```js\nfunction coinPartitions(divisor) {\nreturn true;\n}\ncoinPartitions(7);\n```\n--solutions--\n```js\n// compute pentagonal numbers per generating function\nconst pentagonalNumbers = Array(251) fill(0) flatMap((_, i) => i",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2216,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-78-coin-partitions.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "942fe96573868700c7ebb3dda275e7cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-78-coin-partitions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is divisible by divisor --hints-- coinPartitions(7) should return a number js assert(typeof coinPartitions(7) === 'number'); coinPartitions(7) should return 5 js assert strictEqual(coinPartitions(7), 5); coinPartitions(10000) should return 599 js assert strictEqual(coinPartitions(10000), 599); coinPartitions(100000) should return 11224 js assert strictEqual(coinPartitions(100000), 11224); coinPartitions(1000000) should return 55374 js assert strictEqual(coinPartitions(1000000), 55374); --seed-- --seed-contents-- ```js function coinPartitions(divisor) { return true; } coinPartitions(7); ``` --solutions-- ```js // compute pentagonal numbers per generating function const pentagonalNumbers = Array(251) fill(0) flatMap((_, i) => i[i * (3 * i - 1) / 2, i * (3 * i - 1) / 2 + i] : []);\nfunction coinPartitions(divisor) {\n// helper data\nconst signs = [1, 1, -1, -1];\n// compute partition counts until we find a multiple of divisor\nconst partitions = Array(divisor + 1) fill(0);\npartitions[0] = 1;\nfor (let i = 1; partitions[i - 1] > 0; i++) {\n// compute next partition count\nfor (let j = 0; pentagonalNumbers[j] <= i; j++) {\npartitions[i] += partitions[i - pentagonalNumbers[j]] * signs[j % 4];\n}\npartitions[i] = partitions[i] % divisor;\nif (partitions[i] < 0) partitions[i] += divisor; // positive mod\n// return when found\nif (partitions[i] === 0) return i;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2216,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-78-coin-partitions.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6389a5a67b6336b4ba0fcdfefd3a712a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-80-square-root-digital-expansion.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3bc1000cf542c50fecf\ntitle: 'Problem 80: Square root digital expansion'\nchallengeType: 1\nforumTopicId: 302194\ndashedName: problem-80-square-root-digital-expansion\n--description--\nIt is well known that if the square root of a natural number is not an integer, then it is irrational The decimal expansion of such square roots is infinite without any repeating pattern at all The square root of two is 1 41421356237309504880 , and the digital sum of the first one hundred decimal digits is 475 For the first n natural numbers, find the total of the digital sums of the first one hundred decimal digits for all the irrational square roots --hints--\nsqrtDigitalExpansion(2) should return a number js\nassert(typeof sqrtDigitalExpansion(2) === 'number');\nsqrtDigitalExpansion(2) should return 475 js\nassert strictEqual(sqrtDigitalExpansion(2), 475);\nsqrtDigitalExpansion(50) should return 19543 js\nassert strictEqual(sqrtDigitalExpansion(50), 19543);\nsqrtDigitalExpansion(100) should return 40886 js\nassert strictEqual(sqrtDigitalExpansion(100), 40886);\n--seed--\n--seed-contents--\n```js\nfunction sqrtDigitalExpansion(n) {\nreturn true;\n}\nsqrtDigitalExpansion(2);\n```\n--solutions--\n```js\nfunction sqrtDigitalExpansion(n) {\nfunction sumDigits(number) {\nlet sum = 0;\nwhile (number > 0n) {\nlet digit = number % 10n;\nsum += parseInt(digit, 10);\nnumber = number / 10n;\n}\nreturn sum;\n}\nfunction power(numberA, numberB) {\nlet result = 1n;\nfor (let b = 0; b < numberB; b++) {\nresult = result * BigInt(numberA);\n}\nreturn result;\n}\n// Based on http://www afjarvis staff shef ac uk/maths/jarvisspec02",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-80-square-root-digital-expansion.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "101faf6076e74317a8376e3bb7060ac2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-80-square-root-digital-expansion.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "true; } sqrtDigitalExpansion(2); ``` --solutions-- ```js function sqrtDigitalExpansion(n) { function sumDigits(number) { let sum = 0; while (number > 0n) { let digit = number % 10n; sum += parseInt(digit, 10); number = number / 10n; } return sum; } function power(numberA, numberB) { let result = 1n; for (let b = 0; b < numberB; b++) { result = result * BigInt(numberA); } return result; } // Based on http://www afjarvis staff shef ac uk/maths/jarvisspec02pdf\nfunction expandSquareRoot(number, numDigits) {\nlet a = 5n * BigInt(number);\nlet b = 5n;\nconst boundaryWithNeededDigits = power(10, numDigits + 1);\nwhile (b < boundaryWithNeededDigits) {\nif (a >= b) {\na = a - b;\nb = b + 10n;\n} else {\na = a * 100n;\nb = (b / 10n) * 100n + 5n;\n}\n}\nreturn b / 100n;\n}\nlet result = 0;\nlet nextPerfectRoot = 1;\nconst requiredDigits = 100;\nfor (let i = 1; i <= n; i++) {\nif (nextPerfectRoot ** 2 === i) {\nnextPerfectRoot++;\ncontinue;\n}\nresult += sumDigits(expandSquareRoot(i, requiredDigits));\n}\nreturn result;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-80-square-root-digital-expansion.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "75ffb83179eb9e107029999642189878",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3bb1000cf542c50fece\ntitle: 'Problem 79: Passcode derivation'\nchallengeType: 1\nforumTopicId: 302192\ndashedName: problem-79-passcode-derivation\n--description--\nA common security method used for online banking is to ask the user for three random characters from a passcode For example, if the passcode was 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317 The arrays, keylog1, keylog2, and keylog3, contains fifty successful login attempts Given that the three characters are always asked for in order, analyze the array so as to determine the shortest possible secret passcode of unknown length --hints--\npasscodeDerivation(keylog1) should return a number js\nconst _keylog1 = [\n127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517\n];\nassert isNumber(passcodeDerivation(_keylog1));\npasscodeDerivation(keylog1) should return 531278 js\nconst _keylog1 = [\n127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517\n];\nassert strictEqual(passcodeDerivation(_keylog1), 531278);\npasscodeDerivation(keylog2) should return 1230567",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "2d3e895470d10b323fcdadc636c064bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the expected reply would be: 317 The arrays, keylog1, keylog2, and keylog3, contains fifty successful login attempts Given that the three characters are always asked for in order, analyze the array so as to determine the shortest possible secret passcode of unknown length --hints-- passcodeDerivation(keylog1) should return a number js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert isNumber(passcodeDerivation(_keylog1)); passcodeDerivation(keylog1) should return 531278 js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert strictEqual(passcodeDerivation(_keylog1), 531278); passcodeDerivation(keylog2) should return 1230567js\nconst _keylog2 = [\n305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126\n];\nassert strictEqual(passcodeDerivation(_keylog2), 1230567);\npasscodeDerivation(keylog3) should return 73162890",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "267da75e4c7874210692fa1d47ed5ae8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "fifty successful login attempts Given that the three characters are always asked for in order, analyze the array so as to determine the shortest possible secret passcode of unknown length --hints-- passcodeDerivation(keylog1) should return a number js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert isNumber(passcodeDerivation(_keylog1)); passcodeDerivation(keylog1) should return 531278 js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert strictEqual(passcodeDerivation(_keylog1), 531278); passcodeDerivation(keylog2) should return 1230567js const _keylog2 = [ 305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126 ]; assert strictEqual(passcodeDerivation(_keylog2), 1230567); passcodeDerivation(keylog3) should return 73162890js\nconst _keylog3 = [\n319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716,\n];\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 572,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "d071a99dee25e48b216f19fdb10bbd00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "three characters are always asked for in order, analyze the array so as to determine the shortest possible secret passcode of unknown length --hints-- passcodeDerivation(keylog1) should return a number js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert isNumber(passcodeDerivation(_keylog1)); passcodeDerivation(keylog1) should return 531278 js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert strictEqual(passcodeDerivation(_keylog1), 531278); passcodeDerivation(keylog2) should return 1230567js const _keylog2 = [ 305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126 ]; assert strictEqual(passcodeDerivation(_keylog2), 1230567); passcodeDerivation(keylog3) should return 73162890js const _keylog3 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; assertstrictEqual(passcodeDerivation(_keylog3), 73162890);\n--seed--\n--seed-contents--\n```js\nfunction passcodeDerivation(arr) {\nreturn true;\n}\n// Only change code above this line\nconst keylog1 = [\n319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716,\n];\npasscodeDerivation(keylog1);\n```\n--solutions--\n```js\nfunction passcodeDerivation(arr) {\nconst numbersInPasscode = [];\nconst relativePositions = new Array(10)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 759,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "c341c03a27fef9ee3da0e5311ab32f82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return 531278 js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert strictEqual(passcodeDerivation(_keylog1), 531278); passcodeDerivation(keylog2) should return 1230567js const _keylog2 = [ 305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126 ]; assert strictEqual(passcodeDerivation(_keylog2), 1230567); passcodeDerivation(keylog3) should return 73162890js const _keylog3 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; assertstrictEqual(passcodeDerivation(_keylog3), 73162890); --seed-- --seed-contents-- ```js function passcodeDerivation(arr) { return true; } // Only change code above this line const keylog1 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; passcodeDerivation(keylog1); ``` --solutions-- ```js function passcodeDerivation(arr) { const numbersInPasscode = []; const relativePositions = new Array(10)fill()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 589,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "2d6e491c596a2ba5744e1cea520dc1e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return 531278 js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert strictEqual(passcodeDerivation(_keylog1), 531278); passcodeDerivation(keylog2) should return 1230567js const _keylog2 = [ 305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126 ]; assert strictEqual(passcodeDerivation(_keylog2), 1230567); passcodeDerivation(keylog3) should return 73162890js const _keylog3 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; assertstrictEqual(passcodeDerivation(_keylog3), 73162890); --seed-- --seed-contents-- ```js function passcodeDerivation(arr) { return true; } // Only change code above this line const keylog1 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; passcodeDerivation(keylog1); ``` --solutions-- ```js function passcodeDerivation(arr) { const numbersInPasscode = []; const relativePositions = new Array(10)fill()map(() => new Array(10)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "8a492480683ec6fe88eb1356b537764a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js const _keylog1 = [ 127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517 ]; assert strictEqual(passcodeDerivation(_keylog1), 531278); passcodeDerivation(keylog2) should return 1230567js const _keylog2 = [ 305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126 ]; assert strictEqual(passcodeDerivation(_keylog2), 1230567); passcodeDerivation(keylog3) should return 73162890js const _keylog3 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; assertstrictEqual(passcodeDerivation(_keylog3), 73162890); --seed-- --seed-contents-- ```js function passcodeDerivation(arr) { return true; } // Only change code above this line const keylog1 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; passcodeDerivation(keylog1); ``` --solutions-- ```js function passcodeDerivation(arr) { const numbersInPasscode = []; const relativePositions = new Array(10)fill()map(() => new Array(10)fill(0));\nfor (let i = 0; i < arr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 607,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "53038d4f1840aee35fd08cbb09eb735c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "strictEqual(passcodeDerivation(_keylog1), 531278); passcodeDerivation(keylog2) should return 1230567js const _keylog2 = [ 305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126 ]; assert strictEqual(passcodeDerivation(_keylog2), 1230567); passcodeDerivation(keylog3) should return 73162890js const _keylog3 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; assertstrictEqual(passcodeDerivation(_keylog3), 73162890); --seed-- --seed-contents-- ```js function passcodeDerivation(arr) { return true; } // Only change code above this line const keylog1 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; passcodeDerivation(keylog1); ``` --solutions-- ```js function passcodeDerivation(arr) { const numbersInPasscode = []; const relativePositions = new Array(10)fill()map(() => new Array(10)fill(0)); for (let i = 0; i < arrlength; i++) {\nconst curAttempt = arr[i]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "c7809eec3f845a0a8cfe3ac0f893bd63",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const _keylog2 = [ 305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126 ]; assert strictEqual(passcodeDerivation(_keylog2), 1230567); passcodeDerivation(keylog3) should return 73162890js const _keylog3 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; assertstrictEqual(passcodeDerivation(_keylog3), 73162890); --seed-- --seed-contents-- ```js function passcodeDerivation(arr) { return true; } // Only change code above this line const keylog1 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; passcodeDerivation(keylog1); ``` --solutions-- ```js function passcodeDerivation(arr) { const numbersInPasscode = []; const relativePositions = new Array(10)fill()map(() => new Array(10)fill(0)); for (let i = 0; i < arrlength; i++) { const curAttempt = arr[i]toString() split('')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "806873df40998356b916943c1b309e89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "_keylog2 = [ 305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126 ]; assert strictEqual(passcodeDerivation(_keylog2), 1230567); passcodeDerivation(keylog3) should return 73162890js const _keylog3 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; assertstrictEqual(passcodeDerivation(_keylog3), 73162890); --seed-- --seed-contents-- ```js function passcodeDerivation(arr) { return true; } // Only change code above this line const keylog1 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; passcodeDerivation(keylog1); ``` --solutions-- ```js function passcodeDerivation(arr) { const numbersInPasscode = []; const relativePositions = new Array(10)fill()map(() => new Array(10)fill(0)); for (let i = 0; i < arrlength; i++) { const curAttempt = arr[i]toString() split('')map(key => parseInt(key, 10));\nfor (let j = 0; j < curAttempt",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "6d5faead4da708fedd5fe52b3128771e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "73162890js const _keylog3 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; assertstrictEqual(passcodeDerivation(_keylog3), 73162890); --seed-- --seed-contents-- ```js function passcodeDerivation(arr) { return true; } // Only change code above this line const keylog1 = [ 319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716, ]; passcodeDerivation(keylog1); ``` --solutions-- ```js function passcodeDerivation(arr) { const numbersInPasscode = []; const relativePositions = new Array(10)fill()map(() => new Array(10)fill(0)); for (let i = 0; i < arrlength; i++) { const curAttempt = arr[i]toString() split('')map(key => parseInt(key, 10)); for (let j = 0; j < curAttemptlength; j++) {\nif (numbersInPasscode indexOf(curAttempt[j]) === -1) {\nnumbersInPasscode push(curAttempt[j]);\n}\nfor (let k = j + 1; k < curAttempt length; k++) {\nrelativePositions[curAttempt[j]][curAttempt[k]] += 1;\n}\n}\n}\nconst ranks = {};\nfor (let i = 0; i < numbersInPasscode length; i++) {\nconst curNumber = numbersInPasscode[i];\nranks[curNumber] = relativePositions[curNumber] filter(\ncount => count > 0\n)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "48a6edf3cd281136f8d2fc81783b9186",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ const curAttempt = arr[i]toString() split('')map(key => parseInt(key, 10)); for (let j = 0; j < curAttemptlength; j++) { if (numbersInPasscode indexOf(curAttempt[j]) === -1) { numbersInPasscode push(curAttempt[j]); } for (let k = j + 1; k < curAttempt length; k++) { relativePositions[curAttempt[j]][curAttempt[k]] += 1; } } } const ranks = {}; for (let i = 0; i < numbersInPasscode length; i++) { const curNumber = numbersInPasscode[i]; ranks[curNumber] = relativePositions[curNumber] filter( count => count > 0 )length;\n}\nconst passcode = numbersInPasscode sort((i, j) => ranks[i] - ranks[j]) reverse() join('');\nreturn parseInt(passcode, 10);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md",
      "source_type": "git_repo"
    },
    "token_count": 192,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "ebd7808328b6edb31d9315877c3ca9cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-81-path-sum-two-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3bd1000cf542c50fed0\ntitle: 'Problem 81: Path sum: two ways'\nchallengeType: 1\nforumTopicId: 302195\ndashedName: problem-81-path-sum-two-ways\n--description--\nIn the 5 by 5 matrix below, the minimal path sum from the top left to the bottom right, by only moving to the right and down, is indicated in bold red and is equal to 2427 $$\\begin{pmatrix}\n\\color{red}{131} & 673 & 234 & 103 & 18\\\\\n\\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & 150\\\\\n630 & 803 & \\color{red}{746} & \\color{red}{422} & 111\\\\\n537 & 699 & 497 & \\color{red}{121} & 956\\\\\n805 & 732 & 524 & \\color{red}{37} & \\color{red}{331}\n\\end{pmatrix}$$\nFind the minimal path sum from the top left to the bottom right by only moving right and down in matrix, a 2D array representing a matrix The maximum matrix size used in the tests will be 80 by 80 --hints--\npathSumTwoWays(testMatrix1) should return a number js\nassert(typeof pathSumTwoWays(_testMatrix1) === 'number');\npathSumTwoWays(testMatrix1) should return 2427 js\nassert strictEqual(pathSumTwoWays(_testMatrix1), 2427);\npathSumTwoWays(testMatrix2) should return 427337 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-81-path-sum-two-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2d978d3a93c62de7c7c737809d40da07",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-81-path-sum-two-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "956\\\\ 805 & 732 & 524 & \\color{red}{37} & \\color{red}{331} \\end{pmatrix}$$ Find the minimal path sum from the top left to the bottom right by only moving right and down in matrix, a 2D array representing a matrix The maximum matrix size used in the tests will be 80 by 80 --hints-- pathSumTwoWays(testMatrix1) should return a number js assert(typeof pathSumTwoWays(_testMatrix1) === 'number'); pathSumTwoWays(testMatrix1) should return 2427 js assert strictEqual(pathSumTwoWays(_testMatrix1), 2427); pathSumTwoWays(testMatrix2) should return 427337 js assertstrictEqual(pathSumTwoWays(_testMatrix2), 427337);\n--seed--\n--after-user-code--\njs\nconst _testMatrix1 = [\n[131, 673, 234, 103, 18],\n[201, 96, 342, 965, 150],\n[630, 803, 746, 422, 111],\n[537, 699, 497, 121, 956],\n[805, 732, 524, 37, 331]\n];\nconst _testMatrix2 = [\n[4445,2697,5115,718,2209,2212,654,4348,3079,6821,7668,3276,8874,4190,3785,2752,9473,7817,9137,496,7338,3434,7152,4355,4552,7917,7827,2460,2350,691,3514,5880,3145,7633,7199,3783,5066,7487,3285,1084,8985,760,872,8609,8051,1134,9536,5750,9716,9371,7619,5617,275,9721,2997,2698,1887,8825,6372,3014,2113,7122,7050,6775,5948,2758,1219,3539,348,7989,2735,9862,1263,8089,6401,9462,3168,2758,3748,5870],\n[1096,20,1318,7586,5167,2642,1443,5741,7621,7030,5526,4244,2348,4641,9827,2448,6918,5883,3737,300,7116,6531,567,5997,3971,6623,820,6148,3287,1874,7981,8424,7672,7575,6797,6717,1078,5008,4051,8795,5820,346,1851,6463,2117,6058,3407,8211,117,4822,1317,4377,4434,5925,8341,4800,1175,4173,690,8978,7470,1295,3799,8724,3509,9849,618,3320,7068,9633,2384,7175,544,6583,1908,9983,481,4187,9353,9377],\n[9607,7385,521,6084,1364,8983,7623,1585,6935,8551,2574,8267,4781,3834,2764,2084,2669,4656,9343,7709,2203,9328,8004,6192,5856,3555,2260,5118,6504,1839,9227,1259,9451,1388,7909,5733,6968,8519,9973,1663,5315,7571,3035,4325,4283,2304,6438,3815,9213,9806,9536,196,5542,6907,2475,1159,5820,9075,9470,2179,9248,1828,4592,9167,3713,4640,47,3637,309,7344,6955,346,378,9044,8635,7466,5036,9515,6385,9230],\n[7206,3114,7760,1094,6150,5182,7358,7387,4497,955,101,1478,7777,6966,7010,8417,6453,4955,3496,107,449,8271,131,2948,6185,784,5937,8001,6104,8282,4165,3642,710,2390,575,715,3089,6964,4217,192,5949,7006,715,3328,1152,66,8044,4319,1735,146,4818,5456,6451,4113,1063,4781,6799,602,1504,6245,6550,1417,1343,2363,3785,5448,4545,9371,5420,5068,4613,4882,4241,5043,7873,8042,8434,3939,9256,2187],\n[3620,8024,577,9997,7377,7682,1314,1158,6282,6310,1896,2509,5436,1732,9480,706,496,101,6232,7375,2207,2306,110,6772,3433,2878,8140,5933,8688,1399,2210,7332,6172,6403,7333,4044,2291,1790,2446,7390,8698,5723,3678,7104,1825,2040,140,3982,4905,4160,2200,5041,2512,1488,2268,1175,7588,8321,8078,7312,977,5257,8465,5068,3453,3096,1651,7906,253,9250,6021,8791,8109,6651,3412,345,4778,5152,4883,7505],\n[1074,5438,9008,2679,5397,5429,2652,3403,770,9188,4248,2493,4361,8327,9587,707,9525,5913,93,1899,328,2876,3604,673,8576,6908,7659,2544,3359,3883,5273,6587,3065,1749,3223,604,9925,6941,2823,8767,7039,3290,3214,1787,7904,3421,7137,9560,8451,2669,9219,6332,1576,5477,6755,8348,4164,4307,2984,4012,6629,1044,2874,6541,4942,903,1404,9125,5160,8836,4345,2581,460,8438,1538,5507,668,3352,2678,6942],\n[4295,1176,5596,1521,3061,9868,7037,7129,8933,6659,5947,5063,3653,9447,9245,2679,767,714,116,8558,163,3927,8779,158,5093,2447,5782,3967,1716,931,7772,8164,1117,9244,5783,7776,3846,8862,6014,2330,6947,1777,3112,6008,3491,1906,5952,314,4602,8994,5919,9214,3995,5026,7688,6809,5003,3128,2509,7477,110,8971,3982,8539,2980,4689,6343,5411,2992,5270,5247,9260,2269,7474,1042,7162,5206,1232,4556,4757],\n[510,3556,5377,1406,5721,4946,2635,7847,4251,8293,8281,6351,4912,287,2870,3380,3948,5322,3840,4738,9563,1906,6298,3234,8959,1562,6297,8835,7861,239,6618,1322,2553,2213,5053,5446,4402,6500,5182,8585,6900,5756,9661,903,5186,7687,5998,7997,8081,8955,4835,6069,2621,1581,732,9564,1082,1853,5442,1342,520,1737,3703,5321,4793,2776,1508,1647,9101,2499,6891,4336,7012,3329,3212,1442,9993,3988,4930,7706],\n[9444,3401,5891,9716,1228,7107,109,3563,2700,6161,5039,4992,2242,8541,7372,2067,1294,3058,1306,320,8881,5756,9326,411,8650,8824,5495,8282,8397,2000,1228,7817,2099,6473,3571,5994,4447,1299,5991,543,7874,2297,1651,101,2093,3463,9189,6872,6118,872,1008,1779,2805,9084,4048,2123,5877,55,3075,1737,9459,4535,6453,3644,108,5982,4437,5213,1340,6967,9943,5815,669,8074,1838,6979,9132,9315,715,5048],\n[3327,4030,7177,6336,9933,5296,2621,4785,2755,4832,2512,2118,2244,4407,2170,499,7532,9742,5051,7687,970,6924,3527,4694,5145,1306,2165,5940,2425,8910,3513,1909,6983,346,6377,4304,9330,7203,6605,3709,3346,970,369,9737,5811,4427,9939,3693,8436,5566,1977,3728,2399,3985,8303,2492,5366,9802,9193,7296,1033,5060,9144,2766,1151,7629,5169,5995,58,7619,7565,4208,1713,6279,3209,4908,9224,7409,1325,8540],\n[6882,1265,1775,3648,4690,959,5837,4520,5394,1378,9485,1360,4018,578,9174,2932,9890,3696,116,1723,1178,9355,7063,1594,1918,8574,7594,7942,1547,6166,7888,354,6932,4651,1010,7759,6905,661,7689,6092,9292,3845,9605,8443,443,8275,5163,7720,7265,6356,7779,1798,1754,5225,6661,1180,8024,5666,88,9153,1840,3508,1193,4445,2648,3538,6243,6375,8107,5902,5423,2520,1122,5015,6113,8859,9370,966,8673,2442],\n[7338,3423,4723,6533,848,8041,7921,8277,4094,5368,7252,8852,9166,2250,2801,6125,8093,5738,4038,9808,7359,9494,601,9116,4946,2702,5573,2921,9862,1462,1269,2410,4171,2709,7508,6241,7522,615,2407,8200,4189,5492,5649,7353,2590,5203,4274,710,7329,9063,956,8371,3722,4253,4785,1194,4828,4717,4548,940,983,2575,4511,2938,1827,2027,2700,1236,841,5760,1680,6260,2373,3851,1841,4968,1172,5179,7175,3509],\n[4420,1327,3560,2376,6260,2988,9537,4064,4829,8872,9598,3228,1792,7118,9962,9336,4368,9189,6857,1829,9863,6287,7303,7769,2707,8257,2391,2009,3975,4993,3068,9835,3427,341,8412,2134,4034,8511,6421,3041,9012,2983,7289,100,1355,7904,9186,6920,5856,2008,6545,8331,3655,5011,839,8041,9255,6524,3862,8788,62,7455,3513,5003,8413,3918,2076,7960,6108,3638,6999,3436,1441,4858,4181,1866,8731,7745,3744,1000],\n[356,8296,8325,1058,1277,4743,3850,2388,6079,6462,2815,5620,8495,5378,75,4324,3441,9870,1113,165,1544,1179,2834,562,6176,2313,6836,8839,2986,9454,5199,6888,1927,5866,8760,320,1792,8296,7898,6121,7241,5886,5814,2815,8336,1576,4314,3109,2572,6011,2086,9061,9403,3947,5487,9731,7281,3159,1819,1334,3181,5844,5114,9898,4634,2531,4412,6430,4262,8482,4546,4555,6804,2607,9421,686,8649,8860,7794,6672],\n[9870,152,1558,4963,8750,4754,6521,6256,8818,5208,5691,9659,8377,9725,5050,5343,2539,6101,1844,9700,7750,8114,5357,3001,8830,4438,199,9545,8496,43,2078,327,9397,106,6090,8181,8646,6414,7499,5450,4850,6273,5014,4131,7639,3913,6571,8534,9703,4391,7618,445,1320,5,1894,6771,7383,9191,4708,9706,6939,7937,8726,9382,5216,3685,2247,9029,8154,1738,9984,2626,9438,4167,6351,5060,29,1218,1239,4785],\n[192,5213,8297,8974,4032,6966,5717,1179,6523,4679,9513,1481,3041,5355,9303,9154,1389,8702,6589,7818,6336,3539,5538,3094,6646,6702,6266,2759,4608,4452,617,9406,8064,6379,444,5602,4950,1810,8391,1536,316,8714,1178,5182,5863,5110,5372,4954,1978,2971,5680,4863,2255,4630,5723,2168,538,1692,1319,7540,440,6430,6266,7712,7385,5702,620,641,3136,7350,1478,3155,2820,9109,6261,1122,4470,14,8493,2095],\n[1046,4301,6082,474,4974,7822,2102,5161,5172,6946,8074,9716,6586,9962,9749,5015,2217,995,5388,4402,7652,6399,6539,1349,8101,3677,1328,9612,7922,2879,231,5887,2655,508,4357,4964,3554,5930,6236,7384,4614,280,3093,9600,2110,7863,2631,6626,6620,68,1311,7198,7561,1768,5139,1431,221,230,2940,968,5283,6517,2146,1646,869,9402,7068,8645,7058,1765,9690,4152,2926,9504,2939,7504,6074,2944,6470,7859],\n[4659,736,4951,9344,1927,6271,8837,8711,3241,6579,7660,5499,5616,3743,5801,4682,9748,8796,779,1833,4549,8138,4026,775,4170,2432,4174,3741,7540,8017,2833,4027,396,811,2871,1150,9809,2719,9199,8504,1224,540,2051,3519,7982,7367,2761,308,3358,6505,2050,4836,5090,7864,805,2566,2409,6876,3361,8622,5572,5895,3280,441,7893,8105,1634,2929,274,3926,7786,6123,8233,9921,2674,5340,1445,203,4585,3837],\n[5759,338,7444,7968,7742,3755,1591,4839,1705,650,7061,2461,9230,9391,9373,2413,1213,431,7801,4994,2380,2703,6161,6878,8331,2538,6093,1275,5065,5062,2839,582,1014,8109,3525,1544,1569,8622,7944,2905,6120,1564,1839,5570,7579,1318,2677,5257,4418,5601,7935,7656,5192,1864,5886,6083,5580,6202,8869,1636,7907,4759,9082,5854,3185,7631,6854,5872,5632,5280,1431,2077,9717,7431,4256,8261,9680,4487,4752,4286],\n[1571,1428,8599,1230,7772,4221,8523,9049,4042,8726,7567,6736,9033,2104,4879,4967,6334,6716,3994,1269,8995,6539,3610,7667,6560,6065,874,848,4597,1711,7161,4811,6734,5723,6356,6026,9183,2586,5636,1092,7779,7923,8747,6887,7505,9909,1792,3233,4526,3176,1508,8043,720,5212,6046,4988,709,5277,8256,3642,1391,5803,1468,2145,3970,6301,7767,2359,8487,9771,8785,7520,856,1605,8972,2402,2386,991,1383,5963],\n[1822,4824,5957,6511,9868,4113,301,9353,6228,2881,2966,6956,9124,9574,9233,1601,7340,973,9396,540,4747,8590,9535,3650,7333,7583,4806,3593,2738,8157,5215,8472,2284,9473,3906,6982,5505,6053,7936,6074,7179,6688,1564,1103,6860,5839,2022,8490,910,7551,7805,881,7024,1855,9448,4790,1274,3672,2810,774,7623,4223,4850,6071,9975,4935,1915,9771,6690,3846,517,463,7624,4511,614,6394,3661,7409,1395,8127],\n[8738,3850,9555,3695,4383,2378,87,6256,6740,7682,9546,4255,6105,2000,1851,4073,8957,9022,6547,5189,2487,303,9602,7833,1628,4163,6678,3144,8589,7096,8913,5823,4890,7679,1212,9294,5884,2972,3012,3359,7794,7428,1579,4350,7246,4301,7779,7790,3294,9547,4367,3549,1958,8237,6758,3497,3250,3456,6318,1663,708,7714,6143,6890,3428,6853,9334,7992,591,6449,9786,1412,8500,722,5468,1371,108,3939,4199,2535],\n[7047,4323,1934,5163,4166,461,3544,2767,6554,203,6098,2265,9078,2075,4644,6641,8412,9183,487,101,7566,5622,1975,5726,2920,5374,7779,5631,3753,3725,2672,3621,4280,1162,5812,345,8173,9785,1525,955,5603,2215,2580,5261,2765,2990,5979,389,3907,2484,1232,5933,5871,3304,1138,1616,5114,9199,5072,7442,7245,6472,4760,6359,9053,7876,2564,9404,3043,9026,2261,3374,4460,7306,2326,966,828,3274,1712,3446],\n[3975,4565,8131,5800,4570,2306,8838,4392,9147,11,3911,7118,9645,4994,2028,6062,5431,2279,8752,2658,7836,994,7316,5336,7185,3289,1898,9689,2331,5737,3403,1124,2679,3241,7748,16,2724,5441,6640,9368,9081,5618,858,4969,17,2103,6035,8043,7475,2181,939,415,1617,8500,8253,2155,7843,7974,7859,1746,6336,3193,2617,8736,4079,6324,6645,8891,9396,5522,6103,1857,8979,3835,2475,1310,7422,610,8345,7615],\n[9248,5397,5686,2988,3446,4359,6634,9141,497,9176,6773,7448,1907,8454,916,1596,2241,1626,1384,2741,3649,5362,8791,7170,2903,2475,5325,6451,924,3328,522,90,4813,9737,9557,691,2388,1383,4021,1609,9206,4707,5200,7107,8104,4333,9860,5013,1224,6959,8527,1877,4545,7772,6268,621,4915,9349,5970,706,9583,3071,4127,780,8231,3017,9114,3836,7503,2383,1977,4870,8035,2379,9704,1037,3992,3642,1016,4303],\n[5093,138,4639,6609,1146,5565,95,7521,9077,2272,974,4388,2465,2650,722,4998,3567,3047,921,2736,7855,173,2065,4238,1048,5,6847,9548,8632,9194,5942,4777,7910,8971,6279,7253,2516,1555,1833,3184,9453,9053,6897,7808,8629,4877,1871,8055,4881,7639,1537,7701,2508,7564,5845,5023,2304,5396,3193,2955,1088,3801,6203,1748,3737,1276,13,4120,7715,8552,3047,2921,106,7508,304,1280,7140,2567,9135,5266],\n[6237,4607,7527,9047,522,7371,4883,2540,5867,6366,5301,1570,421,276,3361,527,6637,4861,2401,7522,5808,9371,5298,2045,5096,5447,7755,5115,7060,8529,4078,1943,1697,1764,5453,7085,960,2405,739,2100,5800,728,9737,5704,5693,1431,8979,6428,673,7540,6,7773,5857,6823,150,5869,8486,684,5816,9626,7451,5579,8260,3397,5322,6920,1879,2127,2884,5478,4977,9016,6165,6292,3062,5671,5968,78,4619,4763],\n[9905,7127,9390,5185,6923,3721,9164,9705,4341,1031,1046,5127,7376,6528,3248,4941,1178,7889,3364,4486,5358,9402,9158,8600,1025,874,1839,1783,309,9030,1843,845,8398,1433,7118,70,8071,2877,3904,8866,6722,4299,10,1929,5897,4188,600,1889,3325,2485,6473,4474,7444,6992,4846,6166,4441,2283,2629,4352,7775,1101,2214,9985,215,8270,9750,2740,8361,7103,5930,8664,9690,8302,9267,344,2077,1372,1880,9550],\n[5825,8517,7769,2405,8204,1060,3603,7025,478,8334,1997,3692,7433,9101,7294,7498,9415,5452,3850,3508,6857,9213,6807,4412,7310,854,5384,686,4978,892,8651,3241,2743,3801,3813,8588,6701,4416,6990,6490,3197,6838,6503,114,8343,5844,8646,8694,65,791,5979,2687,2621,2019,8097,1423,3644,9764,4921,3266,3662,5561,2476,8271,8138,6147,1168,3340,1998,9874,6572,9873,6659,5609,2711,3931,9567,4143,7833,8887],\n[6223,2099,2700,589,4716,8333,1362,5007,2753,2848,4441,8397,7192,8191,4916,9955,6076,3370,6396,6971,3156,248,3911,2488,4930,2458,7183,5455,170,6809,6417,3390,1956,7188,577,7526,2203,968,8164,479,8699,7915,507,6393,4632,1597,7534,3604,618,3280,6061,9793,9238,8347,568,9645,2070,5198,6482,5000,9212,6655,5961,7513,1323,3872,6170,3812,4146,2736,67,3151,5548,2781,9679,7564,5043,8587,1893,4531],\n[5826,3690,6724,2121,9308,6986,8106,6659,2142,1642,7170,2877,5757,6494,8026,6571,8387,9961,6043,9758,9607,6450,8631,8334,7359,5256,8523,2225,7487,1977,9555,8048,5763,2414,4948,4265,2427,8978,8088,8841,9208,9601,5810,9398,8866,9138,4176,5875,7212,3272,6759,5678,7649,4922,5422,1343,8197,3154,3600,687,1028,4579,2084,9467,4492,7262,7296,6538,7657,7134,2077,1505,7332,6890,8964,4879,7603,7400,5973,739],\n[1861,1613,4879,1884,7334,966,2000,7489,2123,4287,1472,3263,4726,9203,1040,4103,6075,6049,330,9253,4062,4268,1635,9960,577,1320,3195,9628,1030,4092,4979,6474,6393,2799,6967,8687,7724,7392,9927,2085,3200,6466,8702,265,7646,8665,7986,7266,4574,6587,612,2724,704,3191,8323,9523,3002,704,5064,3960,8209,2027,2758,8393,4875,4641,9584,6401,7883,7014,768,443,5490,7506,1852,2005,8850,5776,4487,4269],\n[4052,6687,4705,7260,6645,6715,3706,5504,8672,2853,1136,8187,8203,4016,871,1809,1366,4952,9294,5339,6872,2645,6083,7874,3056,5218,7485,8796,7401,3348,2103,426,8572,4163,9171,3176,948,7654,9344,3217,1650,5580,7971,2622,76,2874,880,2034,9929,1546,2659,5811,3754,7096,7436,9694,9960,7415,2164,953,2360,4194,2397,1047,2196,6827,575,784,2675,8821,6802,7972,5996,6699,2134,7577,2887,1412,4349,4380],\n[4629,2234,6240,8132,7592,3181,6389,1214,266,1910,2451,8784,2790,1127,6932,1447,8986,2492,5476,397,889,3027,7641,5083,5776,4022,185,3364,5701,2442,2840,4160,9525,4828,6602,2614,7447,3711,4505,7745,8034,6514,4907,2605,7753,6958,7270,6936,3006,8968,439,2326,4652,3085,3425,9863,5049,5361,8688,297,7580,8777,7916,6687,8683,7141,306,9569,2384,1500,3346,4601,7329,9040,6097,2727,6314,4501,4974,2829],\n[8316,4072,2025,6884,3027,1808,5714,7624,7880,8528,4205,8686,7587,3230,1139,7273,6163,6986,3914,9309,1464,9359,4474,7095,2212,7302,2583,9462,7532,6567,1606,4436,8981,5612,6796,4385,5076,2007,6072,3678,8331,1338,3299,8845,4783,8613,4071,1232,6028,2176,3990,2148,3748,103,9453,538,6745,9110,926,3125,473,5970,8728,7072,9062,1404,1317,5139,9862,6496,6062,3338,464,1600,2532,1088,8232,7739,8274,3873],\n[2341,523,7096,8397,8301,6541,9844,244,4993,2280,7689,4025,4196,5522,7904,6048,2623,9258,2149,9461,6448,8087,7245,1917,8340,7127,8466,5725,6996,3421,5313,512,9164,9837,9794,8369,4185,1488,7210,1524,1016,4620,9435,2478,7765,8035,697,6677,3724,6988,5853,7662,3895,9593,1185,4727,6025,5734,7665,3070,138,8469,6748,6459,561,7935,8646,2378,462,7755,3115,9690,8877,3946,2728,8793,244,6323,8666,4271],\n[6430,2406,8994,56,1267,3826,9443,7079,7579,5232,6691,3435,6718,5698,4144,7028,592,2627,217,734,6194,8156,9118,58,2640,8069,4127,3285,694,3197,3377,4143,4802,3324,8134,6953,7625,3598,3584,4289,7065,3434,2106,7132,5802,7920,9060,7531,3321,1725,1067,3751,444,5503,6785,7937,6365,4803,198,6266,8177,1470,6390,1606,2904,7555,9834,8667,2033,1723,5167,1666,8546,8152,473,4475,6451,7947,3062,3281],\n[2810,3042,7759,1741,2275,2609,7676,8640,4117,1958,7500,8048,1757,3954,9270,1971,4796,2912,660,5511,3553,1012,5757,4525,6084,7198,8352,5775,7726,8591,7710,9589,3122,4392,6856,5016,749,2285,3356,7482,9956,7348,2599,8944,495,3462,3578,551,4543,7207,7169,7796,1247,4278,6916,8176,3742,8385,2310,1345,8692,2667,4568,1770,8319,3585,4920,3890,4928,7343,5385,9772,7947,8786,2056,9266,3454,2807,877,2660],\n[6206,8252,5928,5837,4177,4333,207,7934,5581,9526,8906,1498,8411,2984,5198,5134,2464,8435,8514,8674,3876,599,5327,826,2152,4084,2433,9327,9697,4800,2728,3608,3849,3861,3498,9943,1407,3991,7191,9110,5666,8434,4704,6545,5944,2357,1163,4995,9619,6754,4200,9682,6654,4862,4744,5953,6632,1054,293,9439,8286,2255,696,8709,1533,1844,6441,430,1999,6063,9431,7018,8057,2920,6266,6799,356,3597,4024,6665],\n[3847,6356,8541,7225,2325,2946,5199,469,5450,7508,2197,9915,8284,7983,6341,3276,3321,16,1321,7608,5015,3362,8491,6968,6818,797,156,2575,706,9516,5344,5457,9210,5051,8099,1617,9951,7663,8253,9683,2670,1261,4710,1068,8753,4799,1228,2621,3275,6188,4699,1791,9518,8701,5932,4275,6011,9877,2933,4182,6059,2930,6687,6682,9771,654,9437,3169,8596,1827,5471,8909,2352,123,4394,3208,8756,5513,6917,2056],\n[5458,8173,3138,3290,4570,4892,3317,4251,9699,7973,1163,1935,5477,6648,9614,5655,9592,975,9118,2194,7322,8248,8413,3462,8560,1907,7810,6650,7355,2939,4973,6894,3933,3784,3200,2419,9234,4747,2208,2207,1945,2899,1407,6145,8023,3484,5688,7686,2737,3828,3704,9004,5190,9740,8643,8650,5358,4426,1522,1707,3613,9887,6956,2447,2762,833,1449,9489,2573,1080,4167,3456,6809,2466,227,7125,2759,6250,6472,8089],\n[3266,7025,9756,3914,1265,9116,7723,9788,6805,5493,2092,8688,6592,9173,4431,4028,6007,7131,4446,4815,3648,6701,759,3312,8355,4485,4187,5188,8746,7759,3528,2177,5243,8379,3838,7233,4607,9187,7216,2190,6967,2920,6082,7910,5354,3609,8958,6949,7731,494,8753,8707,1523,4426,3543,7085,647,6771,9847,646,5049,824,8417,5260,2730,5702,2513,9275,4279,2767,8684,1165,9903,4518,55,9682,8963,6005,2102,6523],\n[1998,8731,936,1479,5259,7064,4085,91,7745,7136,3773,3810,730,8255,2705,2653,9790,6807,2342,355,9344,2668,3690,2028,9679,8102,574,4318,6481,9175,5423,8062,2867,9657,7553,3442,3920,7430,3945,7639,3714,3392,2525,4995,4850,2867,7951,9667,486,9506,9888,781,8866,1702,3795,90,356,1483,4200,2131,6969,5931,486,6880,4404,1084,5169,4910,6567,8335,4686,5043,2614,3352,2667,4513,6472,7471,5720,1616],\n[8878,1613,1716,868,1906,2681,564,665,5995,2474,7496,3432,9491,9087,8850,8287,669,823,347,6194,2264,2592,7871,7616,8508,4827,760,2676,4660,4881,7572,3811,9032,939,4384,929,7525,8419,5556,9063,662,8887,7026,8534,3111,1454,2082,7598,5726,6687,9647,7608,73,3014,5063,670,5461,5631,3367,9796,8475,7908,5073,1565,5008,5295,4457,1274,4788,1728,338,600,8415,8535,9351,7750,6887,5845,1741,125],\n[3637,6489,9634,9464,9055,2413,7824,9517,7532,3577,7050,6186,6980,9365,9782,191,870,2497,8498,2218,2757,5420,6468,586,3320,9230,1034,1393,9886,5072,9391,1178,8464,8042,6869,2075,8275,3601,7715,9470,8786,6475,8373,2159,9237,2066,3264,5000,679,355,3069,4073,494,2308,5512,4334,9438,8786,8637,9774,1169,1949,6594,6072,4270,9158,7916,5752,6794,9391,6301,5842,3285,2141,3898,8027,4310,8821,7079,1307],\n[8497,6681,4732,7151,7060,5204,9030,7157,833,5014,8723,3207,9796,9286,4913,119,5118,7650,9335,809,3675,2597,5144,3945,5090,8384,187,4102,1260,2445,2792,4422,8389,9290,50,1765,1521,6921,8586,4368,1565,5727,7855,2003,4834,9897,5911,8630,5070,1330,7692,7557,7980,6028,5805,9090,8265,3019,3802,698,9149,5748,1965,9658,4417,5994,5584,8226,2937,272,5743,1278,5698,8736,2595,6475,5342,6596,1149,6920],\n[8188,8009,9546,6310,8772,2500,9846,6592,6872,3857,1307,8125,7042,1544,6159,2330,643,4604,7899,6848,371,8067,2062,3200,7295,1857,9505,6936,384,2193,2190,301,8535,5503,1462,7380,5114,4824,8833,1763,4974,8711,9262,6698,3999,2645,6937,7747,1128,2933,3556,7943,2885,3122,9105,5447,418,2899,5148,3699,9021,9501,597,4084,175,1621,1,1079,6067,5812,4326,9914,6633,5394,4233,6728,9084,1864,5863,1225],\n[9935,8793,9117,1825,9542,8246,8437,3331,9128,9675,6086,7075,319,1334,7932,3583,7167,4178,1726,7720,695,8277,7887,6359,5912,1719,2780,8529,1359,2013,4498,8072,1129,9998,1147,8804,9405,6255,1619,2165,7491,1,8882,7378,3337,503,5758,4109,3577,985,3200,7615,8058,5032,1080,6410,6873,5496,1466,2412,9885,5904,4406,3605,8770,4361,6205,9193,1537,9959,214,7260,9566,1685,100,4920,7138,9819,5637,976],\n[3466,9854,985,1078,7222,8888,5466,5379,3578,4540,6853,8690,3728,6351,7147,3134,6921,9692,857,3307,4998,2172,5783,3931,9417,2541,6299,13,787,2099,9131,9494,896,8600,1643,8419,7248,2660,2609,8579,91,6663,5506,7675,1947,6165,4286,1972,9645,3805,1663,1456,8853,5705,9889,7489,1107,383,4044,2969,3343,152,7805,4980,9929,5033,1737,9953,7197,9158,4071,1324,473,9676,3984,9680,3606,8160,7384,5432],\n[1005,4512,5186,3953,2164,3372,4097,3247,8697,3022,9896,4101,3871,6791,3219,2742,4630,6967,7829,5991,6134,1197,1414,8923,8787,1394,8852,5019,7768,5147,8004,8825,5062,9625,7988,1110,3992,7984,9966,6516,6251,8270,421,3723,1432,4830,6935,8095,9059,2214,6483,6846,3120,1587,6201,6691,9096,9627,6671,4002,3495,9939,7708,7465,5879,6959,6634,3241,3401,2355,9061,2611,7830,3941,2177,2146,5089,7079,519,6351],\n[7280,8586,4261,2831,7217,3141,9994,9940,5462,2189,4005,6942,9848,5350,8060,6665,7519,4324,7684,657,9453,9296,2944,6843,7499,7847,1728,9681,3906,6353,5529,2822,3355,3897,7724,4257,7489,8672,4356,3983,1948,6892,7415,4153,5893,4190,621,1736,4045,9532,7701,3671,1211,1622,3176,4524,9317,7800,5638,6644,6943,5463,3531,2821,1347,5958,3436,1438,2999,994,850,4131,2616,1549,3465,5946,690,9273,6954,7991],\n[9517,399,3249,2596,7736,2142,1322,968,7350,1614,468,3346,3265,7222,6086,1661,5317,2582,7959,4685,2807,2917,1037,5698,1529,3972,8716,2634,3301,3412,8621,743,8001,4734,888,7744,8092,3671,8941,1487,5658,7099,2781,99,1932,4443,4756,4652,9328,1581,7855,4312,5976,7255,6480,3996,2748,1973,9731,4530,2790,9417,7186,5303,3557,351,7182,9428,1342,9020,7599,1392,8304,2070,9138,7215,2008,9937,1106,7110],\n[7444,769,9688,632,1571,6820,8743,4338,337,3366,3073,1946,8219,104,4210,6986,249,5061,8693,7960,6546,1004,8857,5997,9352,4338,6105,5008,2556,6518,6694,4345,3727,7956,20,3954,8652,4424,9387,2035,8358,5962,5304,5194,8650,8282,1256,1103,2138,6679,1985,3653,2770,2433,4278,615,2863,1715,242,3790,2636,6998,3088,1671,2239,957,5411,4595,6282,2881,9974,2401,875,7574,2987,4587,3147,6766,9885,2965],\n[3287,3016,3619,6818,9073,6120,5423,557,2900,2015,8111,3873,1314,4189,1846,4399,7041,7583,2427,2864,3525,5002,2069,748,1948,6015,2684,438,770,8367,1663,7887,7759,1885,157,7770,4520,4878,3857,1137,3525,3050,6276,5569,7649,904,4533,7843,2199,5648,7628,9075,9441,3600,7231,2388,5640,9096,958,3058,584,5899,8150,1181,9616,1098,8162,6819,8171,1519,1140,7665,8801,2632,1299,9192,707,9955,2710,7314],\n[1772,2963,7578,3541,3095,1488,7026,2634,6015,4633,4370,2762,1650,2174,909,8158,2922,8467,4198,4280,9092,8856,8835,5457,2790,8574,9742,5054,9547,4156,7940,8126,9824,7340,8840,6574,3547,1477,3014,6798,7134,435,9484,9859,3031,4,1502,4133,1738,1807,4825,463,6343,9701,8506,9822,9555,8688,8168,3467,3234,6318,1787,5591,419,6593,7974,8486,9861,6381,6758,194,3061,4315,2863,4665,3789,2201,1492,4416],\n[126,8927,6608,5682,8986,6867,1715,6076,3159,788,3140,4744,830,9253,5812,5021,7616,8534,1546,9590,1101,9012,9821,8132,7857,4086,1069,7491,2988,1579,2442,4321,2149,7642,6108,250,6086,3167,24,9528,7663,2685,1220,9196,1397,5776,1577,1730,5481,977,6115,199,6326,2183,3767,5928,5586,7561,663,8649,9688,949,5913,9160,1870,5764,9887,4477,6703,1413,4995,5494,7131,2192,8969,7138,3997,8697,646,1028],\n[8074,1731,8245,624,4601,8706,155,8891,309,2552,8208,8452,2954,3124,3469,4246,3352,1105,4509,8677,9901,4416,8191,9283,5625,7120,2952,8881,7693,830,4580,8228,9459,8611,4499,1179,4988,1394,550,2336,6089,6872,269,7213,1848,917,6672,4890,656,1478,6536,3165,4743,4990,1176,6211,7207,5284,9730,4738,1549,4986,4942,8645,3698,9429,1439,2175,6549,3058,6513,1574,6988,8333,3406,5245,5431,7140,7085,6407],\n[7845,4694,2530,8249,290,5948,5509,1588,5940,4495,5866,5021,4626,3979,3296,7589,4854,1998,5627,3926,8346,6512,9608,1918,7070,4747,4182,2858,2766,4606,6269,4107,8982,8568,9053,4244,5604,102,2756,727,5887,2566,7922,44,5986,621,1202,374,6988,4130,3627,6744,9443,4568,1398,8679,397,3928,9159,367,2917,6127,5788,3304,8129,911,2669,1463,9749,264,4478,8940,1109,7309,2462,117,4692,7724,225,2312],\n[4164,3637,2000,941,8903,39,3443,7172,1031,3687,4901,8082,4945,4515,7204,9310,9349,9535,9940,218,1788,9245,2237,1541,5670,6538,6047,5553,9807,8101,1925,8714,445,8332,7309,6830,5786,5736,7306,2710,3034,1838,7969,6318,7912,2584,2080,7437,6705,2254,7428,820,782,9861,7596,3842,3631,8063,5240,6666,394,4565,7865,4895,9890,6028,6117,4724,9156,4473,4552,602,470,6191,4927,5387,884,3146,1978,3000],\n[4258,6880,1696,3582,5793,4923,2119,1155,9056,9698,6603,3768,5514,9927,9609,6166,6566,4536,4985,4934,8076,9062,6741,6163,7399,4562,2337,5600,2919,9012,8459,1308,6072,1225,9306,8818,5886,7243,7365,8792,6007,9256,6699,7171,4230,7002,8720,7839,4533,1671,478,7774,1607,2317,5437,4705,7886,4760,6760,7271,3081,2997,3088,7675,6208,3101,6821,6840,122,9633,4900,2067,8546,4549,2091,7188,5605,8599,6758,5229],\n[7854,5243,9155,3556,8812,7047,2202,1541,5993,4600,4760,713,434,7911,7426,7414,8729,322,803,7960,7563,4908,6285,6291,736,3389,9339,4132,8701,7534,5287,3646,592,3065,7582,2592,8755,6068,8597,1982,5782,1894,2900,6236,4039,6569,3037,5837,7698,700,7815,2491,7272,5878,3083,6778,6639,3589,5010,8313,2581,6617,5869,8402,6808,2951,2321,5195,497,2190,6187,1342,1316,4453,7740,4154,2959,1781,1482,8256],\n[7178,2046,4419,744,8312,5356,6855,8839,319,2962,5662,47,6307,8662,68,4813,567,2712,9931,1678,3101,8227,6533,4933,6656,92,5846,4780,6256,6361,4323,9985,1231,2175,7178,3034,9744,6155,9165,7787,5836,9318,7860,9644,8941,6480,9443,8188,5928,161,6979,2352,5628,6991,1198,8067,5867,6620,3778,8426,2994,3122,3124,6335,3918,8897,2655,9670,634,1088,1576,8935,7255,474,8166,7417,9547,2886,5560,3842],\n[6957,3111,26,7530,7143,1295,1744,6057,3009,1854,8098,5405,2234,4874,9447,2620,9303,27,7410,969,40,2966,5648,7596,8637,4238,3143,3679,7187,690,9980,7085,7714,9373,5632,7526,6707,3951,9734,4216,2146,3602,5371,6029,3039,4433,4855,4151,1449,3376,8009,7240,7027,4602,2947,9081,4045,8424,9352,8742,923,2705,4266,3232,2264,6761,363,2651,3383,7770,6730,7856,7340,9679,2158,610,4471,4608,910,6241],\n[4417,6756,1013,8797,658,8809,5032,8703,7541,846,3357,2920,9817,1745,9980,7593,4667,3087,779,3218,6233,5568,4296,2289,2654,7898,5021,9461,5593,8214,9173,4203,2271,7980,2983,5952,9992,8399,3468,1776,3188,9314,1720,6523,2933,621,8685,5483,8986,6163,3444,9539,4320,155,3992,2828,2150,6071,524,2895,5468,8063,1210,3348,9071,4862,483,9017,4097,6186,9815,3610,5048,1644,1003,9865,9332,2145,1944,2213],\n[9284,3803,4920,1927,6706,4344,7383,4786,9890,2010,5228,1224,3158,6967,8580,8990,8883,5213,76,8306,2031,4980,5639,9519,7184,5645,7769,3259,8077,9130,1317,3096,9624,3818,1770,695,2454,947,6029,3474,9938,3527,5696,4760,7724,7738,2848,6442,5767,6845,8323,4131,2859,7595,2500,4815,3660,9130,8580,7016,8231,4391,8369,3444,4069,4021,556,6154,627,2778,1496,4206,6356,8434,8491,3816,8231,3190,5575,1015],\n[3787,7572,1788,6803,5641,6844,1961,4811,8535,9914,9999,1450,8857,738,4662,8569,6679,2225,7839,8618,286,2648,5342,2294,3205,4546,176,8705,3741,6134,8324,8021,7004,5205,7032,6637,9442,5539,5584,4819,5874,5807,8589,6871,9016,983,1758,3786,1519,6241,185,8398,495,3370,9133,3051,4549,9674,7311,9738,3316,9383,2658,2776,9481,7558,619,3943,3324,6491,4933,153,9738,4623,912,3595,7771,7939,1219,4405],\n[2650,3883,4154,5809,315,7756,4430,1788,4451,1631,6461,7230,6017,5751,138,588,5282,2442,9110,9035,6349,2515,1570,6122,4192,4174,3530,1933,4186,4420,4609,5739,4135,2963,6308,1161,8809,8619,2796,3819,6971,8228,4188,1492,909,8048,2328,6772,8467,7671,9068,2226,7579,6422,7056,8042,3296,2272,3006,2196,7320,3238,3490,3102,37,1293,3212,4767,5041,8773,5794,4456,6174,7279,7054,2835,7053,9088,790,6640],\n[3101,1057,7057,3826,6077,1025,2955,1224,1114,6729,5902,4698,6239,7203,9423,1804,4417,6686,1426,6941,8071,1029,4985,9010,6122,6597,1622,1574,3513,1684,7086,5505,3244,411,9638,4150,907,9135,829,981,1707,5359,8781,9751,5,9131,3973,7159,1340,6955,7514,7993,6964,8198,1933,2797,877,3993,4453,8020,9349,8646,2779,8679,2961,3547,3374,3510,1129,3568,2241,2625,9138,5974,8206,7669,7678,1833,8700,4480],\n[4865,9912,8038,8238,782,3095,8199,1127,4501,7280,2112,2487,3626,2790,9432,1475,6312,8277,4827,2218,5806,7132,8752,1468,7471,6386,739,8762,8323,8120,5169,9078,9058,3370,9560,7987,8585,8531,5347,9312,1058,4271,1159,5286,5404,6925,8606,9204,7361,2415,560,586,4002,2644,1927,2824,768,4409,2942,3345,1002,808,4941,6267,7979,5140,8643,7553,9438,7320,4938,2666,4609,2778,8158,6730,3748,3867,1866,7181],\n[171,3771,7134,8927,4778,2913,3326,2004,3089,7853,1378,1729,4777,2706,9578,1360,5693,3036,1851,7248,2403,2273,8536,6501,9216,613,9671,7131,7719,6425,773,717,8803,160,1114,7554,7197,753,4513,4322,8499,4533,2609,4226,8710,6627,644,9666,6260,4870,5744,7385,6542,6203,7703,6130,8944,5589,2262,6803,6381,7414,6888,5123,7320,9392,9061,6780,322,8975,7050,5089,1061,2260,3199,1150,1865,5386,9699,6501],\n[3744,8454,6885,8277,919,1923,4001,6864,7854,5519,2491,6057,8794,9645,1776,5714,9786,9281,7538,6916,3215,395,2501,9618,4835,8846,9708,2813,3303,1794,8309,7176,2206,1602,1838,236,4593,2245,8993,4017,10,8215,6921,5206,4023,5932,6997,7801,262,7640,3107,8275,4938,7822,2425,3223,3886,2105,8700,9526,2088,8662,8034,7004,5710,2124,7164,3574,6630,9980,4242,2901,9471,1491,2117,4562,1130,9086,4117,6698],\n[2810,2280,2331,1170,4554,4071,8387,1215,2274,9848,6738,1604,7281,8805,439,1298,8318,7834,9426,8603,6092,7944,1309,8828,303,3157,4638,4439,9175,1921,4695,7716,1494,1015,1772,5913,1127,1952,1950,8905,4064,9890,385,9357,7945,5035,7082,5369,4093,6546,5187,5637,2041,8946,1758,7111,6566,1027,1049,5148,7224,7248,296,6169,375,1656,7993,2816,3717,4279,4675,1609,3317,42,6201,3100,3144,163,9530,4531],\n[7096,6070,1009,4988,3538,5801,7149,3063,2324,2912,7911,7002,4338,7880,2481,7368,3516,2016,7556,2193,1388,3865,8125,4637,4096,8114,750,3144,1938,7002,9343,4095,1392,4220,3455,6969,9647,1321,9048,1996,1640,6626,1788,314,9578,6630,2813,6626,4981,9908,7024,4355,3201,3521,3864,3303,464,1923,595,9801,3391,8366,8084,9374,1041,8807,9085,1892,9431,8317,9016,9221,8574,9981,9240,5395,2009,6310,2854,9255],\n[8830,3145,2960,9615,8220,6061,3452,2918,6481,9278,2297,3385,6565,7066,7316,5682,107,7646,4466,68,1952,9603,8615,54,7191,791,6833,2560,693,9733,4168,570,9127,9537,1925,8287,5508,4297,8452,8795,6213,7994,2420,4208,524,5915,8602,8330,2651,8547,6156,1812,6271,7991,9407,9804,1553,6866,1128,2119,4691,9711,8315,5879,9935,6900,482,682,4126,1041,428,6247,3720,5882,7526,2582,4327,7725,3503,2631],\n[2738,9323,721,7434,1453,6294,2957,3786,5722,6019,8685,4386,3066,9057,6860,499,5315,3045,5194,7111,3137,9104,941,586,3066,755,4177,8819,7040,5309,3583,3897,4428,7788,4721,7249,6559,7324,825,7311,3760,6064,6070,9672,4882,584,1365,9739,9331,5783,2624,7889,1604,1303,1555,7125,8312,425,8936,3233,7724,1480,403,7440,1784,1754,4721,1569,652,3893,4574,5692,9730,4813,9844,8291,9199,7101,3391,8914],\n[6044,2928,9332,3328,8588,447,3830,1176,3523,2705,8365,6136,5442,9049,5526,8575,8869,9031,7280,706,2794,8814,5767,4241,7696,78,6570,556,5083,1426,4502,3336,9518,2292,1885,3740,3153,9348,9331,8051,2759,5407,9028,7840,9255,831,515,2612,9747,7435,8964,4971,2048,4900,5967,8271,1719,9670,2810,6777,1594,6367,6259,8316,3815,1689,6840,9437,4361,822,9619,3065,83,6344,7486,8657,8228,9635,6932,4864],\n[8478,4777,6334,4678,7476,4963,6735,3096,5860,1405,5127,7269,7793,4738,227,9168,2996,8928,765,733,1276,7677,6258,1528,9558,3329,302,8901,1422,8277,6340,645,9125,8869,5952,141,8141,1816,9635,4025,4184,3093,83,2344,2747,9352,7966,1206,1126,1826,218,7939,2957,2729,810,8752,5247,4174,4038,8884,7899,9567,301,5265,5752,7524,4381,1669,3106,8270,6228,6373,754,2547,4240,2313,5514,3022,1040,9738],\n[2265,8192,1763,1369,8469,8789,4836,52,1212,6690,5257,8918,6723,6319,378,4039,2421,8555,8184,9577,1432,7139,8078,5452,9628,7579,4161,7490,5159,8559,1011,81,478,5840,1964,1334,6875,8670,9900,739,1514,8692,522,9316,6955,1345,8132,2277,3193,9773,3923,4177,2183,1236,6747,6575,4874,6003,6409,8187,745,8776,9440,7543,9825,2582,7381,8147,7236,5185,7564,6125,218,7991,6394,391,7659,7456,5128,5294],\n[2132,8992,8160,5782,4420,3371,3798,5054,552,5631,7546,4716,1332,6486,7892,7441,4370,6231,4579,2121,8615,1145,9391,1524,1385,2400,9437,2454,7896,7467,2928,8400,3299,4025,7458,4703,7206,6358,792,6200,725,4275,4136,7390,5984,4502,7929,5085,8176,4600,119,3568,76,9363,6943,2248,9077,9731,6213,5817,6729,4190,3092,6910,759,2682,8380,1254,9604,3011,9291,5329,9453,9746,2739,6522,3765,5634,1113,5789],\n[5304,5499,564,2801,679,2653,1783,3608,7359,7797,3284,796,3222,437,7185,6135,8571,2778,7488,5746,678,6140,861,7750,803,9859,9918,2425,3734,2698,9005,4864,9818,6743,2475,132,9486,3825,5472,919,292,4411,7213,7699,6435,9019,6769,1388,802,2124,1345,8493,9487,8558,7061,8777,8833,2427,2238,5409,4957,8503,3171,7622,5779,6145,2417,5873,5563,5693,9574,9491,1937,7384,4563,6842,5432,2751,3406,7981]\n];\n--seed-contents--\n```js\nfunction pathSumTwoWays(matrix) {\nreturn true;\n}\n// Only change code above this line\nconst testMatrix1 = [\n[131, 673, 234, 103, 18],\n[201, 96, 342, 965, 150],\n[630, 803, 746, 422, 111],\n[537, 699, 497, 121, 956],\n[805, 732, 524, 37, 331]\n];\npathSumTwoWays(testMatrix1);\n```\n--solutions--\n```js\nfunction pathSumTwoWays(matrix) {\nfunction makeMinimalMove(row, column) {\nif (resultMatrix[row][column + 1] < resultMatrix[row + 1][column]) {\nreturn resultMatrix[row][column + 1];\n}\nreturn resultMatrix[row + 1][column];\n}\nconst size = matrix",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-81-path-sum-two-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 19129,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a348e53a6dd4c96a1d695bed1062bd6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-81-path-sum-two-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "pathSumTwoWays(matrix) { return true; } // Only change code above this line const testMatrix1 = [ [131, 673, 234, 103, 18], [201, 96, 342, 965, 150], [630, 803, 746, 422, 111], [537, 699, 497, 121, 956], [805, 732, 524, 37, 331] ]; pathSumTwoWays(testMatrix1); ``` --solutions-- ```js function pathSumTwoWays(matrix) { function makeMinimalMove(row, column) { if (resultMatrix[row][column + 1] < resultMatrix[row + 1][column]) { return resultMatrix[row][column + 1]; } return resultMatrix[row + 1][column]; } const size = matrixlength;\nconst resultMatrix = [];\nfor (let i = 0; i < size; i++) {\nresultMatrix push([ matrix[i]])\n}\nfor (let i = size - 2; i >= 0; i--) {\nresultMatrix[size - 1][i] += resultMatrix[size - 1][i + 1];\nresultMatrix[i][size - 1] += resultMatrix[i + 1][size - 1];\n}\nfor (let row = size - 2; row >= 0; row--) {\nfor (let column = size - 2; column >= 0; column--) {\nresultMatrix[row][column] += makeMinimalMove(row, column);\n}\n}\nreturn resultMatrix[0][0];\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-81-path-sum-two-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3c073b90e504932c3bb57c2180639fe0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-82-path-sum-three-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3be1000cf542c50fed1\ntitle: 'Problem 82: Path sum: three ways'\nchallengeType: 1\nforumTopicId: 302196\ndashedName: problem-82-path-sum-three-ways\n--description--\nNote: This problem is a more challenging version of Problem 81 The minimal path sum in the 5 by 5 matrix below, by starting in any cell in the left column and finishing in any cell in the right column, and only moving up, down, and right, is indicated in red and bold; the sum is equal to 994 $$\\begin{pmatrix}\n131 & 673 & \\color{red}{234} & \\color{red}{103} & \\color{red}{18}\\\\\n\\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & 150\\\\\n630 & 803 & 746 & 422 & 111\\\\\n537 & 699 & 497 & 121 & 956\\\\\n805 & 732 & 524 & 37 & 331\n\\end{pmatrix}$$\nFind the minimal path sum from the left column to the right column in matrix, a 2D array representing a matrix The maximum matrix size used in tests will be 80 by 80 --hints--\npathSumThreeWays(testMatrix1) should return a number js\nassert(typeof pathSumThreeWays(_testMatrix1) === 'number');\npathSumThreeWays(testMatrix1) should return 994 js\nassert strictEqual(pathSumThreeWays(_testMatrix1), 994);\npathSumThreeWays(testMatrix2) should return 260324 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-82-path-sum-three-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fb77c9040004a3da6356831e68cc70af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-82-path-sum-three-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "& 699 & 497 & 121 & 956\\\\ 805 & 732 & 524 & 37 & 331 \\end{pmatrix}$$ Find the minimal path sum from the left column to the right column in matrix, a 2D array representing a matrix The maximum matrix size used in tests will be 80 by 80 --hints-- pathSumThreeWays(testMatrix1) should return a number js assert(typeof pathSumThreeWays(_testMatrix1) === 'number'); pathSumThreeWays(testMatrix1) should return 994 js assert strictEqual(pathSumThreeWays(_testMatrix1), 994); pathSumThreeWays(testMatrix2) should return 260324 js assertstrictEqual(pathSumThreeWays(_testMatrix2), 260324);\n--seed--\n--after-user-code--\njs\nconst _testMatrix1 = [\n[131, 673, 234, 103, 18],\n[201, 96, 342, 965, 150],\n[630, 803, 746, 422, 111],\n[537, 699, 497, 121, 956],\n[805, 732, 524, 37, 331]\n];\nconst _testMatrix2 = [\n[4445,2697,5115,718,2209,2212,654,4348,3079,6821,7668,3276,8874,4190,3785,2752,9473,7817,9137,496,7338,3434,7152,4355,4552,7917,7827,2460,2350,691,3514,5880,3145,7633,7199,3783,5066,7487,3285,1084,8985,760,872,8609,8051,1134,9536,5750,9716,9371,7619,5617,275,9721,2997,2698,1887,8825,6372,3014,2113,7122,7050,6775,5948,2758,1219,3539,348,7989,2735,9862,1263,8089,6401,9462,3168,2758,3748,5870],\n[1096,20,1318,7586,5167,2642,1443,5741,7621,7030,5526,4244,2348,4641,9827,2448,6918,5883,3737,300,7116,6531,567,5997,3971,6623,820,6148,3287,1874,7981,8424,7672,7575,6797,6717,1078,5008,4051,8795,5820,346,1851,6463,2117,6058,3407,8211,117,4822,1317,4377,4434,5925,8341,4800,1175,4173,690,8978,7470,1295,3799,8724,3509,9849,618,3320,7068,9633,2384,7175,544,6583,1908,9983,481,4187,9353,9377],\n[9607,7385,521,6084,1364,8983,7623,1585,6935,8551,2574,8267,4781,3834,2764,2084,2669,4656,9343,7709,2203,9328,8004,6192,5856,3555,2260,5118,6504,1839,9227,1259,9451,1388,7909,5733,6968,8519,9973,1663,5315,7571,3035,4325,4283,2304,6438,3815,9213,9806,9536,196,5542,6907,2475,1159,5820,9075,9470,2179,9248,1828,4592,9167,3713,4640,47,3637,309,7344,6955,346,378,9044,8635,7466,5036,9515,6385,9230],\n[7206,3114,7760,1094,6150,5182,7358,7387,4497,955,101,1478,7777,6966,7010,8417,6453,4955,3496,107,449,8271,131,2948,6185,784,5937,8001,6104,8282,4165,3642,710,2390,575,715,3089,6964,4217,192,5949,7006,715,3328,1152,66,8044,4319,1735,146,4818,5456,6451,4113,1063,4781,6799,602,1504,6245,6550,1417,1343,2363,3785,5448,4545,9371,5420,5068,4613,4882,4241,5043,7873,8042,8434,3939,9256,2187],\n[3620,8024,577,9997,7377,7682,1314,1158,6282,6310,1896,2509,5436,1732,9480,706,496,101,6232,7375,2207,2306,110,6772,3433,2878,8140,5933,8688,1399,2210,7332,6172,6403,7333,4044,2291,1790,2446,7390,8698,5723,3678,7104,1825,2040,140,3982,4905,4160,2200,5041,2512,1488,2268,1175,7588,8321,8078,7312,977,5257,8465,5068,3453,3096,1651,7906,253,9250,6021,8791,8109,6651,3412,345,4778,5152,4883,7505],\n[1074,5438,9008,2679,5397,5429,2652,3403,770,9188,4248,2493,4361,8327,9587,707,9525,5913,93,1899,328,2876,3604,673,8576,6908,7659,2544,3359,3883,5273,6587,3065,1749,3223,604,9925,6941,2823,8767,7039,3290,3214,1787,7904,3421,7137,9560,8451,2669,9219,6332,1576,5477,6755,8348,4164,4307,2984,4012,6629,1044,2874,6541,4942,903,1404,9125,5160,8836,4345,2581,460,8438,1538,5507,668,3352,2678,6942],\n[4295,1176,5596,1521,3061,9868,7037,7129,8933,6659,5947,5063,3653,9447,9245,2679,767,714,116,8558,163,3927,8779,158,5093,2447,5782,3967,1716,931,7772,8164,1117,9244,5783,7776,3846,8862,6014,2330,6947,1777,3112,6008,3491,1906,5952,314,4602,8994,5919,9214,3995,5026,7688,6809,5003,3128,2509,7477,110,8971,3982,8539,2980,4689,6343,5411,2992,5270,5247,9260,2269,7474,1042,7162,5206,1232,4556,4757],\n[510,3556,5377,1406,5721,4946,2635,7847,4251,8293,8281,6351,4912,287,2870,3380,3948,5322,3840,4738,9563,1906,6298,3234,8959,1562,6297,8835,7861,239,6618,1322,2553,2213,5053,5446,4402,6500,5182,8585,6900,5756,9661,903,5186,7687,5998,7997,8081,8955,4835,6069,2621,1581,732,9564,1082,1853,5442,1342,520,1737,3703,5321,4793,2776,1508,1647,9101,2499,6891,4336,7012,3329,3212,1442,9993,3988,4930,7706],\n[9444,3401,5891,9716,1228,7107,109,3563,2700,6161,5039,4992,2242,8541,7372,2067,1294,3058,1306,320,8881,5756,9326,411,8650,8824,5495,8282,8397,2000,1228,7817,2099,6473,3571,5994,4447,1299,5991,543,7874,2297,1651,101,2093,3463,9189,6872,6118,872,1008,1779,2805,9084,4048,2123,5877,55,3075,1737,9459,4535,6453,3644,108,5982,4437,5213,1340,6967,9943,5815,669,8074,1838,6979,9132,9315,715,5048],\n[3327,4030,7177,6336,9933,5296,2621,4785,2755,4832,2512,2118,2244,4407,2170,499,7532,9742,5051,7687,970,6924,3527,4694,5145,1306,2165,5940,2425,8910,3513,1909,6983,346,6377,4304,9330,7203,6605,3709,3346,970,369,9737,5811,4427,9939,3693,8436,5566,1977,3728,2399,3985,8303,2492,5366,9802,9193,7296,1033,5060,9144,2766,1151,7629,5169,5995,58,7619,7565,4208,1713,6279,3209,4908,9224,7409,1325,8540],\n[6882,1265,1775,3648,4690,959,5837,4520,5394,1378,9485,1360,4018,578,9174,2932,9890,3696,116,1723,1178,9355,7063,1594,1918,8574,7594,7942,1547,6166,7888,354,6932,4651,1010,7759,6905,661,7689,6092,9292,3845,9605,8443,443,8275,5163,7720,7265,6356,7779,1798,1754,5225,6661,1180,8024,5666,88,9153,1840,3508,1193,4445,2648,3538,6243,6375,8107,5902,5423,2520,1122,5015,6113,8859,9370,966,8673,2442],\n[7338,3423,4723,6533,848,8041,7921,8277,4094,5368,7252,8852,9166,2250,2801,6125,8093,5738,4038,9808,7359,9494,601,9116,4946,2702,5573,2921,9862,1462,1269,2410,4171,2709,7508,6241,7522,615,2407,8200,4189,5492,5649,7353,2590,5203,4274,710,7329,9063,956,8371,3722,4253,4785,1194,4828,4717,4548,940,983,2575,4511,2938,1827,2027,2700,1236,841,5760,1680,6260,2373,3851,1841,4968,1172,5179,7175,3509],\n[4420,1327,3560,2376,6260,2988,9537,4064,4829,8872,9598,3228,1792,7118,9962,9336,4368,9189,6857,1829,9863,6287,7303,7769,2707,8257,2391,2009,3975,4993,3068,9835,3427,341,8412,2134,4034,8511,6421,3041,9012,2983,7289,100,1355,7904,9186,6920,5856,2008,6545,8331,3655,5011,839,8041,9255,6524,3862,8788,62,7455,3513,5003,8413,3918,2076,7960,6108,3638,6999,3436,1441,4858,4181,1866,8731,7745,3744,1000],\n[356,8296,8325,1058,1277,4743,3850,2388,6079,6462,2815,5620,8495,5378,75,4324,3441,9870,1113,165,1544,1179,2834,562,6176,2313,6836,8839,2986,9454,5199,6888,1927,5866,8760,320,1792,8296,7898,6121,7241,5886,5814,2815,8336,1576,4314,3109,2572,6011,2086,9061,9403,3947,5487,9731,7281,3159,1819,1334,3181,5844,5114,9898,4634,2531,4412,6430,4262,8482,4546,4555,6804,2607,9421,686,8649,8860,7794,6672],\n[9870,152,1558,4963,8750,4754,6521,6256,8818,5208,5691,9659,8377,9725,5050,5343,2539,6101,1844,9700,7750,8114,5357,3001,8830,4438,199,9545,8496,43,2078,327,9397,106,6090,8181,8646,6414,7499,5450,4850,6273,5014,4131,7639,3913,6571,8534,9703,4391,7618,445,1320,5,1894,6771,7383,9191,4708,9706,6939,7937,8726,9382,5216,3685,2247,9029,8154,1738,9984,2626,9438,4167,6351,5060,29,1218,1239,4785],\n[192,5213,8297,8974,4032,6966,5717,1179,6523,4679,9513,1481,3041,5355,9303,9154,1389,8702,6589,7818,6336,3539,5538,3094,6646,6702,6266,2759,4608,4452,617,9406,8064,6379,444,5602,4950,1810,8391,1536,316,8714,1178,5182,5863,5110,5372,4954,1978,2971,5680,4863,2255,4630,5723,2168,538,1692,1319,7540,440,6430,6266,7712,7385,5702,620,641,3136,7350,1478,3155,2820,9109,6261,1122,4470,14,8493,2095],\n[1046,4301,6082,474,4974,7822,2102,5161,5172,6946,8074,9716,6586,9962,9749,5015,2217,995,5388,4402,7652,6399,6539,1349,8101,3677,1328,9612,7922,2879,231,5887,2655,508,4357,4964,3554,5930,6236,7384,4614,280,3093,9600,2110,7863,2631,6626,6620,68,1311,7198,7561,1768,5139,1431,221,230,2940,968,5283,6517,2146,1646,869,9402,7068,8645,7058,1765,9690,4152,2926,9504,2939,7504,6074,2944,6470,7859],\n[4659,736,4951,9344,1927,6271,8837,8711,3241,6579,7660,5499,5616,3743,5801,4682,9748,8796,779,1833,4549,8138,4026,775,4170,2432,4174,3741,7540,8017,2833,4027,396,811,2871,1150,9809,2719,9199,8504,1224,540,2051,3519,7982,7367,2761,308,3358,6505,2050,4836,5090,7864,805,2566,2409,6876,3361,8622,5572,5895,3280,441,7893,8105,1634,2929,274,3926,7786,6123,8233,9921,2674,5340,1445,203,4585,3837],\n[5759,338,7444,7968,7742,3755,1591,4839,1705,650,7061,2461,9230,9391,9373,2413,1213,431,7801,4994,2380,2703,6161,6878,8331,2538,6093,1275,5065,5062,2839,582,1014,8109,3525,1544,1569,8622,7944,2905,6120,1564,1839,5570,7579,1318,2677,5257,4418,5601,7935,7656,5192,1864,5886,6083,5580,6202,8869,1636,7907,4759,9082,5854,3185,7631,6854,5872,5632,5280,1431,2077,9717,7431,4256,8261,9680,4487,4752,4286],\n[1571,1428,8599,1230,7772,4221,8523,9049,4042,8726,7567,6736,9033,2104,4879,4967,6334,6716,3994,1269,8995,6539,3610,7667,6560,6065,874,848,4597,1711,7161,4811,6734,5723,6356,6026,9183,2586,5636,1092,7779,7923,8747,6887,7505,9909,1792,3233,4526,3176,1508,8043,720,5212,6046,4988,709,5277,8256,3642,1391,5803,1468,2145,3970,6301,7767,2359,8487,9771,8785,7520,856,1605,8972,2402,2386,991,1383,5963],\n[1822,4824,5957,6511,9868,4113,301,9353,6228,2881,2966,6956,9124,9574,9233,1601,7340,973,9396,540,4747,8590,9535,3650,7333,7583,4806,3593,2738,8157,5215,8472,2284,9473,3906,6982,5505,6053,7936,6074,7179,6688,1564,1103,6860,5839,2022,8490,910,7551,7805,881,7024,1855,9448,4790,1274,3672,2810,774,7623,4223,4850,6071,9975,4935,1915,9771,6690,3846,517,463,7624,4511,614,6394,3661,7409,1395,8127],\n[8738,3850,9555,3695,4383,2378,87,6256,6740,7682,9546,4255,6105,2000,1851,4073,8957,9022,6547,5189,2487,303,9602,7833,1628,4163,6678,3144,8589,7096,8913,5823,4890,7679,1212,9294,5884,2972,3012,3359,7794,7428,1579,4350,7246,4301,7779,7790,3294,9547,4367,3549,1958,8237,6758,3497,3250,3456,6318,1663,708,7714,6143,6890,3428,6853,9334,7992,591,6449,9786,1412,8500,722,5468,1371,108,3939,4199,2535],\n[7047,4323,1934,5163,4166,461,3544,2767,6554,203,6098,2265,9078,2075,4644,6641,8412,9183,487,101,7566,5622,1975,5726,2920,5374,7779,5631,3753,3725,2672,3621,4280,1162,5812,345,8173,9785,1525,955,5603,2215,2580,5261,2765,2990,5979,389,3907,2484,1232,5933,5871,3304,1138,1616,5114,9199,5072,7442,7245,6472,4760,6359,9053,7876,2564,9404,3043,9026,2261,3374,4460,7306,2326,966,828,3274,1712,3446],\n[3975,4565,8131,5800,4570,2306,8838,4392,9147,11,3911,7118,9645,4994,2028,6062,5431,2279,8752,2658,7836,994,7316,5336,7185,3289,1898,9689,2331,5737,3403,1124,2679,3241,7748,16,2724,5441,6640,9368,9081,5618,858,4969,17,2103,6035,8043,7475,2181,939,415,1617,8500,8253,2155,7843,7974,7859,1746,6336,3193,2617,8736,4079,6324,6645,8891,9396,5522,6103,1857,8979,3835,2475,1310,7422,610,8345,7615],\n[9248,5397,5686,2988,3446,4359,6634,9141,497,9176,6773,7448,1907,8454,916,1596,2241,1626,1384,2741,3649,5362,8791,7170,2903,2475,5325,6451,924,3328,522,90,4813,9737,9557,691,2388,1383,4021,1609,9206,4707,5200,7107,8104,4333,9860,5013,1224,6959,8527,1877,4545,7772,6268,621,4915,9349,5970,706,9583,3071,4127,780,8231,3017,9114,3836,7503,2383,1977,4870,8035,2379,9704,1037,3992,3642,1016,4303],\n[5093,138,4639,6609,1146,5565,95,7521,9077,2272,974,4388,2465,2650,722,4998,3567,3047,921,2736,7855,173,2065,4238,1048,5,6847,9548,8632,9194,5942,4777,7910,8971,6279,7253,2516,1555,1833,3184,9453,9053,6897,7808,8629,4877,1871,8055,4881,7639,1537,7701,2508,7564,5845,5023,2304,5396,3193,2955,1088,3801,6203,1748,3737,1276,13,4120,7715,8552,3047,2921,106,7508,304,1280,7140,2567,9135,5266],\n[6237,4607,7527,9047,522,7371,4883,2540,5867,6366,5301,1570,421,276,3361,527,6637,4861,2401,7522,5808,9371,5298,2045,5096,5447,7755,5115,7060,8529,4078,1943,1697,1764,5453,7085,960,2405,739,2100,5800,728,9737,5704,5693,1431,8979,6428,673,7540,6,7773,5857,6823,150,5869,8486,684,5816,9626,7451,5579,8260,3397,5322,6920,1879,2127,2884,5478,4977,9016,6165,6292,3062,5671,5968,78,4619,4763],\n[9905,7127,9390,5185,6923,3721,9164,9705,4341,1031,1046,5127,7376,6528,3248,4941,1178,7889,3364,4486,5358,9402,9158,8600,1025,874,1839,1783,309,9030,1843,845,8398,1433,7118,70,8071,2877,3904,8866,6722,4299,10,1929,5897,4188,600,1889,3325,2485,6473,4474,7444,6992,4846,6166,4441,2283,2629,4352,7775,1101,2214,9985,215,8270,9750,2740,8361,7103,5930,8664,9690,8302,9267,344,2077,1372,1880,9550],\n[5825,8517,7769,2405,8204,1060,3603,7025,478,8334,1997,3692,7433,9101,7294,7498,9415,5452,3850,3508,6857,9213,6807,4412,7310,854,5384,686,4978,892,8651,3241,2743,3801,3813,8588,6701,4416,6990,6490,3197,6838,6503,114,8343,5844,8646,8694,65,791,5979,2687,2621,2019,8097,1423,3644,9764,4921,3266,3662,5561,2476,8271,8138,6147,1168,3340,1998,9874,6572,9873,6659,5609,2711,3931,9567,4143,7833,8887],\n[6223,2099,2700,589,4716,8333,1362,5007,2753,2848,4441,8397,7192,8191,4916,9955,6076,3370,6396,6971,3156,248,3911,2488,4930,2458,7183,5455,170,6809,6417,3390,1956,7188,577,7526,2203,968,8164,479,8699,7915,507,6393,4632,1597,7534,3604,618,3280,6061,9793,9238,8347,568,9645,2070,5198,6482,5000,9212,6655,5961,7513,1323,3872,6170,3812,4146,2736,67,3151,5548,2781,9679,7564,5043,8587,1893,4531],\n[5826,3690,6724,2121,9308,6986,8106,6659,2142,1642,7170,2877,5757,6494,8026,6571,8387,9961,6043,9758,9607,6450,8631,8334,7359,5256,8523,2225,7487,1977,9555,8048,5763,2414,4948,4265,2427,8978,8088,8841,9208,9601,5810,9398,8866,9138,4176,5875,7212,3272,6759,5678,7649,4922,5422,1343,8197,3154,3600,687,1028,4579,2084,9467,4492,7262,7296,6538,7657,7134,2077,1505,7332,6890,8964,4879,7603,7400,5973,739],\n[1861,1613,4879,1884,7334,966,2000,7489,2123,4287,1472,3263,4726,9203,1040,4103,6075,6049,330,9253,4062,4268,1635,9960,577,1320,3195,9628,1030,4092,4979,6474,6393,2799,6967,8687,7724,7392,9927,2085,3200,6466,8702,265,7646,8665,7986,7266,4574,6587,612,2724,704,3191,8323,9523,3002,704,5064,3960,8209,2027,2758,8393,4875,4641,9584,6401,7883,7014,768,443,5490,7506,1852,2005,8850,5776,4487,4269],\n[4052,6687,4705,7260,6645,6715,3706,5504,8672,2853,1136,8187,8203,4016,871,1809,1366,4952,9294,5339,6872,2645,6083,7874,3056,5218,7485,8796,7401,3348,2103,426,8572,4163,9171,3176,948,7654,9344,3217,1650,5580,7971,2622,76,2874,880,2034,9929,1546,2659,5811,3754,7096,7436,9694,9960,7415,2164,953,2360,4194,2397,1047,2196,6827,575,784,2675,8821,6802,7972,5996,6699,2134,7577,2887,1412,4349,4380],\n[4629,2234,6240,8132,7592,3181,6389,1214,266,1910,2451,8784,2790,1127,6932,1447,8986,2492,5476,397,889,3027,7641,5083,5776,4022,185,3364,5701,2442,2840,4160,9525,4828,6602,2614,7447,3711,4505,7745,8034,6514,4907,2605,7753,6958,7270,6936,3006,8968,439,2326,4652,3085,3425,9863,5049,5361,8688,297,7580,8777,7916,6687,8683,7141,306,9569,2384,1500,3346,4601,7329,9040,6097,2727,6314,4501,4974,2829],\n[8316,4072,2025,6884,3027,1808,5714,7624,7880,8528,4205,8686,7587,3230,1139,7273,6163,6986,3914,9309,1464,9359,4474,7095,2212,7302,2583,9462,7532,6567,1606,4436,8981,5612,6796,4385,5076,2007,6072,3678,8331,1338,3299,8845,4783,8613,4071,1232,6028,2176,3990,2148,3748,103,9453,538,6745,9110,926,3125,473,5970,8728,7072,9062,1404,1317,5139,9862,6496,6062,3338,464,1600,2532,1088,8232,7739,8274,3873],\n[2341,523,7096,8397,8301,6541,9844,244,4993,2280,7689,4025,4196,5522,7904,6048,2623,9258,2149,9461,6448,8087,7245,1917,8340,7127,8466,5725,6996,3421,5313,512,9164,9837,9794,8369,4185,1488,7210,1524,1016,4620,9435,2478,7765,8035,697,6677,3724,6988,5853,7662,3895,9593,1185,4727,6025,5734,7665,3070,138,8469,6748,6459,561,7935,8646,2378,462,7755,3115,9690,8877,3946,2728,8793,244,6323,8666,4271],\n[6430,2406,8994,56,1267,3826,9443,7079,7579,5232,6691,3435,6718,5698,4144,7028,592,2627,217,734,6194,8156,9118,58,2640,8069,4127,3285,694,3197,3377,4143,4802,3324,8134,6953,7625,3598,3584,4289,7065,3434,2106,7132,5802,7920,9060,7531,3321,1725,1067,3751,444,5503,6785,7937,6365,4803,198,6266,8177,1470,6390,1606,2904,7555,9834,8667,2033,1723,5167,1666,8546,8152,473,4475,6451,7947,3062,3281],\n[2810,3042,7759,1741,2275,2609,7676,8640,4117,1958,7500,8048,1757,3954,9270,1971,4796,2912,660,5511,3553,1012,5757,4525,6084,7198,8352,5775,7726,8591,7710,9589,3122,4392,6856,5016,749,2285,3356,7482,9956,7348,2599,8944,495,3462,3578,551,4543,7207,7169,7796,1247,4278,6916,8176,3742,8385,2310,1345,8692,2667,4568,1770,8319,3585,4920,3890,4928,7343,5385,9772,7947,8786,2056,9266,3454,2807,877,2660],\n[6206,8252,5928,5837,4177,4333,207,7934,5581,9526,8906,1498,8411,2984,5198,5134,2464,8435,8514,8674,3876,599,5327,826,2152,4084,2433,9327,9697,4800,2728,3608,3849,3861,3498,9943,1407,3991,7191,9110,5666,8434,4704,6545,5944,2357,1163,4995,9619,6754,4200,9682,6654,4862,4744,5953,6632,1054,293,9439,8286,2255,696,8709,1533,1844,6441,430,1999,6063,9431,7018,8057,2920,6266,6799,356,3597,4024,6665],\n[3847,6356,8541,7225,2325,2946,5199,469,5450,7508,2197,9915,8284,7983,6341,3276,3321,16,1321,7608,5015,3362,8491,6968,6818,797,156,2575,706,9516,5344,5457,9210,5051,8099,1617,9951,7663,8253,9683,2670,1261,4710,1068,8753,4799,1228,2621,3275,6188,4699,1791,9518,8701,5932,4275,6011,9877,2933,4182,6059,2930,6687,6682,9771,654,9437,3169,8596,1827,5471,8909,2352,123,4394,3208,8756,5513,6917,2056],\n[5458,8173,3138,3290,4570,4892,3317,4251,9699,7973,1163,1935,5477,6648,9614,5655,9592,975,9118,2194,7322,8248,8413,3462,8560,1907,7810,6650,7355,2939,4973,6894,3933,3784,3200,2419,9234,4747,2208,2207,1945,2899,1407,6145,8023,3484,5688,7686,2737,3828,3704,9004,5190,9740,8643,8650,5358,4426,1522,1707,3613,9887,6956,2447,2762,833,1449,9489,2573,1080,4167,3456,6809,2466,227,7125,2759,6250,6472,8089],\n[3266,7025,9756,3914,1265,9116,7723,9788,6805,5493,2092,8688,6592,9173,4431,4028,6007,7131,4446,4815,3648,6701,759,3312,8355,4485,4187,5188,8746,7759,3528,2177,5243,8379,3838,7233,4607,9187,7216,2190,6967,2920,6082,7910,5354,3609,8958,6949,7731,494,8753,8707,1523,4426,3543,7085,647,6771,9847,646,5049,824,8417,5260,2730,5702,2513,9275,4279,2767,8684,1165,9903,4518,55,9682,8963,6005,2102,6523],\n[1998,8731,936,1479,5259,7064,4085,91,7745,7136,3773,3810,730,8255,2705,2653,9790,6807,2342,355,9344,2668,3690,2028,9679,8102,574,4318,6481,9175,5423,8062,2867,9657,7553,3442,3920,7430,3945,7639,3714,3392,2525,4995,4850,2867,7951,9667,486,9506,9888,781,8866,1702,3795,90,356,1483,4200,2131,6969,5931,486,6880,4404,1084,5169,4910,6567,8335,4686,5043,2614,3352,2667,4513,6472,7471,5720,1616],\n[8878,1613,1716,868,1906,2681,564,665,5995,2474,7496,3432,9491,9087,8850,8287,669,823,347,6194,2264,2592,7871,7616,8508,4827,760,2676,4660,4881,7572,3811,9032,939,4384,929,7525,8419,5556,9063,662,8887,7026,8534,3111,1454,2082,7598,5726,6687,9647,7608,73,3014,5063,670,5461,5631,3367,9796,8475,7908,5073,1565,5008,5295,4457,1274,4788,1728,338,600,8415,8535,9351,7750,6887,5845,1741,125],\n[3637,6489,9634,9464,9055,2413,7824,9517,7532,3577,7050,6186,6980,9365,9782,191,870,2497,8498,2218,2757,5420,6468,586,3320,9230,1034,1393,9886,5072,9391,1178,8464,8042,6869,2075,8275,3601,7715,9470,8786,6475,8373,2159,9237,2066,3264,5000,679,355,3069,4073,494,2308,5512,4334,9438,8786,8637,9774,1169,1949,6594,6072,4270,9158,7916,5752,6794,9391,6301,5842,3285,2141,3898,8027,4310,8821,7079,1307],\n[8497,6681,4732,7151,7060,5204,9030,7157,833,5014,8723,3207,9796,9286,4913,119,5118,7650,9335,809,3675,2597,5144,3945,5090,8384,187,4102,1260,2445,2792,4422,8389,9290,50,1765,1521,6921,8586,4368,1565,5727,7855,2003,4834,9897,5911,8630,5070,1330,7692,7557,7980,6028,5805,9090,8265,3019,3802,698,9149,5748,1965,9658,4417,5994,5584,8226,2937,272,5743,1278,5698,8736,2595,6475,5342,6596,1149,6920],\n[8188,8009,9546,6310,8772,2500,9846,6592,6872,3857,1307,8125,7042,1544,6159,2330,643,4604,7899,6848,371,8067,2062,3200,7295,1857,9505,6936,384,2193,2190,301,8535,5503,1462,7380,5114,4824,8833,1763,4974,8711,9262,6698,3999,2645,6937,7747,1128,2933,3556,7943,2885,3122,9105,5447,418,2899,5148,3699,9021,9501,597,4084,175,1621,1,1079,6067,5812,4326,9914,6633,5394,4233,6728,9084,1864,5863,1225],\n[9935,8793,9117,1825,9542,8246,8437,3331,9128,9675,6086,7075,319,1334,7932,3583,7167,4178,1726,7720,695,8277,7887,6359,5912,1719,2780,8529,1359,2013,4498,8072,1129,9998,1147,8804,9405,6255,1619,2165,7491,1,8882,7378,3337,503,5758,4109,3577,985,3200,7615,8058,5032,1080,6410,6873,5496,1466,2412,9885,5904,4406,3605,8770,4361,6205,9193,1537,9959,214,7260,9566,1685,100,4920,7138,9819,5637,976],\n[3466,9854,985,1078,7222,8888,5466,5379,3578,4540,6853,8690,3728,6351,7147,3134,6921,9692,857,3307,4998,2172,5783,3931,9417,2541,6299,13,787,2099,9131,9494,896,8600,1643,8419,7248,2660,2609,8579,91,6663,5506,7675,1947,6165,4286,1972,9645,3805,1663,1456,8853,5705,9889,7489,1107,383,4044,2969,3343,152,7805,4980,9929,5033,1737,9953,7197,9158,4071,1324,473,9676,3984,9680,3606,8160,7384,5432],\n[1005,4512,5186,3953,2164,3372,4097,3247,8697,3022,9896,4101,3871,6791,3219,2742,4630,6967,7829,5991,6134,1197,1414,8923,8787,1394,8852,5019,7768,5147,8004,8825,5062,9625,7988,1110,3992,7984,9966,6516,6251,8270,421,3723,1432,4830,6935,8095,9059,2214,6483,6846,3120,1587,6201,6691,9096,9627,6671,4002,3495,9939,7708,7465,5879,6959,6634,3241,3401,2355,9061,2611,7830,3941,2177,2146,5089,7079,519,6351],\n[7280,8586,4261,2831,7217,3141,9994,9940,5462,2189,4005,6942,9848,5350,8060,6665,7519,4324,7684,657,9453,9296,2944,6843,7499,7847,1728,9681,3906,6353,5529,2822,3355,3897,7724,4257,7489,8672,4356,3983,1948,6892,7415,4153,5893,4190,621,1736,4045,9532,7701,3671,1211,1622,3176,4524,9317,7800,5638,6644,6943,5463,3531,2821,1347,5958,3436,1438,2999,994,850,4131,2616,1549,3465,5946,690,9273,6954,7991],\n[9517,399,3249,2596,7736,2142,1322,968,7350,1614,468,3346,3265,7222,6086,1661,5317,2582,7959,4685,2807,2917,1037,5698,1529,3972,8716,2634,3301,3412,8621,743,8001,4734,888,7744,8092,3671,8941,1487,5658,7099,2781,99,1932,4443,4756,4652,9328,1581,7855,4312,5976,7255,6480,3996,2748,1973,9731,4530,2790,9417,7186,5303,3557,351,7182,9428,1342,9020,7599,1392,8304,2070,9138,7215,2008,9937,1106,7110],\n[7444,769,9688,632,1571,6820,8743,4338,337,3366,3073,1946,8219,104,4210,6986,249,5061,8693,7960,6546,1004,8857,5997,9352,4338,6105,5008,2556,6518,6694,4345,3727,7956,20,3954,8652,4424,9387,2035,8358,5962,5304,5194,8650,8282,1256,1103,2138,6679,1985,3653,2770,2433,4278,615,2863,1715,242,3790,2636,6998,3088,1671,2239,957,5411,4595,6282,2881,9974,2401,875,7574,2987,4587,3147,6766,9885,2965],\n[3287,3016,3619,6818,9073,6120,5423,557,2900,2015,8111,3873,1314,4189,1846,4399,7041,7583,2427,2864,3525,5002,2069,748,1948,6015,2684,438,770,8367,1663,7887,7759,1885,157,7770,4520,4878,3857,1137,3525,3050,6276,5569,7649,904,4533,7843,2199,5648,7628,9075,9441,3600,7231,2388,5640,9096,958,3058,584,5899,8150,1181,9616,1098,8162,6819,8171,1519,1140,7665,8801,2632,1299,9192,707,9955,2710,7314],\n[1772,2963,7578,3541,3095,1488,7026,2634,6015,4633,4370,2762,1650,2174,909,8158,2922,8467,4198,4280,9092,8856,8835,5457,2790,8574,9742,5054,9547,4156,7940,8126,9824,7340,8840,6574,3547,1477,3014,6798,7134,435,9484,9859,3031,4,1502,4133,1738,1807,4825,463,6343,9701,8506,9822,9555,8688,8168,3467,3234,6318,1787,5591,419,6593,7974,8486,9861,6381,6758,194,3061,4315,2863,4665,3789,2201,1492,4416],\n[126,8927,6608,5682,8986,6867,1715,6076,3159,788,3140,4744,830,9253,5812,5021,7616,8534,1546,9590,1101,9012,9821,8132,7857,4086,1069,7491,2988,1579,2442,4321,2149,7642,6108,250,6086,3167,24,9528,7663,2685,1220,9196,1397,5776,1577,1730,5481,977,6115,199,6326,2183,3767,5928,5586,7561,663,8649,9688,949,5913,9160,1870,5764,9887,4477,6703,1413,4995,5494,7131,2192,8969,7138,3997,8697,646,1028],\n[8074,1731,8245,624,4601,8706,155,8891,309,2552,8208,8452,2954,3124,3469,4246,3352,1105,4509,8677,9901,4416,8191,9283,5625,7120,2952,8881,7693,830,4580,8228,9459,8611,4499,1179,4988,1394,550,2336,6089,6872,269,7213,1848,917,6672,4890,656,1478,6536,3165,4743,4990,1176,6211,7207,5284,9730,4738,1549,4986,4942,8645,3698,9429,1439,2175,6549,3058,6513,1574,6988,8333,3406,5245,5431,7140,7085,6407],\n[7845,4694,2530,8249,290,5948,5509,1588,5940,4495,5866,5021,4626,3979,3296,7589,4854,1998,5627,3926,8346,6512,9608,1918,7070,4747,4182,2858,2766,4606,6269,4107,8982,8568,9053,4244,5604,102,2756,727,5887,2566,7922,44,5986,621,1202,374,6988,4130,3627,6744,9443,4568,1398,8679,397,3928,9159,367,2917,6127,5788,3304,8129,911,2669,1463,9749,264,4478,8940,1109,7309,2462,117,4692,7724,225,2312],\n[4164,3637,2000,941,8903,39,3443,7172,1031,3687,4901,8082,4945,4515,7204,9310,9349,9535,9940,218,1788,9245,2237,1541,5670,6538,6047,5553,9807,8101,1925,8714,445,8332,7309,6830,5786,5736,7306,2710,3034,1838,7969,6318,7912,2584,2080,7437,6705,2254,7428,820,782,9861,7596,3842,3631,8063,5240,6666,394,4565,7865,4895,9890,6028,6117,4724,9156,4473,4552,602,470,6191,4927,5387,884,3146,1978,3000],\n[4258,6880,1696,3582,5793,4923,2119,1155,9056,9698,6603,3768,5514,9927,9609,6166,6566,4536,4985,4934,8076,9062,6741,6163,7399,4562,2337,5600,2919,9012,8459,1308,6072,1225,9306,8818,5886,7243,7365,8792,6007,9256,6699,7171,4230,7002,8720,7839,4533,1671,478,7774,1607,2317,5437,4705,7886,4760,6760,7271,3081,2997,3088,7675,6208,3101,6821,6840,122,9633,4900,2067,8546,4549,2091,7188,5605,8599,6758,5229],\n[7854,5243,9155,3556,8812,7047,2202,1541,5993,4600,4760,713,434,7911,7426,7414,8729,322,803,7960,7563,4908,6285,6291,736,3389,9339,4132,8701,7534,5287,3646,592,3065,7582,2592,8755,6068,8597,1982,5782,1894,2900,6236,4039,6569,3037,5837,7698,700,7815,2491,7272,5878,3083,6778,6639,3589,5010,8313,2581,6617,5869,8402,6808,2951,2321,5195,497,2190,6187,1342,1316,4453,7740,4154,2959,1781,1482,8256],\n[7178,2046,4419,744,8312,5356,6855,8839,319,2962,5662,47,6307,8662,68,4813,567,2712,9931,1678,3101,8227,6533,4933,6656,92,5846,4780,6256,6361,4323,9985,1231,2175,7178,3034,9744,6155,9165,7787,5836,9318,7860,9644,8941,6480,9443,8188,5928,161,6979,2352,5628,6991,1198,8067,5867,6620,3778,8426,2994,3122,3124,6335,3918,8897,2655,9670,634,1088,1576,8935,7255,474,8166,7417,9547,2886,5560,3842],\n[6957,3111,26,7530,7143,1295,1744,6057,3009,1854,8098,5405,2234,4874,9447,2620,9303,27,7410,969,40,2966,5648,7596,8637,4238,3143,3679,7187,690,9980,7085,7714,9373,5632,7526,6707,3951,9734,4216,2146,3602,5371,6029,3039,4433,4855,4151,1449,3376,8009,7240,7027,4602,2947,9081,4045,8424,9352,8742,923,2705,4266,3232,2264,6761,363,2651,3383,7770,6730,7856,7340,9679,2158,610,4471,4608,910,6241],\n[4417,6756,1013,8797,658,8809,5032,8703,7541,846,3357,2920,9817,1745,9980,7593,4667,3087,779,3218,6233,5568,4296,2289,2654,7898,5021,9461,5593,8214,9173,4203,2271,7980,2983,5952,9992,8399,3468,1776,3188,9314,1720,6523,2933,621,8685,5483,8986,6163,3444,9539,4320,155,3992,2828,2150,6071,524,2895,5468,8063,1210,3348,9071,4862,483,9017,4097,6186,9815,3610,5048,1644,1003,9865,9332,2145,1944,2213],\n[9284,3803,4920,1927,6706,4344,7383,4786,9890,2010,5228,1224,3158,6967,8580,8990,8883,5213,76,8306,2031,4980,5639,9519,7184,5645,7769,3259,8077,9130,1317,3096,9624,3818,1770,695,2454,947,6029,3474,9938,3527,5696,4760,7724,7738,2848,6442,5767,6845,8323,4131,2859,7595,2500,4815,3660,9130,8580,7016,8231,4391,8369,3444,4069,4021,556,6154,627,2778,1496,4206,6356,8434,8491,3816,8231,3190,5575,1015],\n[3787,7572,1788,6803,5641,6844,1961,4811,8535,9914,9999,1450,8857,738,4662,8569,6679,2225,7839,8618,286,2648,5342,2294,3205,4546,176,8705,3741,6134,8324,8021,7004,5205,7032,6637,9442,5539,5584,4819,5874,5807,8589,6871,9016,983,1758,3786,1519,6241,185,8398,495,3370,9133,3051,4549,9674,7311,9738,3316,9383,2658,2776,9481,7558,619,3943,3324,6491,4933,153,9738,4623,912,3595,7771,7939,1219,4405],\n[2650,3883,4154,5809,315,7756,4430,1788,4451,1631,6461,7230,6017,5751,138,588,5282,2442,9110,9035,6349,2515,1570,6122,4192,4174,3530,1933,4186,4420,4609,5739,4135,2963,6308,1161,8809,8619,2796,3819,6971,8228,4188,1492,909,8048,2328,6772,8467,7671,9068,2226,7579,6422,7056,8042,3296,2272,3006,2196,7320,3238,3490,3102,37,1293,3212,4767,5041,8773,5794,4456,6174,7279,7054,2835,7053,9088,790,6640],\n[3101,1057,7057,3826,6077,1025,2955,1224,1114,6729,5902,4698,6239,7203,9423,1804,4417,6686,1426,6941,8071,1029,4985,9010,6122,6597,1622,1574,3513,1684,7086,5505,3244,411,9638,4150,907,9135,829,981,1707,5359,8781,9751,5,9131,3973,7159,1340,6955,7514,7993,6964,8198,1933,2797,877,3993,4453,8020,9349,8646,2779,8679,2961,3547,3374,3510,1129,3568,2241,2625,9138,5974,8206,7669,7678,1833,8700,4480],\n[4865,9912,8038,8238,782,3095,8199,1127,4501,7280,2112,2487,3626,2790,9432,1475,6312,8277,4827,2218,5806,7132,8752,1468,7471,6386,739,8762,8323,8120,5169,9078,9058,3370,9560,7987,8585,8531,5347,9312,1058,4271,1159,5286,5404,6925,8606,9204,7361,2415,560,586,4002,2644,1927,2824,768,4409,2942,3345,1002,808,4941,6267,7979,5140,8643,7553,9438,7320,4938,2666,4609,2778,8158,6730,3748,3867,1866,7181],\n[171,3771,7134,8927,4778,2913,3326,2004,3089,7853,1378,1729,4777,2706,9578,1360,5693,3036,1851,7248,2403,2273,8536,6501,9216,613,9671,7131,7719,6425,773,717,8803,160,1114,7554,7197,753,4513,4322,8499,4533,2609,4226,8710,6627,644,9666,6260,4870,5744,7385,6542,6203,7703,6130,8944,5589,2262,6803,6381,7414,6888,5123,7320,9392,9061,6780,322,8975,7050,5089,1061,2260,3199,1150,1865,5386,9699,6501],\n[3744,8454,6885,8277,919,1923,4001,6864,7854,5519,2491,6057,8794,9645,1776,5714,9786,9281,7538,6916,3215,395,2501,9618,4835,8846,9708,2813,3303,1794,8309,7176,2206,1602,1838,236,4593,2245,8993,4017,10,8215,6921,5206,4023,5932,6997,7801,262,7640,3107,8275,4938,7822,2425,3223,3886,2105,8700,9526,2088,8662,8034,7004,5710,2124,7164,3574,6630,9980,4242,2901,9471,1491,2117,4562,1130,9086,4117,6698],\n[2810,2280,2331,1170,4554,4071,8387,1215,2274,9848,6738,1604,7281,8805,439,1298,8318,7834,9426,8603,6092,7944,1309,8828,303,3157,4638,4439,9175,1921,4695,7716,1494,1015,1772,5913,1127,1952,1950,8905,4064,9890,385,9357,7945,5035,7082,5369,4093,6546,5187,5637,2041,8946,1758,7111,6566,1027,1049,5148,7224,7248,296,6169,375,1656,7993,2816,3717,4279,4675,1609,3317,42,6201,3100,3144,163,9530,4531],\n[7096,6070,1009,4988,3538,5801,7149,3063,2324,2912,7911,7002,4338,7880,2481,7368,3516,2016,7556,2193,1388,3865,8125,4637,4096,8114,750,3144,1938,7002,9343,4095,1392,4220,3455,6969,9647,1321,9048,1996,1640,6626,1788,314,9578,6630,2813,6626,4981,9908,7024,4355,3201,3521,3864,3303,464,1923,595,9801,3391,8366,8084,9374,1041,8807,9085,1892,9431,8317,9016,9221,8574,9981,9240,5395,2009,6310,2854,9255],\n[8830,3145,2960,9615,8220,6061,3452,2918,6481,9278,2297,3385,6565,7066,7316,5682,107,7646,4466,68,1952,9603,8615,54,7191,791,6833,2560,693,9733,4168,570,9127,9537,1925,8287,5508,4297,8452,8795,6213,7994,2420,4208,524,5915,8602,8330,2651,8547,6156,1812,6271,7991,9407,9804,1553,6866,1128,2119,4691,9711,8315,5879,9935,6900,482,682,4126,1041,428,6247,3720,5882,7526,2582,4327,7725,3503,2631],\n[2738,9323,721,7434,1453,6294,2957,3786,5722,6019,8685,4386,3066,9057,6860,499,5315,3045,5194,7111,3137,9104,941,586,3066,755,4177,8819,7040,5309,3583,3897,4428,7788,4721,7249,6559,7324,825,7311,3760,6064,6070,9672,4882,584,1365,9739,9331,5783,2624,7889,1604,1303,1555,7125,8312,425,8936,3233,7724,1480,403,7440,1784,1754,4721,1569,652,3893,4574,5692,9730,4813,9844,8291,9199,7101,3391,8914],\n[6044,2928,9332,3328,8588,447,3830,1176,3523,2705,8365,6136,5442,9049,5526,8575,8869,9031,7280,706,2794,8814,5767,4241,7696,78,6570,556,5083,1426,4502,3336,9518,2292,1885,3740,3153,9348,9331,8051,2759,5407,9028,7840,9255,831,515,2612,9747,7435,8964,4971,2048,4900,5967,8271,1719,9670,2810,6777,1594,6367,6259,8316,3815,1689,6840,9437,4361,822,9619,3065,83,6344,7486,8657,8228,9635,6932,4864],\n[8478,4777,6334,4678,7476,4963,6735,3096,5860,1405,5127,7269,7793,4738,227,9168,2996,8928,765,733,1276,7677,6258,1528,9558,3329,302,8901,1422,8277,6340,645,9125,8869,5952,141,8141,1816,9635,4025,4184,3093,83,2344,2747,9352,7966,1206,1126,1826,218,7939,2957,2729,810,8752,5247,4174,4038,8884,7899,9567,301,5265,5752,7524,4381,1669,3106,8270,6228,6373,754,2547,4240,2313,5514,3022,1040,9738],\n[2265,8192,1763,1369,8469,8789,4836,52,1212,6690,5257,8918,6723,6319,378,4039,2421,8555,8184,9577,1432,7139,8078,5452,9628,7579,4161,7490,5159,8559,1011,81,478,5840,1964,1334,6875,8670,9900,739,1514,8692,522,9316,6955,1345,8132,2277,3193,9773,3923,4177,2183,1236,6747,6575,4874,6003,6409,8187,745,8776,9440,7543,9825,2582,7381,8147,7236,5185,7564,6125,218,7991,6394,391,7659,7456,5128,5294],\n[2132,8992,8160,5782,4420,3371,3798,5054,552,5631,7546,4716,1332,6486,7892,7441,4370,6231,4579,2121,8615,1145,9391,1524,1385,2400,9437,2454,7896,7467,2928,8400,3299,4025,7458,4703,7206,6358,792,6200,725,4275,4136,7390,5984,4502,7929,5085,8176,4600,119,3568,76,9363,6943,2248,9077,9731,6213,5817,6729,4190,3092,6910,759,2682,8380,1254,9604,3011,9291,5329,9453,9746,2739,6522,3765,5634,1113,5789],\n[5304,5499,564,2801,679,2653,1783,3608,7359,7797,3284,796,3222,437,7185,6135,8571,2778,7488,5746,678,6140,861,7750,803,9859,9918,2425,3734,2698,9005,4864,9818,6743,2475,132,9486,3825,5472,919,292,4411,7213,7699,6435,9019,6769,1388,802,2124,1345,8493,9487,8558,7061,8777,8833,2427,2238,5409,4957,8503,3171,7622,5779,6145,2417,5873,5563,5693,9574,9491,1937,7384,4563,6842,5432,2751,3406,7981]\n];\n--seed-contents--\n```js\nfunction pathSumThreeWays(matrix) {\nreturn true;\n}\n// Only change code above this line\nconst testMatrix1 = [\n[131, 673, 234, 103, 18],\n[201, 96, 342, 965, 150],\n[630, 803, 746, 422, 111],\n[537, 699, 497, 121, 956],\n[805, 732, 524, 37, 331]\n];\npathSumThreeWays(testMatrix1);\n```\n--solutions--\n```js\nfunction pathSumThreeWays(matrix) {\nfunction makeMinimumMoveFromUpOrRight(row, column) {\nconst curValue = matrix[row][column];\nif (values[row - 1] > values[row]) {\nreturn values[row] + curValue;\n}\nreturn values[row - 1] + curValue;\n}\nfunction isGoingFromDownBetter(row, column) {\nreturn values[row] > values[row + 1] + matrix[row][column];\n}\nconst size = matrix",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-82-path-sum-three-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 19153,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1e10a4786d1a2c388fd51465657161b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-82-path-sum-three-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "673, 234, 103, 18], [201, 96, 342, 965, 150], [630, 803, 746, 422, 111], [537, 699, 497, 121, 956], [805, 732, 524, 37, 331] ]; pathSumThreeWays(testMatrix1); ``` --solutions-- ```js function pathSumThreeWays(matrix) { function makeMinimumMoveFromUpOrRight(row, column) { const curValue = matrix[row][column]; if (values[row - 1] > values[row]) { return values[row] + curValue; } return values[row - 1] + curValue; } function isGoingFromDownBetter(row, column) { return values[row] > values[row + 1] + matrix[row][column]; } const size = matrixlength;\nconst values = [];\nfor (let row = 0; row < size; row++) {\nvalues push(matrix[row][size - 1]);\n}\nfor (let column = size - 2; column >= 0; column--) {\nvalues[0] += matrix[0][column];\nfor (let row = 1; row < size; row++) {\nvalues[row] = makeMinimumMoveFromUpOrRight(row, column);\n}\nfor (let row = size - 2; row >= 0; row--) {\nif (isGoingFromDownBetter(row, column)) {\nvalues[row] = values[row + 1] + matrix[row][column];\n}\n}\n}\nreturn Math min( values);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 34546,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-82-path-sum-three-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "433fc4e84801787bfde5a8c58946a609",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3741000cf542c50fe87\ntitle: 'Problem 8: Largest product in a series'\nchallengeType: 1\nforumTopicId: 302193\ndashedName: problem-8-largest-product-in-a-series\n--description--\nThe four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832 73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\nFind the n adjacent digits in the 1000-digit number that have the greatest product What is the value of this product --hints--\nlargestProductinaSeries(4) should return a number js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "d2d29dd57670d5016f3eb8b20fa7efe8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "302193 dashedName: problem-8-largest-product-in-a-series --description-- The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832 73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450 Find the n adjacent digits in the 1000-digit number that have the greatest product What is the value of this product --hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4));\nlargestProductinaSeries(4) should return 5832 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "bfdee167dd53cd0e4cfeffe29d8a8cb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832 73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450 Find the n adjacent digits in the 1000-digit number that have the greatest product What is the value of this product --hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4)); largestProductinaSeries(4) should return 5832 js assertstrictEqual(largestProductinaSeries(4), 5832);\nlargestProductinaSeries(13) should return 23514624000 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "0ce3746741081e48103344825f5d5b80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "have the greatest product are 9 × 9 × 8 × 9 = 5832 73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450 Find the n adjacent digits in the 1000-digit number that have the greatest product What is the value of this product --hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4)); largestProductinaSeries(4) should return 5832 js assertstrictEqual(largestProductinaSeries(4), 5832); largestProductinaSeries(13) should return 23514624000 js assertstrictEqual(largestProductinaSeries(13), 23514624000);\n--seed--\n--seed-contents--\n```js\nfunction largestProductinaSeries(n) {\nlet thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0];\nreturn true;\n}\nlargestProductinaSeries(13);\n```\n--solutions--\n```js\nconst largestProductinaSeries = (number)=>{\nlet thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0];\nlet numberOfDigits = thousandDigits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 4555,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "0c7df47d82bc1ca3fb4abafaac754aa2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450 Find the n adjacent digits in the 1000-digit number that have the greatest product What is the value of this product --hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4)); largestProductinaSeries(4) should return 5832 js assertstrictEqual(largestProductinaSeries(4), 5832); largestProductinaSeries(13) should return 23514624000 js assertstrictEqual(largestProductinaSeries(13), 23514624000); --seed-- --seed-contents-- ```js function largestProductinaSeries(n) { let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; return true; } largestProductinaSeries(13); ``` --solutions-- ```js const largestProductinaSeries = (number)=>{ let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; let numberOfDigits = thousandDigitslength;\nlet currentIndex = 0;\nlet productOfAdjDigits = [];\nwhile(currentIndex<=(numberOfDigits-number)){\nlet currentAdj = thousandDigits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 4272,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "0f27512804be4a4189eb51069104dde9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that have the greatest product What is the value of this product --hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4)); largestProductinaSeries(4) should return 5832 js assertstrictEqual(largestProductinaSeries(4), 5832); largestProductinaSeries(13) should return 23514624000 js assertstrictEqual(largestProductinaSeries(13), 23514624000); --seed-- --seed-contents-- ```js function largestProductinaSeries(n) { let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; return true; } largestProductinaSeries(13); ``` --solutions-- ```js const largestProductinaSeries = (number)=>{ let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; let numberOfDigits = thousandDigitslength; let currentIndex = 0; let productOfAdjDigits = []; while(currentIndex<=(numberOfDigits-number)){ let currentAdj = thousandDigitsslice(currentIndex,currentIndex+number);\nlet isAdjDigits = false;\nproductOfAdjDigits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 4209,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "92aca4db04bf6efef545c1de90014b41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "What is the value of this product --hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4)); largestProductinaSeries(4) should return 5832 js assertstrictEqual(largestProductinaSeries(4), 5832); largestProductinaSeries(13) should return 23514624000 js assertstrictEqual(largestProductinaSeries(13), 23514624000); --seed-- --seed-contents-- ```js function largestProductinaSeries(n) { let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; return true; } largestProductinaSeries(13); ``` --solutions-- ```js const largestProductinaSeries = (number)=>{ let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; let numberOfDigits = thousandDigitslength; let currentIndex = 0; let productOfAdjDigits = []; while(currentIndex<=(numberOfDigits-number)){ let currentAdj = thousandDigitsslice(currentIndex,currentIndex+number); let isAdjDigits = false; productOfAdjDigitspush(currentAdj",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 4207,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "816e90d929b744c68108ec33fbe0fa39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "What is the value of this product --hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4)); largestProductinaSeries(4) should return 5832 js assertstrictEqual(largestProductinaSeries(4), 5832); largestProductinaSeries(13) should return 23514624000 js assertstrictEqual(largestProductinaSeries(13), 23514624000); --seed-- --seed-contents-- ```js function largestProductinaSeries(n) { let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; return true; } largestProductinaSeries(13); ``` --solutions-- ```js const largestProductinaSeries = (number)=>{ let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; let numberOfDigits = thousandDigitslength; let currentIndex = 0; let productOfAdjDigits = []; while(currentIndex<=(numberOfDigits-number)){ let currentAdj = thousandDigitsslice(currentIndex,currentIndex+number); let isAdjDigits = false; productOfAdjDigitspush(currentAdjreduce((prev,cur)=>{\nreturn prev*cur;\n}));\ncurrentIndex++;\n}\nreturn Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 4224,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "f8386be7a71c45e3d9e283988b5b23e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4)); largestProductinaSeries(4) should return 5832 js assertstrictEqual(largestProductinaSeries(4), 5832); largestProductinaSeries(13) should return 23514624000 js assertstrictEqual(largestProductinaSeries(13), 23514624000); --seed-- --seed-contents-- ```js function largestProductinaSeries(n) { let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; return true; } largestProductinaSeries(13); ``` --solutions-- ```js const largestProductinaSeries = (number)=>{ let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; let numberOfDigits = thousandDigitslength; let currentIndex = 0; let productOfAdjDigits = []; while(currentIndex<=(numberOfDigits-number)){ let currentAdj = thousandDigitsslice(currentIndex,currentIndex+number); let isAdjDigits = false; productOfAdjDigitspush(currentAdjreduce((prev,cur)=>{ return prev*cur; })); currentIndex++; } return Mathmax(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 4221,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "5944cc898808199047bb778fdfb7822b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--hints-- largestProductinaSeries(4) should return a number js assertisNumber(largestProductinaSeries(4)); largestProductinaSeries(4) should return 5832 js assertstrictEqual(largestProductinaSeries(4), 5832); largestProductinaSeries(13) should return 23514624000 js assertstrictEqual(largestProductinaSeries(13), 23514624000); --seed-- --seed-contents-- ```js function largestProductinaSeries(n) { let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; return true; } largestProductinaSeries(13); ``` --solutions-- ```js const largestProductinaSeries = (number)=>{ let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0]; let numberOfDigits = thousandDigitslength; let currentIndex = 0; let productOfAdjDigits = []; while(currentIndex<=(numberOfDigits-number)){ let currentAdj = thousandDigitsslice(currentIndex,currentIndex+number); let isAdjDigits = false; productOfAdjDigitspush(currentAdjreduce((prev,cur)=>{ return prev*cur; })); currentIndex++; } return Mathmax(productOfAdjDigits);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md",
      "source_type": "git_repo"
    },
    "token_count": 4227,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "6a997b1116968df0d59efcd2bcc90899",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3b01000cf542c50fec2\ntitle: 'Problem 67: Maximum path sum II'\nchallengeType: 1\nforumTopicId: 302179\ndashedName: problem-67-maximum-path-sum-ii\n--description--\nBy starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23 3\n7 4\n2 4 6\n8 5 9 3\nThat is, 3 + 7 + 4 + 9 = 23 Find the maximum total from top to bottom in numTriangle, a 2D array defined in the background containing a triangle with one-hundred rows Note: This is a much more difficult version of Problem 18 It is not possible to try every route to solve this problem, as there are 299 altogether If you could check one trillion (1012) routes every second it would take over twenty billion years to check them all There is an efficient algorithm to solve it ;o)\n--hints--\nmaximumPathSumII([[3, 0, 0, 0],[7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return a number js\nassert(typeof maximumPathSumII(_testTriangle) === 'number');\nmaximumPathSumII([[3, 0, 0, 0],[7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return 23 js\nassert strictEqual(maximumPathSumII(_testTriangle), 23);\nmaximumPathSumII(numTriangle) should return 7273 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 27200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "2da339845a845c946128bac6bbed7674",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "check one trillion (1012) routes every second it would take over twenty billion years to check them all There is an efficient algorithm to solve it ;o) --hints-- maximumPathSumII([[3, 0, 0, 0],[7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return a number js assert(typeof maximumPathSumII(_testTriangle) === 'number'); maximumPathSumII([[3, 0, 0, 0],[7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return 23 js assert strictEqual(maximumPathSumII(_testTriangle), 23); maximumPathSumII(numTriangle) should return 7273 js assertstrictEqual(maximumPathSumII(_numTriangle), 7273);\n--seed--\n--before-user-code--\njs\nconst _testTriangle = [[3, 0, 0, 0],\n[7, 4, 0, 0],\n[2, 4, 6, 0],\n[8, 5, 9, 3]];\nconst _numTriangle = [[59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,40,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[26,53,6,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[10,51,87,86,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,95,66,57,25,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,81,80,38,92,67,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[30,28,51,76,81,18,75,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[84,14,95,87,62,81,17,78,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[21,46,71,58,2,79,62,39,31,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,34,35,53,78,31,81,18,90,93,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,53,4,21,84,93,32,13,97,11,37,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[45,3,81,79,5,18,78,86,13,30,63,99,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[39,87,96,28,3,38,42,17,82,87,58,7,22,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,17,51,17,7,93,9,7,75,97,95,78,87,8,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,66,59,60,88,99,94,65,55,77,55,34,27,53,78,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,40,41,4,87,16,9,42,75,69,23,97,30,60,10,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[12,10,44,26,21,36,32,84,98,60,13,12,36,16,63,31,91,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[70,39,6,5,55,27,38,48,28,22,34,35,62,62,15,14,94,89,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,56,68,84,96,21,34,34,34,81,62,40,65,54,62,5,98,3,2,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[38,89,46,37,99,54,34,53,36,14,70,26,2,90,45,13,31,61,83,73,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[36,10,63,96,60,49,41,5,37,42,14,58,84,93,96,17,9,43,5,43,6,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,57,87,57,61,28,37,51,84,73,79,15,39,95,88,87,43,39,11,86,77,74,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,5,79,30,49,99,73,46,37,50,2,45,9,54,52,27,95,27,65,19,45,26,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,39,17,78,76,29,52,90,18,99,78,19,35,62,71,19,23,65,93,85,49,33,75,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[33,24,47,61,60,55,32,88,57,55,91,54,46,57,7,77,98,52,80,99,24,25,46,78,79,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,9,13,55,10,67,26,78,76,82,63,49,51,31,24,68,5,57,7,54,69,21,67,43,17,63,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[24,59,6,8,98,74,66,26,61,60,13,3,9,9,24,30,71,8,88,70,72,70,29,90,11,82,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,82,67,4,36,60,92,77,91,85,62,49,59,61,30,90,29,94,26,41,89,4,53,22,83,41,9,74,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[48,28,26,37,28,52,77,26,51,32,18,98,79,36,62,13,17,8,19,54,89,29,73,68,42,14,8,16,70,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,60,69,70,72,71,9,59,13,60,38,13,57,36,9,30,43,89,30,39,15,2,44,73,5,73,26,63,56,86,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[55,55,85,50,62,99,84,77,28,85,3,21,27,22,19,26,82,69,54,4,13,7,85,14,1,15,70,59,89,95,10,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,9,31,92,91,38,92,86,98,75,21,5,64,42,62,84,36,20,73,42,21,23,22,51,51,79,25,45,85,53,3,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[75,63,2,49,14,12,89,14,60,78,92,16,44,82,38,30,72,11,46,52,90,27,8,65,78,3,85,41,57,79,39,52,33,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,27,56,56,39,13,19,43,86,72,58,95,39,7,4,34,21,98,39,15,39,84,89,69,84,46,37,57,59,35,59,50,26,15,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[42,89,36,27,78,91,24,11,17,41,5,94,7,69,51,96,3,96,47,90,90,45,91,20,50,56,10,32,36,49,4,53,85,92,25,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,9,61,30,61,97,66,21,96,92,98,90,6,34,96,60,32,69,68,33,75,84,18,31,71,50,84,63,3,3,19,11,28,42,75,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,31,61,68,96,34,49,39,5,71,76,59,62,67,6,47,96,99,34,21,32,47,52,7,71,60,42,72,94,56,82,83,84,40,94,87,82,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,20,60,14,17,38,26,78,66,81,45,95,18,51,98,81,48,16,53,88,37,52,69,95,72,93,22,34,98,20,54,27,73,61,56,63,60,34,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[93,42,94,83,47,61,27,51,79,79,45,1,44,73,31,70,83,42,88,25,53,51,30,15,65,94,80,44,61,84,12,77,2,62,2,65,94,42,14,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,73,9,67,68,29,74,98,10,19,85,48,38,31,85,67,53,93,93,77,47,67,39,72,94,53,18,43,77,40,78,32,29,59,24,6,2,83,50,60,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,1,44,30,16,51,15,81,98,15,10,62,86,79,50,62,45,60,70,38,31,85,65,61,64,6,69,84,14,22,56,43,9,48,66,69,83,91,60,40,36,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,48,22,99,15,95,64,43,1,16,94,2,99,19,17,69,11,58,97,56,89,31,77,45,67,96,12,73,8,20,36,47,81,44,50,64,68,85,40,81,85,52,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,35,92,45,32,84,62,15,19,64,21,66,6,1,52,80,62,59,12,25,88,28,91,50,40,16,22,99,92,79,87,51,21,77,74,77,7,42,38,42,74,83,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[46,19,77,66,24,18,5,32,2,84,31,99,92,58,96,72,91,36,62,99,55,29,53,42,12,37,26,58,89,50,66,19,82,75,12,48,24,87,91,85,2,7,3,76,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[99,98,84,93,7,17,33,61,92,20,66,60,24,66,40,30,67,5,37,29,24,96,3,27,70,62,13,4,45,47,59,88,43,20,66,15,46,92,30,4,71,66,78,70,53,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,60,38,6,88,4,17,72,10,99,71,7,42,25,54,5,26,64,91,50,45,71,6,30,67,48,69,82,8,56,80,67,18,46,66,63,1,20,8,80,47,7,91,16,3,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,54,78,49,80,48,77,40,68,23,60,88,58,80,33,57,11,69,55,53,64,2,94,49,60,92,16,35,81,21,82,96,25,24,96,18,2,5,49,3,50,77,6,32,84,27,18,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[68,1,50,4,3,21,42,94,53,24,89,5,92,26,52,36,68,11,85,1,4,42,2,45,15,6,50,4,53,73,25,74,81,88,98,21,67,84,79,97,99,20,95,4,40,46,2,58,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[94,10,2,78,88,52,21,3,88,60,6,53,49,71,20,91,12,65,7,49,21,22,11,41,58,99,36,16,9,48,17,24,52,36,23,15,72,16,84,56,2,99,43,76,81,71,29,39,49,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[64,39,59,84,86,16,17,66,3,9,43,6,64,18,63,29,68,6,23,7,87,14,26,35,17,12,98,41,53,64,78,18,98,27,28,84,80,67,75,62,10,11,76,90,54,10,5,54,41,39,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[43,83,18,37,32,31,52,29,95,47,8,76,35,11,4,53,35,43,34,10,52,57,12,36,20,39,40,55,78,44,7,31,38,26,8,15,56,88,86,1,52,62,10,24,32,5,60,65,53,28,57,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,50,3,52,7,73,49,92,66,80,1,46,8,67,25,36,73,93,7,42,25,53,13,96,76,83,87,90,54,89,78,22,78,91,73,51,69,9,79,94,83,53,9,40,69,62,10,79,49,47,3,81,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,54,73,33,51,76,59,54,79,37,56,45,84,17,62,21,98,69,41,95,65,24,39,37,62,3,24,48,54,64,46,82,71,78,33,67,9,16,96,68,52,74,79,68,32,21,13,78,96,60,9,69,20,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,26,21,44,46,38,17,83,65,98,7,23,52,46,61,97,33,13,60,31,70,15,36,77,31,58,56,93,75,68,21,36,69,53,90,75,25,82,39,50,65,94,29,30,11,33,11,13,96,2,56,47,7,49,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,46,73,30,10,20,60,70,14,56,34,26,37,39,48,24,55,76,84,91,39,86,95,61,50,14,53,93,64,67,37,31,10,84,42,70,48,20,10,72,60,61,84,79,69,65,99,73,89,25,85,48,92,56,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,14,80,27,22,30,44,27,67,75,79,32,51,54,81,29,65,14,19,4,13,82,4,91,43,40,12,52,29,99,7,76,60,25,1,7,61,71,37,92,40,47,99,66,57,1,43,44,22,40,53,53,9,69,26,81,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[49,80,56,90,93,87,47,13,75,28,87,23,72,79,32,18,27,20,28,10,37,59,21,18,70,4,79,96,3,31,45,71,81,6,14,18,17,5,31,50,92,79,23,47,9,39,47,91,43,54,69,47,42,95,62,46,32,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,18,62,85,87,28,64,5,77,51,47,26,30,65,5,70,65,75,59,80,42,52,25,20,44,10,92,17,71,95,52,14,77,13,24,55,11,65,26,91,1,30,63,15,49,48,41,17,67,47,3,68,20,90,98,32,4,40,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,51,58,60,6,55,23,68,5,19,76,94,82,36,96,43,38,90,87,28,33,83,5,17,70,83,96,93,6,4,78,47,80,6,23,84,75,23,87,72,99,14,50,98,92,38,90,64,61,58,76,94,36,66,87,80,51,35,61,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[57,95,64,6,53,36,82,51,40,33,47,14,7,98,78,65,39,58,53,6,50,53,4,69,40,68,36,69,75,78,75,60,3,32,39,24,74,47,26,90,13,40,44,71,90,76,51,24,36,50,25,45,70,80,61,80,61,43,90,64,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,29,86,56,68,42,79,10,42,44,30,12,96,18,23,18,52,59,2,99,67,46,60,86,43,38,55,17,44,93,42,21,55,14,47,34,55,16,49,24,23,29,96,51,55,10,46,53,27,92,27,46,63,57,30,65,43,27,21,20,24,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[81,72,93,19,69,52,48,1,13,83,92,69,20,48,69,59,20,62,5,42,28,89,90,99,32,72,84,17,8,87,36,3,60,31,36,36,81,26,97,36,48,54,56,56,27,16,91,8,23,11,87,99,33,47,2,14,44,73,70,99,43,35,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,56,61,86,56,12,70,59,63,32,1,15,81,47,71,76,95,32,65,80,54,70,34,51,40,45,33,4,64,55,78,68,88,47,31,47,68,87,3,84,23,44,89,72,35,8,31,76,63,26,90,85,96,67,65,91,19,14,17,86,4,71,32,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,13,4,22,64,37,37,28,56,62,86,33,7,37,10,44,52,82,52,6,19,52,57,75,90,26,91,24,6,21,14,67,76,30,46,14,35,89,89,41,3,64,56,97,87,63,22,34,3,79,17,45,11,53,25,56,96,61,23,18,63,31,37,37,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[77,23,26,70,72,76,77,4,28,64,71,69,14,85,96,54,95,48,6,62,99,83,86,77,97,75,71,66,30,19,57,90,33,1,60,61,14,12,90,99,32,77,56,41,18,14,87,49,10,14,90,64,18,50,21,74,14,16,88,5,45,73,82,47,74,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[22,97,41,13,34,31,54,61,56,94,3,24,59,27,98,77,4,9,37,40,12,26,87,9,71,70,7,18,64,57,80,21,12,71,83,94,60,39,73,79,73,19,97,32,64,29,41,7,48,84,85,67,12,74,95,20,24,52,41,67,56,61,29,93,35,72,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[72,23,63,66,1,11,7,30,52,56,95,16,65,26,83,90,50,74,60,18,16,48,43,77,37,11,99,98,30,94,91,26,62,73,45,12,87,73,47,27,1,88,66,99,21,41,95,80,2,53,23,32,61,48,32,43,43,83,14,66,95,91,19,81,80,67,25,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,62,32,18,92,14,83,71,37,96,11,83,39,99,5,16,23,27,10,67,2,25,44,11,55,31,46,64,41,56,44,74,26,81,51,31,45,85,87,9,81,95,22,28,76,69,46,48,64,87,67,76,27,89,31,11,74,16,62,3,60,94,42,47,9,34,94,93,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,18,90,18,42,17,42,32,14,86,6,53,33,95,99,35,29,15,44,20,49,59,25,54,34,59,84,21,23,54,35,90,78,16,93,13,37,88,54,19,86,67,68,55,66,84,65,42,98,37,87,56,33,28,58,38,28,38,66,27,52,21,81,15,8,22,97,32,85,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,53,40,28,13,34,91,25,1,63,50,37,22,49,71,58,32,28,30,18,68,94,23,83,63,62,94,76,80,41,90,22,82,52,29,12,18,56,10,8,35,14,37,57,23,65,67,40,72,39,93,39,70,89,40,34,7,46,94,22,20,5,53,64,56,30,5,56,61,88,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[23,95,11,12,37,69,68,24,66,10,87,70,43,50,75,7,62,41,83,58,95,93,89,79,45,39,2,22,5,22,95,43,62,11,68,29,17,40,26,44,25,71,87,16,70,85,19,25,59,94,90,41,41,80,61,70,55,60,84,33,95,76,42,63,15,9,3,40,38,12,3,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,84,56,80,61,55,85,97,16,94,82,94,98,57,84,30,84,48,93,90,71,5,95,90,73,17,30,98,40,64,65,89,7,79,9,19,56,36,42,30,23,69,73,72,7,5,27,61,24,31,43,48,71,84,21,28,26,65,65,59,65,74,77,20,10,81,61,84,95,8,52,23,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[47,81,28,9,98,51,67,64,35,51,59,36,92,82,77,65,80,24,72,53,22,7,27,10,21,28,30,22,48,82,80,48,56,20,14,43,18,25,50,95,90,31,77,8,9,48,44,80,90,22,93,45,82,17,13,96,25,26,8,73,34,99,6,49,24,6,83,51,40,14,15,10,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,25,10,81,30,64,24,74,75,80,36,75,82,60,22,69,72,91,45,67,3,62,79,54,89,74,44,83,64,96,66,73,44,30,74,50,37,5,9,97,70,1,60,46,37,91,39,75,75,18,58,52,72,78,51,81,86,52,8,97,1,46,43,66,98,62,81,18,70,93,73,8,32,46,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[96,80,82,7,59,71,92,53,19,20,88,66,3,26,26,10,24,27,50,82,94,73,63,8,51,33,22,45,19,13,58,33,90,15,22,50,36,13,55,6,35,47,82,52,33,61,36,27,28,46,98,14,73,20,73,32,16,26,80,53,47,66,76,38,94,45,2,1,22,52,47,96,64,58,52,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[88,46,23,39,74,63,81,64,20,90,33,33,76,55,58,26,10,46,42,26,74,74,12,83,32,43,9,2,73,55,86,54,85,34,28,23,29,79,91,62,47,41,82,87,99,22,48,90,20,5,96,75,95,4,43,28,81,39,81,1,28,42,78,25,39,77,90,57,58,98,17,36,73,22,63,74,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[29,39,74,94,95,78,64,24,38,86,63,87,93,6,70,92,22,16,80,64,29,52,20,27,23,50,14,13,87,15,72,96,81,22,8,49,72,30,70,24,79,31,16,64,59,21,89,34,96,91,48,76,43,53,88,1,57,80,23,81,90,79,58,1,80,87,17,99,86,90,72,63,32,69,14,28,88,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,17,71,95,56,93,71,35,43,45,4,98,92,94,84,96,11,30,31,27,31,60,92,3,48,5,98,91,86,94,35,90,90,8,48,19,33,28,68,37,59,26,65,96,50,68,22,7,9,49,34,31,77,49,43,6,75,17,81,87,61,79,52,26,27,72,29,50,7,98,86,1,17,10,46,64,24,18,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[51,30,25,94,88,85,79,91,40,33,63,84,49,67,98,92,15,26,75,19,82,5,18,78,65,93,61,48,91,43,59,41,70,51,22,15,92,81,67,91,46,98,11,11,65,31,66,10,98,65,83,21,5,56,5,98,73,67,46,74,69,34,8,30,5,52,7,98,32,95,30,94,65,50,24,63,28,81,99,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[19,23,61,36,9,89,71,98,65,17,30,29,89,26,79,74,94,11,44,48,97,54,81,55,39,66,69,45,28,47,13,86,15,76,74,70,84,32,36,33,79,20,78,14,41,47,89,28,81,5,99,66,81,86,38,26,6,25,13,60,54,55,23,53,27,5,89,25,23,11,13,54,59,54,56,34,16,24,53,44,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[13,40,57,72,21,15,60,8,4,19,11,98,34,45,9,97,86,71,3,15,56,19,15,44,97,31,90,4,87,87,76,8,12,30,24,62,84,28,12,85,82,53,99,52,13,94,6,65,97,86,9,50,94,68,69,74,30,67,87,94,63,7,78,27,80,36,69,41,6,92,32,78,37,82,30,5,18,87,99,72,19,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[44,20,55,77,69,91,27,31,28,81,80,27,2,7,97,23,95,98,12,25,75,29,47,71,7,47,78,39,41,59,27,76,13,15,66,61,68,35,69,86,16,53,67,63,99,85,41,56,8,28,33,40,94,76,90,85,31,70,24,65,84,65,99,82,19,25,54,37,21,46,33,2,52,99,51,33,26,4,87,2,8,18,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,61,45,91,6,64,79,80,82,32,16,83,63,42,49,19,78,65,97,40,42,14,61,49,34,4,18,25,98,59,30,82,72,26,88,54,36,21,75,3,88,99,53,46,51,55,78,22,94,34,40,68,87,84,25,30,76,25,8,92,84,42,61,40,38,9,99,40,23,29,39,46,55,10,90,35,84,56,70,63,23,91,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,92,3,71,89,7,9,37,68,66,58,20,44,92,51,56,13,71,79,99,26,37,2,6,16,67,36,52,58,16,79,73,56,60,59,27,44,77,94,82,20,50,98,33,9,87,94,37,40,83,64,83,58,85,17,76,53,2,83,52,22,27,39,20,48,92,45,21,9,42,24,23,12,37,52,28,50,78,79,20,86,62,73,20,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,96,80,15,91,90,99,70,10,9,58,90,93,50,81,99,54,38,36,10,30,11,35,84,16,45,82,18,11,97,36,43,96,79,97,65,40,48,23,19,17,31,64,52,65,65,37,32,65,76,99,79,34,65,79,27,55,33,3,1,33,27,61,28,66,8,4,70,49,46,48,83,1,45,19,96,13,81,14,21,31,79,93,85,50,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,92,48,84,59,98,31,53,23,27,15,22,79,95,24,76,5,79,16,93,97,89,38,89,42,83,2,88,94,95,82,21,1,97,48,39,31,78,9,65,50,56,97,61,1,7,65,27,21,23,14,15,80,97,44,78,49,35,33,45,81,74,34,5,31,57,9,38,94,7,69,54,69,32,65,68,46,68,78,90,24,28,49,51,45,86,35,0,0,0,0,0,0,0,0,0,0,0,0,0],[41,63,89,76,87,31,86,9,46,14,87,82,22,29,47,16,13,10,70,72,82,95,48,64,58,43,13,75,42,69,21,12,67,13,64,85,58,23,98,9,37,76,5,22,31,12,66,50,29,99,86,72,45,25,10,28,19,6,90,43,29,31,67,79,46,25,74,14,97,35,76,37,65,46,23,82,6,22,30,76,93,66,94,17,96,13,20,72,0,0,0,0,0,0,0,0,0,0,0,0],[63,40,78,8,52,9,90,41,70,28,36,14,46,44,85,96,24,52,58,15,87,37,5,98,99,39,13,61,76,38,44,99,83,74,90,22,53,80,56,98,30,51,63,39,44,30,91,91,4,22,27,73,17,35,53,18,35,45,54,56,27,78,48,13,69,36,44,38,71,25,30,56,15,22,73,43,32,69,59,25,93,83,45,11,34,94,44,39,92,0,0,0,0,0,0,0,0,0,0,0],[12,36,56,88,13,96,16,12,55,54,11,47,19,78,17,17,68,81,77,51,42,55,99,85,66,27,81,79,93,42,65,61,69,74,14,1,18,56,12,1,58,37,91,22,42,66,83,25,19,4,96,41,25,45,18,69,96,88,36,93,10,12,98,32,44,83,83,4,72,91,4,27,73,7,34,37,71,60,59,31,1,54,54,44,96,93,83,36,4,45,0,0,0,0,0,0,0,0,0,0],[30,18,22,20,42,96,65,79,17,41,55,69,94,81,29,80,91,31,85,25,47,26,43,49,2,99,34,67,99,76,16,14,15,93,8,32,99,44,61,77,67,50,43,55,87,55,53,72,17,46,62,25,50,99,73,5,93,48,17,31,70,80,59,9,44,59,45,13,74,66,58,94,87,73,16,14,85,38,74,99,64,23,79,28,71,42,20,37,82,31,23,0,0,0,0,0,0,0,0,0],[51,96,39,65,46,71,56,13,29,68,53,86,45,33,51,49,12,91,21,21,76,85,2,17,98,15,46,12,60,21,88,30,92,83,44,59,42,50,27,88,46,86,94,73,45,54,23,24,14,10,94,21,20,34,23,51,4,83,99,75,90,63,60,16,22,33,83,70,11,32,10,50,29,30,83,46,11,5,31,17,86,42,49,1,44,63,28,60,7,78,95,40,0,0,0,0,0,0,0,0],[44,61,89,59,4,49,51,27,69,71,46,76,44,4,9,34,56,39,15,6,94,91,75,90,65,27,56,23,74,6,23,33,36,69,14,39,5,34,35,57,33,22,76,46,56,10,61,65,98,9,16,69,4,62,65,18,99,76,49,18,72,66,73,83,82,40,76,31,89,91,27,88,17,35,41,35,32,51,32,67,52,68,74,85,80,57,7,11,62,66,47,22,67,0,0,0,0,0,0,0],[65,37,19,97,26,17,16,24,24,17,50,37,64,82,24,36,32,11,68,34,69,31,32,89,79,93,96,68,49,90,14,23,4,4,67,99,81,74,70,74,36,96,68,9,64,39,88,35,54,89,96,58,66,27,88,97,32,14,6,35,78,20,71,6,85,66,57,2,58,91,72,5,29,56,73,48,86,52,9,93,22,57,79,42,12,1,31,68,17,59,63,76,7,77,0,0,0,0,0,0],[73,81,14,13,17,20,11,9,1,83,8,85,91,70,84,63,62,77,37,7,47,1,59,95,39,69,39,21,99,9,87,2,97,16,92,36,74,71,90,66,33,73,73,75,52,91,11,12,26,53,5,26,26,48,61,50,90,65,1,87,42,47,74,35,22,73,24,26,56,70,52,5,48,41,31,18,83,27,21,39,80,85,26,8,44,2,71,7,63,22,5,52,19,8,20,0,0,0,0,0],[17,25,21,11,72,93,33,49,64,23,53,82,3,13,91,65,85,2,40,5,42,31,77,42,5,36,6,54,4,58,7,76,87,83,25,57,66,12,74,33,85,37,74,32,20,69,3,97,91,68,82,44,19,14,89,28,85,85,80,53,34,87,58,98,88,78,48,65,98,40,11,57,10,67,70,81,60,79,74,72,97,59,79,47,30,20,54,80,89,91,14,5,33,36,79,39,0,0,0,0],[60,85,59,39,60,7,57,76,77,92,6,35,15,72,23,41,45,52,95,18,64,79,86,53,56,31,69,11,91,31,84,50,44,82,22,81,41,40,30,42,30,91,48,94,74,76,64,58,74,25,96,57,14,19,3,99,28,83,15,75,99,1,89,85,79,50,3,95,32,67,44,8,7,41,62,64,29,20,14,76,26,55,48,71,69,66,19,72,44,25,14,1,48,74,12,98,7,0,0,0],[64,66,84,24,18,16,27,48,20,14,47,69,30,86,48,40,23,16,61,21,51,50,26,47,35,33,91,28,78,64,43,68,4,79,51,8,19,60,52,95,6,68,46,86,35,97,27,58,4,65,30,58,99,12,12,75,91,39,50,31,42,64,70,4,46,7,98,73,98,93,37,89,77,91,64,71,64,65,66,21,78,62,81,74,42,20,83,70,73,95,78,45,92,27,34,53,71,15,0,0],[30,11,85,31,34,71,13,48,5,14,44,3,19,67,23,73,19,57,6,90,94,72,57,69,81,62,59,68,88,57,55,69,49,13,7,87,97,80,89,5,71,5,5,26,38,40,16,62,45,99,18,38,98,24,21,26,62,74,69,4,85,57,77,35,58,67,91,79,79,57,86,28,66,34,72,51,76,78,36,95,63,90,8,78,47,63,45,31,22,70,52,48,79,94,15,77,61,67,68,0],[23,33,44,81,80,92,93,75,94,88,23,61,39,76,22,3,28,94,32,6,49,65,41,34,18,23,8,47,62,60,3,63,33,13,80,52,31,54,73,43,70,26,16,69,57,87,83,31,3,93,70,81,47,95,77,44,29,68,39,51,56,59,63,7,25,70,7,77,43,53,64,3,94,42,95,39,18,1,66,21,16,97,20,50,90,16,70,10,95,69,29,6,25,61,41,26,15,59,63,35]];\n--seed-contents--\n```js\nfunction maximumPathSumII(triangle) {\nreturn true;\n}\n```\n--solutions--\n```js\nfunction maximumPathSumII(triangle) {\nconst newTriangle = [];\nfor (let i = 0; i < triangle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 27200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 20325,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "99cad2bfa0cb5e5ad46888682a12912b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0],[7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return 23 js assert strictEqual(maximumPathSumII(_testTriangle), 23); maximumPathSumII(numTriangle) should return 7273 js assertstrictEqual(maximumPathSumII(_numTriangle), 7273); --seed-- --before-user-code-- js const _testTriangle = [[3, 0, 0, 0], [7, 4, 0, 0], [2, 4, 6, 0], [8, 5, 9, 3]]; const _numTriangle = [[59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,40,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[26,53,6,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[10,51,87,86,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,95,66,57,25,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,81,80,38,92,67,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[30,28,51,76,81,18,75,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[84,14,95,87,62,81,17,78,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[21,46,71,58,2,79,62,39,31,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,34,35,53,78,31,81,18,90,93,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,53,4,21,84,93,32,13,97,11,37,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[45,3,81,79,5,18,78,86,13,30,63,99,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[39,87,96,28,3,38,42,17,82,87,58,7,22,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,17,51,17,7,93,9,7,75,97,95,78,87,8,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,66,59,60,88,99,94,65,55,77,55,34,27,53,78,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,40,41,4,87,16,9,42,75,69,23,97,30,60,10,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[12,10,44,26,21,36,32,84,98,60,13,12,36,16,63,31,91,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[70,39,6,5,55,27,38,48,28,22,34,35,62,62,15,14,94,89,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,56,68,84,96,21,34,34,34,81,62,40,65,54,62,5,98,3,2,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[38,89,46,37,99,54,34,53,36,14,70,26,2,90,45,13,31,61,83,73,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[36,10,63,96,60,49,41,5,37,42,14,58,84,93,96,17,9,43,5,43,6,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,57,87,57,61,28,37,51,84,73,79,15,39,95,88,87,43,39,11,86,77,74,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,5,79,30,49,99,73,46,37,50,2,45,9,54,52,27,95,27,65,19,45,26,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,39,17,78,76,29,52,90,18,99,78,19,35,62,71,19,23,65,93,85,49,33,75,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[33,24,47,61,60,55,32,88,57,55,91,54,46,57,7,77,98,52,80,99,24,25,46,78,79,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,9,13,55,10,67,26,78,76,82,63,49,51,31,24,68,5,57,7,54,69,21,67,43,17,63,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[24,59,6,8,98,74,66,26,61,60,13,3,9,9,24,30,71,8,88,70,72,70,29,90,11,82,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,82,67,4,36,60,92,77,91,85,62,49,59,61,30,90,29,94,26,41,89,4,53,22,83,41,9,74,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[48,28,26,37,28,52,77,26,51,32,18,98,79,36,62,13,17,8,19,54,89,29,73,68,42,14,8,16,70,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,60,69,70,72,71,9,59,13,60,38,13,57,36,9,30,43,89,30,39,15,2,44,73,5,73,26,63,56,86,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[55,55,85,50,62,99,84,77,28,85,3,21,27,22,19,26,82,69,54,4,13,7,85,14,1,15,70,59,89,95,10,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,9,31,92,91,38,92,86,98,75,21,5,64,42,62,84,36,20,73,42,21,23,22,51,51,79,25,45,85,53,3,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[75,63,2,49,14,12,89,14,60,78,92,16,44,82,38,30,72,11,46,52,90,27,8,65,78,3,85,41,57,79,39,52,33,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,27,56,56,39,13,19,43,86,72,58,95,39,7,4,34,21,98,39,15,39,84,89,69,84,46,37,57,59,35,59,50,26,15,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[42,89,36,27,78,91,24,11,17,41,5,94,7,69,51,96,3,96,47,90,90,45,91,20,50,56,10,32,36,49,4,53,85,92,25,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,9,61,30,61,97,66,21,96,92,98,90,6,34,96,60,32,69,68,33,75,84,18,31,71,50,84,63,3,3,19,11,28,42,75,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,31,61,68,96,34,49,39,5,71,76,59,62,67,6,47,96,99,34,21,32,47,52,7,71,60,42,72,94,56,82,83,84,40,94,87,82,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,20,60,14,17,38,26,78,66,81,45,95,18,51,98,81,48,16,53,88,37,52,69,95,72,93,22,34,98,20,54,27,73,61,56,63,60,34,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[93,42,94,83,47,61,27,51,79,79,45,1,44,73,31,70,83,42,88,25,53,51,30,15,65,94,80,44,61,84,12,77,2,62,2,65,94,42,14,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,73,9,67,68,29,74,98,10,19,85,48,38,31,85,67,53,93,93,77,47,67,39,72,94,53,18,43,77,40,78,32,29,59,24,6,2,83,50,60,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,1,44,30,16,51,15,81,98,15,10,62,86,79,50,62,45,60,70,38,31,85,65,61,64,6,69,84,14,22,56,43,9,48,66,69,83,91,60,40,36,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,48,22,99,15,95,64,43,1,16,94,2,99,19,17,69,11,58,97,56,89,31,77,45,67,96,12,73,8,20,36,47,81,44,50,64,68,85,40,81,85,52,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,35,92,45,32,84,62,15,19,64,21,66,6,1,52,80,62,59,12,25,88,28,91,50,40,16,22,99,92,79,87,51,21,77,74,77,7,42,38,42,74,83,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[46,19,77,66,24,18,5,32,2,84,31,99,92,58,96,72,91,36,62,99,55,29,53,42,12,37,26,58,89,50,66,19,82,75,12,48,24,87,91,85,2,7,3,76,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[99,98,84,93,7,17,33,61,92,20,66,60,24,66,40,30,67,5,37,29,24,96,3,27,70,62,13,4,45,47,59,88,43,20,66,15,46,92,30,4,71,66,78,70,53,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,60,38,6,88,4,17,72,10,99,71,7,42,25,54,5,26,64,91,50,45,71,6,30,67,48,69,82,8,56,80,67,18,46,66,63,1,20,8,80,47,7,91,16,3,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,54,78,49,80,48,77,40,68,23,60,88,58,80,33,57,11,69,55,53,64,2,94,49,60,92,16,35,81,21,82,96,25,24,96,18,2,5,49,3,50,77,6,32,84,27,18,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[68,1,50,4,3,21,42,94,53,24,89,5,92,26,52,36,68,11,85,1,4,42,2,45,15,6,50,4,53,73,25,74,81,88,98,21,67,84,79,97,99,20,95,4,40,46,2,58,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[94,10,2,78,88,52,21,3,88,60,6,53,49,71,20,91,12,65,7,49,21,22,11,41,58,99,36,16,9,48,17,24,52,36,23,15,72,16,84,56,2,99,43,76,81,71,29,39,49,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[64,39,59,84,86,16,17,66,3,9,43,6,64,18,63,29,68,6,23,7,87,14,26,35,17,12,98,41,53,64,78,18,98,27,28,84,80,67,75,62,10,11,76,90,54,10,5,54,41,39,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[43,83,18,37,32,31,52,29,95,47,8,76,35,11,4,53,35,43,34,10,52,57,12,36,20,39,40,55,78,44,7,31,38,26,8,15,56,88,86,1,52,62,10,24,32,5,60,65,53,28,57,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,50,3,52,7,73,49,92,66,80,1,46,8,67,25,36,73,93,7,42,25,53,13,96,76,83,87,90,54,89,78,22,78,91,73,51,69,9,79,94,83,53,9,40,69,62,10,79,49,47,3,81,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,54,73,33,51,76,59,54,79,37,56,45,84,17,62,21,98,69,41,95,65,24,39,37,62,3,24,48,54,64,46,82,71,78,33,67,9,16,96,68,52,74,79,68,32,21,13,78,96,60,9,69,20,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,26,21,44,46,38,17,83,65,98,7,23,52,46,61,97,33,13,60,31,70,15,36,77,31,58,56,93,75,68,21,36,69,53,90,75,25,82,39,50,65,94,29,30,11,33,11,13,96,2,56,47,7,49,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,46,73,30,10,20,60,70,14,56,34,26,37,39,48,24,55,76,84,91,39,86,95,61,50,14,53,93,64,67,37,31,10,84,42,70,48,20,10,72,60,61,84,79,69,65,99,73,89,25,85,48,92,56,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,14,80,27,22,30,44,27,67,75,79,32,51,54,81,29,65,14,19,4,13,82,4,91,43,40,12,52,29,99,7,76,60,25,1,7,61,71,37,92,40,47,99,66,57,1,43,44,22,40,53,53,9,69,26,81,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[49,80,56,90,93,87,47,13,75,28,87,23,72,79,32,18,27,20,28,10,37,59,21,18,70,4,79,96,3,31,45,71,81,6,14,18,17,5,31,50,92,79,23,47,9,39,47,91,43,54,69,47,42,95,62,46,32,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,18,62,85,87,28,64,5,77,51,47,26,30,65,5,70,65,75,59,80,42,52,25,20,44,10,92,17,71,95,52,14,77,13,24,55,11,65,26,91,1,30,63,15,49,48,41,17,67,47,3,68,20,90,98,32,4,40,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,51,58,60,6,55,23,68,5,19,76,94,82,36,96,43,38,90,87,28,33,83,5,17,70,83,96,93,6,4,78,47,80,6,23,84,75,23,87,72,99,14,50,98,92,38,90,64,61,58,76,94,36,66,87,80,51,35,61,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[57,95,64,6,53,36,82,51,40,33,47,14,7,98,78,65,39,58,53,6,50,53,4,69,40,68,36,69,75,78,75,60,3,32,39,24,74,47,26,90,13,40,44,71,90,76,51,24,36,50,25,45,70,80,61,80,61,43,90,64,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,29,86,56,68,42,79,10,42,44,30,12,96,18,23,18,52,59,2,99,67,46,60,86,43,38,55,17,44,93,42,21,55,14,47,34,55,16,49,24,23,29,96,51,55,10,46,53,27,92,27,46,63,57,30,65,43,27,21,20,24,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[81,72,93,19,69,52,48,1,13,83,92,69,20,48,69,59,20,62,5,42,28,89,90,99,32,72,84,17,8,87,36,3,60,31,36,36,81,26,97,36,48,54,56,56,27,16,91,8,23,11,87,99,33,47,2,14,44,73,70,99,43,35,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,56,61,86,56,12,70,59,63,32,1,15,81,47,71,76,95,32,65,80,54,70,34,51,40,45,33,4,64,55,78,68,88,47,31,47,68,87,3,84,23,44,89,72,35,8,31,76,63,26,90,85,96,67,65,91,19,14,17,86,4,71,32,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,13,4,22,64,37,37,28,56,62,86,33,7,37,10,44,52,82,52,6,19,52,57,75,90,26,91,24,6,21,14,67,76,30,46,14,35,89,89,41,3,64,56,97,87,63,22,34,3,79,17,45,11,53,25,56,96,61,23,18,63,31,37,37,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[77,23,26,70,72,76,77,4,28,64,71,69,14,85,96,54,95,48,6,62,99,83,86,77,97,75,71,66,30,19,57,90,33,1,60,61,14,12,90,99,32,77,56,41,18,14,87,49,10,14,90,64,18,50,21,74,14,16,88,5,45,73,82,47,74,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[22,97,41,13,34,31,54,61,56,94,3,24,59,27,98,77,4,9,37,40,12,26,87,9,71,70,7,18,64,57,80,21,12,71,83,94,60,39,73,79,73,19,97,32,64,29,41,7,48,84,85,67,12,74,95,20,24,52,41,67,56,61,29,93,35,72,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[72,23,63,66,1,11,7,30,52,56,95,16,65,26,83,90,50,74,60,18,16,48,43,77,37,11,99,98,30,94,91,26,62,73,45,12,87,73,47,27,1,88,66,99,21,41,95,80,2,53,23,32,61,48,32,43,43,83,14,66,95,91,19,81,80,67,25,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,62,32,18,92,14,83,71,37,96,11,83,39,99,5,16,23,27,10,67,2,25,44,11,55,31,46,64,41,56,44,74,26,81,51,31,45,85,87,9,81,95,22,28,76,69,46,48,64,87,67,76,27,89,31,11,74,16,62,3,60,94,42,47,9,34,94,93,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,18,90,18,42,17,42,32,14,86,6,53,33,95,99,35,29,15,44,20,49,59,25,54,34,59,84,21,23,54,35,90,78,16,93,13,37,88,54,19,86,67,68,55,66,84,65,42,98,37,87,56,33,28,58,38,28,38,66,27,52,21,81,15,8,22,97,32,85,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,53,40,28,13,34,91,25,1,63,50,37,22,49,71,58,32,28,30,18,68,94,23,83,63,62,94,76,80,41,90,22,82,52,29,12,18,56,10,8,35,14,37,57,23,65,67,40,72,39,93,39,70,89,40,34,7,46,94,22,20,5,53,64,56,30,5,56,61,88,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[23,95,11,12,37,69,68,24,66,10,87,70,43,50,75,7,62,41,83,58,95,93,89,79,45,39,2,22,5,22,95,43,62,11,68,29,17,40,26,44,25,71,87,16,70,85,19,25,59,94,90,41,41,80,61,70,55,60,84,33,95,76,42,63,15,9,3,40,38,12,3,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,84,56,80,61,55,85,97,16,94,82,94,98,57,84,30,84,48,93,90,71,5,95,90,73,17,30,98,40,64,65,89,7,79,9,19,56,36,42,30,23,69,73,72,7,5,27,61,24,31,43,48,71,84,21,28,26,65,65,59,65,74,77,20,10,81,61,84,95,8,52,23,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[47,81,28,9,98,51,67,64,35,51,59,36,92,82,77,65,80,24,72,53,22,7,27,10,21,28,30,22,48,82,80,48,56,20,14,43,18,25,50,95,90,31,77,8,9,48,44,80,90,22,93,45,82,17,13,96,25,26,8,73,34,99,6,49,24,6,83,51,40,14,15,10,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,25,10,81,30,64,24,74,75,80,36,75,82,60,22,69,72,91,45,67,3,62,79,54,89,74,44,83,64,96,66,73,44,30,74,50,37,5,9,97,70,1,60,46,37,91,39,75,75,18,58,52,72,78,51,81,86,52,8,97,1,46,43,66,98,62,81,18,70,93,73,8,32,46,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[96,80,82,7,59,71,92,53,19,20,88,66,3,26,26,10,24,27,50,82,94,73,63,8,51,33,22,45,19,13,58,33,90,15,22,50,36,13,55,6,35,47,82,52,33,61,36,27,28,46,98,14,73,20,73,32,16,26,80,53,47,66,76,38,94,45,2,1,22,52,47,96,64,58,52,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[88,46,23,39,74,63,81,64,20,90,33,33,76,55,58,26,10,46,42,26,74,74,12,83,32,43,9,2,73,55,86,54,85,34,28,23,29,79,91,62,47,41,82,87,99,22,48,90,20,5,96,75,95,4,43,28,81,39,81,1,28,42,78,25,39,77,90,57,58,98,17,36,73,22,63,74,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[29,39,74,94,95,78,64,24,38,86,63,87,93,6,70,92,22,16,80,64,29,52,20,27,23,50,14,13,87,15,72,96,81,22,8,49,72,30,70,24,79,31,16,64,59,21,89,34,96,91,48,76,43,53,88,1,57,80,23,81,90,79,58,1,80,87,17,99,86,90,72,63,32,69,14,28,88,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,17,71,95,56,93,71,35,43,45,4,98,92,94,84,96,11,30,31,27,31,60,92,3,48,5,98,91,86,94,35,90,90,8,48,19,33,28,68,37,59,26,65,96,50,68,22,7,9,49,34,31,77,49,43,6,75,17,81,87,61,79,52,26,27,72,29,50,7,98,86,1,17,10,46,64,24,18,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[51,30,25,94,88,85,79,91,40,33,63,84,49,67,98,92,15,26,75,19,82,5,18,78,65,93,61,48,91,43,59,41,70,51,22,15,92,81,67,91,46,98,11,11,65,31,66,10,98,65,83,21,5,56,5,98,73,67,46,74,69,34,8,30,5,52,7,98,32,95,30,94,65,50,24,63,28,81,99,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[19,23,61,36,9,89,71,98,65,17,30,29,89,26,79,74,94,11,44,48,97,54,81,55,39,66,69,45,28,47,13,86,15,76,74,70,84,32,36,33,79,20,78,14,41,47,89,28,81,5,99,66,81,86,38,26,6,25,13,60,54,55,23,53,27,5,89,25,23,11,13,54,59,54,56,34,16,24,53,44,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[13,40,57,72,21,15,60,8,4,19,11,98,34,45,9,97,86,71,3,15,56,19,15,44,97,31,90,4,87,87,76,8,12,30,24,62,84,28,12,85,82,53,99,52,13,94,6,65,97,86,9,50,94,68,69,74,30,67,87,94,63,7,78,27,80,36,69,41,6,92,32,78,37,82,30,5,18,87,99,72,19,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[44,20,55,77,69,91,27,31,28,81,80,27,2,7,97,23,95,98,12,25,75,29,47,71,7,47,78,39,41,59,27,76,13,15,66,61,68,35,69,86,16,53,67,63,99,85,41,56,8,28,33,40,94,76,90,85,31,70,24,65,84,65,99,82,19,25,54,37,21,46,33,2,52,99,51,33,26,4,87,2,8,18,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,61,45,91,6,64,79,80,82,32,16,83,63,42,49,19,78,65,97,40,42,14,61,49,34,4,18,25,98,59,30,82,72,26,88,54,36,21,75,3,88,99,53,46,51,55,78,22,94,34,40,68,87,84,25,30,76,25,8,92,84,42,61,40,38,9,99,40,23,29,39,46,55,10,90,35,84,56,70,63,23,91,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,92,3,71,89,7,9,37,68,66,58,20,44,92,51,56,13,71,79,99,26,37,2,6,16,67,36,52,58,16,79,73,56,60,59,27,44,77,94,82,20,50,98,33,9,87,94,37,40,83,64,83,58,85,17,76,53,2,83,52,22,27,39,20,48,92,45,21,9,42,24,23,12,37,52,28,50,78,79,20,86,62,73,20,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,96,80,15,91,90,99,70,10,9,58,90,93,50,81,99,54,38,36,10,30,11,35,84,16,45,82,18,11,97,36,43,96,79,97,65,40,48,23,19,17,31,64,52,65,65,37,32,65,76,99,79,34,65,79,27,55,33,3,1,33,27,61,28,66,8,4,70,49,46,48,83,1,45,19,96,13,81,14,21,31,79,93,85,50,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,92,48,84,59,98,31,53,23,27,15,22,79,95,24,76,5,79,16,93,97,89,38,89,42,83,2,88,94,95,82,21,1,97,48,39,31,78,9,65,50,56,97,61,1,7,65,27,21,23,14,15,80,97,44,78,49,35,33,45,81,74,34,5,31,57,9,38,94,7,69,54,69,32,65,68,46,68,78,90,24,28,49,51,45,86,35,0,0,0,0,0,0,0,0,0,0,0,0,0],[41,63,89,76,87,31,86,9,46,14,87,82,22,29,47,16,13,10,70,72,82,95,48,64,58,43,13,75,42,69,21,12,67,13,64,85,58,23,98,9,37,76,5,22,31,12,66,50,29,99,86,72,45,25,10,28,19,6,90,43,29,31,67,79,46,25,74,14,97,35,76,37,65,46,23,82,6,22,30,76,93,66,94,17,96,13,20,72,0,0,0,0,0,0,0,0,0,0,0,0],[63,40,78,8,52,9,90,41,70,28,36,14,46,44,85,96,24,52,58,15,87,37,5,98,99,39,13,61,76,38,44,99,83,74,90,22,53,80,56,98,30,51,63,39,44,30,91,91,4,22,27,73,17,35,53,18,35,45,54,56,27,78,48,13,69,36,44,38,71,25,30,56,15,22,73,43,32,69,59,25,93,83,45,11,34,94,44,39,92,0,0,0,0,0,0,0,0,0,0,0],[12,36,56,88,13,96,16,12,55,54,11,47,19,78,17,17,68,81,77,51,42,55,99,85,66,27,81,79,93,42,65,61,69,74,14,1,18,56,12,1,58,37,91,22,42,66,83,25,19,4,96,41,25,45,18,69,96,88,36,93,10,12,98,32,44,83,83,4,72,91,4,27,73,7,34,37,71,60,59,31,1,54,54,44,96,93,83,36,4,45,0,0,0,0,0,0,0,0,0,0],[30,18,22,20,42,96,65,79,17,41,55,69,94,81,29,80,91,31,85,25,47,26,43,49,2,99,34,67,99,76,16,14,15,93,8,32,99,44,61,77,67,50,43,55,87,55,53,72,17,46,62,25,50,99,73,5,93,48,17,31,70,80,59,9,44,59,45,13,74,66,58,94,87,73,16,14,85,38,74,99,64,23,79,28,71,42,20,37,82,31,23,0,0,0,0,0,0,0,0,0],[51,96,39,65,46,71,56,13,29,68,53,86,45,33,51,49,12,91,21,21,76,85,2,17,98,15,46,12,60,21,88,30,92,83,44,59,42,50,27,88,46,86,94,73,45,54,23,24,14,10,94,21,20,34,23,51,4,83,99,75,90,63,60,16,22,33,83,70,11,32,10,50,29,30,83,46,11,5,31,17,86,42,49,1,44,63,28,60,7,78,95,40,0,0,0,0,0,0,0,0],[44,61,89,59,4,49,51,27,69,71,46,76,44,4,9,34,56,39,15,6,94,91,75,90,65,27,56,23,74,6,23,33,36,69,14,39,5,34,35,57,33,22,76,46,56,10,61,65,98,9,16,69,4,62,65,18,99,76,49,18,72,66,73,83,82,40,76,31,89,91,27,88,17,35,41,35,32,51,32,67,52,68,74,85,80,57,7,11,62,66,47,22,67,0,0,0,0,0,0,0],[65,37,19,97,26,17,16,24,24,17,50,37,64,82,24,36,32,11,68,34,69,31,32,89,79,93,96,68,49,90,14,23,4,4,67,99,81,74,70,74,36,96,68,9,64,39,88,35,54,89,96,58,66,27,88,97,32,14,6,35,78,20,71,6,85,66,57,2,58,91,72,5,29,56,73,48,86,52,9,93,22,57,79,42,12,1,31,68,17,59,63,76,7,77,0,0,0,0,0,0],[73,81,14,13,17,20,11,9,1,83,8,85,91,70,84,63,62,77,37,7,47,1,59,95,39,69,39,21,99,9,87,2,97,16,92,36,74,71,90,66,33,73,73,75,52,91,11,12,26,53,5,26,26,48,61,50,90,65,1,87,42,47,74,35,22,73,24,26,56,70,52,5,48,41,31,18,83,27,21,39,80,85,26,8,44,2,71,7,63,22,5,52,19,8,20,0,0,0,0,0],[17,25,21,11,72,93,33,49,64,23,53,82,3,13,91,65,85,2,40,5,42,31,77,42,5,36,6,54,4,58,7,76,87,83,25,57,66,12,74,33,85,37,74,32,20,69,3,97,91,68,82,44,19,14,89,28,85,85,80,53,34,87,58,98,88,78,48,65,98,40,11,57,10,67,70,81,60,79,74,72,97,59,79,47,30,20,54,80,89,91,14,5,33,36,79,39,0,0,0,0],[60,85,59,39,60,7,57,76,77,92,6,35,15,72,23,41,45,52,95,18,64,79,86,53,56,31,69,11,91,31,84,50,44,82,22,81,41,40,30,42,30,91,48,94,74,76,64,58,74,25,96,57,14,19,3,99,28,83,15,75,99,1,89,85,79,50,3,95,32,67,44,8,7,41,62,64,29,20,14,76,26,55,48,71,69,66,19,72,44,25,14,1,48,74,12,98,7,0,0,0],[64,66,84,24,18,16,27,48,20,14,47,69,30,86,48,40,23,16,61,21,51,50,26,47,35,33,91,28,78,64,43,68,4,79,51,8,19,60,52,95,6,68,46,86,35,97,27,58,4,65,30,58,99,12,12,75,91,39,50,31,42,64,70,4,46,7,98,73,98,93,37,89,77,91,64,71,64,65,66,21,78,62,81,74,42,20,83,70,73,95,78,45,92,27,34,53,71,15,0,0],[30,11,85,31,34,71,13,48,5,14,44,3,19,67,23,73,19,57,6,90,94,72,57,69,81,62,59,68,88,57,55,69,49,13,7,87,97,80,89,5,71,5,5,26,38,40,16,62,45,99,18,38,98,24,21,26,62,74,69,4,85,57,77,35,58,67,91,79,79,57,86,28,66,34,72,51,76,78,36,95,63,90,8,78,47,63,45,31,22,70,52,48,79,94,15,77,61,67,68,0],[23,33,44,81,80,92,93,75,94,88,23,61,39,76,22,3,28,94,32,6,49,65,41,34,18,23,8,47,62,60,3,63,33,13,80,52,31,54,73,43,70,26,16,69,57,87,83,31,3,93,70,81,47,95,77,44,29,68,39,51,56,59,63,7,25,70,7,77,43,53,64,3,94,42,95,39,18,1,66,21,16,97,20,50,90,16,70,10,95,69,29,6,25,61,41,26,15,59,63,35]]; --seed-contents-- ```js function maximumPathSumII(triangle) { return true; } ``` --solutions-- ```js function maximumPathSumII(triangle) { const newTriangle = []; for (let i = 0; i < trianglelength; i++) {\nnewTriangle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 27200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 20211,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "76358db3f46b1eb750863ddc6989c2d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return 23 js assert strictEqual(maximumPathSumII(_testTriangle), 23); maximumPathSumII(numTriangle) should return 7273 js assertstrictEqual(maximumPathSumII(_numTriangle), 7273); --seed-- --before-user-code-- js const _testTriangle = [[3, 0, 0, 0], [7, 4, 0, 0], [2, 4, 6, 0], [8, 5, 9, 3]]; const _numTriangle = [[59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,40,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[26,53,6,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[10,51,87,86,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,95,66,57,25,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,81,80,38,92,67,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[30,28,51,76,81,18,75,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[84,14,95,87,62,81,17,78,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[21,46,71,58,2,79,62,39,31,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,34,35,53,78,31,81,18,90,93,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,53,4,21,84,93,32,13,97,11,37,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[45,3,81,79,5,18,78,86,13,30,63,99,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[39,87,96,28,3,38,42,17,82,87,58,7,22,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,17,51,17,7,93,9,7,75,97,95,78,87,8,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,66,59,60,88,99,94,65,55,77,55,34,27,53,78,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,40,41,4,87,16,9,42,75,69,23,97,30,60,10,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[12,10,44,26,21,36,32,84,98,60,13,12,36,16,63,31,91,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[70,39,6,5,55,27,38,48,28,22,34,35,62,62,15,14,94,89,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,56,68,84,96,21,34,34,34,81,62,40,65,54,62,5,98,3,2,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[38,89,46,37,99,54,34,53,36,14,70,26,2,90,45,13,31,61,83,73,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[36,10,63,96,60,49,41,5,37,42,14,58,84,93,96,17,9,43,5,43,6,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,57,87,57,61,28,37,51,84,73,79,15,39,95,88,87,43,39,11,86,77,74,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,5,79,30,49,99,73,46,37,50,2,45,9,54,52,27,95,27,65,19,45,26,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,39,17,78,76,29,52,90,18,99,78,19,35,62,71,19,23,65,93,85,49,33,75,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[33,24,47,61,60,55,32,88,57,55,91,54,46,57,7,77,98,52,80,99,24,25,46,78,79,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,9,13,55,10,67,26,78,76,82,63,49,51,31,24,68,5,57,7,54,69,21,67,43,17,63,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[24,59,6,8,98,74,66,26,61,60,13,3,9,9,24,30,71,8,88,70,72,70,29,90,11,82,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,82,67,4,36,60,92,77,91,85,62,49,59,61,30,90,29,94,26,41,89,4,53,22,83,41,9,74,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[48,28,26,37,28,52,77,26,51,32,18,98,79,36,62,13,17,8,19,54,89,29,73,68,42,14,8,16,70,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,60,69,70,72,71,9,59,13,60,38,13,57,36,9,30,43,89,30,39,15,2,44,73,5,73,26,63,56,86,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[55,55,85,50,62,99,84,77,28,85,3,21,27,22,19,26,82,69,54,4,13,7,85,14,1,15,70,59,89,95,10,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,9,31,92,91,38,92,86,98,75,21,5,64,42,62,84,36,20,73,42,21,23,22,51,51,79,25,45,85,53,3,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[75,63,2,49,14,12,89,14,60,78,92,16,44,82,38,30,72,11,46,52,90,27,8,65,78,3,85,41,57,79,39,52,33,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,27,56,56,39,13,19,43,86,72,58,95,39,7,4,34,21,98,39,15,39,84,89,69,84,46,37,57,59,35,59,50,26,15,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[42,89,36,27,78,91,24,11,17,41,5,94,7,69,51,96,3,96,47,90,90,45,91,20,50,56,10,32,36,49,4,53,85,92,25,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,9,61,30,61,97,66,21,96,92,98,90,6,34,96,60,32,69,68,33,75,84,18,31,71,50,84,63,3,3,19,11,28,42,75,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,31,61,68,96,34,49,39,5,71,76,59,62,67,6,47,96,99,34,21,32,47,52,7,71,60,42,72,94,56,82,83,84,40,94,87,82,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,20,60,14,17,38,26,78,66,81,45,95,18,51,98,81,48,16,53,88,37,52,69,95,72,93,22,34,98,20,54,27,73,61,56,63,60,34,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[93,42,94,83,47,61,27,51,79,79,45,1,44,73,31,70,83,42,88,25,53,51,30,15,65,94,80,44,61,84,12,77,2,62,2,65,94,42,14,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,73,9,67,68,29,74,98,10,19,85,48,38,31,85,67,53,93,93,77,47,67,39,72,94,53,18,43,77,40,78,32,29,59,24,6,2,83,50,60,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,1,44,30,16,51,15,81,98,15,10,62,86,79,50,62,45,60,70,38,31,85,65,61,64,6,69,84,14,22,56,43,9,48,66,69,83,91,60,40,36,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,48,22,99,15,95,64,43,1,16,94,2,99,19,17,69,11,58,97,56,89,31,77,45,67,96,12,73,8,20,36,47,81,44,50,64,68,85,40,81,85,52,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,35,92,45,32,84,62,15,19,64,21,66,6,1,52,80,62,59,12,25,88,28,91,50,40,16,22,99,92,79,87,51,21,77,74,77,7,42,38,42,74,83,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[46,19,77,66,24,18,5,32,2,84,31,99,92,58,96,72,91,36,62,99,55,29,53,42,12,37,26,58,89,50,66,19,82,75,12,48,24,87,91,85,2,7,3,76,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[99,98,84,93,7,17,33,61,92,20,66,60,24,66,40,30,67,5,37,29,24,96,3,27,70,62,13,4,45,47,59,88,43,20,66,15,46,92,30,4,71,66,78,70,53,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,60,38,6,88,4,17,72,10,99,71,7,42,25,54,5,26,64,91,50,45,71,6,30,67,48,69,82,8,56,80,67,18,46,66,63,1,20,8,80,47,7,91,16,3,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,54,78,49,80,48,77,40,68,23,60,88,58,80,33,57,11,69,55,53,64,2,94,49,60,92,16,35,81,21,82,96,25,24,96,18,2,5,49,3,50,77,6,32,84,27,18,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[68,1,50,4,3,21,42,94,53,24,89,5,92,26,52,36,68,11,85,1,4,42,2,45,15,6,50,4,53,73,25,74,81,88,98,21,67,84,79,97,99,20,95,4,40,46,2,58,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[94,10,2,78,88,52,21,3,88,60,6,53,49,71,20,91,12,65,7,49,21,22,11,41,58,99,36,16,9,48,17,24,52,36,23,15,72,16,84,56,2,99,43,76,81,71,29,39,49,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[64,39,59,84,86,16,17,66,3,9,43,6,64,18,63,29,68,6,23,7,87,14,26,35,17,12,98,41,53,64,78,18,98,27,28,84,80,67,75,62,10,11,76,90,54,10,5,54,41,39,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[43,83,18,37,32,31,52,29,95,47,8,76,35,11,4,53,35,43,34,10,52,57,12,36,20,39,40,55,78,44,7,31,38,26,8,15,56,88,86,1,52,62,10,24,32,5,60,65,53,28,57,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,50,3,52,7,73,49,92,66,80,1,46,8,67,25,36,73,93,7,42,25,53,13,96,76,83,87,90,54,89,78,22,78,91,73,51,69,9,79,94,83,53,9,40,69,62,10,79,49,47,3,81,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,54,73,33,51,76,59,54,79,37,56,45,84,17,62,21,98,69,41,95,65,24,39,37,62,3,24,48,54,64,46,82,71,78,33,67,9,16,96,68,52,74,79,68,32,21,13,78,96,60,9,69,20,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,26,21,44,46,38,17,83,65,98,7,23,52,46,61,97,33,13,60,31,70,15,36,77,31,58,56,93,75,68,21,36,69,53,90,75,25,82,39,50,65,94,29,30,11,33,11,13,96,2,56,47,7,49,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,46,73,30,10,20,60,70,14,56,34,26,37,39,48,24,55,76,84,91,39,86,95,61,50,14,53,93,64,67,37,31,10,84,42,70,48,20,10,72,60,61,84,79,69,65,99,73,89,25,85,48,92,56,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,14,80,27,22,30,44,27,67,75,79,32,51,54,81,29,65,14,19,4,13,82,4,91,43,40,12,52,29,99,7,76,60,25,1,7,61,71,37,92,40,47,99,66,57,1,43,44,22,40,53,53,9,69,26,81,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[49,80,56,90,93,87,47,13,75,28,87,23,72,79,32,18,27,20,28,10,37,59,21,18,70,4,79,96,3,31,45,71,81,6,14,18,17,5,31,50,92,79,23,47,9,39,47,91,43,54,69,47,42,95,62,46,32,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,18,62,85,87,28,64,5,77,51,47,26,30,65,5,70,65,75,59,80,42,52,25,20,44,10,92,17,71,95,52,14,77,13,24,55,11,65,26,91,1,30,63,15,49,48,41,17,67,47,3,68,20,90,98,32,4,40,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,51,58,60,6,55,23,68,5,19,76,94,82,36,96,43,38,90,87,28,33,83,5,17,70,83,96,93,6,4,78,47,80,6,23,84,75,23,87,72,99,14,50,98,92,38,90,64,61,58,76,94,36,66,87,80,51,35,61,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[57,95,64,6,53,36,82,51,40,33,47,14,7,98,78,65,39,58,53,6,50,53,4,69,40,68,36,69,75,78,75,60,3,32,39,24,74,47,26,90,13,40,44,71,90,76,51,24,36,50,25,45,70,80,61,80,61,43,90,64,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,29,86,56,68,42,79,10,42,44,30,12,96,18,23,18,52,59,2,99,67,46,60,86,43,38,55,17,44,93,42,21,55,14,47,34,55,16,49,24,23,29,96,51,55,10,46,53,27,92,27,46,63,57,30,65,43,27,21,20,24,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[81,72,93,19,69,52,48,1,13,83,92,69,20,48,69,59,20,62,5,42,28,89,90,99,32,72,84,17,8,87,36,3,60,31,36,36,81,26,97,36,48,54,56,56,27,16,91,8,23,11,87,99,33,47,2,14,44,73,70,99,43,35,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,56,61,86,56,12,70,59,63,32,1,15,81,47,71,76,95,32,65,80,54,70,34,51,40,45,33,4,64,55,78,68,88,47,31,47,68,87,3,84,23,44,89,72,35,8,31,76,63,26,90,85,96,67,65,91,19,14,17,86,4,71,32,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,13,4,22,64,37,37,28,56,62,86,33,7,37,10,44,52,82,52,6,19,52,57,75,90,26,91,24,6,21,14,67,76,30,46,14,35,89,89,41,3,64,56,97,87,63,22,34,3,79,17,45,11,53,25,56,96,61,23,18,63,31,37,37,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[77,23,26,70,72,76,77,4,28,64,71,69,14,85,96,54,95,48,6,62,99,83,86,77,97,75,71,66,30,19,57,90,33,1,60,61,14,12,90,99,32,77,56,41,18,14,87,49,10,14,90,64,18,50,21,74,14,16,88,5,45,73,82,47,74,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[22,97,41,13,34,31,54,61,56,94,3,24,59,27,98,77,4,9,37,40,12,26,87,9,71,70,7,18,64,57,80,21,12,71,83,94,60,39,73,79,73,19,97,32,64,29,41,7,48,84,85,67,12,74,95,20,24,52,41,67,56,61,29,93,35,72,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[72,23,63,66,1,11,7,30,52,56,95,16,65,26,83,90,50,74,60,18,16,48,43,77,37,11,99,98,30,94,91,26,62,73,45,12,87,73,47,27,1,88,66,99,21,41,95,80,2,53,23,32,61,48,32,43,43,83,14,66,95,91,19,81,80,67,25,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,62,32,18,92,14,83,71,37,96,11,83,39,99,5,16,23,27,10,67,2,25,44,11,55,31,46,64,41,56,44,74,26,81,51,31,45,85,87,9,81,95,22,28,76,69,46,48,64,87,67,76,27,89,31,11,74,16,62,3,60,94,42,47,9,34,94,93,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,18,90,18,42,17,42,32,14,86,6,53,33,95,99,35,29,15,44,20,49,59,25,54,34,59,84,21,23,54,35,90,78,16,93,13,37,88,54,19,86,67,68,55,66,84,65,42,98,37,87,56,33,28,58,38,28,38,66,27,52,21,81,15,8,22,97,32,85,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,53,40,28,13,34,91,25,1,63,50,37,22,49,71,58,32,28,30,18,68,94,23,83,63,62,94,76,80,41,90,22,82,52,29,12,18,56,10,8,35,14,37,57,23,65,67,40,72,39,93,39,70,89,40,34,7,46,94,22,20,5,53,64,56,30,5,56,61,88,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[23,95,11,12,37,69,68,24,66,10,87,70,43,50,75,7,62,41,83,58,95,93,89,79,45,39,2,22,5,22,95,43,62,11,68,29,17,40,26,44,25,71,87,16,70,85,19,25,59,94,90,41,41,80,61,70,55,60,84,33,95,76,42,63,15,9,3,40,38,12,3,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,84,56,80,61,55,85,97,16,94,82,94,98,57,84,30,84,48,93,90,71,5,95,90,73,17,30,98,40,64,65,89,7,79,9,19,56,36,42,30,23,69,73,72,7,5,27,61,24,31,43,48,71,84,21,28,26,65,65,59,65,74,77,20,10,81,61,84,95,8,52,23,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[47,81,28,9,98,51,67,64,35,51,59,36,92,82,77,65,80,24,72,53,22,7,27,10,21,28,30,22,48,82,80,48,56,20,14,43,18,25,50,95,90,31,77,8,9,48,44,80,90,22,93,45,82,17,13,96,25,26,8,73,34,99,6,49,24,6,83,51,40,14,15,10,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,25,10,81,30,64,24,74,75,80,36,75,82,60,22,69,72,91,45,67,3,62,79,54,89,74,44,83,64,96,66,73,44,30,74,50,37,5,9,97,70,1,60,46,37,91,39,75,75,18,58,52,72,78,51,81,86,52,8,97,1,46,43,66,98,62,81,18,70,93,73,8,32,46,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[96,80,82,7,59,71,92,53,19,20,88,66,3,26,26,10,24,27,50,82,94,73,63,8,51,33,22,45,19,13,58,33,90,15,22,50,36,13,55,6,35,47,82,52,33,61,36,27,28,46,98,14,73,20,73,32,16,26,80,53,47,66,76,38,94,45,2,1,22,52,47,96,64,58,52,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[88,46,23,39,74,63,81,64,20,90,33,33,76,55,58,26,10,46,42,26,74,74,12,83,32,43,9,2,73,55,86,54,85,34,28,23,29,79,91,62,47,41,82,87,99,22,48,90,20,5,96,75,95,4,43,28,81,39,81,1,28,42,78,25,39,77,90,57,58,98,17,36,73,22,63,74,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[29,39,74,94,95,78,64,24,38,86,63,87,93,6,70,92,22,16,80,64,29,52,20,27,23,50,14,13,87,15,72,96,81,22,8,49,72,30,70,24,79,31,16,64,59,21,89,34,96,91,48,76,43,53,88,1,57,80,23,81,90,79,58,1,80,87,17,99,86,90,72,63,32,69,14,28,88,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,17,71,95,56,93,71,35,43,45,4,98,92,94,84,96,11,30,31,27,31,60,92,3,48,5,98,91,86,94,35,90,90,8,48,19,33,28,68,37,59,26,65,96,50,68,22,7,9,49,34,31,77,49,43,6,75,17,81,87,61,79,52,26,27,72,29,50,7,98,86,1,17,10,46,64,24,18,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[51,30,25,94,88,85,79,91,40,33,63,84,49,67,98,92,15,26,75,19,82,5,18,78,65,93,61,48,91,43,59,41,70,51,22,15,92,81,67,91,46,98,11,11,65,31,66,10,98,65,83,21,5,56,5,98,73,67,46,74,69,34,8,30,5,52,7,98,32,95,30,94,65,50,24,63,28,81,99,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[19,23,61,36,9,89,71,98,65,17,30,29,89,26,79,74,94,11,44,48,97,54,81,55,39,66,69,45,28,47,13,86,15,76,74,70,84,32,36,33,79,20,78,14,41,47,89,28,81,5,99,66,81,86,38,26,6,25,13,60,54,55,23,53,27,5,89,25,23,11,13,54,59,54,56,34,16,24,53,44,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[13,40,57,72,21,15,60,8,4,19,11,98,34,45,9,97,86,71,3,15,56,19,15,44,97,31,90,4,87,87,76,8,12,30,24,62,84,28,12,85,82,53,99,52,13,94,6,65,97,86,9,50,94,68,69,74,30,67,87,94,63,7,78,27,80,36,69,41,6,92,32,78,37,82,30,5,18,87,99,72,19,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[44,20,55,77,69,91,27,31,28,81,80,27,2,7,97,23,95,98,12,25,75,29,47,71,7,47,78,39,41,59,27,76,13,15,66,61,68,35,69,86,16,53,67,63,99,85,41,56,8,28,33,40,94,76,90,85,31,70,24,65,84,65,99,82,19,25,54,37,21,46,33,2,52,99,51,33,26,4,87,2,8,18,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,61,45,91,6,64,79,80,82,32,16,83,63,42,49,19,78,65,97,40,42,14,61,49,34,4,18,25,98,59,30,82,72,26,88,54,36,21,75,3,88,99,53,46,51,55,78,22,94,34,40,68,87,84,25,30,76,25,8,92,84,42,61,40,38,9,99,40,23,29,39,46,55,10,90,35,84,56,70,63,23,91,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,92,3,71,89,7,9,37,68,66,58,20,44,92,51,56,13,71,79,99,26,37,2,6,16,67,36,52,58,16,79,73,56,60,59,27,44,77,94,82,20,50,98,33,9,87,94,37,40,83,64,83,58,85,17,76,53,2,83,52,22,27,39,20,48,92,45,21,9,42,24,23,12,37,52,28,50,78,79,20,86,62,73,20,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,96,80,15,91,90,99,70,10,9,58,90,93,50,81,99,54,38,36,10,30,11,35,84,16,45,82,18,11,97,36,43,96,79,97,65,40,48,23,19,17,31,64,52,65,65,37,32,65,76,99,79,34,65,79,27,55,33,3,1,33,27,61,28,66,8,4,70,49,46,48,83,1,45,19,96,13,81,14,21,31,79,93,85,50,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,92,48,84,59,98,31,53,23,27,15,22,79,95,24,76,5,79,16,93,97,89,38,89,42,83,2,88,94,95,82,21,1,97,48,39,31,78,9,65,50,56,97,61,1,7,65,27,21,23,14,15,80,97,44,78,49,35,33,45,81,74,34,5,31,57,9,38,94,7,69,54,69,32,65,68,46,68,78,90,24,28,49,51,45,86,35,0,0,0,0,0,0,0,0,0,0,0,0,0],[41,63,89,76,87,31,86,9,46,14,87,82,22,29,47,16,13,10,70,72,82,95,48,64,58,43,13,75,42,69,21,12,67,13,64,85,58,23,98,9,37,76,5,22,31,12,66,50,29,99,86,72,45,25,10,28,19,6,90,43,29,31,67,79,46,25,74,14,97,35,76,37,65,46,23,82,6,22,30,76,93,66,94,17,96,13,20,72,0,0,0,0,0,0,0,0,0,0,0,0],[63,40,78,8,52,9,90,41,70,28,36,14,46,44,85,96,24,52,58,15,87,37,5,98,99,39,13,61,76,38,44,99,83,74,90,22,53,80,56,98,30,51,63,39,44,30,91,91,4,22,27,73,17,35,53,18,35,45,54,56,27,78,48,13,69,36,44,38,71,25,30,56,15,22,73,43,32,69,59,25,93,83,45,11,34,94,44,39,92,0,0,0,0,0,0,0,0,0,0,0],[12,36,56,88,13,96,16,12,55,54,11,47,19,78,17,17,68,81,77,51,42,55,99,85,66,27,81,79,93,42,65,61,69,74,14,1,18,56,12,1,58,37,91,22,42,66,83,25,19,4,96,41,25,45,18,69,96,88,36,93,10,12,98,32,44,83,83,4,72,91,4,27,73,7,34,37,71,60,59,31,1,54,54,44,96,93,83,36,4,45,0,0,0,0,0,0,0,0,0,0],[30,18,22,20,42,96,65,79,17,41,55,69,94,81,29,80,91,31,85,25,47,26,43,49,2,99,34,67,99,76,16,14,15,93,8,32,99,44,61,77,67,50,43,55,87,55,53,72,17,46,62,25,50,99,73,5,93,48,17,31,70,80,59,9,44,59,45,13,74,66,58,94,87,73,16,14,85,38,74,99,64,23,79,28,71,42,20,37,82,31,23,0,0,0,0,0,0,0,0,0],[51,96,39,65,46,71,56,13,29,68,53,86,45,33,51,49,12,91,21,21,76,85,2,17,98,15,46,12,60,21,88,30,92,83,44,59,42,50,27,88,46,86,94,73,45,54,23,24,14,10,94,21,20,34,23,51,4,83,99,75,90,63,60,16,22,33,83,70,11,32,10,50,29,30,83,46,11,5,31,17,86,42,49,1,44,63,28,60,7,78,95,40,0,0,0,0,0,0,0,0],[44,61,89,59,4,49,51,27,69,71,46,76,44,4,9,34,56,39,15,6,94,91,75,90,65,27,56,23,74,6,23,33,36,69,14,39,5,34,35,57,33,22,76,46,56,10,61,65,98,9,16,69,4,62,65,18,99,76,49,18,72,66,73,83,82,40,76,31,89,91,27,88,17,35,41,35,32,51,32,67,52,68,74,85,80,57,7,11,62,66,47,22,67,0,0,0,0,0,0,0],[65,37,19,97,26,17,16,24,24,17,50,37,64,82,24,36,32,11,68,34,69,31,32,89,79,93,96,68,49,90,14,23,4,4,67,99,81,74,70,74,36,96,68,9,64,39,88,35,54,89,96,58,66,27,88,97,32,14,6,35,78,20,71,6,85,66,57,2,58,91,72,5,29,56,73,48,86,52,9,93,22,57,79,42,12,1,31,68,17,59,63,76,7,77,0,0,0,0,0,0],[73,81,14,13,17,20,11,9,1,83,8,85,91,70,84,63,62,77,37,7,47,1,59,95,39,69,39,21,99,9,87,2,97,16,92,36,74,71,90,66,33,73,73,75,52,91,11,12,26,53,5,26,26,48,61,50,90,65,1,87,42,47,74,35,22,73,24,26,56,70,52,5,48,41,31,18,83,27,21,39,80,85,26,8,44,2,71,7,63,22,5,52,19,8,20,0,0,0,0,0],[17,25,21,11,72,93,33,49,64,23,53,82,3,13,91,65,85,2,40,5,42,31,77,42,5,36,6,54,4,58,7,76,87,83,25,57,66,12,74,33,85,37,74,32,20,69,3,97,91,68,82,44,19,14,89,28,85,85,80,53,34,87,58,98,88,78,48,65,98,40,11,57,10,67,70,81,60,79,74,72,97,59,79,47,30,20,54,80,89,91,14,5,33,36,79,39,0,0,0,0],[60,85,59,39,60,7,57,76,77,92,6,35,15,72,23,41,45,52,95,18,64,79,86,53,56,31,69,11,91,31,84,50,44,82,22,81,41,40,30,42,30,91,48,94,74,76,64,58,74,25,96,57,14,19,3,99,28,83,15,75,99,1,89,85,79,50,3,95,32,67,44,8,7,41,62,64,29,20,14,76,26,55,48,71,69,66,19,72,44,25,14,1,48,74,12,98,7,0,0,0],[64,66,84,24,18,16,27,48,20,14,47,69,30,86,48,40,23,16,61,21,51,50,26,47,35,33,91,28,78,64,43,68,4,79,51,8,19,60,52,95,6,68,46,86,35,97,27,58,4,65,30,58,99,12,12,75,91,39,50,31,42,64,70,4,46,7,98,73,98,93,37,89,77,91,64,71,64,65,66,21,78,62,81,74,42,20,83,70,73,95,78,45,92,27,34,53,71,15,0,0],[30,11,85,31,34,71,13,48,5,14,44,3,19,67,23,73,19,57,6,90,94,72,57,69,81,62,59,68,88,57,55,69,49,13,7,87,97,80,89,5,71,5,5,26,38,40,16,62,45,99,18,38,98,24,21,26,62,74,69,4,85,57,77,35,58,67,91,79,79,57,86,28,66,34,72,51,76,78,36,95,63,90,8,78,47,63,45,31,22,70,52,48,79,94,15,77,61,67,68,0],[23,33,44,81,80,92,93,75,94,88,23,61,39,76,22,3,28,94,32,6,49,65,41,34,18,23,8,47,62,60,3,63,33,13,80,52,31,54,73,43,70,26,16,69,57,87,83,31,3,93,70,81,47,95,77,44,29,68,39,51,56,59,63,7,25,70,7,77,43,53,64,3,94,42,95,39,18,1,66,21,16,97,20,50,90,16,70,10,95,69,29,6,25,61,41,26,15,59,63,35]]; --seed-contents-- ```js function maximumPathSumII(triangle) { return true; } ``` --solutions-- ```js function maximumPathSumII(triangle) { const newTriangle = []; for (let i = 0; i < trianglelength; i++) { newTrianglepush(triangle[i]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 27200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 20205,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "f496bff16a34c443aac1e7427c6e97c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0],[2, 4, 6, 0],[8, 5, 9, 3]]) should return 23 js assert strictEqual(maximumPathSumII(_testTriangle), 23); maximumPathSumII(numTriangle) should return 7273 js assertstrictEqual(maximumPathSumII(_numTriangle), 7273); --seed-- --before-user-code-- js const _testTriangle = [[3, 0, 0, 0], [7, 4, 0, 0], [2, 4, 6, 0], [8, 5, 9, 3]]; const _numTriangle = [[59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,40,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[26,53,6,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[10,51,87,86,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,95,66,57,25,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,81,80,38,92,67,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[30,28,51,76,81,18,75,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[84,14,95,87,62,81,17,78,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[21,46,71,58,2,79,62,39,31,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,34,35,53,78,31,81,18,90,93,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,53,4,21,84,93,32,13,97,11,37,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[45,3,81,79,5,18,78,86,13,30,63,99,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[39,87,96,28,3,38,42,17,82,87,58,7,22,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,17,51,17,7,93,9,7,75,97,95,78,87,8,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,66,59,60,88,99,94,65,55,77,55,34,27,53,78,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,40,41,4,87,16,9,42,75,69,23,97,30,60,10,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[12,10,44,26,21,36,32,84,98,60,13,12,36,16,63,31,91,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[70,39,6,5,55,27,38,48,28,22,34,35,62,62,15,14,94,89,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,56,68,84,96,21,34,34,34,81,62,40,65,54,62,5,98,3,2,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[38,89,46,37,99,54,34,53,36,14,70,26,2,90,45,13,31,61,83,73,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[36,10,63,96,60,49,41,5,37,42,14,58,84,93,96,17,9,43,5,43,6,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,57,87,57,61,28,37,51,84,73,79,15,39,95,88,87,43,39,11,86,77,74,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,5,79,30,49,99,73,46,37,50,2,45,9,54,52,27,95,27,65,19,45,26,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,39,17,78,76,29,52,90,18,99,78,19,35,62,71,19,23,65,93,85,49,33,75,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[33,24,47,61,60,55,32,88,57,55,91,54,46,57,7,77,98,52,80,99,24,25,46,78,79,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,9,13,55,10,67,26,78,76,82,63,49,51,31,24,68,5,57,7,54,69,21,67,43,17,63,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[24,59,6,8,98,74,66,26,61,60,13,3,9,9,24,30,71,8,88,70,72,70,29,90,11,82,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,82,67,4,36,60,92,77,91,85,62,49,59,61,30,90,29,94,26,41,89,4,53,22,83,41,9,74,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[48,28,26,37,28,52,77,26,51,32,18,98,79,36,62,13,17,8,19,54,89,29,73,68,42,14,8,16,70,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,60,69,70,72,71,9,59,13,60,38,13,57,36,9,30,43,89,30,39,15,2,44,73,5,73,26,63,56,86,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[55,55,85,50,62,99,84,77,28,85,3,21,27,22,19,26,82,69,54,4,13,7,85,14,1,15,70,59,89,95,10,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,9,31,92,91,38,92,86,98,75,21,5,64,42,62,84,36,20,73,42,21,23,22,51,51,79,25,45,85,53,3,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[75,63,2,49,14,12,89,14,60,78,92,16,44,82,38,30,72,11,46,52,90,27,8,65,78,3,85,41,57,79,39,52,33,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,27,56,56,39,13,19,43,86,72,58,95,39,7,4,34,21,98,39,15,39,84,89,69,84,46,37,57,59,35,59,50,26,15,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[42,89,36,27,78,91,24,11,17,41,5,94,7,69,51,96,3,96,47,90,90,45,91,20,50,56,10,32,36,49,4,53,85,92,25,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,9,61,30,61,97,66,21,96,92,98,90,6,34,96,60,32,69,68,33,75,84,18,31,71,50,84,63,3,3,19,11,28,42,75,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,31,61,68,96,34,49,39,5,71,76,59,62,67,6,47,96,99,34,21,32,47,52,7,71,60,42,72,94,56,82,83,84,40,94,87,82,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,20,60,14,17,38,26,78,66,81,45,95,18,51,98,81,48,16,53,88,37,52,69,95,72,93,22,34,98,20,54,27,73,61,56,63,60,34,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[93,42,94,83,47,61,27,51,79,79,45,1,44,73,31,70,83,42,88,25,53,51,30,15,65,94,80,44,61,84,12,77,2,62,2,65,94,42,14,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,73,9,67,68,29,74,98,10,19,85,48,38,31,85,67,53,93,93,77,47,67,39,72,94,53,18,43,77,40,78,32,29,59,24,6,2,83,50,60,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,1,44,30,16,51,15,81,98,15,10,62,86,79,50,62,45,60,70,38,31,85,65,61,64,6,69,84,14,22,56,43,9,48,66,69,83,91,60,40,36,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,48,22,99,15,95,64,43,1,16,94,2,99,19,17,69,11,58,97,56,89,31,77,45,67,96,12,73,8,20,36,47,81,44,50,64,68,85,40,81,85,52,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,35,92,45,32,84,62,15,19,64,21,66,6,1,52,80,62,59,12,25,88,28,91,50,40,16,22,99,92,79,87,51,21,77,74,77,7,42,38,42,74,83,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[46,19,77,66,24,18,5,32,2,84,31,99,92,58,96,72,91,36,62,99,55,29,53,42,12,37,26,58,89,50,66,19,82,75,12,48,24,87,91,85,2,7,3,76,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[99,98,84,93,7,17,33,61,92,20,66,60,24,66,40,30,67,5,37,29,24,96,3,27,70,62,13,4,45,47,59,88,43,20,66,15,46,92,30,4,71,66,78,70,53,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,60,38,6,88,4,17,72,10,99,71,7,42,25,54,5,26,64,91,50,45,71,6,30,67,48,69,82,8,56,80,67,18,46,66,63,1,20,8,80,47,7,91,16,3,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,54,78,49,80,48,77,40,68,23,60,88,58,80,33,57,11,69,55,53,64,2,94,49,60,92,16,35,81,21,82,96,25,24,96,18,2,5,49,3,50,77,6,32,84,27,18,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[68,1,50,4,3,21,42,94,53,24,89,5,92,26,52,36,68,11,85,1,4,42,2,45,15,6,50,4,53,73,25,74,81,88,98,21,67,84,79,97,99,20,95,4,40,46,2,58,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[94,10,2,78,88,52,21,3,88,60,6,53,49,71,20,91,12,65,7,49,21,22,11,41,58,99,36,16,9,48,17,24,52,36,23,15,72,16,84,56,2,99,43,76,81,71,29,39,49,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[64,39,59,84,86,16,17,66,3,9,43,6,64,18,63,29,68,6,23,7,87,14,26,35,17,12,98,41,53,64,78,18,98,27,28,84,80,67,75,62,10,11,76,90,54,10,5,54,41,39,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[43,83,18,37,32,31,52,29,95,47,8,76,35,11,4,53,35,43,34,10,52,57,12,36,20,39,40,55,78,44,7,31,38,26,8,15,56,88,86,1,52,62,10,24,32,5,60,65,53,28,57,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,50,3,52,7,73,49,92,66,80,1,46,8,67,25,36,73,93,7,42,25,53,13,96,76,83,87,90,54,89,78,22,78,91,73,51,69,9,79,94,83,53,9,40,69,62,10,79,49,47,3,81,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,54,73,33,51,76,59,54,79,37,56,45,84,17,62,21,98,69,41,95,65,24,39,37,62,3,24,48,54,64,46,82,71,78,33,67,9,16,96,68,52,74,79,68,32,21,13,78,96,60,9,69,20,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,26,21,44,46,38,17,83,65,98,7,23,52,46,61,97,33,13,60,31,70,15,36,77,31,58,56,93,75,68,21,36,69,53,90,75,25,82,39,50,65,94,29,30,11,33,11,13,96,2,56,47,7,49,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,46,73,30,10,20,60,70,14,56,34,26,37,39,48,24,55,76,84,91,39,86,95,61,50,14,53,93,64,67,37,31,10,84,42,70,48,20,10,72,60,61,84,79,69,65,99,73,89,25,85,48,92,56,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,14,80,27,22,30,44,27,67,75,79,32,51,54,81,29,65,14,19,4,13,82,4,91,43,40,12,52,29,99,7,76,60,25,1,7,61,71,37,92,40,47,99,66,57,1,43,44,22,40,53,53,9,69,26,81,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[49,80,56,90,93,87,47,13,75,28,87,23,72,79,32,18,27,20,28,10,37,59,21,18,70,4,79,96,3,31,45,71,81,6,14,18,17,5,31,50,92,79,23,47,9,39,47,91,43,54,69,47,42,95,62,46,32,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,18,62,85,87,28,64,5,77,51,47,26,30,65,5,70,65,75,59,80,42,52,25,20,44,10,92,17,71,95,52,14,77,13,24,55,11,65,26,91,1,30,63,15,49,48,41,17,67,47,3,68,20,90,98,32,4,40,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,51,58,60,6,55,23,68,5,19,76,94,82,36,96,43,38,90,87,28,33,83,5,17,70,83,96,93,6,4,78,47,80,6,23,84,75,23,87,72,99,14,50,98,92,38,90,64,61,58,76,94,36,66,87,80,51,35,61,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[57,95,64,6,53,36,82,51,40,33,47,14,7,98,78,65,39,58,53,6,50,53,4,69,40,68,36,69,75,78,75,60,3,32,39,24,74,47,26,90,13,40,44,71,90,76,51,24,36,50,25,45,70,80,61,80,61,43,90,64,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,29,86,56,68,42,79,10,42,44,30,12,96,18,23,18,52,59,2,99,67,46,60,86,43,38,55,17,44,93,42,21,55,14,47,34,55,16,49,24,23,29,96,51,55,10,46,53,27,92,27,46,63,57,30,65,43,27,21,20,24,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[81,72,93,19,69,52,48,1,13,83,92,69,20,48,69,59,20,62,5,42,28,89,90,99,32,72,84,17,8,87,36,3,60,31,36,36,81,26,97,36,48,54,56,56,27,16,91,8,23,11,87,99,33,47,2,14,44,73,70,99,43,35,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,56,61,86,56,12,70,59,63,32,1,15,81,47,71,76,95,32,65,80,54,70,34,51,40,45,33,4,64,55,78,68,88,47,31,47,68,87,3,84,23,44,89,72,35,8,31,76,63,26,90,85,96,67,65,91,19,14,17,86,4,71,32,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,13,4,22,64,37,37,28,56,62,86,33,7,37,10,44,52,82,52,6,19,52,57,75,90,26,91,24,6,21,14,67,76,30,46,14,35,89,89,41,3,64,56,97,87,63,22,34,3,79,17,45,11,53,25,56,96,61,23,18,63,31,37,37,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[77,23,26,70,72,76,77,4,28,64,71,69,14,85,96,54,95,48,6,62,99,83,86,77,97,75,71,66,30,19,57,90,33,1,60,61,14,12,90,99,32,77,56,41,18,14,87,49,10,14,90,64,18,50,21,74,14,16,88,5,45,73,82,47,74,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[22,97,41,13,34,31,54,61,56,94,3,24,59,27,98,77,4,9,37,40,12,26,87,9,71,70,7,18,64,57,80,21,12,71,83,94,60,39,73,79,73,19,97,32,64,29,41,7,48,84,85,67,12,74,95,20,24,52,41,67,56,61,29,93,35,72,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[72,23,63,66,1,11,7,30,52,56,95,16,65,26,83,90,50,74,60,18,16,48,43,77,37,11,99,98,30,94,91,26,62,73,45,12,87,73,47,27,1,88,66,99,21,41,95,80,2,53,23,32,61,48,32,43,43,83,14,66,95,91,19,81,80,67,25,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,62,32,18,92,14,83,71,37,96,11,83,39,99,5,16,23,27,10,67,2,25,44,11,55,31,46,64,41,56,44,74,26,81,51,31,45,85,87,9,81,95,22,28,76,69,46,48,64,87,67,76,27,89,31,11,74,16,62,3,60,94,42,47,9,34,94,93,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,18,90,18,42,17,42,32,14,86,6,53,33,95,99,35,29,15,44,20,49,59,25,54,34,59,84,21,23,54,35,90,78,16,93,13,37,88,54,19,86,67,68,55,66,84,65,42,98,37,87,56,33,28,58,38,28,38,66,27,52,21,81,15,8,22,97,32,85,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,53,40,28,13,34,91,25,1,63,50,37,22,49,71,58,32,28,30,18,68,94,23,83,63,62,94,76,80,41,90,22,82,52,29,12,18,56,10,8,35,14,37,57,23,65,67,40,72,39,93,39,70,89,40,34,7,46,94,22,20,5,53,64,56,30,5,56,61,88,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[23,95,11,12,37,69,68,24,66,10,87,70,43,50,75,7,62,41,83,58,95,93,89,79,45,39,2,22,5,22,95,43,62,11,68,29,17,40,26,44,25,71,87,16,70,85,19,25,59,94,90,41,41,80,61,70,55,60,84,33,95,76,42,63,15,9,3,40,38,12,3,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,84,56,80,61,55,85,97,16,94,82,94,98,57,84,30,84,48,93,90,71,5,95,90,73,17,30,98,40,64,65,89,7,79,9,19,56,36,42,30,23,69,73,72,7,5,27,61,24,31,43,48,71,84,21,28,26,65,65,59,65,74,77,20,10,81,61,84,95,8,52,23,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[47,81,28,9,98,51,67,64,35,51,59,36,92,82,77,65,80,24,72,53,22,7,27,10,21,28,30,22,48,82,80,48,56,20,14,43,18,25,50,95,90,31,77,8,9,48,44,80,90,22,93,45,82,17,13,96,25,26,8,73,34,99,6,49,24,6,83,51,40,14,15,10,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,25,10,81,30,64,24,74,75,80,36,75,82,60,22,69,72,91,45,67,3,62,79,54,89,74,44,83,64,96,66,73,44,30,74,50,37,5,9,97,70,1,60,46,37,91,39,75,75,18,58,52,72,78,51,81,86,52,8,97,1,46,43,66,98,62,81,18,70,93,73,8,32,46,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[96,80,82,7,59,71,92,53,19,20,88,66,3,26,26,10,24,27,50,82,94,73,63,8,51,33,22,45,19,13,58,33,90,15,22,50,36,13,55,6,35,47,82,52,33,61,36,27,28,46,98,14,73,20,73,32,16,26,80,53,47,66,76,38,94,45,2,1,22,52,47,96,64,58,52,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[88,46,23,39,74,63,81,64,20,90,33,33,76,55,58,26,10,46,42,26,74,74,12,83,32,43,9,2,73,55,86,54,85,34,28,23,29,79,91,62,47,41,82,87,99,22,48,90,20,5,96,75,95,4,43,28,81,39,81,1,28,42,78,25,39,77,90,57,58,98,17,36,73,22,63,74,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[29,39,74,94,95,78,64,24,38,86,63,87,93,6,70,92,22,16,80,64,29,52,20,27,23,50,14,13,87,15,72,96,81,22,8,49,72,30,70,24,79,31,16,64,59,21,89,34,96,91,48,76,43,53,88,1,57,80,23,81,90,79,58,1,80,87,17,99,86,90,72,63,32,69,14,28,88,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,17,71,95,56,93,71,35,43,45,4,98,92,94,84,96,11,30,31,27,31,60,92,3,48,5,98,91,86,94,35,90,90,8,48,19,33,28,68,37,59,26,65,96,50,68,22,7,9,49,34,31,77,49,43,6,75,17,81,87,61,79,52,26,27,72,29,50,7,98,86,1,17,10,46,64,24,18,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[51,30,25,94,88,85,79,91,40,33,63,84,49,67,98,92,15,26,75,19,82,5,18,78,65,93,61,48,91,43,59,41,70,51,22,15,92,81,67,91,46,98,11,11,65,31,66,10,98,65,83,21,5,56,5,98,73,67,46,74,69,34,8,30,5,52,7,98,32,95,30,94,65,50,24,63,28,81,99,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[19,23,61,36,9,89,71,98,65,17,30,29,89,26,79,74,94,11,44,48,97,54,81,55,39,66,69,45,28,47,13,86,15,76,74,70,84,32,36,33,79,20,78,14,41,47,89,28,81,5,99,66,81,86,38,26,6,25,13,60,54,55,23,53,27,5,89,25,23,11,13,54,59,54,56,34,16,24,53,44,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[13,40,57,72,21,15,60,8,4,19,11,98,34,45,9,97,86,71,3,15,56,19,15,44,97,31,90,4,87,87,76,8,12,30,24,62,84,28,12,85,82,53,99,52,13,94,6,65,97,86,9,50,94,68,69,74,30,67,87,94,63,7,78,27,80,36,69,41,6,92,32,78,37,82,30,5,18,87,99,72,19,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[44,20,55,77,69,91,27,31,28,81,80,27,2,7,97,23,95,98,12,25,75,29,47,71,7,47,78,39,41,59,27,76,13,15,66,61,68,35,69,86,16,53,67,63,99,85,41,56,8,28,33,40,94,76,90,85,31,70,24,65,84,65,99,82,19,25,54,37,21,46,33,2,52,99,51,33,26,4,87,2,8,18,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,61,45,91,6,64,79,80,82,32,16,83,63,42,49,19,78,65,97,40,42,14,61,49,34,4,18,25,98,59,30,82,72,26,88,54,36,21,75,3,88,99,53,46,51,55,78,22,94,34,40,68,87,84,25,30,76,25,8,92,84,42,61,40,38,9,99,40,23,29,39,46,55,10,90,35,84,56,70,63,23,91,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,92,3,71,89,7,9,37,68,66,58,20,44,92,51,56,13,71,79,99,26,37,2,6,16,67,36,52,58,16,79,73,56,60,59,27,44,77,94,82,20,50,98,33,9,87,94,37,40,83,64,83,58,85,17,76,53,2,83,52,22,27,39,20,48,92,45,21,9,42,24,23,12,37,52,28,50,78,79,20,86,62,73,20,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,96,80,15,91,90,99,70,10,9,58,90,93,50,81,99,54,38,36,10,30,11,35,84,16,45,82,18,11,97,36,43,96,79,97,65,40,48,23,19,17,31,64,52,65,65,37,32,65,76,99,79,34,65,79,27,55,33,3,1,33,27,61,28,66,8,4,70,49,46,48,83,1,45,19,96,13,81,14,21,31,79,93,85,50,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,92,48,84,59,98,31,53,23,27,15,22,79,95,24,76,5,79,16,93,97,89,38,89,42,83,2,88,94,95,82,21,1,97,48,39,31,78,9,65,50,56,97,61,1,7,65,27,21,23,14,15,80,97,44,78,49,35,33,45,81,74,34,5,31,57,9,38,94,7,69,54,69,32,65,68,46,68,78,90,24,28,49,51,45,86,35,0,0,0,0,0,0,0,0,0,0,0,0,0],[41,63,89,76,87,31,86,9,46,14,87,82,22,29,47,16,13,10,70,72,82,95,48,64,58,43,13,75,42,69,21,12,67,13,64,85,58,23,98,9,37,76,5,22,31,12,66,50,29,99,86,72,45,25,10,28,19,6,90,43,29,31,67,79,46,25,74,14,97,35,76,37,65,46,23,82,6,22,30,76,93,66,94,17,96,13,20,72,0,0,0,0,0,0,0,0,0,0,0,0],[63,40,78,8,52,9,90,41,70,28,36,14,46,44,85,96,24,52,58,15,87,37,5,98,99,39,13,61,76,38,44,99,83,74,90,22,53,80,56,98,30,51,63,39,44,30,91,91,4,22,27,73,17,35,53,18,35,45,54,56,27,78,48,13,69,36,44,38,71,25,30,56,15,22,73,43,32,69,59,25,93,83,45,11,34,94,44,39,92,0,0,0,0,0,0,0,0,0,0,0],[12,36,56,88,13,96,16,12,55,54,11,47,19,78,17,17,68,81,77,51,42,55,99,85,66,27,81,79,93,42,65,61,69,74,14,1,18,56,12,1,58,37,91,22,42,66,83,25,19,4,96,41,25,45,18,69,96,88,36,93,10,12,98,32,44,83,83,4,72,91,4,27,73,7,34,37,71,60,59,31,1,54,54,44,96,93,83,36,4,45,0,0,0,0,0,0,0,0,0,0],[30,18,22,20,42,96,65,79,17,41,55,69,94,81,29,80,91,31,85,25,47,26,43,49,2,99,34,67,99,76,16,14,15,93,8,32,99,44,61,77,67,50,43,55,87,55,53,72,17,46,62,25,50,99,73,5,93,48,17,31,70,80,59,9,44,59,45,13,74,66,58,94,87,73,16,14,85,38,74,99,64,23,79,28,71,42,20,37,82,31,23,0,0,0,0,0,0,0,0,0],[51,96,39,65,46,71,56,13,29,68,53,86,45,33,51,49,12,91,21,21,76,85,2,17,98,15,46,12,60,21,88,30,92,83,44,59,42,50,27,88,46,86,94,73,45,54,23,24,14,10,94,21,20,34,23,51,4,83,99,75,90,63,60,16,22,33,83,70,11,32,10,50,29,30,83,46,11,5,31,17,86,42,49,1,44,63,28,60,7,78,95,40,0,0,0,0,0,0,0,0],[44,61,89,59,4,49,51,27,69,71,46,76,44,4,9,34,56,39,15,6,94,91,75,90,65,27,56,23,74,6,23,33,36,69,14,39,5,34,35,57,33,22,76,46,56,10,61,65,98,9,16,69,4,62,65,18,99,76,49,18,72,66,73,83,82,40,76,31,89,91,27,88,17,35,41,35,32,51,32,67,52,68,74,85,80,57,7,11,62,66,47,22,67,0,0,0,0,0,0,0],[65,37,19,97,26,17,16,24,24,17,50,37,64,82,24,36,32,11,68,34,69,31,32,89,79,93,96,68,49,90,14,23,4,4,67,99,81,74,70,74,36,96,68,9,64,39,88,35,54,89,96,58,66,27,88,97,32,14,6,35,78,20,71,6,85,66,57,2,58,91,72,5,29,56,73,48,86,52,9,93,22,57,79,42,12,1,31,68,17,59,63,76,7,77,0,0,0,0,0,0],[73,81,14,13,17,20,11,9,1,83,8,85,91,70,84,63,62,77,37,7,47,1,59,95,39,69,39,21,99,9,87,2,97,16,92,36,74,71,90,66,33,73,73,75,52,91,11,12,26,53,5,26,26,48,61,50,90,65,1,87,42,47,74,35,22,73,24,26,56,70,52,5,48,41,31,18,83,27,21,39,80,85,26,8,44,2,71,7,63,22,5,52,19,8,20,0,0,0,0,0],[17,25,21,11,72,93,33,49,64,23,53,82,3,13,91,65,85,2,40,5,42,31,77,42,5,36,6,54,4,58,7,76,87,83,25,57,66,12,74,33,85,37,74,32,20,69,3,97,91,68,82,44,19,14,89,28,85,85,80,53,34,87,58,98,88,78,48,65,98,40,11,57,10,67,70,81,60,79,74,72,97,59,79,47,30,20,54,80,89,91,14,5,33,36,79,39,0,0,0,0],[60,85,59,39,60,7,57,76,77,92,6,35,15,72,23,41,45,52,95,18,64,79,86,53,56,31,69,11,91,31,84,50,44,82,22,81,41,40,30,42,30,91,48,94,74,76,64,58,74,25,96,57,14,19,3,99,28,83,15,75,99,1,89,85,79,50,3,95,32,67,44,8,7,41,62,64,29,20,14,76,26,55,48,71,69,66,19,72,44,25,14,1,48,74,12,98,7,0,0,0],[64,66,84,24,18,16,27,48,20,14,47,69,30,86,48,40,23,16,61,21,51,50,26,47,35,33,91,28,78,64,43,68,4,79,51,8,19,60,52,95,6,68,46,86,35,97,27,58,4,65,30,58,99,12,12,75,91,39,50,31,42,64,70,4,46,7,98,73,98,93,37,89,77,91,64,71,64,65,66,21,78,62,81,74,42,20,83,70,73,95,78,45,92,27,34,53,71,15,0,0],[30,11,85,31,34,71,13,48,5,14,44,3,19,67,23,73,19,57,6,90,94,72,57,69,81,62,59,68,88,57,55,69,49,13,7,87,97,80,89,5,71,5,5,26,38,40,16,62,45,99,18,38,98,24,21,26,62,74,69,4,85,57,77,35,58,67,91,79,79,57,86,28,66,34,72,51,76,78,36,95,63,90,8,78,47,63,45,31,22,70,52,48,79,94,15,77,61,67,68,0],[23,33,44,81,80,92,93,75,94,88,23,61,39,76,22,3,28,94,32,6,49,65,41,34,18,23,8,47,62,60,3,63,33,13,80,52,31,54,73,43,70,26,16,69,57,87,83,31,3,93,70,81,47,95,77,44,29,68,39,51,56,59,63,7,25,70,7,77,43,53,64,3,94,42,95,39,18,1,66,21,16,97,20,50,90,16,70,10,95,69,29,6,25,61,41,26,15,59,63,35]]; --seed-contents-- ```js function maximumPathSumII(triangle) { return true; } ``` --solutions-- ```js function maximumPathSumII(triangle) { const newTriangle = []; for (let i = 0; i < trianglelength; i++) { newTrianglepush(triangle[i]slice());\n}\nfor (let i = newTriangle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 27200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 20215,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "bd3d0767adf6b82593c8769204aab004",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "3]]) should return 23 js assert strictEqual(maximumPathSumII(_testTriangle), 23); maximumPathSumII(numTriangle) should return 7273 js assertstrictEqual(maximumPathSumII(_numTriangle), 7273); --seed-- --before-user-code-- js const _testTriangle = [[3, 0, 0, 0], [7, 4, 0, 0], [2, 4, 6, 0], [8, 5, 9, 3]]; const _numTriangle = [[59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,40,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[26,53,6,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[10,51,87,86,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,95,66,57,25,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,81,80,38,92,67,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[30,28,51,76,81,18,75,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[84,14,95,87,62,81,17,78,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[21,46,71,58,2,79,62,39,31,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,34,35,53,78,31,81,18,90,93,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,53,4,21,84,93,32,13,97,11,37,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[45,3,81,79,5,18,78,86,13,30,63,99,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[39,87,96,28,3,38,42,17,82,87,58,7,22,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,17,51,17,7,93,9,7,75,97,95,78,87,8,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,66,59,60,88,99,94,65,55,77,55,34,27,53,78,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,40,41,4,87,16,9,42,75,69,23,97,30,60,10,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[12,10,44,26,21,36,32,84,98,60,13,12,36,16,63,31,91,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[70,39,6,5,55,27,38,48,28,22,34,35,62,62,15,14,94,89,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,56,68,84,96,21,34,34,34,81,62,40,65,54,62,5,98,3,2,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[38,89,46,37,99,54,34,53,36,14,70,26,2,90,45,13,31,61,83,73,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[36,10,63,96,60,49,41,5,37,42,14,58,84,93,96,17,9,43,5,43,6,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,57,87,57,61,28,37,51,84,73,79,15,39,95,88,87,43,39,11,86,77,74,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,5,79,30,49,99,73,46,37,50,2,45,9,54,52,27,95,27,65,19,45,26,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,39,17,78,76,29,52,90,18,99,78,19,35,62,71,19,23,65,93,85,49,33,75,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[33,24,47,61,60,55,32,88,57,55,91,54,46,57,7,77,98,52,80,99,24,25,46,78,79,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,9,13,55,10,67,26,78,76,82,63,49,51,31,24,68,5,57,7,54,69,21,67,43,17,63,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[24,59,6,8,98,74,66,26,61,60,13,3,9,9,24,30,71,8,88,70,72,70,29,90,11,82,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,82,67,4,36,60,92,77,91,85,62,49,59,61,30,90,29,94,26,41,89,4,53,22,83,41,9,74,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[48,28,26,37,28,52,77,26,51,32,18,98,79,36,62,13,17,8,19,54,89,29,73,68,42,14,8,16,70,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,60,69,70,72,71,9,59,13,60,38,13,57,36,9,30,43,89,30,39,15,2,44,73,5,73,26,63,56,86,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[55,55,85,50,62,99,84,77,28,85,3,21,27,22,19,26,82,69,54,4,13,7,85,14,1,15,70,59,89,95,10,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,9,31,92,91,38,92,86,98,75,21,5,64,42,62,84,36,20,73,42,21,23,22,51,51,79,25,45,85,53,3,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[75,63,2,49,14,12,89,14,60,78,92,16,44,82,38,30,72,11,46,52,90,27,8,65,78,3,85,41,57,79,39,52,33,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,27,56,56,39,13,19,43,86,72,58,95,39,7,4,34,21,98,39,15,39,84,89,69,84,46,37,57,59,35,59,50,26,15,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[42,89,36,27,78,91,24,11,17,41,5,94,7,69,51,96,3,96,47,90,90,45,91,20,50,56,10,32,36,49,4,53,85,92,25,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,9,61,30,61,97,66,21,96,92,98,90,6,34,96,60,32,69,68,33,75,84,18,31,71,50,84,63,3,3,19,11,28,42,75,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,31,61,68,96,34,49,39,5,71,76,59,62,67,6,47,96,99,34,21,32,47,52,7,71,60,42,72,94,56,82,83,84,40,94,87,82,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,20,60,14,17,38,26,78,66,81,45,95,18,51,98,81,48,16,53,88,37,52,69,95,72,93,22,34,98,20,54,27,73,61,56,63,60,34,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[93,42,94,83,47,61,27,51,79,79,45,1,44,73,31,70,83,42,88,25,53,51,30,15,65,94,80,44,61,84,12,77,2,62,2,65,94,42,14,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,73,9,67,68,29,74,98,10,19,85,48,38,31,85,67,53,93,93,77,47,67,39,72,94,53,18,43,77,40,78,32,29,59,24,6,2,83,50,60,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,1,44,30,16,51,15,81,98,15,10,62,86,79,50,62,45,60,70,38,31,85,65,61,64,6,69,84,14,22,56,43,9,48,66,69,83,91,60,40,36,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,48,22,99,15,95,64,43,1,16,94,2,99,19,17,69,11,58,97,56,89,31,77,45,67,96,12,73,8,20,36,47,81,44,50,64,68,85,40,81,85,52,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,35,92,45,32,84,62,15,19,64,21,66,6,1,52,80,62,59,12,25,88,28,91,50,40,16,22,99,92,79,87,51,21,77,74,77,7,42,38,42,74,83,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[46,19,77,66,24,18,5,32,2,84,31,99,92,58,96,72,91,36,62,99,55,29,53,42,12,37,26,58,89,50,66,19,82,75,12,48,24,87,91,85,2,7,3,76,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[99,98,84,93,7,17,33,61,92,20,66,60,24,66,40,30,67,5,37,29,24,96,3,27,70,62,13,4,45,47,59,88,43,20,66,15,46,92,30,4,71,66,78,70,53,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,60,38,6,88,4,17,72,10,99,71,7,42,25,54,5,26,64,91,50,45,71,6,30,67,48,69,82,8,56,80,67,18,46,66,63,1,20,8,80,47,7,91,16,3,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,54,78,49,80,48,77,40,68,23,60,88,58,80,33,57,11,69,55,53,64,2,94,49,60,92,16,35,81,21,82,96,25,24,96,18,2,5,49,3,50,77,6,32,84,27,18,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[68,1,50,4,3,21,42,94,53,24,89,5,92,26,52,36,68,11,85,1,4,42,2,45,15,6,50,4,53,73,25,74,81,88,98,21,67,84,79,97,99,20,95,4,40,46,2,58,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[94,10,2,78,88,52,21,3,88,60,6,53,49,71,20,91,12,65,7,49,21,22,11,41,58,99,36,16,9,48,17,24,52,36,23,15,72,16,84,56,2,99,43,76,81,71,29,39,49,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[64,39,59,84,86,16,17,66,3,9,43,6,64,18,63,29,68,6,23,7,87,14,26,35,17,12,98,41,53,64,78,18,98,27,28,84,80,67,75,62,10,11,76,90,54,10,5,54,41,39,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[43,83,18,37,32,31,52,29,95,47,8,76,35,11,4,53,35,43,34,10,52,57,12,36,20,39,40,55,78,44,7,31,38,26,8,15,56,88,86,1,52,62,10,24,32,5,60,65,53,28,57,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,50,3,52,7,73,49,92,66,80,1,46,8,67,25,36,73,93,7,42,25,53,13,96,76,83,87,90,54,89,78,22,78,91,73,51,69,9,79,94,83,53,9,40,69,62,10,79,49,47,3,81,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,54,73,33,51,76,59,54,79,37,56,45,84,17,62,21,98,69,41,95,65,24,39,37,62,3,24,48,54,64,46,82,71,78,33,67,9,16,96,68,52,74,79,68,32,21,13,78,96,60,9,69,20,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,26,21,44,46,38,17,83,65,98,7,23,52,46,61,97,33,13,60,31,70,15,36,77,31,58,56,93,75,68,21,36,69,53,90,75,25,82,39,50,65,94,29,30,11,33,11,13,96,2,56,47,7,49,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,46,73,30,10,20,60,70,14,56,34,26,37,39,48,24,55,76,84,91,39,86,95,61,50,14,53,93,64,67,37,31,10,84,42,70,48,20,10,72,60,61,84,79,69,65,99,73,89,25,85,48,92,56,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,14,80,27,22,30,44,27,67,75,79,32,51,54,81,29,65,14,19,4,13,82,4,91,43,40,12,52,29,99,7,76,60,25,1,7,61,71,37,92,40,47,99,66,57,1,43,44,22,40,53,53,9,69,26,81,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[49,80,56,90,93,87,47,13,75,28,87,23,72,79,32,18,27,20,28,10,37,59,21,18,70,4,79,96,3,31,45,71,81,6,14,18,17,5,31,50,92,79,23,47,9,39,47,91,43,54,69,47,42,95,62,46,32,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,18,62,85,87,28,64,5,77,51,47,26,30,65,5,70,65,75,59,80,42,52,25,20,44,10,92,17,71,95,52,14,77,13,24,55,11,65,26,91,1,30,63,15,49,48,41,17,67,47,3,68,20,90,98,32,4,40,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,51,58,60,6,55,23,68,5,19,76,94,82,36,96,43,38,90,87,28,33,83,5,17,70,83,96,93,6,4,78,47,80,6,23,84,75,23,87,72,99,14,50,98,92,38,90,64,61,58,76,94,36,66,87,80,51,35,61,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[57,95,64,6,53,36,82,51,40,33,47,14,7,98,78,65,39,58,53,6,50,53,4,69,40,68,36,69,75,78,75,60,3,32,39,24,74,47,26,90,13,40,44,71,90,76,51,24,36,50,25,45,70,80,61,80,61,43,90,64,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,29,86,56,68,42,79,10,42,44,30,12,96,18,23,18,52,59,2,99,67,46,60,86,43,38,55,17,44,93,42,21,55,14,47,34,55,16,49,24,23,29,96,51,55,10,46,53,27,92,27,46,63,57,30,65,43,27,21,20,24,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[81,72,93,19,69,52,48,1,13,83,92,69,20,48,69,59,20,62,5,42,28,89,90,99,32,72,84,17,8,87,36,3,60,31,36,36,81,26,97,36,48,54,56,56,27,16,91,8,23,11,87,99,33,47,2,14,44,73,70,99,43,35,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,56,61,86,56,12,70,59,63,32,1,15,81,47,71,76,95,32,65,80,54,70,34,51,40,45,33,4,64,55,78,68,88,47,31,47,68,87,3,84,23,44,89,72,35,8,31,76,63,26,90,85,96,67,65,91,19,14,17,86,4,71,32,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,13,4,22,64,37,37,28,56,62,86,33,7,37,10,44,52,82,52,6,19,52,57,75,90,26,91,24,6,21,14,67,76,30,46,14,35,89,89,41,3,64,56,97,87,63,22,34,3,79,17,45,11,53,25,56,96,61,23,18,63,31,37,37,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[77,23,26,70,72,76,77,4,28,64,71,69,14,85,96,54,95,48,6,62,99,83,86,77,97,75,71,66,30,19,57,90,33,1,60,61,14,12,90,99,32,77,56,41,18,14,87,49,10,14,90,64,18,50,21,74,14,16,88,5,45,73,82,47,74,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[22,97,41,13,34,31,54,61,56,94,3,24,59,27,98,77,4,9,37,40,12,26,87,9,71,70,7,18,64,57,80,21,12,71,83,94,60,39,73,79,73,19,97,32,64,29,41,7,48,84,85,67,12,74,95,20,24,52,41,67,56,61,29,93,35,72,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[72,23,63,66,1,11,7,30,52,56,95,16,65,26,83,90,50,74,60,18,16,48,43,77,37,11,99,98,30,94,91,26,62,73,45,12,87,73,47,27,1,88,66,99,21,41,95,80,2,53,23,32,61,48,32,43,43,83,14,66,95,91,19,81,80,67,25,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,62,32,18,92,14,83,71,37,96,11,83,39,99,5,16,23,27,10,67,2,25,44,11,55,31,46,64,41,56,44,74,26,81,51,31,45,85,87,9,81,95,22,28,76,69,46,48,64,87,67,76,27,89,31,11,74,16,62,3,60,94,42,47,9,34,94,93,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,18,90,18,42,17,42,32,14,86,6,53,33,95,99,35,29,15,44,20,49,59,25,54,34,59,84,21,23,54,35,90,78,16,93,13,37,88,54,19,86,67,68,55,66,84,65,42,98,37,87,56,33,28,58,38,28,38,66,27,52,21,81,15,8,22,97,32,85,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,53,40,28,13,34,91,25,1,63,50,37,22,49,71,58,32,28,30,18,68,94,23,83,63,62,94,76,80,41,90,22,82,52,29,12,18,56,10,8,35,14,37,57,23,65,67,40,72,39,93,39,70,89,40,34,7,46,94,22,20,5,53,64,56,30,5,56,61,88,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[23,95,11,12,37,69,68,24,66,10,87,70,43,50,75,7,62,41,83,58,95,93,89,79,45,39,2,22,5,22,95,43,62,11,68,29,17,40,26,44,25,71,87,16,70,85,19,25,59,94,90,41,41,80,61,70,55,60,84,33,95,76,42,63,15,9,3,40,38,12,3,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,84,56,80,61,55,85,97,16,94,82,94,98,57,84,30,84,48,93,90,71,5,95,90,73,17,30,98,40,64,65,89,7,79,9,19,56,36,42,30,23,69,73,72,7,5,27,61,24,31,43,48,71,84,21,28,26,65,65,59,65,74,77,20,10,81,61,84,95,8,52,23,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[47,81,28,9,98,51,67,64,35,51,59,36,92,82,77,65,80,24,72,53,22,7,27,10,21,28,30,22,48,82,80,48,56,20,14,43,18,25,50,95,90,31,77,8,9,48,44,80,90,22,93,45,82,17,13,96,25,26,8,73,34,99,6,49,24,6,83,51,40,14,15,10,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,25,10,81,30,64,24,74,75,80,36,75,82,60,22,69,72,91,45,67,3,62,79,54,89,74,44,83,64,96,66,73,44,30,74,50,37,5,9,97,70,1,60,46,37,91,39,75,75,18,58,52,72,78,51,81,86,52,8,97,1,46,43,66,98,62,81,18,70,93,73,8,32,46,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[96,80,82,7,59,71,92,53,19,20,88,66,3,26,26,10,24,27,50,82,94,73,63,8,51,33,22,45,19,13,58,33,90,15,22,50,36,13,55,6,35,47,82,52,33,61,36,27,28,46,98,14,73,20,73,32,16,26,80,53,47,66,76,38,94,45,2,1,22,52,47,96,64,58,52,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[88,46,23,39,74,63,81,64,20,90,33,33,76,55,58,26,10,46,42,26,74,74,12,83,32,43,9,2,73,55,86,54,85,34,28,23,29,79,91,62,47,41,82,87,99,22,48,90,20,5,96,75,95,4,43,28,81,39,81,1,28,42,78,25,39,77,90,57,58,98,17,36,73,22,63,74,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[29,39,74,94,95,78,64,24,38,86,63,87,93,6,70,92,22,16,80,64,29,52,20,27,23,50,14,13,87,15,72,96,81,22,8,49,72,30,70,24,79,31,16,64,59,21,89,34,96,91,48,76,43,53,88,1,57,80,23,81,90,79,58,1,80,87,17,99,86,90,72,63,32,69,14,28,88,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,17,71,95,56,93,71,35,43,45,4,98,92,94,84,96,11,30,31,27,31,60,92,3,48,5,98,91,86,94,35,90,90,8,48,19,33,28,68,37,59,26,65,96,50,68,22,7,9,49,34,31,77,49,43,6,75,17,81,87,61,79,52,26,27,72,29,50,7,98,86,1,17,10,46,64,24,18,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[51,30,25,94,88,85,79,91,40,33,63,84,49,67,98,92,15,26,75,19,82,5,18,78,65,93,61,48,91,43,59,41,70,51,22,15,92,81,67,91,46,98,11,11,65,31,66,10,98,65,83,21,5,56,5,98,73,67,46,74,69,34,8,30,5,52,7,98,32,95,30,94,65,50,24,63,28,81,99,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[19,23,61,36,9,89,71,98,65,17,30,29,89,26,79,74,94,11,44,48,97,54,81,55,39,66,69,45,28,47,13,86,15,76,74,70,84,32,36,33,79,20,78,14,41,47,89,28,81,5,99,66,81,86,38,26,6,25,13,60,54,55,23,53,27,5,89,25,23,11,13,54,59,54,56,34,16,24,53,44,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[13,40,57,72,21,15,60,8,4,19,11,98,34,45,9,97,86,71,3,15,56,19,15,44,97,31,90,4,87,87,76,8,12,30,24,62,84,28,12,85,82,53,99,52,13,94,6,65,97,86,9,50,94,68,69,74,30,67,87,94,63,7,78,27,80,36,69,41,6,92,32,78,37,82,30,5,18,87,99,72,19,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[44,20,55,77,69,91,27,31,28,81,80,27,2,7,97,23,95,98,12,25,75,29,47,71,7,47,78,39,41,59,27,76,13,15,66,61,68,35,69,86,16,53,67,63,99,85,41,56,8,28,33,40,94,76,90,85,31,70,24,65,84,65,99,82,19,25,54,37,21,46,33,2,52,99,51,33,26,4,87,2,8,18,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,61,45,91,6,64,79,80,82,32,16,83,63,42,49,19,78,65,97,40,42,14,61,49,34,4,18,25,98,59,30,82,72,26,88,54,36,21,75,3,88,99,53,46,51,55,78,22,94,34,40,68,87,84,25,30,76,25,8,92,84,42,61,40,38,9,99,40,23,29,39,46,55,10,90,35,84,56,70,63,23,91,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,92,3,71,89,7,9,37,68,66,58,20,44,92,51,56,13,71,79,99,26,37,2,6,16,67,36,52,58,16,79,73,56,60,59,27,44,77,94,82,20,50,98,33,9,87,94,37,40,83,64,83,58,85,17,76,53,2,83,52,22,27,39,20,48,92,45,21,9,42,24,23,12,37,52,28,50,78,79,20,86,62,73,20,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,96,80,15,91,90,99,70,10,9,58,90,93,50,81,99,54,38,36,10,30,11,35,84,16,45,82,18,11,97,36,43,96,79,97,65,40,48,23,19,17,31,64,52,65,65,37,32,65,76,99,79,34,65,79,27,55,33,3,1,33,27,61,28,66,8,4,70,49,46,48,83,1,45,19,96,13,81,14,21,31,79,93,85,50,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,92,48,84,59,98,31,53,23,27,15,22,79,95,24,76,5,79,16,93,97,89,38,89,42,83,2,88,94,95,82,21,1,97,48,39,31,78,9,65,50,56,97,61,1,7,65,27,21,23,14,15,80,97,44,78,49,35,33,45,81,74,34,5,31,57,9,38,94,7,69,54,69,32,65,68,46,68,78,90,24,28,49,51,45,86,35,0,0,0,0,0,0,0,0,0,0,0,0,0],[41,63,89,76,87,31,86,9,46,14,87,82,22,29,47,16,13,10,70,72,82,95,48,64,58,43,13,75,42,69,21,12,67,13,64,85,58,23,98,9,37,76,5,22,31,12,66,50,29,99,86,72,45,25,10,28,19,6,90,43,29,31,67,79,46,25,74,14,97,35,76,37,65,46,23,82,6,22,30,76,93,66,94,17,96,13,20,72,0,0,0,0,0,0,0,0,0,0,0,0],[63,40,78,8,52,9,90,41,70,28,36,14,46,44,85,96,24,52,58,15,87,37,5,98,99,39,13,61,76,38,44,99,83,74,90,22,53,80,56,98,30,51,63,39,44,30,91,91,4,22,27,73,17,35,53,18,35,45,54,56,27,78,48,13,69,36,44,38,71,25,30,56,15,22,73,43,32,69,59,25,93,83,45,11,34,94,44,39,92,0,0,0,0,0,0,0,0,0,0,0],[12,36,56,88,13,96,16,12,55,54,11,47,19,78,17,17,68,81,77,51,42,55,99,85,66,27,81,79,93,42,65,61,69,74,14,1,18,56,12,1,58,37,91,22,42,66,83,25,19,4,96,41,25,45,18,69,96,88,36,93,10,12,98,32,44,83,83,4,72,91,4,27,73,7,34,37,71,60,59,31,1,54,54,44,96,93,83,36,4,45,0,0,0,0,0,0,0,0,0,0],[30,18,22,20,42,96,65,79,17,41,55,69,94,81,29,80,91,31,85,25,47,26,43,49,2,99,34,67,99,76,16,14,15,93,8,32,99,44,61,77,67,50,43,55,87,55,53,72,17,46,62,25,50,99,73,5,93,48,17,31,70,80,59,9,44,59,45,13,74,66,58,94,87,73,16,14,85,38,74,99,64,23,79,28,71,42,20,37,82,31,23,0,0,0,0,0,0,0,0,0],[51,96,39,65,46,71,56,13,29,68,53,86,45,33,51,49,12,91,21,21,76,85,2,17,98,15,46,12,60,21,88,30,92,83,44,59,42,50,27,88,46,86,94,73,45,54,23,24,14,10,94,21,20,34,23,51,4,83,99,75,90,63,60,16,22,33,83,70,11,32,10,50,29,30,83,46,11,5,31,17,86,42,49,1,44,63,28,60,7,78,95,40,0,0,0,0,0,0,0,0],[44,61,89,59,4,49,51,27,69,71,46,76,44,4,9,34,56,39,15,6,94,91,75,90,65,27,56,23,74,6,23,33,36,69,14,39,5,34,35,57,33,22,76,46,56,10,61,65,98,9,16,69,4,62,65,18,99,76,49,18,72,66,73,83,82,40,76,31,89,91,27,88,17,35,41,35,32,51,32,67,52,68,74,85,80,57,7,11,62,66,47,22,67,0,0,0,0,0,0,0],[65,37,19,97,26,17,16,24,24,17,50,37,64,82,24,36,32,11,68,34,69,31,32,89,79,93,96,68,49,90,14,23,4,4,67,99,81,74,70,74,36,96,68,9,64,39,88,35,54,89,96,58,66,27,88,97,32,14,6,35,78,20,71,6,85,66,57,2,58,91,72,5,29,56,73,48,86,52,9,93,22,57,79,42,12,1,31,68,17,59,63,76,7,77,0,0,0,0,0,0],[73,81,14,13,17,20,11,9,1,83,8,85,91,70,84,63,62,77,37,7,47,1,59,95,39,69,39,21,99,9,87,2,97,16,92,36,74,71,90,66,33,73,73,75,52,91,11,12,26,53,5,26,26,48,61,50,90,65,1,87,42,47,74,35,22,73,24,26,56,70,52,5,48,41,31,18,83,27,21,39,80,85,26,8,44,2,71,7,63,22,5,52,19,8,20,0,0,0,0,0],[17,25,21,11,72,93,33,49,64,23,53,82,3,13,91,65,85,2,40,5,42,31,77,42,5,36,6,54,4,58,7,76,87,83,25,57,66,12,74,33,85,37,74,32,20,69,3,97,91,68,82,44,19,14,89,28,85,85,80,53,34,87,58,98,88,78,48,65,98,40,11,57,10,67,70,81,60,79,74,72,97,59,79,47,30,20,54,80,89,91,14,5,33,36,79,39,0,0,0,0],[60,85,59,39,60,7,57,76,77,92,6,35,15,72,23,41,45,52,95,18,64,79,86,53,56,31,69,11,91,31,84,50,44,82,22,81,41,40,30,42,30,91,48,94,74,76,64,58,74,25,96,57,14,19,3,99,28,83,15,75,99,1,89,85,79,50,3,95,32,67,44,8,7,41,62,64,29,20,14,76,26,55,48,71,69,66,19,72,44,25,14,1,48,74,12,98,7,0,0,0],[64,66,84,24,18,16,27,48,20,14,47,69,30,86,48,40,23,16,61,21,51,50,26,47,35,33,91,28,78,64,43,68,4,79,51,8,19,60,52,95,6,68,46,86,35,97,27,58,4,65,30,58,99,12,12,75,91,39,50,31,42,64,70,4,46,7,98,73,98,93,37,89,77,91,64,71,64,65,66,21,78,62,81,74,42,20,83,70,73,95,78,45,92,27,34,53,71,15,0,0],[30,11,85,31,34,71,13,48,5,14,44,3,19,67,23,73,19,57,6,90,94,72,57,69,81,62,59,68,88,57,55,69,49,13,7,87,97,80,89,5,71,5,5,26,38,40,16,62,45,99,18,38,98,24,21,26,62,74,69,4,85,57,77,35,58,67,91,79,79,57,86,28,66,34,72,51,76,78,36,95,63,90,8,78,47,63,45,31,22,70,52,48,79,94,15,77,61,67,68,0],[23,33,44,81,80,92,93,75,94,88,23,61,39,76,22,3,28,94,32,6,49,65,41,34,18,23,8,47,62,60,3,63,33,13,80,52,31,54,73,43,70,26,16,69,57,87,83,31,3,93,70,81,47,95,77,44,29,68,39,51,56,59,63,7,25,70,7,77,43,53,64,3,94,42,95,39,18,1,66,21,16,97,20,50,90,16,70,10,95,69,29,6,25,61,41,26,15,59,63,35]]; --seed-contents-- ```js function maximumPathSumII(triangle) { return true; } ``` --solutions-- ```js function maximumPathSumII(triangle) { const newTriangle = []; for (let i = 0; i < trianglelength; i++) { newTrianglepush(triangle[i]slice()); } for (let i = newTrianglelength - 2; i >= 0; i--) {\nfor (let j = i; j >= 0; j--) {\nlet higherOption = 0;\nif (newTriangle[i + 1][j + 1] > newTriangle[i + 1][j]) {\nhigherOption = newTriangle[i + 1][j + 1];\n} else {\nhigherOption = newTriangle[i + 1][j];\n}\nnewTriangle[i][j] += higherOption;\n}\n}\nreturn newTriangle[0][0];\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 27200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 20306,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "ddfb4bcd38a61f00f4c37169b695787f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-86-cuboid-route.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c31000cf542c50fed5\ntitle: 'Problem 86: Cuboid route'\nchallengeType: 1\nforumTopicId: 302200\ndashedName: problem-86-cuboid-route\n--description--\nA spider, S, sits in one corner of a cuboid room, measuring 6 by 5 by 3, and a fly, F, sits in the opposite corner By travelling on the surfaces of the room the shortest \"straight line\" distance from S to F is 10 and the path is shown on the diagram However, there are up to three \"shortest\" path candidates for any given cuboid and the shortest route doesn't always have integer length It can be shown that there are exactly 2060 distinct cuboids, ignoring rotations, with integer dimensions, up to a maximum size of M by M by M, for which the shortest route has integer length when M = 100 This is the least value of M for which the number of solutions first exceeds two thousand; the number of solutions when M = 99 is 1975 Find the least value of M such that the number of solutions first exceeds n --hints--\ncuboidRoute(2000) should return a number js\nassert(typeof cuboidRoute(2000) === 'number');\ncuboidRoute(2000) should return 100 js\nassert strictEqual(cuboidRoute(2000), 100);\ncuboidRoute(25000) should return 320 js\nassert strictEqual(cuboidRoute(25000), 320);\ncuboidRoute(500000) should return 1309 js\nassert strictEqual(cuboidRoute(500000), 1309);\ncuboidRoute(1000000) should return 1818 js\nassert strictEqual(cuboidRoute(1000000), 1818);\n--seed--\n--seed-contents--\n```js\nfunction cuboidRoute(n) {\nreturn true;\n}\ncuboidRoute(2000);\n```\n--solutions--\n```js\nfunction cuboidRoute(n) {\n// Based on https://www mathblog dk/project-euler-86-shortest-path-cuboid/\nfunction getLength(a, b) {\nreturn Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-86-cuboid-route.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "27333ef27ab9a9d53afc768406e1749c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-86-cuboid-route.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of solutions first exceeds n --hints-- cuboidRoute(2000) should return a number js assert(typeof cuboidRoute(2000) === 'number'); cuboidRoute(2000) should return 100 js assert strictEqual(cuboidRoute(2000), 100); cuboidRoute(25000) should return 320 js assert strictEqual(cuboidRoute(25000), 320); cuboidRoute(500000) should return 1309 js assert strictEqual(cuboidRoute(500000), 1309); cuboidRoute(1000000) should return 1818 js assert strictEqual(cuboidRoute(1000000), 1818); --seed-- --seed-contents-- ```js function cuboidRoute(n) { return true; } cuboidRoute(2000); ``` --solutions-- ```js function cuboidRoute(n) { // Based on https://www mathblog dk/project-euler-86-shortest-path-cuboid/ function getLength(a, b) { return Mathsqrt(a ** 2 + b ** 2);\n}\nlet M = 2;\nlet counter = 0;\nwhile (counter < n) {\nM++;\nfor (let baseHeightWidth = 3; baseHeightWidth <= 2 * M; baseHeightWidth++) {\nconst pathLength = getLength(M, baseHeightWidth);\nif (Number isInteger(pathLength)) {\nif (baseHeightWidth <= M) {\ncounter += Math floor(baseHeightWidth / 2);\n} else {\ncounter += 1 + M - Math floor((baseHeightWidth + 1) / 2);\n}\n}\n}\n}\nreturn M;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-86-cuboid-route.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "61faf2df5e67102558312cfb4682a0a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-85-counting-rectangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c11000cf542c50fed4\ntitle: 'Problem 85: Counting rectangles'\nchallengeType: 1\nforumTopicId: 302199\ndashedName: problem-85-counting-rectangles\n--description--\nBy counting carefully it can be seen that a rectangular grid measuring 3 by 2 contains eighteen rectangles:\nAlthough there may not exists a rectangular grid that contains exactly n rectangles, find the area of the grid with the nearest solution --hints--\ncountingRectangles(18) should return a number js\nassert(typeof countingRectangles(18) === 'number');\ncountingRectangles(18) should return 6 js\nassert strictEqual(countingRectangles(18), 6);\ncountingRectangles(250) should return 22 js\nassert strictEqual(countingRectangles(250), 22);\ncountingRectangles(50000) should return 364 js\nassert strictEqual(countingRectangles(50000), 364);\ncountingRectangles(1000000) should return 1632 js\nassert strictEqual(countingRectangles(1000000), 1632);\ncountingRectangles(2000000) should return 2772 js\nassert strictEqual(countingRectangles(2000000), 2772);\n--seed--\n--seed-contents--\n```js\nfunction countingRectangles(n) {\nreturn true;\n}\ncountingRectangles(18);\n```\n--solutions--\n```js\nfunction countingRectangles(n) {\nfunction numberOfRectangles(h, w) {\nreturn (h * (h + 1) * w * (w + 1)) / 4;\n}\nfunction rectangleArea(h, w) {\nreturn h * w;\n}\nlet rectanglesCount = 1;\nlet maxSide = 1;\nwhile (rectanglesCount < n) {\nmaxSide++;\nrectanglesCount = numberOfRectangles(maxSide, 1);\n}\nlet bestDiff = Math abs(rectanglesCount - n);\nlet bestSize = [maxSide, 1];\nlet curHeight = maxSide - 1;\nlet curWidth = 1;\nfor (curWidth; curWidth < curHeight; curWidth++) {\nfor (curHeight; curHeight > curWidth; curHeight--) {\nrectanglesCount = numberOfRectangles(curHeight, curWidth);\nconst curDiff = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2465,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-85-counting-rectangles.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2a4e1ba36f80fa9e705d0e20aa87c2a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-85-counting-rectangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1)) / 4; } function rectangleArea(h, w) { return h * w; } let rectanglesCount = 1; let maxSide = 1; while (rectanglesCount < n) { maxSide++; rectanglesCount = numberOfRectangles(maxSide, 1); } let bestDiff = Math abs(rectanglesCount - n); let bestSize = [maxSide, 1]; let curHeight = maxSide - 1; let curWidth = 1; for (curWidth; curWidth < curHeight; curWidth++) { for (curHeight; curHeight > curWidth; curHeight--) { rectanglesCount = numberOfRectangles(curHeight, curWidth); const curDiff = Mathabs(rectanglesCount - n);\nif (curDiff < bestDiff) {\nbestDiff = curDiff;\nbestSize = [curHeight, curWidth];\n}\nif (rectanglesCount < n) {\nbreak;\n}\n}\n}\nreturn rectangleArea( bestSize);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2465,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-85-counting-rectangles.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2e3a9bc491d293d405a73dd84763c524",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-87-prime-power-triples.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c51000cf542c50fed8\ntitle: 'Problem 87: Prime power triples'\nchallengeType: 1\nforumTopicId: 302201\ndashedName: problem-87-prime-power-triples\n--description--\nThe smallest number expressible as the sum of a prime square, prime cube, and prime fourth power is 28 In fact, there are exactly four numbers below fifty that can be expressed in such a way:\n28 = 22 + 23 + 24\n33 = 32 + 23 + 24\n49 = 52 + 23 + 24\n47 = 22 + 33 + 24\nHow many numbers below n can be expressed as the sum of a prime square, prime cube, and prime fourth power --hints--\nprimePowerTriples(50) should return a number js\nassert(typeof primePowerTriples(50) === 'number');\nprimePowerTriples(50) should return 4 js\nassert strictEqual(primePowerTriples(50), 4);\nprimePowerTriples(10035) should return 684 js\nassert strictEqual(primePowerTriples(10035), 684);\nprimePowerTriples(500000) should return 18899 js\nassert strictEqual(primePowerTriples(500000), 18899);\nprimePowerTriples(5000000) should return 138932 js\nassert strictEqual(primePowerTriples(5000000), 138932);\nprimePowerTriples(50000000) should return 1097343 js\nassert strictEqual(primePowerTriples(50000000), 1097343);\n--seed--\n--seed-contents--\n```js\nfunction primePowerTriples(n) {\nreturn true;\n}\nprimePowerTriples(50);\n```\n--solutions--\n```js\nfunction primePowerTriples(n) {\nfunction getSievePrimes(max) {\nconst primes = [];\nconst primesMap = new Array(max) fill(true);\nprimesMap[0] = false;\nprimesMap[1] = false;\nfor (let i = 2; i <= max; i += 2) {\nif (primesMap[i]) {\nprimes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-87-prime-power-triples.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7525e3aa1b6d099cf793335f7b0b84b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-87-prime-power-triples.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "684); primePowerTriples(500000) should return 18899 js assert strictEqual(primePowerTriples(500000), 18899); primePowerTriples(5000000) should return 138932 js assert strictEqual(primePowerTriples(5000000), 138932); primePowerTriples(50000000) should return 1097343 js assert strictEqual(primePowerTriples(50000000), 1097343); --seed-- --seed-contents-- ```js function primePowerTriples(n) { return true; } primePowerTriples(50); ``` --solutions-- ```js function primePowerTriples(n) { function getSievePrimes(max) { const primes = []; const primesMap = new Array(max) fill(true); primesMap[0] = false; primesMap[1] = false; for (let i = 2; i <= max; i += 2) { if (primesMap[i]) { primespush(i);\nfor (let j = i * i; j <= max; j = j + i) {\nprimesMap[j] = false;\n}\n}\nif (i === 2) {\ni = 1;\n}\n}\nreturn primes;\n}\nfunction getPowersSummed(numbers, powers, limit, curSum) {\nif (curSum >= limit) {\nreturn [];\n} else if (powers length === 0) {\nreturn [curSum];\n}\nconst powersSummed = [];\nconst curPower = powers[0];\nconst powersLeft = powers slice(1);\nfor (let i = 0; i < numbers length; i++) {\nconst curNumber = numbers[i];\nconst nextSum = curSum + curNumber ** curPower;\nif (nextSum >= limit) {\nreturn powersSummed;\n}\nconst result = getPowersSummed(\nnumbers,\npowersLeft,\nlimit,\ncurSum + curNumber ** curPower\n);\npowersSummed push( result);\n}\nreturn powersSummed;\n}\nconst maximumBaseNumber = Math floor(Math sqrt(n - 2 ** 3 - 2 ** 4)) + 1;\nconst primes = getSievePrimes(maximumBaseNumber);\nconst uniqueSums = new Set(getPowersSummed(primes, [2, 3, 4], n, 0));\nreturn uniqueSums size;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-87-prime-power-triples.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1c903b636a8484794c80ac224ba5f687",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c11000cf542c50fed3\ntitle: 'Problem 84: Monopoly odds'\nchallengeType: 1\nforumTopicId: 302198\ndashedName: problem-84-monopoly-odds\n--description--\nIn the game, Monopoly, the standard board is set up in the following way:\nGO\nA1\nCC1\nA2\nT1\nR1\nB1\nCH1\nB2\nB3\nJAIL\nH2\nC1\nT2\nU1\nH1\nC2\nCH3\nC3\nR4\nR2\nG3\nD1\nCC3\nCC2\nG2\nD2\nG1\nD3\nG2J\nF3\nU2\nF2\nF1\nR3\nE3\nE2\nCH2\nE1\nFP\nA player starts on the GO square and adds the scores on two 6-sided dice to determine the number of squares they advance in a clockwise direction Without any further rules we would expect to visit each square with equal probability: 2 5% However, landing on G2J (Go To Jail), CC (community chest), and CH (chance) changes this distribution In addition to G2J, and one card from each of CC and CH, that orders the player to go directly to jail, if a player rolls three consecutive doubles, they do not advance the result of their 3rd roll Instead they proceed directly to jail At the beginning of the game, the CC and CH cards are shuffled When a player lands on CC or CH they take a card from the top of the respective pile and, after following the instructions, it is returned to the bottom of the pile There are sixteen cards in each pile, but for the purpose of this problem we are only concerned with cards that order a movement; any instruction not concerned with movement will be ignored and the player will remain on the CC/CH square Community Chest (2/16 cards):\nAdvance to GO\nGo to JAIL\nChance (10/16 cards):\nAdvance to GO\nGo to JAIL\nGo to C1\nGo to E3\nGo to H2\nGo to R1\nGo to next R (railway company)\nGo to next R\nGo to next U (utility company)\nGo back 3 squares",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "8e4b8d6f2152a3b7ba196885e79a8371",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "concerned with cards that order a movement; any instruction not concerned with movement will be ignored and the player will remain on the CC/CH square Community Chest (2/16 cards): Advance to GO Go to JAIL Chance (10/16 cards): Advance to GO Go to JAIL Go to C1 Go to E3 Go to H2 Go to R1 Go to next R (railway company) Go to next R Go to next U (utility company) Go back 3 squaresThe heart of this problem concerns the likelihood of visiting a particular square That is, the probability of finishing at that square after a roll For this reason it should be clear that, with the exception of G2J for which the probability of finishing on it is zero, the CH squares will have the lowest probabilities, as 5/8 request a movement to another square, and it is the final square that the player finishes at on each roll that we are interested in We shall make no distinction between \"Just Visiting\" and being sent to JAIL, and we shall also ignore the rule about requiring a double to \"get out of jail\", assuming that they pay to get out on their next turn By starting at GO and numbering the squares sequentially from 00 to 39 we can concatenate these two-digit numbers to produce strings that correspond with sets of squares Statistically it can be shown that the three most popular squares, in order, are JAIL (6 24%) = Square 10, E3 (3 18%) = Square 24, and GO (3 09%) = Square 00 So these three most popular squares can be listed with the six-digit modal string 102400 If, instead of using two 6-sided dice, two n-sided dice are used, find the six-digit modal string --hints--\nmonopolyOdds(8) should return a string js\nassert(typeof monopolyOdds(8) === 'string');\nmonopolyOdds(8) should return string 102400 js\nassert strictEqual(monopolyOdds(8), '102400');\nmonopolyOdds(10) should return string 100024 js\nassert strictEqual(monopolyOdds(10), '100024');\nmonopolyOdds(20) should return string 100005 js\nassert strictEqual(monopolyOdds(20), '100005');\nmonopolyOdds(4) should return string 101524 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "ffa9441ccd6ed21af01bb7faaaaae4ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "these three most popular squares can be listed with the six-digit modal string 102400 If, instead of using two 6-sided dice, two n-sided dice are used, find the six-digit modal string --hints-- monopolyOdds(8) should return a string js assert(typeof monopolyOdds(8) === 'string'); monopolyOdds(8) should return string 102400 js assert strictEqual(monopolyOdds(8), '102400'); monopolyOdds(10) should return string 100024 js assert strictEqual(monopolyOdds(10), '100024'); monopolyOdds(20) should return string 100005 js assert strictEqual(monopolyOdds(20), '100005'); monopolyOdds(4) should return string 101524 js assertstrictEqual(monopolyOdds(4), '101524');\n--seed--\n--seed-contents--\n```js\nfunction monopolyOdds(n) {\nreturn true;\n}\nmonopolyOdds(8);\n```\n--solutions--\n```js\nconst GO = 0;\nconst JAIL = 10;\nconst GO_TO_JAIL = 30;\nconst C1 = 11;\nconst E3 = 24;\nconst H2 = 39;\nconst R1 = 5;\nconst R2 = 15;\nconst R3 = 25;\nconst U1 = 12;\nconst U2 = 28;\nconst SPECIAL_CARDS = 16;\nconst GAME_SQUARES = 40;\nconst CC1 = 2;\nconst CC2 = 17;\nconst CC3 = 33;\nconst CHESTS = [CC1, CC2, CC3];\nconst chestCardsMoves = [GO, JAIL];\nconst CH1 = 7;\nconst CH2 = 22;\nconst CH3 = 36;\nconst CHANCES = [CH1, CH2, CH3];\nconst chanceCardsMoves = [GO, JAIL, C1, E3, H2, R1];\nconst chanceToRailroad = { [CH1]: R2, [CH2]: R3, [CH3]: R1 };\nconst chanceToUtility = { [CH1]: U1, [CH2]: U2, [CH3]: U1 };\nfunction multiplyMatrix(matrix1, matrix2) {\nconst multiplied = [];\nfor (let row = 0; row < matrix1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "cd2149c7dd5b64d3225c0dd6af59143a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const CHESTS = [CC1, CC2, CC3]; const chestCardsMoves = [GO, JAIL]; const CH1 = 7; const CH2 = 22; const CH3 = 36; const CHANCES = [CH1, CH2, CH3]; const chanceCardsMoves = [GO, JAIL, C1, E3, H2, R1]; const chanceToRailroad = { [CH1]: R2, [CH2]: R3, [CH3]: R1 }; const chanceToUtility = { [CH1]: U1, [CH2]: U2, [CH3]: U1 }; function multiplyMatrix(matrix1, matrix2) { const multiplied = []; for (let row = 0; row < matrix1length; row++) {\nconst newRow = [];\nfor (let col = 0; col < matrix1[row] length; col++) {\nlet newCell = 0;\nfor (let i = 0; i < matrix1[row] length; i++) {\nconst value1 = matrix1[row][i];\nconst value2 = matrix2[i][col];\nnewCell += value1 * value2;\n}\nnewRow push(newCell);\n}\nmultiplied push(newRow);\n}\nreturn multiplied;\n}\nfunction normalizeRow(row) {\nconst sum = row reduce((total, value) => total + value, 0);\nif (sum > 0) {\nfor (let j = 0; j < row length; j++) {\nconst value = row[j];\nrow[j] = value / sum;\n}\n}\n}\nfunction sortByProbability(board) {\nreturn board map((probability, squareNo) => [squareNo, probability]) sort((a, b) => a[1] - b[1])\n}\nfunction getTopThree(board) {\nreturn sortByProbability(board) slice(-3) reverse() map(([squareNo, _]) => squareNo toString() padStart(2, '0')\n) join('');\n}\nfunction didConverge(matrix1, matrix2, precision) {\nreturn matrix1 every((row, rowNo) => row every((value1, colNo) => Math abs(value1 - matrix2[rowNo][colNo]) <= precision))\n}\nfunction monopolyOdds(diceSides) {\n// Based on https://github com/ByteThisCoding/project-euler/blob/master/problems/0084/0084",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "b7e6d93c4073745bdf079b78cbf9b192",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ const value = row[j]; row[j] = value / sum; } } } function sortByProbability(board) { return board map((probability, squareNo) => [squareNo, probability]) sort((a, b) => a[1] - b[1]) } function getTopThree(board) { return sortByProbability(board) slice(-3) reverse() map(([squareNo, _]) => squareNo toString() padStart(2, '0') ) join(''); } function didConverge(matrix1, matrix2, precision) { return matrix1 every((row, rowNo) => row every((value1, colNo) => Math abs(value1 - matrix2[rowNo][colNo]) <= precision)) } function monopolyOdds(diceSides) { // Based on https://github com/ByteThisCoding/project-euler/blob/master/problems/0084/0084ts\nconst timesRolled = new Array(diceSides * 2 + 1) fill(0);\nfor (let dice1 = 1; dice1 <= diceSides; dice1++) {\nfor (let dice2 = 1; dice2 <= diceSides; dice2++) {\ntimesRolled[dice1 + dice2]++;\n}\n}\n// Transitions matrix contain probabilities of reaching each square (row values)\n// from each starting square (row no ) let transitions = [];\nfor (let startSquare = 0; startSquare < GAME_SQUARES; startSquare++) {\nconst row = new Array(GAME_SQUARES) fill(0);\nfor (let rollResult = 2; rollResult <= diceSides * 2; rollResult++) {\nconst rollChance = timesRolled[rollResult]\nconst position = (startSquare + rollResult) % GAME_SQUARES;\nif (CHANCES includes(position)) {\n// Chance cards ordering movement for (let i = 0; i < chanceCardsMoves length; i++) {\nconst nextSquare = chanceCardsMoves[i];\nrow[nextSquare] += rollChance / SPECIAL_CARDS;\n}\nrow[chanceToRailroad[position]] += 2 * rollChance / SPECIAL_CARDS;\nrow[chanceToUtility[position]] += rollChance / SPECIAL_CARDS;\nrow[position - 3] += rollChance / SPECIAL_CARDS;\n// Rest non-moving Chance cards row[position] += (SPECIAL_CARDS - chanceCardsMoves",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "e1f10a9fb984b99cbf024a414a3e0049",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "diceSides * 2; rollResult++) { const rollChance = timesRolled[rollResult] const position = (startSquare + rollResult) % GAME_SQUARES; if (CHANCES includes(position)) { // Chance cards ordering movement for (let i = 0; i < chanceCardsMoves length; i++) { const nextSquare = chanceCardsMoves[i]; row[nextSquare] += rollChance / SPECIAL_CARDS; } row[chanceToRailroad[position]] += 2 * rollChance / SPECIAL_CARDS; row[chanceToUtility[position]] += rollChance / SPECIAL_CARDS; row[position - 3] += rollChance / SPECIAL_CARDS; // Rest non-moving Chance cards row[position] += (SPECIAL_CARDS - chanceCardsMoveslength) * rollChance / SPECIAL_CARDS;\n} else if (CHESTS includes(position)) {\n// Community Chest cards ordering movement for (let i = 0; i < chestCardsMoves length; i++) {\nconst nextSquare = chestCardsMoves[i];\nrow[nextSquare] += rollChance / SPECIAL_CARDS;\n}\n// Rest non-moving Community Chest cards row[position] += (SPECIAL_CARDS - chestCardsMoves length) * rollChance / SPECIAL_CARDS\n} else if (position === GO_TO_JAIL) {\nrow[JAIL] += rollChance;\n} else {\nrow[position] += rollChance;\n}\n}\nnormalizeRow(row)\ntransitions push(row);\n}\nconst precision = 0 000001;\nfor (let i = 0; i < GAME_SQUARES; i++) {\nconst next = multiplyMatrix(transitions, transitions);\nif (didConverge(transitions, next, precision)) {\nbreak;\n}\ntransitions = next;\n}\n// All rows converge to the same values return getTopThree(transitions[0]);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "0ed58617ca2f24923f284b4821ef9db1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-88-product-sum-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c51000cf542c50fed6\ntitle: 'Problem 88: Product-sum numbers'\nchallengeType: 1\nforumTopicId: 302203\ndashedName: problem-88-product-sum-numbers\n--description--\nA natural number, N, that can be written as the sum and product of a given set of at least two natural numbers, $\\{a_1, a_2, \\ldots , a_k\\}$ is called a product-sum number: $N = a_1 + a_2 + \\cdots + a_k = a_1 × a_2 × \\cdots × a_k$ For example, 6 = 1 + 2 + 3 = 1 × 2 × 3 For a given set of size, k, we shall call the smallest N with this property a minimal product-sum number The minimal product-sum numbers for sets of size, k = 2, 3, 4, 5, and 6 are as follows k=2: 4 = 2 × 2 = 2 + 2\nk=3: 6 = 1 × 2 × 3 = 1 + 2 + 3\nk=4: 8 = 1 × 1 × 2 × 4 = 1 + 1 + 2 + 4\nk=5: 8 = 1 × 1 × 2 × 2 × 2  = 1 + 1 + 2 + 2 + 2\nk=6: 12 = 1 × 1 × 1 × 1 × 2 × 6 = 1 + 1 + 1 + 1 + 2 + 6\nHence for 2 ≤ k ≤ 6, the sum of all the minimal product-sum numbers is 4 + 6 + 8 + 12 = 30; note that 8 is only counted once in the sum In fact, as the complete set of minimal product-sum numbers for 2 ≤ k ≤ 12 is $\\{4, 6, 8, 12, 15, 16\\}$, the sum is 61 What is the sum of all the minimal product-sum numbers for 2 ≤ k ≤ limit --hints--\nproductSumNumbers(6) should return a number",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-88-product-sum-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "76c99aeedcb9bc4a621669790a722cdb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-88-product-sum-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sum of all the minimal product-sum numbers is 4 + 6 + 8 + 12 = 30; note that 8 is only counted once in the sum In fact, as the complete set of minimal product-sum numbers for 2 ≤ k ≤ 12 is $\\{4, 6, 8, 12, 15, 16\\}$, the sum is 61 What is the sum of all the minimal product-sum numbers for 2 ≤ k ≤ limit --hints-- productSumNumbers(6) should return a numberjs\nassert(typeof productSumNumbers(6) === 'number');\nproductSumNumbers(6) should return 30 js\nassert strictEqual(productSumNumbers(6), 30);\nproductSumNumbers(12) should return 61 js\nassert strictEqual(productSumNumbers(12), 61);\nproductSumNumbers(300) should return 12686 js\nassert strictEqual(productSumNumbers(300), 12686);\nproductSumNumbers(6000) should return 2125990 js\nassert strictEqual(productSumNumbers(6000), 2125990);\nproductSumNumbers(12000) should return 7587457 js\nassert strictEqual(productSumNumbers(12000), 7587457);\n--seed--\n--seed-contents--\n```js\nfunction productSumNumbers(limit) {\nreturn true;\n}\nproductSumNumbers(6);\n```\n--solutions--\n```js\nfunction productSumNumbers(limit) {\nfunction getProductSums(curProduct, curSum, factorsCount, start) {\nconst k = curProduct - curSum + factorsCount;\nif (k <= limit) {\nif (curProduct < minimalProductSums[k]) {\nminimalProductSums[k] = curProduct;\n}\nfor (let i = start; i < Math floor((limit / curProduct) * 2) + 1; i++) {\ngetProductSums(curProduct * i, curSum + i, factorsCount + 1, i);\n}\n}\n}\nconst minimalProductSums = new Array(limit + 1) fill(2 * limit);\ngetProductSums(1, 1, 1, 2);\nconst uniqueProductSums = [ new Set(minimalProductSums slice(2))];\nlet sum = 0;\nfor (let i = 0; i < uniqueProductSums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-88-product-sum-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6b45138690e2576da5b6dfb1af9c26c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-88-product-sum-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(k <= limit) { if (curProduct < minimalProductSums[k]) { minimalProductSums[k] = curProduct; } for (let i = start; i < Math floor((limit / curProduct) * 2) + 1; i++) { getProductSums(curProduct * i, curSum + i, factorsCount + 1, i); } } } const minimalProductSums = new Array(limit + 1) fill(2 * limit); getProductSums(1, 1, 1, 2); const uniqueProductSums = [ new Set(minimalProductSums slice(2))]; let sum = 0; for (let i = 0; i < uniqueProductSumslength; i++) {\nsum += uniqueProductSums[i];\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-88-product-sum-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 172,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a60adefd2e5a5f65367fbd1f9f1401e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-83-path-sum-four-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3bf1000cf542c50fed2\ntitle: 'Problem 83: Path sum: four ways'\nchallengeType: 1\nforumTopicId: 302197\ndashedName: problem-83-path-sum-four-ways\n--description--\nNote: This problem is a significantly more challenging version of Problem 81 In the 5 by 5 matrix below, the minimal path sum from the top left to the bottom right, by moving left, right, up, and down, is indicated in bold red and is equal to 2297 $$\\begin{pmatrix}\n\\color{red}{131} & 673 & \\color{red}{234} & \\color{red}{103} & \\color{red}{18}\\\\\n\\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & \\color{red}{150}\\\\\n630 & 803 & 746 & \\color{red}{422} & \\color{red}{111}\\\\\n537 & 699 & 497 & \\color{red}{121} & 956\\\\\n805 & 732 & 524 & \\color{red}{37} & \\color{red}{331}\n\\end{pmatrix}$$\nFind the minimal path sum from the top left to the bottom right by moving left, right, up, and down in matrix, a 2D array representing a matrix The maximum matrix size used in tests will be 80 by 80 --hints--\npathSumFourWays(testMatrix1) should return a number js\nassert(typeof pathSumFourWays(_testMatrix1) === 'number');\npathSumFourWays(testMatrix1) should return 2297 js\nassert strictEqual(pathSumFourWays(_testMatrix1), 2297);\npathSumFourWays(testMatrix2) should return 425185 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 35153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-83-path-sum-four-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 404,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f84d19123932f66ee54c43b5c899c443",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-83-path-sum-four-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "956\\\\ 805 & 732 & 524 & \\color{red}{37} & \\color{red}{331} \\end{pmatrix}$$ Find the minimal path sum from the top left to the bottom right by moving left, right, up, and down in matrix, a 2D array representing a matrix The maximum matrix size used in tests will be 80 by 80 --hints-- pathSumFourWays(testMatrix1) should return a number js assert(typeof pathSumFourWays(_testMatrix1) === 'number'); pathSumFourWays(testMatrix1) should return 2297 js assert strictEqual(pathSumFourWays(_testMatrix1), 2297); pathSumFourWays(testMatrix2) should return 425185 js assertstrictEqual(pathSumFourWays(_testMatrix2), 425185);\n--seed--\n--after-user-code--\njs\nconst _testMatrix1 = [\n[131, 673, 234, 103, 18],\n[201, 96, 342, 965, 150],\n[630, 803, 746, 422, 111],\n[537, 699, 497, 121, 956],\n[805, 732, 524, 37, 331]\n];\nconst _testMatrix2 = [\n[4445,2697,5115,718,2209,2212,654,4348,3079,6821,7668,3276,8874,4190,3785,2752,9473,7817,9137,496,7338,3434,7152,4355,4552,7917,7827,2460,2350,691,3514,5880,3145,7633,7199,3783,5066,7487,3285,1084,8985,760,872,8609,8051,1134,9536,5750,9716,9371,7619,5617,275,9721,2997,2698,1887,8825,6372,3014,2113,7122,7050,6775,5948,2758,1219,3539,348,7989,2735,9862,1263,8089,6401,9462,3168,2758,3748,5870],\n[1096,20,1318,7586,5167,2642,1443,5741,7621,7030,5526,4244,2348,4641,9827,2448,6918,5883,3737,300,7116,6531,567,5997,3971,6623,820,6148,3287,1874,7981,8424,7672,7575,6797,6717,1078,5008,4051,8795,5820,346,1851,6463,2117,6058,3407,8211,117,4822,1317,4377,4434,5925,8341,4800,1175,4173,690,8978,7470,1295,3799,8724,3509,9849,618,3320,7068,9633,2384,7175,544,6583,1908,9983,481,4187,9353,9377],\n[9607,7385,521,6084,1364,8983,7623,1585,6935,8551,2574,8267,4781,3834,2764,2084,2669,4656,9343,7709,2203,9328,8004,6192,5856,3555,2260,5118,6504,1839,9227,1259,9451,1388,7909,5733,6968,8519,9973,1663,5315,7571,3035,4325,4283,2304,6438,3815,9213,9806,9536,196,5542,6907,2475,1159,5820,9075,9470,2179,9248,1828,4592,9167,3713,4640,47,3637,309,7344,6955,346,378,9044,8635,7466,5036,9515,6385,9230],\n[7206,3114,7760,1094,6150,5182,7358,7387,4497,955,101,1478,7777,6966,7010,8417,6453,4955,3496,107,449,8271,131,2948,6185,784,5937,8001,6104,8282,4165,3642,710,2390,575,715,3089,6964,4217,192,5949,7006,715,3328,1152,66,8044,4319,1735,146,4818,5456,6451,4113,1063,4781,6799,602,1504,6245,6550,1417,1343,2363,3785,5448,4545,9371,5420,5068,4613,4882,4241,5043,7873,8042,8434,3939,9256,2187],\n[3620,8024,577,9997,7377,7682,1314,1158,6282,6310,1896,2509,5436,1732,9480,706,496,101,6232,7375,2207,2306,110,6772,3433,2878,8140,5933,8688,1399,2210,7332,6172,6403,7333,4044,2291,1790,2446,7390,8698,5723,3678,7104,1825,2040,140,3982,4905,4160,2200,5041,2512,1488,2268,1175,7588,8321,8078,7312,977,5257,8465,5068,3453,3096,1651,7906,253,9250,6021,8791,8109,6651,3412,345,4778,5152,4883,7505],\n[1074,5438,9008,2679,5397,5429,2652,3403,770,9188,4248,2493,4361,8327,9587,707,9525,5913,93,1899,328,2876,3604,673,8576,6908,7659,2544,3359,3883,5273,6587,3065,1749,3223,604,9925,6941,2823,8767,7039,3290,3214,1787,7904,3421,7137,9560,8451,2669,9219,6332,1576,5477,6755,8348,4164,4307,2984,4012,6629,1044,2874,6541,4942,903,1404,9125,5160,8836,4345,2581,460,8438,1538,5507,668,3352,2678,6942],\n[4295,1176,5596,1521,3061,9868,7037,7129,8933,6659,5947,5063,3653,9447,9245,2679,767,714,116,8558,163,3927,8779,158,5093,2447,5782,3967,1716,931,7772,8164,1117,9244,5783,7776,3846,8862,6014,2330,6947,1777,3112,6008,3491,1906,5952,314,4602,8994,5919,9214,3995,5026,7688,6809,5003,3128,2509,7477,110,8971,3982,8539,2980,4689,6343,5411,2992,5270,5247,9260,2269,7474,1042,7162,5206,1232,4556,4757],\n[510,3556,5377,1406,5721,4946,2635,7847,4251,8293,8281,6351,4912,287,2870,3380,3948,5322,3840,4738,9563,1906,6298,3234,8959,1562,6297,8835,7861,239,6618,1322,2553,2213,5053,5446,4402,6500,5182,8585,6900,5756,9661,903,5186,7687,5998,7997,8081,8955,4835,6069,2621,1581,732,9564,1082,1853,5442,1342,520,1737,3703,5321,4793,2776,1508,1647,9101,2499,6891,4336,7012,3329,3212,1442,9993,3988,4930,7706],\n[9444,3401,5891,9716,1228,7107,109,3563,2700,6161,5039,4992,2242,8541,7372,2067,1294,3058,1306,320,8881,5756,9326,411,8650,8824,5495,8282,8397,2000,1228,7817,2099,6473,3571,5994,4447,1299,5991,543,7874,2297,1651,101,2093,3463,9189,6872,6118,872,1008,1779,2805,9084,4048,2123,5877,55,3075,1737,9459,4535,6453,3644,108,5982,4437,5213,1340,6967,9943,5815,669,8074,1838,6979,9132,9315,715,5048],\n[3327,4030,7177,6336,9933,5296,2621,4785,2755,4832,2512,2118,2244,4407,2170,499,7532,9742,5051,7687,970,6924,3527,4694,5145,1306,2165,5940,2425,8910,3513,1909,6983,346,6377,4304,9330,7203,6605,3709,3346,970,369,9737,5811,4427,9939,3693,8436,5566,1977,3728,2399,3985,8303,2492,5366,9802,9193,7296,1033,5060,9144,2766,1151,7629,5169,5995,58,7619,7565,4208,1713,6279,3209,4908,9224,7409,1325,8540],\n[6882,1265,1775,3648,4690,959,5837,4520,5394,1378,9485,1360,4018,578,9174,2932,9890,3696,116,1723,1178,9355,7063,1594,1918,8574,7594,7942,1547,6166,7888,354,6932,4651,1010,7759,6905,661,7689,6092,9292,3845,9605,8443,443,8275,5163,7720,7265,6356,7779,1798,1754,5225,6661,1180,8024,5666,88,9153,1840,3508,1193,4445,2648,3538,6243,6375,8107,5902,5423,2520,1122,5015,6113,8859,9370,966,8673,2442],\n[7338,3423,4723,6533,848,8041,7921,8277,4094,5368,7252,8852,9166,2250,2801,6125,8093,5738,4038,9808,7359,9494,601,9116,4946,2702,5573,2921,9862,1462,1269,2410,4171,2709,7508,6241,7522,615,2407,8200,4189,5492,5649,7353,2590,5203,4274,710,7329,9063,956,8371,3722,4253,4785,1194,4828,4717,4548,940,983,2575,4511,2938,1827,2027,2700,1236,841,5760,1680,6260,2373,3851,1841,4968,1172,5179,7175,3509],\n[4420,1327,3560,2376,6260,2988,9537,4064,4829,8872,9598,3228,1792,7118,9962,9336,4368,9189,6857,1829,9863,6287,7303,7769,2707,8257,2391,2009,3975,4993,3068,9835,3427,341,8412,2134,4034,8511,6421,3041,9012,2983,7289,100,1355,7904,9186,6920,5856,2008,6545,8331,3655,5011,839,8041,9255,6524,3862,8788,62,7455,3513,5003,8413,3918,2076,7960,6108,3638,6999,3436,1441,4858,4181,1866,8731,7745,3744,1000],\n[356,8296,8325,1058,1277,4743,3850,2388,6079,6462,2815,5620,8495,5378,75,4324,3441,9870,1113,165,1544,1179,2834,562,6176,2313,6836,8839,2986,9454,5199,6888,1927,5866,8760,320,1792,8296,7898,6121,7241,5886,5814,2815,8336,1576,4314,3109,2572,6011,2086,9061,9403,3947,5487,9731,7281,3159,1819,1334,3181,5844,5114,9898,4634,2531,4412,6430,4262,8482,4546,4555,6804,2607,9421,686,8649,8860,7794,6672],\n[9870,152,1558,4963,8750,4754,6521,6256,8818,5208,5691,9659,8377,9725,5050,5343,2539,6101,1844,9700,7750,8114,5357,3001,8830,4438,199,9545,8496,43,2078,327,9397,106,6090,8181,8646,6414,7499,5450,4850,6273,5014,4131,7639,3913,6571,8534,9703,4391,7618,445,1320,5,1894,6771,7383,9191,4708,9706,6939,7937,8726,9382,5216,3685,2247,9029,8154,1738,9984,2626,9438,4167,6351,5060,29,1218,1239,4785],\n[192,5213,8297,8974,4032,6966,5717,1179,6523,4679,9513,1481,3041,5355,9303,9154,1389,8702,6589,7818,6336,3539,5538,3094,6646,6702,6266,2759,4608,4452,617,9406,8064,6379,444,5602,4950,1810,8391,1536,316,8714,1178,5182,5863,5110,5372,4954,1978,2971,5680,4863,2255,4630,5723,2168,538,1692,1319,7540,440,6430,6266,7712,7385,5702,620,641,3136,7350,1478,3155,2820,9109,6261,1122,4470,14,8493,2095],\n[1046,4301,6082,474,4974,7822,2102,5161,5172,6946,8074,9716,6586,9962,9749,5015,2217,995,5388,4402,7652,6399,6539,1349,8101,3677,1328,9612,7922,2879,231,5887,2655,508,4357,4964,3554,5930,6236,7384,4614,280,3093,9600,2110,7863,2631,6626,6620,68,1311,7198,7561,1768,5139,1431,221,230,2940,968,5283,6517,2146,1646,869,9402,7068,8645,7058,1765,9690,4152,2926,9504,2939,7504,6074,2944,6470,7859],\n[4659,736,4951,9344,1927,6271,8837,8711,3241,6579,7660,5499,5616,3743,5801,4682,9748,8796,779,1833,4549,8138,4026,775,4170,2432,4174,3741,7540,8017,2833,4027,396,811,2871,1150,9809,2719,9199,8504,1224,540,2051,3519,7982,7367,2761,308,3358,6505,2050,4836,5090,7864,805,2566,2409,6876,3361,8622,5572,5895,3280,441,7893,8105,1634,2929,274,3926,7786,6123,8233,9921,2674,5340,1445,203,4585,3837],\n[5759,338,7444,7968,7742,3755,1591,4839,1705,650,7061,2461,9230,9391,9373,2413,1213,431,7801,4994,2380,2703,6161,6878,8331,2538,6093,1275,5065,5062,2839,582,1014,8109,3525,1544,1569,8622,7944,2905,6120,1564,1839,5570,7579,1318,2677,5257,4418,5601,7935,7656,5192,1864,5886,6083,5580,6202,8869,1636,7907,4759,9082,5854,3185,7631,6854,5872,5632,5280,1431,2077,9717,7431,4256,8261,9680,4487,4752,4286],\n[1571,1428,8599,1230,7772,4221,8523,9049,4042,8726,7567,6736,9033,2104,4879,4967,6334,6716,3994,1269,8995,6539,3610,7667,6560,6065,874,848,4597,1711,7161,4811,6734,5723,6356,6026,9183,2586,5636,1092,7779,7923,8747,6887,7505,9909,1792,3233,4526,3176,1508,8043,720,5212,6046,4988,709,5277,8256,3642,1391,5803,1468,2145,3970,6301,7767,2359,8487,9771,8785,7520,856,1605,8972,2402,2386,991,1383,5963],\n[1822,4824,5957,6511,9868,4113,301,9353,6228,2881,2966,6956,9124,9574,9233,1601,7340,973,9396,540,4747,8590,9535,3650,7333,7583,4806,3593,2738,8157,5215,8472,2284,9473,3906,6982,5505,6053,7936,6074,7179,6688,1564,1103,6860,5839,2022,8490,910,7551,7805,881,7024,1855,9448,4790,1274,3672,2810,774,7623,4223,4850,6071,9975,4935,1915,9771,6690,3846,517,463,7624,4511,614,6394,3661,7409,1395,8127],\n[8738,3850,9555,3695,4383,2378,87,6256,6740,7682,9546,4255,6105,2000,1851,4073,8957,9022,6547,5189,2487,303,9602,7833,1628,4163,6678,3144,8589,7096,8913,5823,4890,7679,1212,9294,5884,2972,3012,3359,7794,7428,1579,4350,7246,4301,7779,7790,3294,9547,4367,3549,1958,8237,6758,3497,3250,3456,6318,1663,708,7714,6143,6890,3428,6853,9334,7992,591,6449,9786,1412,8500,722,5468,1371,108,3939,4199,2535],\n[7047,4323,1934,5163,4166,461,3544,2767,6554,203,6098,2265,9078,2075,4644,6641,8412,9183,487,101,7566,5622,1975,5726,2920,5374,7779,5631,3753,3725,2672,3621,4280,1162,5812,345,8173,9785,1525,955,5603,2215,2580,5261,2765,2990,5979,389,3907,2484,1232,5933,5871,3304,1138,1616,5114,9199,5072,7442,7245,6472,4760,6359,9053,7876,2564,9404,3043,9026,2261,3374,4460,7306,2326,966,828,3274,1712,3446],\n[3975,4565,8131,5800,4570,2306,8838,4392,9147,11,3911,7118,9645,4994,2028,6062,5431,2279,8752,2658,7836,994,7316,5336,7185,3289,1898,9689,2331,5737,3403,1124,2679,3241,7748,16,2724,5441,6640,9368,9081,5618,858,4969,17,2103,6035,8043,7475,2181,939,415,1617,8500,8253,2155,7843,7974,7859,1746,6336,3193,2617,8736,4079,6324,6645,8891,9396,5522,6103,1857,8979,3835,2475,1310,7422,610,8345,7615],\n[9248,5397,5686,2988,3446,4359,6634,9141,497,9176,6773,7448,1907,8454,916,1596,2241,1626,1384,2741,3649,5362,8791,7170,2903,2475,5325,6451,924,3328,522,90,4813,9737,9557,691,2388,1383,4021,1609,9206,4707,5200,7107,8104,4333,9860,5013,1224,6959,8527,1877,4545,7772,6268,621,4915,9349,5970,706,9583,3071,4127,780,8231,3017,9114,3836,7503,2383,1977,4870,8035,2379,9704,1037,3992,3642,1016,4303],\n[5093,138,4639,6609,1146,5565,95,7521,9077,2272,974,4388,2465,2650,722,4998,3567,3047,921,2736,7855,173,2065,4238,1048,5,6847,9548,8632,9194,5942,4777,7910,8971,6279,7253,2516,1555,1833,3184,9453,9053,6897,7808,8629,4877,1871,8055,4881,7639,1537,7701,2508,7564,5845,5023,2304,5396,3193,2955,1088,3801,6203,1748,3737,1276,13,4120,7715,8552,3047,2921,106,7508,304,1280,7140,2567,9135,5266],\n[6237,4607,7527,9047,522,7371,4883,2540,5867,6366,5301,1570,421,276,3361,527,6637,4861,2401,7522,5808,9371,5298,2045,5096,5447,7755,5115,7060,8529,4078,1943,1697,1764,5453,7085,960,2405,739,2100,5800,728,9737,5704,5693,1431,8979,6428,673,7540,6,7773,5857,6823,150,5869,8486,684,5816,9626,7451,5579,8260,3397,5322,6920,1879,2127,2884,5478,4977,9016,6165,6292,3062,5671,5968,78,4619,4763],\n[9905,7127,9390,5185,6923,3721,9164,9705,4341,1031,1046,5127,7376,6528,3248,4941,1178,7889,3364,4486,5358,9402,9158,8600,1025,874,1839,1783,309,9030,1843,845,8398,1433,7118,70,8071,2877,3904,8866,6722,4299,10,1929,5897,4188,600,1889,3325,2485,6473,4474,7444,6992,4846,6166,4441,2283,2629,4352,7775,1101,2214,9985,215,8270,9750,2740,8361,7103,5930,8664,9690,8302,9267,344,2077,1372,1880,9550],\n[5825,8517,7769,2405,8204,1060,3603,7025,478,8334,1997,3692,7433,9101,7294,7498,9415,5452,3850,3508,6857,9213,6807,4412,7310,854,5384,686,4978,892,8651,3241,2743,3801,3813,8588,6701,4416,6990,6490,3197,6838,6503,114,8343,5844,8646,8694,65,791,5979,2687,2621,2019,8097,1423,3644,9764,4921,3266,3662,5561,2476,8271,8138,6147,1168,3340,1998,9874,6572,9873,6659,5609,2711,3931,9567,4143,7833,8887],\n[6223,2099,2700,589,4716,8333,1362,5007,2753,2848,4441,8397,7192,8191,4916,9955,6076,3370,6396,6971,3156,248,3911,2488,4930,2458,7183,5455,170,6809,6417,3390,1956,7188,577,7526,2203,968,8164,479,8699,7915,507,6393,4632,1597,7534,3604,618,3280,6061,9793,9238,8347,568,9645,2070,5198,6482,5000,9212,6655,5961,7513,1323,3872,6170,3812,4146,2736,67,3151,5548,2781,9679,7564,5043,8587,1893,4531],\n[5826,3690,6724,2121,9308,6986,8106,6659,2142,1642,7170,2877,5757,6494,8026,6571,8387,9961,6043,9758,9607,6450,8631,8334,7359,5256,8523,2225,7487,1977,9555,8048,5763,2414,4948,4265,2427,8978,8088,8841,9208,9601,5810,9398,8866,9138,4176,5875,7212,3272,6759,5678,7649,4922,5422,1343,8197,3154,3600,687,1028,4579,2084,9467,4492,7262,7296,6538,7657,7134,2077,1505,7332,6890,8964,4879,7603,7400,5973,739],\n[1861,1613,4879,1884,7334,966,2000,7489,2123,4287,1472,3263,4726,9203,1040,4103,6075,6049,330,9253,4062,4268,1635,9960,577,1320,3195,9628,1030,4092,4979,6474,6393,2799,6967,8687,7724,7392,9927,2085,3200,6466,8702,265,7646,8665,7986,7266,4574,6587,612,2724,704,3191,8323,9523,3002,704,5064,3960,8209,2027,2758,8393,4875,4641,9584,6401,7883,7014,768,443,5490,7506,1852,2005,8850,5776,4487,4269],\n[4052,6687,4705,7260,6645,6715,3706,5504,8672,2853,1136,8187,8203,4016,871,1809,1366,4952,9294,5339,6872,2645,6083,7874,3056,5218,7485,8796,7401,3348,2103,426,8572,4163,9171,3176,948,7654,9344,3217,1650,5580,7971,2622,76,2874,880,2034,9929,1546,2659,5811,3754,7096,7436,9694,9960,7415,2164,953,2360,4194,2397,1047,2196,6827,575,784,2675,8821,6802,7972,5996,6699,2134,7577,2887,1412,4349,4380],\n[4629,2234,6240,8132,7592,3181,6389,1214,266,1910,2451,8784,2790,1127,6932,1447,8986,2492,5476,397,889,3027,7641,5083,5776,4022,185,3364,5701,2442,2840,4160,9525,4828,6602,2614,7447,3711,4505,7745,8034,6514,4907,2605,7753,6958,7270,6936,3006,8968,439,2326,4652,3085,3425,9863,5049,5361,8688,297,7580,8777,7916,6687,8683,7141,306,9569,2384,1500,3346,4601,7329,9040,6097,2727,6314,4501,4974,2829],\n[8316,4072,2025,6884,3027,1808,5714,7624,7880,8528,4205,8686,7587,3230,1139,7273,6163,6986,3914,9309,1464,9359,4474,7095,2212,7302,2583,9462,7532,6567,1606,4436,8981,5612,6796,4385,5076,2007,6072,3678,8331,1338,3299,8845,4783,8613,4071,1232,6028,2176,3990,2148,3748,103,9453,538,6745,9110,926,3125,473,5970,8728,7072,9062,1404,1317,5139,9862,6496,6062,3338,464,1600,2532,1088,8232,7739,8274,3873],\n[2341,523,7096,8397,8301,6541,9844,244,4993,2280,7689,4025,4196,5522,7904,6048,2623,9258,2149,9461,6448,8087,7245,1917,8340,7127,8466,5725,6996,3421,5313,512,9164,9837,9794,8369,4185,1488,7210,1524,1016,4620,9435,2478,7765,8035,697,6677,3724,6988,5853,7662,3895,9593,1185,4727,6025,5734,7665,3070,138,8469,6748,6459,561,7935,8646,2378,462,7755,3115,9690,8877,3946,2728,8793,244,6323,8666,4271],\n[6430,2406,8994,56,1267,3826,9443,7079,7579,5232,6691,3435,6718,5698,4144,7028,592,2627,217,734,6194,8156,9118,58,2640,8069,4127,3285,694,3197,3377,4143,4802,3324,8134,6953,7625,3598,3584,4289,7065,3434,2106,7132,5802,7920,9060,7531,3321,1725,1067,3751,444,5503,6785,7937,6365,4803,198,6266,8177,1470,6390,1606,2904,7555,9834,8667,2033,1723,5167,1666,8546,8152,473,4475,6451,7947,3062,3281],\n[2810,3042,7759,1741,2275,2609,7676,8640,4117,1958,7500,8048,1757,3954,9270,1971,4796,2912,660,5511,3553,1012,5757,4525,6084,7198,8352,5775,7726,8591,7710,9589,3122,4392,6856,5016,749,2285,3356,7482,9956,7348,2599,8944,495,3462,3578,551,4543,7207,7169,7796,1247,4278,6916,8176,3742,8385,2310,1345,8692,2667,4568,1770,8319,3585,4920,3890,4928,7343,5385,9772,7947,8786,2056,9266,3454,2807,877,2660],\n[6206,8252,5928,5837,4177,4333,207,7934,5581,9526,8906,1498,8411,2984,5198,5134,2464,8435,8514,8674,3876,599,5327,826,2152,4084,2433,9327,9697,4800,2728,3608,3849,3861,3498,9943,1407,3991,7191,9110,5666,8434,4704,6545,5944,2357,1163,4995,9619,6754,4200,9682,6654,4862,4744,5953,6632,1054,293,9439,8286,2255,696,8709,1533,1844,6441,430,1999,6063,9431,7018,8057,2920,6266,6799,356,3597,4024,6665],\n[3847,6356,8541,7225,2325,2946,5199,469,5450,7508,2197,9915,8284,7983,6341,3276,3321,16,1321,7608,5015,3362,8491,6968,6818,797,156,2575,706,9516,5344,5457,9210,5051,8099,1617,9951,7663,8253,9683,2670,1261,4710,1068,8753,4799,1228,2621,3275,6188,4699,1791,9518,8701,5932,4275,6011,9877,2933,4182,6059,2930,6687,6682,9771,654,9437,3169,8596,1827,5471,8909,2352,123,4394,3208,8756,5513,6917,2056],\n[5458,8173,3138,3290,4570,4892,3317,4251,9699,7973,1163,1935,5477,6648,9614,5655,9592,975,9118,2194,7322,8248,8413,3462,8560,1907,7810,6650,7355,2939,4973,6894,3933,3784,3200,2419,9234,4747,2208,2207,1945,2899,1407,6145,8023,3484,5688,7686,2737,3828,3704,9004,5190,9740,8643,8650,5358,4426,1522,1707,3613,9887,6956,2447,2762,833,1449,9489,2573,1080,4167,3456,6809,2466,227,7125,2759,6250,6472,8089],\n[3266,7025,9756,3914,1265,9116,7723,9788,6805,5493,2092,8688,6592,9173,4431,4028,6007,7131,4446,4815,3648,6701,759,3312,8355,4485,4187,5188,8746,7759,3528,2177,5243,8379,3838,7233,4607,9187,7216,2190,6967,2920,6082,7910,5354,3609,8958,6949,7731,494,8753,8707,1523,4426,3543,7085,647,6771,9847,646,5049,824,8417,5260,2730,5702,2513,9275,4279,2767,8684,1165,9903,4518,55,9682,8963,6005,2102,6523],\n[1998,8731,936,1479,5259,7064,4085,91,7745,7136,3773,3810,730,8255,2705,2653,9790,6807,2342,355,9344,2668,3690,2028,9679,8102,574,4318,6481,9175,5423,8062,2867,9657,7553,3442,3920,7430,3945,7639,3714,3392,2525,4995,4850,2867,7951,9667,486,9506,9888,781,8866,1702,3795,90,356,1483,4200,2131,6969,5931,486,6880,4404,1084,5169,4910,6567,8335,4686,5043,2614,3352,2667,4513,6472,7471,5720,1616],\n[8878,1613,1716,868,1906,2681,564,665,5995,2474,7496,3432,9491,9087,8850,8287,669,823,347,6194,2264,2592,7871,7616,8508,4827,760,2676,4660,4881,7572,3811,9032,939,4384,929,7525,8419,5556,9063,662,8887,7026,8534,3111,1454,2082,7598,5726,6687,9647,7608,73,3014,5063,670,5461,5631,3367,9796,8475,7908,5073,1565,5008,5295,4457,1274,4788,1728,338,600,8415,8535,9351,7750,6887,5845,1741,125],\n[3637,6489,9634,9464,9055,2413,7824,9517,7532,3577,7050,6186,6980,9365,9782,191,870,2497,8498,2218,2757,5420,6468,586,3320,9230,1034,1393,9886,5072,9391,1178,8464,8042,6869,2075,8275,3601,7715,9470,8786,6475,8373,2159,9237,2066,3264,5000,679,355,3069,4073,494,2308,5512,4334,9438,8786,8637,9774,1169,1949,6594,6072,4270,9158,7916,5752,6794,9391,6301,5842,3285,2141,3898,8027,4310,8821,7079,1307],\n[8497,6681,4732,7151,7060,5204,9030,7157,833,5014,8723,3207,9796,9286,4913,119,5118,7650,9335,809,3675,2597,5144,3945,5090,8384,187,4102,1260,2445,2792,4422,8389,9290,50,1765,1521,6921,8586,4368,1565,5727,7855,2003,4834,9897,5911,8630,5070,1330,7692,7557,7980,6028,5805,9090,8265,3019,3802,698,9149,5748,1965,9658,4417,5994,5584,8226,2937,272,5743,1278,5698,8736,2595,6475,5342,6596,1149,6920],\n[8188,8009,9546,6310,8772,2500,9846,6592,6872,3857,1307,8125,7042,1544,6159,2330,643,4604,7899,6848,371,8067,2062,3200,7295,1857,9505,6936,384,2193,2190,301,8535,5503,1462,7380,5114,4824,8833,1763,4974,8711,9262,6698,3999,2645,6937,7747,1128,2933,3556,7943,2885,3122,9105,5447,418,2899,5148,3699,9021,9501,597,4084,175,1621,1,1079,6067,5812,4326,9914,6633,5394,4233,6728,9084,1864,5863,1225],\n[9935,8793,9117,1825,9542,8246,8437,3331,9128,9675,6086,7075,319,1334,7932,3583,7167,4178,1726,7720,695,8277,7887,6359,5912,1719,2780,8529,1359,2013,4498,8072,1129,9998,1147,8804,9405,6255,1619,2165,7491,1,8882,7378,3337,503,5758,4109,3577,985,3200,7615,8058,5032,1080,6410,6873,5496,1466,2412,9885,5904,4406,3605,8770,4361,6205,9193,1537,9959,214,7260,9566,1685,100,4920,7138,9819,5637,976],\n[3466,9854,985,1078,7222,8888,5466,5379,3578,4540,6853,8690,3728,6351,7147,3134,6921,9692,857,3307,4998,2172,5783,3931,9417,2541,6299,13,787,2099,9131,9494,896,8600,1643,8419,7248,2660,2609,8579,91,6663,5506,7675,1947,6165,4286,1972,9645,3805,1663,1456,8853,5705,9889,7489,1107,383,4044,2969,3343,152,7805,4980,9929,5033,1737,9953,7197,9158,4071,1324,473,9676,3984,9680,3606,8160,7384,5432],\n[1005,4512,5186,3953,2164,3372,4097,3247,8697,3022,9896,4101,3871,6791,3219,2742,4630,6967,7829,5991,6134,1197,1414,8923,8787,1394,8852,5019,7768,5147,8004,8825,5062,9625,7988,1110,3992,7984,9966,6516,6251,8270,421,3723,1432,4830,6935,8095,9059,2214,6483,6846,3120,1587,6201,6691,9096,9627,6671,4002,3495,9939,7708,7465,5879,6959,6634,3241,3401,2355,9061,2611,7830,3941,2177,2146,5089,7079,519,6351],\n[7280,8586,4261,2831,7217,3141,9994,9940,5462,2189,4005,6942,9848,5350,8060,6665,7519,4324,7684,657,9453,9296,2944,6843,7499,7847,1728,9681,3906,6353,5529,2822,3355,3897,7724,4257,7489,8672,4356,3983,1948,6892,7415,4153,5893,4190,621,1736,4045,9532,7701,3671,1211,1622,3176,4524,9317,7800,5638,6644,6943,5463,3531,2821,1347,5958,3436,1438,2999,994,850,4131,2616,1549,3465,5946,690,9273,6954,7991],\n[9517,399,3249,2596,7736,2142,1322,968,7350,1614,468,3346,3265,7222,6086,1661,5317,2582,7959,4685,2807,2917,1037,5698,1529,3972,8716,2634,3301,3412,8621,743,8001,4734,888,7744,8092,3671,8941,1487,5658,7099,2781,99,1932,4443,4756,4652,9328,1581,7855,4312,5976,7255,6480,3996,2748,1973,9731,4530,2790,9417,7186,5303,3557,351,7182,9428,1342,9020,7599,1392,8304,2070,9138,7215,2008,9937,1106,7110],\n[7444,769,9688,632,1571,6820,8743,4338,337,3366,3073,1946,8219,104,4210,6986,249,5061,8693,7960,6546,1004,8857,5997,9352,4338,6105,5008,2556,6518,6694,4345,3727,7956,20,3954,8652,4424,9387,2035,8358,5962,5304,5194,8650,8282,1256,1103,2138,6679,1985,3653,2770,2433,4278,615,2863,1715,242,3790,2636,6998,3088,1671,2239,957,5411,4595,6282,2881,9974,2401,875,7574,2987,4587,3147,6766,9885,2965],\n[3287,3016,3619,6818,9073,6120,5423,557,2900,2015,8111,3873,1314,4189,1846,4399,7041,7583,2427,2864,3525,5002,2069,748,1948,6015,2684,438,770,8367,1663,7887,7759,1885,157,7770,4520,4878,3857,1137,3525,3050,6276,5569,7649,904,4533,7843,2199,5648,7628,9075,9441,3600,7231,2388,5640,9096,958,3058,584,5899,8150,1181,9616,1098,8162,6819,8171,1519,1140,7665,8801,2632,1299,9192,707,9955,2710,7314],\n[1772,2963,7578,3541,3095,1488,7026,2634,6015,4633,4370,2762,1650,2174,909,8158,2922,8467,4198,4280,9092,8856,8835,5457,2790,8574,9742,5054,9547,4156,7940,8126,9824,7340,8840,6574,3547,1477,3014,6798,7134,435,9484,9859,3031,4,1502,4133,1738,1807,4825,463,6343,9701,8506,9822,9555,8688,8168,3467,3234,6318,1787,5591,419,6593,7974,8486,9861,6381,6758,194,3061,4315,2863,4665,3789,2201,1492,4416],\n[126,8927,6608,5682,8986,6867,1715,6076,3159,788,3140,4744,830,9253,5812,5021,7616,8534,1546,9590,1101,9012,9821,8132,7857,4086,1069,7491,2988,1579,2442,4321,2149,7642,6108,250,6086,3167,24,9528,7663,2685,1220,9196,1397,5776,1577,1730,5481,977,6115,199,6326,2183,3767,5928,5586,7561,663,8649,9688,949,5913,9160,1870,5764,9887,4477,6703,1413,4995,5494,7131,2192,8969,7138,3997,8697,646,1028],\n[8074,1731,8245,624,4601,8706,155,8891,309,2552,8208,8452,2954,3124,3469,4246,3352,1105,4509,8677,9901,4416,8191,9283,5625,7120,2952,8881,7693,830,4580,8228,9459,8611,4499,1179,4988,1394,550,2336,6089,6872,269,7213,1848,917,6672,4890,656,1478,6536,3165,4743,4990,1176,6211,7207,5284,9730,4738,1549,4986,4942,8645,3698,9429,1439,2175,6549,3058,6513,1574,6988,8333,3406,5245,5431,7140,7085,6407],\n[7845,4694,2530,8249,290,5948,5509,1588,5940,4495,5866,5021,4626,3979,3296,7589,4854,1998,5627,3926,8346,6512,9608,1918,7070,4747,4182,2858,2766,4606,6269,4107,8982,8568,9053,4244,5604,102,2756,727,5887,2566,7922,44,5986,621,1202,374,6988,4130,3627,6744,9443,4568,1398,8679,397,3928,9159,367,2917,6127,5788,3304,8129,911,2669,1463,9749,264,4478,8940,1109,7309,2462,117,4692,7724,225,2312],\n[4164,3637,2000,941,8903,39,3443,7172,1031,3687,4901,8082,4945,4515,7204,9310,9349,9535,9940,218,1788,9245,2237,1541,5670,6538,6047,5553,9807,8101,1925,8714,445,8332,7309,6830,5786,5736,7306,2710,3034,1838,7969,6318,7912,2584,2080,7437,6705,2254,7428,820,782,9861,7596,3842,3631,8063,5240,6666,394,4565,7865,4895,9890,6028,6117,4724,9156,4473,4552,602,470,6191,4927,5387,884,3146,1978,3000],\n[4258,6880,1696,3582,5793,4923,2119,1155,9056,9698,6603,3768,5514,9927,9609,6166,6566,4536,4985,4934,8076,9062,6741,6163,7399,4562,2337,5600,2919,9012,8459,1308,6072,1225,9306,8818,5886,7243,7365,8792,6007,9256,6699,7171,4230,7002,8720,7839,4533,1671,478,7774,1607,2317,5437,4705,7886,4760,6760,7271,3081,2997,3088,7675,6208,3101,6821,6840,122,9633,4900,2067,8546,4549,2091,7188,5605,8599,6758,5229],\n[7854,5243,9155,3556,8812,7047,2202,1541,5993,4600,4760,713,434,7911,7426,7414,8729,322,803,7960,7563,4908,6285,6291,736,3389,9339,4132,8701,7534,5287,3646,592,3065,7582,2592,8755,6068,8597,1982,5782,1894,2900,6236,4039,6569,3037,5837,7698,700,7815,2491,7272,5878,3083,6778,6639,3589,5010,8313,2581,6617,5869,8402,6808,2951,2321,5195,497,2190,6187,1342,1316,4453,7740,4154,2959,1781,1482,8256],\n[7178,2046,4419,744,8312,5356,6855,8839,319,2962,5662,47,6307,8662,68,4813,567,2712,9931,1678,3101,8227,6533,4933,6656,92,5846,4780,6256,6361,4323,9985,1231,2175,7178,3034,9744,6155,9165,7787,5836,9318,7860,9644,8941,6480,9443,8188,5928,161,6979,2352,5628,6991,1198,8067,5867,6620,3778,8426,2994,3122,3124,6335,3918,8897,2655,9670,634,1088,1576,8935,7255,474,8166,7417,9547,2886,5560,3842],\n[6957,3111,26,7530,7143,1295,1744,6057,3009,1854,8098,5405,2234,4874,9447,2620,9303,27,7410,969,40,2966,5648,7596,8637,4238,3143,3679,7187,690,9980,7085,7714,9373,5632,7526,6707,3951,9734,4216,2146,3602,5371,6029,3039,4433,4855,4151,1449,3376,8009,7240,7027,4602,2947,9081,4045,8424,9352,8742,923,2705,4266,3232,2264,6761,363,2651,3383,7770,6730,7856,7340,9679,2158,610,4471,4608,910,6241],\n[4417,6756,1013,8797,658,8809,5032,8703,7541,846,3357,2920,9817,1745,9980,7593,4667,3087,779,3218,6233,5568,4296,2289,2654,7898,5021,9461,5593,8214,9173,4203,2271,7980,2983,5952,9992,8399,3468,1776,3188,9314,1720,6523,2933,621,8685,5483,8986,6163,3444,9539,4320,155,3992,2828,2150,6071,524,2895,5468,8063,1210,3348,9071,4862,483,9017,4097,6186,9815,3610,5048,1644,1003,9865,9332,2145,1944,2213],\n[9284,3803,4920,1927,6706,4344,7383,4786,9890,2010,5228,1224,3158,6967,8580,8990,8883,5213,76,8306,2031,4980,5639,9519,7184,5645,7769,3259,8077,9130,1317,3096,9624,3818,1770,695,2454,947,6029,3474,9938,3527,5696,4760,7724,7738,2848,6442,5767,6845,8323,4131,2859,7595,2500,4815,3660,9130,8580,7016,8231,4391,8369,3444,4069,4021,556,6154,627,2778,1496,4206,6356,8434,8491,3816,8231,3190,5575,1015],\n[3787,7572,1788,6803,5641,6844,1961,4811,8535,9914,9999,1450,8857,738,4662,8569,6679,2225,7839,8618,286,2648,5342,2294,3205,4546,176,8705,3741,6134,8324,8021,7004,5205,7032,6637,9442,5539,5584,4819,5874,5807,8589,6871,9016,983,1758,3786,1519,6241,185,8398,495,3370,9133,3051,4549,9674,7311,9738,3316,9383,2658,2776,9481,7558,619,3943,3324,6491,4933,153,9738,4623,912,3595,7771,7939,1219,4405],\n[2650,3883,4154,5809,315,7756,4430,1788,4451,1631,6461,7230,6017,5751,138,588,5282,2442,9110,9035,6349,2515,1570,6122,4192,4174,3530,1933,4186,4420,4609,5739,4135,2963,6308,1161,8809,8619,2796,3819,6971,8228,4188,1492,909,8048,2328,6772,8467,7671,9068,2226,7579,6422,7056,8042,3296,2272,3006,2196,7320,3238,3490,3102,37,1293,3212,4767,5041,8773,5794,4456,6174,7279,7054,2835,7053,9088,790,6640],\n[3101,1057,7057,3826,6077,1025,2955,1224,1114,6729,5902,4698,6239,7203,9423,1804,4417,6686,1426,6941,8071,1029,4985,9010,6122,6597,1622,1574,3513,1684,7086,5505,3244,411,9638,4150,907,9135,829,981,1707,5359,8781,9751,5,9131,3973,7159,1340,6955,7514,7993,6964,8198,1933,2797,877,3993,4453,8020,9349,8646,2779,8679,2961,3547,3374,3510,1129,3568,2241,2625,9138,5974,8206,7669,7678,1833,8700,4480],\n[4865,9912,8038,8238,782,3095,8199,1127,4501,7280,2112,2487,3626,2790,9432,1475,6312,8277,4827,2218,5806,7132,8752,1468,7471,6386,739,8762,8323,8120,5169,9078,9058,3370,9560,7987,8585,8531,5347,9312,1058,4271,1159,5286,5404,6925,8606,9204,7361,2415,560,586,4002,2644,1927,2824,768,4409,2942,3345,1002,808,4941,6267,7979,5140,8643,7553,9438,7320,4938,2666,4609,2778,8158,6730,3748,3867,1866,7181],\n[171,3771,7134,8927,4778,2913,3326,2004,3089,7853,1378,1729,4777,2706,9578,1360,5693,3036,1851,7248,2403,2273,8536,6501,9216,613,9671,7131,7719,6425,773,717,8803,160,1114,7554,7197,753,4513,4322,8499,4533,2609,4226,8710,6627,644,9666,6260,4870,5744,7385,6542,6203,7703,6130,8944,5589,2262,6803,6381,7414,6888,5123,7320,9392,9061,6780,322,8975,7050,5089,1061,2260,3199,1150,1865,5386,9699,6501],\n[3744,8454,6885,8277,919,1923,4001,6864,7854,5519,2491,6057,8794,9645,1776,5714,9786,9281,7538,6916,3215,395,2501,9618,4835,8846,9708,2813,3303,1794,8309,7176,2206,1602,1838,236,4593,2245,8993,4017,10,8215,6921,5206,4023,5932,6997,7801,262,7640,3107,8275,4938,7822,2425,3223,3886,2105,8700,9526,2088,8662,8034,7004,5710,2124,7164,3574,6630,9980,4242,2901,9471,1491,2117,4562,1130,9086,4117,6698],\n[2810,2280,2331,1170,4554,4071,8387,1215,2274,9848,6738,1604,7281,8805,439,1298,8318,7834,9426,8603,6092,7944,1309,8828,303,3157,4638,4439,9175,1921,4695,7716,1494,1015,1772,5913,1127,1952,1950,8905,4064,9890,385,9357,7945,5035,7082,5369,4093,6546,5187,5637,2041,8946,1758,7111,6566,1027,1049,5148,7224,7248,296,6169,375,1656,7993,2816,3717,4279,4675,1609,3317,42,6201,3100,3144,163,9530,4531],\n[7096,6070,1009,4988,3538,5801,7149,3063,2324,2912,7911,7002,4338,7880,2481,7368,3516,2016,7556,2193,1388,3865,8125,4637,4096,8114,750,3144,1938,7002,9343,4095,1392,4220,3455,6969,9647,1321,9048,1996,1640,6626,1788,314,9578,6630,2813,6626,4981,9908,7024,4355,3201,3521,3864,3303,464,1923,595,9801,3391,8366,8084,9374,1041,8807,9085,1892,9431,8317,9016,9221,8574,9981,9240,5395,2009,6310,2854,9255],\n[8830,3145,2960,9615,8220,6061,3452,2918,6481,9278,2297,3385,6565,7066,7316,5682,107,7646,4466,68,1952,9603,8615,54,7191,791,6833,2560,693,9733,4168,570,9127,9537,1925,8287,5508,4297,8452,8795,6213,7994,2420,4208,524,5915,8602,8330,2651,8547,6156,1812,6271,7991,9407,9804,1553,6866,1128,2119,4691,9711,8315,5879,9935,6900,482,682,4126,1041,428,6247,3720,5882,7526,2582,4327,7725,3503,2631],\n[2738,9323,721,7434,1453,6294,2957,3786,5722,6019,8685,4386,3066,9057,6860,499,5315,3045,5194,7111,3137,9104,941,586,3066,755,4177,8819,7040,5309,3583,3897,4428,7788,4721,7249,6559,7324,825,7311,3760,6064,6070,9672,4882,584,1365,9739,9331,5783,2624,7889,1604,1303,1555,7125,8312,425,8936,3233,7724,1480,403,7440,1784,1754,4721,1569,652,3893,4574,5692,9730,4813,9844,8291,9199,7101,3391,8914],\n[6044,2928,9332,3328,8588,447,3830,1176,3523,2705,8365,6136,5442,9049,5526,8575,8869,9031,7280,706,2794,8814,5767,4241,7696,78,6570,556,5083,1426,4502,3336,9518,2292,1885,3740,3153,9348,9331,8051,2759,5407,9028,7840,9255,831,515,2612,9747,7435,8964,4971,2048,4900,5967,8271,1719,9670,2810,6777,1594,6367,6259,8316,3815,1689,6840,9437,4361,822,9619,3065,83,6344,7486,8657,8228,9635,6932,4864],\n[8478,4777,6334,4678,7476,4963,6735,3096,5860,1405,5127,7269,7793,4738,227,9168,2996,8928,765,733,1276,7677,6258,1528,9558,3329,302,8901,1422,8277,6340,645,9125,8869,5952,141,8141,1816,9635,4025,4184,3093,83,2344,2747,9352,7966,1206,1126,1826,218,7939,2957,2729,810,8752,5247,4174,4038,8884,7899,9567,301,5265,5752,7524,4381,1669,3106,8270,6228,6373,754,2547,4240,2313,5514,3022,1040,9738],\n[2265,8192,1763,1369,8469,8789,4836,52,1212,6690,5257,8918,6723,6319,378,4039,2421,8555,8184,9577,1432,7139,8078,5452,9628,7579,4161,7490,5159,8559,1011,81,478,5840,1964,1334,6875,8670,9900,739,1514,8692,522,9316,6955,1345,8132,2277,3193,9773,3923,4177,2183,1236,6747,6575,4874,6003,6409,8187,745,8776,9440,7543,9825,2582,7381,8147,7236,5185,7564,6125,218,7991,6394,391,7659,7456,5128,5294],\n[2132,8992,8160,5782,4420,3371,3798,5054,552,5631,7546,4716,1332,6486,7892,7441,4370,6231,4579,2121,8615,1145,9391,1524,1385,2400,9437,2454,7896,7467,2928,8400,3299,4025,7458,4703,7206,6358,792,6200,725,4275,4136,7390,5984,4502,7929,5085,8176,4600,119,3568,76,9363,6943,2248,9077,9731,6213,5817,6729,4190,3092,6910,759,2682,8380,1254,9604,3011,9291,5329,9453,9746,2739,6522,3765,5634,1113,5789],\n[5304,5499,564,2801,679,2653,1783,3608,7359,7797,3284,796,3222,437,7185,6135,8571,2778,7488,5746,678,6140,861,7750,803,9859,9918,2425,3734,2698,9005,4864,9818,6743,2475,132,9486,3825,5472,919,292,4411,7213,7699,6435,9019,6769,1388,802,2124,1345,8493,9487,8558,7061,8777,8833,2427,2238,5409,4957,8503,3171,7622,5779,6145,2417,5873,5563,5693,9574,9491,1937,7384,4563,6842,5432,2751,3406,7981]\n];\n--seed-contents--\n```js\nfunction pathSumFourWays(matrix) {\nreturn true;\n}\n// Only change code above this line\nconst testMatrix1 = [\n[131, 673, 234, 103, 18],\n[201, 96, 342, 965, 150],\n[630, 803, 746, 422, 111],\n[537, 699, 497, 121, 956],\n[805, 732, 524, 37, 331]\n];\npathSumFourWays(testMatrix1);\n```\n--solutions--\n```js\nfunction pathSumFourWays(matrix) {\nconst MOVES = [\n[-1, 0],\n[1, 0],\n[0, -1],\n[0, 1]\n];\nfunction getAllowedMoves(row, col) {\nconst moves = [];\nfor (let i = 0; i < MOVES",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 35153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-83-path-sum-four-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 19130,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "92358dd74910ace2d1b61594b391de3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-83-path-sum-four-ways.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return true; } // Only change code above this line const testMatrix1 = [ [131, 673, 234, 103, 18], [201, 96, 342, 965, 150], [630, 803, 746, 422, 111], [537, 699, 497, 121, 956], [805, 732, 524, 37, 331] ]; pathSumFourWays(testMatrix1); ``` --solutions-- ```js function pathSumFourWays(matrix) { const MOVES = [ [-1, 0], [1, 0], [0, -1], [0, 1] ]; function getAllowedMoves(row, col) { const moves = []; for (let i = 0; i < MOVESlength; i++) {\nconst [rowChange, colChange] = MOVES[i];\nconst nextRow = row + rowChange;\nconst nextCol = col + colChange;\nif (isMoveAllowed(nextRow, nextCol)) {\nmoves push([nextRow, nextCol]);\n}\n}\nreturn moves;\n}\nfunction isMoveAllowed(nextRow, nextCol) {\nif (nextRow < 0 || nextRow >= size || nextCol < 0 || nextCol >= size) {\nreturn false;\n}\nreturn true;\n}\nconst size = matrix length;\nconst resultMatrix = new Array(size) fill() map(() => new Array(size) fill(Infinity));\nconst [startRow, startCol] = new Array(2) fill(size - 1);\nconst queue = [[startRow, startCol]];\nresultMatrix[startRow][startCol] = matrix[startRow][startCol];\nwhile (queue length > 0) {\nconst [curRow, curCol] = queue shift();\nconst allowedMoves = getAllowedMoves(curRow, curCol);\nfor (let i = 0; i < allowedMoves length; i++) {\nconst [nextRow, nextCol] = allowedMoves[i];\nconst bestPath = resultMatrix[nextRow][nextCol];\nconst newPath = resultMatrix[curRow][curCol] + matrix[nextRow][nextCol];\nif (newPath < bestPath) {\nresultMatrix[nextRow][nextCol] = newPath;\nqueue push(allowedMoves[i]);\n}\n}\n}\nreturn resultMatrix[0][0];\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 35153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-83-path-sum-four-ways.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "98da2dfa0da4dfe6ecdd14cea93b9677",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-9-special-pythagorean-triplet.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3761000cf542c50fe88\ntitle: 'Problem 9: Special Pythagorean triplet'\nchallengeType: 1\nforumTopicId: 302205\ndashedName: problem-9-special-pythagorean-triplet\n--description--\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\na2 + b2 = c2\nFor example, 32 + 42 = 9 + 16 = 25 = 52.\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc such that a + b + c = n.\n--hints--\nspecialPythagoreanTriplet(24) should return a number.\njs\nassert.isNumber(specialPythagoreanTriplet(24));\nspecialPythagoreanTriplet(24) should return 480.\njs\nassert.strictEqual(specialPythagoreanTriplet(24), 480);\nspecialPythagoreanTriplet(120) should return 49920, 55080 or 60000.\njs\nassert.oneOf(specialPythagoreanTriplet(120), [49920, 55080, 60000]);\nspecialPythagoreanTriplet(1000) should return 31875000.\njs\nassert.strictEqual(specialPythagoreanTriplet(1000), 31875000);\n--seed--\n--seed-contents--\n```js\nfunction specialPythagoreanTriplet(n) {\nlet sumOfabc = n;\nreturn true;\n}\nspecialPythagoreanTriplet(1000);\n```\n--solutions--\n```js\nfunction specialPythagoreanTriplet(n) {\nfor (let a = 1; a <= n / 2; a++) {\nfor (let b = a + 1; b <= n / 2; b++) {\nconst c = Math.sqrt(a * a + b * b);\nif ((a + b + c) % n == 0) {\nconst factor = n / (a + b + c);\nreturn (a * b * c) * (factor ** 3);\n}\n}\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1631,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-9-special-pythagorean-triplet.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75a1e3850ebad3e6e7b78c6ebc40a3ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-90-cube-digit-pairs.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c61000cf542c50fed9\ntitle: 'Problem 90: Cube digit pairs'\nchallengeType: 1\nforumTopicId: 302207\ndashedName: problem-90-cube-digit-pairs\n--description--\nEach of the six faces on a cube has a different digit (0 to 9) written on it; the same is done to a second cube By placing the two cubes side-by-side in different positions we can form a variety of 2-digit numbers For example, the square number 64 could be formed:\nIn fact, by carefully choosing the digits on both cubes it is possible to display all of the square numbers below one-hundred: 01, 04, 09, 16, 25, 36, 49, 64, and 81 For example, one way this can be achieved is by placing {0, 5, 6, 7, 8, 9} on one cube and {1, 2, 3, 4, 8, 9} on the other cube However, for this problem we shall allow the 6 or 9 to be turned upside-down so that an arrangement like {0, 5, 6, 7, 8, 9} and {1, 2, 3, 4, 6, 7} allows for all nine square numbers to be displayed; otherwise it would be impossible to obtain 09 In determining a distinct arrangement we are interested in the digits on each cube, not the order {1, 2, 3, 4, 5, 6} is equivalent to {3, 6, 4, 1, 2, 5}\n{1, 2, 3, 4, 5, 6} is distinct from {1, 2, 3, 4, 5, 9}\nBut because we are allowing 6 and 9 to be reversed, the two distinct sets in the last example both represent the extended set {1, 2, 3, 4, 5, 6, 9} for the purpose of forming 2-digit numbers How many distinct arrangements of the two cubes allow for all of the square numbers to be displayed --hints--\ncubeDigitPairs() should return a number",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2185,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-90-cube-digit-pairs.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "206fdd0f4ebe43ac9fb075f656a01c96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-90-cube-digit-pairs.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2, 3, 4, 5, 6} is distinct from {1, 2, 3, 4, 5, 9} But because we are allowing 6 and 9 to be reversed, the two distinct sets in the last example both represent the extended set {1, 2, 3, 4, 5, 6, 9} for the purpose of forming 2-digit numbers How many distinct arrangements of the two cubes allow for all of the square numbers to be displayed --hints-- cubeDigitPairs() should return a numberjs\nassert(typeof cubeDigitPairs() === 'number');\ncubeDigitPairs() should return 1217 js\nassert strictEqual(cubeDigitPairs(), 1217);\n--seed--\n--seed-contents--\n```js\nfunction cubeDigitPairs() {\nreturn true;\n}\ncubeDigitPairs();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2185,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-90-cube-digit-pairs.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f6e84329abc104de8634e23e80e9af4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-93-arithmetic-expressions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ca1000cf542c50fedc\ntitle: 'Problem 93: Arithmetic expressions'\nchallengeType: 1\nforumTopicId: 302210\ndashedName: problem-93-arithmetic-expressions\n--description--\nBy using each of the digits from the set, {1, 2, 3, 4}, exactly once, and making use of the four arithmetic operations (+, −, *, /) and brackets/parentheses, it is possible to form different positive integer targets.\nFor example,\n8 = (4 * (1 + 3)) / 2\n14 = 4 * (3 + 1 / 2)\n19 = 4 * (2 + 3) − 1\n36 = 3 * 4 * (2 + 1)\nNote that concatenations of the digits, like 12 + 34, are not allowed.\nUsing the set, {1, 2, 3, 4}, it is possible to obtain thirty-one different target numbers of which 36 is the maximum, and each of the numbers 1 to 28 can be obtained before encountering the first non-expressible number.\nFind the set of four distinct digits, a < b < c < d, for which the longest set of consecutive positive integers, 1 to n, can be obtained, giving your answer as a string: abcd.\n--hints--\narithmeticExpressions() should return a number.\njs\nassert(typeof arithmeticExpressions() === 'number');\narithmeticExpressions() should return 1258.\njs\nassert.strictEqual(arithmeticExpressions(), 1258);\n--seed--\n--seed-contents--\n```js\nfunction arithmeticExpressions() {\nreturn true;\n}\narithmeticExpressions();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1467,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-93-arithmetic-expressions.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff6e00914e82d72657dd0593378c5285",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-91-right-triangles-with-integer-coordinates.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c71000cf542c50feda\ntitle: 'Problem 91: Right triangles with integer coordinates'\nchallengeType: 1\nforumTopicId: 302208\ndashedName: problem-91-right-triangles-with-integer-coordinates\n--description--\nThe points ${P}(x_1, y_1)$ and ${Q}(x_2, y_2)$ are plotted at integer coordinates and are joined to the origin, ${O}(0, 0)$, to form ${\\Delta}OPQ$ There are exactly fourteen triangles containing a right angle that can be formed when each coordinate lies between 0 and 2 inclusive; that is, $0 ≤ x_1, y_1, x_2, y_2 ≤ 2$ Given that $0 ≤ x_1, y_1, x_2, y_2 ≤ limit$, how many right triangles can be formed --hints--\nrightTrianglesIntCoords(2) should return a number js\nassert(typeof rightTrianglesIntCoords(2) === 'number');\nrightTrianglesIntCoords(2) should return 14 js\nassert strictEqual(rightTrianglesIntCoords(2), 14);\nrightTrianglesIntCoords(10) should return 448 js\nassert strictEqual(rightTrianglesIntCoords(10), 448);\nrightTrianglesIntCoords(25) should return 3207 js\nassert strictEqual(rightTrianglesIntCoords(25), 3207);\nrightTrianglesIntCoords(50) should return 14234 js\nassert strictEqual(rightTrianglesIntCoords(50), 14234);\n--seed--\n--seed-contents--\n```js\nfunction rightTrianglesIntCoords(limit) {\nreturn true;\n}\nrightTrianglesIntCoords(2);\n```\n--solutions--\n```js\nfunction rightTrianglesIntCoords(limit) {\nfunction isRightTriangle(points) {\nfor (let i = 0; i < points",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-91-right-triangles-with-integer-coordinates.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d2d17934305771e4e6df8be94a7982cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-91-right-triangles-with-integer-coordinates.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "many right triangles can be formed --hints-- rightTrianglesIntCoords(2) should return a number js assert(typeof rightTrianglesIntCoords(2) === 'number'); rightTrianglesIntCoords(2) should return 14 js assert strictEqual(rightTrianglesIntCoords(2), 14); rightTrianglesIntCoords(10) should return 448 js assert strictEqual(rightTrianglesIntCoords(10), 448); rightTrianglesIntCoords(25) should return 3207 js assert strictEqual(rightTrianglesIntCoords(25), 3207); rightTrianglesIntCoords(50) should return 14234 js assert strictEqual(rightTrianglesIntCoords(50), 14234); --seed-- --seed-contents-- ```js function rightTrianglesIntCoords(limit) { return true; } rightTrianglesIntCoords(2); ``` --solutions-- ```js function rightTrianglesIntCoords(limit) { function isRightTriangle(points) { for (let i = 0; i < pointslength; i++) {\nconst pointA = points[i];\nconst pointB = points[(i + 1) % 3];\nconst pointC = points[(i + 2) % 3];\nconst vectorAB = [pointB[0] - pointA[0], pointB[1] - pointA[1]];\nconst vectorAC = [pointC[0] - pointA[0], pointC[1] - pointA[1]];\nif (isRightAngleBetween(vectorAB, vectorAC)) {\nreturn true;\n}\n}\nreturn false;\n}\nfunction isRightAngleBetween(vector1, vector2) {\nreturn vector1[0] * vector2[0] + vector1[1] * vector2[1] === 0;\n}\nfunction getSetKey(points) {\nreturn (\n'0 0,' +\npoints sort((a, b) => a[0] - b[0]) map(point => point join(' '))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-91-right-triangles-with-integer-coordinates.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2ae8e616c03868c80f3c2cbb41a3bfff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-91-right-triangles-with-integer-coordinates.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 1) % 3]; const pointC = points[(i + 2) % 3]; const vectorAB = [pointB[0] - pointA[0], pointB[1] - pointA[1]]; const vectorAC = [pointC[0] - pointA[0], pointC[1] - pointA[1]]; if (isRightAngleBetween(vectorAB, vectorAC)) { return true; } } return false; } function isRightAngleBetween(vector1, vector2) { return vector1[0] * vector2[0] + vector1[1] * vector2[1] === 0; } function getSetKey(points) { return ( '0 0,' + points sort((a, b) => a[0] - b[0]) map(point => point join(' '))join(',')\n);\n}\nconst pointO = [0, 0];\nconst rightTriangles = new Set();\nfor (let x1 = 1; x1 <= limit; x1++) {\nfor (let y1 = 0; y1 <= limit; y1++) {\nconst pointP = [x1, y1];\nfor (let x2 = 0; x2 <= limit; x2++) {\nfor (let y2 = 1; y2 <= limit; y2++) {\nconst pointQ = [x2, y2];\nif (pointP[0] === pointQ[0] && pointP[1] === pointQ[1]) {\ncontinue;\n}\nif (isRightTriangle([pointO, pointP, pointQ])) {\nrightTriangles add(getSetKey([pointP, pointQ]));\n}\n}\n}\n}\n}\nreturn rightTriangles size;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-91-right-triangles-with-integer-coordinates.md",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "83743d20c7ddc2d2e8d02aa65b4dc96d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-94-almost-equilateral-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ca1000cf542c50fedd\ntitle: 'Problem 94: Almost equilateral triangles'\nchallengeType: 1\nforumTopicId: 302211\ndashedName: problem-94-almost-equilateral-triangles\n--description--\nIt is easily proved that no equilateral triangle exists with integral length sides and integral area. However, the almost equilateral triangle 5-5-6 has an area of 12 square units.\nWe shall define an almost equilateral triangle to be a triangle for which two sides are equal and the third differs by no more than one unit.\nFind the sum of the perimeters of all almost equilateral triangles with integral side lengths and area and whose perimeters do not exceed limit.\n--hints--\nalmostEquilateralTriangles(50) should return a number.\njs\nassert(typeof almostEquilateralTriangles(50) === 'number');\nalmostEquilateralTriangles(50) should return 66.\njs\nassert.strictEqual(almostEquilateralTriangles(50), 66);\nalmostEquilateralTriangles(10000) should return 3688.\njs\nassert.strictEqual(almostEquilateralTriangles(10000), 3688);\nalmostEquilateralTriangles(10000000) should return 9973078.\njs\nassert.strictEqual(almostEquilateralTriangles(10000000), 9973078);\nalmostEquilateralTriangles(1000000000) should return 518408346.\njs\nassert.strictEqual(almostEquilateralTriangles(1000000000), 518408346);\n--seed--\n--seed-contents--\n```js\nfunction almostEquilateralTriangles(limit) {\nreturn true;\n}\nalmostEquilateralTriangles(50);\n```\n--solutions--\n```js\nfunction almostEquilateralTriangles(limit) {\n// Based on https://blog.dreamshire.com/project-euler-94-solution/\nlet perimetersSum = 0;\nlet sidesAB = 1;\nlet sideC = 1;\nlet perimeter = 0;\nlet perimeterOffset = 1;\nwhile (perimeter <= limit) {\n[sidesAB, sideC] = [4 * sidesAB - sideC + 2 * perimeterOffset, sidesAB];\nperimeterOffset = -perimeterOffset;\nperimetersSum += perimeter;\nperimeter = 3 * sidesAB - perimeterOffset;\n}\nreturn perimetersSum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-94-almost-equilateral-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e81bcbbb6b1db3639ad8b12367a9a6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-92-square-digit-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c81000cf542c50fedb\ntitle: 'Problem 92: Square digit chains'\nchallengeType: 1\nforumTopicId: 302209\ndashedName: problem-92-square-digit-chains\n--description--\nA number chain is created by continuously adding the square of the digits in a number to form a new number until it has been seen before For example,\n$$\\begin{align}\n& 44 → 32 → 13 → 10 → \\boldsymbol{1} → \\boldsymbol{1}\\\\\n& 85 → \\boldsymbol{89} → 145 → 42 → 20 → 4 → 16 → 37 → 58 → \\boldsymbol{89}\\\\\n\\end{align}$$\nTherefore any chain that arrives at 1 or 89 will become stuck in an endless loop What is most amazing is that EVERY starting number will eventually arrive at 1 or 89 How many starting numbers below limit will arrive at 89 --hints--\nsquareDigitChains(100) should return a number js\nassert(typeof squareDigitChains(100) === 'number');\nsquareDigitChains(100) should return 80 js\nassert strictEqual(squareDigitChains(100), 80);\nsquareDigitChains(1000) should return 857 js\nassert strictEqual(squareDigitChains(1000), 857);\nsquareDigitChains(100000) should return 85623 js\nassert strictEqual(squareDigitChains(100000), 85623);\nsquareDigitChains(10000000) should return 8581146 js\nassert strictEqual(squareDigitChains(10000000), 8581146);\n--seed--\n--seed-contents--\n```js\nfunction squareDigitChains(limit) {\nreturn true;\n}\nsquareDigitChains(100);\n```\n--solutions--\n```js\nfunction squareDigitChains(limit) {\n// Based on https://www xarg org/puzzle/project-euler/problem-92/\nfunction getCombinations(neededDigits, curDigits) {\nif (neededDigits === curDigits length) {\nreturn [curDigits];\n}\nconst combinations = [];\nconst lastDigit = curDigits length == 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3832,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-92-square-digit-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "004e4233be491adcf807bc798f35c355",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-92-square-digit-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return 80 js assert strictEqual(squareDigitChains(100), 80); squareDigitChains(1000) should return 857 js assert strictEqual(squareDigitChains(1000), 857); squareDigitChains(100000) should return 85623 js assert strictEqual(squareDigitChains(100000), 85623); squareDigitChains(10000000) should return 8581146 js assert strictEqual(squareDigitChains(10000000), 8581146); --seed-- --seed-contents-- ```js function squareDigitChains(limit) { return true; } squareDigitChains(100); ``` --solutions-- ```js function squareDigitChains(limit) { // Based on https://www xarg org/puzzle/project-euler/problem-92/ function getCombinations(neededDigits, curDigits) { if (neededDigits === curDigits length) { return [curDigits]; } const combinations = []; const lastDigit = curDigits length == 0curDigits[0] : 9;\nfor (let i = 0; i <= lastDigit; i++) {\nconst results = getCombinations(neededDigits, [i] concat(curDigits));\ncombinations push( results);\n}\nreturn combinations;\n}\nfunction getPossibleSums(limit) {\nconst digitsCount = getDigits(limit) length - 1;\nconst possibleSquaredSums = [false];\nfor (let i = 1; i <= 81 * digitsCount; i++) {\nlet curVal = i;\nwhile (curVal == 1 && curVal == 89) {\ncurVal = addSquaredDigits(curVal);\n}\npossibleSquaredSums[i] = curVal === 89;\n}\nreturn possibleSquaredSums;\n}\nfunction addSquaredDigits(num) {\nconst digits = getDigits(num);\nlet result = 0;\nfor (let i = 0; i < digits length; i++) {\nresult += digits[i] ** 2;\n}\nreturn result;\n}\nfunction getDigits(number) {\nconst digits = [];\nwhile (number > 0) {\ndigits push(number % 10);\nnumber = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3832,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-92-square-digit-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ccd554cd49c7e0048e37bda918c3946d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-92-square-digit-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "let curVal = i; while (curVal == 1 && curVal == 89) { curVal = addSquaredDigits(curVal); } possibleSquaredSums[i] = curVal === 89; } return possibleSquaredSums; } function addSquaredDigits(num) { const digits = getDigits(num); let result = 0; for (let i = 0; i < digits length; i++) { result += digits[i] ** 2; } return result; } function getDigits(number) { const digits = []; while (number > 0) { digits push(number % 10); number = Mathfloor(number / 10);\n}\nreturn digits;\n}\nfunction getFactorials(number) {\nconst factorials = [1];\nfor (let i = 1; i < number; i++) {\nfactorials[i] = factorials[i - 1] * i;\n}\nreturn factorials;\n}\nconst neededDigits = getDigits(limit) length - 1;\nconst combinations = getCombinations(neededDigits, []);\nconst possibleSquaredDigitsSums = getPossibleSums(limit);\nconst factorials = getFactorials(neededDigits + 1);\nlet endingWith89 = 0;\nfor (let i = 0; i < combinations length; i++) {\nlet counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nlet digits = combinations[i];\nlet curSum = 0;\nfor (let j = 0; j < digits length; j++) {\nconst curDigit = digits[j];\ncurSum += curDigit ** 2;\ncounts[curDigit]++;\n}\nif (possibleSquaredDigitsSums[curSum]) {\nlet denominator = 1;\nfor (let j = 0; j < counts length; j++) {\ndenominator = denominator * factorials[counts[j]];\n}\nendingWith89 += Math floor(\nfactorials[factorials length - 1] / denominator\n);\n}\n}\nreturn endingWith89;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3832,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-92-square-digit-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4a98e882b07c8353445a479b6c9bfb8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-95-amicable-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3cc1000cf542c50fede\ntitle: 'Problem 95: Amicable chains'\nchallengeType: 1\nforumTopicId: 302212\ndashedName: problem-95-amicable-chains\n--description--\nThe proper divisors of a number are all the divisors excluding the number itself For example, the proper divisors of 28 are 1, 2, 4, 7, and 14 As the sum of these divisors is equal to 28, we call it a perfect number Interestingly the sum of the proper divisors of 220 is 284 and the sum of the proper divisors of 284 is 220, forming a chain of two numbers For this reason, 220 and 284 are called an amicable pair Perhaps less well known are longer chains For example, starting with 12496, we form a chain of five numbers:\n$$\n12496 → 14288 → 15472 → 14536 → 14264 \\,(→ 12496 → \\cdots)\n$$\nSince this chain returns to its starting point, it is called an amicable chain Find the smallest member of the longest amicable chain with no element exceeding limit --hints--\namicableChains(300) should return a number js\nassert(typeof amicableChains(300) === 'number');\namicableChains(300) should return 220 js\nassert strictEqual(amicableChains(300), 220);\namicableChains(15000) should return 220 js\nassert strictEqual(amicableChains(15000), 220);\namicableChains(100000) should return 12496 js\nassert strictEqual(amicableChains(100000), 12496);\namicableChains(1000000) should return 14316 js\nassert strictEqual(amicableChains(1000000), 14316);\n--seed--\n--seed-contents--\n```js\nfunction amicableChains(limit) {\nreturn true;\n}\namicableChains(300);\n```\n--solutions--\n```js\nfunction amicableChains(limit) {\nfunction getSmallestMember(chain) {\nlet smallest = chain[0];\nfor (let i = 1; i < chain",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-95-amicable-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "295778eb003fc9f93dd8badf7702c0a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-95-amicable-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "exceeding limit --hints-- amicableChains(300) should return a number js assert(typeof amicableChains(300) === 'number'); amicableChains(300) should return 220 js assert strictEqual(amicableChains(300), 220); amicableChains(15000) should return 220 js assert strictEqual(amicableChains(15000), 220); amicableChains(100000) should return 12496 js assert strictEqual(amicableChains(100000), 12496); amicableChains(1000000) should return 14316 js assert strictEqual(amicableChains(1000000), 14316); --seed-- --seed-contents-- ```js function amicableChains(limit) { return true; } amicableChains(300); ``` --solutions-- ```js function amicableChains(limit) { function getSmallestMember(chain) { let smallest = chain[0]; for (let i = 1; i < chainlength; i++) {\nif (smallest > chain[i]) {\nsmallest = chain[i];\n}\n}\nreturn smallest;\n}\nfunction getFactorsSums(limit) {\nconst factorsSums = new Array(limit + 1) fill(1);\nfor (let i = 2; i <= limit / 2; i++) {\nfor (let j = 2 * i; j <= limit; j += i) {\nfactorsSums[j] += i;\n}\n}\nreturn factorsSums;\n}\nconst factorsSums = getFactorsSums(limit);\nconst checkedNumbers = new Set();\nlet longestChain = 0;\nlet smallestMember = 0;\nfor (let i = 0; i <= limit; i++) {\nconst curChain = [];\nlet curNumber = i;\nwhile ( checkedNumbers has(curNumber) && factorsSums[curNumber] <= limit) {\ncurNumber = factorsSums[curNumber];\nconst chainStart = curChain indexOf(curNumber);\nif (chainStart === -1) {\ncurChain push(curNumber);\ncontinue;\n}\nconst chainLength = curChain length - chainStart;\nif (chainLength > longestChain) {\nlongestChain = chainLength;\nsmallestMember = getSmallestMember(curChain slice(chainStart));\n}\nbreak;\n}\nfor (let j = 0; j < curChain length; j++) {\ncheckedNumbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-95-amicable-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4f0cf761ed941b682a45a2e7018a693e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-95-amicable-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i = 0; i <= limit; i++) { const curChain = []; let curNumber = i; while ( checkedNumbers has(curNumber) && factorsSums[curNumber] <= limit) { curNumber = factorsSums[curNumber]; const chainStart = curChain indexOf(curNumber); if (chainStart === -1) { curChain push(curNumber); continue; } const chainLength = curChain length - chainStart; if (chainLength > longestChain) { longestChain = chainLength; smallestMember = getSmallestMember(curChain slice(chainStart)); } break; } for (let j = 0; j < curChain length; j++) { checkedNumbersadd(curChain[j]);\n}\n}\nreturn smallestMember;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-95-amicable-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 154,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b5a8a32f107566865e0627bbe5834fd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-97-large-non-mersenne-prime.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ce1000cf542c50fee0\ntitle: 'Problem 97: Large non-Mersenne prime'\nchallengeType: 1\nforumTopicId: 302214\ndashedName: problem-97-large-non-mersenne-prime\n--description--\nThe first known prime found to exceed one million digits was discovered in 1999, and is a Mersenne prime of the form $2^{6972593} − 1$; it contains exactly 2,098,960 digits Subsequently other Mersenne primes, of the form $2^p − 1$, have been found which contain more digits However, in 2004 there was found a massive non-Mersenne prime which contains 2,357,207 digits: $28433 × 2^{7830457} + 1$ Find the last ten digits of that non-Mersenne prime in the form $multiplier × 2^{power} + 1$ --hints--\nlargeNonMersennePrime(19, 6833086) should return a string js\nassert(typeof largeNonMersennePrime(19, 6833086) === 'string');\nlargeNonMersennePrime(19, 6833086) should return the string 3637590017 js\nassert strictEqual(largeNonMersennePrime(19, 6833086), '3637590017');\nlargeNonMersennePrime(27, 7046834) should return the string 0130771969 js\nassert strictEqual(largeNonMersennePrime(27, 7046834), '0130771969');\nlargeNonMersennePrime(6679881, 6679881) should return the string 4455386113 js\nassert strictEqual(largeNonMersennePrime(6679881, 6679881), '4455386113');\nlargeNonMersennePrime(28433, 7830457) should return the string 8739992577 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2297,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-97-large-non-mersenne-prime.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "71a5512e5df34e11db92a94ee4e12c7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-97-large-non-mersenne-prime.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1$ Find the last ten digits of that non-Mersenne prime in the form $multiplier × 2^{power} + 1$ --hints-- largeNonMersennePrime(19, 6833086) should return a string js assert(typeof largeNonMersennePrime(19, 6833086) === 'string'); largeNonMersennePrime(19, 6833086) should return the string 3637590017 js assert strictEqual(largeNonMersennePrime(19, 6833086), '3637590017'); largeNonMersennePrime(27, 7046834) should return the string 0130771969 js assert strictEqual(largeNonMersennePrime(27, 7046834), '0130771969'); largeNonMersennePrime(6679881, 6679881) should return the string 4455386113 js assert strictEqual(largeNonMersennePrime(6679881, 6679881), '4455386113'); largeNonMersennePrime(28433, 7830457) should return the string 8739992577 js assertstrictEqual(largeNonMersennePrime(28433, 7830457), '8739992577');\n--seed--\n--seed-contents--\n```js\nfunction largeNonMersennePrime(multiplier, power) {\nreturn true;\n}\nlargeNonMersennePrime(19, 6833086);\n```\n--solutions--\n```js\nfunction largeNonMersennePrime(multiplier, power) {\nfunction modStepsResults(number, other, mod, startValue, step) {\nlet result = startValue;\nfor (let i = 0; i < other; i++) {\nresult = step(number, result) % mod;\n}\nreturn result;\n}\nconst numOfDigits = 10;\nconst mod = 10 ** numOfDigits;\nconst digitsAfterPower = modStepsResults(2, power, mod, 1, (a, b) => a * b);\nconst digitsAfterMultiply = modStepsResults(\ndigitsAfterPower,\nmultiplier,\nmod,\n0,\n(a, b) => a + b\n);\nconst lastDigits = (digitsAfterMultiply + 1) % mod;\nreturn lastDigits toString() padStart(10, '0');\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2297,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-97-large-non-mersenne-prime.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "683f640ed665c23f16d515477a00008f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3c51000cf542c50fed7\ntitle: 'Problem 89: Roman numerals'\nchallengeType: 1\nforumTopicId: 302204\ndashedName: problem-89-roman-numerals\n--description--\nFor a number written in Roman numerals to be considered valid there are basic rules which must be followed Even though the rules allow some numbers to be expressed in more than one way there is always a best way of writing a particular number Numerals must be arranged in descending order of size M, C, and X cannot be equaled or exceeded by smaller denominations D, L, and V can each only appear once In addition to the three rules given above, if subtractive combinations are used then the following four rules must be followed Only one I, X, and C can be used as the leading numeral in part of a subtractive pair I can only be placed before V and X X can only be placed before L and C C can only be placed before D and M For example, it would appear that there are at least six ways of writing the number sixteen:\nIIIIIIIIIIIIIIII\nVIIIIIIIIIII\nVVIIIIII\nXIIIIII\nVVVI\nXVI\nHowever, according to the rules only XIIIIII and XVI are valid, and the last example is considered to be the most efficient, as it uses the least number of numerals The array, roman, will contain numbers written with valid, but not necessarily minimal, Roman numerals Find the number of characters saved by writing each of these in their minimal form Note: You can assume that all the Roman numerals in the array contain no more than four consecutive identical units --hints--\nromanNumerals(testNumerals1) should return a number js\nassert(typeof romanNumerals(_testNumerals1) === 'number');\nromanNumerals(testNumerals1) should return 21 js\nassert strictEqual(romanNumerals(_testNumerals1), 21);\nromanNumerals(testNumerals2) should return 743 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "615512c98ab69b485326aff9ac66f6bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "numerals The array, roman, will contain numbers written with valid, but not necessarily minimal, Roman numerals Find the number of characters saved by writing each of these in their minimal form Note: You can assume that all the Roman numerals in the array contain no more than four consecutive identical units --hints-- romanNumerals(testNumerals1) should return a number js assert(typeof romanNumerals(_testNumerals1) === 'number'); romanNumerals(testNumerals1) should return 21 js assert strictEqual(romanNumerals(_testNumerals1), 21); romanNumerals(testNumerals2) should return 743 js assertstrictEqual(romanNumerals(_testNumerals2), 743);\n--seed--\n--after-user-code--\njs\nconst _testNumerals1 = [\n'XIIIIII', 'XVI', 'MMMCCLXVIIII', 'XXXXVI', 'MMMMXX', 'CCLI', 'CCCCXX', 'MMMMDCXXXXI', 'DCCCCIIII', 'MXVIIII'\n];\nconst _testNumerals2 = [\n'MMMMDCLXXII','MMDCCCLXXXIII','MMMDLXVIIII','MMMMDXCV','DCCCLXXII','MMCCCVI','MMMCDLXXXVII','MMMMCCXXI','MMMCCXX','MMMMDCCCLXXIII','MMMCCXXXVII','MMCCCLXXXXIX','MDCCCXXIIII','MMCXCVI','CCXCVIII','MMMCCCXXXII','MDCCXXX','MMMDCCCL','MMMMCCLXXXVI','MMDCCCXCVI','MMMDCII','MMMCCXII','MMMMDCCCCI','MMDCCCXCII','MDCXX','CMLXXXVII','MMMXXI','MMMMCCCXIV','MLXXII','MCCLXXVIIII','MMMMCCXXXXI','MMDCCCLXXII','MMMMXXXI','MMMDCCLXXX','MMDCCCLXXIX','MMMMLXXXV','MCXXI','MDCCCXXXVII','MMCCCLXVII','MCDXXXV','CCXXXIII','CMXX','MMMCLXIV','MCCCLXXXVI','DCCCXCVIII','MMMDCCCCXXXIV','CDXVIIII','MMCCXXXV','MDCCCXXXII','MMMMD','MMDCCLXIX','MMMMCCCLXXXXVI','MMDCCXLII','MMMDCCCVIIII','DCCLXXXIIII','MDCCCCXXXII','MMCXXVII','DCCCXXX','CCLXIX','MMMXI','MMMMCMLXXXXVIII','MMMMDLXXXVII','MMMMDCCCLX','MMCCLIV','CMIX','MMDCCCLXXXIIII','CLXXXII','MMCCCCXXXXV','MMMMDLXXXVIIII','MMMDCCCXXI','MMDCCCCLXXVI','MCCCCLXX','MMCDLVIIII','MMMDCCCLIX','MMMMCCCCXIX','MMMDCCCLXXV','XXXI','CDLXXXIII','MMMCXV','MMDCCLXIII','MMDXXX','MMMMCCCLVII','MMMDCI','MMMMCDLXXXIIII','MMMMCCCXVI','CCCLXXXVIII','MMMMCML','MMMMXXIV','MMMCCCCXXX','DCCX','MMMCCLX','MMDXXXIII','CCCLXIII','MMDCCXIII','MMMCCCXLIV','CLXXXXI','CXVI','MMMMCXXXIII','CLXX','DCCCXVIII','MLXVII','DLXXXX','MMDXXI','MMMMDLXXXXVIII','MXXII','LXI','DCCCCXLIII','MMMMDV','MMMMXXXIV','MDCCCLVIII','MMMCCLXXII','MMMMDCCXXXVI','MMMMLXXXIX','MDCCCLXXXI','MMMMDCCCXV','MMMMCCCCXI','MMMMCCCLIII','MDCCCLXXI','MMCCCCXI','MLXV','MMCDLXII','MMMMDXXXXII','MMMMDCCCXL','MMMMCMLVI','CCLXXXIV','MMMDCCLXXXVI','MMCLII','MMMCCCCXV','MMLXXXIII','MMMV','MMMV','DCCLXII','MMDCCCCXVI','MMDCXLVIII','CCLIIII','CCCXXV','MMDCCLXXXVIIII','MMMMDCLXXVIII','MMMMDCCCXCI','MMMMCCCXX','MMCCXLV','MMMDCCCLXIX','MMCCLXIIII','MMMDCCCXLIX','MMMMCCCLXIX','CMLXXXXI','MCMLXXXIX','MMCDLXI','MMDCLXXVIII','MMMMDCCLXI','MCDXXV','DL','CCCLXXII','MXVIIII','MCCCCLXVIII','CIII','MMMDCCLXXIIII','MMMDVIII','MMMMCCCLXXXXVII','MMDXXVII','MMDCCLXXXXV','MMMMCXLVI','MMMDCCLXXXII','MMMDXXXVI','MCXXII','CLI','DCLXXXIX','MMMCLI','MDCLXIII','MMMMDCCXCVII','MMCCCLXXXV','MMMDCXXVIII','MMMCDLX','MMMCMLII','MMMIV','MMMMDCCCLVIII','MMMDLXXXVIII','MCXXIV','MMMMLXXVI','CLXXIX','MMMCCCCXXVIIII','DCCLXXXV','MMMDCCCVI','LI','CLXXXVI','MMMMCCCLXXVI','MCCCLXVI','CCXXXIX','MMDXXXXI','MMDCCCXLI','DCCCLXXXVIII','MMMMDCCCIV','MDCCCCXV','MMCMVI','MMMMCMLXXXXV','MMDCCLVI','MMMMCCXLVIII','DCCCCIIII','MMCCCCIII','MMMDCCLXXXVIIII','MDCCCLXXXXV','DVII','MMMV','DCXXV','MMDCCCXCV','DCVIII','MMCDLXVI','MCXXVIII','MDCCXCVIII','MMDCLX','MMMDCCLXIV','MMCDLXXVII','MMDLXXXIIII','MMMMCCCXXII','MMMDCCCXLIIII','DCCCCLXVII','MMMCLXXXXIII','MCCXV','MMMMDCXI','MMMMDCLXXXXV','MMMCCCLII','MMCMIX','MMDCCXXV','MMDLXXXVI','MMMMDCXXVIIII','DCCCCXXXVIIII','MMCCXXXIIII','MMDCCLXXVIII','MDCCLXVIIII','MMCCLXXXV','MMMMDCCCLXXXVIII','MMCMXCI','MDXLII','MMMMDCCXIV','MMMMLI','DXXXXIII','MMDCCXI','MMMMCCLXXXIII','MMMDCCCLXXIII','MDCLVII','MMCD','MCCCXXVII','MMMMDCCIIII','MMMDCCXLVI','MMMCLXXXVII','MMMCCVIIII','MCCCCLXXIX','DL','DCCCLXXVI','MMDXCI','MMMMDCCCCXXXVI','MMCII','MMMDCCCXXXXV','MMMCDXLV','MMDCXXXXIV','MMD','MDCCCLXXXX','MMDCXLIII','MMCCXXXII','MMDCXXXXVIIII','DCCCLXXI','MDXCVIIII','MMMMCCLXXVIII','MDCLVIIII','MMMCCCLXXXIX','MDCLXXXV','MDLVIII','MMMMCCVII','MMMMDCXIV','MMMCCCLXIIII','MMIIII','MMMMCCCLXXIII','CCIII','MMMCCLV','MMMDXIII','MMMCCCXC','MMMDCCCXXI','MMMMCCCCXXXII','CCCLVI','MMMCCCLXXXVI','MXVIIII','MMMCCCCXIIII','CLXVII','MMMCCLXX','CCCCLXIV','MMXXXXII','MMMMCCLXXXX','MXL','CCXVI','CCCCLVIIII','MMCCCII','MCCCLVIII','MMMMCCCX','MCDLXXXXIV','MDCCCXIII','MMDCCCXL','MMMMCCCXXIII','DXXXIV','CVI','MMMMDCLXXX','DCCCVII','MMCMLXIIII','MMMDCCCXXXIII','DCCC','MDIII','MMCCCLXVI','MMMCCCCLXXI','MMDCCCCXVIII','CCXXXVII','CCCXXV','MDCCCXII','MMMCMV','MMMMCMXV','MMMMDCXCI','DXXI','MMCCXLVIIII','MMMMCMLII','MDLXXX','MMDCLXVI','CXXI','MMMDCCCLIIII','MMMCXXI','MCCIII','MMDCXXXXI','CCXCII','MMMMDXXXV','MMMCCCLXV','MMMMDLXV','MMMCCCCXXXII','MMMCCCVIII','DCCCCLXXXXII','MMCLXIV','MMMMCXI','MLXXXXVII','MMMCDXXXVIII','MDXXII','MLV','MMMMDLXVI','MMMCXII','XXXIII','MMMMDCCCXXVI','MMMLXVIIII','MMMLX','MMMCDLXVII','MDCCCLVII','MMCXXXVII','MDCCCCXXX','MMDCCCLXIII','MMMMDCXLIX','MMMMCMXLVIII','DCCCLXXVIIII','MDCCCLIII','MMMCMLXI','MMMMCCLXI','MMDCCCLIII','MMMDCCCVI','MMDXXXXIX','MMCLXXXXV','MMDXXX','MMMXIII','DCLXXIX','DCCLXII','MMMMDCCLXVIII','MDCCXXXXIII','CCXXXII','MMMMDCXXV','MMMCCCXXVIII','MDCVIII','MMMCLXXXXIIII','CLXXXI','MDCCCCXXXIII','MMMMDCXXX','MMMDCXXIV','MMMCCXXXVII','MCCCXXXXIIII','CXVIII','MMDCCCCIV','MMMMCDLXXV','MMMDLXIV','MDXCIII','MCCLXXXI','MMMDCCCXXIV','MCXLIII','MMMDCCCI','MCCLXXX','CCXV','MMDCCLXXI','MMDLXXXIII','MMMMDCXVII','MMMCMLXV','MCLXVIII','MMMMCCLXXVI','MMMDCCLXVIIII','MMMMDCCCIX','DLXXXXIX','DCCCXXII','MMMMIII','MMMMCCCLXXVI','DCCCXCIII','DXXXI','MXXXIIII','CCXII','MMMDCCLXXXIIII','MMMCXX','MMMCMXXVII','DCCCXXXX','MMCDXXXVIIII','MMMMDCCXVIII','LV','MMMDCCCCVI','MCCCII','MMCMLXVIIII','MDCCXI','MMMMDLXVII','MMCCCCLXI','MMDCCV','MMMCCCXXXIIII','MMMMDI','MMMDCCCXCV','MMDCCLXXXXI','MMMDXXVI','MMMDCCCLVI','MMDCXXX','MCCCVII','MMMMCCCLXII','MMMMXXV','MMCMXXV','MMLVI','MMDXXX','MMMMCVII','MDC','MCCIII','MMMMDCC','MMCCLXXV','MMDCCCXXXXVI','MMMMCCCLXV','CDXIIII','MLXIIII','CCV','MMMCMXXXI','CCCCLXVI','MDXXXII','MMMMCCCLVIII','MMV','MMMCLII','MCMLI','MMDCCXX','MMMMCCCCXXXVI','MCCLXXXI','MMMCMVI','DCCXXX','MMMMCCCLXV','DCCCXI','MMMMDCCCXIV','CCCXXI','MMDLXXV','CCCCLXXXX','MCCCLXXXXII','MMDCIX','DCCXLIIII','DXIV','MMMMCLII','CDLXI','MMMCXXVII','MMMMDCCCCLXIII','MMMDCLIIII','MCCCCXXXXII','MMCCCLX','CCCCLIII','MDCCLXXVI','MCMXXIII','MMMMDLXXVIII','MMDCCCCLX','MMMCCCLXXXX','MMMCDXXVI','MMMDLVIII','CCCLXI','MMMMDCXXII','MMDCCCXXI','MMDCCXIII','MMMMCLXXXVI','MDCCCCXXVI','MDV','MMDCCCCLXXVI','MMMMCCXXXVII','MMMDCCLXXVIIII','MMMCCCCLXVII','DCCXLI','MMCLXXXVIII','MCCXXXVI','MMDCXLVIII','MMMMCXXXII','MMMMDCCLXVI','MMMMCMLI','MMMMCLXV','MMMMDCCCXCIV','MCCLXXVII','LXXVIIII','DCCLII','MMMCCCXCVI','MMMCLV','MMDCCCXXXXVIII','DCCCXV','MXC','MMDCCLXXXXVII','MMMMCML','MMDCCCLXXVIII','DXXI','MCCCXLI','DCLXXXXI','MMCCCLXXXXVIII','MDCCCCLXXVIII','MMMMDXXV','MMMDCXXXVI','MMMCMXCVII','MMXVIIII','MMMDCCLXXIV','MMMCXXV','DXXXVIII','MMMMCLXVI','MDXII','MMCCCLXX','CCLXXI','DXIV','MMMCLIII','DLII','MMMCCCXLIX','MMCCCCXXVI','MMDCXLIII','MXXXXII','CCCLXXXV','MDCLXXVI','MDCXII','MMMCCCLXXXIII','MMDCCCCLXXXII','MMMMCCCLXXXV','MMDCXXI','DCCCXXX','MMMDCCCCLII','MMMDCCXXII','MMMMCDXCVIII','MMMCCLXVIIII','MMXXV','MMMMCDXIX','MMMMCCCX','MMMCCCCLXVI','MMMMDCLXXVIIII','MMMMDCXXXXIV','MMMCMXII','MMMMXXXIII','MMMMDLXXXII','DCCCLIV','MDXVIIII','MMMCLXXXXV','CCCCXX','MMDIX','MMCMLXXXVIII','DCCXLIII','DCCLX','D','MCCCVII','MMMMCCCLXXXIII','MDCCCLXXIIII','MMMDCCCCLXXXVII','MMMMCCCVII','MMMDCCLXXXXVI','CDXXXIV','MCCLXVIII','MMMMDLX','MMMMDXII','MMMMCCCCLIIII','MCMLXXXXIII','MMMMDCCCIII','MMDCLXXXIII','MDCCCXXXXIV','XXXXVII','MMMDCCCXXXII','MMMDCCCXLII','MCXXXV','MDCXXVIIII','MMMCXXXXIIII','MMMMCDXVII','MMMDXXIII','MMMMCCCCLXI','DCLXXXXVIIII','LXXXXI','CXXXIII','MCDX','MCCLVII','MDCXXXXII','MMMCXXIV','MMMMLXXXX','MMDCCCCXLV','MLXXX','MMDCCCCLX','MCDLIII','MMMCCCLXVII','MMMMCCCLXXIV','MMMDCVIII','DCCCCXXIII','MMXCI','MMDCCIV','MMMMDCCCXXXIV','CCCLXXI','MCCLXXXII','MCMIII','CCXXXI','DCCXXXVIII','MMMMDCCXLVIIII','MMMMCMXXXV','DCCCLXXV','DCCXCI','MMMMDVII','MMMMDCCCLXVIIII','CCCXCV','MMMMDCCXX','MCCCCII','MMMCCCXC','MMMCCCII','MMDCCLXXVII','MMDCLIIII','CCXLIII','MMMDCXVIII','MMMCCCIX','MCXV','MMCCXXV','MLXXIIII','MDCCXXVI','MMMCCCXX','MMDLXX','MMCCCCVI','MMDCCXX','MMMMDCCCCXCV','MDCCCXXXII','MMMMDCCCCXXXX','XCIV','MMCCCCLX','MMXVII','MLXXI','MMMDXXVIII','MDCCCCII','MMMCMLVII','MMCLXXXXVIII','MDCCCCLV','MCCCCLXXIIII','MCCCLII','MCDXLVI','MMMMDXVIII','DCCLXXXIX','MMMDCCLXIV','MDCCCCXLIII','CLXXXXV','MMMMCCXXXVI','MMMDCCCXXI','MMMMCDLXXVII','MCDLIII','MMCCXLVI','DCCCLV','MCDLXX','DCLXXVIII','MMDCXXXIX','MMMMDCLX','MMDCCLI','MMCXXXV','MMMCCXII','MMMMCMLXII','MMMMCCV','MCCCCLXIX','MMMMCCIII','CLXVII','MCCCLXXXXIIII','MMMMDCVIII','MMDCCCLXI','MMLXXIX','CMLXIX','MMDCCCXLVIIII','DCLXII','MMMCCCXLVII','MDCCCXXXV','MMMMDCCXCVI','DCXXX','XXVI','MMLXIX','MMCXI','DCXXXVII','MMMMCCCXXXXVIII','MMMMDCLXI','MMMMDCLXXIIII','MMMMVIII','MMMMDCCCLXII','MDCXCI','MMCCCXXIIII','CCCCXXXXV','MMDCCCXXI','MCVI','MMDCCLXVIII','MMMMCXL','MLXVIII','CMXXVII','CCCLV','MDCCLXXXIX','MMMCCCCLXV','MMDCCLXII','MDLXVI','MMMCCCXVIII','MMMMCCLXXXI','MMCXXVII','MMDCCCLXVIII','MMMCXCII','MMMMDCLVIII','MMMMDCCCXXXXII','MMDCCCCLXXXXVI','MDCCXL','MDCCLVII','MMMMDCCCLXXXVI','DCCXXXIII','MMMMDCCCCLXXXV','MMCCXXXXVIII','MMMCCLXXVIII','MMMDCLXXVIII','DCCCI','MMMMLXXXXVIIII','MMMCCCCLXXII','MMCLXXXVII','CCLXVI','MCDXLIII','MMCXXVIII','MDXIV','CCCXCVIII','CLXXVIII','MMCXXXXVIIII','MMMDCLXXXIV','CMLVIII','MCDLIX','MMMMDCCCXXXII','MMMMDCXXXIIII','MDCXXI','MMMDCXLV','MCLXXVIII','MCDXXII','IV','MCDLXXXXIII','MMMMDCCLXV','CCLI','MMMMDCCCXXXVIII','DCLXII','MCCCLXVII','MMMMDCCCXXXVI','MMDCCXLI','MLXI','MMMCDLXVIII','MCCCCXCIII','XXXIII','MMMDCLXIII','MMMMDCL','DCCCXXXXIIII','MMDLVII','DXXXVII','MCCCCXXIIII','MCVII','MMMMDCCXL','MMMMCXXXXIIII','MCCCCXXIV','MMCLXVIII','MMXCIII','MDCCLXXX','MCCCLIIII','MMDCLXXI','MXI','MCMLIV','MMMCCIIII','DCCLXXXVIIII','MDCLIV','MMMDCXIX','CMLXXXI','DCCLXXXVII','XXV','MMMXXXVI','MDVIIII','CLXIII','MMMCDLVIIII','MMCCCCVII','MMMLXX','MXXXXII','MMMMCCCLXVIII','MMDCCCXXVIII','MMMMDCXXXXI','MMMMDCCCXXXXV','MMMXV','MMMMCCXVIIII','MMDCCXIIII','MMMXXVII','MDCCLVIIII','MMCXXIIII','MCCCLXXIV','DCLVIII','MMMLVII','MMMCXLV','MMXCVII','MMMCCCLXXXVII','MMMMCCXXII','DXII','MMMDLV','MCCCLXXVIII','MMMCLIIII','MMMMCLXXXX','MMMCLXXXIIII','MDCXXIII','MMMMCCXVI','MMMMDLXXXIII','MMMDXXXXIII','MMMMCCCCLV','MMMDLXXXI','MMMCCLXXVI','MMMMXX','MMMMDLVI','MCCCCLXXX','MMMXXII','MMXXII','MMDCCCCXXXI','MMMDXXV','MMMDCLXXXVIIII','MMMDLXXXXVII','MDLXIIII','CMXC','MMMXXXVIII','MDLXXXVIII','MCCCLXXVI','MMCDLIX','MMDCCCXVIII','MDCCCXXXXVI','MMMMCMIV','MMMMDCIIII','MMCCXXXV','XXXXVI','MMMMCCXVII','MMCCXXIV','MCMLVIIII','MLXXXIX','MMMMLXXXIX','CLXXXXIX','MMMDCCCCLVIII','MMMMCCLXXIII','MCCCC','DCCCLIX','MMMCCCLXXXII','MMMCCLXVIIII','MCLXXXV','CDLXXXVII','DCVI','MMX','MMCCXIII','MMMMDCXX','MMMMXXVIII','DCCCLXII','MMMMCCCXLIII','MMMMCLXV','DXCI','MMMMCLXXX','MMMDCCXXXXI','MMMMXXXXVI','DCLX','MMMCCCXI','MCCLXXX','MMCDLXXII','DCCLXXI','MMMCCCXXXVI','MCCCCLXXXVIIII','CDLVIII','DCCLVI','MMMMDCXXXVIII','MMCCCLXXXIII','MMMMDCCLXXV','MMMXXXVI','CCCLXXXXIX','CV','CCCCXIII','CCCCXVI','MDCCCLXXXIIII','MMDCCLXXXII','MMMMCCCCLXXXI','MXXV','MMCCCLXXVIIII','MMMCCXII','MMMMCCXXXIII','MMCCCLXXXVI','MMMDCCCLVIIII','MCCXXXVII','MDCLXXV','XXXV','MMDLI','MMMCCXXX','MMMMCXXXXV','CCCCLIX','MMMMDCCCLXXIII','MMCCCXVII','DCCCXVI','MMMCCCXXXXV','MDCCCCXCV','CLXXXI','MMMMDCCLXX','MMMDCCCIII','MMCLXXVII','MMMDCCXXIX','MMDCCCXCIIII','MMMCDXXIIII','MMMMXXVIII','MMMMDCCCCLXVIII','MDCCCXX','MMMMCDXXI','MMMMDLXXXIX','CCXVI','MDVIII','MMCCLXXI','MMMDCCCLXXI','MMMCCCLXXVI','MMCCLXI','MMMMDCCCXXXIV','DLXXXVI','MMMMDXXXII','MMMXXIIII','MMMMCDIV','MMMMCCCXLVIII','MMMMCXXXVIII','MMMCCCLXVI','MDCCXVIII','MMCXX','CCCLIX','MMMMDCCLXXII','MDCCCLXXV','MMMMDCCCXXIV','DCCCXXXXVIII','MMMDCCCCXXXVIIII','MMMMCCXXXV','MDCLXXXIII','MMCCLXXXIV','MCLXXXXIIII','DXXXXIII','MCCCXXXXVIII','MMCLXXIX','MMMMCCLXIV','MXXII','MMMCXIX','MDCXXXVII','MMDCCVI','MCLXXXXVIII','MMMCXVI','MCCCLX','MMMCDX','CCLXVIIII','MMMCCLX','MCXXVIII','LXXXII','MCCCCLXXXI','MMMI','MMMCCCLXIV','MMMCCCXXVIIII','CXXXVIII','MMCCCXX','MMMCCXXVIIII','MCCLXVI','MMMCCCCXXXXVI','MMDCCXCIX','MCMLXXI','MMCCLXVIII','CDLXXXXIII','MMMMDCCXXII','MMMMDCCLXXXVII','MMMDCCLIV','MMCCLXIII','MDXXXVII','DCCXXXIIII','MCII','MMMDCCCLXXI','MMMLXXIII','MDCCCLIII','MMXXXVIII','MDCCXVIIII','MDCCCCXXXVII','MMCCCXVI','MCMXXII','MMMCCCLVIII','MMMMDCCCXX','MCXXIII','MMMDLXI','MMMMDXXII','MDCCCX','MMDXCVIIII','MMMDCCCCVIII','MMMMDCCCCXXXXVI','MMDCCCXXXV','MMCXCIV','MCMLXXXXIII','MMMCCCLXXVI','MMMMDCLXXXV','CMLXIX','DCXCII','MMXXVIII','MMMMCCCXXX','XXXXVIIII'\n];\n--seed-contents--\n```js\nfunction romanNumerals(roman) {\nreturn true;\n}\n// Only change code above this line\nconst testNumerals1 = [\n'XIIIIII', 'XVI', 'MMMCCLXVIIII', 'XXXXVI', 'MMMMXX', 'CCLI', 'CCCCXX', 'MMMMDCXXXXI', 'DCCCCIIII', 'MXVIIII'\n];\nromanNumerals(testNumerals1);\n```\n--solutions--\n```js\nconst romanArabicPairs = [\n[1000, \"M\"],\n[900, \"CM\"],\n[500, \"D\"],\n[400, \"CD\"],\n[100, \"C\"],\n[90, \"XC\"],\n[50, \"L\"],\n[40, \"XL\"],\n[10, \"X\"],\n[9, \"IX\"],\n[5, \"V\"],\n[4, \"IV\"],\n[1, \"I\"],\n]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
      "source_type": "git_repo"
    },
    "token_count": 5634,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "6a85260bf7fc1d956f84a33a4ee5d76f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'CCCCXX', 'MMMMDCXXXXI', 'DCCCCIIII', 'MXVIIII' ]; const _testNumerals2 = [ 'MMMMDCLXXII','MMDCCCLXXXIII','MMMDLXVIIII','MMMMDXCV','DCCCLXXII','MMCCCVI','MMMCDLXXXVII','MMMMCCXXI','MMMCCXX','MMMMDCCCLXXIII','MMMCCXXXVII','MMCCCLXXXXIX','MDCCCXXIIII','MMCXCVI','CCXCVIII','MMMCCCXXXII','MDCCXXX','MMMDCCCL','MMMMCCLXXXVI','MMDCCCXCVI','MMMDCII','MMMCCXII','MMMMDCCCCI','MMDCCCXCII','MDCXX','CMLXXXVII','MMMXXI','MMMMCCCXIV','MLXXII','MCCLXXVIIII','MMMMCCXXXXI','MMDCCCLXXII','MMMMXXXI','MMMDCCLXXX','MMDCCCLXXIX','MMMMLXXXV','MCXXI','MDCCCXXXVII','MMCCCLXVII','MCDXXXV','CCXXXIII','CMXX','MMMCLXIV','MCCCLXXXVI','DCCCXCVIII','MMMDCCCCXXXIV','CDXVIIII','MMCCXXXV','MDCCCXXXII','MMMMD','MMDCCLXIX','MMMMCCCLXXXXVI','MMDCCXLII','MMMDCCCVIIII','DCCLXXXIIII','MDCCCCXXXII','MMCXXVII','DCCCXXX','CCLXIX','MMMXI','MMMMCMLXXXXVIII','MMMMDLXXXVII','MMMMDCCCLX','MMCCLIV','CMIX','MMDCCCLXXXIIII','CLXXXII','MMCCCCXXXXV','MMMMDLXXXVIIII','MMMDCCCXXI','MMDCCCCLXXVI','MCCCCLXX','MMCDLVIIII','MMMDCCCLIX','MMMMCCCCXIX','MMMDCCCLXXV','XXXI','CDLXXXIII','MMMCXV','MMDCCLXIII','MMDXXX','MMMMCCCLVII','MMMDCI','MMMMCDLXXXIIII','MMMMCCCXVI','CCCLXXXVIII','MMMMCML','MMMMXXIV','MMMCCCCXXX','DCCX','MMMCCLX','MMDXXXIII','CCCLXIII','MMDCCXIII','MMMCCCXLIV','CLXXXXI','CXVI','MMMMCXXXIII','CLXX','DCCCXVIII','MLXVII','DLXXXX','MMDXXI','MMMMDLXXXXVIII','MXXII','LXI','DCCCCXLIII','MMMMDV','MMMMXXXIV','MDCCCLVIII','MMMCCLXXII','MMMMDCCXXXVI','MMMMLXXXIX','MDCCCLXXXI','MMMMDCCCXV','MMMMCCCCXI','MMMMCCCLIII','MDCCCLXXI','MMCCCCXI','MLXV','MMCDLXII','MMMMDXXXXII','MMMMDCCCXL','MMMMCMLVI','CCLXXXIV','MMMDCCLXXXVI','MMCLII','MMMCCCCXV','MMLXXXIII','MMMV','MMMV','DCCLXII','MMDCCCCXVI','MMDCXLVIII','CCLIIII','CCCXXV','MMDCCLXXXVIIII','MMMMDCLXXVIII','MMMMDCCCXCI','MMMMCCCXX','MMCCXLV','MMMDCCCLXIX','MMCCLXIIII','MMMDCCCXLIX','MMMMCCCLXIX','CMLXXXXI','MCMLXXXIX','MMCDLXI','MMDCLXXVIII','MMMMDCCLXI','MCDXXV','DL','CCCLXXII','MXVIIII','MCCCCLXVIII','CIII','MMMDCCLXXIIII','MMMDVIII','MMMMCCCLXXXXVII','MMDXXVII','MMDCCLXXXXV','MMMMCXLVI','MMMDCCLXXXII','MMMDXXXVI','MCXXII','CLI','DCLXXXIX','MMMCLI','MDCLXIII','MMMMDCCXCVII','MMCCCLXXXV','MMMDCXXVIII','MMMCDLX','MMMCMLII','MMMIV','MMMMDCCCLVIII','MMMDLXXXVIII','MCXXIV','MMMMLXXVI','CLXXIX','MMMCCCCXXVIIII','DCCLXXXV','MMMDCCCVI','LI','CLXXXVI','MMMMCCCLXXVI','MCCCLXVI','CCXXXIX','MMDXXXXI','MMDCCCXLI','DCCCLXXXVIII','MMMMDCCCIV','MDCCCCXV','MMCMVI','MMMMCMLXXXXV','MMDCCLVI','MMMMCCXLVIII','DCCCCIIII','MMCCCCIII','MMMDCCLXXXVIIII','MDCCCLXXXXV','DVII','MMMV','DCXXV','MMDCCCXCV','DCVIII','MMCDLXVI','MCXXVIII','MDCCXCVIII','MMDCLX','MMMDCCLXIV','MMCDLXXVII','MMDLXXXIIII','MMMMCCCXXII','MMMDCCCXLIIII','DCCCCLXVII','MMMCLXXXXIII','MCCXV','MMMMDCXI','MMMMDCLXXXXV','MMMCCCLII','MMCMIX','MMDCCXXV','MMDLXXXVI','MMMMDCXXVIIII','DCCCCXXXVIIII','MMCCXXXIIII','MMDCCLXXVIII','MDCCLXVIIII','MMCCLXXXV','MMMMDCCCLXXXVIII','MMCMXCI','MDXLII','MMMMDCCXIV','MMMMLI','DXXXXIII','MMDCCXI','MMMMCCLXXXIII','MMMDCCCLXXIII','MDCLVII','MMCD','MCCCXXVII','MMMMDCCIIII','MMMDCCXLVI','MMMCLXXXVII','MMMCCVIIII','MCCCCLXXIX','DL','DCCCLXXVI','MMDXCI','MMMMDCCCCXXXVI','MMCII','MMMDCCCXXXXV','MMMCDXLV','MMDCXXXXIV','MMD','MDCCCLXXXX','MMDCXLIII','MMCCXXXII','MMDCXXXXVIIII','DCCCLXXI','MDXCVIIII','MMMMCCLXXVIII','MDCLVIIII','MMMCCCLXXXIX','MDCLXXXV','MDLVIII','MMMMCCVII','MMMMDCXIV','MMMCCCLXIIII','MMIIII','MMMMCCCLXXIII','CCIII','MMMCCLV','MMMDXIII','MMMCCCXC','MMMDCCCXXI','MMMMCCCCXXXII','CCCLVI','MMMCCCLXXXVI','MXVIIII','MMMCCCCXIIII','CLXVII','MMMCCLXX','CCCCLXIV','MMXXXXII','MMMMCCLXXXX','MXL','CCXVI','CCCCLVIIII','MMCCCII','MCCCLVIII','MMMMCCCX','MCDLXXXXIV','MDCCCXIII','MMDCCCXL','MMMMCCCXXIII','DXXXIV','CVI','MMMMDCLXXX','DCCCVII','MMCMLXIIII','MMMDCCCXXXIII','DCCC','MDIII','MMCCCLXVI','MMMCCCCLXXI','MMDCCCCXVIII','CCXXXVII','CCCXXV','MDCCCXII','MMMCMV','MMMMCMXV','MMMMDCXCI','DXXI','MMCCXLVIIII','MMMMCMLII','MDLXXX','MMDCLXVI','CXXI','MMMDCCCLIIII','MMMCXXI','MCCIII','MMDCXXXXI','CCXCII','MMMMDXXXV','MMMCCCLXV','MMMMDLXV','MMMCCCCXXXII','MMMCCCVIII','DCCCCLXXXXII','MMCLXIV','MMMMCXI','MLXXXXVII','MMMCDXXXVIII','MDXXII','MLV','MMMMDLXVI','MMMCXII','XXXIII','MMMMDCCCXXVI','MMMLXVIIII','MMMLX','MMMCDLXVII','MDCCCLVII','MMCXXXVII','MDCCCCXXX','MMDCCCLXIII','MMMMDCXLIX','MMMMCMXLVIII','DCCCLXXVIIII','MDCCCLIII','MMMCMLXI','MMMMCCLXI','MMDCCCLIII','MMMDCCCVI','MMDXXXXIX','MMCLXXXXV','MMDXXX','MMMXIII','DCLXXIX','DCCLXII','MMMMDCCLXVIII','MDCCXXXXIII','CCXXXII','MMMMDCXXV','MMMCCCXXVIII','MDCVIII','MMMCLXXXXIIII','CLXXXI','MDCCCCXXXIII','MMMMDCXXX','MMMDCXXIV','MMMCCXXXVII','MCCCXXXXIIII','CXVIII','MMDCCCCIV','MMMMCDLXXV','MMMDLXIV','MDXCIII','MCCLXXXI','MMMDCCCXXIV','MCXLIII','MMMDCCCI','MCCLXXX','CCXV','MMDCCLXXI','MMDLXXXIII','MMMMDCXVII','MMMCMLXV','MCLXVIII','MMMMCCLXXVI','MMMDCCLXVIIII','MMMMDCCCIX','DLXXXXIX','DCCCXXII','MMMMIII','MMMMCCCLXXVI','DCCCXCIII','DXXXI','MXXXIIII','CCXII','MMMDCCLXXXIIII','MMMCXX','MMMCMXXVII','DCCCXXXX','MMCDXXXVIIII','MMMMDCCXVIII','LV','MMMDCCCCVI','MCCCII','MMCMLXVIIII','MDCCXI','MMMMDLXVII','MMCCCCLXI','MMDCCV','MMMCCCXXXIIII','MMMMDI','MMMDCCCXCV','MMDCCLXXXXI','MMMDXXVI','MMMDCCCLVI','MMDCXXX','MCCCVII','MMMMCCCLXII','MMMMXXV','MMCMXXV','MMLVI','MMDXXX','MMMMCVII','MDC','MCCIII','MMMMDCC','MMCCLXXV','MMDCCCXXXXVI','MMMMCCCLXV','CDXIIII','MLXIIII','CCV','MMMCMXXXI','CCCCLXVI','MDXXXII','MMMMCCCLVIII','MMV','MMMCLII','MCMLI','MMDCCXX','MMMMCCCCXXXVI','MCCLXXXI','MMMCMVI','DCCXXX','MMMMCCCLXV','DCCCXI','MMMMDCCCXIV','CCCXXI','MMDLXXV','CCCCLXXXX','MCCCLXXXXII','MMDCIX','DCCXLIIII','DXIV','MMMMCLII','CDLXI','MMMCXXVII','MMMMDCCCCLXIII','MMMDCLIIII','MCCCCXXXXII','MMCCCLX','CCCCLIII','MDCCLXXVI','MCMXXIII','MMMMDLXXVIII','MMDCCCCLX','MMMCCCLXXXX','MMMCDXXVI','MMMDLVIII','CCCLXI','MMMMDCXXII','MMDCCCXXI','MMDCCXIII','MMMMCLXXXVI','MDCCCCXXVI','MDV','MMDCCCCLXXVI','MMMMCCXXXVII','MMMDCCLXXVIIII','MMMCCCCLXVII','DCCXLI','MMCLXXXVIII','MCCXXXVI','MMDCXLVIII','MMMMCXXXII','MMMMDCCLXVI','MMMMCMLI','MMMMCLXV','MMMMDCCCXCIV','MCCLXXVII','LXXVIIII','DCCLII','MMMCCCXCVI','MMMCLV','MMDCCCXXXXVIII','DCCCXV','MXC','MMDCCLXXXXVII','MMMMCML','MMDCCCLXXVIII','DXXI','MCCCXLI','DCLXXXXI','MMCCCLXXXXVIII','MDCCCCLXXVIII','MMMMDXXV','MMMDCXXXVI','MMMCMXCVII','MMXVIIII','MMMDCCLXXIV','MMMCXXV','DXXXVIII','MMMMCLXVI','MDXII','MMCCCLXX','CCLXXI','DXIV','MMMCLIII','DLII','MMMCCCXLIX','MMCCCCXXVI','MMDCXLIII','MXXXXII','CCCLXXXV','MDCLXXVI','MDCXII','MMMCCCLXXXIII','MMDCCCCLXXXII','MMMMCCCLXXXV','MMDCXXI','DCCCXXX','MMMDCCCCLII','MMMDCCXXII','MMMMCDXCVIII','MMMCCLXVIIII','MMXXV','MMMMCDXIX','MMMMCCCX','MMMCCCCLXVI','MMMMDCLXXVIIII','MMMMDCXXXXIV','MMMCMXII','MMMMXXXIII','MMMMDLXXXII','DCCCLIV','MDXVIIII','MMMCLXXXXV','CCCCXX','MMDIX','MMCMLXXXVIII','DCCXLIII','DCCLX','D','MCCCVII','MMMMCCCLXXXIII','MDCCCLXXIIII','MMMDCCCCLXXXVII','MMMMCCCVII','MMMDCCLXXXXVI','CDXXXIV','MCCLXVIII','MMMMDLX','MMMMDXII','MMMMCCCCLIIII','MCMLXXXXIII','MMMMDCCCIII','MMDCLXXXIII','MDCCCXXXXIV','XXXXVII','MMMDCCCXXXII','MMMDCCCXLII','MCXXXV','MDCXXVIIII','MMMCXXXXIIII','MMMMCDXVII','MMMDXXIII','MMMMCCCCLXI','DCLXXXXVIIII','LXXXXI','CXXXIII','MCDX','MCCLVII','MDCXXXXII','MMMCXXIV','MMMMLXXXX','MMDCCCCXLV','MLXXX','MMDCCCCLX','MCDLIII','MMMCCCLXVII','MMMMCCCLXXIV','MMMDCVIII','DCCCCXXIII','MMXCI','MMDCCIV','MMMMDCCCXXXIV','CCCLXXI','MCCLXXXII','MCMIII','CCXXXI','DCCXXXVIII','MMMMDCCXLVIIII','MMMMCMXXXV','DCCCLXXV','DCCXCI','MMMMDVII','MMMMDCCCLXVIIII','CCCXCV','MMMMDCCXX','MCCCCII','MMMCCCXC','MMMCCCII','MMDCCLXXVII','MMDCLIIII','CCXLIII','MMMDCXVIII','MMMCCCIX','MCXV','MMCCXXV','MLXXIIII','MDCCXXVI','MMMCCCXX','MMDLXX','MMCCCCVI','MMDCCXX','MMMMDCCCCXCV','MDCCCXXXII','MMMMDCCCCXXXX','XCIV','MMCCCCLX','MMXVII','MLXXI','MMMDXXVIII','MDCCCCII','MMMCMLVII','MMCLXXXXVIII','MDCCCCLV','MCCCCLXXIIII','MCCCLII','MCDXLVI','MMMMDXVIII','DCCLXXXIX','MMMDCCLXIV','MDCCCCXLIII','CLXXXXV','MMMMCCXXXVI','MMMDCCCXXI','MMMMCDLXXVII','MCDLIII','MMCCXLVI','DCCCLV','MCDLXX','DCLXXVIII','MMDCXXXIX','MMMMDCLX','MMDCCLI','MMCXXXV','MMMCCXII','MMMMCMLXII','MMMMCCV','MCCCCLXIX','MMMMCCIII','CLXVII','MCCCLXXXXIIII','MMMMDCVIII','MMDCCCLXI','MMLXXIX','CMLXIX','MMDCCCXLVIIII','DCLXII','MMMCCCXLVII','MDCCCXXXV','MMMMDCCXCVI','DCXXX','XXVI','MMLXIX','MMCXI','DCXXXVII','MMMMCCCXXXXVIII','MMMMDCLXI','MMMMDCLXXIIII','MMMMVIII','MMMMDCCCLXII','MDCXCI','MMCCCXXIIII','CCCCXXXXV','MMDCCCXXI','MCVI','MMDCCLXVIII','MMMMCXL','MLXVIII','CMXXVII','CCCLV','MDCCLXXXIX','MMMCCCCLXV','MMDCCLXII','MDLXVI','MMMCCCXVIII','MMMMCCLXXXI','MMCXXVII','MMDCCCLXVIII','MMMCXCII','MMMMDCLVIII','MMMMDCCCXXXXII','MMDCCCCLXXXXVI','MDCCXL','MDCCLVII','MMMMDCCCLXXXVI','DCCXXXIII','MMMMDCCCCLXXXV','MMCCXXXXVIII','MMMCCLXXVIII','MMMDCLXXVIII','DCCCI','MMMMLXXXXVIIII','MMMCCCCLXXII','MMCLXXXVII','CCLXVI','MCDXLIII','MMCXXVIII','MDXIV','CCCXCVIII','CLXXVIII','MMCXXXXVIIII','MMMDCLXXXIV','CMLVIII','MCDLIX','MMMMDCCCXXXII','MMMMDCXXXIIII','MDCXXI','MMMDCXLV','MCLXXVIII','MCDXXII','IV','MCDLXXXXIII','MMMMDCCLXV','CCLI','MMMMDCCCXXXVIII','DCLXII','MCCCLXVII','MMMMDCCCXXXVI','MMDCCXLI','MLXI','MMMCDLXVIII','MCCCCXCIII','XXXIII','MMMDCLXIII','MMMMDCL','DCCCXXXXIIII','MMDLVII','DXXXVII','MCCCCXXIIII','MCVII','MMMMDCCXL','MMMMCXXXXIIII','MCCCCXXIV','MMCLXVIII','MMXCIII','MDCCLXXX','MCCCLIIII','MMDCLXXI','MXI','MCMLIV','MMMCCIIII','DCCLXXXVIIII','MDCLIV','MMMDCXIX','CMLXXXI','DCCLXXXVII','XXV','MMMXXXVI','MDVIIII','CLXIII','MMMCDLVIIII','MMCCCCVII','MMMLXX','MXXXXII','MMMMCCCLXVIII','MMDCCCXXVIII','MMMMDCXXXXI','MMMMDCCCXXXXV','MMMXV','MMMMCCXVIIII','MMDCCXIIII','MMMXXVII','MDCCLVIIII','MMCXXIIII','MCCCLXXIV','DCLVIII','MMMLVII','MMMCXLV','MMXCVII','MMMCCCLXXXVII','MMMMCCXXII','DXII','MMMDLV','MCCCLXXVIII','MMMCLIIII','MMMMCLXXXX','MMMCLXXXIIII','MDCXXIII','MMMMCCXVI','MMMMDLXXXIII','MMMDXXXXIII','MMMMCCCCLV','MMMDLXXXI','MMMCCLXXVI','MMMMXX','MMMMDLVI','MCCCCLXXX','MMMXXII','MMXXII','MMDCCCCXXXI','MMMDXXV','MMMDCLXXXVIIII','MMMDLXXXXVII','MDLXIIII','CMXC','MMMXXXVIII','MDLXXXVIII','MCCCLXXVI','MMCDLIX','MMDCCCXVIII','MDCCCXXXXVI','MMMMCMIV','MMMMDCIIII','MMCCXXXV','XXXXVI','MMMMCCXVII','MMCCXXIV','MCMLVIIII','MLXXXIX','MMMMLXXXIX','CLXXXXIX','MMMDCCCCLVIII','MMMMCCLXXIII','MCCCC','DCCCLIX','MMMCCCLXXXII','MMMCCLXVIIII','MCLXXXV','CDLXXXVII','DCVI','MMX','MMCCXIII','MMMMDCXX','MMMMXXVIII','DCCCLXII','MMMMCCCXLIII','MMMMCLXV','DXCI','MMMMCLXXX','MMMDCCXXXXI','MMMMXXXXVI','DCLX','MMMCCCXI','MCCLXXX','MMCDLXXII','DCCLXXI','MMMCCCXXXVI','MCCCCLXXXVIIII','CDLVIII','DCCLVI','MMMMDCXXXVIII','MMCCCLXXXIII','MMMMDCCLXXV','MMMXXXVI','CCCLXXXXIX','CV','CCCCXIII','CCCCXVI','MDCCCLXXXIIII','MMDCCLXXXII','MMMMCCCCLXXXI','MXXV','MMCCCLXXVIIII','MMMCCXII','MMMMCCXXXIII','MMCCCLXXXVI','MMMDCCCLVIIII','MCCXXXVII','MDCLXXV','XXXV','MMDLI','MMMCCXXX','MMMMCXXXXV','CCCCLIX','MMMMDCCCLXXIII','MMCCCXVII','DCCCXVI','MMMCCCXXXXV','MDCCCCXCV','CLXXXI','MMMMDCCLXX','MMMDCCCIII','MMCLXXVII','MMMDCCXXIX','MMDCCCXCIIII','MMMCDXXIIII','MMMMXXVIII','MMMMDCCCCLXVIII','MDCCCXX','MMMMCDXXI','MMMMDLXXXIX','CCXVI','MDVIII','MMCCLXXI','MMMDCCCLXXI','MMMCCCLXXVI','MMCCLXI','MMMMDCCCXXXIV','DLXXXVI','MMMMDXXXII','MMMXXIIII','MMMMCDIV','MMMMCCCXLVIII','MMMMCXXXVIII','MMMCCCLXVI','MDCCXVIII','MMCXX','CCCLIX','MMMMDCCLXXII','MDCCCLXXV','MMMMDCCCXXIV','DCCCXXXXVIII','MMMDCCCCXXXVIIII','MMMMCCXXXV','MDCLXXXIII','MMCCLXXXIV','MCLXXXXIIII','DXXXXIII','MCCCXXXXVIII','MMCLXXIX','MMMMCCLXIV','MXXII','MMMCXIX','MDCXXXVII','MMDCCVI','MCLXXXXVIII','MMMCXVI','MCCCLX','MMMCDX','CCLXVIIII','MMMCCLX','MCXXVIII','LXXXII','MCCCCLXXXI','MMMI','MMMCCCLXIV','MMMCCCXXVIIII','CXXXVIII','MMCCCXX','MMMCCXXVIIII','MCCLXVI','MMMCCCCXXXXVI','MMDCCXCIX','MCMLXXI','MMCCLXVIII','CDLXXXXIII','MMMMDCCXXII','MMMMDCCLXXXVII','MMMDCCLIV','MMCCLXIII','MDXXXVII','DCCXXXIIII','MCII','MMMDCCCLXXI','MMMLXXIII','MDCCCLIII','MMXXXVIII','MDCCXVIIII','MDCCCCXXXVII','MMCCCXVI','MCMXXII','MMMCCCLVIII','MMMMDCCCXX','MCXXIII','MMMDLXI','MMMMDXXII','MDCCCX','MMDXCVIIII','MMMDCCCCVIII','MMMMDCCCCXXXXVI','MMDCCCXXXV','MMCXCIV','MCMLXXXXIII','MMMCCCLXXVI','MMMMDCLXXXV','CMLXIX','DCXCII','MMXXVIII','MMMMCCCXXX','XXXXVIIII' ]; --seed-contents-- ```js function romanNumerals(roman) { return true; } // Only change code above this line const testNumerals1 = [ 'XIIIIII', 'XVI', 'MMMCCLXVIIII', 'XXXXVI', 'MMMMXX', 'CCLI', 'CCCCXX', 'MMMMDCXXXXI', 'DCCCCIIII', 'MXVIIII' ]; romanNumerals(testNumerals1); ``` --solutions-- ```js const romanArabicPairs = [ [1000, \"M\"], [900, \"CM\"], [500, \"D\"], [400, \"CD\"], [100, \"C\"], [90, \"XC\"], [50, \"L\"], [40, \"XL\"], [10, \"X\"], [9, \"IX\"], [5, \"V\"], [4, \"IV\"], [1, \"I\"], ]sort((a, b) => b[0] - a[0]);\nfunction romanToArabic(num) {\nlet arabic = 0;\nfor (let i = 0; i < num",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
      "source_type": "git_repo"
    },
    "token_count": 5475,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "958423cc7a0178c2bea7b3d1370b0a39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Only change code above this line const testNumerals1 = [ 'XIIIIII', 'XVI', 'MMMCCLXVIIII', 'XXXXVI', 'MMMMXX', 'CCLI', 'CCCCXX', 'MMMMDCXXXXI', 'DCCCCIIII', 'MXVIIII' ]; romanNumerals(testNumerals1); ``` --solutions-- ```js const romanArabicPairs = [ [1000, \"M\"], [900, \"CM\"], [500, \"D\"], [400, \"CD\"], [100, \"C\"], [90, \"XC\"], [50, \"L\"], [40, \"XL\"], [10, \"X\"], [9, \"IX\"], [5, \"V\"], [4, \"IV\"], [1, \"I\"], ]sort((a, b) => b[0] - a[0]); function romanToArabic(num) { let arabic = 0; for (let i = 0; i < numlength; i++) {\nswitch (num[i]) {\ncase 'M':\narabic += 1000;\nbreak;\ncase 'D':\narabic += 500;\nbreak;\ncase 'L':\narabic += 50;\nbreak;\ncase 'V':\narabic += 5;\nbreak;\ncase 'C':\nif (num[i + 1] === 'M') {\narabic += 900;\ni++;\n} else if (num[i + 1] === 'D') {\narabic += 400;\ni++\n} else {\narabic += 100;\n}\nbreak;\ncase 'X':\nif (num[i + 1] === 'C') {\narabic += 90;\ni++;\n} else if (num[i + 1] === 'L') {\narabic += 40;\ni++\n} else {\narabic += 10;\n}\nbreak;\ncase 'I':\nif (num[i + 1] === 'X') {\narabic += 9;\ni++;\n} else if (num[i + 1] === 'V') {\narabic += 4;\ni++\n} else {\narabic += 1;\n}\nbreak;\n}\n}\nreturn arabic;\n}\nfunction arabicToRoman(num) {\nreturn romanArabicPairs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "e652075f0c487eb0d0315c943ef7bf8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "if (num[i + 1] === 'C') { arabic += 90; i++; } else if (num[i + 1] === 'L') { arabic += 40; i++ } else { arabic += 10; } break; case 'I': if (num[i + 1] === 'X') { arabic += 9; i++; } else if (num[i + 1] === 'V') { arabic += 4; i++ } else { arabic += 1; } break; } } return arabic; } function arabicToRoman(num) { return romanArabicPairsreduce((romanNum, pair) => {\nconst arabic = pair[0];\nconst roman = pair[1];\nwhile (num >= arabic) {\nnum -= arabic;\nromanNum += roman;\n}\nreturn romanNum;\n},\n\"\");\n}\nfunction romanNumerals(roman) {\nconst numerals = [ roman];\nlet savedChars = 0;\nfor (let i = 0; i < numerals length; i++) {\nconst charsBefore = numerals[i] length;\nnumerals[i] = arabicToRoman(romanToArabic(numerals[i]));\nconst charsAfter = numerals[i] length;\nsavedChars += charsBefore - charsAfter;\n}\nreturn savedChars;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 16365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "11d9b634b3d7f03feb9a1ba2a6710f51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-101-optimum-polynomial.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d21000cf542c50fee4\ntitle: 'Problem 101: Optimum polynomial'\nchallengeType: 1\nforumTopicId: 301725\ndashedName: problem-101-optimum-polynomial\n--description--\nIf we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence As an example, let us consider the sequence of cube numbers This is defined by the generating function, $u_n = n^3: 1, 8, 27, 64, 125, 216, \\ldots$\nSuppose we were only given the first two terms of this sequence Working on the principle that \"simple is best\" we should assume a linear relationship and predict the next term to be 15 (common difference 7) Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed We shall define $OP(k, n)$ to be the $n^{th}$ term of the optimum polynomial generating function for the first k terms of a sequence It should be clear that $OP(k, n)$ will accurately generate the terms of the sequence for $n ≤ k$, and potentially the first incorrect term (FIT) will be $OP(k, k+1)$; in which case we shall call it a bad OP (BOP) As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for $n ≥ 2, OP(1, n) = u_1$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2371,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-101-optimum-polynomial.md",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ad115f8a89be54ba3c2124becaf75efc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-101-optimum-polynomial.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "terms of a sequence It should be clear that $OP(k, n)$ will accurately generate the terms of the sequence for $n ≤ k$, and potentially the first incorrect term (FIT) will be $OP(k, k+1)$; in which case we shall call it a bad OP (BOP) As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for $n ≥ 2, OP(1, n) = u_1$Hence we obtain the following OPs for the cubic sequence:\n$$\\begin{array}{ll}\nOP(1, n) = 1          & 1, {\\color{red}1}, 1, 1, \\ldots     \\\\\nOP(2, n) = 7n−6       & 1, 8, {\\color{red}{15}}, \\ldots     \\\\\nOP(3, n) = 6n^2−11n+6 & 1, 8, 27, {\\color{red}{58}}, \\ldots \\\\\nOP(4, n) = n^3        & 1, 8, 27, 64, 125, \\ldots\n\\end{array}$$\nClearly no BOPs exist for k ≥ 4 By considering the sum of FITs generated by the BOPs (indicated in $\\color{red}{red}$ above), we obtain 1 + 15 + 58 = 74 Consider the following tenth degree polynomial generating function:\n$$u_n = 1 − n + n^2 − n^3 + n^4 − n^5 + n^6 − n^7 + n^8 − n^9 + n^{10}$$\nFind the sum of FITs for the BOPs --hints--\noptimumPolynomial() should return 37076114526 js\nassert strictEqual(optimumPolynomial(), 37076114526);\n--seed--\n--seed-contents--\n```js\nfunction optimumPolynomial() {\nreturn true;\n}\noptimumPolynomial();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2371,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-101-optimum-polynomial.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "52f74f30daabf73c0b16c78f8c992497",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3cc1000cf542c50fedf\ntitle: 'Problem 96: Su Doku'\nchallengeType: 1\nforumTopicId: 302213\ndashedName: problem-96-su-doku\n--description--\nSu Doku (Japanese meaning number place) is the name given to a popular puzzle concept Its origin is unclear, but credit must be attributed to Leonhard Euler who invented a similar, and much more difficult, puzzle idea called Latin Squares The objective of Su Doku puzzles, however, is to replace the blanks (or zeros) in a 9 by 9 grid in such that each row, column, and 3 by 3 box contains each of the digits 1 to 9 Below is an example of a typical starting puzzle grid and its solution grid 0 0 39 0 00 0 1\n0 2 03 0 58 0 6\n6 0 00 0 14 0 0\n0 0 87 0 00 0 6\n1 0 20 0 07 0 8\n9 0 00 0 82 0 0\n0 0 28 0 00 0 5\n6 0 92 0 30 1 0\n5 0 00 0 93 0 0\n4 8 39 6 72 5 1\n9 2 13 4 58 7 6\n6 5 78 2 14 9 3\n5 4 87 2 91 3 6\n1 3 25 6 47 9 8\n9 7 61 3 82 4 5\n3 7 28 1 46 9 5\n6 8 92 5 34 1 7\n5 1 47 6 93 8 2\nA well constructed Su Doku puzzle has a unique solution and can be solved by logic, although it may be necessary to employ \"guess and test\" methods in order to eliminate options (there is much contested opinion over this) The complexity of the search determines the difficulty of the puzzle; the example above is considered easy because it can be solved by straight forward direct deduction",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "fb2ca0a58701be1c4639e6cc01f4608a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "34 1 7 5 1 47 6 93 8 2 A well constructed Su Doku puzzle has a unique solution and can be solved by logic, although it may be necessary to employ \"guess and test\" methods in order to eliminate options (there is much contested opinion over this) The complexity of the search determines the difficulty of the puzzle; the example above is considered easy because it can be solved by straight forward direct deductionThe puzzlesArr array contains different Su Doku puzzle strings ranging in difficulty, but all with unique solutions By solving all puzzles in puzzlesArr, find the sum of the 3-digit numbers found in the top left corner of each solution grid; for example, 483 is the 3-digit number found in the top left corner of the solution grid above --hints--\nsuDoku(testPuzzles1) should return a number js\nassert(typeof suDoku(_testPuzzles1) === 'number');\nsuDoku(testPuzzles1) should return 1190 js\nassert strictEqual(suDoku(_testPuzzles1), 1190);\nsuDoku(testPuzzles2) should return 24702 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "9b379e3c6f9b7c3fa9ae63f14829a38f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "puzzle strings ranging in difficulty, but all with unique solutions By solving all puzzles in puzzlesArr, find the sum of the 3-digit numbers found in the top left corner of each solution grid; for example, 483 is the 3-digit number found in the top left corner of the solution grid above --hints-- suDoku(testPuzzles1) should return a number js assert(typeof suDoku(_testPuzzles1) === 'number'); suDoku(testPuzzles1) should return 1190 js assert strictEqual(suDoku(_testPuzzles1), 1190); suDoku(testPuzzles2) should return 24702 js assertstrictEqual(suDoku(_testPuzzles2), 24702);\n--seed--\n--after-user-code--\n```js\nconst _testPuzzles1 = [\n'003020600900305001001806400008102900700000008006708200002609500800203009005010300',\n'200080300060070084030500209000105408000000000402706000301007040720040060004010003',\n'000000907000420180000705026100904000050000040000507009920108000034059000507000000'\n];\nconst _testPuzzles2 = [\n'003020600900305001001806400008102900700000008006708200002609500800203009005010300',\n'200080300060070084030500209000105408000000000402706000301007040720040060004010003',\n'000000907000420180000705026100904000050000040000507009920108000034059000507000000',\n'030050040008010500460000012070502080000603000040109030250000098001020600080060020',\n'020810740700003100090002805009040087400208003160030200302700060005600008076051090',\n'100920000524010000000000070050008102000000000402700090060000000000030945000071006',\n'043080250600000000000001094900004070000608000010200003820500000000000005034090710',\n'480006902002008001900370060840010200003704100001060049020085007700900600609200018',\n'000900002050123400030000160908000000070000090000000205091000050007439020400007000',\n'001900003900700160030005007050000009004302600200000070600100030042007006500006800',\n'000125400008400000420800000030000095060902010510000060000003049000007200001298000',\n'062340750100005600570000040000094800400000006005830000030000091006400007059083260',\n'300000000005009000200504000020000700160000058704310600000890100000067080000005437',\n'630000000000500008005674000000020000003401020000000345000007004080300902947100080',\n'000020040008035000000070602031046970200000000000501203049000730000000010800004000',\n'361025900080960010400000057008000471000603000259000800740000005020018060005470329',\n'050807020600010090702540006070020301504000908103080070900076205060090003080103040',\n'080005000000003457000070809060400903007010500408007020901020000842300000000100080',\n'003502900000040000106000305900251008070408030800763001308000104000020000005104800',\n'000000000009805100051907420290401065000000000140508093026709580005103600000000000',\n'020030090000907000900208005004806500607000208003102900800605007000309000030020050',\n'005000006070009020000500107804150000000803000000092805907006000030400010200000600',\n'040000050001943600009000300600050002103000506800020007005000200002436700030000040',\n'004000000000030002390700080400009001209801307600200008010008053900040000000000800',\n'360020089000361000000000000803000602400603007607000108000000000000418000970030014',\n'500400060009000800640020000000001008208000501700500000000090084003000600060003002',\n'007256400400000005010030060000508000008060200000107000030070090200000004006312700',\n'000000000079050180800000007007306800450708096003502700700000005016030420000000000',\n'030000080009000500007509200700105008020090030900402001004207100002000800070000090',\n'200170603050000100000006079000040700000801000009050000310400000005000060906037002',\n'000000080800701040040020030374000900000030000005000321010060050050802006080000000',\n'000000085000210009960080100500800016000000000890006007009070052300054000480000000',\n'608070502050608070002000300500090006040302050800050003005000200010704090409060701',\n'050010040107000602000905000208030501040070020901080406000401000304000709020060010',\n'053000790009753400100000002090080010000907000080030070500000003007641200061000940',\n'006080300049070250000405000600317004007000800100826009000702000075040190003090600',\n'005080700700204005320000084060105040008000500070803010450000091600508007003010600',\n'000900800128006400070800060800430007500000009600079008090004010003600284001007000',\n'000080000270000054095000810009806400020403060006905100017000620460000038000090000',\n'000602000400050001085010620038206710000000000019407350026040530900020007000809000',\n'000900002050123400030000160908000000070000090000000205091000050007439020400007000',\n'380000000000400785009020300060090000800302009000040070001070500495006000000000092',\n'000158000002060800030000040027030510000000000046080790050000080004070100000325000',\n'010500200900001000002008030500030007008000500600080004040100700000700006003004050',\n'080000040000469000400000007005904600070608030008502100900000005000781000060000010',\n'904200007010000000000706500000800090020904060040002000001607000000000030300005702',\n'000700800006000031040002000024070000010030080000060290000800070860000500002006000',\n'001007090590080001030000080000005800050060020004100000080000030100020079020700400',\n'000003017015009008060000000100007000009000200000500004000000020500600340340200000',\n'300200000000107000706030500070009080900020004010800050009040301000702000000008006'\n];\n```\n--seed-contents--\n```js\nfunction suDoku(puzzlesArr) {\nreturn true;\n}\n// Only change code above this line\nconst testPuzzles1 = [\n'003020600900305001001806400008102900700000008006708200002609500800203009005010300',\n'200080300060070084030500209000105408000000000402706000301007040720040060004010003',\n'000000907000420180000705026100904000050000040000507009920108000034059000507000000'\n];\nsuDoku(testPuzzles1);\n```\n--solutions--\n```js\nfunction suDoku(puzzlesArr) {\nfunction solve(puzzle) {\nfor (let row = 0; row < 9; row++) {\nfor (let col = 0; col < 9; col++) {\nif (puzzle[row][col] > 0) {\ncontinue;\n}\nconst allowedNumbers = getAllowedNumbers(puzzle, row, col);\nfor (let number = 1; number <= 9; number++) {\nif (allowedNumbers[number]) {\npuzzle[row][col] = number;\nif (solve(puzzle)) {\nreturn true;\n}\n}\n}\npuzzle[row][col] = 0;\nreturn false;\n}\n}\nreturn true;\n}\nfunction getAllowedNumbers(puzzle, row, col) {\nconst allowed = new Array(10)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
      "source_type": "git_repo"
    },
    "token_count": 2035,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ad717c4fa728bc75262f794a2cdd875f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(let row = 0; row < 9; row++) { for (let col = 0; col < 9; col++) { if (puzzle[row][col] > 0) { continue; } const allowedNumbers = getAllowedNumbers(puzzle, row, col); for (let number = 1; number <= 9; number++) { if (allowedNumbers[number]) { puzzle[row][col] = number; if (solve(puzzle)) { return true; } } } puzzle[row][col] = 0; return false; } } return true; } function getAllowedNumbers(puzzle, row, col) { const allowed = new Array(10)fill(true);\nallowed[0] = false;\nfor (let i = 0; i < 9; i++) {\nconst numberInSameRow = puzzle[row][i];\nif (numberInSameRow > 0) {\nallowed[numberInSameRow] = false;\n}\nconst numberInSameCol = puzzle[i][col];\nif (numberInSameCol > 0) {\nallowed[numberInSameCol] = false;\n}\n}\nconst rowOfSubGrid = Math floor(row / 3) * 3;\nconst colOfSubGrid = Math floor(col / 3) * 3;\nfor (let rowInSubGrid = 0; rowInSubGrid < 3; rowInSubGrid++) {\nfor (let colInSubGrid = 0; colInSubGrid < 3; colInSubGrid++) {\nconst numberInSameSubGrid =\npuzzle[rowOfSubGrid + rowInSubGrid][colOfSubGrid + colInSubGrid];\nif (numberInSameSubGrid > 0) {\nallowed[numberInSameSubGrid] = false;\n}\n}\n}\nreturn allowed;\n}\nfunction parsePuzzle(string) {\nconst puzzle = [];\nfor (let row = 0; row < 9; row++) {\npuzzle push(\nstring slice(row * 9, 9 + row * 9) split('') map(x => parseInt(x, 10))\n);\n}\nreturn puzzle;\n}\nlet sum = 0;\nfor (let i = 0; i < puzzlesArr",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "c34a1ffc672e64acd125a655ebfbc22c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "< 3; colInSubGrid++) { const numberInSameSubGrid = puzzle[rowOfSubGrid + rowInSubGrid][colOfSubGrid + colInSubGrid]; if (numberInSameSubGrid > 0) { allowed[numberInSameSubGrid] = false; } } } return allowed; } function parsePuzzle(string) { const puzzle = []; for (let row = 0; row < 9; row++) { puzzle push( string slice(row * 9, 9 + row * 9) split('') map(x => parseInt(x, 10)) ); } return puzzle; } let sum = 0; for (let i = 0; i < puzzlesArrlength; i++) {\nconst puzzle = parsePuzzle(puzzlesArr[i]);\nif (solve(puzzle)) {\nsum += 100 * puzzle[0][0] + 10 * puzzle[0][1] + puzzle[0][2];\n}\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "6f1f709e992bde39a7cef1134b349c72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-103-special-subset-sums-optimum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d61000cf542c50fee7\ntitle: 'Problem 103: Special subset sums: optimum'\nchallengeType: 1\nforumTopicId: 301727\ndashedName: problem-103-special-subset-sums-optimum\n--description--\nLet $S(A)$ represent the sum of elements in set A of size n We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:\n$S(B) ≠ S(C)$; that is, sums of subsets cannot be equal If B contains more elements than C then $S(B) > S(C)$ If $S(A)$ is minimised for a given n, we shall call it an optimum special sum set The first five optimum special sum sets are given below $$\\begin{align}\n& n = 1: \\{1\\} \\\\\n& n = 2: \\{1, 2\\} \\\\\n& n = 3: \\{2, 3, 4\\} \\\\\n& n = 4: \\{3, 5, 6, 7\\} \\\\\n& n = 5: \\{6, 9, 11, 12, 13\\} \\\\\n\\end{align}$$\nIt seems that for a given optimum set, $A = \\{a_1, a_2, \\ldots, a_n\\}$, the next optimum set is of the form $B = \\{b, a_1 + b, a_2 + b, \\ldots, a_n + b\\}$, where b is the \"middle\" element on the previous row By applying this \"rule\" we would expect the optimum set for $n = 6$ to be $A = \\{11, 17, 20, 22, 23, 24\\}$, with $S(A) = 117$ However, this is not the optimum set, as we have merely applied an algorithm to provide a near optimum set The optimum set for $n = 6$ is $A = \\{11, 18, 19, 20, 22, 25\\}$, with $S(A) = 115$ and corresponding set string: 111819202225",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-103-special-subset-sums-optimum.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c639f5792b3e0f3ccbeb7a830ae7129d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-103-special-subset-sums-optimum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the previous row By applying this \"rule\" we would expect the optimum set for $n = 6$ to be $A = \\{11, 17, 20, 22, 23, 24\\}$, with $S(A) = 117$ However, this is not the optimum set, as we have merely applied an algorithm to provide a near optimum set The optimum set for $n = 6$ is $A = \\{11, 18, 19, 20, 22, 25\\}$, with $S(A) = 115$ and corresponding set string: 111819202225Given that A is an optimum special sum set for $n = 7$, find its set string Note: This problem is related to Problem 105 and Problem 106 --hints--\noptimumSpecialSumSet() should return the string 20313839404245 js\nassert strictEqual(optimumSpecialSumSet(), '20313839404245');\n--seed--\n--seed-contents--\n```js\nfunction optimumSpecialSumSet() {\nreturn true;\n}\noptimumSpecialSumSet();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-103-special-subset-sums-optimum.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "bb4a0add174ddb4818bd75bb4c6f1167",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-104-pandigital-fibonacci-ends.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d51000cf542c50fee6\ntitle: 'Problem 104: Pandigital Fibonacci ends'\nchallengeType: 1\nforumTopicId: 301728\ndashedName: problem-104-pandigital-fibonacci-ends\n--description--\nThe Fibonacci sequence is defined by the recurrence relation:\n$F_n = F_{n − 1} + F_{n − 2}$, where $F_1 = 1$ and $F_2 = 1$\nIt turns out that $F_{541}$, which contains 113 digits, is the first Fibonacci number for which the last nine digits are 1 - 9 pandigital (contain all the digits 1 to 9, but not necessarily in order). And $F_{2749}$, which contains 575 digits, is the first Fibonacci number for which the first nine digits are 1 - 9 pandigital.\nGiven that $F_k$ is the first Fibonacci number for which the first nine digits AND the last nine digits are 1 - 9 pandigital, find k.\n--hints--\npandigitalFibonacciEnds() should return 329468.\njs\nassert.strictEqual(pandigitalFibonacciEnds(), 329468);\n--seed--\n--seed-contents--\n```js\nfunction pandigitalFibonacciEnds() {\nreturn true;\n}\npandigitalFibonacciEnds();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1096,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-104-pandigital-fibonacci-ends.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bf4dd01c2ee617bc48393700faeaa832",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d01000cf542c50fee2\ntitle: 'Problem 99: Largest exponential'\nchallengeType: 1\nforumTopicId: 302216\ndashedName: problem-99-largest-exponential\n--description--\nComparing two numbers written in index form like $2^{11}$ and $3^7$ is not difficult, as any calculator would confirm that $2^{11} = 2048 < 3^7 = 2187$ However, confirming that $632382^{518061} < 519432^{525806}$ would be much more difficult, as both numbers contain over three million digits Using the 2D baseExp array of base/exponent pairs, determine pair with the greatest numerical value and return it --hints--\nlargestExponential(testArray1) should return an array js\nassert(Array isArray(largestExponential(_testArray1)));\nlargestExponential(testArray1) should return [840237, 507276] js\nassert deepEqual(largestExponential(_testArray1), [840237, 507276]);\nlargestExponential(testArray2) should return [895447, 504922] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5bc314595977aca25115fe331eb34f41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "as any calculator would confirm that $2^{11} = 2048 < 3^7 = 2187$ However, confirming that $632382^{518061} < 519432^{525806}$ would be much more difficult, as both numbers contain over three million digits Using the 2D baseExp array of base/exponent pairs, determine pair with the greatest numerical value and return it --hints-- largestExponential(testArray1) should return an array js assert(Array isArray(largestExponential(_testArray1))); largestExponential(testArray1) should return [840237, 507276] js assert deepEqual(largestExponential(_testArray1), [840237, 507276]); largestExponential(testArray2) should return [895447, 504922] js assertdeepEqual(largestExponential(_testArray2), [895447, 504922]);\n--seed--\n--after-user-code--\njs\nconst _testArray1 = [\n[492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123]\n];\nconst _testArray2 = [\n[519432,525806],[632382,518061],[78864,613712],[466580,530130],[780495,510032],[525895,525320],[15991,714883],[960290,502358],[760018,511029],[166800,575487],[210884,564478],[555151,523163],[681146,515199],[563395,522587],[738250,512126],[923525,503780],[595148,520429],[177108,572629],[750923,511482],[440902,532446],[881418,505504],[422489,534197],[979858,501616],[685893,514935],[747477,511661],[167214,575367],[234140,559696],[940238,503122],[728969,512609],[232083,560102],[900971,504694],[688801,514772],[189664,569402],[891022,505104],[445689,531996],[119570,591871],[821453,508118],[371084,539600],[911745,504251],[623655,518600],[144361,582486],[352442,541775],[420726,534367],[295298,549387],[6530,787777],[468397,529976],[672336,515696],[431861,533289],[84228,610150],[805376,508857],[444409,532117],[33833,663511],[381850,538396],[402931,536157],[92901,604930],[304825,548004],[731917,512452],[753734,511344],[51894,637373],[151578,580103],[295075,549421],[303590,548183],[333594,544123],[683952,515042],[60090,628880],[951420,502692],[28335,674991],[714940,513349],[343858,542826],[549279,523586],[804571,508887],[260653,554881],[291399,549966],[402342,536213],[408889,535550],[40328,652524],[375856,539061],[768907,510590],[165993,575715],[976327,501755],[898500,504795],[360404,540830],[478714,529095],[694144,514472],[488726,528258],[841380,507226],[328012,544839],[22389,690868],[604053,519852],[329514,544641],[772965,510390],[492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123],[597706,520257],[310484,547206],[944468,502959],[121283,591152],[451131,531507],[566499,522367],[425373,533918],[40240,652665],[39130,654392],[714926,513355],[469219,529903],[806929,508783],[287970,550487],[92189,605332],[103841,599094],[671839,515725],[452048,531421],[987837,501323],[935192,503321],[88585,607450],[613883,519216],[144551,582413],[647359,517155],[213902,563816],[184120,570789],[258126,555322],[502546,527130],[407655,535678],[401528,536306],[477490,529193],[841085,507237],[732831,512408],[833000,507595],[904694,504542],[581435,521348],[455545,531110],[873558,505829],[94916,603796],[720176,513068],[545034,523891],[246348,557409],[556452,523079],[832015,507634],[173663,573564],[502634,527125],[250732,556611],[569786,522139],[216919,563178],[521815,525623],[92304,605270],[164446,576167],[753413,511364],[11410,740712],[448845,531712],[925072,503725],[564888,522477],[7062,780812],[641155,517535],[738878,512100],[636204,517828],[372540,539436],[443162,532237],[571192,522042],[655350,516680],[299741,548735],[581914,521307],[965471,502156],[513441,526277],[808682,508700],[237589,559034],[543300,524025],[804712,508889],[247511,557192],[543486,524008],[504383,526992],[326529,545039],[792493,509458],[86033,609017],[126554,589005],[579379,521481],[948026,502823],[404777,535969],[265767,554022],[266876,553840],[46631,643714],[492397,527958],[856106,506581],[795757,509305],[748946,511584],[294694,549480],[409781,535463],[775887,510253],[543747,523991],[210592,564536],[517119,525990],[520253,525751],[247926,557124],[592141,520626],[346580,542492],[544969,523902],[506501,526817],[244520,557738],[144745,582349],[69274,620858],[292620,549784],[926027,503687],[736320,512225],[515528,526113],[407549,535688],[848089,506927],[24141,685711],[9224,757964],[980684,501586],[175259,573121],[489160,528216],[878970,505604],[969546,502002],[525207,525365],[690461,514675],[156510,578551],[659778,516426],[468739,529945],[765252,510770],[76703,615230],[165151,575959],[29779,671736],[928865,503569],[577538,521605],[927555,503618],[185377,570477],[974756,501809],[800130,509093],[217016,563153],[365709,540216],[774508,510320],[588716,520851],[631673,518104],[954076,502590],[777828,510161],[990659,501222],[597799,520254],[786905,509727],[512547,526348],[756449,511212],[869787,505988],[653747,516779],[84623,609900],[839698,507295],[30159,670909],[797275,509234],[678136,515373],[897144,504851],[989554,501263],[413292,535106],[55297,633667],[788650,509637],[486748,528417],[150724,580377],[56434,632490],[77207,614869],[588631,520859],[611619,519367],[100006,601055],[528924,525093],[190225,569257],[851155,506789],[682593,515114],[613043,519275],[514673,526183],[877634,505655],[878905,505602],[1926,914951],[613245,519259],[152481,579816],[841774,507203],[71060,619442],[865335,506175],[90244,606469],[302156,548388],[399059,536557],[478465,529113],[558601,522925],[69132,620966],[267663,553700],[988276,501310],[378354,538787],[529909,525014],[161733,576968],[758541,511109],[823425,508024],[149821,580667],[269258,553438],[481152,528891],[120871,591322],[972322,501901],[981350,501567],[676129,515483],[950860,502717],[119000,592114],[392252,537272],[191618,568919],[946699,502874],[289555,550247],[799322,509139],[703886,513942],[194812,568143],[261823,554685],[203052,566221],[217330,563093],[734748,512313],[391759,537328],[807052,508777],[564467,522510],[59186,629748],[113447,594545],[518063,525916],[905944,504492],[613922,519213],[439093,532607],[445946,531981],[230530,560399],[297887,549007],[459029,530797],[403692,536075],[855118,506616],[963127,502245],[841711,507208],[407411,535699],[924729,503735],[914823,504132],[333725,544101],[176345,572832],[912507,504225],[411273,535308],[259774,555036],[632853,518038],[119723,591801],[163902,576321],[22691,689944],[402427,536212],[175769,572988],[837260,507402],[603432,519893],[313679,546767],[538165,524394],[549026,523608],[61083,627945],[898345,504798],[992556,501153],[369999,539727],[32847,665404],[891292,505088],[152715,579732],[824104,507997],[234057,559711],[730507,512532],[960529,502340],[388395,537687],[958170,502437],[57105,631806],[186025,570311],[993043,501133],[576770,521664],[215319,563513],[927342,503628],[521353,525666],[39563,653705],[752516,511408],[110755,595770],[309749,547305],[374379,539224],[919184,503952],[990652,501226],[647780,517135],[187177,570017],[168938,574877],[649558,517023],[278126,552016],[162039,576868],[658512,516499],[498115,527486],[896583,504868],[561170,522740],[747772,511647],[775093,510294],[652081,516882],[724905,512824],[499707,527365],[47388,642755],[646668,517204],[571700,522007],[180430,571747],[710015,513617],[435522,532941],[98137,602041],[759176,511070],[486124,528467],[526942,525236],[878921,505604],[408313,535602],[926980,503640],[882353,505459],[566887,522345],[3326,853312],[911981,504248],[416309,534800],[392991,537199],[622829,518651],[148647,581055],[496483,527624],[666314,516044],[48562,641293],[672618,515684],[443676,532187],[274065,552661],[265386,554079],[347668,542358],[31816,667448],[181575,571446],[961289,502320],[365689,540214],[987950,501317],[932299,503440],[27388,677243],[746701,511701],[492258,527969],[147823,581323],[57918,630985],[838849,507333],[678038,515375],[27852,676130],[850241,506828],[818403,508253],[131717,587014],[850216,506834],[904848,504529],[189758,569380],[392845,537217],[470876,529761],[925353,503711],[285431,550877],[454098,531234],[823910,508003],[318493,546112],[766067,510730],[261277,554775],[421530,534289],[694130,514478],[120439,591498],[213308,563949],[854063,506662],[365255,540263],[165437,575872],[662240,516281],[289970,550181],[847977,506933],[546083,523816],[413252,535113],[975829,501767],[361540,540701],[235522,559435],[224643,561577],[736350,512229],[328303,544808],[35022,661330],[307838,547578],[474366,529458],[873755,505819],[73978,617220],[827387,507845],[670830,515791],[326511,545034],[309909,547285],[400970,536363],[884827,505352],[718307,513175],[28462,674699],[599384,520150],[253565,556111],[284009,551093],[343403,542876],[446557,531921],[992372,501160],[961601,502308],[696629,514342],[919537,503945],[894709,504944],[892201,505051],[358160,541097],[448503,531745],[832156,507636],[920045,503924],[926137,503675],[416754,534757],[254422,555966],[92498,605151],[826833,507873],[660716,516371],[689335,514746],[160045,577467],[814642,508425],[969939,501993],[242856,558047],[76302,615517],[472083,529653],[587101,520964],[99066,601543],[498005,527503],[709800,513624],[708000,513716],[20171,698134],[285020,550936],[266564,553891],[981563,501557],[846502,506991],[334,1190800],[209268,564829],[9844,752610],[996519,501007],[410059,535426],[432931,533188],[848012,506929],[966803,502110],[983434,501486],[160700,577267],[504374,526989],[832061,507640],[392825,537214],[443842,532165],[440352,532492],[745125,511776],[13718,726392],[661753,516312],[70500,619875],[436952,532814],[424724,533973],[21954,692224],[262490,554567],[716622,513264],[907584,504425],[60086,628882],[837123,507412],[971345,501940],[947162,502855],[139920,584021],[68330,621624],[666452,516038],[731446,512481],[953350,502619],[183157,571042],[845400,507045],[651548,516910],[20399,697344],[861779,506331],[629771,518229],[801706,509026],[189207,569512],[737501,512168],[719272,513115],[479285,529045],[136046,585401],[896746,504860],[891735,505067],[684771,514999],[865309,506184],[379066,538702],[503117,527090],[621780,518717],[209518,564775],[677135,515423],[987500,501340],[197049,567613],[329315,544673],[236756,559196],[357092,541226],[520440,525733],[213471,563911],[956852,502490],[702223,514032],[404943,535955],[178880,572152],[689477,514734],[691351,514630],[866669,506128],[370561,539656],[739805,512051],[71060,619441],[624861,518534],[261660,554714],[366137,540160],[166054,575698],[601878,519990],[153445,579501],[279899,551729],[379166,538691],[423209,534125],[675310,515526],[145641,582050],[691353,514627],[917468,504026],[284778,550976],[81040,612235],[161699,576978],[616394,519057],[767490,510661],[156896,578431],[427408,533714],[254849,555884],[737217,512182],[897133,504851],[203815,566051],[270822,553189],[135854,585475],[778805,510111],[784373,509847],[305426,547921],[733418,512375],[732087,512448],[540668,524215],[702898,513996],[628057,518328],[640280,517587],[422405,534204],[10604,746569],[746038,511733],[839808,507293],[457417,530938],[479030,529064],[341758,543090],[620223,518824],[251661,556451],[561790,522696],[497733,527521],[724201,512863],[489217,528217],[415623,534867],[624610,518548],[847541,506953],[432295,533249],[400391,536421],[961158,502319],[139173,584284],[421225,534315],[579083,521501],[74274,617000],[701142,514087],[374465,539219],[217814,562985],[358972,540995],[88629,607424],[288597,550389],[285819,550812],[538400,524385],[809930,508645],[738326,512126],[955461,502535],[163829,576343],[826475,507891],[376488,538987],[102234,599905],[114650,594002],[52815,636341],[434037,533082],[804744,508880],[98385,601905],[856620,506559],[220057,562517],[844734,507078],[150677,580387],[558697,522917],[621751,518719],[207067,565321],[135297,585677],[932968,503404],[604456,519822],[579728,521462],[244138,557813],[706487,513800],[711627,513523],[853833,506674],[497220,527562],[59428,629511],[564845,522486],[623621,518603],[242689,558077],[125091,589591],[363819,540432],[686453,514901],[656813,516594],[489901,528155],[386380,537905],[542819,524052],[243987,557841],[693412,514514],[488484,528271],[896331,504881],[336730,543721],[728298,512647],[604215,519840],[153729,579413],[595687,520398],[540360,524240],[245779,557511],[924873,503730],[509628,526577],[528523,525122],[3509,847707],[522756,525555],[895447,504922],[44840,646067],[45860,644715],[463487,530404],[398164,536654],[894483,504959],[619415,518874],[966306,502129],[990922,501212],[835756,507474],[548881,523618],[453578,531282],[474993,529410],[80085,612879],[737091,512193],[50789,638638],[979768,501620],[792018,509483],[665001,516122],[86552,608694],[462772,530469],[589233,520821],[891694,505072],[592605,520594],[209645,564741],[42531,649269],[554376,523226],[803814,508929],[334157,544042],[175836,572970],[868379,506051],[658166,516520],[278203,551995],[966198,502126],[627162,518387],[296774,549165],[311803,547027],[843797,507118],[702304,514032],[563875,522553],[33103,664910],[191932,568841],[543514,524006],[506835,526794],[868368,506052],[847025,506971],[678623,515342],[876139,505726],[571997,521984],[598632,520198],[213590,563892],[625404,518497],[726508,512738],[689426,514738],[332495,544264],[411366,535302],[242546,558110],[315209,546555],[797544,509219],[93889,604371],[858879,506454],[124906,589666],[449072,531693],[235960,559345],[642403,517454],[720567,513047],[705534,513858],[603692,519870],[488137,528302],[157370,578285],[63515,625730],[666326,516041],[619226,518883],[443613,532186],[597717,520257],[96225,603069],[86940,608450],[40725,651929],[460976,530625],[268875,553508],[270671,553214],[363254,540500],[384248,538137],[762889,510892],[377941,538833],[278878,551890],[176615,572755],[860008,506412],[944392,502967],[608395,519571],[225283,561450],[45095,645728],[333798,544090],[625733,518476],[995584,501037],[506135,526853],[238050,558952],[557943,522972],[530978,524938],[634244,517949],[177168,572616],[85200,609541],[953043,502630],[523661,525484],[999295,500902],[840803,507246],[961490,502312],[471747,529685],[380705,538523],[911180,504275],[334149,544046],[478992,529065],[325789,545133],[335884,543826],[426976,533760],[749007,511582],[667067,516000],[607586,519623],[674054,515599],[188534,569675],[565185,522464],[172090,573988],[87592,608052],[907432,504424],[8912,760841],[928318,503590],[757917,511138],[718693,513153],[315141,546566],[728326,512645],[353492,541647],[638429,517695],[628892,518280],[877286,505672],[620895,518778],[385878,537959],[423311,534113],[633501,517997],[884833,505360],[883402,505416],[999665,500894],[708395,513697],[548142,523667],[756491,511205],[987352,501340],[766520,510705],[591775,520647],[833758,507563],[843890,507108],[925551,503698],[74816,616598],[646942,517187],[354923,541481],[256291,555638],[634470,517942],[930904,503494],[134221,586071],[282663,551304],[986070,501394],[123636,590176],[123678,590164],[481717,528841],[423076,534137],[866246,506145],[93313,604697],[783632,509880],[317066,546304],[502977,527103],[141272,583545],[71708,618938],[617748,518975],[581190,521362],[193824,568382],[682368,515131],[352956,541712],[351375,541905],[505362,526909],[905165,504518],[128645,588188],[267143,553787],[158409,577965],[482776,528754],[628896,518282],[485233,528547],[563606,522574],[111001,595655],[115920,593445],[365510,540237],[959724,502374],[938763,503184],[930044,503520],[970959,501956],[913658,504176],[68117,621790],[989729,501253],[567697,522288],[820427,508163],[54236,634794],[291557,549938],[124961,589646],[403177,536130],[405421,535899],[410233,535417],[815111,508403],[213176,563974],[83099,610879],[998588,500934],[513640,526263],[129817,587733],[1820,921851],[287584,550539],[299160,548820],[860621,506386],[529258,525059],[586297,521017],[953406,502616],[441234,532410],[986217,501386],[781938,509957],[461247,530595],[735424,512277],[146623,581722],[839838,507288],[510667,526494],[935085,503327],[737523,512167],[303455,548204],[992779,501145],[60240,628739],[939095,503174],[794368,509370],[501825,527189],[459028,530798],[884641,505363],[512287,526364],[835165,507499],[307723,547590],[160587,577304],[735043,512300],[493289,527887],[110717,595785],[306480,547772],[318593,546089],[179810,571911],[200531,566799],[314999,546580],[197020,567622],[301465,548487],[237808,559000],[131944,586923],[882527,505449],[468117,530003],[711319,513541],[156240,578628],[965452,502162],[992756,501148],[437959,532715],[739938,512046],[614249,519196],[391496,537356],[62746,626418],[688215,514806],[75501,616091],[883573,505412],[558824,522910],[759371,511061],[173913,573489],[891351,505089],[727464,512693],[164833,576051],[812317,508529],[540320,524243],[698061,514257],[69149,620952],[471673,529694],[159092,577753],[428134,533653],[89997,606608],[711061,513557],[779403,510081],[203327,566155],[798176,509187],[667688,515963],[636120,517833],[137410,584913],[217615,563034],[556887,523038],[667229,515991],[672276,515708],[325361,545187],[172115,573985],[13846,725685]\n];\n--seed-contents--\n```js\nfunction largestExponential(baseExp) {\nreturn true;\n}\n// Only change code above this line\nconst testArray1 = [\n[492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123]\n];\nlargestExponential(testArray1);\n```\n--solutions--\n```js\nfunction largestExponential(baseExp) {\nlet maximum = 0;\nlet indexOfMaximum = 0;\nfor (let i = 1; i < baseExp",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md",
      "source_type": "git_repo"
    },
    "token_count": 6407,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c4a535a5fc67c31a56c43fc6a476776d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return [840237, 507276] js assert deepEqual(largestExponential(_testArray1), [840237, 507276]); largestExponential(testArray2) should return [895447, 504922] js assertdeepEqual(largestExponential(_testArray2), [895447, 504922]); --seed-- --after-user-code-- js const _testArray1 = [ [492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123] ]; const _testArray2 = [ [519432,525806],[632382,518061],[78864,613712],[466580,530130],[780495,510032],[525895,525320],[15991,714883],[960290,502358],[760018,511029],[166800,575487],[210884,564478],[555151,523163],[681146,515199],[563395,522587],[738250,512126],[923525,503780],[595148,520429],[177108,572629],[750923,511482],[440902,532446],[881418,505504],[422489,534197],[979858,501616],[685893,514935],[747477,511661],[167214,575367],[234140,559696],[940238,503122],[728969,512609],[232083,560102],[900971,504694],[688801,514772],[189664,569402],[891022,505104],[445689,531996],[119570,591871],[821453,508118],[371084,539600],[911745,504251],[623655,518600],[144361,582486],[352442,541775],[420726,534367],[295298,549387],[6530,787777],[468397,529976],[672336,515696],[431861,533289],[84228,610150],[805376,508857],[444409,532117],[33833,663511],[381850,538396],[402931,536157],[92901,604930],[304825,548004],[731917,512452],[753734,511344],[51894,637373],[151578,580103],[295075,549421],[303590,548183],[333594,544123],[683952,515042],[60090,628880],[951420,502692],[28335,674991],[714940,513349],[343858,542826],[549279,523586],[804571,508887],[260653,554881],[291399,549966],[402342,536213],[408889,535550],[40328,652524],[375856,539061],[768907,510590],[165993,575715],[976327,501755],[898500,504795],[360404,540830],[478714,529095],[694144,514472],[488726,528258],[841380,507226],[328012,544839],[22389,690868],[604053,519852],[329514,544641],[772965,510390],[492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123],[597706,520257],[310484,547206],[944468,502959],[121283,591152],[451131,531507],[566499,522367],[425373,533918],[40240,652665],[39130,654392],[714926,513355],[469219,529903],[806929,508783],[287970,550487],[92189,605332],[103841,599094],[671839,515725],[452048,531421],[987837,501323],[935192,503321],[88585,607450],[613883,519216],[144551,582413],[647359,517155],[213902,563816],[184120,570789],[258126,555322],[502546,527130],[407655,535678],[401528,536306],[477490,529193],[841085,507237],[732831,512408],[833000,507595],[904694,504542],[581435,521348],[455545,531110],[873558,505829],[94916,603796],[720176,513068],[545034,523891],[246348,557409],[556452,523079],[832015,507634],[173663,573564],[502634,527125],[250732,556611],[569786,522139],[216919,563178],[521815,525623],[92304,605270],[164446,576167],[753413,511364],[11410,740712],[448845,531712],[925072,503725],[564888,522477],[7062,780812],[641155,517535],[738878,512100],[636204,517828],[372540,539436],[443162,532237],[571192,522042],[655350,516680],[299741,548735],[581914,521307],[965471,502156],[513441,526277],[808682,508700],[237589,559034],[543300,524025],[804712,508889],[247511,557192],[543486,524008],[504383,526992],[326529,545039],[792493,509458],[86033,609017],[126554,589005],[579379,521481],[948026,502823],[404777,535969],[265767,554022],[266876,553840],[46631,643714],[492397,527958],[856106,506581],[795757,509305],[748946,511584],[294694,549480],[409781,535463],[775887,510253],[543747,523991],[210592,564536],[517119,525990],[520253,525751],[247926,557124],[592141,520626],[346580,542492],[544969,523902],[506501,526817],[244520,557738],[144745,582349],[69274,620858],[292620,549784],[926027,503687],[736320,512225],[515528,526113],[407549,535688],[848089,506927],[24141,685711],[9224,757964],[980684,501586],[175259,573121],[489160,528216],[878970,505604],[969546,502002],[525207,525365],[690461,514675],[156510,578551],[659778,516426],[468739,529945],[765252,510770],[76703,615230],[165151,575959],[29779,671736],[928865,503569],[577538,521605],[927555,503618],[185377,570477],[974756,501809],[800130,509093],[217016,563153],[365709,540216],[774508,510320],[588716,520851],[631673,518104],[954076,502590],[777828,510161],[990659,501222],[597799,520254],[786905,509727],[512547,526348],[756449,511212],[869787,505988],[653747,516779],[84623,609900],[839698,507295],[30159,670909],[797275,509234],[678136,515373],[897144,504851],[989554,501263],[413292,535106],[55297,633667],[788650,509637],[486748,528417],[150724,580377],[56434,632490],[77207,614869],[588631,520859],[611619,519367],[100006,601055],[528924,525093],[190225,569257],[851155,506789],[682593,515114],[613043,519275],[514673,526183],[877634,505655],[878905,505602],[1926,914951],[613245,519259],[152481,579816],[841774,507203],[71060,619442],[865335,506175],[90244,606469],[302156,548388],[399059,536557],[478465,529113],[558601,522925],[69132,620966],[267663,553700],[988276,501310],[378354,538787],[529909,525014],[161733,576968],[758541,511109],[823425,508024],[149821,580667],[269258,553438],[481152,528891],[120871,591322],[972322,501901],[981350,501567],[676129,515483],[950860,502717],[119000,592114],[392252,537272],[191618,568919],[946699,502874],[289555,550247],[799322,509139],[703886,513942],[194812,568143],[261823,554685],[203052,566221],[217330,563093],[734748,512313],[391759,537328],[807052,508777],[564467,522510],[59186,629748],[113447,594545],[518063,525916],[905944,504492],[613922,519213],[439093,532607],[445946,531981],[230530,560399],[297887,549007],[459029,530797],[403692,536075],[855118,506616],[963127,502245],[841711,507208],[407411,535699],[924729,503735],[914823,504132],[333725,544101],[176345,572832],[912507,504225],[411273,535308],[259774,555036],[632853,518038],[119723,591801],[163902,576321],[22691,689944],[402427,536212],[175769,572988],[837260,507402],[603432,519893],[313679,546767],[538165,524394],[549026,523608],[61083,627945],[898345,504798],[992556,501153],[369999,539727],[32847,665404],[891292,505088],[152715,579732],[824104,507997],[234057,559711],[730507,512532],[960529,502340],[388395,537687],[958170,502437],[57105,631806],[186025,570311],[993043,501133],[576770,521664],[215319,563513],[927342,503628],[521353,525666],[39563,653705],[752516,511408],[110755,595770],[309749,547305],[374379,539224],[919184,503952],[990652,501226],[647780,517135],[187177,570017],[168938,574877],[649558,517023],[278126,552016],[162039,576868],[658512,516499],[498115,527486],[896583,504868],[561170,522740],[747772,511647],[775093,510294],[652081,516882],[724905,512824],[499707,527365],[47388,642755],[646668,517204],[571700,522007],[180430,571747],[710015,513617],[435522,532941],[98137,602041],[759176,511070],[486124,528467],[526942,525236],[878921,505604],[408313,535602],[926980,503640],[882353,505459],[566887,522345],[3326,853312],[911981,504248],[416309,534800],[392991,537199],[622829,518651],[148647,581055],[496483,527624],[666314,516044],[48562,641293],[672618,515684],[443676,532187],[274065,552661],[265386,554079],[347668,542358],[31816,667448],[181575,571446],[961289,502320],[365689,540214],[987950,501317],[932299,503440],[27388,677243],[746701,511701],[492258,527969],[147823,581323],[57918,630985],[838849,507333],[678038,515375],[27852,676130],[850241,506828],[818403,508253],[131717,587014],[850216,506834],[904848,504529],[189758,569380],[392845,537217],[470876,529761],[925353,503711],[285431,550877],[454098,531234],[823910,508003],[318493,546112],[766067,510730],[261277,554775],[421530,534289],[694130,514478],[120439,591498],[213308,563949],[854063,506662],[365255,540263],[165437,575872],[662240,516281],[289970,550181],[847977,506933],[546083,523816],[413252,535113],[975829,501767],[361540,540701],[235522,559435],[224643,561577],[736350,512229],[328303,544808],[35022,661330],[307838,547578],[474366,529458],[873755,505819],[73978,617220],[827387,507845],[670830,515791],[326511,545034],[309909,547285],[400970,536363],[884827,505352],[718307,513175],[28462,674699],[599384,520150],[253565,556111],[284009,551093],[343403,542876],[446557,531921],[992372,501160],[961601,502308],[696629,514342],[919537,503945],[894709,504944],[892201,505051],[358160,541097],[448503,531745],[832156,507636],[920045,503924],[926137,503675],[416754,534757],[254422,555966],[92498,605151],[826833,507873],[660716,516371],[689335,514746],[160045,577467],[814642,508425],[969939,501993],[242856,558047],[76302,615517],[472083,529653],[587101,520964],[99066,601543],[498005,527503],[709800,513624],[708000,513716],[20171,698134],[285020,550936],[266564,553891],[981563,501557],[846502,506991],[334,1190800],[209268,564829],[9844,752610],[996519,501007],[410059,535426],[432931,533188],[848012,506929],[966803,502110],[983434,501486],[160700,577267],[504374,526989],[832061,507640],[392825,537214],[443842,532165],[440352,532492],[745125,511776],[13718,726392],[661753,516312],[70500,619875],[436952,532814],[424724,533973],[21954,692224],[262490,554567],[716622,513264],[907584,504425],[60086,628882],[837123,507412],[971345,501940],[947162,502855],[139920,584021],[68330,621624],[666452,516038],[731446,512481],[953350,502619],[183157,571042],[845400,507045],[651548,516910],[20399,697344],[861779,506331],[629771,518229],[801706,509026],[189207,569512],[737501,512168],[719272,513115],[479285,529045],[136046,585401],[896746,504860],[891735,505067],[684771,514999],[865309,506184],[379066,538702],[503117,527090],[621780,518717],[209518,564775],[677135,515423],[987500,501340],[197049,567613],[329315,544673],[236756,559196],[357092,541226],[520440,525733],[213471,563911],[956852,502490],[702223,514032],[404943,535955],[178880,572152],[689477,514734],[691351,514630],[866669,506128],[370561,539656],[739805,512051],[71060,619441],[624861,518534],[261660,554714],[366137,540160],[166054,575698],[601878,519990],[153445,579501],[279899,551729],[379166,538691],[423209,534125],[675310,515526],[145641,582050],[691353,514627],[917468,504026],[284778,550976],[81040,612235],[161699,576978],[616394,519057],[767490,510661],[156896,578431],[427408,533714],[254849,555884],[737217,512182],[897133,504851],[203815,566051],[270822,553189],[135854,585475],[778805,510111],[784373,509847],[305426,547921],[733418,512375],[732087,512448],[540668,524215],[702898,513996],[628057,518328],[640280,517587],[422405,534204],[10604,746569],[746038,511733],[839808,507293],[457417,530938],[479030,529064],[341758,543090],[620223,518824],[251661,556451],[561790,522696],[497733,527521],[724201,512863],[489217,528217],[415623,534867],[624610,518548],[847541,506953],[432295,533249],[400391,536421],[961158,502319],[139173,584284],[421225,534315],[579083,521501],[74274,617000],[701142,514087],[374465,539219],[217814,562985],[358972,540995],[88629,607424],[288597,550389],[285819,550812],[538400,524385],[809930,508645],[738326,512126],[955461,502535],[163829,576343],[826475,507891],[376488,538987],[102234,599905],[114650,594002],[52815,636341],[434037,533082],[804744,508880],[98385,601905],[856620,506559],[220057,562517],[844734,507078],[150677,580387],[558697,522917],[621751,518719],[207067,565321],[135297,585677],[932968,503404],[604456,519822],[579728,521462],[244138,557813],[706487,513800],[711627,513523],[853833,506674],[497220,527562],[59428,629511],[564845,522486],[623621,518603],[242689,558077],[125091,589591],[363819,540432],[686453,514901],[656813,516594],[489901,528155],[386380,537905],[542819,524052],[243987,557841],[693412,514514],[488484,528271],[896331,504881],[336730,543721],[728298,512647],[604215,519840],[153729,579413],[595687,520398],[540360,524240],[245779,557511],[924873,503730],[509628,526577],[528523,525122],[3509,847707],[522756,525555],[895447,504922],[44840,646067],[45860,644715],[463487,530404],[398164,536654],[894483,504959],[619415,518874],[966306,502129],[990922,501212],[835756,507474],[548881,523618],[453578,531282],[474993,529410],[80085,612879],[737091,512193],[50789,638638],[979768,501620],[792018,509483],[665001,516122],[86552,608694],[462772,530469],[589233,520821],[891694,505072],[592605,520594],[209645,564741],[42531,649269],[554376,523226],[803814,508929],[334157,544042],[175836,572970],[868379,506051],[658166,516520],[278203,551995],[966198,502126],[627162,518387],[296774,549165],[311803,547027],[843797,507118],[702304,514032],[563875,522553],[33103,664910],[191932,568841],[543514,524006],[506835,526794],[868368,506052],[847025,506971],[678623,515342],[876139,505726],[571997,521984],[598632,520198],[213590,563892],[625404,518497],[726508,512738],[689426,514738],[332495,544264],[411366,535302],[242546,558110],[315209,546555],[797544,509219],[93889,604371],[858879,506454],[124906,589666],[449072,531693],[235960,559345],[642403,517454],[720567,513047],[705534,513858],[603692,519870],[488137,528302],[157370,578285],[63515,625730],[666326,516041],[619226,518883],[443613,532186],[597717,520257],[96225,603069],[86940,608450],[40725,651929],[460976,530625],[268875,553508],[270671,553214],[363254,540500],[384248,538137],[762889,510892],[377941,538833],[278878,551890],[176615,572755],[860008,506412],[944392,502967],[608395,519571],[225283,561450],[45095,645728],[333798,544090],[625733,518476],[995584,501037],[506135,526853],[238050,558952],[557943,522972],[530978,524938],[634244,517949],[177168,572616],[85200,609541],[953043,502630],[523661,525484],[999295,500902],[840803,507246],[961490,502312],[471747,529685],[380705,538523],[911180,504275],[334149,544046],[478992,529065],[325789,545133],[335884,543826],[426976,533760],[749007,511582],[667067,516000],[607586,519623],[674054,515599],[188534,569675],[565185,522464],[172090,573988],[87592,608052],[907432,504424],[8912,760841],[928318,503590],[757917,511138],[718693,513153],[315141,546566],[728326,512645],[353492,541647],[638429,517695],[628892,518280],[877286,505672],[620895,518778],[385878,537959],[423311,534113],[633501,517997],[884833,505360],[883402,505416],[999665,500894],[708395,513697],[548142,523667],[756491,511205],[987352,501340],[766520,510705],[591775,520647],[833758,507563],[843890,507108],[925551,503698],[74816,616598],[646942,517187],[354923,541481],[256291,555638],[634470,517942],[930904,503494],[134221,586071],[282663,551304],[986070,501394],[123636,590176],[123678,590164],[481717,528841],[423076,534137],[866246,506145],[93313,604697],[783632,509880],[317066,546304],[502977,527103],[141272,583545],[71708,618938],[617748,518975],[581190,521362],[193824,568382],[682368,515131],[352956,541712],[351375,541905],[505362,526909],[905165,504518],[128645,588188],[267143,553787],[158409,577965],[482776,528754],[628896,518282],[485233,528547],[563606,522574],[111001,595655],[115920,593445],[365510,540237],[959724,502374],[938763,503184],[930044,503520],[970959,501956],[913658,504176],[68117,621790],[989729,501253],[567697,522288],[820427,508163],[54236,634794],[291557,549938],[124961,589646],[403177,536130],[405421,535899],[410233,535417],[815111,508403],[213176,563974],[83099,610879],[998588,500934],[513640,526263],[129817,587733],[1820,921851],[287584,550539],[299160,548820],[860621,506386],[529258,525059],[586297,521017],[953406,502616],[441234,532410],[986217,501386],[781938,509957],[461247,530595],[735424,512277],[146623,581722],[839838,507288],[510667,526494],[935085,503327],[737523,512167],[303455,548204],[992779,501145],[60240,628739],[939095,503174],[794368,509370],[501825,527189],[459028,530798],[884641,505363],[512287,526364],[835165,507499],[307723,547590],[160587,577304],[735043,512300],[493289,527887],[110717,595785],[306480,547772],[318593,546089],[179810,571911],[200531,566799],[314999,546580],[197020,567622],[301465,548487],[237808,559000],[131944,586923],[882527,505449],[468117,530003],[711319,513541],[156240,578628],[965452,502162],[992756,501148],[437959,532715],[739938,512046],[614249,519196],[391496,537356],[62746,626418],[688215,514806],[75501,616091],[883573,505412],[558824,522910],[759371,511061],[173913,573489],[891351,505089],[727464,512693],[164833,576051],[812317,508529],[540320,524243],[698061,514257],[69149,620952],[471673,529694],[159092,577753],[428134,533653],[89997,606608],[711061,513557],[779403,510081],[203327,566155],[798176,509187],[667688,515963],[636120,517833],[137410,584913],[217615,563034],[556887,523038],[667229,515991],[672276,515708],[325361,545187],[172115,573985],[13846,725685] ]; --seed-contents-- ```js function largestExponential(baseExp) { return true; } // Only change code above this line const testArray1 = [ [492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123] ]; largestExponential(testArray1); ``` --solutions-- ```js function largestExponential(baseExp) { let maximum = 0; let indexOfMaximum = 0; for (let i = 1; i < baseExplength; i++) {\nconst curValue = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md",
      "source_type": "git_repo"
    },
    "token_count": 6294,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "44836b80a949d6222de2a7dbae118391",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[840237, 507276]); largestExponential(testArray2) should return [895447, 504922] js assertdeepEqual(largestExponential(_testArray2), [895447, 504922]); --seed-- --after-user-code-- js const _testArray1 = [ [492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123] ]; const _testArray2 = [ [519432,525806],[632382,518061],[78864,613712],[466580,530130],[780495,510032],[525895,525320],[15991,714883],[960290,502358],[760018,511029],[166800,575487],[210884,564478],[555151,523163],[681146,515199],[563395,522587],[738250,512126],[923525,503780],[595148,520429],[177108,572629],[750923,511482],[440902,532446],[881418,505504],[422489,534197],[979858,501616],[685893,514935],[747477,511661],[167214,575367],[234140,559696],[940238,503122],[728969,512609],[232083,560102],[900971,504694],[688801,514772],[189664,569402],[891022,505104],[445689,531996],[119570,591871],[821453,508118],[371084,539600],[911745,504251],[623655,518600],[144361,582486],[352442,541775],[420726,534367],[295298,549387],[6530,787777],[468397,529976],[672336,515696],[431861,533289],[84228,610150],[805376,508857],[444409,532117],[33833,663511],[381850,538396],[402931,536157],[92901,604930],[304825,548004],[731917,512452],[753734,511344],[51894,637373],[151578,580103],[295075,549421],[303590,548183],[333594,544123],[683952,515042],[60090,628880],[951420,502692],[28335,674991],[714940,513349],[343858,542826],[549279,523586],[804571,508887],[260653,554881],[291399,549966],[402342,536213],[408889,535550],[40328,652524],[375856,539061],[768907,510590],[165993,575715],[976327,501755],[898500,504795],[360404,540830],[478714,529095],[694144,514472],[488726,528258],[841380,507226],[328012,544839],[22389,690868],[604053,519852],[329514,544641],[772965,510390],[492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123],[597706,520257],[310484,547206],[944468,502959],[121283,591152],[451131,531507],[566499,522367],[425373,533918],[40240,652665],[39130,654392],[714926,513355],[469219,529903],[806929,508783],[287970,550487],[92189,605332],[103841,599094],[671839,515725],[452048,531421],[987837,501323],[935192,503321],[88585,607450],[613883,519216],[144551,582413],[647359,517155],[213902,563816],[184120,570789],[258126,555322],[502546,527130],[407655,535678],[401528,536306],[477490,529193],[841085,507237],[732831,512408],[833000,507595],[904694,504542],[581435,521348],[455545,531110],[873558,505829],[94916,603796],[720176,513068],[545034,523891],[246348,557409],[556452,523079],[832015,507634],[173663,573564],[502634,527125],[250732,556611],[569786,522139],[216919,563178],[521815,525623],[92304,605270],[164446,576167],[753413,511364],[11410,740712],[448845,531712],[925072,503725],[564888,522477],[7062,780812],[641155,517535],[738878,512100],[636204,517828],[372540,539436],[443162,532237],[571192,522042],[655350,516680],[299741,548735],[581914,521307],[965471,502156],[513441,526277],[808682,508700],[237589,559034],[543300,524025],[804712,508889],[247511,557192],[543486,524008],[504383,526992],[326529,545039],[792493,509458],[86033,609017],[126554,589005],[579379,521481],[948026,502823],[404777,535969],[265767,554022],[266876,553840],[46631,643714],[492397,527958],[856106,506581],[795757,509305],[748946,511584],[294694,549480],[409781,535463],[775887,510253],[543747,523991],[210592,564536],[517119,525990],[520253,525751],[247926,557124],[592141,520626],[346580,542492],[544969,523902],[506501,526817],[244520,557738],[144745,582349],[69274,620858],[292620,549784],[926027,503687],[736320,512225],[515528,526113],[407549,535688],[848089,506927],[24141,685711],[9224,757964],[980684,501586],[175259,573121],[489160,528216],[878970,505604],[969546,502002],[525207,525365],[690461,514675],[156510,578551],[659778,516426],[468739,529945],[765252,510770],[76703,615230],[165151,575959],[29779,671736],[928865,503569],[577538,521605],[927555,503618],[185377,570477],[974756,501809],[800130,509093],[217016,563153],[365709,540216],[774508,510320],[588716,520851],[631673,518104],[954076,502590],[777828,510161],[990659,501222],[597799,520254],[786905,509727],[512547,526348],[756449,511212],[869787,505988],[653747,516779],[84623,609900],[839698,507295],[30159,670909],[797275,509234],[678136,515373],[897144,504851],[989554,501263],[413292,535106],[55297,633667],[788650,509637],[486748,528417],[150724,580377],[56434,632490],[77207,614869],[588631,520859],[611619,519367],[100006,601055],[528924,525093],[190225,569257],[851155,506789],[682593,515114],[613043,519275],[514673,526183],[877634,505655],[878905,505602],[1926,914951],[613245,519259],[152481,579816],[841774,507203],[71060,619442],[865335,506175],[90244,606469],[302156,548388],[399059,536557],[478465,529113],[558601,522925],[69132,620966],[267663,553700],[988276,501310],[378354,538787],[529909,525014],[161733,576968],[758541,511109],[823425,508024],[149821,580667],[269258,553438],[481152,528891],[120871,591322],[972322,501901],[981350,501567],[676129,515483],[950860,502717],[119000,592114],[392252,537272],[191618,568919],[946699,502874],[289555,550247],[799322,509139],[703886,513942],[194812,568143],[261823,554685],[203052,566221],[217330,563093],[734748,512313],[391759,537328],[807052,508777],[564467,522510],[59186,629748],[113447,594545],[518063,525916],[905944,504492],[613922,519213],[439093,532607],[445946,531981],[230530,560399],[297887,549007],[459029,530797],[403692,536075],[855118,506616],[963127,502245],[841711,507208],[407411,535699],[924729,503735],[914823,504132],[333725,544101],[176345,572832],[912507,504225],[411273,535308],[259774,555036],[632853,518038],[119723,591801],[163902,576321],[22691,689944],[402427,536212],[175769,572988],[837260,507402],[603432,519893],[313679,546767],[538165,524394],[549026,523608],[61083,627945],[898345,504798],[992556,501153],[369999,539727],[32847,665404],[891292,505088],[152715,579732],[824104,507997],[234057,559711],[730507,512532],[960529,502340],[388395,537687],[958170,502437],[57105,631806],[186025,570311],[993043,501133],[576770,521664],[215319,563513],[927342,503628],[521353,525666],[39563,653705],[752516,511408],[110755,595770],[309749,547305],[374379,539224],[919184,503952],[990652,501226],[647780,517135],[187177,570017],[168938,574877],[649558,517023],[278126,552016],[162039,576868],[658512,516499],[498115,527486],[896583,504868],[561170,522740],[747772,511647],[775093,510294],[652081,516882],[724905,512824],[499707,527365],[47388,642755],[646668,517204],[571700,522007],[180430,571747],[710015,513617],[435522,532941],[98137,602041],[759176,511070],[486124,528467],[526942,525236],[878921,505604],[408313,535602],[926980,503640],[882353,505459],[566887,522345],[3326,853312],[911981,504248],[416309,534800],[392991,537199],[622829,518651],[148647,581055],[496483,527624],[666314,516044],[48562,641293],[672618,515684],[443676,532187],[274065,552661],[265386,554079],[347668,542358],[31816,667448],[181575,571446],[961289,502320],[365689,540214],[987950,501317],[932299,503440],[27388,677243],[746701,511701],[492258,527969],[147823,581323],[57918,630985],[838849,507333],[678038,515375],[27852,676130],[850241,506828],[818403,508253],[131717,587014],[850216,506834],[904848,504529],[189758,569380],[392845,537217],[470876,529761],[925353,503711],[285431,550877],[454098,531234],[823910,508003],[318493,546112],[766067,510730],[261277,554775],[421530,534289],[694130,514478],[120439,591498],[213308,563949],[854063,506662],[365255,540263],[165437,575872],[662240,516281],[289970,550181],[847977,506933],[546083,523816],[413252,535113],[975829,501767],[361540,540701],[235522,559435],[224643,561577],[736350,512229],[328303,544808],[35022,661330],[307838,547578],[474366,529458],[873755,505819],[73978,617220],[827387,507845],[670830,515791],[326511,545034],[309909,547285],[400970,536363],[884827,505352],[718307,513175],[28462,674699],[599384,520150],[253565,556111],[284009,551093],[343403,542876],[446557,531921],[992372,501160],[961601,502308],[696629,514342],[919537,503945],[894709,504944],[892201,505051],[358160,541097],[448503,531745],[832156,507636],[920045,503924],[926137,503675],[416754,534757],[254422,555966],[92498,605151],[826833,507873],[660716,516371],[689335,514746],[160045,577467],[814642,508425],[969939,501993],[242856,558047],[76302,615517],[472083,529653],[587101,520964],[99066,601543],[498005,527503],[709800,513624],[708000,513716],[20171,698134],[285020,550936],[266564,553891],[981563,501557],[846502,506991],[334,1190800],[209268,564829],[9844,752610],[996519,501007],[410059,535426],[432931,533188],[848012,506929],[966803,502110],[983434,501486],[160700,577267],[504374,526989],[832061,507640],[392825,537214],[443842,532165],[440352,532492],[745125,511776],[13718,726392],[661753,516312],[70500,619875],[436952,532814],[424724,533973],[21954,692224],[262490,554567],[716622,513264],[907584,504425],[60086,628882],[837123,507412],[971345,501940],[947162,502855],[139920,584021],[68330,621624],[666452,516038],[731446,512481],[953350,502619],[183157,571042],[845400,507045],[651548,516910],[20399,697344],[861779,506331],[629771,518229],[801706,509026],[189207,569512],[737501,512168],[719272,513115],[479285,529045],[136046,585401],[896746,504860],[891735,505067],[684771,514999],[865309,506184],[379066,538702],[503117,527090],[621780,518717],[209518,564775],[677135,515423],[987500,501340],[197049,567613],[329315,544673],[236756,559196],[357092,541226],[520440,525733],[213471,563911],[956852,502490],[702223,514032],[404943,535955],[178880,572152],[689477,514734],[691351,514630],[866669,506128],[370561,539656],[739805,512051],[71060,619441],[624861,518534],[261660,554714],[366137,540160],[166054,575698],[601878,519990],[153445,579501],[279899,551729],[379166,538691],[423209,534125],[675310,515526],[145641,582050],[691353,514627],[917468,504026],[284778,550976],[81040,612235],[161699,576978],[616394,519057],[767490,510661],[156896,578431],[427408,533714],[254849,555884],[737217,512182],[897133,504851],[203815,566051],[270822,553189],[135854,585475],[778805,510111],[784373,509847],[305426,547921],[733418,512375],[732087,512448],[540668,524215],[702898,513996],[628057,518328],[640280,517587],[422405,534204],[10604,746569],[746038,511733],[839808,507293],[457417,530938],[479030,529064],[341758,543090],[620223,518824],[251661,556451],[561790,522696],[497733,527521],[724201,512863],[489217,528217],[415623,534867],[624610,518548],[847541,506953],[432295,533249],[400391,536421],[961158,502319],[139173,584284],[421225,534315],[579083,521501],[74274,617000],[701142,514087],[374465,539219],[217814,562985],[358972,540995],[88629,607424],[288597,550389],[285819,550812],[538400,524385],[809930,508645],[738326,512126],[955461,502535],[163829,576343],[826475,507891],[376488,538987],[102234,599905],[114650,594002],[52815,636341],[434037,533082],[804744,508880],[98385,601905],[856620,506559],[220057,562517],[844734,507078],[150677,580387],[558697,522917],[621751,518719],[207067,565321],[135297,585677],[932968,503404],[604456,519822],[579728,521462],[244138,557813],[706487,513800],[711627,513523],[853833,506674],[497220,527562],[59428,629511],[564845,522486],[623621,518603],[242689,558077],[125091,589591],[363819,540432],[686453,514901],[656813,516594],[489901,528155],[386380,537905],[542819,524052],[243987,557841],[693412,514514],[488484,528271],[896331,504881],[336730,543721],[728298,512647],[604215,519840],[153729,579413],[595687,520398],[540360,524240],[245779,557511],[924873,503730],[509628,526577],[528523,525122],[3509,847707],[522756,525555],[895447,504922],[44840,646067],[45860,644715],[463487,530404],[398164,536654],[894483,504959],[619415,518874],[966306,502129],[990922,501212],[835756,507474],[548881,523618],[453578,531282],[474993,529410],[80085,612879],[737091,512193],[50789,638638],[979768,501620],[792018,509483],[665001,516122],[86552,608694],[462772,530469],[589233,520821],[891694,505072],[592605,520594],[209645,564741],[42531,649269],[554376,523226],[803814,508929],[334157,544042],[175836,572970],[868379,506051],[658166,516520],[278203,551995],[966198,502126],[627162,518387],[296774,549165],[311803,547027],[843797,507118],[702304,514032],[563875,522553],[33103,664910],[191932,568841],[543514,524006],[506835,526794],[868368,506052],[847025,506971],[678623,515342],[876139,505726],[571997,521984],[598632,520198],[213590,563892],[625404,518497],[726508,512738],[689426,514738],[332495,544264],[411366,535302],[242546,558110],[315209,546555],[797544,509219],[93889,604371],[858879,506454],[124906,589666],[449072,531693],[235960,559345],[642403,517454],[720567,513047],[705534,513858],[603692,519870],[488137,528302],[157370,578285],[63515,625730],[666326,516041],[619226,518883],[443613,532186],[597717,520257],[96225,603069],[86940,608450],[40725,651929],[460976,530625],[268875,553508],[270671,553214],[363254,540500],[384248,538137],[762889,510892],[377941,538833],[278878,551890],[176615,572755],[860008,506412],[944392,502967],[608395,519571],[225283,561450],[45095,645728],[333798,544090],[625733,518476],[995584,501037],[506135,526853],[238050,558952],[557943,522972],[530978,524938],[634244,517949],[177168,572616],[85200,609541],[953043,502630],[523661,525484],[999295,500902],[840803,507246],[961490,502312],[471747,529685],[380705,538523],[911180,504275],[334149,544046],[478992,529065],[325789,545133],[335884,543826],[426976,533760],[749007,511582],[667067,516000],[607586,519623],[674054,515599],[188534,569675],[565185,522464],[172090,573988],[87592,608052],[907432,504424],[8912,760841],[928318,503590],[757917,511138],[718693,513153],[315141,546566],[728326,512645],[353492,541647],[638429,517695],[628892,518280],[877286,505672],[620895,518778],[385878,537959],[423311,534113],[633501,517997],[884833,505360],[883402,505416],[999665,500894],[708395,513697],[548142,523667],[756491,511205],[987352,501340],[766520,510705],[591775,520647],[833758,507563],[843890,507108],[925551,503698],[74816,616598],[646942,517187],[354923,541481],[256291,555638],[634470,517942],[930904,503494],[134221,586071],[282663,551304],[986070,501394],[123636,590176],[123678,590164],[481717,528841],[423076,534137],[866246,506145],[93313,604697],[783632,509880],[317066,546304],[502977,527103],[141272,583545],[71708,618938],[617748,518975],[581190,521362],[193824,568382],[682368,515131],[352956,541712],[351375,541905],[505362,526909],[905165,504518],[128645,588188],[267143,553787],[158409,577965],[482776,528754],[628896,518282],[485233,528547],[563606,522574],[111001,595655],[115920,593445],[365510,540237],[959724,502374],[938763,503184],[930044,503520],[970959,501956],[913658,504176],[68117,621790],[989729,501253],[567697,522288],[820427,508163],[54236,634794],[291557,549938],[124961,589646],[403177,536130],[405421,535899],[410233,535417],[815111,508403],[213176,563974],[83099,610879],[998588,500934],[513640,526263],[129817,587733],[1820,921851],[287584,550539],[299160,548820],[860621,506386],[529258,525059],[586297,521017],[953406,502616],[441234,532410],[986217,501386],[781938,509957],[461247,530595],[735424,512277],[146623,581722],[839838,507288],[510667,526494],[935085,503327],[737523,512167],[303455,548204],[992779,501145],[60240,628739],[939095,503174],[794368,509370],[501825,527189],[459028,530798],[884641,505363],[512287,526364],[835165,507499],[307723,547590],[160587,577304],[735043,512300],[493289,527887],[110717,595785],[306480,547772],[318593,546089],[179810,571911],[200531,566799],[314999,546580],[197020,567622],[301465,548487],[237808,559000],[131944,586923],[882527,505449],[468117,530003],[711319,513541],[156240,578628],[965452,502162],[992756,501148],[437959,532715],[739938,512046],[614249,519196],[391496,537356],[62746,626418],[688215,514806],[75501,616091],[883573,505412],[558824,522910],[759371,511061],[173913,573489],[891351,505089],[727464,512693],[164833,576051],[812317,508529],[540320,524243],[698061,514257],[69149,620952],[471673,529694],[159092,577753],[428134,533653],[89997,606608],[711061,513557],[779403,510081],[203327,566155],[798176,509187],[667688,515963],[636120,517833],[137410,584913],[217615,563034],[556887,523038],[667229,515991],[672276,515708],[325361,545187],[172115,573985],[13846,725685] ]; --seed-contents-- ```js function largestExponential(baseExp) { return true; } // Only change code above this line const testArray1 = [ [492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123] ]; largestExponential(testArray1); ``` --solutions-- ```js function largestExponential(baseExp) { let maximum = 0; let indexOfMaximum = 0; for (let i = 1; i < baseExplength; i++) { const curValue = Mathlog(baseExp[i][0]) * baseExp[i][1];\nif (curValue > maximum) {\nmaximum = curValue;\nindexOfMaximum = i;\n}\n}\nreturn baseExp[indexOfMaximum];\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 17836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md",
      "source_type": "git_repo"
    },
    "token_count": 6315,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a5b41bbf862061a786b24aa2e0a995ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-106-special-subset-sums-meta-testing.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d71000cf542c50fee9\ntitle: 'Problem 106: Special subset sums: meta-testing'\nchallengeType: 1\nforumTopicId: 301730\ndashedName: problem-106-special-subset-sums-meta-testing\n--description--\nLet $S(A)$ represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:\n$S(B) ≠ S(C)$; that is, sums of subsets cannot be equal.\nIf B contains more elements than C then $S(B) > S(C)$.\nFor this problem we shall assume that a given set contains n strictly increasing elements and it already satisfies the second rule.\nSurprisingly, out of the 25 possible subset pairs that can be obtained from a set for which n = 4, only 1 of these pairs need to be tested for equality (first rule). Similarly, when n = 7, only 70 out of the 966 subset pairs need to be tested.\nFor n = 12, how many of the 261625 subset pairs that can be obtained need to be tested for equality?\nNote: This problem is related to Problem 103 and Problem 105.\n--hints--\nsubsetSumsMetaTesting() should return 21384.\njs\nassert.strictEqual(subsetSumsMetaTesting(), 21384);\n--seed--\n--seed-contents--\n```js\nfunction subsetSumsMetaTesting() {\nreturn true;\n}\nsubsetSumsMetaTesting();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1358,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-106-special-subset-sums-meta-testing.md",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3b5b0b069e3b285eb394fdd627523e9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-105-special-subset-sums-testing.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d61000cf542c50fee8\ntitle: 'Problem 105: Special subset sums: testing'\nchallengeType: 1\nforumTopicId: 301729\ndashedName: problem-105-special-subset-sums-testing\n--description--\nLet $S(A)$ represent the sum of elements in set A of size n We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:\n$S(B) ≠ S(C)$; that is, sums of subsets cannot be equal If B contains more elements than C then $S(B) > S(C)$ For example, {81, 88, 75, 42, 87, 84, 86, 65} is not a special sum set because 65 + 87 + 88 = 75 + 81 + 84, whereas {157, 150, 164, 119, 79, 159, 161, 139, 158} satisfies both rules for all possible subset pair combinations and $S(A) = 1286$ Using sets, an array with one-hundred sets, containing seven to twelve elements (the two examples given above are the first two sets), identify all the special sum sets, $A_1, A_2, \\ldots, A_k$, and find the value of $(A_1) + S(A_2) + \\cdots + S(A_k)$ Note: This problem is related to Problem 103 and Problem 106 --hints--\ntestingSpecialSubsetSums(testSets) should return 73702 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-105-special-subset-sums-testing.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "590e403af38d81d3878882c7803266f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-105-special-subset-sums-testing.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "158} satisfies both rules for all possible subset pair combinations and $S(A) = 1286$ Using sets, an array with one-hundred sets, containing seven to twelve elements (the two examples given above are the first two sets), identify all the special sum sets, $A_1, A_2, \\ldots, A_k$, and find the value of $(A_1) + S(A_2) + \\cdots + S(A_k)$ Note: This problem is related to Problem 103 and Problem 106 --hints-- testingSpecialSubsetSums(testSets) should return 73702 js assertstrictEqual(testingSpecialSubsetSums(_testSets), 73702);\n--seed--\n--after-user-code--\njs\nconst _testSets = [\n[81,88,75,42,87,84,86,65],[157,150,164,119,79,159,161,139,158],[673,465,569,603,629,592,584,300,601,599,600],[90,85,83,84,65,87,76,46],[165,168,169,190,162,85,176,167,127],[224,275,278,249,277,279,289,295,139],[354,370,362,384,359,324,360,180,350,270],[599,595,557,298,448,596,577,667,597,588,602],[175,199,137,88,187,173,168,171,174],[93,187,196,144,185,178,186,202,182],[157,155,81,158,119,176,152,167,159],[184,165,159,166,163,167,174,124,83],[1211,1212,1287,605,1208,1189,1060,1216,1243,1200,908,1210],[339,299,153,305,282,304,313,306,302,228],[94,104,63,112,80,84,93,96],[41,88,82,85,61,74,83,81],[90,67,84,83,82,97,86,41],[299,303,151,301,291,302,307,377,333,280],[55,40,48,44,25,42,41],[1038,1188,1255,1184,594,890,1173,1151,1186,1203,1187,1195],[76,132,133,144,135,99,128,154],[77,46,108,81,85,84,93,83],[624,596,391,605,529,610,607,568,604,603,453],[83,167,166,189,163,174,160,165,133],[308,281,389,292,346,303,302,304,300,173],[593,1151,1187,1184,890,1040,1173,1186,1195,1255,1188,1203],[68,46,64,33,60,58,65],[65,43,88,87,86,99,93,90],[83,78,107,48,84,87,96,85],[1188,1173,1256,1038,1187,1151,890,1186,1184,1203,594,1195],[302,324,280,296,294,160,367,298,264,299],[521,760,682,687,646,664,342,698,692,686,672],[56,95,86,97,96,89,108,120],[344,356,262,343,340,382,337,175,361,330],[47,44,42,27,41,40,37],[139,155,161,158,118,166,154,156,78],[118,157,164,158,161,79,139,150,159],[299,292,371,150,300,301,281,303,306,262],[85,77,86,84,44,88,91,67],[88,85,84,44,65,91,76,86],[138,141,127,96,136,154,135,76],[292,308,302,346,300,324,304,305,238,166],[354,342,341,257,348,343,345,321,170,301],[84,178,168,167,131,170,193,166,162],[686,701,706,673,694,687,652,343,683,606,518],[295,293,301,367,296,279,297,263,323,159],[1038,1184,593,890,1188,1173,1187,1186,1195,1150,1203,1255],[343,364,388,402,191,383,382,385,288,374],[1187,1036,1183,591,1184,1175,888,1197,1182,1219,1115,1167],[151,291,307,303,345,238,299,323,301,302],[140,151,143,138,99,69,131,137],[29,44,42,59,41,36,40],[348,329,343,344,338,315,169,359,375,271],[48,39,34,37,50,40,41],[593,445,595,558,662,602,591,297,610,580,594],[686,651,681,342,541,687,691,707,604,675,699],[180,99,189,166,194,188,144,187,199],[321,349,335,343,377,176,265,356,344,332],[1151,1255,1195,1173,1184,1186,1188,1187,1203,593,1038,891],[90,88,100,83,62,113,80,89],[308,303,238,300,151,304,324,293,346,302],[59,38,50,41,42,35,40],[352,366,174,355,344,265,343,310,338,331],[91,89,93,90,117,85,60,106],[146,186,166,175,202,92,184,183,189],[82,67,96,44,80,79,88,76],[54,50,58,66,31,61,64],[343,266,344,172,308,336,364,350,359,333],[88,49,87,82,90,98,86,115],[20,47,49,51,54,48,40],[159,79,177,158,157,152,155,167,118],[1219,1183,1182,1115,1035,1186,591,1197,1167,887,1184,1175],[611,518,693,343,704,667,686,682,677,687,725],[607,599,634,305,677,604,603,580,452,605,591],[682,686,635,675,692,730,687,342,517,658,695],[662,296,573,598,592,584,553,593,595,443,591],[180,185,186,199,187,210,93,177,149],[197,136,179,185,156,182,180,178,99],[271,298,218,279,285,282,280,238,140],[1187,1151,890,593,1194,1188,1184,1173,1038,1186,1255,1203],[169,161,177,192,130,165,84,167,168],[50,42,43,41,66,39,36],[590,669,604,579,448,599,560,299,601,597,598],[174,191,206,179,184,142,177,180,90],[298,299,297,306,164,285,374,269,329,295],[181,172,162,138,170,195,86,169,168],[1184,1197,591,1182,1186,889,1167,1219,1183,1033,1115,1175],[644,695,691,679,667,687,340,681,770,686,517],[606,524,592,576,628,593,591,584,296,444,595],[94,127,154,138,135,74,136,141],[179,168,172,178,177,89,198,186,137],[302,299,291,300,298,149,260,305,280,370],[678,517,670,686,682,768,687,648,342,692,702],[302,290,304,376,333,303,306,298,279,153],[95,102,109,54,96,75,85,97],[150,154,146,78,152,151,162,173,119],[150,143,157,152,184,112,154,151,132],[36,41,54,40,25,44,42],[37,48,34,59,39,41,40],[681,603,638,611,584,303,454,607,606,605,596]\n];\n--seed-contents--\n```js\nfunction testingSpecialSubsetSums(sets) {\nreturn true;\n}\nconst testSets = [\n[81,88,75,42,87,84,86,65],[157,150,164,119,79,159,161,139,158],[673,465,569,603,629,592,584,300,601,599,600],[90,85,83,84,65,87,76,46],[165,168,169,190,162,85,176,167,127],[224,275,278,249,277,279,289,295,139],[354,370,362,384,359,324,360,180,350,270],[599,595,557,298,448,596,577,667,597,588,602],[175,199,137,88,187,173,168,171,174],[93,187,196,144,185,178,186,202,182],[157,155,81,158,119,176,152,167,159],[184,165,159,166,163,167,174,124,83],[1211,1212,1287,605,1208,1189,1060,1216,1243,1200,908,1210],[339,299,153,305,282,304,313,306,302,228],[94,104,63,112,80,84,93,96],[41,88,82,85,61,74,83,81],[90,67,84,83,82,97,86,41],[299,303,151,301,291,302,307,377,333,280],[55,40,48,44,25,42,41],[1038,1188,1255,1184,594,890,1173,1151,1186,1203,1187,1195],[76,132,133,144,135,99,128,154],[77,46,108,81,85,84,93,83],[624,596,391,605,529,610,607,568,604,603,453],[83,167,166,189,163,174,160,165,133],[308,281,389,292,346,303,302,304,300,173],[593,1151,1187,1184,890,1040,1173,1186,1195,1255,1188,1203],[68,46,64,33,60,58,65],[65,43,88,87,86,99,93,90],[83,78,107,48,84,87,96,85],[1188,1173,1256,1038,1187,1151,890,1186,1184,1203,594,1195],[302,324,280,296,294,160,367,298,264,299],[521,760,682,687,646,664,342,698,692,686,672],[56,95,86,97,96,89,108,120],[344,356,262,343,340,382,337,175,361,330],[47,44,42,27,41,40,37],[139,155,161,158,118,166,154,156,78],[118,157,164,158,161,79,139,150,159],[299,292,371,150,300,301,281,303,306,262],[85,77,86,84,44,88,91,67],[88,85,84,44,65,91,76,86],[138,141,127,96,136,154,135,76],[292,308,302,346,300,324,304,305,238,166],[354,342,341,257,348,343,345,321,170,301],[84,178,168,167,131,170,193,166,162],[686,701,706,673,694,687,652,343,683,606,518],[295,293,301,367,296,279,297,263,323,159],[1038,1184,593,890,1188,1173,1187,1186,1195,1150,1203,1255],[343,364,388,402,191,383,382,385,288,374],[1187,1036,1183,591,1184,1175,888,1197,1182,1219,1115,1167],[151,291,307,303,345,238,299,323,301,302],[140,151,143,138,99,69,131,137],[29,44,42,59,41,36,40],[348,329,343,344,338,315,169,359,375,271],[48,39,34,37,50,40,41],[593,445,595,558,662,602,591,297,610,580,594],[686,651,681,342,541,687,691,707,604,675,699],[180,99,189,166,194,188,144,187,199],[321,349,335,343,377,176,265,356,344,332],[1151,1255,1195,1173,1184,1186,1188,1187,1203,593,1038,891],[90,88,100,83,62,113,80,89],[308,303,238,300,151,304,324,293,346,302],[59,38,50,41,42,35,40],[352,366,174,355,344,265,343,310,338,331],[91,89,93,90,117,85,60,106],[146,186,166,175,202,92,184,183,189],[82,67,96,44,80,79,88,76],[54,50,58,66,31,61,64],[343,266,344,172,308,336,364,350,359,333],[88,49,87,82,90,98,86,115],[20,47,49,51,54,48,40],[159,79,177,158,157,152,155,167,118],[1219,1183,1182,1115,1035,1186,591,1197,1167,887,1184,1175],[611,518,693,343,704,667,686,682,677,687,725],[607,599,634,305,677,604,603,580,452,605,591],[682,686,635,675,692,730,687,342,517,658,695],[662,296,573,598,592,584,553,593,595,443,591],[180,185,186,199,187,210,93,177,149],[197,136,179,185,156,182,180,178,99],[271,298,218,279,285,282,280,238,140],[1187,1151,890,593,1194,1188,1184,1173,1038,1186,1255,1203],[169,161,177,192,130,165,84,167,168],[50,42,43,41,66,39,36],[590,669,604,579,448,599,560,299,601,597,598],[174,191,206,179,184,142,177,180,90],[298,299,297,306,164,285,374,269,329,295],[181,172,162,138,170,195,86,169,168],[1184,1197,591,1182,1186,889,1167,1219,1183,1033,1115,1175],[644,695,691,679,667,687,340,681,770,686,517],[606,524,592,576,628,593,591,584,296,444,595],[94,127,154,138,135,74,136,141],[179,168,172,178,177,89,198,186,137],[302,299,291,300,298,149,260,305,280,370],[678,517,670,686,682,768,687,648,342,692,702],[302,290,304,376,333,303,306,298,279,153],[95,102,109,54,96,75,85,97],[150,154,146,78,152,151,162,173,119],[150,143,157,152,184,112,154,151,132],[36,41,54,40,25,44,42],[37,48,34,59,39,41,40],[681,603,638,611,584,303,454,607,606,605,596]\n];\ntestingSpecialSubsetSums(testSets);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-105-special-subset-sums-testing.md",
      "source_type": "git_repo"
    },
    "token_count": 4171,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "594f4f0580462aefa2fd1532672c1735",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-108-diophantine-reciprocals-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d91000cf542c50feeb\ntitle: 'Problem 108: Diophantine Reciprocals I'\nchallengeType: 1\nforumTopicId: 301732\ndashedName: problem-108-diophantine-reciprocals-i\n--description--\nIn the following equation x, y, and n are positive integers.\n$$\\frac{1}{x} + \\frac{1}{y} = \\frac{1}{n}$$\nFor n = 4 there are exactly three distinct solutions:\n$$\\begin{align}\n& \\frac{1}{5} + \\frac{1}{20} = \\frac{1}{4}\\\\\n\\\\\n& \\frac{1}{6} + \\frac{1}{12} = \\frac{1}{4}\\\\\n\\\\\n& \\frac{1}{8} + \\frac{1}{8} = \\frac{1}{4}\n\\end{align}$$\nWhat is the least value of n for which the number of distinct solutions exceeds one-thousand?\n--hints--\ndiophantineOne() should return 180180.\njs\nassert.strictEqual(diophantineOne(), 180180);\n--seed--\n--seed-contents--\n```js\nfunction diophantineOne() {\nreturn true;\n}\ndiophantineOne();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-108-diophantine-reciprocals-i.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c44517b846b08e5821471785b3473f5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-109-darts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3db1000cf542c50feec\ntitle: 'Problem 109: Darts'\nchallengeType: 1\nforumTopicId: 301733\ndashedName: problem-109-darts\n--description--\nIn the game of darts a player throws three darts at a target board which is split into twenty equal sized sections numbered one to twenty The score of a dart is determined by the number of the region that the dart lands in A dart landing outside the red/green outer ring scores zero The black and cream regions inside this ring represent single scores However, the red/green outer ring and middle ring score double and treble scores respectively At the center of the board are two concentric circles called the bull region, or bulls-eye The outer bull is worth 25 points and the inner bull is a double, worth 50 points There are many variations of rules but in the most popular game the players will begin with a score of 301 or 501 and the first player to reduce their running total to zero is a winner However, it is normal to play a \"doubles out\" system, which means that the player must land a double (including the double bulls-eye at the center of the board) on their final dart to win; any other dart that would reduce their running total to one or lower means the score for that set of three darts is \"bust\" When a player is able to finish on their current score it is called a \"checkout\" and the highest checkout is 170: T20 T20 D25 (two treble 20s and double bull) There are exactly eleven distinct ways to checkout on a score of 6:\n$$\\begin{array}\n\\text{D3} &    &    \\\\\nD1        & D2 &    \\\\\nS2        & D2 &    \\\\\nD2        & D1 &    \\\\\nS4        & D1 &    \\\\\nS1        & S1 & D2 \\\\\nS1        & T1 & D1 \\\\\nS1        & S3 & D1 \\\\\nD1        & D1 & D1 \\\\\nD1        & S2 & D1 \\\\\nS2        & S2 & D1\n\\end{array}$$\nNote that D1 D2 is considered different from D2 D1 as they finish on different doubles",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2706,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-109-darts.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c09acf7273e029daa2e6a9816427ea13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-109-darts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\text{D3} & & \\\\ D1 & D2 & \\\\ S2 & D2 & \\\\ D2 & D1 & \\\\ S4 & D1 & \\\\ S1 & S1 & D2 \\\\ S1 & T1 & D1 \\\\ S1 & S3 & D1 \\\\ D1 & D1 & D1 \\\\ D1 & S2 & D1 \\\\ S2 & S2 & D1 \\end{array}$$ Note that D1 D2 is considered different from D2 D1 as they finish on different doublesHowever, the combination S1 T1 D1 is considered the same as T1 S1 D1 In addition, we shall not include misses in considering combinations; for example, D3 is the same as 0 D3 and 0 0 D3 Incredibly there are 42336 distinct ways of checking out in total How many distinct ways can a player checkout with a score less than 100 --hints--\ndarts() should return 38182 js\nassert strictEqual(darts(), 38182);\n--seed--\n--seed-contents--\n```js\nfunction darts() {\nreturn true;\n}\ndarts();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2706,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-109-darts.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "17658d3ecb04930e88823b41fe6e10c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-110-diophantine-reciprocals-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3db1000cf542c50feed\ntitle: 'Problem 110: Diophantine Reciprocals II'\nchallengeType: 1\nforumTopicId: 301735\ndashedName: problem-110-diophantine-reciprocals-ii\n--description--\nIn the following equation x, y, and n are positive integers.\n$$\\frac{1}{x} + \\frac{1}{y} = \\frac{1}{n}$$\nIt can be verified that when n = 1260 there are 113 distinct solutions and this is the least value of n for which the total number of distinct solutions exceeds one hundred.\nWhat is the least value of n for which the number of distinct solutions exceeds four million?\nNote: This problem is a much more difficult version of Problem 108 and as it is well beyond the limitations of a brute force approach it requires a clever implementation.\n--hints--\ndiophantineTwo() should return 9350130049860600.\njs\nassert.strictEqual(diophantineTwo(), 9350130049860600);\n--seed--\n--seed-contents--\n```js\nfunction diophantineTwo() {\nreturn true;\n}\ndiophantineTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-110-diophantine-reciprocals-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b95c5e212d589f84c449e755b82d9478",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-111-primes-with-runs.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3db1000cf542c50feee\ntitle: 'Problem 111: Primes with runs'\nchallengeType: 1\nforumTopicId: 301736\ndashedName: problem-111-primes-with-runs\n--description--\nConsidering 4-digit primes containing repeated digits it is clear that they cannot all be the same: 1111 is divisible by 11, 2222 is divisible by 22, and so on But there are nine 4-digit primes containing three ones:\n$$1117, 1151, 1171, 1181, 1511, 1811, 2111, 4111, 8111$$\nWe shall say that $M(n, d)$ represents the maximum number of repeated digits for an n-digit prime where d is the repeated digit, $N(n, d)$ represents the number of such primes, and $S(n, d)$ represents the sum of these primes So $M(4, 1) = 3$ is the maximum number of repeated digits for a 4-digit prime where one is the repeated digit, there are $N(4, 1) = 9$ such primes, and the sum of these primes is $S(4, 1) = 22275$ It turns out that for d = 0, it is only possible to have $M(4, 0) = 2$ repeated digits, but there are $N(4, 0) = 13$ such cases In the same way we obtain the following results for 4-digit primes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2035,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-111-primes-with-runs.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b9b6b89b03b0e69f63539f9d2521a45b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-111-primes-with-runs.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the maximum number of repeated digits for a 4-digit prime where one is the repeated digit, there are $N(4, 1) = 9$ such primes, and the sum of these primes is $S(4, 1) = 22275$ It turns out that for d = 0, it is only possible to have $M(4, 0) = 2$ repeated digits, but there are $N(4, 0) = 13$ such cases In the same way we obtain the following results for 4-digit primes| Digit, d | $M(4, d)$ | $N(4, d)$ | $S(4, d)$ |\n|----------|-----------|-----------|-----------|\n| 0        | 2         | 13        | 67061     |\n| 1        | 3         | 9         | 22275     |\n| 2        | 3         | 1         | 2221      |\n| 3        | 3         | 12        | 46214     |\n| 4        | 3         | 2         | 8888      |\n| 5        | 3         | 1         | 5557      |\n| 6        | 3         | 1         | 6661      |\n| 7        | 3         | 9         | 57863     |\n| 8        | 3         | 1         | 8887      |\n| 9        | 3         | 7         | 48073     |\nFor d = 0 to 9, the sum of all $S(4, d)$ is 273700 Find the sum of all $S(10, d)$ --hints--\nprimesWithRuns() should return 612407567715 js\nassert strictEqual(primesWithRuns(), 612407567715);\n--seed--\n--seed-contents--\n```js\nfunction primesWithRuns() {\nreturn true;\n}\nprimesWithRuns();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2035,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-111-primes-with-runs.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3163dd49768e1f23d1ecfae9efd79849",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-107-minimal-network.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d91000cf542c50feea\ntitle: 'Problem 107: Minimal network'\nchallengeType: 1\nforumTopicId: 301731\ndashedName: problem-107-minimal-network\n--description--\nThe following undirected network consists of seven vertices and twelve edges with a total weight of 243 The same network can be represented by the matrix below |   | A  | B  | C  | D  | E  | F  | G  |\n|---|----|----|----|----|----|----|----|\n| A | -  | 16 | 12 | 21 | -  | -  | -  |\n| B | 16 | -  | -  | 17 | 20 | -  | -  |\n| C | 12 | -  | -  | 28 | -  | 31 | -  |\n| D | 21 | 17 | 28 | -  | 18 | 19 | 23 |\n| E | -  | 20 | -  | 18 | -  | -  | 11 |\n| F | -  | -  | 31 | 19 | -  | -  | 27 |\n| G | -  | -  | -  | 23 | 11 | 27 | -  |\nHowever, it is possible to optimise the network by removing some edges and still ensure that all points on the network remain connected The network which achieves the maximum saving is shown below It has a weight of 93, representing a saving of 243 − 93 = 150 from the original network Using network, an 2D array representing network in matrix form, find the maximum saving which can be achieved by removing redundant edges whilst ensuring that the network remains connected Vertices not having connection will be represented with -1 --hints--\nminimalNetwork(testNetwork) should return 259679 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-107-minimal-network.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "db38ab62cc1ef81a4da3b3b45c6130de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-107-minimal-network.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "remain connected The network which achieves the maximum saving is shown below It has a weight of 93, representing a saving of 243 − 93 = 150 from the original network Using network, an 2D array representing network in matrix form, find the maximum saving which can be achieved by removing redundant edges whilst ensuring that the network remains connected Vertices not having connection will be represented with -1 --hints-- minimalNetwork(testNetwork) should return 259679 js assertstrictEqual(minimalNetwork(_testNetwork), 259679);\n--seed--\n--after-user-code--\njs\nconst _testNetwork = [\n[-1,-1,-1,427,668,495,377,678,-1,177,-1,-1,870,-1,869,624,300,609,131,-1,251,-1,-1,-1,856,221,514,-1,591,762,182,56,-1,884,412,273,636,-1,-1,774],[-1,-1,262,-1,-1,508,472,799,-1,956,578,363,940,143,-1,162,122,910,-1,729,802,941,922,573,531,539,667,607,-1,920,-1,-1,315,649,937,-1,185,102,636,289],[-1,262,-1,-1,926,-1,958,158,647,47,621,264,81,-1,402,813,649,386,252,391,264,637,349,-1,-1,-1,108,-1,727,225,578,699,-1,898,294,-1,575,168,432,833],[427,-1,-1,-1,366,-1,-1,635,-1,32,962,468,893,854,718,427,448,916,258,-1,760,909,529,311,404,-1,-1,588,680,875,-1,615,-1,409,758,221,-1,-1,76,257],[668,-1,926,366,-1,-1,-1,250,268,-1,503,944,-1,677,-1,727,793,457,981,191,-1,-1,-1,351,969,925,987,328,282,589,-1,873,477,-1,-1,19,450,-1,-1,-1],[495,508,-1,-1,-1,-1,-1,765,711,819,305,302,926,-1,-1,582,-1,861,-1,683,293,-1,-1,66,-1,27,-1,-1,290,-1,786,-1,554,817,33,-1,54,506,386,381],[377,472,958,-1,-1,-1,-1,-1,-1,120,42,-1,134,219,457,639,538,374,-1,-1,-1,966,-1,-1,-1,-1,-1,449,120,797,358,232,550,-1,305,997,662,744,686,239],[678,799,158,635,250,765,-1,-1,-1,35,-1,106,385,652,160,-1,890,812,605,953,-1,-1,-1,79,-1,712,613,312,452,-1,978,900,-1,901,-1,-1,225,533,770,722],[-1,-1,647,-1,268,711,-1,-1,-1,283,-1,172,-1,663,236,36,403,286,986,-1,-1,810,761,574,53,793,-1,-1,777,330,936,883,286,-1,174,-1,-1,-1,828,711],[177,956,47,32,-1,819,120,35,283,-1,50,-1,565,36,767,684,344,489,565,-1,-1,103,810,463,733,665,494,644,863,25,385,-1,342,470,-1,-1,-1,730,582,468],[-1,578,621,962,503,305,42,-1,-1,50,-1,155,519,-1,-1,256,990,801,154,53,474,650,402,-1,-1,-1,966,-1,-1,406,989,772,932,7,-1,823,391,-1,-1,933],[-1,363,264,468,944,302,-1,106,172,-1,155,-1,-1,-1,380,438,-1,41,266,-1,-1,104,867,609,-1,270,861,-1,-1,165,-1,675,250,686,995,366,191,-1,433,-1],[870,940,81,893,-1,926,134,385,-1,565,519,-1,-1,313,851,-1,-1,-1,248,220,-1,826,359,829,-1,234,198,145,409,68,359,-1,814,218,186,-1,-1,929,203,-1],[-1,143,-1,854,677,-1,219,652,663,36,-1,-1,313,-1,132,-1,433,598,-1,-1,168,870,-1,-1,-1,128,437,-1,383,364,966,227,-1,-1,807,993,-1,-1,526,17],[869,-1,402,718,-1,-1,457,160,236,767,-1,380,851,132,-1,-1,596,903,613,730,-1,261,-1,142,379,885,89,-1,848,258,112,-1,900,-1,-1,818,639,268,600,-1],[624,162,813,427,727,582,639,-1,36,684,256,438,-1,-1,-1,-1,539,379,664,561,542,-1,999,585,-1,-1,321,398,-1,-1,950,68,193,-1,697,-1,390,588,848,-1],[300,122,649,448,793,-1,538,890,403,344,990,-1,-1,433,596,539,-1,-1,73,-1,318,-1,-1,500,-1,968,-1,291,-1,-1,765,196,504,757,-1,542,-1,395,227,148],[609,910,386,916,457,861,374,812,286,489,801,41,-1,598,903,379,-1,-1,-1,946,136,399,-1,941,707,156,757,258,251,-1,807,-1,-1,-1,461,501,-1,-1,616,-1],[131,-1,252,258,981,-1,-1,605,986,565,154,266,248,-1,613,664,73,-1,-1,686,-1,-1,575,627,817,282,-1,698,398,222,-1,649,-1,-1,-1,-1,-1,654,-1,-1],[-1,729,391,-1,191,683,-1,953,-1,-1,53,-1,220,-1,730,561,-1,946,686,-1,-1,389,729,553,304,703,455,857,260,-1,991,182,351,477,867,-1,-1,889,217,853],[251,802,264,760,-1,293,-1,-1,-1,-1,474,-1,-1,168,-1,542,318,136,-1,-1,-1,-1,392,-1,-1,-1,267,407,27,651,80,927,-1,974,977,-1,-1,457,117,-1],[-1,941,637,909,-1,-1,966,-1,810,103,650,104,826,870,261,-1,-1,399,-1,389,-1,-1,-1,202,-1,-1,-1,-1,867,140,403,962,785,-1,511,-1,1,-1,707,-1],[-1,922,349,529,-1,-1,-1,-1,761,810,402,867,359,-1,-1,999,-1,-1,575,729,392,-1,-1,388,939,-1,959,-1,83,463,361,-1,-1,512,931,-1,224,690,369,-1],[-1,573,-1,311,351,66,-1,79,574,463,-1,609,829,-1,142,585,500,941,627,553,-1,202,388,-1,164,829,-1,620,523,639,936,-1,-1,490,-1,695,-1,505,109,-1],[856,531,-1,404,969,-1,-1,-1,53,733,-1,-1,-1,-1,379,-1,-1,707,817,304,-1,-1,939,164,-1,-1,616,716,728,-1,889,349,-1,963,150,447,-1,292,586,264],[221,539,-1,-1,925,27,-1,712,793,665,-1,270,234,128,885,-1,968,156,282,703,-1,-1,-1,829,-1,-1,-1,822,-1,-1,-1,736,576,-1,697,946,443,-1,205,194],[514,667,108,-1,987,-1,-1,613,-1,494,966,861,198,437,89,321,-1,757,-1,455,267,-1,959,-1,616,-1,-1,-1,349,156,339,-1,102,790,359,-1,439,938,809,260],[-1,607,-1,588,328,-1,449,312,-1,644,-1,-1,145,-1,-1,398,291,258,698,857,407,-1,-1,620,716,822,-1,-1,293,486,943,-1,779,-1,6,880,116,775,-1,947],[591,-1,727,680,282,290,120,452,777,863,-1,-1,409,383,848,-1,-1,251,398,260,27,867,83,523,728,-1,349,293,-1,212,684,505,341,384,9,992,507,48,-1,-1],[762,920,225,875,589,-1,797,-1,330,25,406,165,68,364,258,-1,-1,-1,222,-1,651,140,463,639,-1,-1,156,486,212,-1,-1,349,723,-1,-1,186,-1,36,240,752],[182,-1,578,-1,-1,786,358,978,936,385,989,-1,359,966,112,950,765,807,-1,991,80,403,361,936,889,-1,339,943,684,-1,-1,965,302,676,725,-1,327,134,-1,147],[56,-1,699,615,873,-1,232,900,883,-1,772,675,-1,227,-1,68,196,-1,649,182,927,962,-1,-1,349,736,-1,-1,505,349,965,-1,474,178,833,-1,-1,555,853,-1],[-1,315,-1,-1,477,554,550,-1,286,342,932,250,814,-1,900,193,504,-1,-1,351,-1,785,-1,-1,-1,576,102,779,341,723,302,474,-1,689,-1,-1,-1,451,-1,-1],[884,649,898,409,-1,817,-1,901,-1,470,7,686,218,-1,-1,-1,757,-1,-1,477,974,-1,512,490,963,-1,790,-1,384,-1,676,178,689,-1,245,596,445,-1,-1,343],[412,937,294,758,-1,33,305,-1,174,-1,-1,995,186,807,-1,697,-1,461,-1,867,977,511,931,-1,150,697,359,6,9,-1,725,833,-1,245,-1,949,-1,270,-1,112],[273,-1,-1,221,19,-1,997,-1,-1,-1,823,366,-1,993,818,-1,542,501,-1,-1,-1,-1,-1,695,447,946,-1,880,992,186,-1,-1,-1,596,949,-1,91,-1,768,273],[636,185,575,-1,450,54,662,225,-1,-1,391,191,-1,-1,639,390,-1,-1,-1,-1,-1,1,224,-1,-1,443,439,116,507,-1,327,-1,-1,445,-1,91,-1,248,-1,344],[-1,102,168,-1,-1,506,744,533,-1,730,-1,-1,929,-1,268,588,395,-1,654,889,457,-1,690,505,292,-1,938,775,48,36,134,555,451,-1,270,-1,248,-1,371,680],[-1,636,432,76,-1,386,686,770,828,582,-1,433,203,526,600,848,227,616,-1,217,117,707,369,109,586,205,809,-1,-1,240,-1,853,-1,-1,-1,768,-1,371,-1,540],[774,289,833,257,-1,381,239,722,711,468,933,-1,-1,17,-1,-1,148,-1,-1,853,-1,-1,-1,-1,264,194,260,947,-1,752,147,-1,-1,343,112,273,344,680,540,-1]\n];\n--seed-contents--\n```js\nfunction minimalNetwork(network) {\nreturn true;\n}\nconst testNetwork = [\n[-1,-1,-1,427,668,495,377,678,-1,177,-1,-1,870,-1,869,624,300,609,131,-1,251,-1,-1,-1,856,221,514,-1,591,762,182,56,-1,884,412,273,636,-1,-1,774],[-1,-1,262,-1,-1,508,472,799,-1,956,578,363,940,143,-1,162,122,910,-1,729,802,941,922,573,531,539,667,607,-1,920,-1,-1,315,649,937,-1,185,102,636,289],[-1,262,-1,-1,926,-1,958,158,647,47,621,264,81,-1,402,813,649,386,252,391,264,637,349,-1,-1,-1,108,-1,727,225,578,699,-1,898,294,-1,575,168,432,833],[427,-1,-1,-1,366,-1,-1,635,-1,32,962,468,893,854,718,427,448,916,258,-1,760,909,529,311,404,-1,-1,588,680,875,-1,615,-1,409,758,221,-1,-1,76,257],[668,-1,926,366,-1,-1,-1,250,268,-1,503,944,-1,677,-1,727,793,457,981,191,-1,-1,-1,351,969,925,987,328,282,589,-1,873,477,-1,-1,19,450,-1,-1,-1],[495,508,-1,-1,-1,-1,-1,765,711,819,305,302,926,-1,-1,582,-1,861,-1,683,293,-1,-1,66,-1,27,-1,-1,290,-1,786,-1,554,817,33,-1,54,506,386,381],[377,472,958,-1,-1,-1,-1,-1,-1,120,42,-1,134,219,457,639,538,374,-1,-1,-1,966,-1,-1,-1,-1,-1,449,120,797,358,232,550,-1,305,997,662,744,686,239],[678,799,158,635,250,765,-1,-1,-1,35,-1,106,385,652,160,-1,890,812,605,953,-1,-1,-1,79,-1,712,613,312,452,-1,978,900,-1,901,-1,-1,225,533,770,722],[-1,-1,647,-1,268,711,-1,-1,-1,283,-1,172,-1,663,236,36,403,286,986,-1,-1,810,761,574,53,793,-1,-1,777,330,936,883,286,-1,174,-1,-1,-1,828,711],[177,956,47,32,-1,819,120,35,283,-1,50,-1,565,36,767,684,344,489,565,-1,-1,103,810,463,733,665,494,644,863,25,385,-1,342,470,-1,-1,-1,730,582,468],[-1,578,621,962,503,305,42,-1,-1,50,-1,155,519,-1,-1,256,990,801,154,53,474,650,402,-1,-1,-1,966,-1,-1,406,989,772,932,7,-1,823,391,-1,-1,933],[-1,363,264,468,944,302,-1,106,172,-1,155,-1,-1,-1,380,438,-1,41,266,-1,-1,104,867,609,-1,270,861,-1,-1,165,-1,675,250,686,995,366,191,-1,433,-1],[870,940,81,893,-1,926,134,385,-1,565,519,-1,-1,313,851,-1,-1,-1,248,220,-1,826,359,829,-1,234,198,145,409,68,359,-1,814,218,186,-1,-1,929,203,-1],[-1,143,-1,854,677,-1,219,652,663,36,-1,-1,313,-1,132,-1,433,598,-1,-1,168,870,-1,-1,-1,128,437,-1,383,364,966,227,-1,-1,807,993,-1,-1,526,17],[869,-1,402,718,-1,-1,457,160,236,767,-1,380,851,132,-1,-1,596,903,613,730,-1,261,-1,142,379,885,89,-1,848,258,112,-1,900,-1,-1,818,639,268,600,-1],[624,162,813,427,727,582,639,-1,36,684,256,438,-1,-1,-1,-1,539,379,664,561,542,-1,999,585,-1,-1,321,398,-1,-1,950,68,193,-1,697,-1,390,588,848,-1],[300,122,649,448,793,-1,538,890,403,344,990,-1,-1,433,596,539,-1,-1,73,-1,318,-1,-1,500,-1,968,-1,291,-1,-1,765,196,504,757,-1,542,-1,395,227,148],[609,910,386,916,457,861,374,812,286,489,801,41,-1,598,903,379,-1,-1,-1,946,136,399,-1,941,707,156,757,258,251,-1,807,-1,-1,-1,461,501,-1,-1,616,-1],[131,-1,252,258,981,-1,-1,605,986,565,154,266,248,-1,613,664,73,-1,-1,686,-1,-1,575,627,817,282,-1,698,398,222,-1,649,-1,-1,-1,-1,-1,654,-1,-1],[-1,729,391,-1,191,683,-1,953,-1,-1,53,-1,220,-1,730,561,-1,946,686,-1,-1,389,729,553,304,703,455,857,260,-1,991,182,351,477,867,-1,-1,889,217,853],[251,802,264,760,-1,293,-1,-1,-1,-1,474,-1,-1,168,-1,542,318,136,-1,-1,-1,-1,392,-1,-1,-1,267,407,27,651,80,927,-1,974,977,-1,-1,457,117,-1],[-1,941,637,909,-1,-1,966,-1,810,103,650,104,826,870,261,-1,-1,399,-1,389,-1,-1,-1,202,-1,-1,-1,-1,867,140,403,962,785,-1,511,-1,1,-1,707,-1],[-1,922,349,529,-1,-1,-1,-1,761,810,402,867,359,-1,-1,999,-1,-1,575,729,392,-1,-1,388,939,-1,959,-1,83,463,361,-1,-1,512,931,-1,224,690,369,-1],[-1,573,-1,311,351,66,-1,79,574,463,-1,609,829,-1,142,585,500,941,627,553,-1,202,388,-1,164,829,-1,620,523,639,936,-1,-1,490,-1,695,-1,505,109,-1],[856,531,-1,404,969,-1,-1,-1,53,733,-1,-1,-1,-1,379,-1,-1,707,817,304,-1,-1,939,164,-1,-1,616,716,728,-1,889,349,-1,963,150,447,-1,292,586,264],[221,539,-1,-1,925,27,-1,712,793,665,-1,270,234,128,885,-1,968,156,282,703,-1,-1,-1,829,-1,-1,-1,822,-1,-1,-1,736,576,-1,697,946,443,-1,205,194],[514,667,108,-1,987,-1,-1,613,-1,494,966,861,198,437,89,321,-1,757,-1,455,267,-1,959,-1,616,-1,-1,-1,349,156,339,-1,102,790,359,-1,439,938,809,260],[-1,607,-1,588,328,-1,449,312,-1,644,-1,-1,145,-1,-1,398,291,258,698,857,407,-1,-1,620,716,822,-1,-1,293,486,943,-1,779,-1,6,880,116,775,-1,947],[591,-1,727,680,282,290,120,452,777,863,-1,-1,409,383,848,-1,-1,251,398,260,27,867,83,523,728,-1,349,293,-1,212,684,505,341,384,9,992,507,48,-1,-1],[762,920,225,875,589,-1,797,-1,330,25,406,165,68,364,258,-1,-1,-1,222,-1,651,140,463,639,-1,-1,156,486,212,-1,-1,349,723,-1,-1,186,-1,36,240,752],[182,-1,578,-1,-1,786,358,978,936,385,989,-1,359,966,112,950,765,807,-1,991,80,403,361,936,889,-1,339,943,684,-1,-1,965,302,676,725,-1,327,134,-1,147],[56,-1,699,615,873,-1,232,900,883,-1,772,675,-1,227,-1,68,196,-1,649,182,927,962,-1,-1,349,736,-1,-1,505,349,965,-1,474,178,833,-1,-1,555,853,-1],[-1,315,-1,-1,477,554,550,-1,286,342,932,250,814,-1,900,193,504,-1,-1,351,-1,785,-1,-1,-1,576,102,779,341,723,302,474,-1,689,-1,-1,-1,451,-1,-1],[884,649,898,409,-1,817,-1,901,-1,470,7,686,218,-1,-1,-1,757,-1,-1,477,974,-1,512,490,963,-1,790,-1,384,-1,676,178,689,-1,245,596,445,-1,-1,343],[412,937,294,758,-1,33,305,-1,174,-1,-1,995,186,807,-1,697,-1,461,-1,867,977,511,931,-1,150,697,359,6,9,-1,725,833,-1,245,-1,949,-1,270,-1,112],[273,-1,-1,221,19,-1,997,-1,-1,-1,823,366,-1,993,818,-1,542,501,-1,-1,-1,-1,-1,695,447,946,-1,880,992,186,-1,-1,-1,596,949,-1,91,-1,768,273],[636,185,575,-1,450,54,662,225,-1,-1,391,191,-1,-1,639,390,-1,-1,-1,-1,-1,1,224,-1,-1,443,439,116,507,-1,327,-1,-1,445,-1,91,-1,248,-1,344],[-1,102,168,-1,-1,506,744,533,-1,730,-1,-1,929,-1,268,588,395,-1,654,889,457,-1,690,505,292,-1,938,775,48,36,134,555,451,-1,270,-1,248,-1,371,680],[-1,636,432,76,-1,386,686,770,828,582,-1,433,203,526,600,848,227,616,-1,217,117,707,369,109,586,205,809,-1,-1,240,-1,853,-1,-1,-1,768,-1,371,-1,540],[774,289,833,257,-1,381,239,722,711,468,933,-1,-1,17,-1,-1,148,-1,-1,853,-1,-1,-1,-1,264,194,260,947,-1,752,147,-1,-1,343,112,273,344,680,540,-1]\n];\nminimalNetwork(testNetwork);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-107-minimal-network.md",
      "source_type": "git_repo"
    },
    "token_count": 6567,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6d185580af825832582c7e6c96d06e78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-112-bouncy-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3dd1000cf542c50feef\ntitle: 'Problem 112: Bouncy numbers'\nchallengeType: 1\nforumTopicId: 301738\ndashedName: problem-112-bouncy-numbers\n--description--\nWorking from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.\nSimilarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.\nWe shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, 155349.\nClearly there cannot be any bouncy numbers below one-hundred, but just over half of the numbers below one-thousand (525) are bouncy. In fact, the least number for which the proportion of bouncy numbers first reaches 50% is 538.\nSurprisingly, bouncy numbers become more and more common and by the time we reach 21780 the proportion of bouncy numbers is equal to 90%.\nFind the least number for which the proportion of bouncy numbers is exactly 99%.\n--hints--\nbouncyNumbers() should return 1587000.\njs\nassert.strictEqual(bouncyNumbers(), 1587000);\n--seed--\n--seed-contents--\n```js\nfunction bouncyNumbers() {\nreturn true;\n}\nbouncyNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1255,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-112-bouncy-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1b90b4c37301b424c26cc4258d60a348",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-113-non-bouncy-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3dd1000cf542c50fef0\ntitle: 'Problem 113: Non-bouncy numbers'\nchallengeType: 1\nforumTopicId: 301739\ndashedName: problem-113-non-bouncy-numbers\n--description--\nWorking from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.\nSimilarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.\nWe shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, 155349.\nAs n increases, the proportion of bouncy numbers below n increases such that there are only 12951 numbers below one-million that are not bouncy and only 277032 non-bouncy numbers below ${10}^{10}$.\nHow many numbers below a googol (${10}^{100}$) are not bouncy?\n--hints--\nnonBouncyNumbers() should return 51161058134250.\njs\nassert.strictEqual(nonBouncyNumbers(), 51161058134250);\n--seed--\n--seed-contents--\n```js\nfunction nonBouncyNumbers() {\nreturn true;\n}\nnonBouncyNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1102,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-113-non-bouncy-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5da7604cee944b738aa9cccc7ab3190a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-115-counting-block-combinations-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3df1000cf542c50fef1\ntitle: 'Problem 115: Counting block combinations II'\nchallengeType: 1\nforumTopicId: 301741\ndashedName: problem-115-counting-block-combinations-ii\n--description--\nA row measuring n units in length has red blocks with a minimum length of m units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one black square.\nLet the fill-count function, $F(m, n)$, represent the number of ways that a row can be filled.\nFor example, $F(3, 29) = 673135$ and $F(3, 30) = 1089155$.\nThat is, for m = 3, it can be seen that n = 30 is the smallest value for which the fill-count function first exceeds one million.\nIn the same way, for m = 10, it can be verified that $F(10, 56) = 880711$ and $F(10, 57) = 1148904$, so n = 57 is the least value for which the fill-count function first exceeds one million.\nFor m = 50, find the least value of n for which the fill-count function first exceeds one million.\nNote: This is a more difficult version of Problem 114.\n--hints--\ncountingBlockTwo() should return 168.\njs\nassert.strictEqual(countingBlockTwo(), 168);\n--seed--\n--seed-contents--\n```js\nfunction countingBlockTwo() {\nreturn true;\n}\ncountingBlockTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1336,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-115-counting-block-combinations-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0db5c2b13376c7a216d67a527b7064ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-114-counting-block-combinations-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e01000cf542c50fef2\ntitle: 'Problem 114: Counting block combinations I'\nchallengeType: 1\nforumTopicId: 301740\ndashedName: problem-114-counting-block-combinations-i\n--description--\nA row measuring seven units in length has red blocks with a minimum length of three units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one black square. There are exactly seventeen ways of doing this.\nHow many ways can a row measuring fifty units in length be filled?\nNote: Although the example above does not lend itself to the possibility, in general it is permitted to mix block sizes. For example, on a row measuring eight units in length you could use red (3), black (1), and red (4).\n--hints--\ncountingBlockOne() should return 16475640049.\njs\nassert.strictEqual(countingBlockOne(), 16475640049);\n--seed--\n--seed-contents--\n```js\nfunction countingBlockOne() {\nreturn true;\n}\ncountingBlockOne();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-114-counting-block-combinations-i.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "40b064375cd4b05913324fe68a32d40c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-116-red-green-or-blue-tiles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e01000cf542c50fef3\ntitle: 'Problem 116: Red, green or blue tiles'\nchallengeType: 1\nforumTopicId: 301742\ndashedName: problem-116-red-green-or-blue-tiles\n--description--\nA row of five black square tiles is to have a number of its tiles replaced with colored oblong tiles chosen from red (length two), green (length three), or blue (length four).\nIf red tiles are chosen there are exactly seven ways this can be done.\nIf green tiles are chosen there are three ways.\nAnd if blue tiles are chosen there are two ways.\nAssuming that colors cannot be mixed there are 7 + 3 + 2 = 12 ways of replacing the black tiles in a row measuring five units in length. How many different ways can the black tiles in a row measuring fifty units in length be replaced if colors cannot be mixed and at least one colored tile must be used?\nNote: This is related to Problem 117.\n--hints--\nredGreenBlueOne() should return 20492570929.\njs\nassert.strictEqual(redGreenBlueOne(), 20492570929);\n--seed--\n--seed-contents--\n```js\nfunction redGreenBlueOne() {\nreturn true;\n}\nredGreenBlueOne();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2075,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-116-red-green-or-blue-tiles.md",
      "source_type": "git_repo"
    },
    "token_count": 284,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2371e51cb1702fbb92b94287f10e60ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-117-red-green-and-blue-tiles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e21000cf542c50fef4\ntitle: 'Problem 117: Red, green, and blue tiles'\nchallengeType: 1\nforumTopicId: 301743\ndashedName: problem-117-red-green-and-blue-tiles\n--description--\nUsing a combination of black square tiles and oblong tiles chosen from: red tiles measuring two units, green tiles measuring three units, and blue tiles measuring four units, it is possible to tile a row measuring five units in length in exactly fifteen different ways.\nHow many ways can a row measuring fifty units in length be tiled?\nNote: This is related to Problem 116.\n--hints--\nredGreenBlueTilesTwo() should return 100808458960497.\njs\nassert.strictEqual(redGreenBlueTilesTwo(), 100808458960497);\n--seed--\n--seed-contents--\n```js\nfunction redGreenBlueTilesTwo() {\nreturn true;\n}\nredGreenBlueTilesTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1204,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-117-red-green-and-blue-tiles.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7159e66d54dc27f4d25795030a83bb84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-118-pandigital-prime-sets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e21000cf542c50fef5\ntitle: 'Problem 118: Pandigital prime sets'\nchallengeType: 1\nforumTopicId: 301744\ndashedName: problem-118-pandigital-prime-sets\n--description--\nUsing all of the digits 1 through 9 and concatenating them freely to form decimal integers, different sets can be formed. Interestingly with the set $\\{2, 5, 47, 89, 631\\}$, all of the elements belonging to it are prime.\nHow many distinct sets containing each of the digits one through nine exactly once contain only prime elements?\n--hints--\npandigitalPrimeSets() should return 44680.\njs\nassert.strictEqual(pandigitalPrimeSets(), 44680);\n--seed--\n--seed-contents--\n```js\nfunction pandigitalPrimeSets() {\nreturn true;\n}\npandigitalPrimeSets();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 812,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-118-pandigital-prime-sets.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "004ebd23ea2cfc25e23c252ff7d9e3e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-119-digit-power-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e41000cf542c50fef6\ntitle: 'Problem 119: Digit power sum'\nchallengeType: 1\nforumTopicId: 301745\ndashedName: problem-119-digit-power-sum\n--description--\nThe number 512 is interesting because it is equal to the sum of its digits raised to some power: $5 + 1 + 2 = 8$, and $8^3 = 512$. Another example of a number with this property is $614656 = 28^4$.\nWe shall define $a_n$ to be the $n-th$ term of this sequence and insist that a number must contain at least two digits to have a sum.\nYou are given that $a_2 = 512$ and $a_{10} = 614656$.\nFind $a_{30}$.\n--hints--\ndigitPowerSum() should return 248155780267521.\njs\nassert.strictEqual(digitPowerSum(), 248155780267521);\n--seed--\n--seed-contents--\n```js\nfunction digitPowerSum() {\nreturn true;\n}\ndigitPowerSum();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 864,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-119-digit-power-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "62ea7f5e4abb5dec20f03e96b51791ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-120-square-remainders.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e41000cf542c50fef7\ntitle: 'Problem 120: Square remainders'\nchallengeType: 1\nforumTopicId: 301747\ndashedName: problem-120-square-remainders\n--description--\nLet r be the remainder when ${(a − 1)}^n + {(a + 1)}^n$ is divided by $a^2$.\nFor example, if $a = 7$ and $n = 3$, then $r = 42: 6^3 + 8^3 = 728 ≡ 42 \\ \\text{mod}\\ 49$. And as n varies, so too will r, but for $a = 7$ it turns out that $r_{max} = 42$.\nFor $3 ≤ a ≤ 1000$, find $\\sum{r}_{max}$.\n--hints--\nsquareRemainders() should return 333082500.\njs\nassert.strictEqual(squareRemainders(), 333082500);\n--seed--\n--seed-contents--\n```js\nfunction squareRemainders() {\nreturn true;\n}\nsquareRemainders();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 774,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-120-square-remainders.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8a591c2f69df3aa692f03bc884e315a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3cf1000cf542c50fee1\ntitle: 'Problem 98: Anagramic squares'\nchallengeType: 1\nforumTopicId: 302215\ndashedName: problem-98-anagramic-squares\n--description--\nBy replacing each of the letters in the word CARE with 1, 2, 9, and 6 respectively, we form a square number: $1296 = 36^2$ What is remarkable is that, by using the same digital substitutions, the anagram, RACE, also forms a square number: $9216 = 96^2$ We shall call CARE (and RACE) a square anagram word pair and specify further that leading zeroes are not permitted, neither may a different letter have the same digital value as another letter Using the words array, find all the square anagram word pairs (a palindromic word is NOT considered to be an anagram of itself) What is the largest square number formed by any member of such a pair Note: All anagrams formed must be contained in the given words array --hints--\nanagramicSquares(['CARE', 'RACE']) should return a number js\nassert(typeof anagramicSquares(['CARE', 'RACE']) === 'number');\nanagramicSquares(['CARE', 'RACE']) should return 9216 js\nassert strictEqual(anagramicSquares(['CARE', 'RACE']), 9216);\nanagramicSquares(testWords1) should return 4761 js\nassert strictEqual(anagramicSquares(_testWords1), 4761);\nanagramicSquares(testWords2) should return 18769 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 0,
    "total_chunks": 14
  },
  {
    "id": "038d60bd38adfef9ee883f056f1df450",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "pairs (a palindromic word is NOT considered to be an anagram of itself) What is the largest square number formed by any member of such a pair Note: All anagrams formed must be contained in the given words array --hints-- anagramicSquares(['CARE', 'RACE']) should return a number js assert(typeof anagramicSquares(['CARE', 'RACE']) === 'number'); anagramicSquares(['CARE', 'RACE']) should return 9216 js assert strictEqual(anagramicSquares(['CARE', 'RACE']), 9216); anagramicSquares(testWords1) should return 4761 js assert strictEqual(anagramicSquares(_testWords1), 4761); anagramicSquares(testWords2) should return 18769 js assertstrictEqual(anagramicSquares(_testWords2), 18769);\n--seed--\n--after-user-code--\njs\nconst _testWords1 = [\n\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\"\n];\nconst _testWords2 = [\n\"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\"\n];\n--seed-contents--\n```js\nfunction anagramicSquares(words) {\nreturn true;\n}\n// Only change code above this line\nconst testWords1 = [\n\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\"\n];\nanagramicSquares(testWords1);\n```\n--solutions--\n```js\nfunction anagramicSquares(words) {\n// Based on https://www",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 6715,
    "chunk_index": 1,
    "total_chunks": 14
  },
  {
    "id": "9cf76a2bf20f9417f2a9e105677c07f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "anagramicSquares(['CARE', 'RACE']) === 'number'); anagramicSquares(['CARE', 'RACE']) should return 9216 js assert strictEqual(anagramicSquares(['CARE', 'RACE']), 9216); anagramicSquares(testWords1) should return 4761 js assert strictEqual(anagramicSquares(_testWords1), 4761); anagramicSquares(testWords2) should return 18769 js assertstrictEqual(anagramicSquares(_testWords2), 18769); --seed-- --after-user-code-- js const _testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; const _testWords2 = [ \"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\" ]; --seed-contents-- ```js function anagramicSquares(words) { return true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 6645,
    "chunk_index": 2,
    "total_chunks": 14
  },
  {
    "id": "45384880bbfc91b164c6e9c0c31f278e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "anagramicSquares(['CARE', 'RACE']) === 'number'); anagramicSquares(['CARE', 'RACE']) should return 9216 js assert strictEqual(anagramicSquares(['CARE', 'RACE']), 9216); anagramicSquares(testWords1) should return 4761 js assert strictEqual(anagramicSquares(_testWords1), 4761); anagramicSquares(testWords2) should return 18769 js assertstrictEqual(anagramicSquares(_testWords2), 18769); --seed-- --after-user-code-- js const _testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; const _testWords2 = [ \"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\" ]; --seed-contents-- ```js function anagramicSquares(words) { return true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/\nfunction findMaximumSquare(squares, word1, word2) {\nlet maximumSquare = 0;\nfor (let i = 0; i < squares",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 6689,
    "chunk_index": 3,
    "total_chunks": 14
  },
  {
    "id": "9ecb140d9b56a137cd4b339ff3e50355",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "4761 js assert strictEqual(anagramicSquares(_testWords1), 4761); anagramicSquares(testWords2) should return 18769 js assertstrictEqual(anagramicSquares(_testWords2), 18769); --seed-- --after-user-code-- js const _testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; const _testWords2 = [ \"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\" ]; --seed-contents-- ```js function anagramicSquares(words) { return true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/ function findMaximumSquare(squares, word1, word2) { let maximumSquare = 0; for (let i = 0; i < squareslength; i++) {\nconst length = squares[i]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 6632,
    "chunk_index": 4,
    "total_chunks": 14
  },
  {
    "id": "0c19022d4b6c3636fc541653785bb694",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return 18769 js assertstrictEqual(anagramicSquares(_testWords2), 18769); --seed-- --after-user-code-- js const _testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; const _testWords2 = [ \"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\" ]; --seed-contents-- ```js function anagramicSquares(words) { return true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/ function findMaximumSquare(squares, word1, word2) { let maximumSquare = 0; for (let i = 0; i < squareslength; i++) { const length = squares[i]toString()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 6605,
    "chunk_index": 5,
    "total_chunks": 14
  },
  {
    "id": "c26d74c1a1711712e8b352ef542f2604",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return 18769 js assertstrictEqual(anagramicSquares(_testWords2), 18769); --seed-- --after-user-code-- js const _testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; const _testWords2 = [ \"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\" ]; --seed-contents-- ```js function anagramicSquares(words) { return true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/ function findMaximumSquare(squares, word1, word2) { let maximumSquare = 0; for (let i = 0; i < squareslength; i++) { const length = squares[i]toString()length;\nif (length < word1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 6613,
    "chunk_index": 6,
    "total_chunks": 14
  },
  {
    "id": "c1f39d98d719094d61188c874c97cf49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assertstrictEqual(anagramicSquares(_testWords2), 18769); --seed-- --after-user-code-- js const _testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; const _testWords2 = [ \"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\" ]; --seed-contents-- ```js function anagramicSquares(words) { return true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/ function findMaximumSquare(squares, word1, word2) { let maximumSquare = 0; for (let i = 0; i < squareslength; i++) { const length = squares[i]toString()length; if (length < word1length) {\ncontinue;\n}\nif (length > word1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 6619,
    "chunk_index": 7,
    "total_chunks": 14
  },
  {
    "id": "878ac48d05feb542fcfba9bf3efbcbb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; const _testWords2 = [ \"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\" ]; --seed-contents-- ```js function anagramicSquares(words) { return true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/ function findMaximumSquare(squares, word1, word2) { let maximumSquare = 0; for (let i = 0; i < squareslength; i++) { const length = squares[i]toString()length; if (length < word1length) { continue; } if (length > word1length) {\nbreak;\n}\nconst word1Square = squares[i];\nconst letterToDigit = mapLettersToDigits(word1, word1Square);\nconst noProperMappingExist = Object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 6626,
    "chunk_index": 8,
    "total_chunks": 14
  },
  {
    "id": "e6f855f109ce0940df06408a8d8a76b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/ function findMaximumSquare(squares, word1, word2) { let maximumSquare = 0; for (let i = 0; i < squareslength; i++) { const length = squares[i]toString()length; if (length < word1length) { continue; } if (length > word1length) { break; } const word1Square = squares[i]; const letterToDigit = mapLettersToDigits(word1, word1Square); const noProperMappingExist = Objectkeys(letterToDigit)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 642,
    "chunk_index": 9,
    "total_chunks": 14
  },
  {
    "id": "56968145f6fbf821a841d69f8b387bd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "true; } // Only change code above this line const testWords1 = [ \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\" ]; anagramicSquares(testWords1); ``` --solutions-- ```js function anagramicSquares(words) { // Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/ function findMaximumSquare(squares, word1, word2) { let maximumSquare = 0; for (let i = 0; i < squareslength; i++) { const length = squares[i]toString()length; if (length < word1length) { continue; } if (length > word1length) { break; } const word1Square = squares[i]; const letterToDigit = mapLettersToDigits(word1, word1Square); const noProperMappingExist = Objectkeys(letterToDigit)length === 0;\nif (noProperMappingExist) {\ncontinue;\n}\nconst word2Square = getNumberFromMapping(word2, letterToDigit);\nif (word2Square === 0) {\ncontinue;\n}\nconst doesWord2SquareExist = squares",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 696,
    "chunk_index": 10,
    "total_chunks": 14
  },
  {
    "id": "e9641b021152e148fd698ba08a3f68bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Based on https://wwwmathblogdk/project-euler-98-anagrams-square-numbers/ function findMaximumSquare(squares, word1, word2) { let maximumSquare = 0; for (let i = 0; i < squareslength; i++) { const length = squares[i]toString()length; if (length < word1length) { continue; } if (length > word1length) { break; } const word1Square = squares[i]; const letterToDigit = mapLettersToDigits(word1, word1Square); const noProperMappingExist = Objectkeys(letterToDigit)length === 0; if (noProperMappingExist) { continue; } const word2Square = getNumberFromMapping(word2, letterToDigit); if (word2Square === 0) { continue; } const doesWord2SquareExist = squaresindexOf(word2Square) == -1;\nif (doesWord2SquareExist) {\nconst pairMaximum = Math max(word1Square, word2Square);\nmaximumSquare = Math max(maximumSquare, pairMaximum);\n}\n}\nreturn maximumSquare;\n}\nfunction getNumberFromMapping(word, letterToDigit) {\nconst wouldNumberHaveLeadingZero = letterToDigit[word[0]] === 0;\nif (wouldNumberHaveLeadingZero) {\nreturn 0;\n}\nlet number = 0;\nfor (let i = 0; i < word length; i++) {\nnumber = number * 10 + letterToDigit[word[i]];\n}\nreturn number;\n}\nfunction mapLettersToDigits(word, square) {\nconst letterToDigit = {};\nfor (let j = word length - 1; j >= 0; j--) {\nconst curDigit = square % 10;\nsquare = Math floor(square / 10);\nconst curLetter = word[j];\nconst isLetterRepeated = letterToDigit hasOwnProperty(curLetter);\nif (isLetterRepeated) {\nconst isLetterUsedForTheSameDigit =\nletterToDigit[curLetter] === curDigit;\nif (isLetterUsedForTheSameDigit) {\ncontinue;\n}\nreturn {};\n}\nconst isDigitUsed = Object values(letterToDigit) indexOf(curDigit)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 11,
    "total_chunks": 14
  },
  {
    "id": "1b6ecc645a400f46fee09a3adb03a914",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "number = number * 10 + letterToDigit[word[i]]; } return number; } function mapLettersToDigits(word, square) { const letterToDigit = {}; for (let j = word length - 1; j >= 0; j--) { const curDigit = square % 10; square = Math floor(square / 10); const curLetter = word[j]; const isLetterRepeated = letterToDigit hasOwnProperty(curLetter); if (isLetterRepeated) { const isLetterUsedForTheSameDigit = letterToDigit[curLetter] === curDigit; if (isLetterUsedForTheSameDigit) { continue; } return {}; } const isDigitUsed = Object values(letterToDigit) indexOf(curDigit)== -1;\nif (isDigitUsed) {\nreturn {};\n}\nletterToDigit[curLetter] = curDigit;\n}\nreturn letterToDigit;\n}\nfunction groupWordsWithSameLetters(words) {\nconst lettersToWords = {};\nfor (let i = 0; i < words length; i++) {\nconst word = words[i];\nconst sortedLetters = word split('') sort() join('');\nif ( lettersToWords hasOwnProperty(sortedLetters)) {\nlettersToWords[sortedLetters] = [];\n}\nlettersToWords[sortedLetters] push(word);\n}\nreturn lettersToWords;\n}\nconst lettersToWords = groupWordsWithSameLetters(words);\nconst anagrams = Object keys(lettersToWords) filter(\nletters => lettersToWords[letters] length > 1\n);\nconst lengthOfLongestAnagram = anagrams map(anagram => anagram length) sort((a, b) => b - a)[0];\nconst squares = [];\nconst numberLimit = (10 ** lengthOfLongestAnagram) ** 0 5;\nfor (let number = 2; number < numberLimit; number++) {\nconst square = number ** 2;\nsquares push(square);\n}\nlet largestSquare = 0;\nfor (let i = 0; i < anagrams length; i++) {\nconst curWords = lettersToWords[anagrams[i]];\nfor (let j = 0; j < curWords length; j++) {\nfor (let k = j + 1; k < curWords",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 12,
    "total_chunks": 14
  },
  {
    "id": "22082a6fa27ef8d2cb3a766def3501dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=> b - a)[0]; const squares = []; const numberLimit = (10 ** lengthOfLongestAnagram) ** 0 5; for (let number = 2; number < numberLimit; number++) { const square = number ** 2; squares push(square); } let largestSquare = 0; for (let i = 0; i < anagrams length; i++) { const curWords = lettersToWords[anagrams[i]]; for (let j = 0; j < curWords length; j++) { for (let k = j + 1; k < curWordslength; k++) {\nconst squareValue = findMaximumSquare(\nsquares,\ncurWords[j],\ncurWords[k]\n);\nif (squareValue > largestSquare) {\nlargestSquare = squareValue;\n}\n}\n}\n}\nreturn largestSquare;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 24439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 13,
    "total_chunks": 14
  },
  {
    "id": "483ea2d32ce54f699d3db87157cc3242",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-122-efficient-exponentiation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e61000cf542c50fef9\ntitle: 'Problem 122: Efficient exponentiation'\nchallengeType: 1\nforumTopicId: 301749\ndashedName: problem-122-efficient-exponentiation\n--description--\nThe most naive way of computing $n^{15}$ requires fourteen multiplications:\n$$n × n × \\ldots × n = n^{15}$$\nBut using a \"binary\" method you can compute it in six multiplications:\n$$\\begin{align}\n& n × n = n^2\\\\\n& n^2 × n^2 = n^4\\\\\n& n^4 × n^4 = n^8\\\\\n& n^8 × n^4 = n^{12}\\\\\n& n^{12} × n^2 = n^{14}\\\\\n& n^{14} × n = n^{15}\n\\end{align}$$\nHowever it is yet possible to compute it in only five multiplications:\n$$\\begin{align}\n& n × n = n^2\\\\\n& n^2 × n = n^3\\\\\n& n^3 × n^3 = n^6\\\\\n& n^6 × n^6 = n^{12}\\\\\n& n^{12} × n^3 = n^{15}\n\\end{align}$$\nWe shall define $m(k)$ to be the minimum number of multiplications to compute $n^k$; for example $m(15) = 5$.\nFor $1 ≤ k ≤ 200$, find $\\sum{m(k)}$.\n--hints--\nefficientExponentiation() should return 1582.\njs\nassert.strictEqual(efficientExponentiation(), 1582);\n--seed--\n--seed-contents--\n```js\nfunction efficientExponentiation() {\nreturn true;\n}\nefficientExponentiation();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1247,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-122-efficient-exponentiation.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a1246b52a7e30da03e2dfe1f4d071a3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-124-ordered-radicals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e81000cf542c50fefb\ntitle: 'Problem 124: Ordered radicals'\nchallengeType: 1\nforumTopicId: 301751\ndashedName: problem-124-ordered-radicals\n--description--\nThe radical of $n$, $rad(n)$, is the product of the distinct prime factors of $n$. For example, $504 = 2^3 × 3^2 × 7$, so $rad(504) = 2 × 3 × 7 = 42$.\nIf we calculate $rad(n)$ for $1 ≤ n ≤ 10$, then sort them on $rad(n)$, and sorting on $n$ if the radical values are equal, we get:\n$Unsorted$\n$Sorted$\n$n$\n$rad(n)$\n$n$\n$rad(n)$\n$k$\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n3\n3\n4\n2\n3\n4\n2\n8\n2\n4\n5\n5\n3\n3\n5\n6\n6\n9\n3\n6\n7\n7\n5\n5\n7\n8\n2\n6\n6\n8\n9\n3\n7\n7\n9\n10\n10\n10\n10\n10\nLet $E(k)$ be the $k$th element in the sorted $n$ column; for example, $E(4) = 8$ and $E(6) = 9$. If $rad(n)$ is sorted for $1 ≤ n ≤ 100000$, find $E(10000)$.\n--hints--\norderedRadicals() should return 21417.\njs\nassert.strictEqual(orderedRadicals(), 21417);\n--seed--\n--seed-contents--\n```js\nfunction orderedRadicals() {\nreturn true;\n}\norderedRadicals();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2695,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-124-ordered-radicals.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "571ef4216981eea029e6c9744276fb31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-123-prime-square-remainders.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e71000cf542c50fefa\ntitle: 'Problem 123: Prime square remainders'\nchallengeType: 1\nforumTopicId: 301750\ndashedName: problem-123-prime-square-remainders\n--description--\nLet $p_n$ be the $n$th prime: 2, 3, 5, 7, 11, ..., and let $r$ be the remainder when ${(p_n−1)}^n + {(p_n+1)}^n$ is divided by ${p_n}^2$.\nFor example, when $n = 3, p_3 = 5$, and $4^3 + 6^3 = 280 ≡ 5\\ mod\\ 25$.\nThe least value of $n$ for which the remainder first exceeds $10^9$ is 7037.\nFind the least value of $n$ for which the remainder first exceeds $10^{10}$.\n--hints--\nprimeSquareRemainders() should return 21035.\njs\nassert.strictEqual(primeSquareRemainders(), 21035);\n--seed--\n--seed-contents--\n```js\nfunction primeSquareRemainders() {\nreturn true;\n}\nprimeSquareRemainders();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 861,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-123-prime-square-remainders.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "86421830970ab90e18af15c63e8ba4eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-121-disc-game-prize-fund.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e51000cf542c50fef8\ntitle: 'Problem 121: Disc game prize fund'\nchallengeType: 1\nforumTopicId: 301748\ndashedName: problem-121-disc-game-prize-fund\n--description--\nA bag contains one red disc and one blue disc. In a game of chance a player takes a disc at random and its color is noted. After each turn the disc is returned to the bag, an extra red disc is added, and another disc is taken at random.\nThe player pays £1 to play and wins if they have taken more blue discs than red discs at the end of the game.\nIf the game is played for four turns, the probability of a player winning is exactly 11/120, and so the maximum prize fund the banker should allocate for winning in this game would be £10 before they would expect to incur a loss. Note that any payout will be a whole number of pounds and also includes the original £1 paid to play the game, so in the example given the player actually wins £9.\nFind the maximum prize fund that should be allocated to a single game in which fifteen turns are played.\n--hints--\ndiscGamePrize() should return 2269.\njs\nassert.strictEqual(discGamePrize(), 2269);\n--seed--\n--seed-contents--\n```js\nfunction discGamePrize() {\nreturn true;\n}\ndiscGamePrize();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-121-disc-game-prize-fund.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7436fd70b3c9ab73fe62b00e114b58af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-126-cuboid-layers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ea1000cf542c50fefd\ntitle: 'Problem 126: Cuboid layers'\nchallengeType: 1\nforumTopicId: 301753\ndashedName: problem-126-cuboid-layers\n--description--\nThe minimum number of cubes to cover every visible face on a cuboid measuring 3 x 2 x 1 is twenty-two.\nIf we add a second layer to this solid it would require forty-six cubes to cover every visible face, the third layer would require seventy-eight cubes, and the fourth layer would require one-hundred and eighteen cubes to cover every visible face.\nHowever, the first layer on a cuboid measuring 5 x 1 x 1 also requires twenty-two cubes; similarly, the first layer on cuboids measuring 5 x 3 x 1, 7 x 2 x 1, and 11 x 1 x 1 all contain forty-six cubes.\nWe shall define $C(n)$ to represent the number of cuboids that contain $n$ cubes in one of its layers. So $C(22) = 2$, $C(46) = 4$, $C(78) = 5$, and $C(118) = 8$.\nIt turns out that 154 is the least value of $n$ for which $C(n) = 10$.\nFind the least value of $n$ for which $C(n) = 1000$.\n--hints--\ncuboidLayers() should return 18522.\njs\nassert.strictEqual(cuboidLayers(), 18522);\n--seed--\n--seed-contents--\n```js\nfunction cuboidLayers() {\nreturn true;\n}\ncuboidLayers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1541,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-126-cuboid-layers.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "93160196a551c545c005d43251081556",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-127-abc-hits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ec1000cf542c50fefe\ntitle: 'Problem 127: abc-hits'\nchallengeType: 1\nforumTopicId: 301754\ndashedName: problem-127-abc-hits\n--description--\nThe radical of $n$, $rad(n)$, is the product of distinct prime factors of $n$. For example, $504 = 2^3 × 3^2 × 7$, so $rad(504) = 2 × 3 × 7 = 42$.\nWe shall define the triplet of positive integers (a, b, c) to be an abc-hit if:\n$GCD(a, b) = GCD(a, c) = GCD(b, c) = 1$\n$a < b$\n$a + b = c$\n$rad(abc) < c$\nFor example, (5, 27, 32) is an abc-hit, because:\n$GCD(5, 27) = GCD(5, 32) = GCD(27, 32) = 1$\n$5 < 27$\n$5 + 27 = 32$\n$rad(4320) = 30 < 32$\nIt turns out that abc-hits are quite rare and there are only thirty-one abc-hits for $c < 1000$, with $\\sum{c} = 12523$.\nFind $\\sum{c}$ for $c < 120000$.\n--hints--\nabcHits() should return 18407904.\njs\nassert.strictEqual(abcHits(), 18407904);\n--seed--\n--seed-contents--\n```js\nfunction abcHits() {\nreturn true;\n}\nabcHits();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1054,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-127-abc-hits.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6c52381e666e7df5b5c3c00bfaedb7e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-125-palindromic-sums.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3e91000cf542c50fefc\ntitle: 'Problem 125: Palindromic sums'\nchallengeType: 1\nforumTopicId: 301752\ndashedName: problem-125-palindromic-sums\n--description--\nThe palindromic number 595 is interesting because it can be written as the sum of consecutive squares: $6^2 + 7^2 + 8^2 + 9^2 + 10^2 + 11^2 + 12^2$ There are exactly eleven palindromes below one-thousand that can be written as consecutive square sums, and the sum of these palindromes is 4164 Note that $1 = 0^2 + 1^2$ has not been included as this problem is concerned with the squares of positive integers Find the sum of all the numbers less than the  limit  that are both palindromic and can be written as the sum of consecutive squares --hints--\npalindromicSums(100000000) should return 2906969179 ```js\nassert strictEqual(palindromicSums(100000000), 2906969179);\n```\npalindromicSums(100) should return 137 js\nassert strictEqual(palindromicSums(100), 137);\npalindromicSums(1000) should return 4164 js\nassert strictEqual(palindromicSums(1000),4164);\n--seed--\n--seed-contents--\n```js\nfunction palindromicSums(limit) {\nreturn true;\n}\npalindromicSums(100);\n```\n--solutions--\n```js\nfunction isPalindrome(num) {\nreturn num toString() split('') every((digit, i, arr) => digit === arr[arr length - 1 - i]);\n}\nfunction palindromicSums(limit) {\nlet sumOfPalindromes = 0;\nconst sqrtLimit = Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1867,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-125-palindromic-sums.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9d987335d4b92a96c8b6d7e2d58c20d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-125-palindromic-sums.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "written as the sum of consecutive squares --hints-- palindromicSums(100000000) should return 2906969179 ```js assert strictEqual(palindromicSums(100000000), 2906969179); ``` palindromicSums(100) should return 137 js assert strictEqual(palindromicSums(100), 137); palindromicSums(1000) should return 4164 js assert strictEqual(palindromicSums(1000),4164); --seed-- --seed-contents-- ```js function palindromicSums(limit) { return true; } palindromicSums(100); ``` --solutions-- ```js function isPalindrome(num) { return num toString() split('') every((digit, i, arr) => digit === arr[arr length - 1 - i]); } function palindromicSums(limit) { let sumOfPalindromes = 0; const sqrtLimit = Mathsqrt(limit);\nconst list = new Set();\nfor (let i = 1; i <= sqrtLimit; i++) {\nlet sumOfSquares = i * i;\nfor (let j = i + 1; j <= sqrtLimit; j++) {\nsumOfSquares += j * j;\nif (sumOfSquares > limit) break;\nif (isPalindrome(sumOfSquares) && list has(sumOfSquares)) {\nsumOfPalindromes += sumOfSquares;\nlist add(sumOfSquares);\n}\n}\n}\nreturn sumOfPalindromes;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1867,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-125-palindromic-sums.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1158652eda123e000d4cd70d5399cc7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3d21000cf542c50fee5\ntitle: 'Problem 102: Triangle containment'\nchallengeType: 1\nforumTopicId: 301726\ndashedName: problem-102-triangle-containment\n--description--\nThree distinct points are plotted at random on a Cartesian plane, for which -1000 ≤ x, y ≤ 1000, such that a triangle is formed Consider the following two triangles:\njs\nconst exampleTriangles = [\n[[-340, 495], [-153, -910], [835, -947]],\n[[-175, 41], [-421, -714], [574, -645]]\n];\nIt can be verified that first triangle contains the origin, whereas second triangle does not Using the triangles array containing coordinates of triangles, find the number of triangles for which the interior contains the origin --hints--\ntriangleContainment(exampleTriangles) should return a number js\nassert isNumber(triangleContainment(_exampleTriangles));\ntriangleContainment(exampleTriangles) should return 1 js\nassert strictEqual(triangleContainment(_exampleTriangles), 1);\ntriangleContainment(testTriangles1) should return 19 js\nassert strictEqual(triangleContainment(_testTriangles1), 19);\ntriangleContainment(testTriangles2) should return 228 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 271,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "3ec3c5f42693b53bed7171a5a4e3656f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "-910], [835, -947]], [[-175, 41], [-421, -714], [574, -645]] ]; It can be verified that first triangle contains the origin, whereas second triangle does not Using the triangles array containing coordinates of triangles, find the number of triangles for which the interior contains the origin --hints-- triangleContainment(exampleTriangles) should return a number js assert isNumber(triangleContainment(_exampleTriangles)); triangleContainment(exampleTriangles) should return 1 js assert strictEqual(triangleContainment(_exampleTriangles), 1); triangleContainment(testTriangles1) should return 19 js assert strictEqual(triangleContainment(_testTriangles1), 19); triangleContainment(testTriangles2) should return 228 js assertstrictEqual(triangleContainment(_testTriangles2), 228);\n--seed--\n--after-user-code--\njs\nconst _exampleTriangles = [\n[[-340, 495], [-153, -910], [835, -947]],\n[[-175, 41], [-421, -714], [574, -645]]\n];\nconst _testTriangles1 = [\n[[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]]\n];\nconst _testTriangles2 = [\n[[-340,495],[-153,-910],[835,-947]],[[-175,41],[-421,-714],[574,-645]],[[-547,712],[-352,579],[951,-786]],[[419,-864],[-83,650],[-399,171]],[[-429,-89],[-357,-930],[296,-29]],[[-734,-702],[823,-745],[-684,-62]],[[-971,762],[925,-776],[-663,-157]],[[162,570],[628,485],[-807,-896]],[[641,91],[-65,700],[887,759]],[[215,-496],[46,-931],[422,-30]],[[-119,359],[668,-609],[-358,-494]],[[440,929],[968,214],[760,-857]],[[-700,785],[838,29],[-216,411]],[[-770,-458],[-325,-53],[-505,633]],[[-752,-805],[349,776],[-799,687]],[[323,5],[561,-36],[919,-560]],[[-907,358],[264,320],[204,274]],[[-728,-466],[350,969],[292,-345]],[[940,836],[272,-533],[748,185]],[[411,998],[813,520],[316,-949]],[[-152,326],[658,-762],[148,-651]],[[330,507],[-9,-628],[101,174]],[[551,-496],[772,-541],[-702,-45]],[[-164,-489],[-90,322],[631,-59]],[[673,366],[-4,-143],[-606,-704]],[[428,-609],[801,-449],[740,-269]],[[453,-924],[-785,-346],[-853,111]],[[-738,555],[-181,467],[-426,-20]],[[958,-692],[784,-343],[505,-569]],[[620,27],[263,54],[-439,-726]],[[804,87],[998,859],[871,-78]],[[-119,-453],[-709,-292],[-115,-56]],[[-626,138],[-940,-476],[-177,-274]],[[-11,160],[142,588],[446,158]],[[538,727],[550,787],[330,810]],[[420,-689],[854,-546],[337,516]],[[872,-998],[-607,748],[473,-192]],[[653,440],[-516,-985],[808,-857]],[[374,-158],[331,-940],[-338,-641]],[[137,-925],[-179,771],[734,-715]],[[-314,198],[-115,29],[-641,-39]],[[759,-574],[-385,355],[590,-603]],[[-189,-63],[-168,204],[289,305]],[[-182,-524],[-715,-621],[911,-255]],[[331,-816],[-833,471],[168,126]],[[-514,581],[-855,-220],[-731,-507]],[[129,169],[576,651],[-87,-458]],[[783,-444],[-881,658],[-266,298]],[[603,-430],[-598,585],[368,899]],[[43,-724],[962,-376],[851,409]],[[-610,-646],[-883,-261],[-482,-881]],[[-117,-237],[978,641],[101,-747]],[[579,125],[-715,-712],[208,534]],[[672,-214],[-762,372],[874,533]],[[-564,965],[38,715],[367,242]],[[500,951],[-700,-981],[-61,-178]],[[-382,-224],[-959,903],[-282,-60]],[[-355,295],[426,-331],[-591,655]],[[892,128],[958,-271],[-993,274]],[[-454,-619],[302,138],[-790,-874]],[[-642,601],[-574,159],[-290,-318]],[[266,-109],[257,-686],[54,975]],[[162,628],[-478,840],[264,-266]],[[466,-280],[982,1],[904,-810]],[[721,839],[730,-807],[777,981]],[[-129,-430],[748,263],[943,96]],[[434,-94],[410,-990],[249,-704]],[[237,42],[122,-732],[44,-51]],[[909,-116],[-229,545],[292,717]],[[824,-768],[-807,-370],[-262,30]],[[675,58],[332,-890],[-651,791]],[[363,825],[-717,254],[684,240]],[[405,-715],[900,166],[-589,422]],[[-476,686],[-830,-319],[634,-807]],[[633,837],[-971,917],[-764,207]],[[-116,-44],[-193,-70],[908,809]],[[-26,-252],[998,408],[70,-713]],[[-601,645],[-462,842],[-644,-591]],[[-160,653],[274,113],[-138,687]],[[369,-273],[-181,925],[-167,-693]],[[-338,135],[480,-967],[-13,-840]],[[-90,-270],[-564,695],[161,907]],[[607,-430],[869,-713],[461,-469]],[[919,-165],[-776,522],[606,-708]],[[-203,465],[288,207],[-339,-458]],[[-453,-534],[-715,975],[838,-677]],[[-973,310],[-350,934],[546,-805]],[[-835,385],[708,-337],[-594,-772]],[[-14,914],[900,-495],[-627,594]],[[833,-713],[-213,578],[-296,699]],[[-27,-748],[484,455],[915,291]],[[270,889],[739,-57],[442,-516]],[[119,811],[-679,905],[184,130]],[[-678,-469],[925,553],[612,482]],[[101,-571],[-732,-842],[644,588]],[[-71,-737],[566,616],[957,-663]],[[-634,-356],[90,-207],[936,622]],[[598,443],[964,-895],[-58,529]],[[847,-467],[929,-742],[91,10]],[[-633,829],[-780,-408],[222,-30]],[[-818,57],[275,-38],[-746,198]],[[-722,-825],[-549,597],[-391,99]],[[-570,908],[430,873],[-103,-360]],[[342,-681],[512,434],[542,-528]],[[297,850],[479,609],[543,-357]],[[9,784],[212,548],[56,859]],[[-152,560],[-240,-969],[-18,713]],[[140,-133],[34,-635],[250,-163]],[[-272,-22],[-169,-662],[989,-604]],[[471,-765],[355,633],[-742,-118]],[[-118,146],[942,663],[547,-376]],[[583,16],[162,264],[715,-33]],[[-230,-446],[997,-838],[561,555]],[[372,397],[-729,-318],[-276,649]],[[92,982],[-970,-390],[-922,922]],[[-981,713],[-951,-337],[-669,670]],[[-999,846],[-831,-504],[7,-128]],[[455,-954],[-370,682],[-510,45]],[[822,-960],[-892,-385],[-662,314]],[[-668,-686],[-367,-246],[530,-341]],[[-723,-720],[-926,-836],[-142,757]],[[-509,-134],[384,-221],[-873,-639]],[[-803,-52],[-706,-669],[373,-339]],[[933,578],[631,-616],[770,555]],[[741,-564],[-33,-605],[-576,275]],[[-715,445],[-233,-730],[734,-704]],[[120,-10],[-266,-685],[-490,-17]],[[-232,-326],[-457,-946],[-457,-116]],[[811,52],[639,826],[-200,147]],[[-329,279],[293,612],[943,955]],[[-721,-894],[-393,-969],[-642,453]],[[-688,-826],[-352,-75],[371,79]],[[-809,-979],[407,497],[858,-248]],[[-485,-232],[-242,-582],[-81,849]],[[141,-106],[123,-152],[806,-596]],[[-428,57],[-992,811],[-192,478]],[[864,393],[122,858],[255,-876]],[[-284,-780],[240,457],[354,-107]],[[956,605],[-477,44],[26,-678]],[[86,710],[-533,-815],[439,327]],[[-906,-626],[-834,763],[426,-48]],[[201,-150],[-904,652],[475,412]],[[-247,149],[81,-199],[-531,-148]],[[923,-76],[-353,175],[-121,-223]],[[427,-674],[453,472],[-410,585]],[[931,776],[-33,85],[-962,-865]],[[-655,-908],[-902,208],[869,792]],[[-316,-102],[-45,-436],[-222,885]],[[-309,768],[-574,653],[745,-975]],[[896,27],[-226,993],[332,198]],[[323,655],[-89,260],[240,-902]],[[501,-763],[-424,793],[813,616]],[[993,375],[-938,-621],[672,-70]],[[-880,-466],[-283,770],[-824,143]],[[63,-283],[886,-142],[879,-116]],[[-964,-50],[-521,-42],[-306,-161]],[[724,-22],[866,-871],[933,-383]],[[-344,135],[282,966],[-80,917]],[[-281,-189],[420,810],[362,-582]],[[-515,455],[-588,814],[162,332]],[[555,-436],[-123,-210],[869,-943]],[[589,577],[232,286],[-554,876]],[[-773,127],[-58,-171],[-452,125]],[[-428,575],[906,-232],[-10,-224]],[[437,276],[-335,-348],[605,878]],[[-964,511],[-386,-407],[168,-220]],[[307,513],[912,-463],[-423,-416]],[[-445,539],[273,886],[-18,760]],[[-396,-585],[-670,414],[47,364]],[[143,-506],[754,906],[-971,-203]],[[-544,472],[-180,-541],[869,-465]],[[-779,-15],[-396,890],[972,-220]],[[-430,-564],[503,182],[-119,456]],[[89,-10],[-739,399],[506,499]],[[954,162],[-810,-973],[127,870]],[[890,952],[-225,158],[828,237]],[[-868,952],[349,465],[574,750]],[[-915,369],[-975,-596],[-395,-134]],[[-135,-601],[575,582],[-667,640]],[[413,890],[-560,-276],[-555,-562]],[[-633,-269],[561,-820],[-624,499]],[[371,-92],[-784,-593],[864,-717]],[[-971,655],[-439,367],[754,-951]],[[172,-347],[36,279],[-247,-402]],[[633,-301],[364,-349],[-683,-387]],[[-780,-211],[-713,-948],[-648,543]],[[72,58],[762,-465],[-66,462]],[[78,502],[781,-832],[713,836]],[[-431,-64],[-484,-392],[208,-343]],[[-64,101],[-29,-860],[-329,844]],[[398,391],[828,-858],[700,395]],[[578,-896],[-326,-604],[314,180]],[[97,-321],[-695,185],[-357,852]],[[854,839],[283,-375],[951,-209]],[[194,96],[-564,-847],[162,524]],[[-354,532],[494,621],[580,560]],[[419,-678],[-450,926],[-5,-924]],[[-661,905],[519,621],[-143,394]],[[-573,268],[296,-562],[-291,-319]],[[-211,266],[-196,158],[564,-183]],[[18,-585],[-398,777],[-581,864]],[[790,-894],[-745,-604],[-418,70]],[[848,-339],[150,773],[11,851]],[[-954,-809],[-53,-20],[-648,-304]],[[658,-336],[-658,-905],[853,407]],[[-365,-844],[350,-625],[852,-358]],[[986,-315],[-230,-159],[21,180]],[[-15,599],[45,-286],[-941,847]],[[-613,-68],[184,639],[-987,550]],[[334,675],[-56,-861],[923,340]],[[-848,-596],[960,231],[-28,-34]],[[707,-811],[-994,-356],[-167,-171]],[[-470,-764],[72,576],[-600,-204]],[[379,189],[-542,-576],[585,800]],[[440,540],[-445,-563],[379,-334]],[[-155,64],[514,-288],[853,106]],[[-304,751],[481,-520],[-708,-694]],[[-709,132],[594,126],[-844,63]],[[723,471],[421,-138],[-962,892]],[[-440,-263],[39,513],[-672,-954]],[[775,809],[-581,330],[752,-107]],[[-376,-158],[335,-708],[-514,578]],[[-343,-769],[456,-187],[25,413]],[[548,-877],[-172,300],[-500,928]],[[938,-102],[423,-488],[-378,-969]],[[-36,564],[-55,131],[958,-800]],[[-322,511],[-413,503],[700,-847]],[[-966,547],[-88,-17],[-359,-67]],[[637,-341],[-437,-181],[527,-153]],[[-74,449],[-28,3],[485,189]],[[-997,658],[-224,-948],[702,-807]],[[-224,736],[-896,127],[-945,-850]],[[-395,-106],[439,-553],[-128,124]],[[-841,-445],[-758,-572],[-489,212]],[[633,-327],[13,-512],[952,771]],[[-940,-171],[-6,-46],[-923,-425]],[[-142,-442],[-817,-998],[843,-695]],[[340,847],[-137,-920],[-988,-658]],[[-653,217],[-679,-257],[651,-719]],[[-294,365],[-41,342],[74,-892]],[[690,-236],[-541,494],[408,-516]],[[180,-807],[225,790],[494,59]],[[707,605],[-246,656],[284,271]],[[65,294],[152,824],[442,-442]],[[-321,781],[-540,341],[316,415]],[[420,371],[-2,545],[995,248]],[[56,-191],[-604,971],[615,449]],[[-981,-31],[510,592],[-390,-362]],[[-317,-968],[913,365],[97,508]],[[832,63],[-864,-510],[86,202]],[[-483,456],[-636,340],[-310,676]],[[981,-847],[751,-508],[-962,-31]],[[-157,99],[73,797],[63,-172]],[[220,858],[872,924],[866,-381]],[[996,-169],[805,321],[-164,971]],[[896,11],[-625,-973],[-782,76]],[[578,-280],[730,-729],[307,-905]],[[-580,-749],[719,-698],[967,603]],[[-821,874],[-103,-623],[662,-491]],[[-763,117],[661,-644],[672,-607]],[[592,787],[-798,-169],[-298,690]],[[296,644],[-526,-762],[-447,665]],[[534,-818],[852,-120],[57,-379]],[[-986,-549],[-329,294],[954,258]],[[-133,352],[-660,-77],[904,-356]],[[748,343],[215,500],[317,-277]],[[311,7],[910,-896],[-809,795]],[[763,-602],[-753,313],[-352,917]],[[668,619],[-474,-597],[-650,650]],[[-297,563],[-701,-987],[486,-902]],[[-461,-740],[-657,233],[-482,-328]],[[-446,-250],[-986,-458],[-629,520]],[[542,-49],[-327,-469],[257,-947]],[[121,-575],[-634,-143],[-184,521]],[[30,504],[455,-645],[-229,-945]],[[-12,-295],[377,764],[771,125]],[[-686,-133],[225,-25],[-376,-143]],[[-6,-46],[338,270],[-405,-872]],[[-623,-37],[582,467],[963,898]],[[-804,869],[-477,420],[-475,-303]],[[94,41],[-842,-193],[-768,720]],[[-656,-918],[415,645],[-357,460]],[[-47,-486],[-911,468],[-608,-686]],[[-158,251],[419,-394],[-655,-895]],[[272,-695],[979,508],[-358,959]],[[-776,650],[-918,-467],[-690,-534]],[[-85,-309],[-626,167],[-366,-429]],[[-880,-732],[-186,-924],[970,-875]],[[517,645],[-274,962],[-804,544]],[[721,402],[104,640],[478,-499]],[[198,684],[-134,-723],[-452,-905]],[[-245,745],[239,238],[-826,441]],[[-217,206],[-32,462],[-981,-895]],[[-51,989],[526,-173],[560,-676]],[[-480,-659],[-976,-580],[-727,466]],[[-996,-90],[-995,158],[-239,642]],[[302,288],[-194,-294],[17,924]],[[-943,969],[-326,114],[-500,103]],[[-619,163],[339,-880],[230,421]],[[-344,-601],[-795,557],[565,-779]],[[590,345],[-129,-202],[-125,-58]],[[-777,-195],[159,674],[775,411]],[[-939,312],[-665,810],[121,855]],[[-971,254],[712,815],[452,581]],[[442,-9],[327,-750],[61,757]],[[-342,869],[869,-160],[390,-772]],[[620,601],[565,-169],[-69,-183]],[[-25,924],[-817,964],[321,-970]],[[-64,-6],[-133,978],[825,-379]],[[601,436],[-24,98],[-115,940]],[[-97,502],[614,-574],[922,513]],[[-125,262],[-946,695],[99,-220]],[[429,-721],[719,-694],[197,-558]],[[326,689],[-70,-908],[-673,338]],[[-468,-856],[-902,-254],[-358,305]],[[-358,530],[542,355],[-253,-47]],[[-438,-74],[-362,963],[988,788]],[[137,717],[467,622],[319,-380]],[[-86,310],[-336,851],[918,-288]],[[721,395],[646,-53],[255,-425]],[[255,175],[912,84],[-209,878]],[[-632,-485],[-400,-357],[991,-608]],[[235,-559],[992,-297],[857,-591]],[[87,-71],[148,130],[647,578]],[[-290,-584],[-639,-788],[-21,592]],[[386,984],[625,-731],[-993,-336]],[[-538,634],[-209,-828],[-150,-774]],[[-754,-387],[607,-781],[976,-199]],[[412,-798],[-664,295],[709,-537]],[[-412,932],[-880,-232],[561,852]],[[-656,-358],[-198,-964],[-433,-848]],[[-762,-668],[-632,186],[-673,-11]],[[-876,237],[-282,-312],[-83,682]],[[403,73],[-57,-436],[-622,781]],[[-587,873],[798,976],[-39,329]],[[-369,-622],[553,-341],[817,794]],[[-108,-616],[920,-849],[-679,96]],[[290,-974],[234,239],[-284,-321]],[[-22,394],[-417,-419],[264,58]],[[-473,-551],[69,923],[591,-228]],[[-956,662],[-113,851],[-581,-794]],[[-258,-681],[413,-471],[-637,-817]],[[-866,926],[992,-653],[-7,794]],[[556,-350],[602,917],[831,-610]],[[188,245],[-906,361],[492,174]],[[-720,384],[-818,329],[638,-666]],[[-246,846],[890,-325],[-59,-850]],[[-118,-509],[620,-762],[-256,15]],[[-787,-536],[-452,-338],[-399,813]],[[458,560],[525,-311],[-608,-419]],[[494,-811],[-825,-127],[-812,894]],[[-801,890],[-629,-860],[574,925]],[[-709,-193],[-213,138],[-410,-403]],[[861,91],[708,-187],[5,-222]],[[789,646],[777,154],[90,-49]],[[-267,-830],[-114,531],[591,-698]],[[-126,-82],[881,-418],[82,652]],[[-894,130],[-726,-935],[393,-815]],[[-142,563],[654,638],[-712,-597]],[[-759,60],[-23,977],[100,-765]],[[-305,595],[-570,-809],[482,762]],[[-161,-267],[53,963],[998,-529]],[[-300,-57],[798,353],[703,486]],[[-990,696],[-764,699],[-565,719]],[[-232,-205],[566,571],[977,369]],[[740,865],[151,-817],[-204,-293]],[[94,445],[-768,229],[537,-406]],[[861,620],[37,-424],[-36,656]],[[390,-369],[952,733],[-464,569]],[[-482,-604],[959,554],[-705,-626]],[[-396,-615],[-991,108],[272,-723]],[[143,780],[535,142],[-917,-147]],[[138,-629],[-217,-908],[905,115]],[[915,103],[-852,64],[-468,-642]],[[570,734],[-785,-268],[-326,-759]],[[738,531],[-332,586],[-779,24]],[[870,440],[-217,473],[-383,415]],[[-296,-333],[-330,-142],[-924,950]],[[118,120],[-35,-245],[-211,-652]],[[61,634],[153,-243],[838,789]],[[726,-582],[210,105],[983,537]],[[-313,-323],[758,234],[29,848]],[[-847,-172],[-593,733],[-56,617]],[[54,255],[-512,156],[-575,675]],[[-873,-956],[-148,623],[95,200]],[[700,-370],[926,649],[-978,157]],[[-639,-202],[719,130],[747,222]],[[194,-33],[955,943],[505,114]],[[-226,-790],[28,-930],[827,783]],[[-392,-74],[-28,714],[218,-612]],[[209,626],[-888,-683],[-912,495]],[[487,751],[614,933],[631,445]],[[-348,-34],[-411,-106],[835,321]],[[-689,872],[-29,-800],[312,-542]],[[-52,566],[827,570],[-862,-77]],[[471,992],[309,-402],[389,912]],[[24,520],[-83,-51],[555,503]],[[-265,-317],[283,-970],[-472,690]],[[606,526],[137,71],[-651,150]],[[217,-518],[663,66],[-605,-331]],[[-562,232],[-76,-503],[205,-323]],[[842,-521],[546,285],[625,-186]],[[997,-927],[344,909],[-546,974]],[[-677,419],[81,121],[-705,771]],[[719,-379],[-944,-797],[784,-155]],[[-378,286],[-317,-797],[-111,964]],[[-288,-573],[784,80],[-532,-646]],[[-77,407],[-248,-797],[769,-816]],[[-24,-637],[287,-858],[-927,-333]],[[-902,37],[894,-823],[141,684]],[[125,467],[-177,-516],[686,399]],[[-321,-542],[641,-590],[527,-224]],[[-400,-712],[-876,-208],[632,-543]],[[-676,-429],[664,-242],[-269,922]],[[-608,-273],[-141,930],[687,380]],[[786,-12],[498,494],[310,326]],[[-739,-617],[606,-960],[804,188]],[[384,-368],[-243,-350],[-459,31]],[[-550,397],[320,-868],[328,-279]],[[969,-179],[853,864],[-110,514]],[[910,793],[302,-822],[-285,488]],[[-605,-128],[218,-283],[-17,-227]],[[16,324],[667,708],[750,3]],[[485,-813],[19,585],[71,930]],[[-218,816],[-687,-97],[-732,-360]],[[-497,-151],[376,-23],[3,315]],[[-412,-989],[-610,-813],[372,964]],[[-878,-280],[87,381],[-311,69]],[[-609,-90],[-731,-679],[150,585]],[[889,27],[-162,605],[75,-770]],[[448,617],[-988,0],[-103,-504]],[[-800,-537],[-69,627],[608,-668]],[[534,686],[-664,942],[830,920]],[[-238,775],[495,932],[-793,497]],[[-343,958],[-914,-514],[-691,651]],[[568,-136],[208,359],[728,28]],[[286,912],[-794,683],[556,-102]],[[-638,-629],[-484,445],[-64,-497]],[[58,505],[-801,-110],[872,632]],[[-390,777],[353,267],[976,369]],[[-993,515],[105,-133],[358,-572]],[[964,996],[355,-212],[-667,38]],[[-725,-614],[-35,365],[132,-196]],[[237,-536],[-416,-302],[312,477]],[[-664,574],[-210,224],[48,-925]],[[869,-261],[-256,-240],[-3,-698]],[[712,385],[32,-34],[916,-315]],[[895,-409],[-100,-346],[728,-624]],[[-806,327],[-450,889],[-781,-939]],[[-586,-403],[698,318],[-939,899]],[[557,-57],[-920,659],[333,-51]],[[-441,232],[-918,-205],[246,1]],[[783,167],[-797,-595],[245,-736]],[[-36,-531],[-486,-426],[-813,-160]],[[777,-843],[817,313],[-228,-572]],[[735,866],[-309,-564],[-81,190]],[[-413,645],[101,719],[-719,218]],[[-83,164],[767,796],[-430,-459]],[[122,779],[-15,-295],[-96,-892]],[[462,379],[70,548],[834,-312]],[[-630,-534],[124,187],[-737,114]],[[-299,-604],[318,-591],[936,826]],[[-879,218],[-642,-483],[-318,-866]],[[-691,62],[-658,761],[-895,-854]],[[-822,493],[687,569],[910,-202]],[[-223,784],[304,-5],[541,925]],[[-914,541],[737,-662],[-662,-195]],[[-622,615],[414,358],[881,-878]],[[339,745],[-268,-968],[-280,-227]],[[-364,855],[148,-709],[-827,472]],[[-890,-532],[-41,664],[-612,577]],[[-702,-859],[971,-722],[-660,-920]],[[-539,-605],[737,149],[973,-802]],[[800,42],[-448,-811],[152,511]],[[-933,377],[-110,-105],[-374,-937]],[[-766,152],[482,120],[-308,390]],[[-568,775],[-292,899],[732,890]],[[-177,-317],[-502,-259],[328,-511]],[[612,-696],[-574,-660],[132,31]],[[-119,563],[-805,-864],[179,-672]],[[425,-627],[183,-331],[839,318]],[[-711,-976],[-749,152],[-916,261]],[[181,-63],[497,211],[262,406]],[[-537,700],[-859,-765],[-928,77]],[[892,832],[231,-749],[-82,613]],[[816,216],[-642,-216],[-669,-912]],[[-6,624],[-937,-370],[-344,268]],[[737,-710],[-869,983],[-324,-274]],[[565,952],[-547,-158],[374,-444]],[[51,-683],[645,-845],[515,636]],[[-953,-631],[114,-377],[-764,-144]],[[-8,470],[-242,-399],[-675,-730]],[[-540,689],[-20,47],[-607,590]],[[-329,-710],[-779,942],[-388,979]],[[123,829],[674,122],[203,563]],[[46,782],[396,-33],[386,610]],[[872,-846],[-523,-122],[-55,-190]],[[388,-994],[-525,974],[127,596]],[[781,-680],[796,-34],[-959,-62]],[[-749,173],[200,-384],[-745,-446]],[[379,618],[136,-250],[-224,970]],[[-58,240],[-921,-760],[-901,-626]],[[366,-185],[565,-100],[515,688]],[[489,999],[-893,-263],[-637,816]],[[838,-496],[-316,-513],[419,479]],[[107,676],[-15,882],[98,-397]],[[-999,941],[-903,-424],[670,-325]],[[171,-979],[835,178],[169,-984]],[[-609,-607],[378,-681],[184,402]],[[-316,903],[-575,-800],[224,983]],[[591,-18],[-460,551],[-167,918]],[[-756,405],[-117,441],[163,-320]],[[456,24],[6,881],[-836,-539]],[[-489,-585],[915,651],[-892,-382]],[[-177,-122],[73,-711],[-386,591]],[[181,724],[530,686],[-131,241]],[[737,288],[886,216],[233,33]],[[-548,-386],[-749,-153],[-85,-982]],[[-835,227],[904,160],[-99,25]],[[-9,-42],[-162,728],[840,-963]],[[217,-763],[870,771],[47,-846]],[[-595,808],[-491,556],[337,-900]],[[-134,281],[-724,441],[-134,708]],[[-789,-508],[651,-962],[661,315]],[[-839,-923],[339,402],[41,-487]],[[300,-790],[48,703],[-398,-811]],[[955,-51],[462,-685],[960,-717]],[[910,-880],[592,-255],[-51,-776]],[[-885,169],[-793,368],[-565,458]],[[-905,940],[-492,-630],[-535,-988]],[[245,797],[763,869],[-82,550]],[[-310,38],[-933,-367],[-650,824]],[[-95,32],[-83,337],[226,990]],[[-218,-975],[-191,-208],[-785,-293]],[[-672,-953],[517,-901],[-247,465]],[[681,-148],[261,-857],[544,-923]],[[640,341],[446,-618],[195,769]],[[384,398],[-846,365],[671,815]],[[578,576],[-911,907],[762,-859]],[[548,-428],[144,-630],[-759,-146]],[[710,-73],[-700,983],[-97,-889]],[[-46,898],[-973,-362],[-817,-717]],[[151,-81],[-125,-900],[-478,-154]],[[483,615],[-537,-932],[181,-68]],[[786,-223],[518,25],[-306,-12]],[[-422,268],[-809,-683],[635,468]],[[983,-734],[-694,-608],[-110,4]],[[-786,-196],[749,-354],[137,-8]],[[-181,36],[668,-200],[691,-973]],[[-629,-838],[692,-736],[437,-871]],[[-208,-536],[-159,-596],[8,197]],[[-3,370],[-686,170],[913,-376]],[[44,-998],[-149,-993],[-200,512]],[[-519,136],[859,497],[536,434]],[[77,-985],[972,-340],[-705,-837]],[[-381,947],[250,360],[344,322]],[[-26,131],[699,750],[707,384]],[[-914,655],[299,193],[406,955]],[[-883,-921],[220,595],[-546,794]],[[-599,577],[-569,-404],[-704,489]],[[-594,-963],[-624,-460],[880,-760]],[[-603,88],[-99,681],[55,-328]],[[976,472],[139,-453],[-531,-860]],[[192,-290],[513,-89],[666,432]],[[417,487],[575,293],[567,-668]],[[655,711],[-162,449],[-980,972]],[[-505,664],[-685,-239],[603,-592]],[[-625,-802],[-67,996],[384,-636]],[[365,-593],[522,-666],[-200,-431]],[[-868,708],[560,-860],[-630,-355]],[[-702,785],[-637,-611],[-597,960]],[[-137,-696],[-93,-803],[408,406]],[[891,-123],[-26,-609],[-610,518]],[[133,-832],[-198,555],[708,-110]],[[791,617],[-69,487],[696,315]],[[-900,694],[-565,517],[-269,-416]],[[914,135],[-781,600],[-71,-600]],[[991,-915],[-422,-351],[-837,313]],[[-840,-398],[-302,21],[590,146]],[[62,-558],[-702,-384],[-625,831]],[[-363,-426],[-924,-496],[792,-908]],[[73,361],[-817,-466],[400,922]],[[-626,-164],[-626,860],[-524,286]],[[255,26],[-944,809],[-606,986]],[[-457,-256],[-103,50],[-867,-871]],[[-223,803],[196,480],[612,136]],[[-820,-928],[700,780],[-977,721]],[[717,332],[53,-933],[-128,793]],[[-602,-648],[562,593],[890,702]],[[-469,-875],[-527,911],[-475,-222]],[[110,-281],[-552,-536],[-816,596]],[[-981,654],[413,-981],[-75,-95]],[[-754,-742],[-515,894],[-220,-344]],[[795,-52],[156,408],[-603,76]],[[474,-157],[423,-499],[-807,-791]],[[260,688],[40,-52],[702,-122]],[[-584,-517],[-390,-881],[302,-504]],[[61,797],[665,708],[14,668]],[[366,166],[458,-614],[564,-983]],[[72,539],[-378,796],[381,-824]],[[-485,201],[-588,842],[736,379]],[[-149,-894],[-298,705],[-303,-406]],[[660,-935],[-580,521],[93,633]],[[-382,-282],[-375,-841],[-828,171]],[[-567,743],[-100,43],[144,122]],[[-281,-786],[-749,-551],[296,304]],[[11,-426],[-792,212],[857,-175]],[[594,143],[-699,289],[315,137]],[[341,596],[-390,107],[-631,-804]],[[-751,-636],[-424,-854],[193,651]],[[-145,384],[749,675],[-786,517]],[[224,-865],[-323,96],[-916,258]],[[-309,403],[-388,826],[35,-270]],[[-942,709],[222,158],[-699,-103]],[[-589,842],[-997,29],[-195,-210]],[[264,426],[566,145],[-217,623]],[[217,965],[507,-601],[-453,507]],[[-206,307],[-982,4],[64,-292]],[[676,-49],[-38,-701],[550,883]],[[5,-850],[-438,659],[745,-773]],[[933,238],[-574,-570],[91,-33]],[[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]],[[848,462],[100,-381],[135,242]],[[330,718],[-24,-190],[860,-78]],[[479,458],[941,108],[-866,-653]],[[212,980],[962,-962],[115,841]],[[-827,-474],[-206,881],[323,765]],[[506,-45],[-30,-293],[524,-133]],[[832,-173],[547,-852],[-561,-842]],[[-397,-661],[-708,819],[-545,-228]],[[521,51],[-489,852],[36,-258]],[[227,-164],[189,465],[-987,-882]],[[-73,-997],[641,-995],[449,-615]],[[151,-995],[-638,415],[257,-400]],[[-663,-297],[-748,537],[-734,198]],[[-585,-401],[-81,-782],[-80,-105]],[[99,-21],[238,-365],[-704,-368]],[[45,416],[849,-211],[-371,-1]],[[-404,-443],[795,-406],[36,-933]],[[272,-363],[981,-491],[-380,77]],[[713,-342],[-366,-849],[643,911]],[[-748,671],[-537,813],[961,-200]],[[-194,-909],[703,-662],[-601,188]],[[281,500],[724,286],[267,197]],[[-832,847],[-595,820],[-316,637]],[[520,521],[-54,261],[923,-10]],[[4,-808],[-682,-258],[441,-695]],[[-793,-107],[-969,905],[798,446]],[[-108,-739],[-590,69],[-855,-365]],[[380,-623],[-930,817],[468,713]],[[759,-849],[-236,433],[-723,-931]],[[95,-320],[-686,124],[-69,-329]],[[-655,518],[-210,-523],[284,-866]],[[144,303],[639,70],[-171,269]],[[173,-333],[947,-304],[55,40]],[[274,878],[-482,-888],[-835,375]],[[-982,-854],[-36,-218],[-114,-230]],[[905,-979],[488,-485],[-479,114]],[[877,-157],[553,-530],[-47,-321]],[[350,664],[-881,442],[-220,-284]],[[434,-423],[-365,878],[-726,584]],[[535,909],[-517,-447],[-660,-141]],[[-966,191],[50,353],[182,-642]],[[-785,-634],[123,-907],[-162,511]],[[146,-850],[-214,814],[-704,25]],[[692,1],[521,492],[-637,274]],[[-662,-372],[-313,597],[983,-647]],[[-962,-526],[68,-549],[-819,231]],[[740,-890],[-318,797],[-666,948]],[[-190,-12],[-468,-455],[948,284]],[[16,478],[-506,-888],[628,-154]],[[272,630],[-976,308],[433,3]],[[-169,-391],[-132,189],[302,-388]],[[109,-784],[474,-167],[-265,-31]],[[-177,-532],[283,464],[421,-73]],[[650,635],[592,-138],[1,-387]],[[-932,703],[-827,-492],[-355,686]],[[586,-311],[340,-618],[645,-434]],[[-951,736],[647,-127],[-303,590]],[[188,444],[903,718],[-931,500]],[[-872,-642],[-296,-571],[337,241]],[[23,65],[152,125],[880,470]],[[512,823],[-42,217],[823,-263]],[[180,-831],[-380,886],[607,762]],[[722,443],[-149,-216],[-115,759]],[[-19,660],[-36,901],[923,231]],[[562,-322],[-626,-968],[194,-825]],[[204,-920],[938,784],[362,150]],[[-410,-266],[-715,559],[-672,124]],[[-198,446],[-140,454],[-461,-447]],[[83,-346],[830,-493],[-759,-382]],[[-881,601],[581,234],[-134,-925]],[[-494,914],[-42,899],[235,629]],[[-390,50],[956,437],[774,-700]],[[-514,514],[44,-512],[-576,-313]],[[63,-688],[808,-534],[-570,-399]],[[-726,572],[-896,102],[-294,-28]],[[-688,757],[401,406],[955,-511]],[[-283,423],[-485,480],[-767,908]],[[-541,952],[-594,116],[-854,451]],[[-273,-796],[236,625],[-626,257]],[[-407,-493],[373,826],[-309,297]],[[-750,955],[-476,641],[-809,713]],[[8,415],[695,226],[-111,2]],[[733,209],[152,-920],[401,995]],[[921,-103],[-919,66],[871,-947]],[[-907,89],[-869,-214],[851,-559]],[[-307,748],[524,-755],[314,-711]],[[188,897],[-72,-763],[482,103]],[[545,-821],[-232,-596],[-334,-754]],[[-217,-788],[-820,388],[-200,-662]],[[779,160],[-723,-975],[-142,-998]],[[-978,-519],[-78,-981],[842,904]],[[-504,-736],[-295,21],[-472,-482]],[[391,115],[-705,574],[652,-446]],[[813,-988],[865,830],[-263,487]],[[194,80],[774,-493],[-761,-872]],[[-415,-284],[-803,7],[-810,670]],[[-484,-4],[881,-872],[55,-852]],[[-379,822],[-266,324],[-48,748]],[[-304,-278],[406,-60],[959,-89]],[[404,756],[577,-643],[-332,658]],[[291,460],[125,491],[-312,83]],[[311,-734],[-141,582],[282,-557]],[[-450,-661],[-981,710],[-177,794]],[[328,264],[-787,971],[-743,-407]],[[-622,518],[993,-241],[-738,229]],[[273,-826],[-254,-917],[-710,-111]],[[809,770],[96,368],[-818,725]],[[-488,773],[502,-342],[534,745]],[[-28,-414],[236,-315],[-484,363]],[[179,-466],[-566,713],[-683,56]],[[560,-240],[-597,619],[916,-940]],[[893,473],[872,-868],[-642,-461]],[[799,489],[383,-321],[-776,-833]],[[980,490],[-508,764],[-512,-426]],[[917,961],[-16,-675],[440,559]],[[-812,212],[784,-987],[-132,554]],[[-886,454],[747,806],[190,231]],[[910,341],[21,-66],[708,725]],[[29,929],[-831,-494],[-303,389]],[[-103,492],[-271,-174],[-515,529]],[[-292,119],[419,788],[247,-951]],[[483,543],[-347,-673],[664,-549]],[[-926,-871],[-437,337],[162,-877]],[[299,472],[-771,5],[-88,-643]],[[-103,525],[-725,-998],[264,22]],[[-505,708],[550,-545],[823,347]],[[-738,931],[59,147],[-156,-259]],[[456,968],[-162,889],[132,-911]],[[535,120],[968,-517],[-864,-541]],[[24,-395],[-593,-766],[-565,-332]],[[834,611],[825,-576],[280,629]],[[211,-548],[140,-278],[-592,929]],[[-999,-240],[-63,-78],[793,573]],[[-573,160],[450,987],[529,322]],[[63,353],[315,-187],[-461,577]],[[189,-950],[-247,656],[289,241]],[[209,-297],[397,664],[-805,484]],[[-655,452],[435,-556],[917,874]],[[253,-756],[262,-888],[-778,-214]],[[793,-451],[323,-251],[-401,-458]],[[-396,619],[-651,-287],[-668,-781]],[[698,720],[-349,742],[-807,546]],[[738,280],[680,279],[-540,858]],[[-789,387],[530,-36],[-551,-491]],[[162,579],[-427,-272],[228,710]],[[689,356],[917,-580],[729,217]],[[-115,-638],[866,424],[-82,-194]],[[411,-338],[-917,172],[227,-29]],[[-612,63],[630,-976],[-64,-204]],[[-200,911],[583,-571],[682,-579]],[[91,298],[396,-183],[788,-955]],[[141,-873],[-277,149],[-396,916]],[[321,958],[-136,573],[541,-777]],[[797,-909],[-469,-877],[988,-653]],[[784,-198],[129,883],[-203,399]],[[-68,-810],[223,-423],[-467,-512]],[[531,-445],[-603,-997],[-841,641]],[[-274,-242],[174,261],[-636,-158]],[[-574,494],[-796,-798],[-798,99]],[[95,-82],[-613,-954],[-753,986]],[[-883,-448],[-864,-401],[938,-392]],[[913,930],[-542,-988],[310,410]],[[506,-99],[43,512],[790,-222]],[[724,31],[49,-950],[260,-134]],[[-287,-947],[-234,-700],[56,588]],[[-33,782],[-144,948],[105,-791]],[[548,-546],[-652,-293],[881,-520]],[[691,-91],[76,991],[-631,742]],[[-520,-429],[-244,-296],[724,-48]],[[778,646],[377,50],[-188,56]],[[-895,-507],[-898,-165],[-674,652]],[[654,584],[-634,177],[-349,-620]],[[114,-980],[355,62],[182,975]],[[516,9],[-442,-298],[274,-579]],[[-238,262],[-431,-896],[506,-850]],[[47,748],[846,821],[-537,-293]],[[839,726],[593,285],[-297,840]],[[634,-486],[468,-304],[-887,-567]],[[-864,914],[296,-124],[335,233]],[[88,-253],[-523,-956],[-554,803]],[[-587,417],[281,-62],[-409,-363]],[[-136,-39],[-292,-768],[-264,876]],[[-127,506],[-891,-331],[-744,-430]],[[778,584],[-750,-129],[-479,-94]],[[-876,-771],[-987,-757],[180,-641]],[[-777,-694],[411,-87],[329,190]],[[-347,-999],[-882,158],[-754,232]],[[-105,918],[188,237],[-110,-591]],[[-209,703],[-838,77],[838,909]],[[-995,-339],[-762,750],[860,472]],[[185,271],[-289,173],[811,-300]],[[2,65],[-656,-22],[36,-139]],[[765,-210],[883,974],[961,-905]],[[-212,295],[-615,-840],[77,474]],[[211,-910],[-440,703],[-11,859]],[[-559,-4],[-196,841],[-277,969]],[[-73,-159],[-887,126],[978,-371]],[[-569,633],[-423,-33],[512,-393]],[[503,143],[-383,-109],[-649,-998]],[[-663,339],[-317,-523],[-2,596]],[[690,-380],[570,378],[-652,132]],[[72,-744],[-930,399],[-525,935]],[[865,-983],[115,37],[995,826]],[[594,-621],[-872,443],[188,-241]],[[-1000,291],[754,234],[-435,-869]],[[-868,901],[654,-907],[59,181]],[[-868,-793],[-431,596],[-446,-564]],[[900,-944],[-680,-796],[902,-366]],[[331,430],[943,853],[-851,-942]],[[315,-538],[-354,-909],[139,721]],[[170,-884],[-225,-818],[-808,-657]],[[-279,-34],[-533,-871],[-972,552]],[[691,-986],[-800,-950],[654,-747]],[[603,988],[899,841],[-630,591]],[[876,-949],[809,562],[602,-536]],[[-693,363],[-189,495],[738,-1000]],[[-383,431],[-633,297],[665,959]],[[-740,686],[-207,-803],[188,-520]],[[-820,226],[31,-339],[10,121]],[[-312,-844],[624,-516],[483,621]],[[-822,-529],[69,-278],[800,328]],[[834,-82],[-759,420],[811,-264]],[[-960,-240],[-921,561],[173,46]],[[-324,909],[-790,-814],[-2,-785]],[[976,334],[-290,-891],[704,-581]],[[150,-798],[689,-823],[237,-639]],[[-551,-320],[876,-502],[-622,-628]],[[-136,845],[904,595],[-702,-261]],[[-857,-377],[-522,-101],[-943,-805]],[[-682,-787],[-888,-459],[-752,-985]],[[-571,-81],[623,-133],[447,643]],[[-375,-158],[72,-387],[-324,-696]],[[-660,-650],[340,188],[569,526]],[[727,-218],[16,-7],[-595,-988]],[[-966,-684],[802,-783],[-272,-194]],[[115,-566],[-888,47],[712,180]],[[-237,-69],[45,-272],[981,-812]],[[48,897],[439,417],[50,325]],[[348,616],[180,254],[104,-784]],[[-730,811],[-548,612],[-736,790]],[[138,-810],[123,930],[65,865]],[[-768,-299],[-49,-895],[-692,-418]],[[487,-531],[802,-159],[-12,634]],[[808,-179],[552,-73],[470,717]],[[720,-644],[886,-141],[625,144]],[[-485,-505],[-347,-244],[-916,66]],[[600,-565],[995,-5],[324,227]],[[-771,-35],[904,-482],[753,-303]],[[-701,65],[426,-763],[-504,-479]],[[409,733],[-823,475],[64,718]],[[865,975],[368,893],[-413,-433]],[[812,-597],[-970,819],[813,624]],[[193,-642],[-381,-560],[545,398]],[[711,28],[-316,771],[717,-865]],[[-509,462],[809,-136],[786,635]],[[618,-49],[484,169],[635,547]],[[-747,685],[-882,-496],[-332,82]],[[-501,-851],[870,563],[290,570]],[[-279,-829],[-509,397],[457,816]],[[-508,80],[850,-188],[483,-326]],[[860,-100],[360,119],[-205,787]],[[-870,21],[-39,-827],[-185,932]],[[826,284],[-136,-866],[-330,-97]],[[-944,-82],[745,899],[-97,365]],[[929,262],[564,632],[-115,632]],[[244,-276],[713,330],[-897,-214]],[[-890,-109],[664,876],[-974,-907]],[[716,249],[816,489],[723,141]],[[-96,-560],[-272,45],[-70,645]],[[762,-503],[414,-828],[-254,-646]],[[909,-13],[903,-422],[-344,-10]],[[658,-486],[743,545],[50,674]],[[-241,507],[-367,18],[-48,-241]],[[886,-268],[884,-762],[120,-486]],[[-412,-528],[879,-647],[223,-393]],[[851,810],[234,937],[-726,797]],[[-999,942],[839,-134],[-996,-189]],[[100,979],[-527,-521],[378,800]],[[544,-844],[-832,-530],[-77,-641]],[[43,889],[31,442],[-934,-503]],[[-330,-370],[-309,-439],[173,547]],[[169,945],[62,-753],[-542,-597]],[[208,751],[-372,-647],[-520,70]],[[765,-840],[907,-257],[379,918]],[[334,-135],[-689,730],[-427,618]],[[137,-508],[66,-695],[78,169]],[[-962,-123],[400,-417],[151,969]],[[328,689],[666,427],[-555,-642]],[[-907,343],[605,-341],[-647,582]],[[-667,-363],[-571,818],[-265,-399]],[[525,-938],[904,898],[725,692]],[[-176,-802],[-858,-9],[780,275]],[[580,170],[-740,287],[691,-97]],[[365,557],[-375,361],[-288,859]],[[193,737],[842,-808],[520,282]],[[-871,65],[-799,836],[179,-720]],[[958,-144],[744,-789],[797,-48]],[[122,582],[662,912],[68,757]],[[595,241],[-801,513],[388,186]],[[-103,-677],[-259,-731],[-281,-857]],[[921,319],[-696,683],[-88,-997]],[[775,200],[78,858],[648,768]],[[316,821],[-763,68],[-290,-741]],[[564,664],[691,504],[760,787]],[[694,-119],[973,-385],[309,-760]],[[777,-947],[-57,990],[74,19]],[[971,626],[-496,-781],[-602,-239]],[[-651,433],[11,-339],[939,294]],[[-965,-728],[560,569],[-708,-247]]\n];\n--seed-contents--\n```js\nfunction triangleContainment(triangles) {\nreturn true;\n}\nconst testTriangles1 = [\n[[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]]\n];\ntriangleContainment(testTriangles1);\n```\n--solutions--\n```js\nfunction triangleContainment(triangles) {\nfunction isInTriangle(triangle, point) {\n// Based on https://stackoverflow",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 16274,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "2f34511b66d76889912f49ad85b79866",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "triangleContainment(testTriangles1) should return 19 js assert strictEqual(triangleContainment(_testTriangles1), 19); triangleContainment(testTriangles2) should return 228 js assertstrictEqual(triangleContainment(_testTriangles2), 228); --seed-- --after-user-code-- js const _exampleTriangles = [ [[-340, 495], [-153, -910], [835, -947]], [[-175, 41], [-421, -714], [574, -645]] ]; const _testTriangles1 = [ [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; const _testTriangles2 = [ [[-340,495],[-153,-910],[835,-947]],[[-175,41],[-421,-714],[574,-645]],[[-547,712],[-352,579],[951,-786]],[[419,-864],[-83,650],[-399,171]],[[-429,-89],[-357,-930],[296,-29]],[[-734,-702],[823,-745],[-684,-62]],[[-971,762],[925,-776],[-663,-157]],[[162,570],[628,485],[-807,-896]],[[641,91],[-65,700],[887,759]],[[215,-496],[46,-931],[422,-30]],[[-119,359],[668,-609],[-358,-494]],[[440,929],[968,214],[760,-857]],[[-700,785],[838,29],[-216,411]],[[-770,-458],[-325,-53],[-505,633]],[[-752,-805],[349,776],[-799,687]],[[323,5],[561,-36],[919,-560]],[[-907,358],[264,320],[204,274]],[[-728,-466],[350,969],[292,-345]],[[940,836],[272,-533],[748,185]],[[411,998],[813,520],[316,-949]],[[-152,326],[658,-762],[148,-651]],[[330,507],[-9,-628],[101,174]],[[551,-496],[772,-541],[-702,-45]],[[-164,-489],[-90,322],[631,-59]],[[673,366],[-4,-143],[-606,-704]],[[428,-609],[801,-449],[740,-269]],[[453,-924],[-785,-346],[-853,111]],[[-738,555],[-181,467],[-426,-20]],[[958,-692],[784,-343],[505,-569]],[[620,27],[263,54],[-439,-726]],[[804,87],[998,859],[871,-78]],[[-119,-453],[-709,-292],[-115,-56]],[[-626,138],[-940,-476],[-177,-274]],[[-11,160],[142,588],[446,158]],[[538,727],[550,787],[330,810]],[[420,-689],[854,-546],[337,516]],[[872,-998],[-607,748],[473,-192]],[[653,440],[-516,-985],[808,-857]],[[374,-158],[331,-940],[-338,-641]],[[137,-925],[-179,771],[734,-715]],[[-314,198],[-115,29],[-641,-39]],[[759,-574],[-385,355],[590,-603]],[[-189,-63],[-168,204],[289,305]],[[-182,-524],[-715,-621],[911,-255]],[[331,-816],[-833,471],[168,126]],[[-514,581],[-855,-220],[-731,-507]],[[129,169],[576,651],[-87,-458]],[[783,-444],[-881,658],[-266,298]],[[603,-430],[-598,585],[368,899]],[[43,-724],[962,-376],[851,409]],[[-610,-646],[-883,-261],[-482,-881]],[[-117,-237],[978,641],[101,-747]],[[579,125],[-715,-712],[208,534]],[[672,-214],[-762,372],[874,533]],[[-564,965],[38,715],[367,242]],[[500,951],[-700,-981],[-61,-178]],[[-382,-224],[-959,903],[-282,-60]],[[-355,295],[426,-331],[-591,655]],[[892,128],[958,-271],[-993,274]],[[-454,-619],[302,138],[-790,-874]],[[-642,601],[-574,159],[-290,-318]],[[266,-109],[257,-686],[54,975]],[[162,628],[-478,840],[264,-266]],[[466,-280],[982,1],[904,-810]],[[721,839],[730,-807],[777,981]],[[-129,-430],[748,263],[943,96]],[[434,-94],[410,-990],[249,-704]],[[237,42],[122,-732],[44,-51]],[[909,-116],[-229,545],[292,717]],[[824,-768],[-807,-370],[-262,30]],[[675,58],[332,-890],[-651,791]],[[363,825],[-717,254],[684,240]],[[405,-715],[900,166],[-589,422]],[[-476,686],[-830,-319],[634,-807]],[[633,837],[-971,917],[-764,207]],[[-116,-44],[-193,-70],[908,809]],[[-26,-252],[998,408],[70,-713]],[[-601,645],[-462,842],[-644,-591]],[[-160,653],[274,113],[-138,687]],[[369,-273],[-181,925],[-167,-693]],[[-338,135],[480,-967],[-13,-840]],[[-90,-270],[-564,695],[161,907]],[[607,-430],[869,-713],[461,-469]],[[919,-165],[-776,522],[606,-708]],[[-203,465],[288,207],[-339,-458]],[[-453,-534],[-715,975],[838,-677]],[[-973,310],[-350,934],[546,-805]],[[-835,385],[708,-337],[-594,-772]],[[-14,914],[900,-495],[-627,594]],[[833,-713],[-213,578],[-296,699]],[[-27,-748],[484,455],[915,291]],[[270,889],[739,-57],[442,-516]],[[119,811],[-679,905],[184,130]],[[-678,-469],[925,553],[612,482]],[[101,-571],[-732,-842],[644,588]],[[-71,-737],[566,616],[957,-663]],[[-634,-356],[90,-207],[936,622]],[[598,443],[964,-895],[-58,529]],[[847,-467],[929,-742],[91,10]],[[-633,829],[-780,-408],[222,-30]],[[-818,57],[275,-38],[-746,198]],[[-722,-825],[-549,597],[-391,99]],[[-570,908],[430,873],[-103,-360]],[[342,-681],[512,434],[542,-528]],[[297,850],[479,609],[543,-357]],[[9,784],[212,548],[56,859]],[[-152,560],[-240,-969],[-18,713]],[[140,-133],[34,-635],[250,-163]],[[-272,-22],[-169,-662],[989,-604]],[[471,-765],[355,633],[-742,-118]],[[-118,146],[942,663],[547,-376]],[[583,16],[162,264],[715,-33]],[[-230,-446],[997,-838],[561,555]],[[372,397],[-729,-318],[-276,649]],[[92,982],[-970,-390],[-922,922]],[[-981,713],[-951,-337],[-669,670]],[[-999,846],[-831,-504],[7,-128]],[[455,-954],[-370,682],[-510,45]],[[822,-960],[-892,-385],[-662,314]],[[-668,-686],[-367,-246],[530,-341]],[[-723,-720],[-926,-836],[-142,757]],[[-509,-134],[384,-221],[-873,-639]],[[-803,-52],[-706,-669],[373,-339]],[[933,578],[631,-616],[770,555]],[[741,-564],[-33,-605],[-576,275]],[[-715,445],[-233,-730],[734,-704]],[[120,-10],[-266,-685],[-490,-17]],[[-232,-326],[-457,-946],[-457,-116]],[[811,52],[639,826],[-200,147]],[[-329,279],[293,612],[943,955]],[[-721,-894],[-393,-969],[-642,453]],[[-688,-826],[-352,-75],[371,79]],[[-809,-979],[407,497],[858,-248]],[[-485,-232],[-242,-582],[-81,849]],[[141,-106],[123,-152],[806,-596]],[[-428,57],[-992,811],[-192,478]],[[864,393],[122,858],[255,-876]],[[-284,-780],[240,457],[354,-107]],[[956,605],[-477,44],[26,-678]],[[86,710],[-533,-815],[439,327]],[[-906,-626],[-834,763],[426,-48]],[[201,-150],[-904,652],[475,412]],[[-247,149],[81,-199],[-531,-148]],[[923,-76],[-353,175],[-121,-223]],[[427,-674],[453,472],[-410,585]],[[931,776],[-33,85],[-962,-865]],[[-655,-908],[-902,208],[869,792]],[[-316,-102],[-45,-436],[-222,885]],[[-309,768],[-574,653],[745,-975]],[[896,27],[-226,993],[332,198]],[[323,655],[-89,260],[240,-902]],[[501,-763],[-424,793],[813,616]],[[993,375],[-938,-621],[672,-70]],[[-880,-466],[-283,770],[-824,143]],[[63,-283],[886,-142],[879,-116]],[[-964,-50],[-521,-42],[-306,-161]],[[724,-22],[866,-871],[933,-383]],[[-344,135],[282,966],[-80,917]],[[-281,-189],[420,810],[362,-582]],[[-515,455],[-588,814],[162,332]],[[555,-436],[-123,-210],[869,-943]],[[589,577],[232,286],[-554,876]],[[-773,127],[-58,-171],[-452,125]],[[-428,575],[906,-232],[-10,-224]],[[437,276],[-335,-348],[605,878]],[[-964,511],[-386,-407],[168,-220]],[[307,513],[912,-463],[-423,-416]],[[-445,539],[273,886],[-18,760]],[[-396,-585],[-670,414],[47,364]],[[143,-506],[754,906],[-971,-203]],[[-544,472],[-180,-541],[869,-465]],[[-779,-15],[-396,890],[972,-220]],[[-430,-564],[503,182],[-119,456]],[[89,-10],[-739,399],[506,499]],[[954,162],[-810,-973],[127,870]],[[890,952],[-225,158],[828,237]],[[-868,952],[349,465],[574,750]],[[-915,369],[-975,-596],[-395,-134]],[[-135,-601],[575,582],[-667,640]],[[413,890],[-560,-276],[-555,-562]],[[-633,-269],[561,-820],[-624,499]],[[371,-92],[-784,-593],[864,-717]],[[-971,655],[-439,367],[754,-951]],[[172,-347],[36,279],[-247,-402]],[[633,-301],[364,-349],[-683,-387]],[[-780,-211],[-713,-948],[-648,543]],[[72,58],[762,-465],[-66,462]],[[78,502],[781,-832],[713,836]],[[-431,-64],[-484,-392],[208,-343]],[[-64,101],[-29,-860],[-329,844]],[[398,391],[828,-858],[700,395]],[[578,-896],[-326,-604],[314,180]],[[97,-321],[-695,185],[-357,852]],[[854,839],[283,-375],[951,-209]],[[194,96],[-564,-847],[162,524]],[[-354,532],[494,621],[580,560]],[[419,-678],[-450,926],[-5,-924]],[[-661,905],[519,621],[-143,394]],[[-573,268],[296,-562],[-291,-319]],[[-211,266],[-196,158],[564,-183]],[[18,-585],[-398,777],[-581,864]],[[790,-894],[-745,-604],[-418,70]],[[848,-339],[150,773],[11,851]],[[-954,-809],[-53,-20],[-648,-304]],[[658,-336],[-658,-905],[853,407]],[[-365,-844],[350,-625],[852,-358]],[[986,-315],[-230,-159],[21,180]],[[-15,599],[45,-286],[-941,847]],[[-613,-68],[184,639],[-987,550]],[[334,675],[-56,-861],[923,340]],[[-848,-596],[960,231],[-28,-34]],[[707,-811],[-994,-356],[-167,-171]],[[-470,-764],[72,576],[-600,-204]],[[379,189],[-542,-576],[585,800]],[[440,540],[-445,-563],[379,-334]],[[-155,64],[514,-288],[853,106]],[[-304,751],[481,-520],[-708,-694]],[[-709,132],[594,126],[-844,63]],[[723,471],[421,-138],[-962,892]],[[-440,-263],[39,513],[-672,-954]],[[775,809],[-581,330],[752,-107]],[[-376,-158],[335,-708],[-514,578]],[[-343,-769],[456,-187],[25,413]],[[548,-877],[-172,300],[-500,928]],[[938,-102],[423,-488],[-378,-969]],[[-36,564],[-55,131],[958,-800]],[[-322,511],[-413,503],[700,-847]],[[-966,547],[-88,-17],[-359,-67]],[[637,-341],[-437,-181],[527,-153]],[[-74,449],[-28,3],[485,189]],[[-997,658],[-224,-948],[702,-807]],[[-224,736],[-896,127],[-945,-850]],[[-395,-106],[439,-553],[-128,124]],[[-841,-445],[-758,-572],[-489,212]],[[633,-327],[13,-512],[952,771]],[[-940,-171],[-6,-46],[-923,-425]],[[-142,-442],[-817,-998],[843,-695]],[[340,847],[-137,-920],[-988,-658]],[[-653,217],[-679,-257],[651,-719]],[[-294,365],[-41,342],[74,-892]],[[690,-236],[-541,494],[408,-516]],[[180,-807],[225,790],[494,59]],[[707,605],[-246,656],[284,271]],[[65,294],[152,824],[442,-442]],[[-321,781],[-540,341],[316,415]],[[420,371],[-2,545],[995,248]],[[56,-191],[-604,971],[615,449]],[[-981,-31],[510,592],[-390,-362]],[[-317,-968],[913,365],[97,508]],[[832,63],[-864,-510],[86,202]],[[-483,456],[-636,340],[-310,676]],[[981,-847],[751,-508],[-962,-31]],[[-157,99],[73,797],[63,-172]],[[220,858],[872,924],[866,-381]],[[996,-169],[805,321],[-164,971]],[[896,11],[-625,-973],[-782,76]],[[578,-280],[730,-729],[307,-905]],[[-580,-749],[719,-698],[967,603]],[[-821,874],[-103,-623],[662,-491]],[[-763,117],[661,-644],[672,-607]],[[592,787],[-798,-169],[-298,690]],[[296,644],[-526,-762],[-447,665]],[[534,-818],[852,-120],[57,-379]],[[-986,-549],[-329,294],[954,258]],[[-133,352],[-660,-77],[904,-356]],[[748,343],[215,500],[317,-277]],[[311,7],[910,-896],[-809,795]],[[763,-602],[-753,313],[-352,917]],[[668,619],[-474,-597],[-650,650]],[[-297,563],[-701,-987],[486,-902]],[[-461,-740],[-657,233],[-482,-328]],[[-446,-250],[-986,-458],[-629,520]],[[542,-49],[-327,-469],[257,-947]],[[121,-575],[-634,-143],[-184,521]],[[30,504],[455,-645],[-229,-945]],[[-12,-295],[377,764],[771,125]],[[-686,-133],[225,-25],[-376,-143]],[[-6,-46],[338,270],[-405,-872]],[[-623,-37],[582,467],[963,898]],[[-804,869],[-477,420],[-475,-303]],[[94,41],[-842,-193],[-768,720]],[[-656,-918],[415,645],[-357,460]],[[-47,-486],[-911,468],[-608,-686]],[[-158,251],[419,-394],[-655,-895]],[[272,-695],[979,508],[-358,959]],[[-776,650],[-918,-467],[-690,-534]],[[-85,-309],[-626,167],[-366,-429]],[[-880,-732],[-186,-924],[970,-875]],[[517,645],[-274,962],[-804,544]],[[721,402],[104,640],[478,-499]],[[198,684],[-134,-723],[-452,-905]],[[-245,745],[239,238],[-826,441]],[[-217,206],[-32,462],[-981,-895]],[[-51,989],[526,-173],[560,-676]],[[-480,-659],[-976,-580],[-727,466]],[[-996,-90],[-995,158],[-239,642]],[[302,288],[-194,-294],[17,924]],[[-943,969],[-326,114],[-500,103]],[[-619,163],[339,-880],[230,421]],[[-344,-601],[-795,557],[565,-779]],[[590,345],[-129,-202],[-125,-58]],[[-777,-195],[159,674],[775,411]],[[-939,312],[-665,810],[121,855]],[[-971,254],[712,815],[452,581]],[[442,-9],[327,-750],[61,757]],[[-342,869],[869,-160],[390,-772]],[[620,601],[565,-169],[-69,-183]],[[-25,924],[-817,964],[321,-970]],[[-64,-6],[-133,978],[825,-379]],[[601,436],[-24,98],[-115,940]],[[-97,502],[614,-574],[922,513]],[[-125,262],[-946,695],[99,-220]],[[429,-721],[719,-694],[197,-558]],[[326,689],[-70,-908],[-673,338]],[[-468,-856],[-902,-254],[-358,305]],[[-358,530],[542,355],[-253,-47]],[[-438,-74],[-362,963],[988,788]],[[137,717],[467,622],[319,-380]],[[-86,310],[-336,851],[918,-288]],[[721,395],[646,-53],[255,-425]],[[255,175],[912,84],[-209,878]],[[-632,-485],[-400,-357],[991,-608]],[[235,-559],[992,-297],[857,-591]],[[87,-71],[148,130],[647,578]],[[-290,-584],[-639,-788],[-21,592]],[[386,984],[625,-731],[-993,-336]],[[-538,634],[-209,-828],[-150,-774]],[[-754,-387],[607,-781],[976,-199]],[[412,-798],[-664,295],[709,-537]],[[-412,932],[-880,-232],[561,852]],[[-656,-358],[-198,-964],[-433,-848]],[[-762,-668],[-632,186],[-673,-11]],[[-876,237],[-282,-312],[-83,682]],[[403,73],[-57,-436],[-622,781]],[[-587,873],[798,976],[-39,329]],[[-369,-622],[553,-341],[817,794]],[[-108,-616],[920,-849],[-679,96]],[[290,-974],[234,239],[-284,-321]],[[-22,394],[-417,-419],[264,58]],[[-473,-551],[69,923],[591,-228]],[[-956,662],[-113,851],[-581,-794]],[[-258,-681],[413,-471],[-637,-817]],[[-866,926],[992,-653],[-7,794]],[[556,-350],[602,917],[831,-610]],[[188,245],[-906,361],[492,174]],[[-720,384],[-818,329],[638,-666]],[[-246,846],[890,-325],[-59,-850]],[[-118,-509],[620,-762],[-256,15]],[[-787,-536],[-452,-338],[-399,813]],[[458,560],[525,-311],[-608,-419]],[[494,-811],[-825,-127],[-812,894]],[[-801,890],[-629,-860],[574,925]],[[-709,-193],[-213,138],[-410,-403]],[[861,91],[708,-187],[5,-222]],[[789,646],[777,154],[90,-49]],[[-267,-830],[-114,531],[591,-698]],[[-126,-82],[881,-418],[82,652]],[[-894,130],[-726,-935],[393,-815]],[[-142,563],[654,638],[-712,-597]],[[-759,60],[-23,977],[100,-765]],[[-305,595],[-570,-809],[482,762]],[[-161,-267],[53,963],[998,-529]],[[-300,-57],[798,353],[703,486]],[[-990,696],[-764,699],[-565,719]],[[-232,-205],[566,571],[977,369]],[[740,865],[151,-817],[-204,-293]],[[94,445],[-768,229],[537,-406]],[[861,620],[37,-424],[-36,656]],[[390,-369],[952,733],[-464,569]],[[-482,-604],[959,554],[-705,-626]],[[-396,-615],[-991,108],[272,-723]],[[143,780],[535,142],[-917,-147]],[[138,-629],[-217,-908],[905,115]],[[915,103],[-852,64],[-468,-642]],[[570,734],[-785,-268],[-326,-759]],[[738,531],[-332,586],[-779,24]],[[870,440],[-217,473],[-383,415]],[[-296,-333],[-330,-142],[-924,950]],[[118,120],[-35,-245],[-211,-652]],[[61,634],[153,-243],[838,789]],[[726,-582],[210,105],[983,537]],[[-313,-323],[758,234],[29,848]],[[-847,-172],[-593,733],[-56,617]],[[54,255],[-512,156],[-575,675]],[[-873,-956],[-148,623],[95,200]],[[700,-370],[926,649],[-978,157]],[[-639,-202],[719,130],[747,222]],[[194,-33],[955,943],[505,114]],[[-226,-790],[28,-930],[827,783]],[[-392,-74],[-28,714],[218,-612]],[[209,626],[-888,-683],[-912,495]],[[487,751],[614,933],[631,445]],[[-348,-34],[-411,-106],[835,321]],[[-689,872],[-29,-800],[312,-542]],[[-52,566],[827,570],[-862,-77]],[[471,992],[309,-402],[389,912]],[[24,520],[-83,-51],[555,503]],[[-265,-317],[283,-970],[-472,690]],[[606,526],[137,71],[-651,150]],[[217,-518],[663,66],[-605,-331]],[[-562,232],[-76,-503],[205,-323]],[[842,-521],[546,285],[625,-186]],[[997,-927],[344,909],[-546,974]],[[-677,419],[81,121],[-705,771]],[[719,-379],[-944,-797],[784,-155]],[[-378,286],[-317,-797],[-111,964]],[[-288,-573],[784,80],[-532,-646]],[[-77,407],[-248,-797],[769,-816]],[[-24,-637],[287,-858],[-927,-333]],[[-902,37],[894,-823],[141,684]],[[125,467],[-177,-516],[686,399]],[[-321,-542],[641,-590],[527,-224]],[[-400,-712],[-876,-208],[632,-543]],[[-676,-429],[664,-242],[-269,922]],[[-608,-273],[-141,930],[687,380]],[[786,-12],[498,494],[310,326]],[[-739,-617],[606,-960],[804,188]],[[384,-368],[-243,-350],[-459,31]],[[-550,397],[320,-868],[328,-279]],[[969,-179],[853,864],[-110,514]],[[910,793],[302,-822],[-285,488]],[[-605,-128],[218,-283],[-17,-227]],[[16,324],[667,708],[750,3]],[[485,-813],[19,585],[71,930]],[[-218,816],[-687,-97],[-732,-360]],[[-497,-151],[376,-23],[3,315]],[[-412,-989],[-610,-813],[372,964]],[[-878,-280],[87,381],[-311,69]],[[-609,-90],[-731,-679],[150,585]],[[889,27],[-162,605],[75,-770]],[[448,617],[-988,0],[-103,-504]],[[-800,-537],[-69,627],[608,-668]],[[534,686],[-664,942],[830,920]],[[-238,775],[495,932],[-793,497]],[[-343,958],[-914,-514],[-691,651]],[[568,-136],[208,359],[728,28]],[[286,912],[-794,683],[556,-102]],[[-638,-629],[-484,445],[-64,-497]],[[58,505],[-801,-110],[872,632]],[[-390,777],[353,267],[976,369]],[[-993,515],[105,-133],[358,-572]],[[964,996],[355,-212],[-667,38]],[[-725,-614],[-35,365],[132,-196]],[[237,-536],[-416,-302],[312,477]],[[-664,574],[-210,224],[48,-925]],[[869,-261],[-256,-240],[-3,-698]],[[712,385],[32,-34],[916,-315]],[[895,-409],[-100,-346],[728,-624]],[[-806,327],[-450,889],[-781,-939]],[[-586,-403],[698,318],[-939,899]],[[557,-57],[-920,659],[333,-51]],[[-441,232],[-918,-205],[246,1]],[[783,167],[-797,-595],[245,-736]],[[-36,-531],[-486,-426],[-813,-160]],[[777,-843],[817,313],[-228,-572]],[[735,866],[-309,-564],[-81,190]],[[-413,645],[101,719],[-719,218]],[[-83,164],[767,796],[-430,-459]],[[122,779],[-15,-295],[-96,-892]],[[462,379],[70,548],[834,-312]],[[-630,-534],[124,187],[-737,114]],[[-299,-604],[318,-591],[936,826]],[[-879,218],[-642,-483],[-318,-866]],[[-691,62],[-658,761],[-895,-854]],[[-822,493],[687,569],[910,-202]],[[-223,784],[304,-5],[541,925]],[[-914,541],[737,-662],[-662,-195]],[[-622,615],[414,358],[881,-878]],[[339,745],[-268,-968],[-280,-227]],[[-364,855],[148,-709],[-827,472]],[[-890,-532],[-41,664],[-612,577]],[[-702,-859],[971,-722],[-660,-920]],[[-539,-605],[737,149],[973,-802]],[[800,42],[-448,-811],[152,511]],[[-933,377],[-110,-105],[-374,-937]],[[-766,152],[482,120],[-308,390]],[[-568,775],[-292,899],[732,890]],[[-177,-317],[-502,-259],[328,-511]],[[612,-696],[-574,-660],[132,31]],[[-119,563],[-805,-864],[179,-672]],[[425,-627],[183,-331],[839,318]],[[-711,-976],[-749,152],[-916,261]],[[181,-63],[497,211],[262,406]],[[-537,700],[-859,-765],[-928,77]],[[892,832],[231,-749],[-82,613]],[[816,216],[-642,-216],[-669,-912]],[[-6,624],[-937,-370],[-344,268]],[[737,-710],[-869,983],[-324,-274]],[[565,952],[-547,-158],[374,-444]],[[51,-683],[645,-845],[515,636]],[[-953,-631],[114,-377],[-764,-144]],[[-8,470],[-242,-399],[-675,-730]],[[-540,689],[-20,47],[-607,590]],[[-329,-710],[-779,942],[-388,979]],[[123,829],[674,122],[203,563]],[[46,782],[396,-33],[386,610]],[[872,-846],[-523,-122],[-55,-190]],[[388,-994],[-525,974],[127,596]],[[781,-680],[796,-34],[-959,-62]],[[-749,173],[200,-384],[-745,-446]],[[379,618],[136,-250],[-224,970]],[[-58,240],[-921,-760],[-901,-626]],[[366,-185],[565,-100],[515,688]],[[489,999],[-893,-263],[-637,816]],[[838,-496],[-316,-513],[419,479]],[[107,676],[-15,882],[98,-397]],[[-999,941],[-903,-424],[670,-325]],[[171,-979],[835,178],[169,-984]],[[-609,-607],[378,-681],[184,402]],[[-316,903],[-575,-800],[224,983]],[[591,-18],[-460,551],[-167,918]],[[-756,405],[-117,441],[163,-320]],[[456,24],[6,881],[-836,-539]],[[-489,-585],[915,651],[-892,-382]],[[-177,-122],[73,-711],[-386,591]],[[181,724],[530,686],[-131,241]],[[737,288],[886,216],[233,33]],[[-548,-386],[-749,-153],[-85,-982]],[[-835,227],[904,160],[-99,25]],[[-9,-42],[-162,728],[840,-963]],[[217,-763],[870,771],[47,-846]],[[-595,808],[-491,556],[337,-900]],[[-134,281],[-724,441],[-134,708]],[[-789,-508],[651,-962],[661,315]],[[-839,-923],[339,402],[41,-487]],[[300,-790],[48,703],[-398,-811]],[[955,-51],[462,-685],[960,-717]],[[910,-880],[592,-255],[-51,-776]],[[-885,169],[-793,368],[-565,458]],[[-905,940],[-492,-630],[-535,-988]],[[245,797],[763,869],[-82,550]],[[-310,38],[-933,-367],[-650,824]],[[-95,32],[-83,337],[226,990]],[[-218,-975],[-191,-208],[-785,-293]],[[-672,-953],[517,-901],[-247,465]],[[681,-148],[261,-857],[544,-923]],[[640,341],[446,-618],[195,769]],[[384,398],[-846,365],[671,815]],[[578,576],[-911,907],[762,-859]],[[548,-428],[144,-630],[-759,-146]],[[710,-73],[-700,983],[-97,-889]],[[-46,898],[-973,-362],[-817,-717]],[[151,-81],[-125,-900],[-478,-154]],[[483,615],[-537,-932],[181,-68]],[[786,-223],[518,25],[-306,-12]],[[-422,268],[-809,-683],[635,468]],[[983,-734],[-694,-608],[-110,4]],[[-786,-196],[749,-354],[137,-8]],[[-181,36],[668,-200],[691,-973]],[[-629,-838],[692,-736],[437,-871]],[[-208,-536],[-159,-596],[8,197]],[[-3,370],[-686,170],[913,-376]],[[44,-998],[-149,-993],[-200,512]],[[-519,136],[859,497],[536,434]],[[77,-985],[972,-340],[-705,-837]],[[-381,947],[250,360],[344,322]],[[-26,131],[699,750],[707,384]],[[-914,655],[299,193],[406,955]],[[-883,-921],[220,595],[-546,794]],[[-599,577],[-569,-404],[-704,489]],[[-594,-963],[-624,-460],[880,-760]],[[-603,88],[-99,681],[55,-328]],[[976,472],[139,-453],[-531,-860]],[[192,-290],[513,-89],[666,432]],[[417,487],[575,293],[567,-668]],[[655,711],[-162,449],[-980,972]],[[-505,664],[-685,-239],[603,-592]],[[-625,-802],[-67,996],[384,-636]],[[365,-593],[522,-666],[-200,-431]],[[-868,708],[560,-860],[-630,-355]],[[-702,785],[-637,-611],[-597,960]],[[-137,-696],[-93,-803],[408,406]],[[891,-123],[-26,-609],[-610,518]],[[133,-832],[-198,555],[708,-110]],[[791,617],[-69,487],[696,315]],[[-900,694],[-565,517],[-269,-416]],[[914,135],[-781,600],[-71,-600]],[[991,-915],[-422,-351],[-837,313]],[[-840,-398],[-302,21],[590,146]],[[62,-558],[-702,-384],[-625,831]],[[-363,-426],[-924,-496],[792,-908]],[[73,361],[-817,-466],[400,922]],[[-626,-164],[-626,860],[-524,286]],[[255,26],[-944,809],[-606,986]],[[-457,-256],[-103,50],[-867,-871]],[[-223,803],[196,480],[612,136]],[[-820,-928],[700,780],[-977,721]],[[717,332],[53,-933],[-128,793]],[[-602,-648],[562,593],[890,702]],[[-469,-875],[-527,911],[-475,-222]],[[110,-281],[-552,-536],[-816,596]],[[-981,654],[413,-981],[-75,-95]],[[-754,-742],[-515,894],[-220,-344]],[[795,-52],[156,408],[-603,76]],[[474,-157],[423,-499],[-807,-791]],[[260,688],[40,-52],[702,-122]],[[-584,-517],[-390,-881],[302,-504]],[[61,797],[665,708],[14,668]],[[366,166],[458,-614],[564,-983]],[[72,539],[-378,796],[381,-824]],[[-485,201],[-588,842],[736,379]],[[-149,-894],[-298,705],[-303,-406]],[[660,-935],[-580,521],[93,633]],[[-382,-282],[-375,-841],[-828,171]],[[-567,743],[-100,43],[144,122]],[[-281,-786],[-749,-551],[296,304]],[[11,-426],[-792,212],[857,-175]],[[594,143],[-699,289],[315,137]],[[341,596],[-390,107],[-631,-804]],[[-751,-636],[-424,-854],[193,651]],[[-145,384],[749,675],[-786,517]],[[224,-865],[-323,96],[-916,258]],[[-309,403],[-388,826],[35,-270]],[[-942,709],[222,158],[-699,-103]],[[-589,842],[-997,29],[-195,-210]],[[264,426],[566,145],[-217,623]],[[217,965],[507,-601],[-453,507]],[[-206,307],[-982,4],[64,-292]],[[676,-49],[-38,-701],[550,883]],[[5,-850],[-438,659],[745,-773]],[[933,238],[-574,-570],[91,-33]],[[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]],[[848,462],[100,-381],[135,242]],[[330,718],[-24,-190],[860,-78]],[[479,458],[941,108],[-866,-653]],[[212,980],[962,-962],[115,841]],[[-827,-474],[-206,881],[323,765]],[[506,-45],[-30,-293],[524,-133]],[[832,-173],[547,-852],[-561,-842]],[[-397,-661],[-708,819],[-545,-228]],[[521,51],[-489,852],[36,-258]],[[227,-164],[189,465],[-987,-882]],[[-73,-997],[641,-995],[449,-615]],[[151,-995],[-638,415],[257,-400]],[[-663,-297],[-748,537],[-734,198]],[[-585,-401],[-81,-782],[-80,-105]],[[99,-21],[238,-365],[-704,-368]],[[45,416],[849,-211],[-371,-1]],[[-404,-443],[795,-406],[36,-933]],[[272,-363],[981,-491],[-380,77]],[[713,-342],[-366,-849],[643,911]],[[-748,671],[-537,813],[961,-200]],[[-194,-909],[703,-662],[-601,188]],[[281,500],[724,286],[267,197]],[[-832,847],[-595,820],[-316,637]],[[520,521],[-54,261],[923,-10]],[[4,-808],[-682,-258],[441,-695]],[[-793,-107],[-969,905],[798,446]],[[-108,-739],[-590,69],[-855,-365]],[[380,-623],[-930,817],[468,713]],[[759,-849],[-236,433],[-723,-931]],[[95,-320],[-686,124],[-69,-329]],[[-655,518],[-210,-523],[284,-866]],[[144,303],[639,70],[-171,269]],[[173,-333],[947,-304],[55,40]],[[274,878],[-482,-888],[-835,375]],[[-982,-854],[-36,-218],[-114,-230]],[[905,-979],[488,-485],[-479,114]],[[877,-157],[553,-530],[-47,-321]],[[350,664],[-881,442],[-220,-284]],[[434,-423],[-365,878],[-726,584]],[[535,909],[-517,-447],[-660,-141]],[[-966,191],[50,353],[182,-642]],[[-785,-634],[123,-907],[-162,511]],[[146,-850],[-214,814],[-704,25]],[[692,1],[521,492],[-637,274]],[[-662,-372],[-313,597],[983,-647]],[[-962,-526],[68,-549],[-819,231]],[[740,-890],[-318,797],[-666,948]],[[-190,-12],[-468,-455],[948,284]],[[16,478],[-506,-888],[628,-154]],[[272,630],[-976,308],[433,3]],[[-169,-391],[-132,189],[302,-388]],[[109,-784],[474,-167],[-265,-31]],[[-177,-532],[283,464],[421,-73]],[[650,635],[592,-138],[1,-387]],[[-932,703],[-827,-492],[-355,686]],[[586,-311],[340,-618],[645,-434]],[[-951,736],[647,-127],[-303,590]],[[188,444],[903,718],[-931,500]],[[-872,-642],[-296,-571],[337,241]],[[23,65],[152,125],[880,470]],[[512,823],[-42,217],[823,-263]],[[180,-831],[-380,886],[607,762]],[[722,443],[-149,-216],[-115,759]],[[-19,660],[-36,901],[923,231]],[[562,-322],[-626,-968],[194,-825]],[[204,-920],[938,784],[362,150]],[[-410,-266],[-715,559],[-672,124]],[[-198,446],[-140,454],[-461,-447]],[[83,-346],[830,-493],[-759,-382]],[[-881,601],[581,234],[-134,-925]],[[-494,914],[-42,899],[235,629]],[[-390,50],[956,437],[774,-700]],[[-514,514],[44,-512],[-576,-313]],[[63,-688],[808,-534],[-570,-399]],[[-726,572],[-896,102],[-294,-28]],[[-688,757],[401,406],[955,-511]],[[-283,423],[-485,480],[-767,908]],[[-541,952],[-594,116],[-854,451]],[[-273,-796],[236,625],[-626,257]],[[-407,-493],[373,826],[-309,297]],[[-750,955],[-476,641],[-809,713]],[[8,415],[695,226],[-111,2]],[[733,209],[152,-920],[401,995]],[[921,-103],[-919,66],[871,-947]],[[-907,89],[-869,-214],[851,-559]],[[-307,748],[524,-755],[314,-711]],[[188,897],[-72,-763],[482,103]],[[545,-821],[-232,-596],[-334,-754]],[[-217,-788],[-820,388],[-200,-662]],[[779,160],[-723,-975],[-142,-998]],[[-978,-519],[-78,-981],[842,904]],[[-504,-736],[-295,21],[-472,-482]],[[391,115],[-705,574],[652,-446]],[[813,-988],[865,830],[-263,487]],[[194,80],[774,-493],[-761,-872]],[[-415,-284],[-803,7],[-810,670]],[[-484,-4],[881,-872],[55,-852]],[[-379,822],[-266,324],[-48,748]],[[-304,-278],[406,-60],[959,-89]],[[404,756],[577,-643],[-332,658]],[[291,460],[125,491],[-312,83]],[[311,-734],[-141,582],[282,-557]],[[-450,-661],[-981,710],[-177,794]],[[328,264],[-787,971],[-743,-407]],[[-622,518],[993,-241],[-738,229]],[[273,-826],[-254,-917],[-710,-111]],[[809,770],[96,368],[-818,725]],[[-488,773],[502,-342],[534,745]],[[-28,-414],[236,-315],[-484,363]],[[179,-466],[-566,713],[-683,56]],[[560,-240],[-597,619],[916,-940]],[[893,473],[872,-868],[-642,-461]],[[799,489],[383,-321],[-776,-833]],[[980,490],[-508,764],[-512,-426]],[[917,961],[-16,-675],[440,559]],[[-812,212],[784,-987],[-132,554]],[[-886,454],[747,806],[190,231]],[[910,341],[21,-66],[708,725]],[[29,929],[-831,-494],[-303,389]],[[-103,492],[-271,-174],[-515,529]],[[-292,119],[419,788],[247,-951]],[[483,543],[-347,-673],[664,-549]],[[-926,-871],[-437,337],[162,-877]],[[299,472],[-771,5],[-88,-643]],[[-103,525],[-725,-998],[264,22]],[[-505,708],[550,-545],[823,347]],[[-738,931],[59,147],[-156,-259]],[[456,968],[-162,889],[132,-911]],[[535,120],[968,-517],[-864,-541]],[[24,-395],[-593,-766],[-565,-332]],[[834,611],[825,-576],[280,629]],[[211,-548],[140,-278],[-592,929]],[[-999,-240],[-63,-78],[793,573]],[[-573,160],[450,987],[529,322]],[[63,353],[315,-187],[-461,577]],[[189,-950],[-247,656],[289,241]],[[209,-297],[397,664],[-805,484]],[[-655,452],[435,-556],[917,874]],[[253,-756],[262,-888],[-778,-214]],[[793,-451],[323,-251],[-401,-458]],[[-396,619],[-651,-287],[-668,-781]],[[698,720],[-349,742],[-807,546]],[[738,280],[680,279],[-540,858]],[[-789,387],[530,-36],[-551,-491]],[[162,579],[-427,-272],[228,710]],[[689,356],[917,-580],[729,217]],[[-115,-638],[866,424],[-82,-194]],[[411,-338],[-917,172],[227,-29]],[[-612,63],[630,-976],[-64,-204]],[[-200,911],[583,-571],[682,-579]],[[91,298],[396,-183],[788,-955]],[[141,-873],[-277,149],[-396,916]],[[321,958],[-136,573],[541,-777]],[[797,-909],[-469,-877],[988,-653]],[[784,-198],[129,883],[-203,399]],[[-68,-810],[223,-423],[-467,-512]],[[531,-445],[-603,-997],[-841,641]],[[-274,-242],[174,261],[-636,-158]],[[-574,494],[-796,-798],[-798,99]],[[95,-82],[-613,-954],[-753,986]],[[-883,-448],[-864,-401],[938,-392]],[[913,930],[-542,-988],[310,410]],[[506,-99],[43,512],[790,-222]],[[724,31],[49,-950],[260,-134]],[[-287,-947],[-234,-700],[56,588]],[[-33,782],[-144,948],[105,-791]],[[548,-546],[-652,-293],[881,-520]],[[691,-91],[76,991],[-631,742]],[[-520,-429],[-244,-296],[724,-48]],[[778,646],[377,50],[-188,56]],[[-895,-507],[-898,-165],[-674,652]],[[654,584],[-634,177],[-349,-620]],[[114,-980],[355,62],[182,975]],[[516,9],[-442,-298],[274,-579]],[[-238,262],[-431,-896],[506,-850]],[[47,748],[846,821],[-537,-293]],[[839,726],[593,285],[-297,840]],[[634,-486],[468,-304],[-887,-567]],[[-864,914],[296,-124],[335,233]],[[88,-253],[-523,-956],[-554,803]],[[-587,417],[281,-62],[-409,-363]],[[-136,-39],[-292,-768],[-264,876]],[[-127,506],[-891,-331],[-744,-430]],[[778,584],[-750,-129],[-479,-94]],[[-876,-771],[-987,-757],[180,-641]],[[-777,-694],[411,-87],[329,190]],[[-347,-999],[-882,158],[-754,232]],[[-105,918],[188,237],[-110,-591]],[[-209,703],[-838,77],[838,909]],[[-995,-339],[-762,750],[860,472]],[[185,271],[-289,173],[811,-300]],[[2,65],[-656,-22],[36,-139]],[[765,-210],[883,974],[961,-905]],[[-212,295],[-615,-840],[77,474]],[[211,-910],[-440,703],[-11,859]],[[-559,-4],[-196,841],[-277,969]],[[-73,-159],[-887,126],[978,-371]],[[-569,633],[-423,-33],[512,-393]],[[503,143],[-383,-109],[-649,-998]],[[-663,339],[-317,-523],[-2,596]],[[690,-380],[570,378],[-652,132]],[[72,-744],[-930,399],[-525,935]],[[865,-983],[115,37],[995,826]],[[594,-621],[-872,443],[188,-241]],[[-1000,291],[754,234],[-435,-869]],[[-868,901],[654,-907],[59,181]],[[-868,-793],[-431,596],[-446,-564]],[[900,-944],[-680,-796],[902,-366]],[[331,430],[943,853],[-851,-942]],[[315,-538],[-354,-909],[139,721]],[[170,-884],[-225,-818],[-808,-657]],[[-279,-34],[-533,-871],[-972,552]],[[691,-986],[-800,-950],[654,-747]],[[603,988],[899,841],[-630,591]],[[876,-949],[809,562],[602,-536]],[[-693,363],[-189,495],[738,-1000]],[[-383,431],[-633,297],[665,959]],[[-740,686],[-207,-803],[188,-520]],[[-820,226],[31,-339],[10,121]],[[-312,-844],[624,-516],[483,621]],[[-822,-529],[69,-278],[800,328]],[[834,-82],[-759,420],[811,-264]],[[-960,-240],[-921,561],[173,46]],[[-324,909],[-790,-814],[-2,-785]],[[976,334],[-290,-891],[704,-581]],[[150,-798],[689,-823],[237,-639]],[[-551,-320],[876,-502],[-622,-628]],[[-136,845],[904,595],[-702,-261]],[[-857,-377],[-522,-101],[-943,-805]],[[-682,-787],[-888,-459],[-752,-985]],[[-571,-81],[623,-133],[447,643]],[[-375,-158],[72,-387],[-324,-696]],[[-660,-650],[340,188],[569,526]],[[727,-218],[16,-7],[-595,-988]],[[-966,-684],[802,-783],[-272,-194]],[[115,-566],[-888,47],[712,180]],[[-237,-69],[45,-272],[981,-812]],[[48,897],[439,417],[50,325]],[[348,616],[180,254],[104,-784]],[[-730,811],[-548,612],[-736,790]],[[138,-810],[123,930],[65,865]],[[-768,-299],[-49,-895],[-692,-418]],[[487,-531],[802,-159],[-12,634]],[[808,-179],[552,-73],[470,717]],[[720,-644],[886,-141],[625,144]],[[-485,-505],[-347,-244],[-916,66]],[[600,-565],[995,-5],[324,227]],[[-771,-35],[904,-482],[753,-303]],[[-701,65],[426,-763],[-504,-479]],[[409,733],[-823,475],[64,718]],[[865,975],[368,893],[-413,-433]],[[812,-597],[-970,819],[813,624]],[[193,-642],[-381,-560],[545,398]],[[711,28],[-316,771],[717,-865]],[[-509,462],[809,-136],[786,635]],[[618,-49],[484,169],[635,547]],[[-747,685],[-882,-496],[-332,82]],[[-501,-851],[870,563],[290,570]],[[-279,-829],[-509,397],[457,816]],[[-508,80],[850,-188],[483,-326]],[[860,-100],[360,119],[-205,787]],[[-870,21],[-39,-827],[-185,932]],[[826,284],[-136,-866],[-330,-97]],[[-944,-82],[745,899],[-97,365]],[[929,262],[564,632],[-115,632]],[[244,-276],[713,330],[-897,-214]],[[-890,-109],[664,876],[-974,-907]],[[716,249],[816,489],[723,141]],[[-96,-560],[-272,45],[-70,645]],[[762,-503],[414,-828],[-254,-646]],[[909,-13],[903,-422],[-344,-10]],[[658,-486],[743,545],[50,674]],[[-241,507],[-367,18],[-48,-241]],[[886,-268],[884,-762],[120,-486]],[[-412,-528],[879,-647],[223,-393]],[[851,810],[234,937],[-726,797]],[[-999,942],[839,-134],[-996,-189]],[[100,979],[-527,-521],[378,800]],[[544,-844],[-832,-530],[-77,-641]],[[43,889],[31,442],[-934,-503]],[[-330,-370],[-309,-439],[173,547]],[[169,945],[62,-753],[-542,-597]],[[208,751],[-372,-647],[-520,70]],[[765,-840],[907,-257],[379,918]],[[334,-135],[-689,730],[-427,618]],[[137,-508],[66,-695],[78,169]],[[-962,-123],[400,-417],[151,969]],[[328,689],[666,427],[-555,-642]],[[-907,343],[605,-341],[-647,582]],[[-667,-363],[-571,818],[-265,-399]],[[525,-938],[904,898],[725,692]],[[-176,-802],[-858,-9],[780,275]],[[580,170],[-740,287],[691,-97]],[[365,557],[-375,361],[-288,859]],[[193,737],[842,-808],[520,282]],[[-871,65],[-799,836],[179,-720]],[[958,-144],[744,-789],[797,-48]],[[122,582],[662,912],[68,757]],[[595,241],[-801,513],[388,186]],[[-103,-677],[-259,-731],[-281,-857]],[[921,319],[-696,683],[-88,-997]],[[775,200],[78,858],[648,768]],[[316,821],[-763,68],[-290,-741]],[[564,664],[691,504],[760,787]],[[694,-119],[973,-385],[309,-760]],[[777,-947],[-57,990],[74,19]],[[971,626],[-496,-781],[-602,-239]],[[-651,433],[11,-339],[939,294]],[[-965,-728],[560,569],[-708,-247]] ]; --seed-contents-- ```js function triangleContainment(triangles) { return true; } const testTriangles1 = [ [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692\nconst area = triangleArea(triangle);\nconst s = getS(area, point, triangle);\nconst t = getT(area, point, triangle);\nif (s > 0 && t > 0 && 1 - s - t > 0) {\nreturn true;\n}\nreturn false;\n}\nfunction getS(area, point, triangle) {\nreturn (\n(1 / (2 * area)) *\n(triangle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 16243,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "efc038d226c840d9d39e74be237c3f1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "true; } const testTriangles1 = [ [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleA",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 1118,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "d4f4ac5395cfe153db9f55d7e106b495",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "true; } const testTriangles1 = [ [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleAy * triangle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 1120,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "286e52d204a18da9296ddf817605bed1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const testTriangles1 = [ [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleAy * triangleC",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 1118,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "1827ef502d75df6051c69d979602e502",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const testTriangles1 = [ [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleAy * triangleCx -\ntriangle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 1120,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "978ab15b6f7fdfcb2f0b8fcbb69ad2c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= [ [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleAy * triangleCx - triangleA",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 1117,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "7eea1933f84d8f37622311514fe49084",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= [ [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleAy * triangleCx - triangleAx * triangle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 1119,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "2c785f838525275ae6b775d6a7b20262",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleAy * triangleCx - triangleAx * triangleC",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 1118,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "e9c8c8a58f1eace702977d1ded0a2725",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]] ]; triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleAy * triangleCx - triangleAx * triangleCy +\npoint",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 1120,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "6317deaf9aa7917fcdd8787262faa404",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "triangleContainment(testTriangles1); ``` --solutions-- ```js function triangleContainment(triangles) { function isInTriangle(triangle, point) { // Based on https://stackoverflowcom/a/14382692 const area = triangleArea(triangle); const s = getS(area, point, triangle); const t = getT(area, point, triangle); if (s > 0 && t > 0 && 1 - s - t > 0) { return true; } return false; } function getS(area, point, triangle) { return ( (1 / (2 * area)) * (triangleAy * triangleCx - triangleAx * triangleCy + pointx * (triangle C y - triangle A y) +\npoint y * (triangle A x - triangle C x))\n);\n}\nfunction getT(area, point, triangle) {\nreturn (\n(1 / (2 * area)) *\n(triangle A x * triangle B y -\ntriangle A y * triangle B x +\npoint x * (triangle A y - triangle B y) +\npoint y * (triangle B x - triangle A x))\n);\n}\nfunction triangleArea(triangle) {\nreturn (\n0 5 *\n(-triangle B y * triangle C x +\ntriangle A y * (-triangle B x + triangle C x) +\ntriangle A x * (triangle B y - triangle C y) +\ntriangle B x * triangle C y)\n);\n}\nfunction parseTriangle(triangle) {\nconst points = [];\nfor (let i = 0; i < triangle length; i++) {\nconst [coordinateX, coordinateY] = triangle[i];\npoints push({ x: coordinateX, y: coordinateY });\n}\nconst [pointA, pointB, pointC] = points;\nreturn {\nA: pointA,\nB: pointB,\nC: pointC\n};\n}\nconst origin = { x: 0, y: 0 };\nlet trianglesInside = 0;\nfor (let i = 0; i < triangles length; i++) {\nconst triangle = parseTriangle(triangles[i]);\nif (isInTriangle(triangle, origin)) {\ntrianglesInside++;\n}\n}\nreturn trianglesInside;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 42630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "6c94ea33c2b8a935991048dcff728d75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-129-repunit-divisibility.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ef1000cf542c50ff01\ntitle: 'Problem 129: Repunit divisibility'\nchallengeType: 1\nforumTopicId: 301756\ndashedName: problem-129-repunit-divisibility\n--description--\nA number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.\nGiven that $n$ is a positive integer and $GCD(n, 10) = 1$, it can be shown that there always exists a value, $k$, for which $R(k)$ is divisible by $n$, and let $A(n)$ be the least such value of $k$; for example, $A(7) = 6$ and $A(41) = 5$.\nThe least value of $n$ for which $A(n)$ first exceeds ten is 17.\nFind the least value of $n$ for which $A(n)$ first exceeds one-million.\n--hints--\nrepunitDivisibility() should return 1000023.\njs\nassert.strictEqual(repunitDivisibility(), 1000023);\n--seed--\n--seed-contents--\n```js\nfunction repunitDivisibility() {\nreturn true;\n}\nrepunitDivisibility();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1000,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-129-repunit-divisibility.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "04b9546e2999d67bcf5968dcbfe3906e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-130-composites-with-prime-repunit-property.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ee1000cf542c50ff00\ntitle: 'Problem 130: Composites with prime repunit property'\nchallengeType: 1\nforumTopicId: 301758\ndashedName: problem-130-composites-with-prime-repunit-property\n--description--\nA number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.\nGiven that $n$ is a positive integer and $GCD(n, 10) = 1$, it can be shown that there always exists a value, $k$, for which $R(k)$ is divisible by $n$, and let $A(n)$ be the least such value of $k$; for example, $A(7) = 6$ and $A(41) = 5$.\nYou are given that for all primes, $p > 5$, that $p − 1$ is divisible by $A(p)$. For example, when $p = 41, A(41) = 5$, and 40 is divisible by 5.\nHowever, there are rare composite values for which this is also true; the first five examples being 91, 259, 451, 481, and 703.\nFind the sum of the first twenty-five composite values of $n$ for which $GCD(n, 10) = 1$ and $n − 1$ is divisible by $A(n)$.\n--hints--\ncompositeRepunit() should return 149253.\njs\nassert.strictEqual(compositeRepunit(), 149253);\n--seed--\n--seed-contents--\n```js\nfunction compositeRepunit() {\nreturn true;\n}\ncompositeRepunit();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1289,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-130-composites-with-prime-repunit-property.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e585f4d1f1a6daaa5264a279bfc586d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-132-large-repunit-factors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f11000cf542c50ff03\ntitle: 'Problem 132: Large repunit factors'\nchallengeType: 1\nforumTopicId: 301760\ndashedName: problem-132-large-repunit-factors\n--description--\nA number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$.\nFor example, $R(10) = 1111111111 = 11 × 41 × 271 × 9091$, and the sum of these prime factors is 9414.\nFind the sum of the first forty prime factors of $R({10}^9)$.\n--hints--\nlargeRepunitFactors() should return 843296.\njs\nassert.strictEqual(largeRepunitFactors(), 843296);\n--seed--\n--seed-contents--\n```js\nfunction largeRepunitFactors() {\nreturn true;\n}\nlargeRepunitFactors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-132-large-repunit-factors.md",
      "source_type": "git_repo"
    },
    "token_count": 215,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ec136ff84eb908f1f429b730bb846909",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-131-prime-cube-partnership.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ef1000cf542c50ff02\ntitle: 'Problem 131: Prime cube partnership'\nchallengeType: 1\nforumTopicId: 301759\ndashedName: problem-131-prime-cube-partnership\n--description--\nThere are some prime values, $p$, for which there exists a positive integer, $n$, such that the expression $n^3 + n^{2}p$ is a perfect cube.\nFor example, when $p = 19,\\ 8^3 + 8^2 × 19 = {12}^3$.\nWhat is perhaps most surprising is that the value of $n$ is unique for each prime with this property, and there are only four such primes below one hundred.\nHow many primes below one million have this remarkable property?\n--hints--\nprimeCubePartnership() should return 173.\njs\nassert.strictEqual(primeCubePartnership(), 173);\n--seed--\n--seed-contents--\n```js\nfunction primeCubePartnership() {\nreturn true;\n}\nprimeCubePartnership();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 900,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-131-prime-cube-partnership.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8590585c96150d146e8e77c45ca06f7f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-133-repunit-nonfactors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f21000cf542c50ff04\ntitle: 'Problem 133: Repunit nonfactors'\nchallengeType: 1\nforumTopicId: 301761\ndashedName: problem-133-repunit-nonfactors\n--description--\nA number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.\nLet us consider repunits of the form $R({10}^n)$.\nAlthough $R(10)$, $R(100)$, or $R(1000)$ are not divisible by 17, $R(10000)$ is divisible by 17. Yet there is no value of n for which $R({10}^n)$ will divide by 19. Remarkably, 11, 17, 41, and 73 are the only four primes below one-hundred that can be a factor of $R({10}^n)$.\nFind the sum of all the primes below one-hundred thousand that will never be a factor of $R({10}^n)$.\n--hints--\nrepunitNonfactors() should return 453647705.\njs\nassert.strictEqual(repunitNonfactors(), 453647705);\n--seed--\n--seed-contents--\n```js\nfunction repunitNonfactors() {\nreturn true;\n}\nrepunitNonfactors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1043,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-133-repunit-nonfactors.md",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b6b0e7f187ac5004de56e475fc89ab06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-135-same-differences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f31000cf542c50ff06\ntitle: 'Problem 135: Same differences'\nchallengeType: 1\nforumTopicId: 301763\ndashedName: problem-135-same-differences\n--description--\nGiven the positive integers, $x$, $y$, and $z$, are consecutive terms of an arithmetic progression, the least value of the positive integer, $n$, for which the equation, $x^2 − y^2 − z^2 = n$, has exactly two solutions is $n = 27$:\n$$34^2 − 27^2 − 20^2 = 12^2 − 9^2 − 6^2 = 27$$\nIt turns out that $n = 1155$ is the least value which has exactly ten solutions.\nHow many values of $n$ less than one million have exactly ten distinct solutions?\n--hints--\nsameDifferences() should return 4989.\njs\nassert.strictEqual(sameDifferences(), 4989);\n--seed--\n--seed-contents--\n```js\nfunction sameDifferences() {\nreturn true;\n}\nsameDifferences();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-135-same-differences.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cf8c687d48a3d9ebfc7ce73322a64b57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-136-singleton-difference.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f51000cf542c50ff07\ntitle: 'Problem 136: Singleton difference'\nchallengeType: 1\nforumTopicId: 301764\ndashedName: problem-136-singleton-difference\n--description--\nThe positive integers, $x$, $y$, and $z$, are consecutive terms of an arithmetic progression. Given that $n$ is a positive integer, the equation, $x^2 − y^2 − z^2 = n$, has exactly one solution when $n = 20$:\n$$13^2 − 10^2 − 7^2 = 20$$\nIn fact, there are twenty-five values of $n$ below one hundred for which the equation has a unique solution.\nHow many values of $n$ less than fifty million have exactly one solution?\n--hints--\nsingletonDifference() should return 2544559.\njs\nassert.strictEqual(singletonDifference(), 2544559);\n--seed--\n--seed-contents--\n```js\nfunction singletonDifference() {\nreturn true;\n}\nsingletonDifference();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-136-singleton-difference.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff79efceff66c24acf91ae53fc18afbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-134-prime-pair-connection.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f21000cf542c50ff05\ntitle: 'Problem 134: Prime pair connection'\nchallengeType: 1\nforumTopicId: 301762\ndashedName: problem-134-prime-pair-connection\n--description--\nConsider the consecutive primes $p_1 = 19$ and $p_2 = 23$. It can be verified that 1219 is the smallest number such that the last digits are formed by $p_1$ whilst also being divisible by $p_2$.\nIn fact, with the exception of $p_1 = 3$ and $p_2 = 5$, for every pair of consecutive primes, $p_2 > p_1$, there exist values of $n$ for which the last digits are formed by $p_1$ and $n$ is divisible by $p_2$. Let $S$ be the smallest of these values of $n$.\nFind $\\sum{S}$ for every pair of consecutive primes with $5 ≤ p_1 ≤ 1000000$.\n--hints--\nprimePairConnection() should return 18613426663617120.\njs\nassert.strictEqual(primePairConnection(), 18613426663617120);\n--seed--\n--seed-contents--\n```js\nfunction primePairConnection() {\nreturn true;\n}\nprimePairConnection();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1037,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-134-prime-pair-connection.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f0153e4bedbd4687ead870c499364e4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-138-special-isosceles-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f61000cf542c50ff09\ntitle: 'Problem 138: Special isosceles triangles'\nchallengeType: 1\nforumTopicId: 301766\ndashedName: problem-138-special-isosceles-triangles\n--description--\nConsider the isosceles triangle with base length, $b = 16$, and legs, $L = 17$.\nBy using the Pythagorean theorem, it can be seen that the height of the triangle, $h = \\sqrt{{17}^2 − 8^2} = 15$, which is one less than the base length.\nWith $b = 272$ and $L = 305$, we get $h = 273$, which is one more than the base length, and this is the second smallest isosceles triangle with the property that $h = b ± 1$.\nFind $\\sum{L}$ for the twelve smallest isosceles triangles for which $h = b ± 1$ and $b$, $L$ are positive integers.\n--hints--\nisoscelesTriangles() should return 1118049290473932.\njs\nassert.strictEqual(isoscelesTriangles(), 1118049290473932);\n--seed--\n--seed-contents--\n```js\nfunction isoscelesTriangles() {\nreturn true;\n}\nisoscelesTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1465,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-138-special-isosceles-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "02f5281ffd66742d4a64fdb3c67b1657",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-128-hexagonal-tile-differences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ec1000cf542c50feff\ntitle: 'Problem 128: Hexagonal tile differences'\nchallengeType: 1\nforumTopicId: 301755\ndashedName: problem-128-hexagonal-tile-differences\n--description--\nA hexagonal tile with number 1 is surrounded by a ring of six hexagonal tiles, starting at \"12 o'clock\" and numbering the tiles 2 to 7 in an anti-clockwise direction New rings are added in the same fashion, with the next rings being numbered 8 to 19, 20 to 37, 38 to 61, and so on The diagram below shows the first three rings By finding the difference between tile $n$ and each of its six neighbors we shall define $PD(n)$ to be the number of those differences which are prime For example, working clockwise around tile 8 the differences are 12, 29, 11, 6, 1, and 13 So $PD(8) = 3$ In the same way, the differences around tile 17 are 1, 17, 16, 1, 11, and 10, hence $PD(17) = 2$ It can be shown that the maximum value of $PD(n)$ is $3$ If all of the tiles for which $PD(n) = 3$ are listed in ascending order to form a sequence, the 10th tile would be 271 Find the 2000th tile in this sequence --hints--\nhexagonalTile(10) should return 271 js\nassert strictEqual(hexagonalTile(10), 271);\nhexagonalTile(2000) should return 14516824220 js\nassert strictEqual(hexagonalTile(2000), 14516824220);\n--seed--\n--seed-contents--\n```js\nfunction hexagonalTile(tileIndex) {\nreturn true;\n}\nhexagonalTile(10);\n```\n--solutions--\n```js\nclass PrimeSeive {\nconstructor(num) {\nconst seive = Array(Math floor((num - 1) / 2)) fill(true);\nconst upper = Math floor((num - 1) / 2);\nconst sqrtUpper = Math floor((Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3213,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-128-hexagonal-tile-differences.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "efc3dad8fadf81e26a3886a6e0ce0786",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-128-hexagonal-tile-differences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to form a sequence, the 10th tile would be 271 Find the 2000th tile in this sequence --hints-- hexagonalTile(10) should return 271 js assert strictEqual(hexagonalTile(10), 271); hexagonalTile(2000) should return 14516824220 js assert strictEqual(hexagonalTile(2000), 14516824220); --seed-- --seed-contents-- ```js function hexagonalTile(tileIndex) { return true; } hexagonalTile(10); ``` --solutions-- ```js class PrimeSeive { constructor(num) { const seive = Array(Math floor((num - 1) / 2)) fill(true); const upper = Math floor((num - 1) / 2); const sqrtUpper = Math floor((Mathsqrt(num) - 1) / 2);\nfor (let i = 0; i <= sqrtUpper; i++) {\nif (seive[i]) {\n// Mark value in seive array\nconst prime = 2 * i + 3;\n// Mark all multiples of this number as false (not prime)\nconst primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\nfor (let j = primeSquaredIndex; j < upper; j += prime) {\nseive[j] = false;\n}\n}\n}\nthis _seive = seive;\n}\nisPrime(num) {\nreturn num === 2 true\n: num % 2 === 0 false\n: this isOddPrime(num);\n}\nisOddPrime(num) {\nreturn this _seive[(num - 3) / 2];\n}\n};\nfunction hexagonalTile(tileIndex) {\nconst primeSeive = new PrimeSeive(tileIndex * 420);\nlet count = 1;\nlet n = 1;\nlet number = 0;\nwhile (count < tileIndex) {\nif (primeSeive isPrime(6n - 1) &&\nprimeSeive isPrime(6n + 1) &&\nprimeSeive isPrime(12n + 5)) {\nnumber = 3nn - 3n + 2;\ncount++;\nif (count >= tileIndex) break;\n}\nif (primeSeive isPrime(6n + 5) &&\nprimeSeive isPrime(6n - 1) &&\nprimeSeive isPrime(12n - 7) && n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3213,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-128-hexagonal-tile-differences.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "08de0e7d17f26638dd862b746170baae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-128-hexagonal-tile-differences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} }; function hexagonalTile(tileIndex) { const primeSeive = new PrimeSeive(tileIndex * 420); let count = 1; let n = 1; let number = 0; while (count < tileIndex) { if (primeSeive isPrime(6n - 1) && primeSeive isPrime(6n + 1) && primeSeive isPrime(12n + 5)) { number = 3nn - 3n + 2; count++; if (count >= tileIndex) break; } if (primeSeive isPrime(6n + 5) && primeSeive isPrime(6n - 1) && primeSeive isPrime(12n - 7) && n= 1) {\nnumber = 3nn + 3n + 1;\ncount++;\n}\nn++;\n}\nreturn number;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3213,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-128-hexagonal-tile-differences.md",
      "source_type": "git_repo"
    },
    "token_count": 188,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "588cd362cdefa36e69a80125c69899d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-139-pythagorean-tiles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f71000cf542c50ff0a\ntitle: 'Problem 139: Pythagorean tiles'\nchallengeType: 1\nforumTopicId: 301767\ndashedName: problem-139-pythagorean-tiles\n--description--\nLet (a, b, c) represent the three sides of a right angle triangle with integral length sides. It is possible to place four such triangles together to form a square with length c.\nFor example, (3, 4, 5) triangles can be placed together to form a 5 by 5 square with a 1 by 1 hole in the middle and it can be seen that the 5 by 5 square can be tiled with twenty-five 1 by 1 squares.\nHowever, if (5, 12, 13) triangles were used, the hole would measure 7 by 7. These 7 by 7 squares could not be used to tile the 13 by 13 square.\nGiven that the perimeter of the right triangle is less than one-hundred million, how many Pythagorean triangles would allow such a tiling to occur?\n--hints--\npythagoreanTiles() should return 10057761.\njs\nassert.strictEqual(pythagoreanTiles(), 10057761);\n--seed--\n--seed-contents--\n```js\nfunction pythagoreanTiles() {\nreturn true;\n}\npythagoreanTiles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-139-pythagorean-tiles.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "48cdcedf9038215ace18aec4be2f399b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-137-fibonacci-golden-nuggets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f51000cf542c50ff08\ntitle: 'Problem 137: Fibonacci golden nuggets'\nchallengeType: 1\nforumTopicId: 301765\ndashedName: problem-137-fibonacci-golden-nuggets\n--description--\nConsider the infinite polynomial series $A_{F}(x) = xF_1 + x^2F_2 + x^3F_3 + \\ldots$, where $F_k$ is the $k$th term in the Fibonacci sequence: $1, 1, 2, 3, 5, 8, \\ldots$; that is, $F_k = F_{k − 1} + F_{k − 2}, F_1 = 1$ and $F_2 = 1$ For this problem we shall be interested in values of $x$ for which $A_{F}(x)$ is a positive integer Surprisingly\n$$\\begin{align}\nA_F(\\frac{1}{2}) & = (\\frac{1}{2}) × 1 + {(\\frac{1}{2})}^2 × 1 + {(\\frac{1}{2})}^3 × 2 + {(\\frac{1}{2})}^4 × 3 + {(\\frac{1}{2})}^5 × 5 + \\cdots \\\\\n& = \\frac{1}{2} + \\frac{1}{4} + \\frac{2}{8} + \\frac{3}{16} + \\frac{5}{32} + \\cdots \\\\\n& = 2\n\\end{align}$$\nThe corresponding values of $x$ for the first five natural numbers are shown below",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1697,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-137-fibonacci-golden-nuggets.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c56ee11c569ef357ba46131a791aa09a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-137-fibonacci-golden-nuggets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "this problem we shall be interested in values of $x$ for which $A_{F}(x)$ is a positive integer Surprisingly $$\\begin{align} A_F(\\frac{1}{2}) & = (\\frac{1}{2}) × 1 + {(\\frac{1}{2})}^2 × 1 + {(\\frac{1}{2})}^3 × 2 + {(\\frac{1}{2})}^4 × 3 + {(\\frac{1}{2})}^5 × 5 + \\cdots \\\\ & = \\frac{1}{2} + \\frac{1}{4} + \\frac{2}{8} + \\frac{3}{16} + \\frac{5}{32} + \\cdots \\\\ & = 2 \\end{align}$$ The corresponding values of $x$ for the first five natural numbers are shown below| $x$                       | $A_F(x)$ |\n|---------------------------|----------|\n| $\\sqrt{2} − 1$            | $1$      |\n| $\\frac{1}{2}$             | $2$      |\n| $\\frac{\\sqrt{13} − 2}{3}$ | $3$      |\n| $\\frac{\\sqrt{89} − 5}{8}$ | $4$      |\n| $\\frac{\\sqrt{34} − 3}{5}$ | $5$      |\nWe shall call $A_F(x)$ a golden nugget if $x$ is rational, because they become increasingly rarer; for example, the 10th golden nugget is 74049690 Find the 15th golden nugget --hints--\ngoldenNugget() should return 1120149658760 js\nassert strictEqual(goldenNugget(), 1120149658760);\n--seed--\n--seed-contents--\n```js\nfunction goldenNugget() {\nreturn true;\n}\ngoldenNugget();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1697,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-137-fibonacci-golden-nuggets.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "134fe5616980758fe8d4b3c963f5fd92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-141-investigating-progressive-numbers-n-which-are-also-square.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3f91000cf542c50ff0b\ntitle: 'Problem 141: Investigating progressive numbers, n, which are also square'\nchallengeType: 1\nforumTopicId: 301770\ndashedName: problem-141-investigating-progressive-numbers-n-which-are-also-square\n--description--\nA positive integer, $n$, is divided by $d$ and the quotient and remainder are $q$ and $r$ respectively. In addition $d$, $q$, and $r$ are consecutive positive integer terms in a geometric sequence, but not necessarily in that order.\nFor example, 58 divided by 6 has a quotient of 9 and a remainder of 4. It can also be seen that 4, 6, 9 are consecutive terms in a geometric sequence (common ratio $\\frac{3}{2}$).\nWe will call such numbers, $n$, progressive.\nSome progressive numbers, such as 9 and 10404 = ${102}^2$, also happen to be perfect squares. The sum of all progressive perfect squares below one hundred thousand is 124657.\nFind the sum of all progressive perfect squares below one trillion (${10}^{12}$).\n--hints--\nprogressivePerfectSquares() should return 878454337159.\njs\nassert.strictEqual(progressivePerfectSquares(), 878454337159);\n--seed--\n--seed-contents--\n```js\nfunction progressivePerfectSquares() {\nreturn true;\n}\nprogressivePerfectSquares();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1307,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-141-investigating-progressive-numbers-n-which-are-also-square.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b7a538d5d06f4cd013e0116c10552a4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-140-modified-fibonacci-golden-nuggets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3fa1000cf542c50ff0c\ntitle: 'Problem 140: Modified Fibonacci golden nuggets'\nchallengeType: 1\nforumTopicId: 301769\ndashedName: problem-140-modified-fibonacci-golden-nuggets\n--description--\nConsider the infinite polynomial series $A_G(x) = xG_1 + x^2G_2 + x^3G_3 + \\cdots$, where $G_k$ is the $k$th term of the second order recurrence relation $G_k = G_{k − 1} + G_{k − 2}, G_1 = 1$ and $G_2 = 4$; that is, $1, 4, 5, 9, 14, 23, \\ldots$.\nFor this problem we shall be concerned with values of $x$ for which $A_G(x)$ is a positive integer.\nThe corresponding values of $x$ for the first five natural numbers are shown below.\n| $x$                         | $A_G(x)$ |\n|-----------------------------|----------|\n| $\\frac{\\sqrt{5} − 1}{4}$    | $1$      |\n| $\\frac{2}{5}$               | $2$      |\n| $\\frac{\\sqrt{22} − 2}{6}$   | $3$      |\n| $\\frac{\\sqrt{137} − 5}{14}$ | $4$      |\n| $\\frac{1}{2}$               | $5$      |\nWe shall call $A_G(x)$ a golden nugget if $x$ is rational because they become increasingly rarer; for example, the 20th golden nugget is 211345365. Find the sum of the first thirty golden nuggets.\n--hints--\nmodifiedGoldenNuggets() should return 5673835352990\njs\nassert.strictEqual(modifiedGoldenNuggets(), 5673835352990);\n--seed--\n--seed-contents--\n```js\nfunction modifiedGoldenNuggets() {\nreturn true;\n}\nmodifiedGoldenNuggets();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1466,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-140-modified-fibonacci-golden-nuggets.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c4be88568f5d7cf43422989c83267028",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-142-perfect-square-collection.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3fa1000cf542c50ff0d\ntitle: 'Problem 142: Perfect Square Collection'\nchallengeType: 1\nforumTopicId: 301771\ndashedName: problem-142-perfect-square-collection\n--description--\nFind the smallest $x + y + z$ with integers $x > y > z > 0$ such that $x + y$, $x − y$, $x + z$, $x − z$, $y + z$, $y − z$ are all perfect squares.\n--hints--\nperfectSquareCollection() should return 1006193.\njs\nassert.strictEqual(perfectSquareCollection(), 1006193);\n--seed--\n--seed-contents--\n```js\nfunction perfectSquareCollection() {\nreturn true;\n}\nperfectSquareCollection();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 658,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-142-perfect-square-collection.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1ca2ef9e45d53e18fd281acad4a1872f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-145-how-many-reversible-numbers-are-there-below-one-billion.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3fd1000cf542c50ff10\ntitle: 'Problem 145: How many reversible numbers are there below one-billion?'\nchallengeType: 1\nforumTopicId: 301774\ndashedName: problem-145-how-many-reversible-numbers-are-there-below-one-billion\n--description--\nSome positive integers $n$ have the property that the sum [ $n + reverse(n)$ ] consists entirely of odd (decimal) digits. For instance, $36 + 63 = 99$ and $409 + 904 = 1313$. We will call such numbers reversible; so 36, 63, 409, and 904 are reversible. Leading zeroes are not allowed in either $n$ or $reverse(n)$.\nThere are 120 reversible numbers below one-thousand.\nHow many reversible numbers are there below one-billion (${10}^9$)?\n--hints--\nreversibleNumbers() should return 608720.\njs\nassert.strictEqual(reversibleNumbers(), 608720);\n--seed--\n--seed-contents--\n```js\nfunction reversibleNumbers() {\nreturn true;\n}\nreversibleNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 977,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-145-how-many-reversible-numbers-are-there-below-one-billion.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4b50c132416efe4fdd9e9168cb94e736",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-144-investigating-multiple-reflections-of-a-laser-beam.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3fc1000cf542c50ff0f\ntitle: 'Problem 144: Investigating multiple reflections of a laser beam'\nchallengeType: 1\nforumTopicId: 301773\ndashedName: problem-144-investigating-multiple-reflections-of-a-laser-beam\n--description--\nIn laser physics, a \"white cell\" is a mirror system that acts as a delay line for the laser beam. The beam enters the cell, bounces around on the mirrors, and eventually works its way back out.\nThe specific white cell we will be considering is an ellipse with the equation $4{x}^2 + y^2 = 100$\nThe section corresponding to $−0.01 ≤ x ≤ +0.01$ at the top is missing, allowing the light to enter and exit through the hole.\nThe light beam in this problem starts at the point (0.0, 10.1) just outside the white cell, and the beam first impacts the mirror at (1.4, -9.6).\nEach time the laser beam hits the surface of the ellipse, it follows the usual law of reflection \"angle of incidence equals angle of reflection.\" That is, both the incident and reflected beams make the same angle with the normal line at the point of incidence.\nIn the figure on the left, the red line shows the first two points of contact between the laser beam and the wall of the white cell; the blue line shows the line tangent to the ellipse at the point of incidence of the first bounce.\nThe slope m of the tangent line at any point (x, y) of the given ellipse is: $m = −4 × \\frac{x}{y}$\nThe normal line is perpendicular to this tangent line at the point of incidence.\nThe animation on the right shows the first 10 reflections of the beam.\nHow many times does the beam hit the internal surface of the white cell before exiting?\n--hints--\nlaserBeamReflections() should return 354.\njs\nassert.strictEqual(laserBeamReflections(), 354);\n--seed--\n--seed-contents--\n```js\nfunction laserBeamReflections() {\nreturn true;\n}\nlaserBeamReflections();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-144-investigating-multiple-reflections-of-a-laser-beam.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "19e642c10562f901017f028a66a489e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-143-investigating-the-torricelli-point-of-a-triangle.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3fc1000cf542c50ff0e\ntitle: 'Problem 143: Investigating the Torricelli point of a triangle'\nchallengeType: 1\nforumTopicId: 301772\ndashedName: problem-143-investigating-the-torricelli-point-of-a-triangle\n--description--\nLet ABC be a triangle with all interior angles being less than 120 degrees. Let X be any point inside the triangle and let $XA = p$, $XC = q$, and $XB = r$.\nFermat challenged Torricelli to find the position of X such that p + q + r was minimised.\nTorricelli was able to prove that if equilateral triangles AOB, BNC and AMC are constructed on each side of triangle ABC, the circumscribed circles of AOB, BNC, and AMC will intersect at a single point, T, inside the triangle. Moreover he proved that T, called the Torricelli/Fermat point, minimises $p + q + r$. Even more remarkable, it can be shown that when the sum is minimised, $AN = BM = CO = p + q + r$ and that AN, BM and CO also intersect at T.\nIf the sum is minimised and a, b, c, p, q and r are all positive integers we shall call triangle ABC a Torricelli triangle. For example, $a = 399$, $b = 455$, $c = 511$ is an example of a Torricelli triangle, with $p + q + r = 784$. Find the sum of all distinct values of $p + q + r ≤ 120000$ for Torricelli triangles.\n--hints--\nsumTorricelliTriangles() should return 30758397.\njs\nassert.strictEqual(sumTorricelliTriangles(), 30758397);\n--seed--\n--seed-contents--\n```js\nfunction sumTorricelliTriangles() {\nreturn true;\n}\nsumTorricelliTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2018,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-143-investigating-the-torricelli-point-of-a-triangle.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f4b5edab3f4e919b6eeb4b8e96639f0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-147-rectangles-in-cross-hatched-grids.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3ff1000cf542c50ff12\ntitle: 'Problem 147: Rectangles in cross-hatched grids'\nchallengeType: 1\nforumTopicId: 301776\ndashedName: problem-147-rectangles-in-cross-hatched-grids\n--description--\nIn a 3x2 cross-hatched grid, a total of 37 different rectangles could be situated within that grid as indicated in the sketch.\nThere are 5 grids smaller than 3x2, vertical and horizontal dimensions being important, i.e. 1x1, 2x1, 3x1, 1x2 and 2x2. If each of them is cross-hatched, the following number of different rectangles could be situated within those smaller grids:\n$$\\begin{array}{|c|c|}\n\\hline\n1 \\times 1 & 1  \\\\ \\hline\n2 \\times 1 & 4  \\\\ \\hline\n3 \\times 1 & 8  \\\\ \\hline\n1 \\times 2 & 4  \\\\ \\hline\n2 \\times 2 & 18 \\\\ \\hline\n\\end{array}$$\nAdding those to the 37 of the 3x2 grid, a total of 72 different rectangles could be situated within 3x2 and smaller grids.\nHow many different rectangles could be situated within 47x43 and smaller grids?\n--hints--\ncrossHatchedRectangles() should return 846910284.\njs\nassert.strictEqual(crossHatchedRectangles(), 846910284);\n--seed--\n--seed-contents--\n```js\nfunction crossHatchedRectangles() {\nreturn true;\n}\ncrossHatchedRectangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1600,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-147-rectangles-in-cross-hatched-grids.md",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ab70244f592ed6891807c4b2a3e8ea52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-146-investigating-a-prime-pattern.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f3fe1000cf542c50ff11\ntitle: 'Problem 146: Investigating a Prime Pattern'\nchallengeType: 1\nforumTopicId: 301775\ndashedName: problem-146-investigating-a-prime-pattern\n--description--\nThe smallest positive integer $n$ for which the numbers $n^2 + 1$, $n^2 + 3$, $n^2 + 7$, $n^2 + 9$, $n^2 + 13$, and $n^2 + 27$ are consecutive primes is 10. The sum of all such integers $n$ below one-million is 1242490.\nWhat is the sum of all such integers $n$ below 150 million?\n--hints--\nprimePattern() should return 676333270.\njs\nassert.strictEqual(primePattern(), 676333270);\n--seed--\n--seed-contents--\n```js\nfunction primePattern() {\nreturn true;\n}\nprimePattern();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 753,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-146-investigating-a-prime-pattern.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0c84dc29ee5c620917afedb5293792e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-148-exploring-pascals-triangle.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4021000cf542c50ff14\ntitle: 'Problem 148: Exploring Pascal''s triangle'\nchallengeType: 1\nforumTopicId: 301777\ndashedName: problem-148-exploring-pascals-triangle\n--description--\nWe can easily verify that none of the entries in the first seven rows of Pascal's triangle are divisible by 7:\nmarkup\n1\n1   1\n1   2   1\n1   3   3   1\n1   4   6   4   1\n1   5   10  10  5   1\n1   6   15  20  15  6   1\nHowever, if we check the first one hundred rows, we will find that only 2361 of the 5050 entries are not divisible by 7.\n--instructions--\nFind the number of entries which are not divisible by 7 in the first one billion (${10}^9$) rows of Pascal's triangle.\n--hints--\nentriesOfPascalsTriangle() should return 2129970655314432.\njs\nassert.strictEqual(entriesOfPascalsTriangle(), 2129970655314432);\n--seed--\n--seed-contents--\n```js\nfunction entriesOfPascalsTriangle() {\nreturn true;\n}\nentriesOfPascalsTriangle();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1058,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-148-exploring-pascals-triangle.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c86268d507ff4b07e37cd3c63ed71d40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-151-paper-sheets-of-standard-sizes-an-expected-value-problem.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4031000cf542c50ff16\ntitle: 'Problem 151: Paper sheets of standard sizes: an expected-value problem'\nchallengeType: 1\nforumTopicId: 301782\ndashedName: problem-151-paper-sheets-of-standard-sizes-an-expected-value-problem\n--description--\nA printing shop runs 16 batches (jobs) every week and each batch requires a sheet of special color-proofing paper of size A5.\nEvery Monday morning, the foreman opens a new envelope, containing a large sheet of the special paper with size A1.\nHe proceeds to cut it in half, thus getting two sheets of size A2. Then he cuts one of them in half to get two sheets of size A3 and so on until he obtains the A5-size sheet needed for the first batch of the week.\nAll the unused sheets are placed back in the envelope.\nAt the beginning of each subsequent batch, he takes one sheet of paper from the envelope at random. If it is of size A5, he uses it. If it is larger, he repeats the 'cut-in-half' procedure until he has what he needs, and any remaining sheets are always placed back in the envelope.\nExcluding the first and last batch of the week, find the expected number of times (during each week) that the foreman finds a single sheet of paper in the envelope.\nGive your answer rounded to six decimal places using the format x.xxxxxx.\n--hints--\nexpectedValueProblem() should return 0.464399.\njs\nassert.strictEqual(expectedValueProblem(), 0.464399);\n--seed--\n--seed-contents--\n```js\nfunction expectedValueProblem() {\nreturn true;\n}\nexpectedValueProblem();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-151-paper-sheets-of-standard-sizes-an-expected-value-problem.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9a2e51dab07f2dbb344a86008d17406f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-152-writing-one-half-as-a-sum-of-inverse-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4041000cf542c50ff17\ntitle: 'Problem 152: Writing one half as a sum of inverse squares'\nchallengeType: 1\nforumTopicId: 301783\ndashedName: problem-152-writing-one-half-as-a-sum-of-inverse-squares\n--description--\nThere are several ways to write the number $\\frac{1}{2}$ as a sum of inverse squares using distinct integers.\nFor instance, the numbers {2,3,4,5,7,12,15,20,28,35} can be used:\n$$\\frac{1}{2} = \\frac{1}{2^2} + \\frac{1}{3^2} + \\frac{1}{4^2} + \\frac{1}{5^2} + \\frac{1}{7^2} + \\frac{1}{{12}^2} + \\frac{1}{{15}^2} + \\frac{1}{{20}^2} + \\frac{1}{{28}^2} + \\frac{1}{{35}^2}$$\nIn fact, only using integers between 2 and 45 inclusive, there are exactly three ways to do it, the remaining two being: {2,3,4,6,7,9,10,20,28,35,36,45} and {2,3,4,6,7,9,12,15,28,30,35,36,45}.\nHow many ways are there to write the number $\\frac{1}{2}$ as a sum of inverse squares using distinct integers between 2 and 80 inclusive?\n--hints--\nsumInverseSquares() should return 301.\njs\nassert.strictEqual(sumInverseSquares(), 301);\n--seed--\n--seed-contents--\n```js\nfunction sumInverseSquares() {\nreturn true;\n}\nsumInverseSquares();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1212,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-152-writing-one-half-as-a-sum-of-inverse-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2ebdc9b3c89774d8d51b4d586ee7a9ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-154-exploring-pascals-pyramid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4071000cf542c50ff19\ntitle: 'Problem 154: Exploring Pascal''s pyramid'\nchallengeType: 1\nforumTopicId: 301785\ndashedName: problem-154-exploring-pascals-pyramid\n--description--\nA triangular pyramid is constructed using spherical balls so that each ball rests on exactly three balls of the next lower level.\nThen, we calculate the number of paths leading from the apex to each position: A path starts at the apex and progresses downwards to any of the three spheres directly below the current position. Consequently, the number of paths to reach a certain position is the sum of the numbers immediately above it (depending on the position, there are up to three numbers above it).\nThe result is Pascal's pyramid and the numbers at each level n are the coefficients of the trinomial expansion ${(x + y + z)}^n$.\nHow many coefficients in the expansion of ${(x + y + z)}^{200000}$ are multiples of ${10}^{12}$?\n--hints--\npascalsPyramid() should return 479742450.\njs\nassert.strictEqual(pascalsPyramid(), 479742450);\n--seed--\n--seed-contents--\n```js\nfunction pascalsPyramid() {\nreturn true;\n}\npascalsPyramid();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-154-exploring-pascals-pyramid.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d962d042e30eeadc18f20e45c036311",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-150-searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4031000cf542c50ff15\ntitle: >-\nProblem 150: Searching a triangular array for a sub-triangle having\nminimum-sum\nchallengeType: 1\nforumTopicId: 301781\ndashedName: problem-150-searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum\n--description--\nIn a triangular array of positive and negative integers, we wish to find a sub-triangle such that the sum of the numbers it contains is the smallest possible In the example below, it can be easily verified that the marked triangle satisfies this condition having a sum of −42 We wish to make such a triangular array with one thousand rows, so we generate 500500 pseudo-random numbers $s_k$ in the range $±2^{19}$, using a type of random number generator (known as a Linear Congruential Generator) as follows:\n$$\\begin{align}\nt := & \\ 0\\\\\n\\text{for}\\ & k = 1\\ \\text{up to}\\ k = 500500:\\\\\n& t := (615949 × t + 797807)\\ \\text{modulo}\\ 2^{20}\\\\\n& s_k := t − 219\\\\\n\\end{align}$$\nThus: $s_1 = 273519$, $s_2 = −153582$, $s_3 = 450905$ etc Our triangular array is then formed using the pseudo-random numbers thus:\n$$\ns_1 \\\\\ns_2\\;s_3 \\\\\ns_4\\; s_5\\; s_6 \\\\\ns_7\\; s_8\\; s_9\\; s_{10} \\\\\n\\ldots\n$$\nSub-triangles can start at any element of the array and extend down as far as we like (taking-in the two elements directly below it from the next row, the three elements directly below from the row after that, and so on) The \"sum of a sub-triangle\" is defined as the sum of all the elements it contains Find the smallest possible sub-triangle sum --hints--\nsmallestSubTriangleSum() should return -271248680 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2216,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-150-searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6ce4ccce6d90e6b21f087eb8b479b0d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-150-searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "s_8\\; s_9\\; s_{10} \\\\ \\ldots $$ Sub-triangles can start at any element of the array and extend down as far as we like (taking-in the two elements directly below it from the next row, the three elements directly below from the row after that, and so on) The \"sum of a sub-triangle\" is defined as the sum of all the elements it contains Find the smallest possible sub-triangle sum --hints-- smallestSubTriangleSum() should return -271248680 js assertstrictEqual(smallestSubTriangleSum(), -271248680);\n--seed--\n--seed-contents--\n```js\nfunction smallestSubTriangleSum() {\nreturn true;\n}\nsmallestSubTriangleSum();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2216,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-150-searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 164,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "49e5a366dbf236ffcb03d43287d8c177",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-149-searching-for-a-maximum-sum-subsequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4021000cf542c50ff13\ntitle: 'Problem 149: Searching for a maximum-sum subsequence'\nchallengeType: 1\nforumTopicId: 301778\ndashedName: problem-149-searching-for-a-maximum-sum-subsequence\n--description--\nLooking at the table below, it is easy to verify that the maximum possible sum of adjacent numbers in any direction (horizontal, vertical, diagonal or anti-diagonal) is $16 (= 8 + 7 + 1)$ $$\\begin{array}{|r|r|r|r|}\n\\hline\n−2 &  5 &  3 & 2 \\\\ \\hline\n9 & −6 &  5 & 1 \\\\ \\hline\n3 &  2 &  7 & 3 \\\\ \\hline\n−1 &  8 & −4 & 8 \\\\ \\hline\n\\end{array}$$\nNow, let us repeat the search, but on a much larger scale:\nFirst, generate four million pseudo-random numbers using a specific form of what is known as a \"Lagged Fibonacci Generator\":\nFor $1 ≤ k ≤ 55$, $s_k = (100003 − 200003k + 300007{k}^3) \\ (modulo\\ 1000000) − 500000$ For $56 ≤ k ≤ 4000000$, $s_k = (s_{k − 24} + s_{k − 55} + 1000000) \\ (modulo\\ 1000000) − 500000$ Thus, $s_{10} = −393027$ and $s_{100} = 86613$ The terms of $s$ are then arranged in a 2000×2000 table, using the first 2000 numbers to fill the first row (sequentially), the next 2000 numbers to fill the second row, and so on Finally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal) --hints--\nmaximumSubSequence() should return 52852124 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1653,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-149-searching-for-a-maximum-sum-subsequence.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "60570d10545d783b10c6f150b0719ea1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-149-searching-for-a-maximum-sum-subsequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "55} + 1000000) \\ (modulo\\ 1000000) − 500000$ Thus, $s_{10} = −393027$ and $s_{100} = 86613$ The terms of $s$ are then arranged in a 2000×2000 table, using the first 2000 numbers to fill the first row (sequentially), the next 2000 numbers to fill the second row, and so on Finally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal) --hints-- maximumSubSequence() should return 52852124 js assertstrictEqual(maximumSubSequence(), 52852124);\n--seed--\n--seed-contents--\n```js\nfunction maximumSubSequence() {\nreturn true;\n}\nmaximumSubSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1653,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-149-searching-for-a-maximum-sum-subsequence.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aa362f7614eedaeacc13a1a8eb961edf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-155-counting-capacitor-circuits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4081000cf542c50ff1a\ntitle: 'Problem 155: Counting Capacitor Circuits'\nchallengeType: 1\nforumTopicId: 301786\ndashedName: problem-155-counting-capacitor-circuits\n--description--\nAn electric circuit uses exclusively identical capacitors of the same value C.\nThe capacitors can be connected in series or in parallel to form sub-units, which can then be connected in series or in parallel with other capacitors or other sub-units to form larger sub-units, and so on up to a final circuit.\nUsing this simple procedure and up to n identical capacitors, we can make circuits having a range of different total capacitances. For example, using up to $n = 3$ capacitors of $60 μF$ each, we can obtain the following 7 distinct total capacitance values:\nIf we denote by $D(n)$ the number of distinct total capacitance values we can obtain when using up to $n$ equal-valued capacitors and the simple procedure described above, we have: $D(1) = 1, D(2) = 3, D(3)=7, \\ldots$\nFind $D(18)$.\nReminder: When connecting capacitors $C_1$, $C_2$ etc in parallel, the total capacitance is $C_T = C_1 + C_2 + \\cdots$, whereas when connecting them in series, the overall capacitance is given by: $\\frac{1}{C_T} = \\frac{1}{C_1} + \\frac{1}{C_2} + \\cdots$.\n--hints--\ncapacitanceValues() should return 3857447.\njs\nassert.strictEqual(capacitanceValues(), 3857447);\n--seed--\n--seed-contents--\n```js\nfunction capacitanceValues() {\nreturn true;\n}\ncapacitanceValues();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-155-counting-capacitor-circuits.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "33e14a11590a7fbe0ffe9d07065c88c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-156-counting-digits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4091000cf542c50ff1b\ntitle: 'Problem 156: Counting Digits'\nchallengeType: 1\nforumTopicId: 301787\ndashedName: problem-156-counting-digits\n--description--\nStarting from zero the natural numbers are written down in base 10 like this:\n0 1 2 3 4 5 6 7 8 9 10 11 12 Consider the digit $d = 1$ After we write down each number n, we will update the number of ones that have occurred and call this number $f(n, 1)$ The first values for $f(n, 1)$, then, are as follows:\n| $n$ | $f(n, 1)$ |\n|-----|-----------|\n| 0   | 0         |\n| 1   | 1         |\n| 2   | 1         |\n| 3   | 1         |\n| 4   | 1         |\n| 5   | 1         |\n| 6   | 1         |\n| 7   | 1         |\n| 8   | 1         |\n| 9   | 1         |\n| 10  | 2         |\n| 11  | 4         |\n| 12  | 5         |\nNote that $f(n, 1)$ never equals 3 So the first two solutions of the equation $f(n, 1) = n$ are $n = 0$ and $n = 1$ The next solution is $n = 199981$ In the same manner the function $f(n, d)$ gives the total number of digits d that have been written down after the number $n$ has been written In fact, for every digit $d ≠ 0$, 0 is the first solution of the equation $f(n, d) = n$ Let $s(d)$ be the sum of all the solutions for which $f(n, d) = n$ You are given that $s(1) = 22786974071$ Find $\\sum{s(d)}$ for $1 ≤ d ≤ 9$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1771,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-156-counting-digits.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "996d4c9de208d84fb1856148e8c253f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-156-counting-digits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the same manner the function $f(n, d)$ gives the total number of digits d that have been written down after the number $n$ has been written In fact, for every digit $d ≠ 0$, 0 is the first solution of the equation $f(n, d) = n$ Let $s(d)$ be the sum of all the solutions for which $f(n, d) = n$ You are given that $s(1) = 22786974071$ Find $\\sum{s(d)}$ for $1 ≤ d ≤ 9$Note: if, for some $n$, $f(n, d) = n$ for more than one value of $d$ this value of $n$ is counted again for every value of $d$ for which $f(n, d) = n$ --hints--\ncountingDigits() should return 21295121502550 js\nassert strictEqual(countingDigits(), 21295121502550);\n--seed--\n--seed-contents--\n```js\nfunction countingDigits() {\nreturn true;\n}\ncountingDigits();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1771,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-156-counting-digits.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b7cef9359d8e26bbd6c7a27008dc1a17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-153-investigating-gaussian-integers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4051000cf542c50ff18\ntitle: 'Problem 153: Investigating Gaussian Integers'\nchallengeType: 1\nforumTopicId: 301784\ndashedName: problem-153-investigating-gaussian-integers\n--description--\nAs we all know the equation $x^2 = -1$ has no solutions for real $x$ If we however introduce the imaginary number $i$ this equation has two solutions: $x = i$ and $x = -i$ If we go a step further the equation ${(x - 3)}^2 = -4$ has two complex solutions: $x = 3 + 2i$ and $x = 3 - 2i$, which are called each others' complex conjugate Numbers of the form $a + bi$ are called complex numbers In general $a + bi$ and $a − bi$ are each other's complex conjugate A Gaussian Integer is a complex number $a + bi$ such that both $a$ and $b$ are integers The regular integers are also Gaussian integers (with $b = 0$) To distinguish them from Gaussian integers with $b ≠ 0$ we call such integers \"rational integers \"\nA Gaussian integer is called a divisor of a rational integer $n$ if the result is also a Gaussian integer If for example we divide 5 by $1 + 2i$ we can simplify in the following manner:\nMultiply numerator and denominator by the complex conjugate of $1 + 2i$: $1 − 2i$ The result is:\n$$\\frac{5}{1 + 2i} = \\frac{5}{1 + 2i} \\frac{1 - 2i}{1 - 2i} = \\frac{5(1 - 2i)}{1 - {(2i)}^2} = \\frac{5(1 - 2i)}{1 - (-4)} = \\frac{5(1 - 2i)}{5} = 1 - 2i$$\nSo $1 + 2i$ is a divisor of 5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-153-investigating-gaussian-integers.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "39c129395394bd9fee68812b3b748191",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-153-investigating-gaussian-integers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "If for example we divide 5 by $1 + 2i$ we can simplify in the following manner: Multiply numerator and denominator by the complex conjugate of $1 + 2i$: $1 − 2i$ The result is: $$\\frac{5}{1 + 2i} = \\frac{5}{1 + 2i} \\frac{1 - 2i}{1 - 2i} = \\frac{5(1 - 2i)}{1 - {(2i)}^2} = \\frac{5(1 - 2i)}{1 - (-4)} = \\frac{5(1 - 2i)}{5} = 1 - 2i$$ So $1 + 2i$ is a divisor of 5Note that $1 + i$ is not a divisor of 5 because:\n$$\\frac{5}{1 + i} = \\frac{5}{2} - \\frac{5}{2}i$$\nNote also that if the Gaussian Integer ($a + bi$) is a divisor of a rational integer $n$, then its complex conjugate ($a − bi$) is also a divisor of $n$ In fact, 5 has six divisors such that the real part is positive: {1, 1 + 2i, 1 − 2i, 2 + i, 2 − i, 5}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-153-investigating-gaussian-integers.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "56ff718a6f20c2b8b2515a8243ca502a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-153-investigating-gaussian-integers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that $1 + i$ is not a divisor of 5 because: $$\\frac{5}{1 + i} = \\frac{5}{2} - \\frac{5}{2}i$$ Note also that if the Gaussian Integer ($a + bi$) is a divisor of a rational integer $n$, then its complex conjugate ($a − bi$) is also a divisor of $n$ In fact, 5 has six divisors such that the real part is positive: {1, 1 + 2i, 1 − 2i, 2 + i, 2 − i, 5}The following is a table of all of the divisors for the first five positive rational integers:\n| n | Gaussian integer divisors with positive real part | Sum s(n) of these divisors |\n|---|---------------------------------------------------|----------------------------|\n| 1 | 1                                                 | 1                          |\n| 2 | 1, 1 + i, 1 - i, 2                                | 5                          |\n| 3 | 1, 3                                              | 4                          |\n| 4 | 1, 1 + i, 1 - i, 2, 2 + 2i, 2 - 2i, 4             | 13                         |\n| 5 | 1, 1 + 2i, 1 - 2i, 2 + i, 2 - i, 5                | 12                         |\nFor divisors with positive real parts, then, we have: $\\displaystyle\\sum_{n=1}^5 s(n) = 35$ For $1 ≤ n ≤ {10}^5$, $\\displaystyle\\sum_{n = 1}^{{10}^5} s(n) = 17924657155$ What is $\\displaystyle\\sum_{n=1}^{{10}^8} s(n)$ --hints--\nsumGaussianIntegers() should return 17971254122360636 js\nassert strictEqual(sumGaussianIntegers(), 17971254122360636);\n--seed--\n--seed-contents--\n```js\nfunction sumGaussianIntegers() {\nreturn true;\n}\nsumGaussianIntegers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-153-investigating-gaussian-integers.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e504e2051fd7eaeeea74a698844bb1bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-159-digital-root-sums-of-factorisations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f40c1000cf542c50ff1e\ntitle: 'Problem 159: Digital root sums of factorizations'\nchallengeType: 1\nforumTopicId: 301790\ndashedName: problem-159-digital-root-sums-of-factorisations\n--description--\nA composite number can be factored many different ways For instance, not including multiplication by one, 24 can be factored in 7 distinct ways:\n$$\\begin{align}\n& 24 = 2 \\times 2 \\times 2 \\times 3\\\\\n& 24 = 2 \\times 3 \\times 4  \\\\\n& 24 = 2 \\times 2 \\times 6  \\\\\n& 24 = 4 \\times 6    \\\\\n& 24 = 3 \\times 8    \\\\\n& 24 = 2 \\times 12   \\\\\n& 24 = 24\n\\end{align}$$\nRecall that the digital root of a number, in base 10, is found by adding together the digits of that number, and repeating that process until a number arrives at less than 10 Thus the digital root of 467 is 8 We shall call a Digital Root Sum (DRS) the sum of the digital roots of the individual factors of our number The chart below demonstrates all of the DRS values for 24 | Factorization | Digital Root Sum |\n|---------------|------------------|\n|    2x2x2x3    |        9         |\n|     2x3x4     |        9         |\n|     2x2x6     |        10        |\n|      4x6      |        10        |\n|      3x8      |        11        |\n|      2x12     |        5         |\n|      24       |        6         |\nThe maximum Digital Root Sum of 24 is 11 The function $mdrs(n)$ gives the maximum Digital Root Sum of $n$ So $mdrs(24) = 11$ Find $\\sum{mdrs(n)}$ for $1 < n < 1,000,000$ --hints--\neuler159() should return 14489159 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-159-digital-root-sums-of-factorisations.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fc774c6a07d4c31efbbd17fc2393f4e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-159-digital-root-sums-of-factorisations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "| |---------------|------------------| | 2x2x2x3 | 9 | | 2x3x4 | 9 | | 2x2x6 | 10 | | 4x6 | 10 | | 3x8 | 11 | | 2x12 | 5 | | 24 | 6 | The maximum Digital Root Sum of 24 is 11 The function $mdrs(n)$ gives the maximum Digital Root Sum of $n$ So $mdrs(24) = 11$ Find $\\sum{mdrs(n)}$ for $1 < n < 1,000,000$ --hints-- euler159() should return 14489159 js assertstrictEqual(euler159(), 14489159);\n--seed--\n--seed-contents--\n```js\nfunction euler159() {\nreturn true;\n}\neuler159();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-159-digital-root-sums-of-factorisations.md",
      "source_type": "git_repo"
    },
    "token_count": 197,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8940090df031b0d64054fcf3868bff4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-160-factorial-trailing-digits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f40d1000cf542c50ff1f\ntitle: 'Problem 160: Factorial trailing digits'\nchallengeType: 1\nforumTopicId: 301794\ndashedName: problem-160-factorial-trailing-digits\n--description--\nFor any $N$, let $f(N)$ be the last five digits before the trailing zeroes in $N!$.\nFor example,\n$$\\begin{align}\n& 9! = 362880 \\; \\text{so} \\; f(9) = 36288 \\\\\n& 10! = 3628800 \\; \\text{so} \\; f(10) = 36288 \\\\\n& 20! = 2432902008176640000 \\; \\text{so} \\; f(20) = 17664\n\\end{align}$$\nFind $f(1,000,000,000,000)$\n--hints--\nfactorialTrailingDigits() should return 16576.\njs\nassert.strictEqual(factorialTrailingDigits(), 16576);\n--seed--\n--seed-contents--\n```js\nfunction factorialTrailingDigits() {\nreturn true;\n}\nfactorialTrailingDigits();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 827,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-160-factorial-trailing-digits.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "13220f3ab395007e3e1e228db2b816c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-157-solving-the-diophantine-equation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4091000cf542c50ff1c\ntitle: 'Problem 157: Solving the diophantine equation'\nchallengeType: 1\nforumTopicId: 301788\ndashedName: problem-157-solving-the-diophantine-equation\n--description--\nConsider the diophantine equation $\\frac{1}{a} + \\frac{1}{b} = \\frac{p}{{10}^n}$ with $a$, $b$, $p$, $n$ positive integers and $a ≤ b$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-157-solving-the-diophantine-equation.md",
      "source_type": "git_repo"
    },
    "token_count": 118,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "65faa24c6a1de4fff68f73bdb5712f72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-157-solving-the-diophantine-equation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4091000cf542c50ff1c\ntitle: 'Problem 157: Solving the diophantine equation'\nchallengeType: 1\nforumTopicId: 301788\ndashedName: problem-157-solving-the-diophantine-equation\n--description--\nConsider the diophantine equation $\\frac{1}{a} + \\frac{1}{b} = \\frac{p}{{10}^n}$ with $a$, $b$, $p$, $n$ positive integers and $a ≤ b$For $n = 1$ this equation has 20 solutions that are listed below:\n$$\\begin{array}{lllll}\n\\frac{1}{1}  + \\frac{1}{1}  = \\frac{20}{10} & \\frac{1}{1} + \\frac{1}{2}  = \\frac{15}{10}\n& \\frac{1}{1}  + \\frac{1}{5}  = \\frac{12}{10} & \\frac{1}{1} + \\frac{1}{10} = \\frac{11}{10}\n& \\frac{1}{2}  + \\frac{1}{2}  = \\frac{10}{10} \\\\\n\\frac{1}{2}  + \\frac{1}{5}  = \\frac{7}{10}   & \\frac{1}{2} + \\frac{1}{10} = \\frac{6}{10}\n& \\frac{1}{3}  + \\frac{1}{6}  = \\frac{5}{10}   & \\frac{1}{3} + \\frac{1}{15} = \\frac{4}{10}\n& \\frac{1}{4}  + \\frac{1}{4}  = \\frac{5}{10} \\\\\n\\frac{1}{4}  + \\frac{1}{4}  = \\frac{5}{10}  & \\frac{1}{5}  + \\frac{1}{5}  = \\frac{4}{10}\n& \\frac{1}{5}  + \\frac{1}{10} = \\frac{3}{10}  & \\frac{1}{6}  + \\frac{1}{30} = \\frac{2}{10}\n& \\frac{1}{10} + \\frac{1}{10} = \\frac{2}{10} \\\\\n\\frac{1}{11} + \\frac{1}{110} = \\frac{1}{10} & \\frac{1}{12} + \\frac{1}{60}  = \\frac{1}{10}\n& \\frac{1}{14} + \\frac{1}{35}  = \\frac{1}{10} & \\frac{1}{15} + \\frac{1}{30}  = \\frac{1}{10}\n& \\frac{1}{20} + \\frac{1}{20}  = \\frac{1}{10}\n\\end{array}$$\nHow many solutions has this equation for $1 ≤ n ≤ 9$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-157-solving-the-diophantine-equation.md",
      "source_type": "git_repo"
    },
    "token_count": 674,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4ad7ebad4444ed43cc6a61db8a4bd97a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-157-solving-the-diophantine-equation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\frac{1}{4} = \\frac{5}{10} \\\\ \\frac{1}{4} + \\frac{1}{4} = \\frac{5}{10} & \\frac{1}{5} + \\frac{1}{5} = \\frac{4}{10} & \\frac{1}{5} + \\frac{1}{10} = \\frac{3}{10} & \\frac{1}{6} + \\frac{1}{30} = \\frac{2}{10} & \\frac{1}{10} + \\frac{1}{10} = \\frac{2}{10} \\\\ \\frac{1}{11} + \\frac{1}{110} = \\frac{1}{10} & \\frac{1}{12} + \\frac{1}{60} = \\frac{1}{10} & \\frac{1}{14} + \\frac{1}{35} = \\frac{1}{10} & \\frac{1}{15} + \\frac{1}{30} = \\frac{1}{10} & \\frac{1}{20} + \\frac{1}{20} = \\frac{1}{10} \\end{array}$$ How many solutions has this equation for $1 ≤ n ≤ 9$--hints--\ndiophantineEquation() should return 53490 js\nassert strictEqual(diophantineEquation(), 53490);\n--seed--\n--seed-contents--\n```js\nfunction diophantineEquation() {\nreturn true;\n}\ndiophantineEquation();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-157-solving-the-diophantine-equation.md",
      "source_type": "git_repo"
    },
    "token_count": 345,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0a0ba34a5060d501afd6eeab0cb86cca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-162-hexadecimal-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f40e1000cf542c50ff21\ntitle: 'Problem 162: Hexadecimal numbers'\nchallengeType: 1\nforumTopicId: 301796\ndashedName: problem-162-hexadecimal-numbers\n--description--\nIn the hexadecimal number system numbers are represented using 16 different digits:\n$$0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F$$\nThe hexadecimal number AF when written in the decimal number system equals $10 \\times 16 + 15 = 175$.\nIn the 3-digit hexadecimal numbers 10A, 1A0, A10, and A01 the digits 0,1 and A are all present.\nLike numbers written in base ten we write hexadecimal numbers without leading zeroes.\nHow many hexadecimal numbers containing at most sixteen hexadecimal digits exist with all of the digits 0,1, and A present at least once?\nGive your answer with hexadecimal number as a string.\nNote: (A,B,C,D,E and F in upper case, without any leading or trailing code that marks the number as hexadecimal and without leading zeroes , e.g. 1A3F and not: 1a3f and not 0x1a3f and not $1A3F and not #1A3F and not 0000001A3F)\n--hints--\nhexadecimalNumbers() should return a string.\njs\nassert.isString(hexadecimalNumbers());\nhexadecimalNumbers() should return the string 3D58725572C62302.\njs\nassert.strictEqual(hexadecimalNumbers(), '3D58725572C62302');\n--seed--\n--seed-contents--\n```js\nfunction hexadecimalNumbers() {\nreturn true;\n}\nhexadecimalNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1436,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-162-hexadecimal-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8b64a6c84f3137e46d70605e39149b70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-163-cross-hatched-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f40f1000cf542c50ff22\ntitle: 'Problem 163: Cross-hatched triangles'\nchallengeType: 1\nforumTopicId: 301797\ndashedName: problem-163-cross-hatched-triangles\n--description--\nConsider an equilateral triangle in which straight lines are drawn from each vertex to the middle of the opposite side, such as in the size 1 triangle in the sketch below.\nSixteen triangles of either different shape or size or orientation or location can now be observed in that triangle. Using size 1 triangles as building blocks, larger triangles can be formed, such as the size 2 triangle in the above sketch. One-hundred and four triangles of either different shape or size or orientation or location can now be observed in that size 2 triangle.\nIt can be observed that the size 2 triangle contains 4 size 1 triangle building blocks. A size 3 triangle would contain 9 size 1 triangle building blocks and a size $n$ triangle would thus contain $n^2$ size 1 triangle building blocks.\nIf we denote $T(n)$ as the number of triangles present in a triangle of size $n$, then\n$$\\begin{align}\n& T(1) = 16 \\\\\n& T(2) = 104\n\\end{align}$$\nFind $T(36)$.\n--hints--\ncrossHatchedTriangles() should return 343047.\njs\nassert.strictEqual(crossHatchedTriangles(), 343047);\n--seed--\n--seed-contents--\n```js\nfunction crossHatchedTriangles() {\nreturn true;\n}\ncrossHatchedTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1706,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-163-cross-hatched-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5c48b8fc60382eaa406760bb14fde850",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-161-triominoes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f40d1000cf542c50ff20\ntitle: 'Problem 161: Triominoes'\nchallengeType: 1\nforumTopicId: 301795\ndashedName: problem-161-triominoes\n--description--\nA triomino is a shape consisting of three squares joined via the edges.\nThere are two basic forms:\nIf all possible orientations are taken into account there are six:\nAny n by m grid for which nxm is divisible by 3 can be tiled with triominoes. If we consider tilings that can be obtained by reflection or rotation from another tiling as different there are 41 ways a 2 by 9 grid can be tiled with triominoes:\nIn how many ways can a 9 by 12 grid be tiled in this way by triominoes?\n--hints--\ntriominoes() should return 20574308184277972.\njs\nassert.strictEqual(triominoes(), 20574308184277972);\n--seed--\n--seed-contents--\n```js\nfunction triominoes() {\nreturn true;\n}\ntriominoes();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1703,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-161-triominoes.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "63e8275aad4bde5a2ef2471c22915575",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-167-investigating-ulam-sequences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4141000cf542c50ff26\ntitle: 'Problem 167: Investigating Ulam sequences'\nchallengeType: 1\nforumTopicId: 301801\ndashedName: problem-167-investigating-ulam-sequences\n--description--\nFor two positive integers $a$ and $b$, the Ulam sequence $U(a,b)$ is defined by ${U{(a,b)}_1} = a$, ${U{(a,b)}_2} = b$ and for $k > 2$, ${U{(a,b)}_k}$ is the smallest integer greater than ${U{(a,b)}_{(k-1)}}$ which can be written in exactly one way as the sum of two distinct previous members of $U(a,b)$.\nFor example, the sequence $U(1,2)$ begins with\n$$1, 2, 3 = 1 + 2, 4 = 1 + 3, 6 = 2 + 4, 8 = 2 + 6, 11 = 3 + 8$$\n5 does not belong to it because $5 = 1 + 4 = 2 + 3$ has two representations as the sum of two previous members, likewise $7 = 1 + 6 = 3 + 4$.\nFind $\\sum {U(2, 2n + 1)_k}$ for $2 ≤ n ≤ 10$, where $k = {10}^{11}$.\n--hints--\nulamSequences() should return 3916160068885.\njs\nassert.strictEqual(ulamSequences(), 3916160068885);\n--seed--\n--seed-contents--\n```js\nfunction ulamSequences() {\nreturn true;\n}\nulamSequences();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1124,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-167-investigating-ulam-sequences.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "42e7c2cd265b25cfd218605431f18e98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-166-criss-cross.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4131000cf542c50ff25\ntitle: 'Problem 166: Criss Cross'\nchallengeType: 1\nforumTopicId: 301800\ndashedName: problem-166-criss-cross\n--description--\nA 4x4 grid is filled with digits $d$, $0 ≤ d ≤ 9$.\nIt can be seen that in the grid\n$$\\begin{array}{}\n6 & 3 & 3 & 0 \\\\\n5 & 0 & 4 & 3 \\\\\n0 & 7 & 1 & 4 \\\\\n1 & 2 & 4 & 5\n\\end{array}$$\nthe sum of each row and each column has the value 12. Moreover the sum of each diagonal is also 12.\nIn how many ways can you fill a 4x4 grid with the digits $d$, $0 ≤ d ≤ 9$ so that each row, each column, and both diagonals have the same sum?\n--hints--\ncrissCross() should return 7130034.\njs\nassert.strictEqual(crissCross(), 7130034);\n--seed--\n--seed-contents--\n```js\nfunction crissCross() {\nreturn true;\n}\ncrissCross();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-166-criss-cross.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "35fa866a548b546ed4b37ffc13f16bbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-171-finding-numbers-for-which-the-sum-of-the-squares-of-the-digits-is-a-square.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4181000cf542c50ff2a\ntitle: >-\nProblem 171: Finding numbers for which the sum of the squares of the digits is\na square\nchallengeType: 1\nforumTopicId: 301806\ndashedName: >-\nproblem-171-finding-numbers-for-which-the-sum-of-the-squares-of-the-digits-is-a-square\n--description--\nFor a positive integer $n$, let $f(n)$ be the sum of the squares of the digits (in base 10) of $n$, e.g.\n$$\\begin{align}\n& f(3) = 3^2 = 9 \\\\\n& f(25) = 2^2 + 5^2 = 4 + 25 = 29 \\\\\n& f(442) = 4^2 + 4^2 + 2^2 = 16 + 16 + 4 = 36 \\\\\n\\end{align}$$\nFind the last nine digits of the sum of all $n$, $0 < n < {10}^{20}$, such that $f(n)$ is a perfect square.\n--hints--\nlastDigitsSumOfPerfectSquare() should return 142989277.\njs\nassert.strictEqual(lastDigitsSumOfPerfectSquare(), 142989277);\n--seed--\n--seed-contents--\n```js\nfunction lastDigitsSumOfPerfectSquare() {\nreturn true;\n}\nlastDigitsSumOfPerfectSquare();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-171-finding-numbers-for-which-the-sum-of-the-squares-of-the-digits-is-a-square.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4ba08fc14cd4b75a310adf3ca3d3815",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-172-investigating-numbers-with-few-repeated-digits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4181000cf542c50ff2b\ntitle: 'Problem 172: Investigating numbers with few repeated digits'\nchallengeType: 1\nforumTopicId: 301807\ndashedName: problem-172-investigating-numbers-with-few-repeated-digits\n--description--\nHow many 18-digit numbers $n$ (without leading zeros) are there such that no digit occurs more than three times in $n$?\n--hints--\nnumbersWithRepeatedDigits() should return 227485267000992000.\njs\nassert.strictEqual(numbersWithRepeatedDigits(), 227485267000992000);\n--seed--\n--seed-contents--\n```js\nfunction numbersWithRepeatedDigits() {\nreturn true;\n}\nnumbersWithRepeatedDigits();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 696,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-172-investigating-numbers-with-few-repeated-digits.md",
      "source_type": "git_repo"
    },
    "token_count": 173,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "68d2d1dbc3d25412d95e626f089ff923",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-177-integer-angled-quadrilaterals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f41e1000cf542c50ff30\ntitle: 'Problem 177: Integer angled Quadrilaterals'\nchallengeType: 1\nforumTopicId: 301812\ndashedName: problem-177-integer-angled-quadrilaterals\n--description--\nLet ABCD be a convex quadrilateral, with diagonals AC and BD. At each vertex the diagonal makes an angle with each of the two sides, creating eight corner angles.\nFor example, at vertex A, the two angles are CAD, CAB.\nWe call such a quadrilateral for which all eight corner angles have integer values when measured in degrees an \"integer angled quadrilateral\". An example of an integer angled quadrilateral is a square, where all eight corner angles are 45°. Another example is given by DAC = 20°, BAC = 60°, ABD = 50°, CBD = 30°, BCA = 40°, DCA = 30°, CDB = 80°, ADB = 50°.\nWhat is the total number of non-similar integer angled quadrilaterals?\nNote: In your calculations you may assume that a calculated angle is integral if it is within a tolerance of ${10}^{-9}$ of an integer value.\n--hints--\nintegerAngledQuadrilaterals() should return 129325.\njs\nassert.strictEqual(integerAngledQuadrilaterals(), 129325);\n--seed--\n--seed-contents--\n```js\nfunction integerAngledQuadrilaterals() {\nreturn true;\n}\nintegerAngledQuadrilaterals();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1616,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-177-integer-angled-quadrilaterals.md",
      "source_type": "git_repo"
    },
    "token_count": 345,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9ec26dae88dab6315cb86e550b4cb44f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-165-intersections.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4111000cf542c50ff24\ntitle: 'Problem 165: Intersections'\nchallengeType: 1\nforumTopicId: 301799\ndashedName: problem-165-intersections\n--description--\nA segment is uniquely defined by its two endpoints By considering two line segments in plane geometry there are three possibilities: the segments have zero points, one point, or infinitely many points in common Moreover when two segments have exactly one point in common it might be the case that common point is an endpoint of either one of the segments or of both If a common point of two segments is not an endpoint of either of the segments it is an interior point of both segments We will call a common point $T$ of two segments $L_1$ and $L_2$ a true intersection point of $L_1$ and $L_2$ if $T$ is the only common point of $L_1$ and $L_2$ and $T$ is an interior point of both segments Consider the three segments $L_1$, $L_2$, and $L_3$:\n$$\\begin{align}\n& L_1: (27, 44) \\;\\text{to}\\; (12, 32) \\\\\n& L_2: (46, 53) \\;\\text{to}\\; (17, 62) \\\\\n& L_3: (46, 70) \\;\\text{to}\\; (22, 40) \\\\\n\\end{align}$$\nIt can be verified that line segments $L_2$ and $L_3$ have a true intersection point We note that as the one of the end points of $L_3$: (22, 40) lies on $L_1$ this is not considered to be a true point of intersection $L_1$ and $L_2$ have no common point So among the three line segments, we find one true intersection point Now let us do the same for 5000 line segments To this end, we generate 20000 numbers using the so-called \"Blum Blum Shub\" pseudo-random number generator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2427,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-165-intersections.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b8d3cd055bdfca9e804cf700f71dc42c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-165-intersections.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "true intersection point We note that as the one of the end points of $L_3$: (22, 40) lies on $L_1$ this is not considered to be a true point of intersection $L_1$ and $L_2$ have no common point So among the three line segments, we find one true intersection point Now let us do the same for 5000 line segments To this end, we generate 20000 numbers using the so-called \"Blum Blum Shub\" pseudo-random number generator$$\\begin{align}\n& s_0 = 290797 \\\\\n& s_{n + 1} = s_n × s_n (\\text{modulo}\\; 50515093) \\\\\n& t_n = s_n (\\text{modulo}\\; 500) \\\\\n\\end{align}$$\nTo create each line segment, we use four consecutive numbers $t_n$ That is, the first line segment is given by:\n($_t$1, $t_2$) to ($t_3$, $t_4$)\nThe first four numbers computed according to the above generator should be: 27, 144, 12 and 232 The first segment would thus be (27, 144) to (12, 232) How many distinct true intersection points are found among the 5000 line segments --hints--\ndistinctIntersections() should return 2868868 js\nassert strictEqual(distinctIntersections(), 2868868);\n--seed--\n--seed-contents--\n```js\nfunction distinctIntersections() {\nreturn true;\n}\ndistinctIntersections();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2427,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-165-intersections.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f0fd4a434d23f75b67eed131456e0346",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-168-number-rotations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4151000cf542c50ff27\ntitle: 'Problem 168: Number Rotations'\nchallengeType: 1\nforumTopicId: 301802\ndashedName: problem-168-number-rotations\n--description--\nConsider the number 142857 We can right-rotate this number by moving the last digit (7) to the front of it, giving us 714285 It can be verified that $714285 = 5 × 142857$ This demonstrates an unusual property of 142857: it is a divisor of its right-rotation For integer number of digits $a$ and $b$, find the last 5 digits of the sum of all integers $n$, $10^a < n < 10^b$, that have this property --hints--\nnumberRotations(2, 10) should return 98311 js\nassert strictEqual(numberRotations(2, 10), 98311);\nnumberRotations(2, 100) should return 59206 js\nassert strictEqual(numberRotations(2, 100), 59206);\n--seed--\n--seed-contents--\n```js\nfunction numberRotations(a, b) {\nreturn 0;\n}\nnumberRotations();\n```\n--solutions--\n```js\nfunction numberRotations(minDigits, maxDigits) {\nconst DIGITS_TO_KEEP = 100000n;\nconst powersOfTen = Array(maxDigits)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-168-number-rotations.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "42bc5e238c7789b1813d2922e28829da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-168-number-rotations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "For integer number of digits $a$ and $b$, find the last 5 digits of the sum of all integers $n$, $10^a < n < 10^b$, that have this property --hints-- numberRotations(2, 10) should return 98311 js assert strictEqual(numberRotations(2, 10), 98311); numberRotations(2, 100) should return 59206 js assert strictEqual(numberRotations(2, 100), 59206); --seed-- --seed-contents-- ```js function numberRotations(a, b) { return 0; } numberRotations(); ``` --solutions-- ```js function numberRotations(minDigits, maxDigits) { const DIGITS_TO_KEEP = 100000n; const powersOfTen = Array(maxDigits)fill(0);\npowersOfTen[0] = 1n;\nfor (let i = 1; i < maxDigits; i++) {\npowersOfTen[i] = powersOfTen[i - 1] * 10n;\n}\n// We want numbers of the form xd * m = dx\n// Or more precisely:\n//   (x * 10 + d) * m = d*10^(n-1) + x\n// Solving for x:\n//   x = d (10^(n-1) - m) / (10 * m - 1)\nlet total = 0n;\nfor (let numDigits = minDigits; numDigits <= maxDigits; numDigits++) {\n// Check all multiplier - digit pairs to see if a candidate can be built\n//  with the correct number of digits\nfor (let multiplier = 1n; multiplier < 10n; multiplier++) {\nfor (let lastDigit = 1n; lastDigit < 10n; lastDigit++) {\nconst numerator   = lastDigit * (powersOfTen[numDigits - 1] - multiplier);\nconst denominator = (powersOfTen[1] * multiplier - 1n);\nif (numerator % denominator === 0n) {\nconst candidate = (numerator / denominator) * 10n + lastDigit;\nif (candidate toString() length === numDigits) {\ntotal = (total + candidate) % DIGITS_TO_KEEP;\n}\n}\n}\n}\n}\nreturn parseInt(total);\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-168-number-rotations.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b01650f2c7c7c7f5b829536a4e9c80f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-176-right-angled-triangles-that-share-a-cathetus.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f41c1000cf542c50ff2f\ntitle: 'Problem 176: Right-angled triangles that share a cathetus'\nchallengeType: 1\nforumTopicId: 301811\ndashedName: problem-176-right-angled-triangles-that-share-a-cathetus\n--description--\nThe four right-angled triangles with sides (9,12,15), (12,16,20), (5,12,13) and (12,35,37) all have one of the shorter sides (catheti) equal to 12. It can be shown that no other integer sided right-angled triangle exists with one of the catheti equal to 12.\nFind the smallest integer that can be the length of a cathetus of exactly 47547 different integer sided right-angled triangles.\n--hints--\ntrianglesSharingCathetus() should return 96818198400000.\njs\nassert.strictEqual(trianglesSharingCathetus(), 96818198400000);\n--seed--\n--seed-contents--\n```js\nfunction trianglesSharingCathetus() {\nreturn true;\n}\ntrianglesSharingCathetus();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-176-right-angled-triangles-that-share-a-cathetus.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "41955d26b1eb3a745c71b5deda099f9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-180-rational-zeros-of-a-function-of-three-variables.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4201000cf542c50ff33\ntitle: 'Problem 180: Rational zeros of a function of three variables'\nchallengeType: 1\nforumTopicId: 301816\ndashedName: problem-180-rational-zeros-of-a-function-of-three-variables\n--description--\nFor any integer $n$, consider the three functions\n$$\\begin{align}\n& f_{1,n}(x,y,z) = x^{n + 1} + y^{n + 1} − z^{n + 1}\\\\\n& f_{2,n}(x,y,z) = (xy + yz + zx) \\times (x^{n - 1} + y^{n - 1} − z^{n - 1})\\\\\n& f_{3,n}(x,y,z) = xyz \\times (x^{n - 2} + y^{n - 2} − z^{n - 2})\n\\end{align}$$\nand their combination\n$$\\begin{align}\n& f_n(x,y,z) = f_{1,n}(x,y,z) + f_{2,n}(x,y,z) − f_{3,n}(x,y,z)\n\\end{align}$$\nWe call $(x,y,z)$ a golden triple of order $k$ if $x$, $y$, and $z$ are all rational numbers of the form $\\frac{a}{b}$ with $0 < a < b ≤ k$ and there is (at least) one integer $n$, so that $f_n(x,y,z) = 0$.\nLet $s(x,y,z) = x + y + z$.\nLet $t = \\frac{u}{v}$ be the sum of all distinct $s(x,y,z)$ for all golden triples $(x,y,z)$ of order 35. All the $s(x,y,z)$ and $t$ must be in reduced form.\nFind $u + v$.\n--hints--\nrationalZeros() should return 285196020571078980.\njs\nassert.strictEqual(rationalZeros(), 285196020571078980);\n--seed--\n--seed-contents--\n```js\nfunction rationalZeros() {\nreturn true;\n}\nrationalZeros();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1368,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-180-rational-zeros-of-a-function-of-three-variables.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "770a6c67ae0c4e9f5b0d5b9a500f8dc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-179-consecutive-positive-divisors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f41f1000cf542c50ff32\ntitle: 'Problem 179: Consecutive positive divisors'\nchallengeType: 1\nforumTopicId: 301814\ndashedName: problem-179-consecutive-positive-divisors\n--description--\nFind the number of integers $1 < n < {10}^7$, for which $n$ and $n + 1$ have the same number of positive divisors. For example, 14 has the positive divisors 1, 2, 7, 14 while 15 has 1, 3, 5, 15.\n--hints--\nconsecutivePositiveDivisors() should return 986262.\njs\nassert.strictEqual(consecutivePositiveDivisors(), 986262);\n--seed--\n--seed-contents--\n```js\nfunction consecutivePositiveDivisors() {\nreturn true;\n}\nconsecutivePositiveDivisors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-179-consecutive-positive-divisors.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4b10206624e92ed67d50c1719b29c8c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-178-step-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f41e1000cf542c50ff31\ntitle: 'Problem 178: Step Numbers'\nchallengeType: 1\nforumTopicId: 301813\ndashedName: problem-178-step-numbers\n--description--\nConsider the number 45656.\nIt can be seen that each pair of consecutive digits of 45656 has a difference of one.\nA number for which every pair of consecutive digits has a difference of one is called a step number.\nA pandigital number contains every decimal digit from 0 to 9 at least once.\nHow many pandigital step numbers less than ${10}^{40}$ are there?\n--hints--\nstepNumbers() should return 126461847755.\njs\nassert.strictEqual(stepNumbers(), 126461847755);\n--seed--\n--seed-contents--\n```js\nfunction stepNumbers() {\nreturn true;\n}\nstepNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-178-step-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3b538b41dec6ded693e5b0bc580aef53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-183-maximum-product-of-parts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4231000cf542c50ff36\ntitle: 'Problem 183: Maximum product of parts'\nchallengeType: 1\nforumTopicId: 301819\ndashedName: problem-183-maximum-product-of-parts\n--description--\nLet $N$ be a positive integer and let $N$ be split into $k$ equal parts, $r = \\frac{N}{k}$, so that $N = r + r + \\cdots + r$.\nLet $P$ be the product of these parts, $P = r × r × \\cdots × r = r^k$.\nFor example, if 11 is split into five equal parts, 11 = 2.2 + 2.2 + 2.2 + 2.2 + 2.2, then $P = {2.2}^5 = 51.53632$.\nLet $M(N) = P_{max}$ for a given value of $N$.\nIt turns out that the maximum for $N = 11$ is found by splitting eleven into four equal parts which leads to $P_{max} = {(\\frac{11}{4})}^4$; that is, $M(11) = \\frac{14641}{256} = 57.19140625$, which is a terminating decimal.\nHowever, for $N = 8$ the maximum is achieved by splitting it into three equal parts, so $M(8) = \\frac{512}{27}$, which is a non-terminating decimal.\nLet $D(N) = N$ if $M(N)$ is a non-terminating decimal and $D(N) = -N$ if $M(N)$ is a terminating decimal.\nFor example, $\\sum D(N)$ for $5 ≤ N ≤ 100$ is 2438.\nFind $\\sum D(N)$ for $5 ≤ N ≤ 10000$.\n--hints--\nmaximumProductOfParts() should return 48861552.\njs\nassert.strictEqual(maximumProductOfParts(), 48861552);\n--seed--\n--seed-contents--\n```js\nfunction maximumProductOfParts() {\nreturn true;\n}\nmaximumProductOfParts();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-183-maximum-product-of-parts.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "542662804c728032e7d51e1d3e31bf0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-184-triangles-containing-the-origin.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4241000cf542c50ff37\ntitle: 'Problem 184: Triangles containing the origin'\nchallengeType: 1\nforumTopicId: 301820\ndashedName: problem-184-triangles-containing-the-origin\n--description--\nConsider the set $I_r$ of points $(x,y)$ with integer coordinates in the interior of the circle with radius $r$, centered at the origin, i.e. $x^2 + y^2 < r^2$.\nFor a radius of 2, $I_2$ contains the nine points (0,0), (1,0), (1,1), (0,1), (-1,1), (-1,0), (-1,-1), (0,-1) and (1,-1). There are eight triangles having all three vertices in $I_2$ which contain the origin in the interior. Two of them are shown below, the others are obtained from these by rotation.\nFor a radius of 3, there are 360 triangles containing the origin in the interior and having all vertices in $I_3$ and for $I_5$ the number is 10600.\nHow many triangles are there containing the origin in the interior and having all three vertices in $I_{105}$?\n--hints--\ntrianglesContainingOrigin() should return 1725323624056.\njs\nassert.strictEqual(trianglesContainingOrigin(), 1725323624056);\n--seed--\n--seed-contents--\n```js\nfunction trianglesContainingOrigin() {\nreturn true;\n}\ntrianglesContainingOrigin();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1638,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-184-triangles-containing-the-origin.md",
      "source_type": "git_repo"
    },
    "token_count": 345,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bbab37d26b27b92ac7b44e4826bd0c24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-187-semiprimes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4291000cf542c50ff3a\ntitle: 'Problem 187: Semiprimes'\nchallengeType: 1\nforumTopicId: 301823\ndashedName: problem-187-semiprimes\n--description--\nA composite is a number containing at least two prime factors. For example, $15 = 3 × 5; 9 = 3 × 3; 12 = 2 × 2 × 3$.\nThere are ten composites below thirty containing precisely two, not necessarily distinct, prime factors: 4, 6, 9, 10, 14, 15, 21, 22, 25, 26.\nHow many composite integers, $n < {10}^8$, have precisely two, not necessarily distinct, prime factors?\n--hints--\nsemiPrimes() should return 17427258.\njs\nassert.strictEqual(semiPrimes(), 17427258);\n--seed--\n--seed-contents--\n```js\nfunction semiPrimes() {\nreturn true;\n}\nsemiPrimes();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 796,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-187-semiprimes.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "699ffecaa8626d6f5807e03fb70082c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-182-rsa-encryption.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4231000cf542c50ff35\ntitle: 'Problem 182: RSA encryption'\nchallengeType: 1\nforumTopicId: 301818\ndashedName: problem-182-rsa-encryption\n--description--\nThe RSA encryption is based on the following procedure:\nGenerate two distinct primes p and q Compute n=p*q and φ=(p-1)(q-1) Find an integer e, 1 < e < φ, such that gcd(e,φ) = 1\nA message in this system is a number in the interval [0,n-1] A text to be encrypted is then somehow converted to messages (numbers in the interval [0,n-1]) To encrypt the text, for each message, m, c=me mod n is calculated To decrypt the text, the following procedure is needed: calculate d such that ed=1 mod φ, then for each encrypted message, c, calculate m=cd mod n There exist values of e and m such that me mod n = m We call messages m for which me mod n=m unconcealed messages An issue when choosing e is that there should not be too many unconcealed messages For instance, let p=19 and q=37 Then n=19*37=703 and φ=18*36=648 If we choose e=181, then, although gcd(181,648)=1 it turns out that all possible messages\nm (0≤m≤n-1) are unconcealed when calculating me mod n For any valid choice of e there exist some unconcealed messages It's important that the number of unconcealed messages is at a minimum For any given p and q, find the sum of all values of e, 1 < e < φ(p,q) and gcd(e,φ)=1, so that the number of unconcealed messages for this value of e is at a minimum --hints--\nRSAEncryption should be a function js\nassert isFunction(RSAEncryption);\nRSAEncryption should return a number js\nassert strictEqual(typeof RSAEncryption(19, 37), 'number');\nRSAEncryption(19, 37) should return 17766 js\nassert strictEqual(RSAEncryption(19, 37), 17766);\nRSAEncryption(283, 409) should return 466196580 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-182-rsa-encryption.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1a3fa4ce6ba16ffac4e32695523df616",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-182-rsa-encryption.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a minimum For any given p and q, find the sum of all values of e, 1 < e < φ(p,q) and gcd(e,φ)=1, so that the number of unconcealed messages for this value of e is at a minimum --hints-- RSAEncryption should be a function js assert isFunction(RSAEncryption); RSAEncryption should return a number js assert strictEqual(typeof RSAEncryption(19, 37), 'number'); RSAEncryption(19, 37) should return 17766 js assert strictEqual(RSAEncryption(19, 37), 17766); RSAEncryption(283, 409) should return 466196580 js assertstrictEqual(RSAEncryption(283, 409), 466196580);\nRSAEncryption(1009, 3643) should return 399788195976 js\nassert strictEqual(RSAEncryption(19, 37), 17766);\n--seed--\n--seed-contents--\n```js\nfunction RSAEncryption(p, q) {\nreturn true;\n}\nRSAEncryption(19, 37);\n```\n--solutions--\n```js\nfunction gcd(a, b) {\nif (b)\nreturn gcd(b, a % b);\nelse\nreturn a;\n}\nfunction RSAEncryption(p, q) {\nlet phi = (p - 1) * (q - 1);\nlet best = Number MAX_SAFE_INTEGER;\nlet sum = 0;\nfor (let e = 0; e < phi; ++e) {\nif ( (gcd(e, phi) == 1))\ncontinue;\nlet msg = (gcd(p - 1, e - 1) + 1) * (gcd(q - 1, e - 1) + 1);\nif (best == msg) {\nsum += e;\n} else if (best > msg) {\nbest = msg;\nsum = e;\n}\n}\nreturn sum;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-182-rsa-encryption.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a91eca8e766e444fb549f85c697f12df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-185-number-mind.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4251000cf542c50ff38\ntitle: 'Problem 185: Number Mind'\nchallengeType: 1\nforumTopicId: 301821\ndashedName: problem-185-number-mind\n--description--\nThe game Number Mind is a variant of the well known game Master Mind Instead of colored pegs, you have to guess a secret sequence of digits After each guess you're only told in how many places you've guessed the correct digit So, if the sequence was 1234 and you guessed 2036, you'd be told that you have one correct digit; however, you would NOT be told that you also have another digit in the wrong place For instance, given the following guesses for a 5-digit secret sequence,\n$$\\begin{align}\n& 90342 ;2\\;\\text{correct}\\\\\n& 70794 ;0\\;\\text{correct}\\\\\n& 39458 ;2\\;\\text{correct}\\\\\n& 34109 ;1\\;\\text{correct}\\\\\n& 51545 ;2\\;\\text{correct}\\\\\n& 12531 ;1\\;\\text{correct}\n\\end{align}$$\nThe correct sequence 39542 is unique",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-185-number-mind.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "82d53c9a7bd9f4c067e80d2ecf3ae3fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-185-number-mind.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "guessed the correct digit So, if the sequence was 1234 and you guessed 2036, you'd be told that you have one correct digit; however, you would NOT be told that you also have another digit in the wrong place For instance, given the following guesses for a 5-digit secret sequence, $$\\begin{align} & 90342 ;2\\;\\text{correct}\\\\ & 70794 ;0\\;\\text{correct}\\\\ & 39458 ;2\\;\\text{correct}\\\\ & 34109 ;1\\;\\text{correct}\\\\ & 51545 ;2\\;\\text{correct}\\\\ & 12531 ;1\\;\\text{correct} \\end{align}$$ The correct sequence 39542 is uniqueBased on the following guesses,\n$$\\begin{align}\n& 5616185650518293 ;2\\;\\text{correct}\\\\\n& 3847439647293047 ;1\\;\\text{correct}\\\\\n& 5855462940810587 ;3\\;\\text{correct}\\\\\n& 9742855507068353 ;3\\;\\text{correct}\\\\\n& 4296849643607543 ;3\\;\\text{correct}\\\\\n& 3174248439465858 ;1\\;\\text{correct}\\\\\n& 4513559094146117 ;2\\;\\text{correct}\\\\\n& 7890971548908067 ;3\\;\\text{correct}\\\\\n& 8157356344118483 ;1\\;\\text{correct}\\\\\n& 2615250744386899 ;2\\;\\text{correct}\\\\\n& 8690095851526254 ;3\\;\\text{correct}\\\\\n& 6375711915077050 ;1\\;\\text{correct}\\\\\n& 6913859173121360 ;1\\;\\text{correct}\\\\\n& 6442889055042768 ;2\\;\\text{correct}\\\\\n& 2321386104303845 ;0\\;\\text{correct}\\\\\n& 2326509471271448 ;2\\;\\text{correct}\\\\\n& 5251583379644322 ;2\\;\\text{correct}\\\\\n& 1748270476758276 ;3\\;\\text{correct}\\\\\n& 4895722652190306 ;1\\;\\text{correct}\\\\\n& 3041631117224635 ;3\\;\\text{correct}\\\\\n& 1841236454324589 ;3\\;\\text{correct}\\\\\n& 2659862637316867 ;2\\;\\text{correct}\n\\end{align}$$\nFind the unique 16-digit secret sequence",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-185-number-mind.md",
      "source_type": "git_repo"
    },
    "token_count": 556,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2978856a5c1e8a71fd2eaf4800681838",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-185-number-mind.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "following guesses, $$\\begin{align} & 5616185650518293 ;2\\;\\text{correct}\\\\ & 3847439647293047 ;1\\;\\text{correct}\\\\ & 5855462940810587 ;3\\;\\text{correct}\\\\ & 9742855507068353 ;3\\;\\text{correct}\\\\ & 4296849643607543 ;3\\;\\text{correct}\\\\ & 3174248439465858 ;1\\;\\text{correct}\\\\ & 4513559094146117 ;2\\;\\text{correct}\\\\ & 7890971548908067 ;3\\;\\text{correct}\\\\ & 8157356344118483 ;1\\;\\text{correct}\\\\ & 2615250744386899 ;2\\;\\text{correct}\\\\ & 8690095851526254 ;3\\;\\text{correct}\\\\ & 6375711915077050 ;1\\;\\text{correct}\\\\ & 6913859173121360 ;1\\;\\text{correct}\\\\ & 6442889055042768 ;2\\;\\text{correct}\\\\ & 2321386104303845 ;0\\;\\text{correct}\\\\ & 2326509471271448 ;2\\;\\text{correct}\\\\ & 5251583379644322 ;2\\;\\text{correct}\\\\ & 1748270476758276 ;3\\;\\text{correct}\\\\ & 4895722652190306 ;1\\;\\text{correct}\\\\ & 3041631117224635 ;3\\;\\text{correct}\\\\ & 1841236454324589 ;3\\;\\text{correct}\\\\ & 2659862637316867 ;2\\;\\text{correct} \\end{align}$$ Find the unique 16-digit secret sequence--hints--\nnumberMind() should return 4640261571849533 js\nassert strictEqual(numberMind(), 4640261571849533);\n--seed--\n--seed-contents--\n```js\nfunction numberMind() {\nreturn true;\n}\nnumberMind();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-185-number-mind.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "eac7ed08ecc148cede8d1f6194cdead4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-189-tri-colouring-a-triangular-grid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4291000cf542c50ff3c\ntitle: 'Problem 189: Tri-coloring a triangular grid'\nchallengeType: 1\nforumTopicId: 301825\ndashedName: problem-189-tri-colouring-a-triangular-grid\n--description--\nConsider the following configuration of 64 triangles:\nWe wish to color the interior of each triangle with one of three colors: red, green or blue, so that no two neighboring triangles have the same color. Such a coloring shall be called valid. Here, two triangles are said to be neighboring if they share an edge. Note: if they only share a vertex, then they are not neighbors.\nFor example, here is a valid coloring of the above grid:\nA coloring C' which is obtained from a coloring C by rotation or reflection is considered distinct from C unless the two are identical.\nHow many distinct valid colorings are there for the above configuration?\n--hints--\ntriangularGridColoring() should return 10834893628237824.\njs\nassert.strictEqual(triangularGridColoring(), 10834893628237824);\n--seed--\n--seed-contents--\n```js\nfunction triangularGridColoring() {\nreturn true;\n}\ntriangularGridColoring();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1762,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-189-tri-colouring-a-triangular-grid.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4c4b746a68f391b96e04970d3b14beb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-188-the-hyperexponentiation-of-a-number.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4291000cf542c50ff3b\ntitle: 'Problem 188: The hyperexponentiation of a number'\nchallengeType: 1\nforumTopicId: 301824\ndashedName: problem-188-the-hyperexponentiation-of-a-number\n--description--\nThe hyperexponentiation or tetration of a number $a$ by a positive integer $b$, denoted by $a↑↑b$ or ${}^ba$, is recursively defined by:\n$a↑↑1 = a$,\n$a↑↑(k+1) = a^{(a↑↑k)}$.\nThus we have e.g. $3↑↑2 = 3^3 = 27$, hence $3↑↑3 = 3^{27} = 7625597484987$ and $3↑↑4$ is roughly ${10}^{3.6383346400240996 \\times {10}^{12}}$. Find the last 8 digits of $1777↑↑1855$.\n--hints--\nhyperexponentation() should return 95962097.\njs\nassert.strictEqual(hyperexponentation(), 95962097);\n--seed--\n--seed-contents--\n```js\nfunction hyperexponentation() {\nreturn true;\n}\nhyperexponentation();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-188-the-hyperexponentiation-of-a-number.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4458bf2841b44d9da64f2d05515785cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-186-connectedness-of-a-network.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4281000cf542c50ff39\ntitle: 'Problem 186: Connectedness of a network'\nchallengeType: 1\nforumTopicId: 301822\ndashedName: problem-186-connectedness-of-a-network\n--description--\nHere are the records from a busy telephone system with one million users:\n| RecNr | Caller | Called |\n|-------|--------|--------|\n|   1   | 200007 | 100053 |\n|   2   | 600183 | 500439 |\n|   3   | 600863 | 701497 |\n| | | |\nThe telephone number of the caller and the called number in record $n$ are $Caller(n) = S_{2n - 1}$ and $Called(n) = S_{2n}$ where ${S}_{1,2,3,\\ldots}$ come from the \"Lagged Fibonacci Generator\":\nFor $1 ≤ k ≤ 55$, $S_k = [100003 - 200003k + 300007{k}^3]\\;(\\text{modulo}\\;1000000)$\nFor $56 ≤ k$, $S_k = [S_{k - 24} + S_{k - 55}]\\;(\\text{modulo}\\;1000000)$\nIf $Caller(n) = Called(n)$ then the user is assumed to have misdialled and the call fails; otherwise the call is successful From the start of the records, we say that any pair of users $X$ and $Y$ are friends if $X$ calls $Y$ or vice-versa Similarly, $X$ is a friend of a friend of $Z$ if $X$ is a friend of $Y$ and $Y$ is a friend of $Z$; and so on for longer chains The Prime Minister's phone number is 524287 After how many successful calls, not counting misdials, will 99% of the users (including the PM) be a friend, or a friend of a friend etc , of the Prime Minister --hints--\nconnectednessOfANetwork() should return 2325629 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1699,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-186-connectedness-of-a-network.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e160113d24254d1ae2436f66168a4594",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-186-connectedness-of-a-network.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "vice-versa Similarly, $X$ is a friend of a friend of $Z$ if $X$ is a friend of $Y$ and $Y$ is a friend of $Z$; and so on for longer chains The Prime Minister's phone number is 524287 After how many successful calls, not counting misdials, will 99% of the users (including the PM) be a friend, or a friend of a friend etc , of the Prime Minister --hints-- connectednessOfANetwork() should return 2325629 js assertstrictEqual(connectednessOfANetwork(), 2325629);\n--seed--\n--seed-contents--\n```js\nfunction connectednessOfANetwork() {\nreturn true;\n}\nconnectednessOfANetwork();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1699,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-186-connectedness-of-a-network.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d5948a55cf7eb775de308a4f165a0ea0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-190-maximising-a-weighted-product.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f42b1000cf542c50ff3d\ntitle: 'Problem 190: Maximizing a weighted product'\nchallengeType: 1\nforumTopicId: 301828\ndashedName: problem-190-maximising-a-weighted-product\n--description--\nLet $S_m = (x_1, x_2, \\ldots, x_m)$ be the $m$-tuple of positive real numbers with $x_1 + x_2 + \\cdots + x_m = m$ for which $P_m = x_1 \\times {x_2}^2 \\times \\cdots \\times {x_m}^m$ is maximized.\nFor example, it can be verified that $[P_{10}] = 4112$ ([ ] is the integer part function).\nFind $\\sum {[P_m]}$ for $2 ≤ m ≤ 15$.\n--hints--\nmaximizingWeightedProduct() should return 371048281.\njs\nassert.strictEqual(maximizingWeightedProduct(), 371048281);\n--seed--\n--seed-contents--\n```js\nfunction maximizingWeightedProduct() {\nreturn true;\n}\nmaximizingWeightedProduct();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 853,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-190-maximising-a-weighted-product.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "387245452ba25464fb3d77d7a94378ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-191-prize-strings.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f42b1000cf542c50ff3e\ntitle: 'Problem 191: Prize Strings'\nchallengeType: 1\nforumTopicId: 301829\ndashedName: problem-191-prize-strings\n--description--\nA particular school offers cash rewards to children with good attendance and punctuality. If they are absent for three consecutive days or late on more than one occasion then they forfeit their prize.\nDuring an n-day period a trinary string is formed for each child consisting of L's (late), O's (on time), and A's (absent).\nAlthough there are eighty-one trinary strings for a 4-day period that can be formed, exactly forty-three strings would lead to a prize:\nmarkup\nOOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA\nOAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO\nAOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL\nAALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA\nLAOO LAOA LAAO\nHow many \"prize\" strings exist over a 30-day period?\n--hints--\nprizeStrings() should return 1918080160.\njs\nassert.strictEqual(prizeStrings(), 1918080160);\n--seed--\n--seed-contents--\n```js\nfunction prizeStrings() {\nreturn true;\n}\nprizeStrings();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-191-prize-strings.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "647221f2f1c2d143abd8e9d1c7b01ea8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-195-inscribed-circles-of-triangles-with-one-angle-of-60-degrees.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4311000cf542c50ff43\ntitle: 'Problem 195: Inscribed circles of triangles with one angle of 60 degrees'\nchallengeType: 1\nforumTopicId: 301833\ndashedName: problem-195-inscribed-circles-of-triangles-with-one-angle-of-60-degrees\n--description--\nLet's call an integer sided triangle with exactly one angle of 60° a 60° triangle.\nLet $r$ be the radius of the inscribed circle of such a 60° triangle.\nThere are 1234 60° triangles for which $r ≤ 100$.\nLet $T(n)$ be the number of 60° triangles for which $r ≤ n$, so $T(100) = 1234$, $T(1000) = 22767$, and $T(10000) = 359912$.\nFind $T(1053779)$.\n--hints--\ninscribedCirclesOfTriangles() should return 75085391.\njs\nassert.strictEqual(inscribedCirclesOfTriangles(), 75085391);\n--seed--\n--seed-contents--\n```js\nfunction inscribedCirclesOfTriangles() {\nreturn true;\n}\ninscribedCirclesOfTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 950,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-195-inscribed-circles-of-triangles-with-one-angle-of-60-degrees.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7a4bcf91e34ec2dffd5fb11911bc97ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-192-best-approximations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f42c1000cf542c50ff3f\ntitle: 'Problem 192: Best Approximations'\nchallengeType: 1\nforumTopicId: 301830\ndashedName: problem-192-best-approximations\n--description--\nLet $x$ be a real number.\nA best approximation to $x$ for the denominator bound $d$ is a rational number $\\frac{r}{s}$ in reduced form, with $s ≤ d$, such that any rational number which is closer to $x$ than $\\frac{r}{s}$ has a denominator larger than $d$:\n$$|\\frac{p}{q} - x| < |\\frac{r}{s} - x| ⇒ q > d$$\nFor example, the best approximation to $\\sqrt{13}$ for the denominator bound $20$ is $\\frac{18}{5}$ and the best approximation to $\\sqrt{13}$ for the denominator bound $30$ is $\\frac{101}{28}$.\nFind the sum of all denominators of the best approximations to $\\sqrt{n}$ for the denominator bound ${10}^{12}$, where $n$ is not a perfect square and $1 < n ≤ 100000$.\n--hints--\nbestApproximations() should return 57060635927998344.\njs\nassert.strictEqual(bestApproximations(), 57060635927998344);\n--seed--\n--seed-contents--\n```js\nfunction bestApproximations() {\nreturn true;\n}\nbestApproximations();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-192-best-approximations.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9da305ab554f26f7e10ea679dda38a3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-194-coloured-configurations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f42f1000cf542c50ff40\ntitle: 'Problem 194: Colored Configurations'\nchallengeType: 1\nforumTopicId: 301832\ndashedName: problem-194-coloured-configurations\n--description--\nConsider graphs built with the units A:\nand B: , where the units are glued along the vertical edges as in the graph .\nA configuration of type $(a,b,c)$ is a graph thus built of $a$ units A and $b$ units B, where the graph's vertices are colored using up to $c$ colors, so that no two adjacent vertices have the same color. The compound graph above is an example of a configuration of type $(2,2,6)$, in fact of type $(2,2,c)$ for all $c ≥ 4$\nLet $N(a,b,c)$ be the number of configurations of type $(a,b,c)$. For example, $N(1,0,3) = 24$, $N(0,2,4) = 92928$ and $N(2,2,3) = 20736$.\nFind the last 8 digits of $N(25,75,1984)$.\n--hints--\ncoloredConfigurations() should return 61190912.\njs\nassert.strictEqual(coloredConfigurations(), 61190912);\n--seed--\n--seed-contents--\n```js\nfunction coloredConfigurations() {\nreturn true;\n}\ncoloredConfigurations();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1720,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-194-coloured-configurations.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "31b3ff406e4276aaea20dca26c150b79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-193-squarefree-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f42f1000cf542c50ff41\ntitle: 'Problem 193: Squarefree Numbers'\nchallengeType: 1\nforumTopicId: 301831\ndashedName: problem-193-squarefree-numbers\n--description--\nA positive integer $n$ is called squarefree, if no square of a prime divides $n$, thus 1, 2, 3, 5, 6, 7, 10, 11 are squarefree, but not 4, 8, 9, 12.\nHow many squarefree numbers are there below $2^{50}$?\n--hints--\nsquarefreeNumbers() should return 684465067343069.\njs\nassert.strictEqual(squarefreeNumbers(), 684465067343069);\n--seed--\n--seed-contents--\n```js\nfunction squarefreeNumbers() {\nreturn true;\n}\nsquarefreeNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 686,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-193-squarefree-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a4ddccc4538e2cd209c001b843ad610e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-197-investigating-the-behaviour-of-a-recursively-defined-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4311000cf542c50ff44\ntitle: 'Problem 197: Investigating the behavior of a recursively defined sequence'\nchallengeType: 1\nforumTopicId: 301835\ndashedName: problem-197-investigating-the-behaviour-of-a-recursively-defined-sequence\n--description--\nGiven is the function $f(x) = ⌊{2}^{30.403243784 - x^2}⌋ × {10}^{-9}$ ( ⌊ ⌋ is the floor-function), the sequence $u_n$ is defined by $u_0 = -1$ and $u_{n + 1} = f(u_n)$.\nFind $u_n + u_{n + 1}$ for $n = {10}^{12}$. Give your answer with 9 digits after the decimal point.\n--hints--\nrecursivelyDefinedSequence() should return 1.710637717.\njs\nassert.strictEqual(recursivelyDefinedSequence(), 1.710637717);\n--seed--\n--seed-contents--\n```js\nfunction recursivelyDefinedSequence() {\nreturn true;\n}\nrecursivelyDefinedSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 875,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-197-investigating-the-behaviour-of-a-recursively-defined-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ab8b6c8b073e2b6020536f1e0d9c555b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-198-ambiguous-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4331000cf542c50ff45\ntitle: 'Problem 198: Ambiguous Numbers'\nchallengeType: 1\nforumTopicId: 301836\ndashedName: problem-198-ambiguous-numbers\n--description--\nA best approximation to a real number $x$ for the denominator bound $d$ is a rational number $\\frac{r}{s}$ (in reduced form) with $s ≤ d$, so that any rational number $\\frac{p}{q}$ which is closer to $x$ than $\\frac{r}{s}$ has $q > d$.\nUsually the best approximation to a real number is uniquely determined for all denominator bounds. However, there are some exceptions, e.g. $\\frac{9}{40}$ has the two best approximations $\\frac{1}{4}$ and $\\frac{1}{5}$ for the denominator bound $6$. We shall call a real number $x$ ambiguous, if there is at least one denominator bound for which $x$ possesses two best approximations. Clearly, an ambiguous number is necessarily rational.\nHow many ambiguous numbers $x = \\frac{p}{q}$, $0 < x < \\frac{1}{100}$, are there whose denominator $q$ does not exceed ${10}^8$?\n--hints--\nambiguousNumbers() should return 52374425.\njs\nassert.strictEqual(ambiguousNumbers(), 52374425);\n--seed--\n--seed-contents--\n```js\nfunction ambiguousNumbers() {\nreturn true;\n}\nambiguousNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1276,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-198-ambiguous-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8ae201bdb92436b14868ab0b7b510ccf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-196-prime-triplets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4301000cf542c50ff42\ntitle: 'Problem 196: Prime triplets'\nchallengeType: 1\nforumTopicId: 301834\ndashedName: problem-196-prime-triplets\n--description--\nBuild a triangle from all positive integers in the following way:\n$$\\begin{array}{rrr}\n&  1 \\\\\n&  \\color{red}{2} &  \\color{red}{3} \\\\\n&  4 & \\color{red}{5} &  6 \\\\\n&  \\color{red}{7} &  8 &  9 & 10 \\\\\n& \\color{red}{11} & 12 & \\color{red}{13} & 14 & 15  \\\\\n& 16 & \\color{red}{17} & 18 & \\color{red}{19} & 20 & 21 \\\\\n& 22 & \\color{red}{23} & 24 & 25 & 26 & 27 & 28 \\\\\n& \\color{red}{29} & 30 & \\color{red}{31} & 32 & 33 & 34 & 35 & 36 \\\\\n& \\color{red}{37} & 38 & 39 & 40 & \\color{red}{41} & 42 & \\color{red}{43} & 44 & 45 \\\\\n& 46 & \\color{red}{47} & 48 & 49 & 50 & 51 & 52 & \\color{red}{53} & 54 & 55 \\\\\n& 56 & 57 & 58 & \\color{red}{59} & 60 & \\color{red}{61} & 62 & 63 & 64 & 65 & 66 \\\\\n& \\cdots\n\\end{array}$$\nEach positive integer has up to eight neighbors in the triangle A set of three primes is called a prime triplet if one of the three primes has the other two as neighbors in the triangle For example, in the second row, the prime numbers 2 and 3 are elements of some prime triplet If row 8 is considered, it contains two primes which are elements of some prime triplet, i e 29 and 31",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1910,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-196-prime-triplets.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1e73b4bf8bf555c39c6431d8a51b8ef2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-196-prime-triplets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\end{array}$$ Each positive integer has up to eight neighbors in the triangle A set of three primes is called a prime triplet if one of the three primes has the other two as neighbors in the triangle For example, in the second row, the prime numbers 2 and 3 are elements of some prime triplet If row 8 is considered, it contains two primes which are elements of some prime triplet, i e 29 and 31If row 9 is considered, it contains only one prime which is an element of some prime triplet: 37 Define $S(n)$ as the sum of the primes in row $n$ which are elements of any prime triplet Then $S(8) = 60$ and $S(9) = 37$ You are given that $S(10000) = 950007619$ Find $S(5678027) + S(7208785)$ --hints--\nprimeTriplets() should return 322303240771079940 js\nassert strictEqual(primeTriplets(), 322303240771079940);\n--seed--\n--seed-contents--\n```js\nfunction primeTriplets() {\nreturn true;\n}\nprimeTriplets();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1910,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-196-prime-triplets.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cc18c60bf261084f8fa7867f2b572369",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-200-find-the-200th-prime-proof-sqube-containing-the-contiguous-sub-string-200.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4351000cf542c50ff47\ntitle: >-\nProblem 200: Find the 200th prime-proof sqube containing the contiguous\nsub-string \"200\"\nchallengeType: 1\nforumTopicId: 301840\ndashedName: >-\nproblem-200-find-the-200th-prime-proof-sqube-containing-the-contiguous-sub-string-200\n--description--\nWe shall define a sqube to be a number of the form, ${p^2}{q^3}$, where $p$ and $q$ are distinct primes.\nFor example, $200 = {5^2}{2^3}$ or $120072949 = {{23}^2}{{61}^3}$.\nThe first five squbes are 72, 108, 200, 392, and 500.\nInterestingly, 200 is also the first number for which you cannot change any single digit to make a prime; we shall call such numbers, prime-proof. The next prime-proof sqube which contains the contiguous sub-string 200 is 1992008.\nFind the 200th prime-proof sqube containing the contiguous sub-string 200.\n--hints--\nprimeProofSqubeWithSubString() should return 229161792008.\njs\nassert.strictEqual(primeProofSqubeWithSubString(), 229161792008);\n--seed--\n--seed-contents--\n```js\nfunction primeProofSqubeWithSubString() {\nreturn true;\n}\nprimeProofSqubeWithSubString();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1182,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-200-find-the-200th-prime-proof-sqube-containing-the-contiguous-sub-string-200.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f443a92752773419d21c86fa877eb89e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-202-laserbeam.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4371000cf542c50ff49\ntitle: 'Problem 202: Laserbeam'\nchallengeType: 1\nforumTopicId: 301843\ndashedName: problem-202-laserbeam\n--description--\nThree mirrors are arranged in the shape of an equilateral triangle, with their reflective surfaces pointing inwards. There is an infinitesimal gap at each vertex of the triangle through which a laser beam may pass.\nLabel the vertices $A$, $B$ and $C$. There are 2 ways in which a laser beam may enter vertex $C$, bounce off 11 surfaces, then exit through the same vertex: one way is shown below; the other is the reverse of that.\nThere are 80840 ways in which a laser beam may enter vertex $C$, bounce off 1000001 surfaces, then exit through the same vertex.\nIn how many ways can a laser beam enter at vertex $C$, bounce off 12017639147 surfaces, then exit through the same vertex?\n--hints--\nlaserbeam() should return 1209002624.\njs\nassert.strictEqual(laserbeam(), 1209002624);\n--seed--\n--seed-contents--\n```js\nfunction laserbeam() {\nreturn true;\n}\nlaserbeam();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1424,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-202-laserbeam.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "59d9e94a6eac12e416707497d2126446",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-199-iterative-circle-packing.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4341000cf542c50ff46\ntitle: 'Problem 199: Iterative Circle Packing'\nchallengeType: 1\nforumTopicId: 301837\ndashedName: problem-199-iterative-circle-packing\n--description--\nThree circles of equal radius are placed inside a larger circle such that each pair of circles is tangent to one another and the inner circles do not overlap There are four uncovered \"gaps\" which are to be filled iteratively with more tangent circles At each iteration, a maximally sized circle is placed in each gap, which creates more gaps for the next iteration After 3 iterations (pictured), there are 108 gaps and the fraction of the area which is not covered by circles is 0 06790342, rounded to eight decimal places What fraction of the area is not covered by circles after n iterations Give your answer rounded to eight decimal places using the format x xxxxxxxx --hints--\niterativeCirclePacking(10) should return a number js\nassert isNumber(iterativeCirclePacking(10));\niterativeCirclePacking(10) should return 0 00396087 js\nassert strictEqual(iterativeCirclePacking(10), 0 00396087);\niterativeCirclePacking(3) should return 0 06790342 js\nassert strictEqual(iterativeCirclePacking(3), 0 06790342);\n--seed--\n--seed-contents--\n```js\nfunction iterativeCirclePacking(n) {\nreturn true;\n}\niterativeCirclePacking(10);\n```\n--solutions--\n```js\nfunction iterativeCirclePacking(n) {\nlet k1 = 1;\nlet k0 = k1 * (3 - 2 * Math sqrt(3));\nlet a0 = 1 / (k0 * k0);\nlet a1 = 3 / (k1 * k1);\na1 += 3 * getArea(k0, k1, k1, n);\na1 += getArea(k1, k1, k1, n);\nlet final = ((a0 - a1) / a0) toFixed(8);\nreturn parseFloat(final);\nfunction getArea(k1, k2, k3, depth) {\nif (depth == 0) return 0 0;\nlet k4 = k1 + k2 + k3 + 2 * Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2280,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-199-iterative-circle-packing.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8ae534433b370608dfa6de84a6a71482",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-199-iterative-circle-packing.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "k0 = k1 * (3 - 2 * Math sqrt(3)); let a0 = 1 / (k0 * k0); let a1 = 3 / (k1 * k1); a1 += 3 * getArea(k0, k1, k1, n); a1 += getArea(k1, k1, k1, n); let final = ((a0 - a1) / a0) toFixed(8); return parseFloat(final); function getArea(k1, k2, k3, depth) { if (depth == 0) return 0 0; let k4 = k1 + k2 + k3 + 2 * Mathsqrt(k1 * k2 + k2 * k3 + k3 * k1);\nlet a = 1 / (k4 * k4);\na += getArea(k1, k2, k4, depth - 1);\na += getArea(k2, k3, k4, depth - 1);\na += getArea(k3, k1, k4, depth - 1);\nreturn a;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2280,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-199-iterative-circle-packing.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d3ed56c1ff40eca2f39e34b49212b709",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-201-subsets-with-a-unique-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4361000cf542c50ff48\ntitle: 'Problem 201: Subsets with a unique sum'\nchallengeType: 1\nforumTopicId: 301841\ndashedName: problem-201-subsets-with-a-unique-sum\n--description--\nFor any set $A$ of numbers, let $sum(A)$ be the sum of the elements of $A$ Consider the set $B = \\{1,3,6,8,10,11\\}$ There are 20 subsets of $B$ containing three elements, and their sums are:\n$$\\begin{align}\n& sum(\\{1,3,6\\}) = 10 \\\\\n& sum(\\{1,3,8\\}) = 12 \\\\\n& sum(\\{1,3,10\\}) = 14 \\\\\n& sum(\\{1,3,11\\}) = 15 \\\\\n& sum(\\{1,6,8\\}) = 15 \\\\\n& sum(\\{1,6,10\\}) = 17 \\\\\n& sum(\\{1,6,11\\}) = 18 \\\\\n& sum(\\{1,8,10\\}) = 19 \\\\\n& sum(\\{1,8,11\\}) = 20 \\\\\n& sum(\\{1,10,11\\}) = 22 \\\\\n& sum(\\{3,6,8\\}) = 17 \\\\\n& sum(\\{3,6,10\\}) = 19 \\\\\n& sum(\\{3,6,11\\}) = 20 \\\\\n& sum(\\{3,8,10\\}) = 21 \\\\\n& sum(\\{3,8,11\\}) = 22 \\\\\n& sum(\\{3,10,11\\}) = 24 \\\\\n& sum(\\{6,8,10\\}) = 24 \\\\\n& sum(\\{6,8,11\\}) = 25 \\\\\n& sum(\\{6,10,11\\}) = 27 \\\\\n& sum(\\{8,10,11\\}) = 29\n\\end{align}$$\nSome of these sums occur more than once, others are unique",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-201-subsets-with-a-unique-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ee4fe80b81655fb8f7281792dfe5b8a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-201-subsets-with-a-unique-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "& sum(\\{1,8,10\\}) = 19 \\\\ & sum(\\{1,8,11\\}) = 20 \\\\ & sum(\\{1,10,11\\}) = 22 \\\\ & sum(\\{3,6,8\\}) = 17 \\\\ & sum(\\{3,6,10\\}) = 19 \\\\ & sum(\\{3,6,11\\}) = 20 \\\\ & sum(\\{3,8,10\\}) = 21 \\\\ & sum(\\{3,8,11\\}) = 22 \\\\ & sum(\\{3,10,11\\}) = 24 \\\\ & sum(\\{6,8,10\\}) = 24 \\\\ & sum(\\{6,8,11\\}) = 25 \\\\ & sum(\\{6,10,11\\}) = 27 \\\\ & sum(\\{8,10,11\\}) = 29 \\end{align}$$ Some of these sums occur more than once, others are uniqueFor a set $A$, let $U(A,k)$ be the set of unique sums of $k$-element subsets of $A$, in our example we find $U(B,3) = \\{10,12,14,18,21,25,27,29\\}$ and $sum(U(B,3)) = 156$ Now consider the $100$-element set $S = \\{1^2, 2^2, \\ldots , {100}^2\\}$ $S$ has $100\\,891\\,344\\,545\\,564\\,193\\,334\\,812\\,497\\,256\\;$ $50$-element subsets Determine the sum of all integers which are the sum of exactly one of the $50$-element subsets of $S$, i e find $sum(U(S,50))$ --hints--\nuniqueSubsetsSum() should return 115039000 js\nassert strictEqual(uniqueSubsetsSum(), 115039000);\n--seed--\n--seed-contents--\n```js\nfunction uniqueSubsetsSum() {\nreturn true;\n}\nuniqueSubsetsSum();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-201-subsets-with-a-unique-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0c292b70018cdd9e6e86bba0f9e21e78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-205-dice-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4391000cf542c50ff4c\ntitle: 'Problem 205: Dice Game'\nchallengeType: 1\nforumTopicId: 301846\ndashedName: problem-205-dice-game\n--description--\nPeter has nine four-sided (pyramidal) dice, each with faces numbered 1, 2, 3, 4.\nColin has six six-sided (cubic) dice, each with faces numbered 1, 2, 3, 4, 5, 6.\nPeter and Colin roll their dice and compare totals: the highest total wins. The result is a draw if the totals are equal.\nWhat is the probability that Pyramidal Pete beats Cubic Colin? Give your answer rounded to seven decimal places in the form 0.abcdefg\n--hints--\ndiceGame() should return 0.5731441.\njs\nassert.strictEqual(diceGame(), 0.5731441);\n--seed--\n--seed-contents--\n```js\nfunction diceGame() {\nreturn true;\n}\ndiceGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-205-dice-game.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c75548ee6f4efca1628e994d29860587",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-204-generalised-hamming-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4381000cf542c50ff4b\ntitle: 'Problem 204: Generalised Hamming Numbers'\nchallengeType: 1\nforumTopicId: 301845\ndashedName: problem-204-generalised-hamming-numbers\n--description--\nA Hamming number is a positive number which has no prime factor larger than 5.\nSo the first few Hamming numbers are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15.\nThere are 1105 Hamming numbers not exceeding ${10}^8$.\nWe will call a positive number a generalised Hamming number of type $n$, if it has no prime factor larger than $n$. Hence the Hamming numbers are the generalised Hamming numbers of type 5.\nHow many generalised Hamming numbers of type 100 are there which don't exceed ${10}^9$?\n--hints--\ngeneralisedHammingNumbers() should return 2944730.\njs\nassert.strictEqual(generalisedHammingNumbers(), 2944730);\n--seed--\n--seed-contents--\n```js\nfunction generalisedHammingNumbers() {\nreturn true;\n}\ngeneralisedHammingNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1004,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-204-generalised-hamming-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d33e83fc62733dfa41f6b0e787fc323f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-203-squarefree-binomial-coefficients.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4381000cf542c50ff4a\ntitle: 'Problem 203: Squarefree Binomial Coefficients'\nchallengeType: 1\nforumTopicId: 301844\ndashedName: problem-203-squarefree-binomial-coefficients\n--description--\nThe binomial coefficients $\\displaystyle\\binom{n}{k}$ can be arranged in triangular form, Pascal's triangle, like this:\n$$\\begin{array}{ccccccccccccccc}\n&   &   &   &    &    &    &  1 &    &    &    &   &   &   &   \\\\\n&   &   &   &    &    &  1 &    & 1  &    &    &   &   &   &   \\\\\n&   &   &   &    &  1 &    &  2 &    &  1 &    &   &   &   &   \\\\\n&   &   &   &  1 &    &  3 &    &  3 &    &  1 &   &   &   &   \\\\\n&   &   & 1 &    &  4 &    &  6 &    &  4 &    & 1 &   &   &   \\\\\n&   & 1 &   &  5 &    & 10 &    & 10 &    &  5 &   & 1 &   &   \\\\\n& 1 &   & 6 &    & 15 &    & 20 &    & 15 &    & 6 &   & 1 &   \\\\\n1 &   & 7 &   & 21 &    & 35 &    & 35 &    & 21 &   & 7 &   & 1 \\\\\n&   &   &   &    &    &    & \\ldots\n\\end{array}$$\nIt can be seen that the first eight rows of Pascal's triangle contain twelve distinct numbers: 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 21 and 35 A positive integer n is called squarefree if no square of a prime divides n",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1833,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-203-squarefree-binomial-coefficients.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e6d9cec069e707a7dc778c1ca683e3a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-203-squarefree-binomial-coefficients.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1 & & 7 & & 21 & & 35 & & 35 & & 21 & & 7 & & 1 \\\\ & & & & & & & \\ldots \\end{array}$$ It can be seen that the first eight rows of Pascal's triangle contain twelve distinct numbers: 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 21 and 35 A positive integer n is called squarefree if no square of a prime divides nOf the twelve distinct numbers in the first eight rows of Pascal's triangle, all except 4 and 20 are squarefree The sum of the distinct squarefree numbers in the first eight rows is 105 Find the sum of the distinct squarefree numbers in the first 51 rows of Pascal's triangle --hints--\nsquarefreeBinomialCoefficients() should return 34029210557338 js\nassert strictEqual(squarefreeBinomialCoefficients(), 34029210557338);\n--seed--\n--seed-contents--\n```js\nfunction squarefreeBinomialCoefficients() {\nreturn true;\n}\nsquarefreeBinomialCoefficients();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1833,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-203-squarefree-binomial-coefficients.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3306060092c6745b6305a7b4ae9d879e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-206-concealed-square.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f43a1000cf542c50ff4d\ntitle: 'Problem 206: Concealed Square'\nchallengeType: 1\nforumTopicId: 301847\ndashedName: problem-206-concealed-square\n--description--\nFind the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0, where each \"_\" is a single digit.\n--hints--\nconcealedSquare() should return 1389019170.\njs\nassert.strictEqual(concealedSquare(), 1389019170);\n--seed--\n--seed-contents--\n```js\nfunction concealedSquare() {\nreturn true;\n}\nconcealedSquare();\n```\n--solutions--\n```js\n// Check if n**2 matches the pattern\nfunction squareMatches(n) {\n// Need BigInt due to size of values\nlet nSquared = (BigInt(n) * BigInt(n)).toString();\n// Check if digits match pattern\nfor (let i = 1; i <= 9; i++) {\nif (nSquared[2 * (i - 1)] != i) return false;\n}\nreturn true;\n}\n// Find integer whose square matches the pattern\nfunction concealedSquare() {\n// Set bounds based upon max and min candidates\nconst minSquareRoot = Math.floor(Math.sqrt(10203040506070809) / 10) * 10;\nconst maxSquareRoot = Math.ceil(Math.sqrt(19293949596979899) / 10) * 10;\nfor (let x = maxSquareRoot; x >= minSquareRoot; x -= 10) {\n// Note: 33 = 9 and 77 = 49 are only trailing digits\n//       that can produce 9 as trailing digit in square\nif (squareMatches(x + 3)) return (x + 3)10;\nif (squareMatches(x + 7)) return (x + 7)10;\n}\nreturn -1;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1428,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-206-concealed-square.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "efb74918802b77f2632f4922c4b16c25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-208-robot-walks.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f43f1000cf542c50ff51\ntitle: 'Problem 208: Robot Walks'\nchallengeType: 1\nforumTopicId: 301849\ndashedName: problem-208-robot-walks\n--description--\nA robot moves in a series of one-fifth circular arcs (72°), with a free choice of a clockwise or an anticlockwise arc for each step, but no turning on the spot.\nOne of 70932 possible closed paths of 25 arcs starting northward is\nGiven that the robot starts facing North, how many journeys of 70 arcs in length can it take that return it, after the final arc, to its starting position?\nNote: Any arc may be traversed multiple times.\n--hints--\nrobotWalks() should return 331951449665644800.\njs\nassert.strictEqual(robotWalks(), 331951449665644800);\n--seed--\n--seed-contents--\n```js\nfunction robotWalks() {\nreturn true;\n}\nrobotWalks();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-208-robot-walks.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6e8f9da5a331182f37bdd03948b0fff3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-210-obtuse-angled-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f43e1000cf542c50ff50\ntitle: 'Problem 210: Obtuse Angled Triangles'\nchallengeType: 1\nforumTopicId: 301852\ndashedName: problem-210-obtuse-angled-triangles\n--description--\nConsider the set $S(r)$ of points ($x$,$y$) with integer coordinates satisfying $|x| + |y| ≤ r$.\nLet $O$ be the point (0,0) and $C$ the point ($\\frac{r}{4}$,$\\frac{r}{4}$).\nLet $N(r)$ be the number of points $B$ in $S(r)$, so that the triangle $OBC$ has an obtuse angle, i.e. the largest angle $α$ satisfies $90°<α<180°$.\nSo, for example, $N(4)=24$ and $N(8)=100$.\nWhat is $N(1\\,000\\,000\\,000)$?\n--hints--\nobtuseAngledTriangles() should return 1598174770174689500.\njs\nassert.strictEqual(obtuseAngledTriangles(), 1598174770174689500);\n--seed--\n--seed-contents--\n```js\nfunction obtuseAngledTriangles() {\nreturn true;\n}\nobtuseAngledTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 931,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-210-obtuse-angled-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c21765cf9bc7a73a40d1c78115fcec45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-207-integer-partition-equations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f43c1000cf542c50ff4e\ntitle: 'Problem 207: Integer partition equations'\nchallengeType: 1\nforumTopicId: 301848\ndashedName: problem-207-integer-partition-equations\n--description--\nFor some positive integers $k$, there exists an integer partition of the form $4^t = 2^t + k$,\nwhere $4^t$, $2^t$, and $k$ are all positive integers and $t$ is a real number.\nThe first two such partitions are $4^1 = 2^1 + 2$ and $4^{1.584\\,962\\,5\\ldots} = 2^{1.584\\,962\\,5\\ldots} + 6$.\nPartitions where $t$ is also an integer are called perfect. For any $m ≥ 1$ let $P(m)$ be the proportion of such partitions that are perfect with $k ≤ m$.\nThus $P(6) = \\frac{1}{2}$.\nIn the following table are listed some values of $P(m)$\n$$\\begin{align}\n& P(5) = \\frac{1}{1}    \\\\\n& P(10) = \\frac{1}{2}   \\\\\n& P(15) = \\frac{2}{3}   \\\\\n& P(20) = \\frac{1}{2}   \\\\\n& P(25) = \\frac{1}{2}   \\\\\n& P(30) = \\frac{2}{5}   \\\\\n& \\ldots                \\\\\n& P(180) = \\frac{1}{4}  \\\\\n& P(185) = \\frac{3}{13}\n\\end{align}$$\nFind the smallest $m$ for which $P(m) < \\frac{1}{12\\,345}$\n--hints--\nintegerPartitionEquations() should return 44043947822.\njs\nassert.strictEqual(integerPartitionEquations(), 44043947822);\n--seed--\n--seed-contents--\n```js\nfunction integerPartitionEquations() {\nreturn true;\n}\nintegerPartitionEquations();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1430,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-207-integer-partition-equations.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4d2b4a86f7c9644b149ac20001aa410f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-209-circular-logic.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f43e1000cf542c50ff4f\ntitle: 'Problem 209: Circular Logic'\nchallengeType: 1\nforumTopicId: 301850\ndashedName: problem-209-circular-logic\n--description--\nA $k$-input binary truth table is a map from $k$ input bits (binary digits, 0 [false] or 1 [true]) to 1 output bit. For example, the $2$-input binary truth tables for the logical $AND$ and $XOR$ functions are:\n| x | y | x AND y |\n|---|---|---------|\n| 0 | 0 |    0    |\n| 0 | 1 |    0    |\n| 1 | 0 |    0    |\n| 1 | 1 |    1    |\n| x | y | x XOR y |\n|---|---|---------|\n| 0 | 0 |    0    |\n| 0 | 1 |    1    |\n| 1 | 0 |    1    |\n| 1 | 1 |    0    |\nHow many $6$-input binary truth tables, $τ$, satisfy the formula\n$$τ(a, b, c, d, e, f) \\; AND \\; τ(b, c, d, e, f, a \\; XOR \\; (b \\; AND \\; c)) = 0$$\nfor all $6$-bit inputs ($a$, $b$, $c$, $d$, $e$, $f$)?\n--hints--\ncircularLogic() should return 15964587728784.\njs\nassert.strictEqual(circularLogic(), 15964587728784);\n--seed--\n--seed-contents--\n```js\nfunction circularLogic() {\nreturn true;\n}\ncircularLogic();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1124,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-209-circular-logic.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dc7e2bd820a72a2ed503ed2cc45291f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-211-divisor-square-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f43f1000cf542c50ff52\ntitle: 'Problem 211: Divisor Square Sum'\nchallengeType: 1\nforumTopicId: 301853\ndashedName: problem-211-divisor-square-sum\n--description--\nFor a positive integer $n$, let $σ_2(n)$ be the sum of the squares of its divisors. For example,\n$$σ_2(10) = 1 + 4 + 25 + 100 = 130$$\nFind the sum of all $n$, $0 < n < 64\\,000\\,000$ such that $σ_2(n)$ is a perfect square.\n--hints--\ndivisorSquareSum() should return 1922364685.\njs\nassert.strictEqual(divisorSquareSum(), 1922364685);\n--seed--\n--seed-contents--\n```js\nfunction divisorSquareSum() {\nreturn true;\n}\ndivisorSquareSum();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 703,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-211-divisor-square-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2da395c86c5e94c6345d95145108d71c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-214-totient-chains.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4421000cf542c50ff55\ntitle: 'Problem 214: Totient Chains'\nchallengeType: 1\nforumTopicId: 301856\ndashedName: problem-214-totient-chains\n--description--\nLet $φ$ be Euler's totient function, i.e. for a natural number $n$, $φ(n)$ is the number of $k$, $1 ≤ k ≤ n$, for which $gcd(k,n) = 1$.\nBy iterating $φ$, each positive integer generates a decreasing chain of numbers ending in 1. E.g. if we start with 5 the sequence 5,4,2,1 is generated. Here is a listing of all chains with length 4:\n$$\\begin{align}\n5,4,2,1 & \\\\\n7,6,2,1 & \\\\\n8,4,2,1 & \\\\\n9,6,2,1 & \\\\\n10,4,2,1 & \\\\\n12,4,2,1 & \\\\\n14,6,2,1 & \\\\\n18,6,2,1 &\n\\end{align}$$\nOnly two of these chains start with a prime, their sum is 12.\nWhat is the sum of all primes less than $40\\,000\\,000$ which generate a chain of length 25?\n--hints--\ntotientChains() should return 1677366278943.\njs\nassert.strictEqual(totientChains(), 1677366278943);\n--seed--\n--seed-contents--\n```js\nfunction totientChains() {\nreturn true;\n}\ntotientChains();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1125,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-214-totient-chains.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5114165a41c66539319279a25dec642b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-213-flea-circus.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4411000cf542c50ff54\ntitle: 'Problem 213: Flea Circus'\nchallengeType: 1\nforumTopicId: 301855\ndashedName: problem-213-flea-circus\n--description--\nA 30×30 grid of squares contains 900 fleas, initially one flea per square.\nWhen a bell is rung, each flea jumps to an adjacent square at random (usually 4 possibilities, except for fleas on the edge of the grid or at the corners).\nWhat is the expected number of unoccupied squares after 50 rings of the bell? Give your answer rounded to six decimal places.\n--hints--\nfleaCircus() should return 330.721154.\njs\nassert.strictEqual(fleaCircus(), 330.721154);\n--seed--\n--seed-contents--\n```js\nfunction fleaCircus() {\nreturn true;\n}\nfleaCircus();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 790,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-213-flea-circus.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b3e15261ea303092641916e8c4138688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-215-crack-free-walls.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4431000cf542c50ff56\ntitle: 'Problem 215: Crack-free Walls'\nchallengeType: 1\nforumTopicId: 301857\ndashedName: problem-215-crack-free-walls\n--description--\nConsider the problem of building a wall out of 2×1 and 3×1 bricks (horizontal×vertical dimensions) such that, for extra strength, the gaps between horizontally-adjacent bricks never line up in consecutive layers, i.e. never form a \"running crack\".\nFor example, the following 9×3 wall is not acceptable due to the running crack shown in red:\nThere are eight ways of forming a crack-free 9×3 wall, written $W(9,3) = 8$.\nCalculate $W(32,10)$.\n--hints--\ncrackFreeWalls() should return 806844323190414.\njs\nassert.strictEqual(crackFreeWalls(), 806844323190414);\n--seed--\n--seed-contents--\n```js\nfunction crackFreeWalls() {\nreturn true;\n}\ncrackFreeWalls();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-215-crack-free-walls.md",
      "source_type": "git_repo"
    },
    "token_count": 247,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7a97b0d5ab15d3600c7043604bedd33d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-216-investigating-the-primality-of-numbers-of-the-form-2n2-1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4451000cf542c50ff57\ntitle: 'Problem 216: Investigating the primality of numbers of the form 2n2-1'\nchallengeType: 1\nforumTopicId: 301858\ndashedName: problem-216-investigating-the-primality-of-numbers-of-the-form-2n2-1\n--description--\nConsider numbers $t(n)$ of the form $t(n) = 2n^2 - 1$ with $n > 1$.\nThe first such numbers are 7, 17, 31, 49, 71, 97, 127 and 161.\nIt turns out that only $49 = 7 \\times 7$ and $161 = 7 \\times 23$ are not prime.\nFor $n ≤ 10000$ there are 2202 numbers $t(n)$ that are prime.\nHow many numbers $t(n)$ are prime for $n ≤ 50\\,000\\,000$?\n--hints--\nprimalityOfNumbers() should return 5437849.\njs\nassert.strictEqual(primalityOfNumbers(), 5437849);\n--seed--\n--seed-contents--\n```js\nfunction primalityOfNumbers() {\nreturn true;\n}\nprimalityOfNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-216-investigating-the-primality-of-numbers-of-the-form-2n2-1.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9851cfebd5a749ced5caa8f6f271d9b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-217-balanced-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4461000cf542c50ff58\ntitle: 'Problem 217: Balanced Numbers'\nchallengeType: 1\nforumTopicId: 301859\ndashedName: problem-217-balanced-numbers\n--description--\nA positive integer with $k$ (decimal) digits is called balanced if its first $⌈\\frac{k}{2}⌉$ digits sum to the same value as its last $⌈\\frac{k}{2}⌉$ digits, where $⌈x⌉$, pronounced ceiling of $x$, is the smallest integer $≥ x$, thus $⌈π⌉ = 4$ and $⌈5⌉ = 5$.\nSo, for example, all palindromes are balanced, as is 13722.\nLet $T(n)$ be the sum of all balanced numbers less than $10^n$.\nThus: $T(1) = 45$, $T(2) = 540$ and $T(5) = 334\\,795\\,890$.\nFind $T(47)\\,mod\\,3^{15}$\n--hints--\nbalancedNumbers() should return 6273134.\njs\nassert.strictEqual(balancedNumbers(), 6273134);\n--seed--\n--seed-contents--\n```js\nfunction balancedNumbers() {\nreturn true;\n}\nbalancedNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 954,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-217-balanced-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "64a4a3844d93932e4467f4530a14a8e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-218-perfect-right-angled-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4461000cf542c50ff59\ntitle: 'Problem 218: Perfect right-angled triangles'\nchallengeType: 1\nforumTopicId: 301860\ndashedName: problem-218-perfect-right-angled-triangles\n--description--\nConsider the right-angled triangle with sides $a=7$, $b=24$ and $c=25$.\nThe area of this triangle is 84, which is divisible by the perfect numbers 6 and 28.\nMoreover it is a primitive right-angled triangle as $gcd(a,b) = 1$ and $gcd(b,c) = 1$.\nAlso $c$ is a perfect square.\nWe will call a right-angled triangle perfect if:\nit is a primitive right-angled triangle\nits hypotenuse is a perfect square\nWe will call a right-angled triangle super-perfect if:\nit is a perfect right-angled triangle\nits area is a multiple of the perfect numbers 6 and 28.\nHow many perfect right-angled triangles with $c ≤ {10}^{16}$ exist that are not super-perfect?\n--hints--\nperfectRightAngledTriangles() should return 0.\njs\nassert.strictEqual(perfectRightAngledTriangles(), 0);\n--seed--\n--seed-contents--\n```js\nfunction perfectRightAngledTriangles() {\nreturn true;\n}\nperfectRightAngledTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-218-perfect-right-angled-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5f7b419c372cf744b0611a0fa9e7fa82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-212-combined-volume-of-cuboids.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4411000cf542c50ff53\ntitle: 'Problem 212: Combined Volume of Cuboids'\nchallengeType: 1\nforumTopicId: 301854\ndashedName: problem-212-combined-volume-of-cuboids\n--description--\nAn axis-aligned cuboid, specified by parameters ${ (x_0,y_0,z_0), (dx,dy,dz) }$, consists of all points ($X$,$Y$,$Z$) such that $x_0 ≤ X ≤ x_0 + dx$, $y_0 ≤ Y ≤ y_0 + dy$ and $z_0 ≤ Z ≤ z_0 + dz$ The volume of the cuboid is the product, $dx × dy × dz$ The combined volume of a collection of cuboids is the volume of their union and will be less than the sum of the individual volumes if any cuboids overlap",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-212-combined-volume-of-cuboids.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2ce38078c2ca0d938b99cf3956552310",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-212-combined-volume-of-cuboids.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "parameters ${ (x_0,y_0,z_0), (dx,dy,dz) }$, consists of all points ($X$,$Y$,$Z$) such that $x_0 ≤ X ≤ x_0 + dx$, $y_0 ≤ Y ≤ y_0 + dy$ and $z_0 ≤ Z ≤ z_0 + dz$ The volume of the cuboid is the product, $dx × dy × dz$ The combined volume of a collection of cuboids is the volume of their union and will be less than the sum of the individual volumes if any cuboids overlapLet $C_1, \\ldots, C_{50000}$ be a collection of 50000 axis-aligned cuboids such that $C_n$ has parameters\n$$\\begin{align}\n& x_0 = S_{6n - 5} \\; \\text{modulo} \\; 10000    \\\\\n& y_0 = S_{6n - 4} \\; \\text{modulo} \\; 10000    \\\\\n& z_0 = S_{6n - 3} \\; \\text{modulo} \\; 10000    \\\\\n& dx = 1 + (S_{6n - 2} \\; \\text{modulo} \\; 399) \\\\\n& dy = 1 + (S_{6n - 1} \\; \\text{modulo} \\; 399) \\\\\n& dz = 1 + (S_{6n} \\; \\text{modulo} \\; 399)     \\\\\n\\end{align}$$\nwhere $S_1, \\ldots, S_{300000}$ come from the \"Lagged Fibonacci Generator\":\nFor $1 ≤ k ≤ 55$, $S_k = [100003 - 200003k + 300007k^3] \\; (modulo \\; 1000000)$\nFor $56 ≤ k$, $S_k = [S_{k - 24} + S_{k - 55}] \\; (modulo \\; 1000000)$\nThus, $C_1$ has parameters ${(7,53,183), (94,369,56)}$, $C_2$ has parameters ${(2383,3563,5079), (42,212,344)}$, and so on",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-212-combined-volume-of-cuboids.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "686f7cc15a3daa5850e019e5d137c9fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-212-combined-volume-of-cuboids.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1} \\; \\text{modulo} \\; 399) \\\\ & dz = 1 + (S_{6n} \\; \\text{modulo} \\; 399) \\\\ \\end{align}$$ where $S_1, \\ldots, S_{300000}$ come from the \"Lagged Fibonacci Generator\": For $1 ≤ k ≤ 55$, $S_k = [100003 - 200003k + 300007k^3] \\; (modulo \\; 1000000)$ For $56 ≤ k$, $S_k = [S_{k - 24} + S_{k - 55}] \\; (modulo \\; 1000000)$ Thus, $C_1$ has parameters ${(7,53,183), (94,369,56)}$, $C_2$ has parameters ${(2383,3563,5079), (42,212,344)}$, and so onThe combined volume of the first 100 cuboids, $C_1, \\ldots, C_{100}$, is 723581599 What is the combined volume of all 50000 cuboids, $C_1, \\ldots, C_{50000}$ --hints--\ncombinedValueOfCuboids() should return 328968937309 js\nassert strictEqual(combinedValueOfCuboids(), 328968937309);\n--seed--\n--seed-contents--\n```js\nfunction combinedValueOfCuboids() {\nreturn true;\n}\ncombinedValueOfCuboids();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1949,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-212-combined-volume-of-cuboids.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1b2cfe5544b26876e026a5086e817c79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-221-alexandrian-integers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4491000cf542c50ff5c\ntitle: 'Problem 221: Alexandrian Integers'\nchallengeType: 1\nforumTopicId: 301864\ndashedName: problem-221-alexandrian-integers\n--description--\nWe shall call a positive integer $A$ an \"Alexandrian integer\", if there exist integers $p$, $q$, $r$ such that:\n$$A = p \\times q \\times r$$\nand\n$$\\frac{1}{A} = \\frac{1}{p} + \\frac{1}{q} + \\frac{1}{r}$$\nFor example, 630 is an Alexandrian integer ($p = 5$, $q = −7$, $r = −18$). In fact, 630 is the 6th Alexandrian integer, the first 6 Alexandrian integers being: 6, 42, 120, 156, 420 and 630.\nFind the 150000th Alexandrian integer.\n--hints--\nalexandrianIntegers() should return 1884161251122450.\njs\nassert.strictEqual(alexandrianIntegers(), 1884161251122450);\n--seed--\n--seed-contents--\n```js\nfunction alexandrianIntegers() {\nreturn true;\n}\nalexandrianIntegers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 937,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-221-alexandrian-integers.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e2e85c3b839542553c22957b784fa0f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-222-sphere-packing.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f44b1000cf542c50ff5d\ntitle: 'Problem 222: Sphere Packing'\nchallengeType: 1\nforumTopicId: 301865\ndashedName: problem-222-sphere-packing\n--description--\nWhat is the length of the shortest pipe, of internal radius 50mm, that can fully contain 21 balls of radii 30mm, 31mm, ..., 50mm?\nGive your answer in micrometres (${10}^{-6}$ m) rounded to the nearest integer.\n--hints--\nspherePacking() should return 1590933.\njs\nassert.strictEqual(spherePacking(), 1590933);\n--seed--\n--seed-contents--\n```js\nfunction spherePacking() {\nreturn true;\n}\nspherePacking();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 653,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-222-sphere-packing.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0890851454f36f0405ad750eabca69a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-219-skew-cost-coding.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4481000cf542c50ff5a\ntitle: 'Problem 219: Skew-cost coding'\nchallengeType: 1\nforumTopicId: 301861\ndashedName: problem-219-skew-cost-coding\n--description--\nLet $A$ and $B$ be bit strings (sequences of 0's and 1's).\nIf $A$ is equal to the leftmost length($A$) bits of $B$, then $A$ is said to be a prefix of $B$.\nFor example, 00110 is a prefix of 001101001, but not of 00111 or 100110.\nA prefix-free code of size $n$ is a collection of $n$ distinct bit strings such that no string is a prefix of any other. For example, this is a prefix-free code of size 6:\n$$0000, 0001, 001, 01, 10, 11$$\nNow suppose that it costs one penny to transmit a '0' bit, but four pence to transmit a '1'. Then the total cost of the prefix-free code shown above is 35 pence, which happens to be the cheapest possible for the skewed pricing scheme in question. In short, we write $Cost(6) = 35$.\nWhat is $Cost(10^9)$?\n--hints--\nskewCostCoding() should return 64564225042.\njs\nassert.strictEqual(skewCostCoding(), 64564225042);\n--seed--\n--seed-contents--\n```js\nfunction skewCostCoding() {\nreturn true;\n}\nskewCostCoding();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-219-skew-cost-coding.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd2ff4a5340322e94a84af07a77b27a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-220-heighway-dragon.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4481000cf542c50ff5b\ntitle: 'Problem 220: Heighway Dragon'\nchallengeType: 1\nforumTopicId: 301863\ndashedName: problem-220-heighway-dragon\n--description--\nLet $D_0$ be the two-letter string \"Fa\". For $n ≥ 1$, derive $D_n$ from $D_{n - 1}$ by the string-rewriting rules:\n\"a\" → \"aRbFR\"\n\"b\" → \"LFaLb\"\nThus, $D_0$ = \"Fa\", $D_1$ = \"FaRbFR\", $D_2$ = \"FaRbFRRLFaLbFR\", and so on.\nThese strings can be interpreted as instructions to a computer graphics program, with \"F\" meaning \"draw forward one unit\", \"L\" meaning \"turn left 90 degrees\", \"R\" meaning \"turn right 90 degrees\", and \"a\" and \"b\" being ignored. The initial position of the computer cursor is (0,0), pointing up towards (0,1).\nThen $D_n$ is an exotic drawing known as the Heighway Dragon of order $n$. For example, $D_{10}$ is shown below; counting each \"F\" as one step, the highlighted spot at (18,16) is the position reached after 500 steps.\nWhat is the position of the cursor after ${10}^{12}$ steps in $D_{50}$? Give your answer as a string in the form x,y with no spaces.\n--hints--\nheighwayDragon() should return a string.\njs\nassert.isString(heighwayDragon());\nheighwayDragon() should return the string 139776,963904.\njs\nassert.strictEqual(heighwayDragon(), '139776,963904');\n--seed--\n--seed-contents--\n```js\nfunction heighwayDragon() {\nreturn true;\n}\nheighwayDragon();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1722,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-220-heighway-dragon.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2de3a55d38f2d8f00be194a2355aed71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-224-almost-right-angled-triangles-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f44e1000cf542c50ff5f\ntitle: 'Problem 224: Almost right-angled triangles II'\nchallengeType: 1\nforumTopicId: 301867\ndashedName: problem-224-almost-right-angled-triangles-ii\n--description--\nLet us call an integer sided triangle with sides $a ≤ b ≤ c$ barely obtuse if the sides satisfy $a^2 + b^2 = c^2 - 1$.\nHow many barely obtuse triangles are there with perimeter $≤ 75\\,000\\,000$?\n--hints--\nalmostRightAngledTrianglesTwo() should return 4137330.\njs\nassert.strictEqual(almostRightAngledTrianglesTwo(), 4137330);\n--seed--\n--seed-contents--\n```js\nfunction almostRightAngledTrianglesTwo() {\nreturn true;\n}\nalmostRightAngledTrianglesTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-224-almost-right-angled-triangles-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "678f42be85721b13b0709d140be045cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-223-almost-right-angled-triangles-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f44b1000cf542c50ff5e\ntitle: 'Problem 223: Almost right-angled triangles I'\nchallengeType: 1\nforumTopicId: 301866\ndashedName: problem-223-almost-right-angled-triangles-i\n--description--\nLet us call an integer sided triangle with sides $a ≤ b ≤ c$ barely acute if the sides satisfy $a^2 + b^2 = c^2 + 1$.\nHow many barely acute triangles are there with perimeter $≤ 25\\,000\\,000$?\n--hints--\nalmostRightAngledTrianglesOne() should return 61614848.\njs\nassert.strictEqual(almostRightAngledTrianglesOne(), 61614848);\n--seed--\n--seed-contents--\n```js\nfunction almostRightAngledTrianglesOne() {\nreturn true;\n}\nalmostRightAngledTrianglesOne();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 744,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-223-almost-right-angled-triangles-i.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c38da60c805bf840505db9aecafec068",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-226-a-scoop-of-blancmange.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4511000cf542c50ff62\ntitle: 'Problem 226: A Scoop of Blancmange'\nchallengeType: 1\nforumTopicId: 301869\ndashedName: problem-226-a-scoop-of-blancmange\n--description--\nThe blancmange curve is the set of points ($x$,$y$) such that $0 ≤ x ≤ 1$ and $\\displaystyle y = \\sum_{n = 0}^{\\infty} \\frac{s(2^nx)}{2^n}$, where $s(x)$ is the distance from $x$ to the nearest integer.\nThe area under the blancmange curve is equal to $\\frac{1}{2}$, shown in pink in the diagram below.\nLet $C$ be the circle with center ($\\frac{1}{4}$,$\\frac{1}{2}$) and radius $\\frac{1}{4}$, shown in black in the diagram.\nWhat area under the blancmange curve is enclosed by $C$? Give your answer rounded to eight decimal places in the form 0.abcdefgh\n--hints--\nscoopOfBlancmange() should return 0.11316017.\njs\nassert.strictEqual(scoopOfBlancmange(), 0.11316017);\n--seed--\n--seed-contents--\n```js\nfunction scoopOfBlancmange() {\nreturn true;\n}\nscoopOfBlancmange();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-226-a-scoop-of-blancmange.md",
      "source_type": "git_repo"
    },
    "token_count": 323,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75bb1e607562a86e902ff1c24b65bd05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-227-the-chase.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f44f1000cf542c50ff61\ntitle: 'Problem 227: The Chase'\nchallengeType: 1\nforumTopicId: 301870\ndashedName: problem-227-the-chase\n--description--\n\"The Chase\" is a game played with two dice and an even number of players.\nThe players sit around a table; the game begins with two opposite players having one die each. On each turn, the two players with a die roll it.\nIf the player rolls a 1, he passes the die to his neighbor on the left.\nIf the player rolls a 6, he passes the die to his neighbor on the right.\nOtherwise, he keeps the die for the next turn.\nThe game ends when one player has both dice after they have been rolled and passed; that player has then lost.\nIn a game with 100 players, what is the expected number of turns the game lasts? Give your answer rounded to ten significant digits.\n--hints--\ntheChase() should return 3780.618622.\njs\nassert.strictEqual(theChase(), 3780.618622);\n--seed--\n--seed-contents--\n```js\nfunction theChase() {\nreturn true;\n}\ntheChase();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1081,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-227-the-chase.md",
      "source_type": "git_repo"
    },
    "token_count": 271,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "237bb9dee27d137add23732879a54519",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-228-minkowski-sums.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4511000cf542c50ff63\ntitle: 'Problem 228: Minkowski Sums'\nchallengeType: 1\nforumTopicId: 301871\ndashedName: problem-228-minkowski-sums\n--description--\nLet $S_n$ be the regular $n$-sided polygon – or shape – whose vertices $v_k (k = 1, 2, \\ldots, n)$ have coordinates:\n$$\\begin{align}\n& x_k = cos(\\frac{2k - 1}{n} × 180°) \\\\\n& y_k = sin(\\frac{2k - 1}{n} × 180°)\n\\end{align}$$\nEach $S_n$ is to be interpreted as a filled shape consisting of all points on the perimeter and in the interior.\nThe Minkowski sum, $S + T$, of two shapes $S$ and $T$ is the result of adding every point in $S$ to every point in $T$, where point addition is performed coordinate-wise: $(u, v) + (x, y) = (u + x, v + y)$.\nFor example, the sum of $S_3$ and $S_4$ is the six-sided shape shown in pink below:\nHow many sides does $S_{1864} + S_{1865} + \\ldots + S_{1909}$ have?\n--hints--\nminkowskiSums() should return 86226.\njs\nassert.strictEqual(minkowskiSums(), 86226);\n--seed--\n--seed-contents--\n```js\nfunction minkowskiSums() {\nreturn true;\n}\nminkowskiSums();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-228-minkowski-sums.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1131e52717812eaab13d1d4d1b59190b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-225-tribonacci-non-divisors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f44e1000cf542c50ff60\ntitle: 'Problem 225: Tribonacci non-divisors'\nchallengeType: 1\nforumTopicId: 301868\ndashedName: problem-225-tribonacci-non-divisors\n--description--\nThe sequence 1, 1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355, 653, 1201 ...\nis defined by $T_1 = T_2 = T_3 = 1$ and $T_n = T_{n - 1} + T_{n - 2} + T_{n - 3}$.\nIt can be shown that 27 does not divide any terms of this sequence. In fact, 27 is the first odd number with this property.\nFind the ${124}^{\\text{th}}$ odd number that does not divide any terms of the above sequence.\n--hints--\ntribonacciNonDivisors() should return 2009.\njs\nassert.strictEqual(tribonacciNonDivisors(), 2009);\n--seed--\n--seed-contents--\n```js\nfunction tribonacciNonDivisors() {\nreturn true;\n}\ntribonacciNonDivisors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 862,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-225-tribonacci-non-divisors.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ab7c78f3159ac43ce091fc83c94d9966",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-229-four-representations-using-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4521000cf542c50ff64\ntitle: 'Problem 229: Four Representations using Squares'\nchallengeType: 1\nforumTopicId: 301872\ndashedName: problem-229-four-representations-using-squares\n--description--\nConsider the number 3600. It is very special, because\n$$\\begin{align}\n& 3600 = {48}^2 + {36}^2   \\\\\n& 3600 = {20}^2 + {2×40}^2 \\\\\n& 3600 = {30}^2 + {3×30}^2 \\\\\n& 3600 = {45}^2 + {7×15}^2 \\\\\n\\end{align}$$\nSimilarly, we find that $88201 = {99}^2 + {280}^2 = {287}^2 + 2 × {54}^2 = {283}^2 + 3 × {52}^2 = {197}^2 + 7 × {84}^2$.\nIn 1747, Euler proved which numbers are representable as a sum of two squares. We are interested in the numbers $n$ which admit representations of all of the following four types:\n$$\\begin{align}\n& n = {a_1}^2 + {b_1}^2  \\\\\n& n = {a_2}^2 + 2{b_2}^2 \\\\\n& n = {a_3}^2 + 3{b_3}^2 \\\\\n& n = {a_7}^2 + 7{b_7}^2 \\\\\n\\end{align}$$\nwhere the $a_k$ and $b_k$ are positive integers.\nThere are 75373 such numbers that do not exceed ${10}^7$.\nHow many such numbers are there that do not exceed $2 × {10}^9$?\n--hints--\nrepresentationsUsingSquares() should return 11325263.\njs\nassert.strictEqual(representationsUsingSquares(), 11325263);\n--seed--\n--seed-contents--\n```js\nfunction representationsUsingSquares() {\nreturn true;\n}\nrepresentationsUsingSquares();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1405,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-229-four-representations-using-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a58afe08a0b98ab22f39bdd96713f3f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-231-the-prime-factorisation-of-binomial-coefficients.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4531000cf542c50ff66\ntitle: 'Problem 231: The prime factorisation of binomial coefficients'\nchallengeType: 1\nforumTopicId: 301875\ndashedName: problem-231-the-prime-factorisation-of-binomial-coefficients\n--description--\nThe binomial coefficient $\\displaystyle\\binom{10}{3} = 120$.\n$120 = 2^3 × 3 × 5 = 2 × 2 × 2 × 3 × 5$, and $2 + 2 + 2 + 3 + 5 = 14$.\nSo the sum of the terms in the prime factorisation of $\\displaystyle\\binom{10}{3}$ is $14$.\nFind the sum of the terms in the prime factorisation of $\\binom{20\\,000\\,000}{15\\,000\\,000}$.\n--hints--\nprimeFactorisation() should return 7526965179680.\njs\nassert.strictEqual(primeFactorisation(), 7526965179680);\n--seed--\n--seed-contents--\n```js\nfunction primeFactorisation() {\nreturn true;\n}\nprimeFactorisation();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 873,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-231-the-prime-factorisation-of-binomial-coefficients.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "752544c612fb859a1f6424f1a32e78c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-232-the-race.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4551000cf542c50ff67\ntitle: 'Problem 232: The Race'\nchallengeType: 1\nforumTopicId: 301876\ndashedName: problem-232-the-race\n--description--\nTwo players share an unbiased coin and take it in turns to play \"The Race\".\nOn Player 1's turn, he tosses the coin once: if it comes up Heads, he scores one point; if it comes up Tails, he scores nothing.\nOn Player 2's turn, she chooses a positive integer $T$ and tosses the coin $T$ times: if it comes up all Heads, she scores $2^{T - 1}$ points; otherwise, she scores nothing.\nPlayer 1 goes first. The winner is the first to 100 or more points.\nOn each turn Player 2 selects the number, $T$, of coin tosses that maximizes the probability of her winning.\nWhat is the probability that Player 2 wins?\nGive your answer rounded to eight decimal places in the form 0.abcdefgh .\n--hints--\ntheRace() should return 0.83648556.\njs\nassert.strictEqual(theRace(), 0.83648556);\n--seed--\n--seed-contents--\n```js\nfunction theRace() {\nreturn true;\n}\ntheRace();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1092,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-232-the-race.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c8cd499175950e6eb713376b973e6d19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-234-semidivisible-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4571000cf542c50ff69\ntitle: 'Problem 234: Semidivisible numbers'\nchallengeType: 1\nforumTopicId: 301878\ndashedName: problem-234-semidivisible-numbers\n--description--\nFor an integer $n ≥ 4$, we define the lower prime square root of $n$, denoted by $lps(n)$, as the $\\text{largest prime} ≤ \\sqrt{n}$ and the upper prime square root of $n$, $ups(n)$, as the $\\text{smallest prime} ≥ \\sqrt{n}$.\nSo, for example, $lps(4) = 2 = ups(4)$, $lps(1000) = 31$, $ups(1000) = 37$.\nLet us call an integer $n ≥ 4$ semidivisible, if one of $lps(n)$ and $ups(n)$ divides $n$, but not both.\nThe sum of the semidivisible numbers not exceeding 15 is 30, the numbers are 8, 10 and 12. 15 is not semidivisible because it is a multiple of both $lps(15) = 3$ and $ups(15) = 5$. As a further example, the sum of the 92 semidivisible numbers up to 1000 is 34825.\nWhat is the sum of all semidivisible numbers not exceeding 999966663333?\n--hints--\nsemidivisibleNumbers() should return 1259187438574927000.\njs\nassert.strictEqual(semidivisibleNumbers(), 1259187438574927000);\n--seed--\n--seed-contents--\n```js\nfunction semidivisibleNumbers() {\nreturn true;\n}\nsemidivisibleNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1263,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-234-semidivisible-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "32c33195d93ed134bf70494822d8beaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-233-lattice-points-on-a-circle.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4551000cf542c50ff68\ntitle: 'Problem 233: Lattice points on a circle'\nchallengeType: 1\nforumTopicId: 301877\ndashedName: problem-233-lattice-points-on-a-circle\n--description--\nLet $f(N)$ be the number of points with integer coordinates that are on a circle passing through $(0,0)$, $(N,0)$,$(0,N)$, and $(N,N)$.\nIt can be shown that $f(10000) = 36$.\nWhat is the sum of all positive integers $N ≤ {10}^{11}$ such that $f(N) = 420$?\n--hints--\nlatticePointsOnACircle() should return 271204031455541300.\njs\nassert.strictEqual(latticePointsOnACircle(), 271204031455541300);\n--seed--\n--seed-contents--\n```js\nfunction latticePointsOnACircle() {\nreturn true;\n}\nlatticePointsOnACircle();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-233-lattice-points-on-a-circle.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c244a437eb989e67cd50802c79be6afa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-235-an-arithmetic-geometric-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4571000cf542c50ff6a\ntitle: 'Problem 235: An Arithmetic Geometric sequence'\nchallengeType: 1\nforumTopicId: 301879\ndashedName: problem-235-an-arithmetic-geometric-sequence\n--description--\nGiven is the arithmetic-geometric sequence $u(k) = (900 - 3k)r^{k - 1}$.\nLet $s(n) = \\sum_{k=1 \\ldots n} u(k)$.\nFind the value of $r$ for which $s(5000) = -600\\,000\\,000\\,000$.\nGive your answer rounded to 12 places behind the decimal point.\n--hints--\narithmeticGeometricSequence() should return 1.002322108633.\njs\nassert.strictEqual(arithmeticGeometricSequence(), 1.002322108633);\n--seed--\n--seed-contents--\n```js\nfunction arithmeticGeometricSequence() {\nreturn true;\n}\narithmeticGeometricSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 795,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-235-an-arithmetic-geometric-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9d7bcac7177d5fa297fe25907449db7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-237-tours-on-a-4-x-n-playing-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4591000cf542c50ff6c\ntitle: 'Problem 237: Tours on a 4 x n playing board'\nchallengeType: 1\nforumTopicId: 301882\ndashedName: problem-237-tours-on-a-4-x-n-playing-board\n--description--\nLet $T(n)$ be the number of tours over a 4 × $n$ playing board such that:\nThe tour starts in the top left corner.\nThe tour consists of moves that are up, down, left, or right one square.\nThe tour visits each square exactly once.\nThe tour ends in the bottom left corner.\nThe diagram shows one tour over a 4 × 10 board:\n$T(10)$ is 2329. What is $T({10}^{12})$ modulo ${10}^8$?\n--hints--\ntoursOnPlayingBoard() should return 15836928.\njs\nassert.strictEqual(toursOnPlayingBoard(), 15836928);\n--seed--\n--seed-contents--\n```js\nfunction toursOnPlayingBoard() {\nreturn true;\n}\ntoursOnPlayingBoard();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1149,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-237-tours-on-a-4-x-n-playing-board.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0ecf7c7f1ebe547e1631414a3ff36215",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4531000cf542c50ff65\ntitle: 'Problem 230: Fibonacci Words'\nchallengeType: 1\nforumTopicId: 301874\ndashedName: problem-230-fibonacci-words\n--description--\nFor any two strings of digits, $A$ and $B$, we define $F_{A,B}$ to be the sequence ($A, B, AB, BAB, ABBAB, \\ldots$) in which each term is the concatenation of the previous two Further, we define $D_{A,B}(n)$ to be the $n^{\\text{th}}$ digit in the first term of $F_{A,B}$ that contains at least $n$ digits Example:\nLet $A = 1\\,415\\,926\\,535$, $B = 8\\,979\\,323\\,846$ We wish to find $D_{A,B}(35)$, say The first few terms of $F_{A,B}$ are:\n$$\\begin{align}\n& 1\\,415\\,926\\,535 \\\\\n& 8\\,979\\,323\\,846 \\\\\n& 14\\,159\\,265\\,358\\,979\\,323\\,846 \\\\\n& 897\\,932\\,384\\,614\\,159\\,265\\,358\\,979\\,323\\,846 \\\\\n& 14\\,159\\,265\\,358\\,979\\,323\\,846\\,897\\,932\\,384\\,614\\,15\\color{red}{9}\\,265\\,358\\,979\\,323\\,846\n\\end{align}$$\nThen $D_{A,B}(35)$ is the ${35}^{\\text{th}}$ digit in the fifth term, which is 9",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1997,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md",
      "source_type": "git_repo"
    },
    "token_count": 397,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "29281b1e719dea738e6a2ac530b21e36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "concatenation of the previous two Further, we define $D_{A,B}(n)$ to be the $n^{\\text{th}}$ digit in the first term of $F_{A,B}$ that contains at least $n$ digits Example: Let $A = 1\\,415\\,926\\,535$, $B = 8\\,979\\,323\\,846$ We wish to find $D_{A,B}(35)$, say The first few terms of $F_{A,B}$ are: $$\\begin{align} & 1\\,415\\,926\\,535 \\\\ & 8\\,979\\,323\\,846 \\\\ & 14\\,159\\,265\\,358\\,979\\,323\\,846 \\\\ & 897\\,932\\,384\\,614\\,159\\,265\\,358\\,979\\,323\\,846 \\\\ & 14\\,159\\,265\\,358\\,979\\,323\\,846\\,897\\,932\\,384\\,614\\,15\\color{red}{9}\\,265\\,358\\,979\\,323\\,846 \\end{align}$$ Then $D_{A,B}(35)$ is the ${35}^{\\text{th}}$ digit in the fifth term, which is 9Now we use for $A$ the first 100 digits of $π$ behind the decimal point:\n$$\\begin{align}\n& 14\\,159\\,265\\,358\\,979\\,323\\,846\\,264\\,338\\,327\\,950\\,288\\,419\\,716\\,939\\,937\\,510 \\\\\n& 58\\,209\\,749\\,445\\,923\\,078\\,164\\,062\\,862\\,089\\,986\\,280\\,348\\,253\\,421\\,170\\,679\n\\end{align}$$\nand for $B$ the next hundred digits:\n$$\\begin{align}\n& 82\\,148\\,086\\,513\\,282\\,306\\,647\\,093\\,844\\,609\\,550\\,582\\,231\\,725\\,359\\,408\\,128 \\\\\n& 48\\,111\\,745\\,028\\,410\\,270\\,193\\,852\\,110\\,555\\,964\\,462\\,294\\,895\\,493\\,038\\,196\n\\end{align}$$\nFind $\\sum_{n = 0, 1, \\ldots, 17} {10}^n × D_{A,B}((127 + 19n) × 7^n)$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1997,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "16e3e3d679e2f8bf8f390c917dc2c8f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1\\,415\\,926\\,535 \\\\ & 8\\,979\\,323\\,846 \\\\ & 14\\,159\\,265\\,358\\,979\\,323\\,846 \\\\ & 897\\,932\\,384\\,614\\,159\\,265\\,358\\,979\\,323\\,846 \\\\ & 14\\,159\\,265\\,358\\,979\\,323\\,846\\,897\\,932\\,384\\,614\\,15\\color{red}{9}\\,265\\,358\\,979\\,323\\,846 \\end{align}$$ Then $D_{A,B}(35)$ is the ${35}^{\\text{th}}$ digit in the fifth term, which is 9Now we use for $A$ the first 100 digits of $π$ behind the decimal point: $$\\begin{align} & 14\\,159\\,265\\,358\\,979\\,323\\,846\\,264\\,338\\,327\\,950\\,288\\,419\\,716\\,939\\,937\\,510 \\\\ & 58\\,209\\,749\\,445\\,923\\,078\\,164\\,062\\,862\\,089\\,986\\,280\\,348\\,253\\,421\\,170\\,679 \\end{align}$$ and for $B$ the next hundred digits: $$\\begin{align} & 82\\,148\\,086\\,513\\,282\\,306\\,647\\,093\\,844\\,609\\,550\\,582\\,231\\,725\\,359\\,408\\,128 \\\\ & 48\\,111\\,745\\,028\\,410\\,270\\,193\\,852\\,110\\,555\\,964\\,462\\,294\\,895\\,493\\,038\\,196 \\end{align}$$ Find $\\sum_{n = 0, 1, \\ldots, 17} {10}^n × D_{A,B}((127 + 19n) × 7^n)$--hints--\nfibonacciWords() should return 850481152593119200 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1997,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "aebf007ef9e593e6f1b26287848310a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "14\\,159\\,265\\,358\\,979\\,323\\,846 \\\\ & 897\\,932\\,384\\,614\\,159\\,265\\,358\\,979\\,323\\,846 \\\\ & 14\\,159\\,265\\,358\\,979\\,323\\,846\\,897\\,932\\,384\\,614\\,15\\color{red}{9}\\,265\\,358\\,979\\,323\\,846 \\end{align}$$ Then $D_{A,B}(35)$ is the ${35}^{\\text{th}}$ digit in the fifth term, which is 9Now we use for $A$ the first 100 digits of $π$ behind the decimal point: $$\\begin{align} & 14\\,159\\,265\\,358\\,979\\,323\\,846\\,264\\,338\\,327\\,950\\,288\\,419\\,716\\,939\\,937\\,510 \\\\ & 58\\,209\\,749\\,445\\,923\\,078\\,164\\,062\\,862\\,089\\,986\\,280\\,348\\,253\\,421\\,170\\,679 \\end{align}$$ and for $B$ the next hundred digits: $$\\begin{align} & 82\\,148\\,086\\,513\\,282\\,306\\,647\\,093\\,844\\,609\\,550\\,582\\,231\\,725\\,359\\,408\\,128 \\\\ & 48\\,111\\,745\\,028\\,410\\,270\\,193\\,852\\,110\\,555\\,964\\,462\\,294\\,895\\,493\\,038\\,196 \\end{align}$$ Find $\\sum_{n = 0, 1, \\ldots, 17} {10}^n × D_{A,B}((127 + 19n) × 7^n)$--hints-- fibonacciWords() should return 850481152593119200 js assertstrictEqual(fibonacciWords(), 850481152593119200);\n--seed--\n--seed-contents--\n```js\nfunction fibonacciWords() {\nreturn true;\n}\nfibonacciWords();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1997,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md",
      "source_type": "git_repo"
    },
    "token_count": 515,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c4589e2f2f74e3fc624f5bbd5fc10057",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-239-twenty-two-foolish-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f45c1000cf542c50ff6e\ntitle: 'Problem 239: Twenty-two Foolish Primes'\nchallengeType: 1\nforumTopicId: 301884\ndashedName: problem-239-twenty-two-foolish-primes\n--description--\nA set of disks numbered 1 through 100 are placed in a line in random order.\nWhat is the probability that we have a partial derangement such that exactly 22 prime number discs are found away from their natural positions? (Any number of non-prime disks may also be found in or out of their natural positions.)\nGive your answer rounded to 12 places behind the decimal point in the form 0.abcdefghijkl.\n--hints--\ntwentyTwoFoolishPrimes() should return 0.001887854841.\njs\nassert.strictEqual(twentyTwoFoolishPrimes(), 0.001887854841);\n--seed--\n--seed-contents--\n```js\nfunction twentyTwoFoolishPrimes() {\nreturn true;\n}\ntwentyTwoFoolishPrimes();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-239-twenty-two-foolish-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d72a51722eb6706b02249af5b502a945",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-236-luxury-hampers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4591000cf542c50ff6b\ntitle: 'Problem 236: Luxury Hampers'\nchallengeType: 1\nforumTopicId: 301881\ndashedName: problem-236-luxury-hampers\n--description--\nSuppliers 'A' and 'B' provided the following numbers of products for the luxury hamper market:\n|       Product      | 'A'  | 'B'  |\n|--------------------|------|------|\n|    Beluga Caviar   | 5248 | 640  |\n|    Christmas Cake  | 1312 | 1888 |\n|    Gammon Joint    | 2624 | 3776 |\n|    Vintage Port    | 5760 | 3776 |\n| Champagne Truffles | 3936 | 5664 |\nAlthough the suppliers try very hard to ship their goods in perfect condition, there is inevitably some spoilage - i e products gone bad The suppliers compare their performance using two types of statistic:\nThe five per-product spoilage rates for each supplier are equal to the number of products gone bad divided by the number of products supplied, for each of the five products in turn The overall spoilage rate for each supplier is equal to the total number of products gone bad divided by the total number of products provided by that supplier To their surprise, the suppliers found that each of the five per-product spoilage rates was worse (higher) for 'B' than for 'A' by the same factor (ratio of spoilage rates), $m > 1$; and yet, paradoxically, the overall spoilage rate was worse for 'A' than for 'B', also by a factor of $m$ There are thirty-five $m > 1$ for which this surprising result could have occurred, the smallest of which is $\\frac{1476}{1475}$ What's the largest possible value of $m$ Give your answer as a string with fraction reduced to its lowest terms, in the form u/v --hints--\nluxuryHampers() should return a string js\nassert isString(luxuryHampers());\nluxuryHampers() should return the string 123/59 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-236-luxury-hampers.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5d2b7a482388e3b6a064b0dfcd280d82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-236-luxury-hampers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "spoilage rate was worse for 'A' than for 'B', also by a factor of $m$ There are thirty-five $m > 1$ for which this surprising result could have occurred, the smallest of which is $\\frac{1476}{1475}$ What's the largest possible value of $m$ Give your answer as a string with fraction reduced to its lowest terms, in the form u/v --hints-- luxuryHampers() should return a string js assert isString(luxuryHampers()); luxuryHampers() should return the string 123/59 js assertstrictEqual(luxuryHampers(), '123/59');\n--seed--\n--seed-contents--\n```js\nfunction luxuryHampers() {\nreturn true;\n}\nluxuryHampers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-236-luxury-hampers.md",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f1388b56d6e15c8a8c08f64c461a3640",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-238-infinite-string-tour.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f45b1000cf542c50ff6d\ntitle: 'Problem 238: Infinite string tour'\nchallengeType: 1\nforumTopicId: 301883\ndashedName: problem-238-infinite-string-tour\n--description--\nCreate a sequence of numbers using the \"Blum Blum Shub\" pseudo-random number generator:\n$$\ns_0 = 14025256 \\\\\ns_{n + 1} = {s_n}^2 \\; mod \\; 20\\,300\\,713\n$$\nConcatenate these numbers $s_0s_1s_2\\ldots$ to create a string $w$ of infinite length Then, $w = 14025256741014958470038053646\\ldots$\nFor a positive integer $k$, if no substring of $w$ exists with a sum of digits equal to $k$, $p(k)$ is defined to be zero If at least one substring of $w$ exists with a sum of digits equal to $k$, we define $p(k) = z$, where $z$ is the starting position of the earliest such substring For instance:\nThe substrings 1, 14, 1402, … with respective sums of digits equal to 1, 5, 7, … start at position 1, hence $p(1) = p(5) = p(7) = \\ldots = 1$ The substrings 4, 402, 4025, … with respective sums of digits equal to 4, 6, 11, … start at position 2, hence $p(4) = p(6) = p(11) = \\ldots = 2$ The substrings 02, 0252, … with respective sums of digits equal to 2, 9, … start at position 3, hence $p(2) = p(9) = \\ldots = 3$ Note that substring 025 starting at position 3, has a sum of digits equal to 7, but there was an earlier substring (starting at position 1) with a sum of digits equal to 7, so $p(7) = 1$, not 3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-238-infinite-string-tour.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5a095e9bf250d675a8157f31a99fb533",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-238-infinite-string-tour.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "$p(4) = p(6) = p(11) = \\ldots = 2$ The substrings 02, 0252, … with respective sums of digits equal to 2, 9, … start at position 3, hence $p(2) = p(9) = \\ldots = 3$ Note that substring 025 starting at position 3, has a sum of digits equal to 7, but there was an earlier substring (starting at position 1) with a sum of digits equal to 7, so $p(7) = 1$, not 3We can verify that, for $0 < k ≤ {10}^3$, $\\sum p(k) = 4742$ Find $\\sum p(k)$, for $0 < k ≤ 2 \\times {10}^{15}$ --hints--\ninfiniteStringTour() should return 9922545104535660 js\nassert strictEqual(infiniteStringTour(), 9922545104535660);\n--seed--\n--seed-contents--\n```js\nfunction infiniteStringTour() {\nreturn true;\n}\ninfiniteStringTour();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-238-infinite-string-tour.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e6c9fa3fa7c38f2a1c169ba6de329bce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-240-top-dice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f45d1000cf542c50ff6f\ntitle: 'Problem 240: Top Dice'\nchallengeType: 1\nforumTopicId: 301887\ndashedName: problem-240-top-dice\n--description--\nThere are 1111 ways in which five 6-sided dice (sides numbered 1 to 6) can be rolled so that the top three sum to 15. Some examples are:\n$$\\begin{align}\n& D_1,D_2,D_3,D_4,D_5 = 4,3,6,3,5 \\\\\n& D_1,D_2,D_3,D_4,D_5 = 4,3,3,5,6 \\\\\n& D_1,D_2,D_3,D_4,D_5 = 3,3,3,6,6 \\\\\n& D_1,D_2,D_3,D_4,D_5 = 6,6,3,3,3\n\\end{align}$$\nIn how many ways can twenty 12-sided dice (sides numbered 1 to 12) be rolled so that the top ten sum to 70?\n--hints--\ntopDice() should return 7448717393364182000.\njs\nassert.strictEqual(topDice(), 7448717393364182000);\n--seed--\n--seed-contents--\n```js\nfunction topDice() {\nreturn true;\n}\ntopDice();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-240-top-dice.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f108006febcfe5156e46080e47734505",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-242-odd-triplets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f45f1000cf542c50ff71\ntitle: 'Problem 242: Odd Triplets'\nchallengeType: 1\nforumTopicId: 301889\ndashedName: problem-242-odd-triplets\n--description--\nGiven the set {1,2,..., $n$}, we define $f(n, k)$ as the number of its $k$-element subsets with an odd sum of elements. For example, $f(5,3) = 4$, since the set {1,2,3,4,5} has four 3-element subsets having an odd sum of elements, i.e.: {1,2,4}, {1,3,5}, {2,3,4} and {2,4,5}.\nWhen all three values $n$, $k$ and $f(n, k)$ are odd, we say that they make an odd-triplet $[n, k, f(n, k)]$.\nThere are exactly five odd-triplets with $n ≤ 10$, namely: $[1, 1, f(1, 1) = 1]$, $[5, 1, f(5, 1) = 3]$, $[5, 5, f(5, 5) = 1]$, $[9, 1, f(9, 1) = 5]$ and $[9, 9, f(9, 9) = 1]$.\nHow many odd-triplets are there with $n ≤ {10}^{12}$?\n--hints--\noddTriplets() should return 997104142249036700.\njs\nassert.strictEqual(oddTriplets(), 997104142249036700);\n--seed--\n--seed-contents--\n```js\nfunction oddTriplets() {\nreturn true;\n}\noddTriplets();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1076,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-242-odd-triplets.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9f8d39909c749c80f73fad4f82aa94db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-241-perfection-quotients.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f45d1000cf542c50ff70\ntitle: 'Problem 241: Perfection Quotients'\nchallengeType: 1\nforumTopicId: 301888\ndashedName: problem-241-perfection-quotients\n--description--\nFor a positive integer $n$, let $σ(n)$ be the sum of all divisors of $n$, so e.g. $σ(6) = 1 + 2 + 3 + 6 = 12$.\nA perfect number, as you probably know, is a number with $σ(n) = 2n$.\nLet us define the perfection quotient of a positive integer as $p(n) = \\frac{σ(n)}{n}$.\nFind the sum of all positive integers $n ≤ {10}^{18}$ for which $p(n)$ has the form $k + \\frac{1}{2}$, where $k$ is an integer.\n--hints--\nperfectionQuotients() should return 482316491800641150.\njs\nassert.strictEqual(perfectionQuotients(), 482316491800641150);\n--seed--\n--seed-contents--\n```js\nfunction perfectionQuotients() {\nreturn true;\n}\nperfectionQuotients();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 906,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-241-perfection-quotients.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aeaf93518aef0235d2bd434d98aabb9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-245-coresilience.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4621000cf542c50ff74\ntitle: 'Problem 245: Coresilience'\nchallengeType: 1\nforumTopicId: 301892\ndashedName: problem-245-coresilience\n--description--\nWe shall call a fraction that cannot be canceled down a resilient fraction.\nFurthermore we shall define the resilience of a denominator, $R(d)$, to be the ratio of its proper fractions that are resilient; for example, $R(12) = \\frac{4}{11}$.\nThe resilience of a number $d > 1$ is then $\\frac{φ(d)}{d − 1}$ , where $φ$ is Euler's totient function.\nWe further define the coresilience of a number $n > 1$ as $C(n) = \\frac{n − φ(n)}{n − 1}$.\nThe coresilience of a prime $p$ is $C(p) = \\frac{1}{p − 1}$.\nFind the sum of all composite integers $1 < n ≤ 2 × {10}^{11}$, for which $C(n)$ is a unit fraction.\n--hints--\ncoresilience() should return 288084712410001.\njs\nassert.strictEqual(coresilience(), 288084712410001);\n--seed--\n--seed-contents--\n```js\nfunction coresilience() {\nreturn true;\n}\ncoresilience();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-245-coresilience.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2a344f6036b0d446013f28bd41b56dc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-243-resilience.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4601000cf542c50ff73\ntitle: 'Problem 243: Resilience'\nchallengeType: 1\nforumTopicId: 301890\ndashedName: problem-243-resilience\n--description--\nA positive fraction whose numerator is less than its denominator is called a proper fraction.\nFor any denominator, $d$, there will be $d−1$ proper fractions; for example, with $d = 12$:\n$$\\frac{1}{12}, \\frac{2}{12}, \\frac{3}{12}, \\frac{4}{12}, \\frac{5}{12}, \\frac{6}{12}, \\frac{7}{12}, \\frac{8}{12}, \\frac{9}{12}, \\frac{10}{12}, \\frac{11}{12}$$\nWe shall call a fraction that cannot be canceled down a resilient fraction.\nFurthermore we shall define the resilience of a denominator, $R(d)$, to be the ratio of its proper fractions that are resilient; for example, $R(12) = \\frac{4}{11}$.\nIn fact, $d = 12$ is the smallest denominator having a resilience $R(d) < \\frac{4}{10}$.\nFind the smallest denominator $d$, having a resilience $R(d) < \\frac{15\\,499}{94\\,744}$.\n--hints--\nresilience() should return 892371480.\njs\nassert.strictEqual(resilience(), 892371480);\n--seed--\n--seed-contents--\n```js\nfunction resilience() {\nreturn true;\n}\nresilience();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1207,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-243-resilience.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "17ea3bea77ac91ec2f6c28fc775e6709",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-246-tangents-to-an-ellipse.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4621000cf542c50ff75\ntitle: 'Problem 246: Tangents to an ellipse'\nchallengeType: 1\nforumTopicId: 301893\ndashedName: problem-246-tangents-to-an-ellipse\n--description--\nA definition for an ellipse is:\nGiven a circle $c$ with center $M$ and radius $r$ and a point $G$ such that $d(G, M) < r$, the locus of the points that are equidistant from $c$ and $G$ form an ellipse.\nThe construction of the points of the ellipse is shown below.\nGiven are the points $M(-2000, 1500)$ and $G(8000, 1500)$.\nGiven is also the circle $c$ with center $M$ and radius $15\\,000$.\nThe locus of the points that are equidistant from $G$ and $c$ form an ellipse $e$.\nFrom a point $P$ outside $e$ the two tangents $t_1$ and $t_2$ to the ellipse are drawn.\nLet the points where $t_1$ and $t_2$ touch the ellipse be $R$ and $S$.\nFor how many lattice points $P$ is angle $RPS$ greater than 45°?\n--hints--\ntangentsToAnEllipse() should return 810834388.\njs\nassert.strictEqual(tangentsToAnEllipse(), 810834388);\n--seed--\n--seed-contents--\n```js\nfunction tangentsToAnEllipse() {\nreturn true;\n}\ntangentsToAnEllipse();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1864,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-246-tangents-to-an-ellipse.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0bcd038eb1313e3307a4ebd6b401b384",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-247-squares-under-a-hyperbola.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4641000cf542c50ff76\ntitle: 'Problem 247: Squares under a hyperbola'\nchallengeType: 1\nforumTopicId: 301894\ndashedName: problem-247-squares-under-a-hyperbola\n--description--\nConsider the region constrained by $1 ≤ x$ and $0 ≤ y ≤ \\frac{1}{x}$.\nLet $S_1$ be the largest square that can fit under the curve.\nLet $S_2$ be the largest square that fits in the remaining area, and so on.\nLet the index of $S_n$ be the pair (left, below) indicating the number of squares to the left of $S_n$ and the number of squares below $S_n$.\nThe diagram shows some such squares labeled by number.\n$S_2$ has one square to its left and none below, so the index of $S_2$ is (1, 0).\nIt can be seen that the index of $S_{32}$ is (1,1) as is the index of $S_{50}$.\n50 is the largest $n$ for which the index of $S_n$ is (1, 1).\nWhat is the largest $n$ for which the index of $S_n$ is (3, 3)?\n--hints--\nsquaresUnderAHyperbola() should return 782252.\njs\nassert.strictEqual(squaresUnderAHyperbola(), 782252);\n--seed--\n--seed-contents--\n```js\nfunction squaresUnderAHyperbola() {\nreturn true;\n}\nsquaresUnderAHyperbola();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1475,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-247-squares-under-a-hyperbola.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "426c0d536d4ce5bf295d3004b0a8dc7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-244-sliders.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4601000cf542c50ff72\ntitle: 'Problem 244: Sliders'\nchallengeType: 1\nforumTopicId: 301891\ndashedName: problem-244-sliders\n--description--\nYou probably know the game Fifteen Puzzle Here, instead of numbered tiles, we have seven red tiles and eight blue tiles A move is denoted by the uppercase initial of the direction (Left, Right, Up, Down) in which the tile is slid, e g starting from configuration ($S$), by the sequence $LULUR$ we reach the configuration ($E$):\n($S$) , ($E$)\nFor each path, its checksum is calculated by (pseudocode):\n$$\\begin{align}\n& \\text{checksum} = 0 \\\\\n& \\text{checksum} = (\\text{checksum} × 243 + m_1) \\; \\text{mod} \\; 100\\,000\\,007 \\\\\n& \\text{checksum} = (\\text{checksum} × 243 + m_2) \\; \\text{mod} \\; 100\\,000\\,007 \\\\\n& \\ldots \\\\\n& \\text{checksum} = (\\text{checksum} × 243 + m_n) \\; \\text{mod} \\; 100\\,000\\,007\n\\end{align}$$\nwhere $m_k$ is the ASCII value of the $k^{\\text{th}}$ letter in the move sequence and the ASCII values for the moves are:\n$$\\begin{array}{|c|c|}\n\\hline\nL & 76 \\\\ \\hline\nR & 82 \\\\ \\hline\nU & 85 \\\\ \\hline\nD & 68 \\\\ \\hline\n\\end{array}$$\nFor the sequence $LULUR$ given above, the checksum would be 19761398 Now, starting from configuration ($S$), find all shortest ways to reach configuration ($T$) ($S$) , ($T$)\nWhat is the sum of all checksums for the paths having the minimal length --hints--\nsliders() should return 96356848 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2361,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-244-sliders.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f9c57b754752f9e96f53b07ddcc9135f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-244-sliders.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "values for the moves are: $$\\begin{array}{|c|c|} \\hline L & 76 \\\\ \\hline R & 82 \\\\ \\hline U & 85 \\\\ \\hline D & 68 \\\\ \\hline \\end{array}$$ For the sequence $LULUR$ given above, the checksum would be 19761398 Now, starting from configuration ($S$), find all shortest ways to reach configuration ($T$) ($S$) , ($T$) What is the sum of all checksums for the paths having the minimal length --hints-- sliders() should return 96356848 js assertstrictEqual(sliders(), 96356848);\n--seed--\n--seed-contents--\n```js\nfunction sliders() {\nreturn true;\n}\nsliders();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2361,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-244-sliders.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2fe3c459e8748ee8c2f4c1983525835d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-248-numbers-for-which-eulers-totient-function-equals-13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4651000cf542c50ff77\ntitle: 'Problem 248: Numbers for which Euler’s totient function equals 13!'\nchallengeType: 1\nforumTopicId: 301895\ndashedName: problem-248-numbers-for-which-eulers-totient-function-equals-13\n--description--\nThe first number $n$ for which $φ(n) = 13!$ is $6\\,227\\,180\\,929$.\nFind the ${150\\,000}^{\\text{th}}$ such number.\n--hints--\neulersTotientFunctionEquals() should return 23507044290.\njs\nassert.strictEqual(eulersTotientFunctionEquals(), 23507044290);\n--seed--\n--seed-contents--\n```js\nfunction eulersTotientFunctionEquals() {\nreturn true;\n}\neulersTotientFunctionEquals();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 704,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-248-numbers-for-which-eulers-totient-function-equals-13.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd3a611f147c99092846b39fa4c36971",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-250-250250.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4661000cf542c50ff78\ntitle: 'Problem 250: 250250'\nchallengeType: 1\nforumTopicId: 301898\ndashedName: problem-250-250250\n--description--\nFind the number of non-empty subsets of $\\{{1}^{1}, {2}^{2}, {3}^{3}, \\ldots, {250250}^{250250}\\}$, the sum of whose elements is divisible by 250. Enter the rightmost 16 digits as your answer.\n--hints--\ntwoHundredFifty() should return 1425480602091519.\njs\nassert.strictEqual(twoHundredFifty(), 1425480602091519);\n--seed--\n--seed-contents--\n```js\nfunction twoHundredFifty() {\nreturn true;\n}\ntwoHundredFifty();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-250-250250.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "588fa9771d3f00dc49f81a3fbe6904f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-249-prime-subset-sums.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4671000cf542c50ff79\ntitle: 'Problem 249: Prime Subset Sums'\nchallengeType: 1\nforumTopicId: 301896\ndashedName: problem-249-prime-subset-sums\n--description--\nLet $S = \\{2, 3, 5, \\ldots, 4999\\}$ be the set of prime numbers less than 5000.\nFind the number of subsets of $S$, the sum of whose elements is a prime number.\nEnter the rightmost 16 digits as your answer.\n--hints--\nprimeSubsetSums() should return 9275262564250418.\njs\nassert.strictEqual(primeSubsetSums(), 9275262564250418);\n--seed--\n--seed-contents--\n```js\nfunction primeSubsetSums() {\nreturn true;\n}\nprimeSubsetSums();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 684,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-249-prime-subset-sums.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "869b4cdb0544f0b8fc6e1b872156b707",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-251-cardano-triplets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4671000cf542c50ff7a\ntitle: 'Problem 251: Cardano Triplets'\nchallengeType: 1\nforumTopicId: 301899\ndashedName: problem-251-cardano-triplets\n--description--\nA triplet of positive integers ($a$,$b$,$c$) is called a Cardano Triplet if it satisfies the condition:\n$$\\sqrt[3]{a + b \\sqrt{c}} + \\sqrt[3]{a - b \\sqrt{c}} = 1$$\nFor example, (2,1,5) is a Cardano Triplet.\nThere exist 149 Cardano Triplets for which $a + b + c ≤ 1000$.\nFind how many Cardano Triplets exist such that $a + b + c ≤ 110\\,000\\,000$.\n--hints--\ncardanoTriplets() should return 18946051.\njs\nassert.strictEqual(cardanoTriplets(), 18946051);\n--seed--\n--seed-contents--\n```js\nfunction cardanoTriplets() {\nreturn true;\n}\ncardanoTriplets();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 812,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-251-cardano-triplets.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d0605131a3c04636d265dc2c4ee4affc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-252-convex-holes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4691000cf542c50ff7b\ntitle: 'Problem 252: Convex Holes'\nchallengeType: 1\nforumTopicId: 301900\ndashedName: problem-252-convex-holes\n--description--\nGiven a set of points on a plane, we define a convex hole to be a convex polygon having as vertices any of the given points and not containing any of the given points in its interior (in addition to the vertices, other given points may lie on the perimeter of the polygon).\nAs an example, the image below shows a set of twenty points and a few such convex holes. The convex hole shown as a red heptagon has an area equal to 1049694.5 square units, which is the highest possible area for a convex hole on the given set of points.\nFor our example, we used the first 20 points ($T_{2k − 1}$, $T_{2k}$), for $k = 1, 2, \\ldots, 20$, produced with the pseudo-random number generator:\n$$\\begin{align}\nS_0 & = 290\\,797 \\\\\nS_{n+1} & = {S_n}^2 \\; \\text{mod} \\; 50\\,515\\,093 \\\\\nT_n & = (S_n \\; \\text{mod} \\; 2000) − 1000\n\\end{align}$$\ni.e. (527, 144), (−488, 732), (−454, −947), …\nWhat is the maximum area for a convex hole on the set containing the first 500 points in the pseudo-random sequence? Specify your answer including one digit after the decimal point.\n--hints--\nconvexHoles() should return 104924.\njs\nassert.strictEqual(convexHoles(), 104924);\n--seed--\n--seed-contents--\n```js\nfunction convexHoles() {\nreturn true;\n}\nconvexHoles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-252-convex-holes.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9e23648d9d2f7cd056ed83707df3b50c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-254-sums-of-digit-factorials.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f46b1000cf542c50ff7d\ntitle: 'Problem 254: Sums of Digit Factorials'\nchallengeType: 1\nforumTopicId: 301902\ndashedName: problem-254-sums-of-digit-factorials\n--description--\nDefine $f(n)$ as the sum of the factorials of the digits of $n$. For example, $f(342) = 3! + 4! + 2! = 32$.\nDefine $sf(n)$ as the sum of the digits of $f(n)$. So $sf(342) = 3 + 2 = 5$.\nDefine $g(i)$ to be the smallest positive integer $n$ such that $sf(n) = i$. Though $sf(342)$ is 5, $sf(25)$ is also 5, and it can be verified that $g(5)$ is 25.\nDefine $sg(i)$ as the sum of the digits of $g(i)$. So $sg(5) = 2 + 5 = 7$.\nFurther, it can be verified that $g(20)$ is 267 and $\\sum sg(i)$ for $1 ≤ i ≤ 20$ is 156.\nWhat is $\\sum sg(i)$ for $1 ≤ i ≤ 150$?\n--hints--\nsumsOfDigitFactorials() should return 8184523820510.\njs\nassert.strictEqual(sumsOfDigitFactorials(), 8184523820510);\n--seed--\n--seed-contents--\n```js\nfunction sumsOfDigitFactorials() {\nreturn true;\n}\nsumsOfDigitFactorials();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1071,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-254-sums-of-digit-factorials.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c530b3b283b1c499f91581754204ef12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-257-angular-bisectors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f46e1000cf542c50ff80\ntitle: 'Problem 257: Angular Bisectors'\nchallengeType: 1\nforumTopicId: 301905\ndashedName: problem-257-angular-bisectors\n--description--\nGiven is an integer sided triangle $ABC$ with sides $a ≤ b ≤ c$ ($AB = c$, $BC = a$ and $AC = b$).\nThe angular bisectors of the triangle intersect the sides at points $E$, $F$ and $G$ (see picture below).\nThe segments $EF$, $EG$ and $FG$ partition the triangle $ABC$ into four smaller triangles: $AEG$, $BFE$, $CGF$ and $EFG$. It can be proven that for each of these four triangles the ratio $\\frac{\\text{area}(ABC)}{\\text{area}(\\text{subtriangle})}$ is rational. However, there exist triangles for which some or all of these ratios are integral.\nHow many triangles $ABC$ with perimeter $≤ 100\\,000\\,000$ exist so that the ratio $\\frac{\\text{area}(ABC)}{\\text{area}(AEG)}$ is integral?\n--hints--\nangularBisectors() should return 139012411.\njs\nassert.strictEqual(angularBisectors(), 139012411);\n--seed--\n--seed-contents--\n```js\nfunction angularBisectors() {\nreturn true;\n}\nangularBisectors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1463,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-257-angular-bisectors.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "485f26251445b771af483819ccd1cb4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-253-tidying-up.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4691000cf542c50ff7c\ntitle: 'Problem 253: Tidying up'\nchallengeType: 1\nforumTopicId: 301901\ndashedName: problem-253-tidying-up\n--description--\nA small child has a \"number caterpillar\" consisting of forty jigsaw pieces, each with one number on it, which, when connected together in a line, reveal the numbers 1 to 40 in order Every night, the child's father has to pick up the pieces of the caterpillar that have been scattered across the play room He picks up the pieces at random and places them in the correct order As the caterpillar is built up in this way, it forms distinct segments that gradually merge together The number of segments starts at zero (no pieces placed), generally increases up to about eleven or twelve, then tends to drop again before finishing at a single segment (all pieces placed) For example:\n| Piece Placed | Segments So Far |\n| -------------|-----------------|\n|       12     |        1        |\n|        4     |        2        |\n|       29     |        3        |\n|        6     |        4        |\n|       34     |        5        |\n|        5     |        4        |\n|       35     |        4        |\n|       …      |        …        |\nLet $M$ be the maximum number of segments encountered during a random tidy-up of the caterpillar For a caterpillar of ten pieces, the number of possibilities for each $M$ is\n| M | Possibilities |\n|---|---------------|\n| 1 |      512      |\n| 2 |     250912    |\n| 3 |    1815264    |\n| 4 |    1418112    |\n| 5 |     144000    |\nso the most likely value of $M$ is 3 and the average value is $\\frac{385\\,643}{113\\,400} = 3 400732$, rounded to six decimal places The most likely value of $M$ for a forty-piece caterpillar is 11; but what is the average value of $M$ Give your answer rounded to six decimal places --hints--\ntidyingUp() should return 11 492847 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2084,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-253-tidying-up.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "43b39dcd8e531c96fa4a139dca1d0bd1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-253-tidying-up.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "250912 | | 3 | 1815264 | | 4 | 1418112 | | 5 | 144000 | so the most likely value of $M$ is 3 and the average value is $\\frac{385\\,643}{113\\,400} = 3 400732$, rounded to six decimal places The most likely value of $M$ for a forty-piece caterpillar is 11; but what is the average value of $M$ Give your answer rounded to six decimal places --hints-- tidyingUp() should return 11 492847 js assertstrictEqual(tidyingUp(), 11 492847);\n--seed--\n--seed-contents--\n```js\nfunction tidyingUp() {\nreturn true;\n}\ntidyingUp();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2084,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-253-tidying-up.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "23027c50a5367b0c9b24f304b9d74a73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-256-tatami-free-rooms.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f46c1000cf542c50ff7e\ntitle: 'Problem 256: Tatami-Free Rooms'\nchallengeType: 1\nforumTopicId: 301904\ndashedName: problem-256-tatami-free-rooms\n--description--\nTatami are rectangular mats, used to completely cover the floor of a room, without overlap Assuming that the only type of available tatami has dimensions 1×2, there are obviously some limitations for the shape and size of the rooms that can be covered For this problem, we consider only rectangular rooms with integer dimensions $a$, $b$ and even size $s = a \\times b$ We use the term 'size' to denote the floor surface area of the room, and — without loss of generality — we add the condition $a ≤ b$ There is one rule to follow when laying out tatami: there must be no points where corners of four different mats meet For example, consider the two arrangements below for a 4×4 room:\nThe arrangement on the left is acceptable, whereas the one on the right is not: a red \"X\" in the middle, marks the point where four tatami meet Because of this rule, certain even-sized rooms cannot be covered with tatami: we call them tatami-free rooms Further, we define $T(s)$ as the number of tatami-free rooms of size $s$ The smallest tatami-free room has size $s = 70$ and dimensions 7×10 All the other rooms of size $s = 70$ can be covered with tatami; they are: 1×70, 2×35 and 5×14 Hence, $T(70) = 1$ Similarly, we can verify that $T(1320) = 5$ because there are exactly 5 tatami-free rooms of size $s = 1320$: 20×66, 22×60, 24×55, 30×44 and 33×40 In fact, $s = 1320$ is the smallest room-size $s$ for which $T(s) = 5$ Find the smallest room-size $s$ for which $T(s) = 200$ --hints--\ntatamiFreeRooms() should return 85765680 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-256-tatami-free-rooms.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f2550de25540e5a8fd270ae58c4f618a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-256-tatami-free-rooms.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "$s = 70$ can be covered with tatami; they are: 1×70, 2×35 and 5×14 Hence, $T(70) = 1$ Similarly, we can verify that $T(1320) = 5$ because there are exactly 5 tatami-free rooms of size $s = 1320$: 20×66, 22×60, 24×55, 30×44 and 33×40 In fact, $s = 1320$ is the smallest room-size $s$ for which $T(s) = 5$ Find the smallest room-size $s$ for which $T(s) = 200$ --hints-- tatamiFreeRooms() should return 85765680 js assertstrictEqual(tatamiFreeRooms(), 85765680);\n--seed--\n--seed-contents--\n```js\nfunction tatamiFreeRooms() {\nreturn true;\n}\ntatamiFreeRooms();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-256-tatami-free-rooms.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a852f3e78780f0f4c4106cd60a554485",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-258-a-lagged-fibonacci-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f46e1000cf542c50ff81\ntitle: 'Problem 258: A lagged Fibonacci sequence'\nchallengeType: 1\nforumTopicId: 301906\ndashedName: problem-258-a-lagged-fibonacci-sequence\n--description--\nA sequence is defined as:\n$g_k = 1$, for $0 ≤ k ≤ 1999$\n$g_k = g_{k - 2000} + g_{k - 1999}$, for $k ≥ 2000$.\nFind $g_k$ mod 20092010 for $k = {10}^{18}$.\n--hints--\nlaggedFibonacciSequence() should return 12747994.\njs\nassert.strictEqual(laggedFibonacciSequence(), 12747994);\n--seed--\n--seed-contents--\n```js\nfunction laggedFibonacciSequence() {\nreturn true;\n}\nlaggedFibonacciSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-258-a-lagged-fibonacci-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "808a225dbc2705243553c8a8b8e498f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-255-rounded-square-roots.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f46d1000cf542c50ff7f\ntitle: 'Problem 255: Rounded Square Roots'\nchallengeType: 1\nforumTopicId: 301903\ndashedName: problem-255-rounded-square-roots\n--description--\nWe define the rounded-square-root of a positive integer $n$ as the square root of $n$ rounded to the nearest integer The following procedure (essentially Heron's method adapted to integer arithmetic) finds the rounded-square-root of $n$:\nLet $d$ be the number of digits of the number $n$ If $d$ is odd, set $x_0 = 2 × {10}^{\\frac{d - 1}{2}}$ If $d$ is even, set $x_0 = 7 × {10}^{\\frac{d - 2}{2}}$ Repeat:\n$$x_{k + 1} = \\left\\lfloor\\frac{x_k + \\left\\lceil\\frac{n}{x_k}\\right\\rceil}{2}\\right\\rfloor$$\nuntil $x_{k + 1} = x_k$ As an example, let us find the rounded-square-root of $n = 4321$ $n$ has 4 digits, so $x_0 = 7 × {10}^{\\frac{4-2}{2}} = 70$ $$x_1 = \\left\\lfloor\\frac{70 + \\left\\lceil\\frac{4321}{70}\\right\\rceil}{2}\\right\\rfloor = 66 \\\\\nx_2 = \\left\\lfloor\\frac{66 + \\left\\lceil\\frac{4321}{66}\\right\\rceil}{2}\\right\\rfloor = 66$$\nSince $x_2 = x_1$, we stop here So, after just two iterations, we have found that the rounded-square-root of 4321 is 66 (the actual square root is 65 7343137…) The number of iterations required when using this method is surprisingly low For example, we can find the rounded-square-root of a 5-digit integer ($10\\,000 ≤ n ≤ 99\\,999$) with an average of 3 2102888889 iterations (the average value was rounded to 10 decimal places)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-255-rounded-square-roots.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "918fb51b8d3cdb636efac479754bcf90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-255-rounded-square-roots.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\left\\lceil\\frac{4321}{66}\\right\\rceil}{2}\\right\\rfloor = 66$$ Since $x_2 = x_1$, we stop here So, after just two iterations, we have found that the rounded-square-root of 4321 is 66 (the actual square root is 65 7343137…) The number of iterations required when using this method is surprisingly low For example, we can find the rounded-square-root of a 5-digit integer ($10\\,000 ≤ n ≤ 99\\,999$) with an average of 3 2102888889 iterations (the average value was rounded to 10 decimal places)Using the procedure described above, what is the average number of iterations required to find the rounded-square-root of a 14-digit number (${10}^{13} ≤ n < {10}^{14}$) Give your answer rounded to 10 decimal places Note: The symbols $⌊x⌋$ and $⌈x⌉$ represent the floor function and ceiling function respectively --hints--\nroundedSquareRoots() should return 4 447401118 js\nassert strictEqual(roundedSquareRoots(), 4 447401118);\n--seed--\n--seed-contents--\n```js\nfunction roundedSquareRoots() {\nreturn true;\n}\nroundedSquareRoots();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2116,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-255-rounded-square-roots.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "377255878cecf2ee0b20edc8e33827cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-259-reachable-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4701000cf542c50ff82\ntitle: 'Problem 259: Reachable Numbers'\nchallengeType: 1\nforumTopicId: 301907\ndashedName: problem-259-reachable-numbers\n--description--\nA positive integer will be called reachable if it can result from an arithmetic expression obeying the following rules:\nUses the digits 1 through 9, in that order and exactly once each.\nAny successive digits can be concatenated (for example, using the digits 2, 3 and 4 we obtain the number 234).\nOnly the four usual binary arithmetic operations (addition, subtraction, multiplication and division) are allowed.\nEach operation can be used any number of times, or not at all.\nUnary minus is not allowed.\nAny number of (possibly nested) parentheses may be used to define the order of operations.\nFor example, 42 is reachable, since $\\frac{1}{23} \\times ((4 \\times 5) - 6) \\times (78 - 9) = 42$.\nWhat is the sum of all positive reachable integers?\n--hints--\nreachableNumbers() should return 20101196798.\njs\nassert.strictEqual(reachableNumbers(), 20101196798);\n--seed--\n--seed-contents--\n```js\nfunction reachableNumbers() {\nreturn true;\n}\nreachableNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-259-reachable-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "99b195180740f4386446e69526d0782e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-260-stone-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4701000cf542c50ff83\ntitle: 'Problem 260: Stone Game'\nchallengeType: 1\nforumTopicId: 301909\ndashedName: problem-260-stone-game\n--description--\nA game is played with three piles of stones and two players.\nOn each player's turn, the player removes one or more stones from the piles. However, if the player takes stones from more than one pile, the same number of stones must be removed from each of the selected piles.\nIn other words, the player chooses some $N > 0$ and removes:\n$N$ stones from any single pile; or\n$N$ stones from each of any two piles ($2N$ total); or\n$N$ stones from each of the three piles ($3N$ total).\nThe player taking the last stone(s) wins the game.\nA winning configuration is one where the first player can force a win.\nFor example, (0,0,13), (0,11,11) and (5,5,5) are winning configurations because the first player can immediately remove all stones.\nA losing configuration is one where the second player can force a win, no matter what the first player does.\nFor example, (0,1,2) and (1,3,3) are losing configurations: any legal move leaves a winning configuration for the second player.\nConsider all losing configurations ($x_i$,$y_i$,$z_i$) where $x_i ≤ y_i ≤ z_i ≤ 100$. We can verify that $\\sum (x_i + y_i + z_i) = 173\\,895$ for these.\nFind $\\sum (x_i + y_i + z_i)$ where ($x_i$,$y_i$,$z_i$) ranges over the losing configurations with $x_i ≤ y_i ≤ z_i ≤ 1000$.\n--hints--\nstoneGame() should return 167542057.\njs\nassert.strictEqual(stoneGame(), 167542057);\n--seed--\n--seed-contents--\n```js\nfunction stoneGame() {\nreturn true;\n}\nstoneGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1700,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-260-stone-game.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "01eefbb63f376ba85b4b23b6131e80d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-261-pivotal-square-sums.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4711000cf542c50ff84\ntitle: 'Problem 261: Pivotal Square Sums'\nchallengeType: 1\nforumTopicId: 301910\ndashedName: problem-261-pivotal-square-sums\n--description--\nLet us call a positive integer $k$ a square-pivot, if there is a pair of integers $m > 0$ and $n ≥ k$, such that the sum of the ($m + 1$) consecutive squares up to $k$ equals the sum of the $m$ consecutive squares from ($n + 1$) on:\n$${(k - m)}^2 + \\ldots + k^2 = {(n + 1)}^2 + \\ldots + {(n + m)}^2$$\nSome small square-pivots are\n$$\\begin{align}\n& \\mathbf{4}: 3^2 + \\mathbf{4}^2 = 5^2 \\\\\n& \\mathbf{21}: {20}^2 + \\mathbf{21}^2 = {29}^2 \\\\\n& \\mathbf{24}: {21}^2 + {22}^2 + {23}^2 + \\mathbf{24}^2 = {25}^2 + {26}^2 + {27}^2 \\\\\n& \\mathbf{110}: {108}^2 + {109}^2 + \\mathbf{110}^2 = {133}^2 + {134}^2 \\\\\n\\end{align}$$\nFind the sum of all distinct square-pivots $≤ {10}^{10}$.\n--hints--\npivotalSquareSums() should return 238890850232021.\njs\nassert.strictEqual(pivotalSquareSums(), 238890850232021);\n--seed--\n--seed-contents--\n```js\nfunction pivotalSquareSums() {\nreturn true;\n}\npivotalSquareSums();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-261-pivotal-square-sums.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bfe38b1f42f8fed5f8fd61ffb06fb3df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-262-mountain-range.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4731000cf542c50ff85\ntitle: 'Problem 262: Mountain Range'\nchallengeType: 1\nforumTopicId: 301911\ndashedName: problem-262-mountain-range\n--description--\nThe following equation represents the continuous topography of a mountainous region, giving the elevation $h$ at any point ($x$,$y$):\n$$h = \\left(5000 - \\frac{x^2 + y^2 + xy}{200} + \\frac{25(x + y)}{2}\\right) \\times e^{-\\left|\\frac{x^2 + y^2}{1\\,000\\,000} - \\frac{3(x + y)}{2000} + \\frac{7}{10}\\right|}$$\nA mosquito intends to fly from A(200,200) to B(1400,1400), without leaving the area given by $0 ≤ x$, $y ≤ 1600$.\nBecause of the intervening mountains, it first rises straight up to a point A', having elevation $f$. Then, while remaining at the same elevation $f$, it flies around any obstacles until it arrives at a point B' directly above B.\nFirst, determine $f_{min}$ which is the minimum constant elevation allowing such a trip from A to B, while remaining in the specified area. Then, find the length of the shortest path between A' and B', while flying at that constant elevation $f_{min}$.\nGive that length as your answer, rounded to three decimal places.\nNote: For convenience, the elevation function shown above is repeated below, in a form suitable for most programming languages: h=( 5000-0.005*(x*x+y*y+x*y)+12.5*(x+y) )* exp( -abs(0.000001*(x*x+y*y)-0.0015*(x+y)+0.7) ).\n--hints--\nmountainRange() should return 2531.205.\njs\nassert.strictEqual(mountainRange(), 2531.205);\n--seed--\n--seed-contents--\n```js\nfunction mountainRange() {\nreturn true;\n}\nmountainRange();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1651,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-262-mountain-range.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2abca5dd62fc31cfea25439b3165c253",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-263-an-engineers-dream-come-true.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4741000cf542c50ff86\ntitle: 'Problem 263: An engineers'' dream come true'\nchallengeType: 1\nforumTopicId: 301912\ndashedName: problem-263-an-engineers-dream-come-true\n--description--\nConsider the number 6. The divisors of 6 are: 1,2,3 and 6.\nEvery number from 1 up to and including 6 can be written as a sum of distinct divisors of 6:\n$1 = 1$, $2 = 2$, $3 = 1 + 2$, $4 = 1 + 3$, $5 = 2 + 3$, $6 = 6$.\nA number $n$ is called a practical number if every number from 1 up to and including $n$ can be expressed as a sum of distinct divisors of $n$.\nA pair of consecutive prime numbers with a difference of six is called a sexy pair (since \"sex\" is the Latin word for \"six\"). The first sexy pair is (23, 29).\nWe may occasionally find a triple-pair, which means three consecutive sexy prime pairs, such that the second member of each pair is the first member of the next pair.\nWe shall call a number $n$ such that:\n($n - 9$, $n - 3$), ($n - 3$, $n + 3$), ($n + 3$, $n + 9$) form a triple-pair, and\nthe numbers $n - 8$, $n - 4$, $n$, $n + 4$ and $n + 8$ are all practical,\nan engineers’ paradise.\nFind the sum of the first four engineers’ paradises.\n--hints--\nengineersDreamComeTrue() should return 2039506520.\njs\nassert.strictEqual(engineersDreamComeTrue(), 2039506520);\n--seed--\n--seed-contents--\n```js\nfunction engineersDreamComeTrue() {\nreturn true;\n}\nengineersDreamComeTrue();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1491,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-263-an-engineers-dream-come-true.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "21b54223f14a9b079080126d96d965e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-265-binary-circles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4761000cf542c50ff88\ntitle: 'Problem 265: Binary Circles'\nchallengeType: 1\nforumTopicId: 301914\ndashedName: problem-265-binary-circles\n--description--\n$2^N$ binary digits can be placed in a circle so that all the $N$-digit clockwise subsequences are distinct.\nFor $N = 3$, two such circular arrangements are possible, ignoring rotations:\nFor the first arrangement, the 3-digit subsequences, in clockwise order, are: 000, 001, 010, 101, 011, 111, 110 and 100.\nEach circular arrangement can be encoded as a number by concatenating the binary digits starting with the subsequence of all zeros as the most significant bits and proceeding clockwise. The two arrangements for $N = 3$ are thus represented as 23 and 29:\n$${00010111}_2 = 23\\\\\n{00011101}_2 = 29$$\nCalling $S(N)$ the sum of the unique numeric representations, we can see that $S(3) = 23 + 29 = 52$.\nFind $S(5)$.\n--hints--\nbinaryCircles() should return 209110240768.\njs\nassert.strictEqual(binaryCircles(), 209110240768);\n--seed--\n--seed-contents--\n```js\nfunction binaryCircles() {\nreturn true;\n}\nbinaryCircles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-265-binary-circles.md",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3bd5140397dc8466d449b01abcb67b1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-264-triangle-centres.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4751000cf542c50ff87\ntitle: 'Problem 264: Triangle Centers'\nchallengeType: 1\nforumTopicId: 301913\ndashedName: problem-264-triangle-centres\n--description--\nConsider all the triangles having:\nAll their vertices on lattice points.\nCircumcenter at the origin O.\nOrthocenter at the point H(5, 0).\nThere are nine such triangles having a $\\text{perimeter} ≤ 50$.\nListed and shown in ascending order of their perimeter, they are:\nA(-4, 3), B(5, 0), C(4, -3)\nA(4, 3), B(5, 0), C(-4, -3)\nA(-3, 4), B(5, 0), C(3, -4)\nA(3, 4), B(5, 0), C(-3, -4)\nA(0, 5), B(5, 0), C(0, -5)\nA(1, 8), B(8, -1), C(-4, -7)\nA(8, 1), B(1, -8), C(-4, 7)\nA(2, 9), B(9, -2), C(-6, -7)\nA(9, 2), B(2, -9), C(-6, 7)\nThe sum of their perimeters, rounded to four decimal places, is 291.0089.\nFind all such triangles with a $\\text{perimeter} ≤ {10}^5$. Enter as your answer the sum of their perimeters rounded to four decimal places.\n--hints--\ntriangleCenters() should return 2816417.1055.\njs\nassert.strictEqual(triangleCenters(), 2816417.1055);\n--seed--\n--seed-contents--\n```js\nfunction triangleCenters() {\nreturn true;\n}\ntriangleCenters();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1601,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-264-triangle-centres.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8368488ea31b6a571e9e0f478c37166f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-266-pseudo-square-root.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4771000cf542c50ff89\ntitle: 'Problem 266: Pseudo Square Root'\nchallengeType: 1\nforumTopicId: 301915\ndashedName: problem-266-pseudo-square-root\n--description--\nThe divisors of 12 are: 1,2,3,4,6 and 12.\nThe largest divisor of 12 that does not exceed the square root of 12 is 3.\nWe shall call the largest divisor of an integer $n$ that does not exceed the square root of $n$ the pseudo square root ($PSR$) of $n$.\nIt can be seen that $PSR(3102) = 47$.\nLet $p$ be the product of the primes below 190. Find $PSR(p)\\bmod {10}^{16}$.\n--hints--\npseudoSquareRoot() should return 1096883702440585.\njs\nassert.strictEqual(pseudoSquareRoot(), 1096883702440585);\n--seed--\n--seed-contents--\n```js\nfunction pseudoSquareRoot() {\nreturn true;\n}\npseudoSquareRoot();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-266-pseudo-square-root.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c53257b3b45b133f636bef0b0c337dec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-268-counting-numbers-with-at-least-four-distinct-prime-factors-less-than-100.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4791000cf542c50ff8b\ntitle: >-\nProblem 268: Counting numbers with at least four distinct prime factors less\nthan 100\nchallengeType: 1\nforumTopicId: 301917\ndashedName: >-\nproblem-268-counting-numbers-with-at-least-four-distinct-prime-factors-less-than-100\n--description--\nIt can be verified that there are 23 positive integers less than 1000 that are divisible by at least four distinct primes less than 100.\nFind how many positive integers less than ${10}^{16}$ are divisible by at least four distinct primes less than 100.\n--hints--\nfourDistinctPrimeFactors() should return 785478606870985.\njs\nassert.strictEqual(fourDistinctPrimeFactors(), 785478606870985);\n--seed--\n--seed-contents--\n```js\nfunction fourDistinctPrimeFactors() {\nreturn true;\n}\nfourDistinctPrimeFactors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 882,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-268-counting-numbers-with-at-least-four-distinct-prime-factors-less-than-100.md",
      "source_type": "git_repo"
    },
    "token_count": 215,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a71be5d200736719864bb7bbf1e884ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-267-billionaire.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4771000cf542c50ff8a\ntitle: 'Problem 267: Billionaire'\nchallengeType: 1\nforumTopicId: 301916\ndashedName: problem-267-billionaire\n--description--\nYou are given a unique investment opportunity.\nStarting with £1 of capital, you can choose a fixed proportion, $f$, of your capital to bet on a fair coin toss repeatedly for 1000 tosses.\nYour return is double your bet for heads and you lose your bet for tails.\nFor example, if $f = \\frac{1}{4}$, for the first toss you bet £0.25, and if heads comes up you win £0.5 and so then have £1.5. You then bet £0.375 and if the second toss is tails, you have £1.125.\nChoosing $f$ to maximize your chances of having at least £1,000,000,000 after 1,000 flips, what is the chance that you become a billionaire?\nAll computations are assumed to be exact (no rounding), but give your answer rounded to 12 digits behind the decimal point in the form 0.abcdefghijkl.\n--hints--\nbillionaire() should return 0.999992836187.\njs\nassert.strictEqual(billionaire(), 0.999992836187);\n--seed--\n--seed-contents--\n```js\nfunction billionaire() {\nreturn true;\n}\nbillionaire();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1204,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-267-billionaire.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dc179864ac7e5caf8b6b3f7ed50ff2b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-271-modular-cubes-part-1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f47b1000cf542c50ff8d\ntitle: 'Problem 271: Modular Cubes, part 1'\nchallengeType: 1\nforumTopicId: 301921\ndashedName: problem-271-modular-cubes-part-1\n--description--\nFor a positive number $n$, define $S(n)$ as the sum of the integers $x$, for which $1 < x < n$ and $x^3 \\equiv 1\\bmod n$.\nWhen $n = 91$, there are 8 possible values for $x$, namely: 9, 16, 22, 29, 53, 74, 79, 81. Thus, $S(91) = 9 + 16 + 22 + 29 + 53 + 74 + 79 + 81 = 363$.\nFind $S(13\\,082\\,761\\,331\\,670\\,030)$.\n--hints--\nmodularCubesOne() should return 4617456485273130000.\njs\nassert.strictEqual(modularCubesOne(), 4617456485273130000);\n--seed--\n--seed-contents--\n```js\nfunction modularCubesOne() {\nreturn true;\n}\nmodularCubesOne();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 806,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-271-modular-cubes-part-1.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6bb94b48e4ad856fef67cf338943b119",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-269-polynomials-with-at-least-one-integer-root.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4791000cf542c50ff8c\ntitle: 'Problem 269: Polynomials with at least one integer root'\nchallengeType: 1\nforumTopicId: 301918\ndashedName: problem-269-polynomials-with-at-least-one-integer-root\n--description--\nA root or zero of a polynomial $P(x)$ is a solution to the equation $P(x) = 0$.\nDefine $P_n$ as the polynomial whose coefficients are the digits of $n$.\nFor example, $P_{5703}(x) = 5x^3 + 7x^2 + 3$.\nWe can see that:\n$P_n(0)$ is the last digit of $n$,\n$P_n(1)$ is the sum of the digits of $n$,\n$Pn(10)$ is $n$ itself.\nDefine $Z(k)$ as the number of positive integers, $n$, not exceeding $k$ for which the polynomial $P_n$ has at least one integer root.\nIt can be verified that $Z(100\\,000)$ is 14696.\nWhat is $Z({10}^{16})$?\n--hints--\npolynomialsWithOneIntegerRoot() should return 1311109198529286.\njs\nassert.strictEqual(polynomialsWithOneIntegerRoot(), 1311109198529286);\n--seed--\n--seed-contents--\n```js\nfunction polynomialsWithOneIntegerRoot() {\nreturn true;\n}\npolynomialsWithOneIntegerRoot();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1118,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-269-polynomials-with-at-least-one-integer-root.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "744e68f90b97e24721ffd533bf0a8052",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-270-cutting-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f47c1000cf542c50ff8e\ntitle: 'Problem 270: Cutting Squares'\nchallengeType: 1\nforumTopicId: 301920\ndashedName: problem-270-cutting-squares\n--description--\nA square piece of paper with integer dimensions $N×N$ is placed with a corner at the origin and two of its sides along the $x$- and $y$-axes. Then, we cut it up respecting the following rules:\nWe only make straight cuts between two points lying on different sides of the square, and having integer coordinates.\nTwo cuts cannot cross, but several cuts can meet at the same border point.\nProceed until no more legal cuts can be made.\nCounting any reflections or rotations as distinct, we call $C(N)$ the number of ways to cut an $N×N$ square. For example, $C(1) = 2$ and $C(2) = 30$ (shown below).\nWhat is $C(30)\\bmod {10}^8$ ?\n--hints--\ncuttingSquares() should return 82282080.\njs\nassert.strictEqual(cuttingSquares(), 82282080);\n--seed--\n--seed-contents--\n```js\nfunction cuttingSquares() {\nreturn true;\n}\ncuttingSquares();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1377,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-270-cutting-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "439feb414b8e61356b0c8c42aff02e86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-273-sum-of-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f47e1000cf542c50ff90\ntitle: 'Problem 273: Sum of Squares'\nchallengeType: 1\nforumTopicId: 301923\ndashedName: problem-273-sum-of-squares\n--description--\nConsider equations of the form: $a^2 + b^2 = N$, $0 ≤ a ≤ b$, $a$, $b$ and $N$ integer.\nFor $N = 65$ there are two solutions:\n$a = 1, b = 8$ and $a = 4, b = 7$.\nWe call $S(N)$ the sum of the values of $a$ of all solutions of $a^2 + b^2 = N$, $0 ≤ a ≤ b$, $a$, $b$ and $N$ integer.\nThus $S(65) = 1 + 4 = 5$.\nFind $\\sum S(N)$, for all squarefree $N$ only divisible by primes of the form $4k + 1$ with $4k + 1 < 150$.\n--hints--\nsumOfSquares() should return 2032447591196869000.\njs\nassert.strictEqual(sumOfSquares(), 2032447591196869000);\n--seed--\n--seed-contents--\n```js\nfunction sumOfSquares() {\nreturn true;\n}\nsumOfSquares();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 893,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-273-sum-of-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8fa28da8c12fdeb7b3a056c3648ea24f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-275-balanced-sculptures.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4801000cf542c50ff92\ntitle: 'Problem 275: Balanced Sculptures'\nchallengeType: 1\nforumTopicId: 301925\ndashedName: problem-275-balanced-sculptures\n--description--\nLet us define a balanced sculpture of order $n$ as follows:\nA polyomino made up of $n + 1$ tiles known as the blocks ($n$ tiles) and the plinth (remaining tile);\nthe plinth has its center at position ($x = 0$, $y = 0$);\nthe blocks have $y$-coordinates greater than zero (so the plinth is the unique lowest tile);\nthe center of mass of all the blocks, combined, has $x$-coordinate equal to zero.\nWhen counting the sculptures, any arrangements which are simply reflections about the $y$-axis, are not counted as distinct. For example, the 18 balanced sculptures of order 6 are shown below; note that each pair of mirror images (about the $y$-axis) is counted as one sculpture:\nThere are 964 balanced sculptures of order 10 and 360505 of order 15.\nHow many balanced sculptures are there of order 18?\n--hints--\nbalancedSculptures() should return 15030564.\njs\nassert.strictEqual(balancedSculptures(), 15030564);\n--seed--\n--seed-contents--\n```js\nfunction balancedSculptures() {\nreturn true;\n}\nbalancedSculptures();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1547,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-275-balanced-sculptures.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2a1a0a12ac5074c1bf186f8e77ac700f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-272-modular-cubes-part-2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f47d1000cf542c50ff8f\ntitle: 'Problem 272: Modular Cubes, part 2'\nchallengeType: 1\nforumTopicId: 301922\ndashedName: problem-272-modular-cubes-part-2\n--description--\nFor a positive number $n$, define $C(n)$ as the number of the integers $x$, for which $1 < x < n$ and $x^3 \\equiv 1\\bmod n$.\nWhen $n = 91$, there are 8 possible values for $x$, namely: 9, 16, 22, 29, 53, 74, 79, 81. Thus, $C(91) = 8$.\nFind the sum of the positive numbers $n ≤ {10}^{11}$ for which $C(n)=242$.\n--hints--\nmodularCubesTwo() should return 8495585919506151000.\njs\nassert.strictEqual(modularCubesTwo(), 8495585919506151000);\n--seed--\n--seed-contents--\n```js\nfunction modularCubesTwo() {\nreturn true;\n}\nmodularCubesTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-272-modular-cubes-part-2.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ffe09885beacaee2ae97eddc97b4aa0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-274-divisibility-multipliers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f47f1000cf542c50ff91\ntitle: 'Problem 274: Divisibility Multipliers'\nchallengeType: 1\nforumTopicId: 301924\ndashedName: problem-274-divisibility-multipliers\n--description--\nFor each integer $p > 1$ coprime to 10 there is a positive divisibility multiplier $m < p$ which preserves divisibility by $p$ for the following function on any positive integer, $n$:\n$f(n) = (\\text{all but the last digit of} \\; n) + (\\text{the last digit of} \\; n) \\times m$\nThat is, if $m$ is the divisibility multiplier for $p$, then $f(n)$ is divisible by $p$ if and only if $n$ is divisible by $p$.\n(When $n$ is much larger than $p$, $f(n)$ will be less than $n$ and repeated application of $f$ provides a multiplicative divisibility test for $p$.)\nFor example, the divisibility multiplier for 113 is 34.\n$f(76275) = 7627 + 5 \\times 34 = 7797$: 76275 and 7797 are both divisible by 113\n$f(12345) = 1234 + 5 \\times 34 = 1404$: 12345 and 1404 are both not divisible by 113\nThe sum of the divisibility multipliers for the primes that are coprime to 10 and less than 1000 is 39517. What is the sum of the divisibility multipliers for the primes that are coprime to 10 and less than ${10}^7$?\n--hints--\ndivisibilityMultipliers() should return 1601912348822.\njs\nassert.strictEqual(divisibilityMultipliers(), 1601912348822);\n--seed--\n--seed-contents--\n```js\nfunction divisibilityMultipliers() {\nreturn true;\n}\ndivisibilityMultipliers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1519,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-274-divisibility-multipliers.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2155047b531d44b55f9c6baf2f3d0e6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-276-primitive-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4801000cf542c50ff93\ntitle: 'Problem 276: Primitive Triangles'\nchallengeType: 1\nforumTopicId: 301926\ndashedName: problem-276-primitive-triangles\n--description--\nConsider the triangles with integer sides $a$, $b$ and $c$ with $a ≤ b ≤ c$.\nAn integer sided triangle $(a,b,c)$ is called primitive if $gcd(a,b,c) = 1$.\nHow many primitive integer sided triangles exist with a perimeter not exceeding $10\\,000\\,000$?\n--hints--\nprimitiveTriangles() should return 5777137137739633000.\njs\nassert.strictEqual(primitiveTriangles(), 5777137137739633000);\n--seed--\n--seed-contents--\n```js\nfunction primitiveTriangles() {\nreturn true;\n}\nprimitiveTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 754,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-276-primitive-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2d46d04c076841579405d1948cb0ba8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-278-linear-combinations-of-semiprimes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4831000cf542c50ff95\ntitle: 'Problem 278: Linear Combinations of Semiprimes'\nchallengeType: 1\nforumTopicId: 301928\ndashedName: problem-278-linear-combinations-of-semiprimes\n--description--\nGiven the values of integers $1 < a_1 < a_2 < \\ldots < a_n$, consider the linear combination $q_1a_1 + q_2a_2 + \\ldots + q_na_n = b$, using only integer values $q_k ≥ 0$.\nNote that for a given set of $a_k$, it may be that not all values of $b$ are possible. For instance, if $a_1 = 5$ and $a_2 = 7$, there are no $q_1 ≥ 0$ and $q_2 ≥ 0$ such that $b$ could be 1, 2, 3, 4, 6, 8, 9, 11, 13, 16, 18 or 23.\nIn fact, 23 is the largest impossible value of $b$ for $a_1 = 5$ and $a_2 = 7$. We therefore call $f(5, 7) = 23$. Similarly, it can be shown that $f(6, 10, 15)=29$ and $f(14, 22, 77) = 195$.\nFind $\\sum f(pq,pr,qr)$, where $p$, $q$ and $r$ are prime numbers and $p < q < r < 5000$.\n--hints--\nlinearCombinationOfSemiprimes() should return 1228215747273908500.\njs\nassert.strictEqual(linearCombinationOfSemiprimes(), 1228215747273908500);\n--seed--\n--seed-contents--\n```js\nfunction linearCombinationOfSemiprimes() {\nreturn true;\n}\nlinearCombinationOfSemiprimes();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-278-linear-combinations-of-semiprimes.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ede9fe92ba32fa3e718272834ececf7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-281-pizza-toppings.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4861000cf542c50ff98\ntitle: 'Problem 281: Pizza Toppings'\nchallengeType: 1\nforumTopicId: 301932\ndashedName: problem-281-pizza-toppings\n--description--\nYou are given a pizza (perfect circle) that has been cut into $m·n$ equal pieces and you want to have exactly one topping on each slice.\nLet $f(m,n)$ denote the number of ways you can have toppings on the pizza with $m$ different toppings ($m ≥ 2$), using each topping on exactly $n$ slices ($n ≥ 1$). Reflections are considered distinct, rotations are not.\nThus, for instance, $f(2,1) = 1$, $f(2,2) = f(3,1) = 2$ and $f(3,2) = 16$. $f(3,2)$ is shown below:\nFind the sum of all $f(m,n)$ such that $f(m,n) ≤ {10}^{15}$.\n--hints--\npizzaToppings() should return 1485776387445623.\njs\nassert.strictEqual(pizzaToppings(), 1485776387445623);\n--seed--\n--seed-contents--\n```js\nfunction pizzaToppings() {\nreturn true;\n}\npizzaToppings();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1276,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-281-pizza-toppings.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ae5ba6e4aba5a96b8b60e20bb1815ca2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-279-triangles-with-integral-sides-and-an-integral-angle.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4841000cf542c50ff96\ntitle: 'Problem 279: Triangles with integral sides and an integral angle'\nchallengeType: 1\nforumTopicId: 301929\ndashedName: problem-279-triangles-with-integral-sides-and-an-integral-angle\n--description--\nHow many triangles are there with integral sides, at least one integral angle (measured in degrees), and a perimeter that does not exceed ${10}^8$?\n--hints--\ntrianglesWithIntegralSidesAndAngle() should return 416577688.\njs\nassert.strictEqual(trianglesWithIntegralSidesAndAngle(), 416577688);\n--seed--\n--seed-contents--\n```js\nfunction trianglesWithIntegralSidesAndAngle() {\nreturn true;\n}\ntrianglesWithIntegralSidesAndAngle();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 752,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-279-triangles-with-integral-sides-and-an-integral-angle.md",
      "source_type": "git_repo"
    },
    "token_count": 188,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ccc936a67e0d4c276988a2fc0ea2e0a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-280-ant-and-seeds.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4841000cf542c50ff97\ntitle: 'Problem 280: Ant and seeds'\nchallengeType: 1\nforumTopicId: 301931\ndashedName: problem-280-ant-and-seeds\n--description--\nA laborious ant walks randomly on a 5x5 grid. The walk starts from the central square. At each step, the ant moves to an adjacent square at random, without leaving the grid; thus there are 2, 3 or 4 possible moves at each step depending on the ant's position.\nAt the start of the walk, a seed is placed on each square of the lower row. When the ant isn't carrying a seed and reaches a square of the lower row containing a seed, it will start to carry the seed. The ant will drop the seed on the first empty square of the upper row it eventually reaches.\nWhat's the expected number of steps until all seeds have been dropped in the top row? Give your answer rounded to 6 decimal places.\n--hints--\nantAndSeeds() should return 430.088247.\njs\nassert.strictEqual(antAndSeeds(), 430.088247);\n--seed--\n--seed-contents--\n```js\nfunction antAndSeeds() {\nreturn true;\n}\nantAndSeeds();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-280-ant-and-seeds.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f6725f9036969f576109bc320e624358",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-282-the-ackermann-function.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4861000cf542c50ff99\ntitle: 'Problem 282: The Ackermann function'\nchallengeType: 1\nforumTopicId: 301933\ndashedName: problem-282-the-ackermann-function\n--description--\nFor non-negative integers $m$, $n$, the Ackermann function $A(m, n)$ is defined as follows:\n$$A(m, n) =\n\\begin{cases}\nn + 1                 & \\text{if $m = 0$}             \\\\\nA(m - 1, 1)           & \\text{if $m > 0$ and $n = 0$} \\\\\nA(m - 1, A(m, n - 1)) & \\text{if $m > 0$ and $n > 0$}\n\\end{cases}$$\nFor example $A(1, 0) = 2$, $A(2, 2) = 7$ and $A(3, 4) = 125$.\nFind $\\displaystyle\\sum_{n = 0}^6 A(n, n)$ and give your answer mod ${14}^8$.\n--hints--\nackermanFunction() should return 1098988351.\njs\nassert.strictEqual(ackermanFunction(), 1098988351);\n--seed--\n--seed-contents--\n```js\nfunction ackermanFunction() {\nreturn true;\n}\nackermanFunction();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 923,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-282-the-ackermann-function.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dd277cd9495081147fe1655ee424c813",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-283-integer-sided-triangles-for-which-the-area--perimeter-ratio-is-integral.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4881000cf542c50ff9a\ntitle: >-\nProblem 283: Integer sided triangles for which the area / perimeter ratio is integral\nchallengeType: 1\nforumTopicId: 301934\ndashedName: >-\nproblem-283-integer-sided-triangles-for-which-the-area--perimeter-ratio-is-integral\n--description--\nConsider the triangle with sides 6, 8 and 10. It can be seen that the perimeter and the area are both equal to 24.\nSo the $\\frac{\\text{area}}{\\text{perimeter}}$ ratio is equal to 1.\nConsider also the triangle with sides 13, 14 and 15. The perimeter equals 42 while the area is equal to 84.\nSo for this triangle the $\\frac{\\text{area}}{\\text{perimeter}}$ ratio is equal to 2.\nFind the sum of the perimeters of all integer sided triangles for which the area/perimeter ratios are equal to positive integers not exceeding 1000.\n--hints--\nintegralAreaPerimeterRatio() should return 28038042525570324.\njs\nassert.strictEqual(integralAreaPerimeterRatio(), 28038042525570324);\n--seed--\n--seed-contents--\n```js\nfunction integralAreaPerimeterRatio() {\nreturn true;\n}\nintegralAreaPerimeterRatio();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1165,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-283-integer-sided-triangles-for-which-the-area--perimeter-ratio-is-integral.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "99b5a08d9bbf26d28dbbbd966d5e63c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-277-a-modified-collatz-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4811000cf542c50ff94\ntitle: 'Problem 277: A Modified Collatz sequence'\nchallengeType: 1\nforumTopicId: 301927\ndashedName: problem-277-a-modified-collatz-sequence\n--description--\nA modified Collatz sequence of integers is obtained from a starting value $a_1$ in the following way:\n$a_{n + 1} = \\frac{a_n}{3}$ if $a_n$ is divisible by 3 We shall denote this as a large downward step, \"D\" $a_{n + 1} = \\frac{4a_n + 2}{3}$ if $a_n$ divided by 3 gives a remainder of 1 We shall denote this as an upward step, \"U\" $a_{n + 1} = \\frac{2a_n - 1}{3}$ if $a_n$ divided by 3 gives a remainder of 2 We shall denote this as a small downward step, \"d\" The sequence terminates when some $a_n = 1$ Given any integer, we can list out the sequence of steps For instance if $a_1 = 231$, then the sequence $\\{a_n\\} = \\{231, 77, 51, 17, 11, 7, 10, 14, 9, 3, 1\\}$ corresponds to the steps \"DdDddUUdDD\" Of course, there are other sequences that begin with that same sequence \"DdDddUUdDD \" For instance, if $a_1 = 1004064$, then the sequence is DdDddUUdDDDdUDUUUdDdUUDDDUdDD In fact, 1004064 is the smallest possible $a_1 > {10}^6$ that begins with the sequence DdDddUUdDD What is the smallest $a_1 > {10}^{15}$ that begins with the sequence \"UDDDUdddDDUDDddDdDddDDUDDdUUDd\" --hints--\nmodifiedCollatzSequence() should return 1125977393124310 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1627,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-277-a-modified-collatz-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ad41263795935d3ec52110a3ed8937b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-277-a-modified-collatz-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "77, 51, 17, 11, 7, 10, 14, 9, 3, 1\\}$ corresponds to the steps \"DdDddUUdDD\" Of course, there are other sequences that begin with that same sequence \"DdDddUUdDD \" For instance, if $a_1 = 1004064$, then the sequence is DdDddUUdDDDdUDUUUdDdUUDDDUdDD In fact, 1004064 is the smallest possible $a_1 > {10}^6$ that begins with the sequence DdDddUUdDD What is the smallest $a_1 > {10}^{15}$ that begins with the sequence \"UDDDUdddDDUDDddDdDddDDUDDdUUDd\" --hints-- modifiedCollatzSequence() should return 1125977393124310 js assertstrictEqual(modifiedCollatzSequence(), 1125977393124310);\n--seed--\n--seed-contents--\n```js\nfunction modifiedCollatzSequence() {\nreturn true;\n}\nmodifiedCollatzSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1627,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-277-a-modified-collatz-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5ff20cd0a124eb6c8ad34a0645739b38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-284-steady-squares.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4891000cf542c50ff9b\ntitle: 'Problem 284: Steady Squares'\nchallengeType: 1\nforumTopicId: 301935\ndashedName: problem-284-steady-squares\n--description--\nThe 3-digit number 376 in the decimal numbering system is an example of numbers with the special property that its square ends with the same digits: ${376}^2 = 141376$. Let's call a number with this property a steady square.\nSteady squares can also be observed in other numbering systems. In the base 14 numbering system, the 3-digit number $c37$ is also a steady square: $c37^2 = aa0c37$, and the sum of its digits is $c+3+7=18$ in the same numbering system. The letters $a$, $b$, $c$ and $d$ are used for the 10, 11, 12 and 13 digits respectively, in a manner similar to the hexadecimal numbering system.\nFor $1 ≤ n ≤ 9$, the sum of the digits of all the $n$-digit steady squares in the base 14 numbering system is $2d8$ (582 decimal). Steady squares with leading 0's are not allowed.\nFind the sum of the digits of all the $n$-digit steady squares in the base 14 numbering system for $1 ≤ n ≤ 10000$ (decimal) and give your answer as a string in the base 14 system using lower case letters where necessary.\n--hints--\nsteadySquares() should return a string.\njs\nassert.isString(steadySquares());\nsteadySquares() should return the string 5a411d7b.\njs\nassert.strictEqual(steadySquares(), '5a411d7b');\n--seed--\n--seed-contents--\n```js\nfunction steadySquares() {\nreturn true;\n}\nsteadySquares();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-284-steady-squares.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bb970657013afbd3faad27a9513812b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-285-pythagorean-odds.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f48a1000cf542c50ff9c\ntitle: 'Problem 285: Pythagorean odds'\nchallengeType: 1\nforumTopicId: 301936\ndashedName: problem-285-pythagorean-odds\n--description--\nAlbert chooses a positive integer $k$, then two real numbers $a$, $b$ are randomly chosen in the interval [0,1] with uniform distribution.\nThe square root of the sum ${(ka + 1)}^2 + {(kb + 1)}^2$ is then computed and rounded to the nearest integer. If the result is equal to $k$, he scores $k$ points; otherwise he scores nothing.\nFor example, if $k = 6$, $a = 0.2$ and $b = 0.85$, then ${(ka + 1)}^2 + {(kb + 1)}^2 = 42.05$. The square root of 42.05 is 6.484... and when rounded to the nearest integer, it becomes 6. This is equal to $k$, so he scores 6 points.\nIt can be shown that if he plays 10 turns with $k = 1, k = 2, \\ldots, k = 10$, the expected value of his total score, rounded to five decimal places, is 10.20914.\nIf he plays ${10}^5$ turns with $k = 1, k = 2, k = 3, \\ldots, k = {10}^5$, what is the expected value of his total score, rounded to five decimal places?\n--hints--\npythagoreanOdds() should return 157055.80999.\njs\nassert.strictEqual(pythagoreanOdds(), 157055.80999);\n--seed--\n--seed-contents--\n```js\nfunction pythagoreanOdds() {\nreturn true;\n}\npythagoreanOdds();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1348,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-285-pythagorean-odds.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d5aa2d0e73009fcec0e02af9c7cb1fc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-286-scoring-probabilities.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f48a1000cf542c50ff9d\ntitle: 'Problem 286: Scoring probabilities'\nchallengeType: 1\nforumTopicId: 301937\ndashedName: problem-286-scoring-probabilities\n--description--\nBarbara is a mathematician and a basketball player. She has found that the probability of scoring a point when shooting from a distance $x$ is exactly ($1 - \\frac{x}{q}$), where $q$ is a real constant greater than 50.\nDuring each practice run, she takes shots from distances $x = 1, x = 2, \\ldots, x = 50$ and, according to her records, she has precisely a 2 % chance to score a total of exactly 20 points.\nFind $q$ and give your answer rounded to 10 decimal places.\n--hints--\nscoringProbabilities() should return 52.6494571953.\njs\nassert.strictEqual(scoringProbabilities(), 52.6494571953);\n--seed--\n--seed-contents--\n```js\nfunction scoringProbabilities() {\nreturn true;\n}\nscoringProbabilities();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 965,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-286-scoring-probabilities.md",
      "source_type": "git_repo"
    },
    "token_count": 255,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "23bafbf9fd4844e0af2806a7d1a08283",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-288-an-enormous-factorial.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f48d1000cf542c50ff9f\ntitle: 'Problem 288: An enormous factorial'\nchallengeType: 1\nforumTopicId: 301939\ndashedName: problem-288-an-enormous-factorial\n--description--\nFor any prime $p$ the number $N(p,q)$ is defined by $N(p,q) = \\sum_{n=0}^q T_n \\times p^n$ with $T_n$ generated by the following random number generator:\n$$\\begin{align}\n& S_0 = 290797 \\\\\n& S_{n + 1} = {S_n}^2\\bmod 50\\,515\\,093 \\\\\n& T_n = S_n\\bmod p\n\\end{align}$$\nLet $Nfac(p,q)$ be the factorial of $N(p,q)$.\nLet $NF(p,q)$ be the number of factors $p$ in $Nfac(p,q)$.\nYou are given that $NF(3,10000) \\bmod 3^{20} = 624\\,955\\,285$.\nFind $NF(61,{10}^7)\\bmod {61}^{10}$.\n--hints--\nenormousFactorial() should return 605857431263982000.\njs\nassert.strictEqual(enormousFactorial(), 605857431263982000);\n--seed--\n--seed-contents--\n```js\nfunction enormousFactorial() {\nreturn true;\n}\nenormousFactorial();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-288-an-enormous-factorial.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "30ef2b30007e1af318f797defeaef804",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-287-quadtree-encoding-a-simple-compression-algorithm.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f48b1000cf542c50ff9e\ntitle: 'Problem 287: Quadtree encoding (a simple compression algorithm)'\nchallengeType: 1\nforumTopicId: 301938\ndashedName: problem-287-quadtree-encoding-a-simple-compression-algorithm\n--description--\nThe quadtree encoding allows us to describe a $2^N×2^N$ black and white image as a sequence of bits (0 and 1). Those sequences are to be read from left to right like this:\nthe first bit deals with the complete $2^N×2^N$ region;\n\"0\" denotes a split:\nthe current $2^n×2^n$ region is divided into 4 sub-regions of dimension $2^{n - 1}×2^{n - 1}$,\nthe next bits contains the description of the top left, top right, bottom left and bottom right sub-regions - in that order;\n\"10\" indicates that the current region contains only black pixels;\n\"11\" indicates that the current region contains only white pixels.\nConsider the following 4×4 image (colored marks denote places where a split can occur):\nThis image can be described by several sequences, for example : \"001010101001011111011010101010\", of length 30, or \"0100101111101110\", of length 16, which is the minimal sequence for this image.\nFor a positive integer $N$, define $D_N$ as the $2^N×2^N$ image with the following coloring scheme:\nthe pixel with coordinates $x = 0$, $y = 0$ corresponds to the bottom left pixel,\nif ${(x - 2^{N - 1})}^2 + {(y - 2^{N - 1})}^2 ≤ 2^{2N - 2}$ then the pixel is black,\notherwise the pixel is white.\nWhat is the length of the minimal sequence describing $D_{24}$?\n--hints--\nquadtreeEncoding() should return 313135496.\njs\nassert.strictEqual(quadtreeEncoding(), 313135496);\n--seed--\n--seed-contents--\n```js\nfunction quadtreeEncoding() {\nreturn true;\n}\nquadtreeEncoding();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2431,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-287-quadtree-encoding-a-simple-compression-algorithm.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6f86957c537e391472e3b1e0648da78a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-289-eulerian-cycles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f48d1000cf542c50ffa0\ntitle: 'Problem 289: Eulerian Cycles'\nchallengeType: 1\nforumTopicId: 301940\ndashedName: problem-289-eulerian-cycles\n--description--\nLet $C(x,y)$ be a circle passing through the points ($x$, $y$), ($x$, $y + 1$), ($x + 1$, $y$) and ($x + 1$, $y + 1$).\nFor positive integers $m$ and $n$, let $E(m,n)$ be a configuration which consists of the $m·n$ circles: { $C(x,y)$: $0 ≤ x < m$, $0 ≤ y < n$, $x$ and $y$ are integers }\nAn Eulerian cycle on $E(m,n)$ is a closed path that passes through each arc exactly once. Many such paths are possible on $E(m,n)$, but we are only interested in those which are not self-crossing: A non-crossing path just touches itself at lattice points, but it never crosses itself.\nThe image below shows $E(3,3)$ and an example of an Eulerian non-crossing path.\nLet $L(m,n)$ be the number of Eulerian non-crossing paths on $E(m,n)$. For example, $L(1,2) = 2$, $L(2,2) = 37$ and $L(3,3) = 104290$.\nFind $L(6,10)\\bmod {10}^{10}$.\n--hints--\neulerianCycles() should return 6567944538.\njs\nassert.strictEqual(eulerianCycles(), 6567944538);\n--seed--\n--seed-contents--\n```js\nfunction eulerianCycles() {\nreturn true;\n}\neulerianCycles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-289-eulerian-cycles.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "540db2838c9f75f344c841665d9c5682",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-290-digital-signature.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f48f1000cf542c50ffa1\ntitle: 'Problem 290: Digital Signature'\nchallengeType: 1\nforumTopicId: 301942\ndashedName: problem-290-digital-signature\n--description--\nHow many integers $0 ≤ n < {10}^{18}$ have the property that the sum of the digits of $n$ equals the sum of digits of $137n$?\n--hints--\ndigitalSignature() should return 20444710234716470.\njs\nassert.strictEqual(digitalSignature(), 20444710234716470);\n--seed--\n--seed-contents--\n```js\nfunction digitalSignature() {\nreturn true;\n}\ndigitalSignature();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 611,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-290-digital-signature.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2a0f0b6dd6696d898db5cdc73edc8351",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-292-pythagorean-polygons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4911000cf542c50ffa3\ntitle: 'Problem 292: Pythagorean Polygons'\nchallengeType: 1\nforumTopicId: 301944\ndashedName: problem-292-pythagorean-polygons\n--description--\nWe shall define a pythagorean polygon to be a convex polygon with the following properties:\nthere are at least three vertices,\nno three vertices are aligned,\neach vertex has integer coordinates,\neach edge has integer length.\nFor a given integer $n$, define $P(n)$ as the number of distinct pythagorean polygons for which the perimeter is $≤ n$.\nPythagorean polygons should be considered distinct as long as none is a translation of another.\nYou are given that $P(4) = 1$, $P(30) = 3655$ and $P(60) = 891045$.\nFind $P(120)$.\n--hints--\npythagoreanPolygons() should return 3600060866.\njs\nassert.strictEqual(pythagoreanPolygons(), 3600060866);\n--seed--\n--seed-contents--\n```js\nfunction pythagoreanPolygons() {\nreturn true;\n}\npythagoreanPolygons();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1023,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-292-pythagorean-polygons.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "32087f5e44e574852f8c9bf877d5e5d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-291-panaitopol-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f48f1000cf542c50ffa2\ntitle: 'Problem 291: Panaitopol Primes'\nchallengeType: 1\nforumTopicId: 301943\ndashedName: problem-291-panaitopol-primes\n--description--\nA prime number $p$ is called a Panaitopol prime if $p = \\frac{x^4 - y^4}{x^3 + y^3}$ for some positive integers $x$ and $y$.\nFind how many Panaitopol primes are less than $5 × {10}^{15}$.\n--hints--\npanaitopolPrimes() should return 4037526.\njs\nassert.strictEqual(panaitopolPrimes(), 4037526);\n--seed--\n--seed-contents--\n```js\nfunction panaitopolPrimes() {\nreturn true;\n}\npanaitopolPrimes();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-291-panaitopol-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6beba499b158d809d1e8422cbc98fab8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-296-angular-bisector-and-tangent.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4941000cf542c50ffa7\ntitle: 'Problem 296: Angular Bisector and Tangent'\nchallengeType: 1\nforumTopicId: 301948\ndashedName: problem-296-angular-bisector-and-tangent\n--description--\nGiven is an integer sided triangle $ABC$ with $BC ≤ AC ≤ AB$. $k$ is the angular bisector of angle $ACB$. $m$ is the tangent at $C$ to the circumscribed circle of $ABC$. $n$ is a line parallel to $m$ through $B$.\nThe intersection of $n$ and $k$ is called $E$.\nHow many triangles $ABC$ with a perimeter not exceeding $100\\,000$ exist such that $BE$ has integral length?\n--hints--\nangularBisectorAndTangent() should return 1137208419.\njs\nassert.strictEqual(angularBisectorAndTangent(), 1137208419);\n--seed--\n--seed-contents--\n```js\nfunction angularBisectorAndTangent() {\nreturn true;\n}\nangularBisectorAndTangent();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1286,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-296-angular-bisector-and-tangent.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "630848092b112bc7ce00a4a07e3c597a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-294-sum-of-digits---experience-23.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4931000cf542c50ffa5\ntitle: 'Problem 294: Sum of digits - experience #23'\nchallengeType: 1\nforumTopicId: 301946\ndashedName: problem-294-sum-of-digits---experience-23\n--description--\nFor a positive integer $k$, define $d(k)$ as the sum of the digits of $k$ in its usual decimal representation. Thus $d(42) = 4 + 2 = 6$.\nFor a positive integer $n$, define $S(n)$ as the number of positive integers $k < {10}^n$ with the following properties:\n$k$ is divisible by 23 and,\n$d(k) = 23$.\nYou are given that $S(9) = 263\\,626$ and $S(42) = 6\\,377\\,168\\,878\\,570\\,056$.\nFind $S({11}^{12})$ and give your answer $\\bmod {10}^9$.\n--hints--\nexperience23() should return 789184709.\njs\nassert.strictEqual(experience23(), 789184709);\n--seed--\n--seed-contents--\n```js\nfunction experience23() {\nreturn true;\n}\nexperience23();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 925,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-294-sum-of-digits---experience-23.md",
      "source_type": "git_repo"
    },
    "token_count": 284,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "288526fa82e5628142dc61ab7d2a175a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-293-pseudo-fortunate-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4931000cf542c50ffa4\ntitle: 'Problem 293: Pseudo-Fortunate Numbers'\nchallengeType: 1\nforumTopicId: 301945\ndashedName: problem-293-pseudo-fortunate-numbers\n--description--\nAn even positive integer $N$ will be called admissible, if it is a power of 2 or its distinct prime factors are consecutive primes.\nThe first twelve admissible numbers are 2, 4, 6, 8, 12, 16, 18, 24, 30, 32, 36, 48.\nIf $N$ is admissible, the smallest integer $M > 1$ such that $N + M$ is prime, will be called the pseudo-Fortunate number for $N$.\nFor example, $N = 630$ is admissible since it is even and its distinct prime factors are the consecutive primes 2, 3, 5 and 7. The next prime number after 631 is 641; hence, the pseudo-Fortunate number for 630 is $M = 11$. It can also be seen that the pseudo-Fortunate number for 16 is 3.\nFind the sum of all distinct pseudo-Fortunate numbers for admissible numbers $N$ less than ${10}^9$.\n--hints--\npseudoFortunateNumbers() should return 2209.\njs\nassert.strictEqual(pseudoFortunateNumbers(), 2209);\n--seed--\n--seed-contents--\n```js\nfunction pseudoFortunateNumbers() {\nreturn true;\n}\npseudoFortunateNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-293-pseudo-fortunate-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "199a015b4fe11abd223ada39cc7040c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-295-lenticular-holes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4931000cf542c50ffa6\ntitle: 'Problem 295: Lenticular holes'\nchallengeType: 1\nforumTopicId: 301947\ndashedName: problem-295-lenticular-holes\n--description--\nWe call the convex area enclosed by two circles a lenticular hole if:\nThe centers of both circles are on lattice points.\nThe two circles intersect at two distinct lattice points.\nThe interior of the convex area enclosed by both circles does not contain any lattice points.\nConsider the circles:\n$$\\begin{align}\n& C_0: x^2 + y^2 = 25 \\\\\n& C_1: {(x + 4)}^2 + {(y - 4)}^2 = 1 \\\\\n& C_2: {(x - 12)}^2 + {(y - 4)}^2 = 65\n\\end{align}$$\nThe circles $C_0$, $C_1$ and $C_2$ are drawn in the picture below.\n$C_0$ and $C_1$ form a lenticular hole, as well as $C_0$ and $C_2$.\nWe call an ordered pair of positive real numbers ($r_1$, $r_2$) a lenticular pair if there exist two circles with radii $r_1$ and $r_2$ that form a lenticular hole. We can verify that ($1$, $5$) and ($5$, $\\sqrt{65}$) are the lenticular pairs of the example above.\nLet $L(N)$ be the number of distinct lenticular pairs ($r_1$, $r_2$) for which $0 < r_1 ≤ r_2 ≤ N$. We can verify that $L(10) = 30$ and $L(100) = 3442$.\nFind $L(100\\,000)$.\n--hints--\nlenticularHoles() should return 4884650818.\njs\nassert.strictEqual(lenticularHoles(), 4884650818);\n--seed--\n--seed-contents--\n```js\nfunction lenticularHoles() {\nreturn true;\n}\nlenticularHoles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1739,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-295-lenticular-holes.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f2ed140d7a21ff153818ed4348798607",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-299-three-similar-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4971000cf542c50ffaa\ntitle: 'Problem 299: Three similar triangles'\nchallengeType: 1\nforumTopicId: 301951\ndashedName: problem-299-three-similar-triangles\n--description--\nFour points with integer coordinates are selected:\n$A(a, 0)$, $B(b, 0)$, $C(0, c)$ and $D(0, d)$, with $0 < a < b$ and $0 < c < d$.\nPoint $P$, also with integer coordinates, is chosen on the line $AC$ so that the three triangles $ABP$, $CDP$ and $BDP$ are all similar.\nIt is easy to prove that the three triangles can be similar, only if $a = c$.\nSo, given that $a = c$, we are looking for triplets ($a$, $b$, $d$) such that at least one point $P$ (with integer coordinates) exists on $AC$, making the three triangles $ABP$, $CDP$ and $BDP$ all similar.\nFor example, if $(a, b, d) = (2, 3, 4)$, it can be easily verified that point $P(1, 1)$ satisfies the above condition. Note that the triplets (2,3,4) and (2,4,3) are considered as distinct, although point $P(1, 1)$ is common for both.\nIf $b + d < 100$, there are 92 distinct triplets ($a$, $b$, $d$) such that point $P$ exists.\nIf $b + d < 100\\,000$, there are 320471 distinct triplets ($a$, $b$, $d$) such that point $P$ exists.\nIf $b + d < 100\\,000\\,000$, how many distinct triplets ($a$, $b$, $d$) are there such that point $P$ exists?\n--hints--\nthreeSimilarTriangles() should return 549936643.\njs\nassert.strictEqual(threeSimilarTriangles(), 549936643);\n--seed--\n--seed-contents--\n```js\nfunction threeSimilarTriangles() {\nreturn true;\n}\nthreeSimilarTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-299-three-similar-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "137cb9f8e58ea4f52526fb0ef7300b16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-297-zeckendorf-representation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4951000cf542c50ffa8\ntitle: 'Problem 297: Zeckendorf Representation'\nchallengeType: 1\nforumTopicId: 301949\ndashedName: problem-297-zeckendorf-representation\n--description--\nEach new term in the Fibonacci sequence is generated by adding the previous two terms.\nStarting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.\nEvery positive integer can be uniquely written as a sum of nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 + 8 + 89.\nSuch a sum is called the Zeckendorf representation of the number.\nFor any integer $n>0$, let $z(n)$ be the number of terms in the Zeckendorf representation of $n$.\nThus, $z(5) = 1$, $z(14) = 2$, $z(100) = 3$ etc.\nAlso, for $0 < n < {10}^6$, $\\sum z(n) = 7\\,894\\,453$.\nFind $\\sum z(n)$ for $0 < n < {10}^{17}$.\n--hints--\nzeckendorfRepresentation() should return 2252639041804718000.\njs\nassert.strictEqual(zeckendorfRepresentation(), 2252639041804718000);\n--seed--\n--seed-contents--\n```js\nfunction zeckendorfRepresentation() {\nreturn true;\n}\nzeckendorfRepresentation();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-297-zeckendorf-representation.md",
      "source_type": "git_repo"
    },
    "token_count": 363,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1c12d0745e44d029a8a2fc981a537620",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-300-protein-folding.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f49a1000cf542c50ffac\ntitle: 'Problem 300: Protein folding'\nchallengeType: 1\nforumTopicId: 301954\ndashedName: problem-300-protein-folding\n--description--\nIn a very simplified form, we can consider proteins as strings consisting of hydrophobic (H) and polar (P) elements, e.g. HHPPHHHPHHPH.\nFor this problem, the orientation of a protein is important; e.g. HPP is considered distinct from PPH. Thus, there are $2^n$ distinct proteins consisting of $n$ elements.\nWhen one encounters these strings in nature, they are always folded in such a way that the number of H-H contact points is as large as possible, since this is energetically advantageous.\nAs a result, the H-elements tend to accumulate in the inner part, with the P-elements on the outside.\nNatural proteins are folded in three dimensions of course, but we will only consider protein folding in two dimensions.\nThe figure below shows two possible ways that our example protein could be folded (H-H contact points are shown with red dots).\nThe folding on the left has only six H-H contact points, thus it would never occur naturally. On the other hand, the folding on the right has nine H-H contact points, which is optimal for this string.\nAssuming that H and P elements are equally likely to occur in any position along the string, the average number of H-H contact points in an optimal folding of a random protein string of length 8 turns out to be $\\frac{850}{2^8} = 3.3203125$.\nWhat is the average number of H-H contact points in an optimal folding of a random protein string of length 15? Give your answer using as many decimal places as necessary for an exact result.\n--hints--\nproteinFolding() should return 8.0540771484375.\njs\nassert.strictEqual(proteinFolding(), 8.0540771484375);\n--seed--\n--seed-contents--\n```js\nfunction proteinFolding() {\nreturn true;\n}\nproteinFolding();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2219,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-300-protein-folding.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "96cf34fb4655951b22225094cdcb1088",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-302-strong-achilles-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f49b1000cf542c50ffad\ntitle: 'Problem 302: Strong Achilles Numbers'\nchallengeType: 1\nforumTopicId: 301956\ndashedName: problem-302-strong-achilles-numbers\n--description--\nA positive integer $n$ is powerful if $p^2$ is a divisor of $n$ for every prime factor $p$ in $n$.\nA positive integer $n$ is a perfect power if $n$ can be expressed as a power of another positive integer.\nA positive integer $n$ is an Achilles number if $n$ is powerful but not a perfect power. For example, 864 and 1800 are Achilles numbers: $864 = 2^5 \\times 3^3$ and $1800 = 2^3 \\times 3^2 \\times 5^2$.\nWe shall call a positive integer $S$ a Strong Achilles number if both $S$ and $φ(S)$ are Achilles numbers. $φ$ denotes Euler's totient function.\nFor example, 864 is a Strong Achilles number: $φ(864) = 288 = 2^5 \\times 3^2$. However, 1800 isn't a Strong Achilles number because: $φ(1800) = 480 = 2^5 \\times 3^1 \\times 5^1$.\nThere are 7 Strong Achilles numbers below ${10}^4$ and 656 below ${10}^8$.\nHow many Strong Achilles numbers are there below ${10}^{18}$?\n--hints--\nstrongAchillesNumbers() should return 1170060.\njs\nassert.strictEqual(strongAchillesNumbers(), 1170060);\n--seed--\n--seed-contents--\n```js\nfunction strongAchillesNumbers() {\nreturn true;\n}\nstrongAchillesNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1367,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-302-strong-achilles-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0ff7991efd2ab186084ebfefd377338c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-301-nim.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4991000cf542c50ffab\ntitle: 'Problem 301: Nim'\nchallengeType: 1\nforumTopicId: 301955\ndashedName: problem-301-nim\n--description--\nNim is a game played with heaps of stones, where two players take it in turn to remove any number of stones from any heap until no stones remain.\nWe'll consider the three-heap normal-play version of Nim, which works as follows:\nAt the start of the game there are three heaps of stones.\nOn his turn the player removes any positive number of stones from any single heap.\nThe first player unable to move (because no stones remain) loses.\nIf ($n_1$, $n_2$, $n_3$) indicates a Nim position consisting of heaps of size $n_1$, $n_2$ and $n_3$ then there is a simple function $X(n_1,n_2,n_3)$ — that you may look up or attempt to deduce for yourself — that returns:\nzero if, with perfect strategy, the player about to move will eventually lose; or\nnon-zero if, with perfect strategy, the player about to move will eventually win.\nFor example $X(1, 2, 3) = 0$ because, no matter what the current player does, his opponent can respond with a move that leaves two heaps of equal size, at which point every move by the current player can be mirrored by his opponent until no stones remain; so the current player loses. To illustrate:\ncurrent player moves to (1,2,1)\nopponent moves to (1,0,1)\ncurrent player moves to (0,0,1)\nopponent moves to (0,0,0), and so wins.\nFor how many positive integers $n ≤ 2^{30}$ does $X(n, 2n, 3n) = 0$?\n--hints--\nnim() should return 2178309.\njs\nassert.strictEqual(nim(), 2178309);\n--seed--\n--seed-contents--\n```js\nfunction nim() {\nreturn true;\n}\nnim();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-301-nim.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "00e8d3d2d2b8898ea1e0467f4b17fd24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-303-multiples-with-small-digits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f49b1000cf542c50ffae\ntitle: 'Problem 303: Multiples with small digits'\nchallengeType: 1\nforumTopicId: 301957\ndashedName: problem-303-multiples-with-small-digits\n--description--\nFor a positive integer $n$, define $f(n)$ as the least positive multiple of $n$ that, written in base 10, uses only digits $≤ 2$.\nThus $f(2) = 2$, $f(3) = 12$, $f(7) = 21$, $f(42) = 210$, $f(89) = 1\\,121\\,222$.\nAlso, $\\displaystyle\\sum_{n = 1}^{100} \\frac{f(n)}{n} = 11\\,363\\,107$.\nFind $\\displaystyle\\sum_{n = 1}^{10\\,000} \\frac{f(n)}{n}$.\n--hints--\nmultiplesWithSmallDigits() should return 1111981904675169.\njs\nassert.strictEqual(multiplesWithSmallDigits(), 1111981904675169);\n--seed--\n--seed-contents--\n```js\nfunction multiplesWithSmallDigits() {\nreturn true;\n}\nmultiplesWithSmallDigits();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-303-multiples-with-small-digits.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4d6be5e92a3bbffad654cd58f9a12171",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-304-primonacci.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f49d1000cf542c50ffaf\ntitle: 'Problem 304: Primonacci'\nchallengeType: 1\nforumTopicId: 301958\ndashedName: problem-304-primonacci\n--description--\nFor any positive integer $n$ the function $\\text{next_prime}(n)$ returns the smallest prime $p$ such that $p > n$.\nThe sequence $a(n)$ is defined by: $a(1) = \\text{next_prime}({10}^{14})$ and $a(n) = \\text{next_prime}(a(n - 1))$ for $n > 1$.\nThe fibonacci sequence $f(n)$ is defined by: $f(0) = 0$, $f(1) = 1$ and $f(n) = f(n - 1) + f(n - 2)$ for $n > 1$.\nThe sequence $b(n)$ is defined as $f(a(n))$.\nFind $\\sum b(n)$ for $1≤n≤100\\,000$. Give your answer $\\bmod 1\\,234\\,567\\,891\\,011$.\n--hints--\nprimonacci() should return 283988410192.\njs\nassert.strictEqual(primonacci(), 283988410192);\n--seed--\n--seed-contents--\n```js\nfunction primonacci() {\nreturn true;\n}\nprimonacci();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 931,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-304-primonacci.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f5dc124a58b8fbee9ded009f718ea4e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-298-selective-amnesia.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4971000cf542c50ffa9\ntitle: 'Problem 298: Selective Amnesia'\nchallengeType: 1\nforumTopicId: 301950\ndashedName: problem-298-selective-amnesia\n--description--\nLarry and Robin play a memory game involving of a sequence of random numbers between 1 and 10, inclusive, that are called out one at a time Each player can remember up to 5 previous numbers When the called number is in a player's memory, that player is awarded a point If it's not, the player adds the called number to his memory, removing another number if his memory is full Both players start with empty memories Both players always add new missed numbers to their memory but use a different strategy in deciding which number to remove: Larry's strategy is to remove the number that hasn't been called in the longest time Robin's strategy is to remove the number that's been in the memory the longest time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-298-selective-amnesia.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "300d7c3501f8bd49d4312c6a3058a31b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-298-selective-amnesia.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it's not, the player adds the called number to his memory, removing another number if his memory is full Both players start with empty memories Both players always add new missed numbers to their memory but use a different strategy in deciding which number to remove: Larry's strategy is to remove the number that hasn't been called in the longest time Robin's strategy is to remove the number that's been in the memory the longest timeExample game:\n| Turn | Called number | Larry's memory | Larry's score | Robin's memory | Robin's score |\n|------|---------------|---------------:|---------------|----------------|---------------|\n|   1  |       1       |              1 |       0       |              1 |       0       |\n|   2  |       2       |            1,2 |       0       |            1,2 |       0       |\n|   3  |       4       |          1,2,4 |       0       |          1,2,4 |       0       |\n|   4  |       6       |        1,2,4,6 |       0       |        1,2,4,6 |       0       |\n|   5  |       1       |        1,2,4,6 |       1       |        1,2,4,6 |       1       |\n|   6  |       8       |      1,2,4,6,8 |       1       |      1,2,4,6,8 |       1       |\n|   7  |      10       |     1,4,6,8,10 |       1       |     2,4,6,8,10 |       1       |\n|   8  |       2       |     1,2,6,8,10 |       1       |     2,4,6,8,10 |       2       |\n|   9  |       4       |     1,2,4,8,10 |       1       |     2,4,6,8,10 |       3       |\n|  10  |       1       |     1,2,4,8,10 |       2       |     1,4,6,8,10 |       3       |\nDenoting Larry's score by $L$ and Robin's score by $R$, what is the expected value of $|L - R|$ after 50 turns",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-298-selective-amnesia.md",
      "source_type": "git_repo"
    },
    "token_count": 562,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "29c7ee1bcd740bdfdd3670aae1ce7643",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-298-selective-amnesia.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1 | | 7 | 10 | 1,4,6,8,10 | 1 | 2,4,6,8,10 | 1 | | 8 | 2 | 1,2,6,8,10 | 1 | 2,4,6,8,10 | 2 | | 9 | 4 | 1,2,4,8,10 | 1 | 2,4,6,8,10 | 3 | | 10 | 1 | 1,2,4,8,10 | 2 | 1,4,6,8,10 | 3 | Denoting Larry's score by $L$ and Robin's score by $R$, what is the expected value of $|L - R|$ after 50 turnsGive your answer rounded to eight decimal places using the format x xxxxxxxx --hints--\nselectiveAmnesia() should return 1 76882294 js\nassert strictEqual(selectiveAmnesia(), 1 76882294);\n--seed--\n--seed-contents--\n```js\nfunction selectiveAmnesia() {\nreturn true;\n}\nselectiveAmnesia();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-298-selective-amnesia.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "363a58d05039cf04008d26d4efee925b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-305-reflexive-position.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f49d1000cf542c50ffb0\ntitle: 'Problem 305: Reflexive Position'\nchallengeType: 1\nforumTopicId: 301959\ndashedName: problem-305-reflexive-position\n--description--\nLet's call $S$ the (infinite) string that is made by concatenating the consecutive positive integers (starting from 1) written down in base 10.\nThus, $S = 1234567891011121314151617181920212223242\\ldots$\nIt's easy to see that any number will show up an infinite number of times in $S$.\nLet's call $f(n)$ the starting position of the $n^{\\text{th}}$ occurrence of $n$ in $S$. For example, $f(1) = 1$, $f(5) = 81$, $f(12) = 271$ and $f(7780) = 111\\,111\\,365$.\nFind $\\sum f(3^k) for 1 ≤ k ≤ 13$.\n--hints--\nreflexivePosition() should return 18174995535140.\njs\nassert.strictEqual(reflexivePosition(), 18174995535140);\n--seed--\n--seed-contents--\n```js\nfunction reflexivePosition() {\nreturn true;\n}\nreflexivePosition();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 982,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-305-reflexive-position.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a01f5b3c98840680521fe278bdd86149",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-306-paper-strip-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f49f1000cf542c50ffb1\ntitle: 'Problem 306: Paper-strip Game'\nchallengeType: 1\nforumTopicId: 301960\ndashedName: problem-306-paper-strip-game\n--description--\nThe following game is a classic example of Combinatorial Game Theory:\nTwo players start with a strip of $n$ white squares and they take alternate turns. On each turn, a player picks two contiguous white squares and paints them black. The first player who cannot make a move loses.\n$n = 1$: No valid moves, so the first player loses automatically.\n$n = 2$: Only one valid move, after which the second player loses.\n$n = 3$: Two valid moves, but both leave a situation where the second player loses.\n$n = 4$: There are three valid moves for the first player; who is able to win the game by painting the two middle squares.\n$n = 5$: Four valid moves for the first player (shown below in red); but no matter what the player does, the second player (blue) wins.\nSo, for $1 ≤ n ≤ 5$, there are 3 values of $n$ for which the first player can force a win.\nSimilarly, for $1 ≤ n ≤ 50$, there are 40 values of $n$ for which the first player can force a win.\nFor $1 ≤ n ≤ 1\\,000\\,000$, how many values of $n$ are there for which the first player can force a win?\n--hints--\npaperStripGame() should return 852938.\njs\nassert.strictEqual(paperStripGame(), 852938);\n--seed--\n--seed-contents--\n```js\nfunction paperStripGame() {\nreturn true;\n}\npaperStripGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1795,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-306-paper-strip-game.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6bc3eaab996a66d297295f5f755b226e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-310-nim-square.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a21000cf542c50ffb5\ntitle: 'Problem 310: Nim Square'\nchallengeType: 1\nforumTopicId: 301966\ndashedName: problem-310-nim-square\n--description--\nAlice and Bob play the game Nim Square.\nNim Square is just like ordinary three-heap normal play Nim, but the players may only remove a square number of stones from a heap.\nThe number of stones in the three heaps is represented by the ordered triple ($a$, $b$, $c$).\nIf $0 ≤ a ≤ b ≤ c ≤ 29$ then the number of losing positions for the next player is 1160.\nFind the number of losing positions for the next player if $0 ≤ a ≤ b ≤ c ≤ 100\\,000$.\n--hints--\nnimSquare() should return 2586528661783.\njs\nassert.strictEqual(nimSquare(), 2586528661783);\n--seed--\n--seed-contents--\n```js\nfunction nimSquare() {\nreturn true;\n}\nnimSquare();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 893,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-310-nim-square.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "00ae92cca8556bea92a0c9d09e01f87c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-309-integer-ladders.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a11000cf542c50ffb4\ntitle: 'Problem 309: Integer Ladders'\nchallengeType: 1\nforumTopicId: 301963\ndashedName: problem-309-integer-ladders\n--description--\nIn the classic \"Crossing Ladders\" problem, we are given the lengths $x$ and $y$ of two ladders resting on the opposite walls of a narrow, level street. We are also given the height $h$ above the street where the two ladders cross and we are asked to find the width of the street ($w$).\nHere, we are only concerned with instances where all four variables are positive integers. For example, if $x = 70$, $y = 119$ and $h = 30$, we can calculate that $w = 56$.\nIn fact, for integer values $x$, $y$, $h$ and $0 < x < y < 200$, there are only five triplets ($x$, $y$, $h$) producing integer solutions for $w$: (70, 119, 30), (74, 182, 21), (87, 105, 35), (100, 116, 35) and (119, 175, 40).\nFor integer values $x$, $y$, $h$ and $0 < x < y < 1\\,000\\,000$, how many triplets ($x$, $y$, $h$) produce integer solutions for $w$?\n--hints--\nintegerLadders() should return 210139.\njs\nassert.strictEqual(integerLadders(), 210139);\n--seed--\n--seed-contents--\n```js\nfunction integerLadders() {\nreturn true;\n}\nintegerLadders();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1605,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-309-integer-ladders.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cbe6d5dab4348129f7907ab099415b80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-307-chip-defects.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a01000cf542c50ffb2\ntitle: 'Problem 307: Chip Defects'\nchallengeType: 1\nforumTopicId: 301961\ndashedName: problem-307-chip-defects\n--description--\n$k$ defects are randomly distributed amongst $n$ integrated-circuit chips produced by a factory (any number of defects may be found on a chip and each defect is independent of the other defects).\nLet $p(k,n)$ represent the probability that there is a chip with at least 3 defects. For instance $p(3,7) ≈ 0.0204081633$.\nFind $p(20\\,000, 1\\,000\\,000)$ and give your answer rounded to 10 decimal places in the form 0.abcdefghij\n--hints--\nchipDefects() should return 0.7311720251.\njs\nassert.strictEqual(chipDefects(), 0.7311720251);\n--seed--\n--seed-contents--\n```js\nfunction chipDefects() {\nreturn true;\n}\nchipDefects();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 872,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-307-chip-defects.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "01c152d9f2f9306660daed8d3c5e725f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-313-sliding-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a61000cf542c50ffb8\ntitle: 'Problem 313: Sliding game'\nchallengeType: 1\nforumTopicId: 301969\ndashedName: problem-313-sliding-game\n--description--\nIn a sliding game a counter may slide horizontally or vertically into an empty space. The objective of the game is to move the red counter from the top left corner of a grid to the bottom right corner; the space always starts in the bottom right corner. For example, the following sequence of pictures show how the game can be completed in five moves on a 2 by 2 grid.\nLet $S(m, n)$ represent the minimum number of moves to complete the game on an $m$ by $n$ grid. For example, it can be verified that $S(5, 4) = 25$.\nThere are exactly 5482 grids for which $S(m, n) = p^2$, where $p < 100$ is prime.\nHow many grids does $S(m, n) = p^2$, where $p < {10}^6$ is prime?\n--hints--\nslidingGame() should return 2057774861813004.\njs\nassert.strictEqual(slidingGame(), 2057774861813004);\n--seed--\n--seed-contents--\n```js\nfunction slidingGame() {\nreturn true;\n}\nslidingGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-313-sliding-game.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e4161b1b4587f4fe379cda874a0f7d99",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-312-cyclic-paths-on-sierpiski-graphs.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a51000cf542c50ffb7\ntitle: 'Problem 312: Cyclic paths on Sierpiński graphs'\nchallengeType: 1\nforumTopicId: 301968\ndashedName: problem-312-cyclic-paths-on-sierpiski-graphs\n--description--\nA Sierpiński graph of order-1 ($S_1$) is an equilateral triangle.\n$S_{n + 1}$ is obtained from $S_n$ by positioning three copies of $S_n$ so that every pair of copies has one common corner.\nLet $C(n)$ be the number of cycles that pass exactly once through all the vertices of $S_n$. For example, $C(3) = 8$ because eight such cycles can be drawn on $S_3$, as shown below:\nIt can also be verified that:\n$$\\begin{align}\n& C(1) = C(2) = 1 \\\\\n& C(5) = 71\\,328\\,803\\,586\\,048 \\\\\n& C(10 000)\\bmod {10}^8 = 37\\,652\\,224 \\\\\n& C(10 000)\\bmod {13}^8 = 617\\,720\\,485 \\\\\n\\end{align}$$\nFind $C(C(C(10\\,000)))\\bmod {13}^8$.\n--hints--\npathsOnSierpinskiGraphs() should return 324681947.\njs\nassert.strictEqual(pathsOnSierpinskiGraphs(), 324681947);\n--seed--\n--seed-contents--\n```js\nfunction pathsOnSierpinskiGraphs() {\nreturn true;\n}\npathsOnSierpinskiGraphs();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-312-cyclic-paths-on-sierpiski-graphs.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "579994bf9fc1a2ab755a1a06e530803e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-308-an-amazing-prime-generating-automaton.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a11000cf542c50ffb3\ntitle: 'Problem 308: An amazing Prime-generating Automaton'\nchallengeType: 1\nforumTopicId: 301962\ndashedName: problem-308-an-amazing-prime-generating-automaton\n--description--\nA program written in the programming language Fractran consists of a list of fractions The internal state of the Fractran Virtual Machine is a positive integer, which is initially set to a seed value Each iteration of a Fractran program multiplies the state integer by the first fraction in the list which will leave it an integer For example, one of the Fractran programs that John Horton Conway wrote for prime-generation consists of the following 14 fractions:\n$$\\frac{17}{91}, \\frac{78}{85}, \\frac{19}{51}, \\frac{23}{38}, \\frac{29}{33}, \\frac{77}{29}, \\frac{95}{23}, \\frac{77}{19}, \\frac{1}{17}, \\frac{11}{13}, \\frac{13}{11}, \\frac{15}{2}, \\frac{1}{7}, \\frac{55}{1}$$\nStarting with the seed integer 2, successive iterations of the program produce the sequence:\n$$15, 825, 725, 1925, 2275, 425, \\ldots, 68, \\mathbf{4}, 30, \\ldots, 136, \\mathbf{8}, 60, \\ldots, 544, \\mathbf{32}, 240, \\ldots$$\nThe powers of 2 that appear in this sequence are $2^2, 2^3, 2^5, \\ldots$ It can be shown that all the powers of 2 in this sequence have prime exponents and that all the primes appear as exponents of powers of 2, in proper order If someone uses the above Fractran program to solve Project Euler Problem 7 (find the ${10001}^{\\text{st}}$ prime), how many iterations would be needed until the program produces $2^{10001^{\\text{st}}\\text{ prime}}$ --hints--\nprimeGeneratingAutomation() should return 1539669807660924 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1907,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-308-an-amazing-prime-generating-automaton.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "490bf9db1a6ae6bd1ef220385aab0dea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-308-an-amazing-prime-generating-automaton.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "appear in this sequence are $2^2, 2^3, 2^5, \\ldots$ It can be shown that all the powers of 2 in this sequence have prime exponents and that all the primes appear as exponents of powers of 2, in proper order If someone uses the above Fractran program to solve Project Euler Problem 7 (find the ${10001}^{\\text{st}}$ prime), how many iterations would be needed until the program produces $2^{10001^{\\text{st}}\\text{ prime}}$ --hints-- primeGeneratingAutomation() should return 1539669807660924 js assertstrictEqual(primeGeneratingAutomation(), 1539669807660924);\n--seed--\n--seed-contents--\n```js\nfunction primeGeneratingAutomation() {\nreturn true;\n}\nprimeGeneratingAutomation();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1907,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-308-an-amazing-prime-generating-automaton.md",
      "source_type": "git_repo"
    },
    "token_count": 188,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f317e502f28003b4c50eb3ebfaec1093",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-311-biclinic-integral-quadrilaterals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a31000cf542c50ffb6\ntitle: 'Problem 311: Biclinic Integral Quadrilaterals'\nchallengeType: 1\nforumTopicId: 301967\ndashedName: problem-311-biclinic-integral-quadrilaterals\n--description--\n$ABCD$ is a convex, integer sided quadrilateral with $1 ≤ AB < BC < CD < AD$.\n$BD$ has integer length. $O$ is the midpoint of $BD$. $AO$ has integer length.\nWe'll call $ABCD$ a biclinic integral quadrilateral if $AO = CO ≤ BO = DO$.\nFor example, the following quadrilateral is a biclinic integral quadrilateral: $AB = 19$, $BC = 29$, $CD = 37$, $AD = 43$, $BD = 48$ and $AO = CO = 23$.\nLet $B(N)$ be the number of distinct biclinic integral quadrilaterals $ABCD$ that satisfy ${AB}^2 + {BC}^2 + {CD}^2 + {AD}^2 ≤ N$. We can verify that $B(10\\,000) = 49$ and $B(1\\,000\\,000) = 38239$.\nFind $B(10\\,000\\,000\\,000)$.\n--hints--\nbiclinicIntegralQuadrilaterals() should return 2466018557.\njs\nassert.strictEqual(biclinicIntegralQuadrilaterals(), 2466018557);\n--seed--\n--seed-contents--\n```js\nfunction biclinicIntegralQuadrilaterals() {\nreturn true;\n}\nbiclinicIntegralQuadrilaterals();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-311-biclinic-integral-quadrilaterals.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6b22963fafa667553f8c65c535a2c67a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-317-firecracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4aa1000cf542c50ffbc\ntitle: 'Problem 317: Firecracker'\nchallengeType: 1\nforumTopicId: 301973\ndashedName: problem-317-firecracker\n--description--\nA firecracker explodes at a height of 100 m above level ground. It breaks into a large number of very small fragments, which move in every direction; all of them have the same initial velocity of 20 $\\frac{\\text{m}}{\\text{s}}$.\nWe assume that the fragments move without air resistance, in a uniform gravitational field with $g=9.81 \\frac{\\text{m}}{\\text{s}^2}$.\nFind the volume (in $\\text{m}^3$) of the region through which the fragments move before reaching the ground. Give your answer rounded to four decimal places.\n--hints--\nfirecracker() should return 1856532.8455.\njs\nassert.strictEqual(firecracker(), 1856532.8455);\n--seed--\n--seed-contents--\n```js\nfunction firecracker() {\nreturn true;\n}\nfirecracker();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-317-firecracker.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "51c8f0d3dcc26715dfc2c4d331fcf83f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-315-digital-root-clocks.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a71000cf542c50ffba\ntitle: 'Problem 315: Digital root clocks'\nchallengeType: 1\nforumTopicId: 301971\ndashedName: problem-315-digital-root-clocks\n--description--\nSam and Max are asked to transform two digital clocks into two \"digital root\" clocks A digital root clock is a digital clock that calculates digital roots step by step When a clock is fed a number, it will show it and then it will start the calculation, showing all the intermediate values until it gets to the result For example, if the clock is fed the number 137, it will show: 137 → 11 → 2 and then it will go black, waiting for the next number Every digital number consists of some light segments: three horizontal (top, middle, bottom) and four vertical (top-left, top-right, bottom-left, bottom-right) Number 1 is made of vertical top-right and bottom-right, number 4 is made by middle horizontal and vertical top-left, top-right and bottom-right Number 8 lights them all The clocks consume energy only when segments are turned on/off To turn on a 2 will cost 5 transitions, while a 7 will cost only 4 transitions Sam and Max built two different clocks Sam's clock is fed e g number 137: the clock shows 137, then the panel is turned off, then the next number (11) is turned on, then the panel is turned off again and finally the last number (2) is turned on and, after some time, off For the example, with number 137, Sam's clock requires:\n137: $(2 + 5 + 4) × 2 = 22$ transitions (137 on/off) 11: $(2 + 2) × 2 = 8$ transitions (11 on/off) 2: $(5) × 2 = 10$ transitions (2 on/off) For a grand total of 40 transitions Max's clock works differently Instead of turning off the whole panel, it is smart enough to turn off only those segments that won't be needed for the next number For number 137, Max's clock requires:\n137 : $2 + 5 + 4 = 11$ transitions (137 on), $7$ transitions (to turn off the segments that are not needed for number 11)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-315-digital-root-clocks.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "11545c4102443e8bab60a44f08ce17d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-315-digital-root-clocks.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "$(5) × 2 = 10$ transitions (2 on/off) For a grand total of 40 transitions Max's clock works differently Instead of turning off the whole panel, it is smart enough to turn off only those segments that won't be needed for the next number For number 137, Max's clock requires: 137 : $2 + 5 + 4 = 11$ transitions (137 on), $7$ transitions (to turn off the segments that are not needed for number 11)11 : $0$ transitions (number 11 is already turned on correctly), $3$ transitions (to turn off the first 1 and the bottom part of the second 1; the top part is common with number 2) 2 : $4$ transitions (to turn on the remaining segments in order to get a 2), $5$ transitions (to turn off number 2) For a grand total of 30 transitions Of course, Max's clock consumes less power than Sam's one The two clocks are fed all the prime numbers between $A = {10}^7$ and $B = 2 × {10}^7$ Find the difference between the total number of transitions needed by Sam's clock and that needed by Max's one --hints--\ndigitalRootClocks() should return 13625242 js\nassert strictEqual(digitalRootClocks(), 13625242);\n--seed--\n--seed-contents--\n```js\nfunction digitalRootClocks() {\nreturn true;\n}\ndigitalRootClocks();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-315-digital-root-clocks.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "33c5b5566ad0dcab47f28f44fc901f4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-314-the-mouse-on-the-moon.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a71000cf542c50ffb9\ntitle: 'Problem 314: The Mouse on the Moon'\nchallengeType: 1\nforumTopicId: 301970\ndashedName: problem-314-the-mouse-on-the-moon\n--description--\nThe moon has been opened up, and land can be obtained for free, but there is a catch You have to build a wall around the land that you stake out, and building a wall on the moon is expensive Every country has been allotted a 500 m by 500 m square area, but they will possess only that area which they wall in 251001 posts have been placed in a rectangular grid with 1 meter spacing The wall must be a closed series of straight lines, each line running from post to post The bigger countries of course have built a 2000 m wall enclosing the entire 250 000 $\\text{m}^2$ area The Duchy of Grand Fenwick, has a tighter budget, and has asked you (their Royal Programmer) to compute what shape would get best maximum $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio You have done some preliminary calculations on a sheet of paper For a 2000 meter wall enclosing the 250 000 $\\text{m}^2$ area the $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio is 125 Although not allowed, but to get an idea if this is anything better: if you place a circle inside the square area touching the four sides the area will be equal to $π \\times {250}^2 \\text{m}^2$ and the perimeter will be $π \\times 500 \\text{m}$, so the $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio will also be 125 However, if you cut off from the square four triangles with sides 75 m, 75 m and $75\\sqrt{2}$ m the total area becomes 238750 $\\text{m}^2$ and the perimeter becomes $1400 + 300\\sqrt{2}$ m So this gives an $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio of 130 87, which is significantly better Find the maximum $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-314-the-mouse-on-the-moon.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ea446e993e0f8606969056311e8d5efa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-314-the-mouse-on-the-moon.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "will be equal to $π \\times {250}^2 \\text{m}^2$ and the perimeter will be $π \\times 500 \\text{m}$, so the $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio will also be 125 However, if you cut off from the square four triangles with sides 75 m, 75 m and $75\\sqrt{2}$ m the total area becomes 238750 $\\text{m}^2$ and the perimeter becomes $1400 + 300\\sqrt{2}$ m So this gives an $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio of 130 87, which is significantly better Find the maximum $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratioGive your answer rounded to 8 places behind the decimal point in the form abc defghijk --hints--\ntheMouseOnTheMoon() should return 132 52756426 js\nassert strictEqual(theMouseOnTheMoon(), 132 52756426);\n--seed--\n--seed-contents--\n```js\nfunction theMouseOnTheMoon() {\nreturn true;\n}\ntheMouseOnTheMoon();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-314-the-mouse-on-the-moon.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e7508b648f279b17f038f3bfc6a7021c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-316-numbers-in-decimal-expansions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4a81000cf542c50ffbb\ntitle: 'Problem 316: Numbers in decimal expansions'\nchallengeType: 1\nforumTopicId: 301972\ndashedName: problem-316-numbers-in-decimal-expansions\n--description--\nLet $p = p_1 p_2 p_3 \\ldots$ be an infinite sequence of random digits, selected from {0,1,2,3,4,5,6,7,8,9} with equal probability It can be seen that $p$ corresponds to the real number $0 p_1 p_2 p_3 \\ldots$ It can also be seen that choosing a random real number from the interval [0,1) is equivalent to choosing an infinite sequence of random digits selected from {0,1,2,3,4,5,6,7,8,9} with equal probability For any positive integer $n$ with $d$ decimal digits, let $k$ be the smallest index such that $p_k, p_{k + 1}, \\ldots p_{k + d - 1}$ are the decimal digits of $n$, in the same order Also, let $g(n)$ be the expected value of $k$; it can be proven that $g(n)$ is always finite and, interestingly, always an integer number For example, if $n = 535$, then\nfor $p = 31415926\\mathbf{535}897\\ldots$, we get $k = 9$\nfor $p = 35528714365004956000049084876408468\\mathbf{535}4\\ldots$, we get $k = 36$\netc and we find that $g(535) = 1008$ Given that $\\displaystyle\\sum_{n = 2}^{999} g\\left(\\left\\lfloor\\frac{{10}^6}{n}\\right\\rfloor\\right) = 27280188$, find $\\displaystyle\\sum_{n = 2}^{999\\,999} g\\left(\\left\\lfloor\\frac{{10}^{16}}{n}\\right\\rfloor\\right)$ Note: $\\lfloor x\\rfloor$ represents the floor function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1773,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-316-numbers-in-decimal-expansions.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4370ffa3cfa6d73ac1e3545afb94a083",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-316-numbers-in-decimal-expansions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "let $g(n)$ be the expected value of $k$; it can be proven that $g(n)$ is always finite and, interestingly, always an integer number For example, if $n = 535$, then for $p = 31415926\\mathbf{535}897\\ldots$, we get $k = 9$ for $p = 35528714365004956000049084876408468\\mathbf{535}4\\ldots$, we get $k = 36$ etc and we find that $g(535) = 1008$ Given that $\\displaystyle\\sum_{n = 2}^{999} g\\left(\\left\\lfloor\\frac{{10}^6}{n}\\right\\rfloor\\right) = 27280188$, find $\\displaystyle\\sum_{n = 2}^{999\\,999} g\\left(\\left\\lfloor\\frac{{10}^{16}}{n}\\right\\rfloor\\right)$ Note: $\\lfloor x\\rfloor$ represents the floor function--hints--\nnumbersInDecimalExpansion() should return 542934735751917760 js\nassert strictEqual(numbersInDecimalExpansion(), 542934735751917760);\n--seed--\n--seed-contents--\n```js\nfunction numbersInDecimalExpansion() {\nreturn true;\n}\nnumbersInDecimalExpansion();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1773,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-316-numbers-in-decimal-expansions.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ad2a60708ee10d6ac80e254e11f07ac4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-319-bounded-sequences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ab1000cf542c50ffbe\ntitle: 'Problem 319: Bounded Sequences'\nchallengeType: 1\nforumTopicId: 301975\ndashedName: problem-319-bounded-sequences\n--description--\nLet $x_1, x_2, \\ldots, x_n$ be a sequence of length $n$ such that:\n$x_1 = 2$\nfor all $1 < i ≤ n : x_{i - 1} < x_i$\nfor all $i$ and $j$ with $1 ≤ i, j ≤ n : {(x_i)}^j < {(x_j + 1)}^i$\nThere are only five such sequences of length 2, namely: {2,4}, {2,5}, {2,6}, {2,7} and {2,8}. There are 293 such sequences of length 5; three examples are given below: {2,5,11,25,55}, {2,6,14,36,88}, {2,8,22,64,181}.\nLet $t(n)$ denote the number of such sequences of length $n$. You are given that $t(10) = 86195$ and $t(20) = 5227991891$.\nFind $t({10}^{10})$ and give your answer modulo $10^9$.\n--hints--\nboundedSequences() should return 268457129.\njs\nassert.strictEqual(boundedSequences(), 268457129);\n--seed--\n--seed-contents--\n```js\nfunction boundedSequences() {\nreturn true;\n}\nboundedSequences();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-319-bounded-sequences.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "592bbf8c08612198d699b6b398403257",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-320-factorials-divisible-by-a-huge-integer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ae1000cf542c50ffbf\ntitle: 'Problem 320: Factorials divisible by a huge integer'\nchallengeType: 1\nforumTopicId: 301977\ndashedName: problem-320-factorials-divisible-by-a-huge-integer\n--description--\nLet $N(i)$ be the smallest integer $n$ such that $n!$ is divisible by $(i!)^{1234567890}$\nLet $S(u) = \\sum N(i)$ for $10 ≤ i ≤ u$.\n$S(1000)=614\\,538\\,266\\,565\\,663$.\nFind $S(1\\,000\\,000)\\bmod {10}^{18}$.\n--hints--\ndivisibleByHugeInteger() should return 278157919195482660.\njs\nassert.strictEqual(divisibleByHugeInteger(), 278157919195482660);\n--seed--\n--seed-contents--\n```js\nfunction divisibleByHugeInteger() {\nreturn true;\n}\ndivisibleByHugeInteger();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-320-factorials-divisible-by-a-huge-integer.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "81eff572316a1c0f78a6913acd64884b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-318-2011-nines.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ab1000cf542c50ffbd\ntitle: 'Problem 318: 2011 nines'\nchallengeType: 1\nforumTopicId: 301974\ndashedName: problem-318-2011-nines\n--description--\nConsider the real number $\\sqrt{2} + \\sqrt{3}$ When we calculate the even powers of $\\sqrt{2} + \\sqrt{3}$ we get:\n$$\\begin{align}\n& {(\\sqrt{2} + \\sqrt{3})}^2 = 9 898979485566356\\ldots \\\\\n& {(\\sqrt{2} + \\sqrt{3})}^4 = 97 98979485566356\\ldots \\\\\n& {(\\sqrt{2} + \\sqrt{3})}^6 = 969 998969071069263\\ldots \\\\\n& {(\\sqrt{2} + \\sqrt{3})}^8 = 9601 99989585502907\\ldots \\\\\n& {(\\sqrt{2} + \\sqrt{3})}^{10} = 95049 999989479221\\ldots \\\\\n& {(\\sqrt{2} + \\sqrt{3})}^{12} = 940897 9999989371855\\ldots \\\\\n& {(\\sqrt{2} + \\sqrt{3})}^{14} = 9313929 99999989263\\ldots \\\\\n& {(\\sqrt{2} + \\sqrt{3})}^{16} = 92198401 99999998915\\ldots \\\\\n\\end{align}$$\nIt looks like that the number of consecutive nines at the beginning of the fractional part of these powers is non-decreasing In fact it can be proven that the fractional part of ${(\\sqrt{2} + \\sqrt{3})}^{2n}$ approaches 1 for large $n$ Consider all real numbers of the form $\\sqrt{p} + \\sqrt{q}$ with $p$ and $q$ positive integers and $p < q$, such that the fractional part of ${(\\sqrt{p} + \\sqrt{q})}^{2n}$ approaches 1 for large $n$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-318-2011-nines.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d95b2b7fdee3d9418e67c9abe0e741d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-318-2011-nines.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\\\ \\end{align}$$ It looks like that the number of consecutive nines at the beginning of the fractional part of these powers is non-decreasing In fact it can be proven that the fractional part of ${(\\sqrt{2} + \\sqrt{3})}^{2n}$ approaches 1 for large $n$ Consider all real numbers of the form $\\sqrt{p} + \\sqrt{q}$ with $p$ and $q$ positive integers and $p < q$, such that the fractional part of ${(\\sqrt{p} + \\sqrt{q})}^{2n}$ approaches 1 for large $n$Let $C(p,q,n)$ be the number of consecutive nines at the beginning of the fractional part of ${(\\sqrt{p} + \\sqrt{q})}^{2n}$ Let $N(p,q)$ be the minimal value of $n$ such that $C(p,q,n) ≥ 2011$ Find $\\sum N(p,q)$ for $p + q ≤ 2011$ --hints--\ntwoThousandElevenNines() should return 709313889 js\nassert strictEqual(twoThousandElevenNines(), 709313889);\n--seed--\n--seed-contents--\n```js\nfunction twoThousandElevenNines() {\nreturn true;\n}\ntwoThousandElevenNines();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-318-2011-nines.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d589930814a38db9a93bbaef093d2587",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-321-swapping-counters.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ae1000cf542c50ffc0\ntitle: 'Problem 321: Swapping Counters'\nchallengeType: 1\nforumTopicId: 301978\ndashedName: problem-321-swapping-counters\n--description--\nA horizontal row comprising of $2n + 1$ squares has $n$ red counters placed at one end and $n$ blue counters at the other end, being separated by a single empty square in the center. For example, when $n = 3$.\nA counter can move from one square to the next (slide) or can jump over another counter (hop) as long as the square next to that counter is unoccupied.\nLet $M(n)$ represent the minimum number of moves/actions to completely reverse the positions of the colored counters; that is, move all the red counters to the right and all the blue counters to the left.\nIt can be verified $M(3) = 15$, which also happens to be a triangle number.\nIf we create a sequence based on the values of n for which $M(n)$ is a triangle number then the first five terms would be: 1, 3, 10, 22, and 63, and their sum would be 99.\nFind the sum of the first forty terms of this sequence.\n--hints--\nswappingCounters() should return 2470433131948040.\njs\nassert.strictEqual(swappingCounters(), 2470433131948040);\n--seed--\n--seed-contents--\n```js\nfunction swappingCounters() {\nreturn true;\n}\nswappingCounters();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-321-swapping-counters.md",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cb8ad22b4efb72bc290d4b8ced4dceea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-322-binomial-coefficients-divisible-by-10.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4af1000cf542c50ffc1\ntitle: 'Problem 322: Binomial coefficients divisible by 10'\nchallengeType: 1\nforumTopicId: 301979\ndashedName: problem-322-binomial-coefficients-divisible-by-10\n--description--\nLet $T(m, n)$ be the number of the binomial coefficients ${}^iC_n$ that are divisible by 10 for $n ≤ i < m$ ($i$, $m$ and $n$ are positive integers).\nYou are given that $T({10}^9, {10}^7 - 10) = 989\\,697\\,000$.\nFind $T({10}^{18}, {10}^{12} - 10)$.\n--hints--\nbinomialCoefficientsDivisibleBy10() should return 999998760323314000.\njs\nassert.strictEqual(binomialCoefficientsDivisibleBy10(), 999998760323314000);\n--seed--\n--seed-contents--\n```js\nfunction binomialCoefficientsDivisibleBy10() {\nreturn true;\n}\nbinomialCoefficientsDivisibleBy10();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 847,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-322-binomial-coefficients-divisible-by-10.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "50679f133ae9138ee3c9db02b8f00df7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-323-bitwise-or-operations-on-random-integers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b01000cf542c50ffc2\ntitle: 'Problem 323: Bitwise-OR operations on random integers'\nchallengeType: 1\nforumTopicId: 301980\ndashedName: problem-323-bitwise-or-operations-on-random-integers\n--description--\nLet $y_0, y_1, y_2, \\ldots$ be a sequence of random unsigned 32 bit integers (i.e. $0 ≤ y_i < 2^{32}$, every value equally likely).\nFor the sequence $x_i$ the following recursion is given:\n$x_0 = 0$ and\n$x_i = x_{i - 1} \\mathbf{|} y_{i - 1}$, for $i > 0$. ($\\mathbf{|}$ is the bitwise-OR operator)\nIt can be seen that eventually there will be an index $N$ such that $x_i = 2^{32} - 1$ (a bit-pattern of all ones) for all $i ≥ N$.\nFind the expected value of $N$. Give your answer rounded to 10 digits after the decimal point.\n--hints--\nbitwiseOrOnRandomIntegers() should return 6.3551758451.\njs\nassert.strictEqual(bitwiseOrOnRandomIntegers(), 6.3551758451);\n--seed--\n--seed-contents--\n```js\nfunction bitwiseOrOnRandomIntegers() {\nreturn true;\n}\nbitwiseOrOnRandomIntegers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1092,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-323-bitwise-or-operations-on-random-integers.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9f9f99001ffc51e4c09a57959bfd43ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-324-building-a-tower.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b11000cf542c50ffc3\ntitle: 'Problem 324: Building a tower'\nchallengeType: 1\nforumTopicId: 301981\ndashedName: problem-324-building-a-tower\n--description--\nLet $f(n)$ represent the number of ways one can fill a $3×3×n$ tower with blocks of $2×1×1$. You're allowed to rotate the blocks in any way you like; however, rotations, reflections etc of the tower itself are counted as distinct.\nFor example (with $q = 100\\,000\\,007$):\n$$\\begin{align}\n& f(2) = 229, \\\\\n& f(4) = 117\\,805, \\\\\n& f(10)\\bmod q = 96\\,149\\,360, \\\\\n& f({10}^3)\\bmod q = 24\\,806\\,056, \\\\\n& f({10}^6)\\bmod q = 30\\,808\\,124.\n\\end{align}$$\nFind $f({10}^{10000})\\bmod 100\\,000\\,007$.\n--hints--\nbuildingTower() should return 96972774.\njs\nassert.strictEqual(buildingTower(), 96972774);\n--seed--\n--seed-contents--\n```js\nfunction buildingTower() {\nreturn true;\n}\nbuildingTower();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-324-building-a-tower.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b69a75702cb44751e2509d9f3ec168dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-326-modulo-summations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b21000cf542c50ffc5\ntitle: 'Problem 326: Modulo Summations'\nchallengeType: 1\nforumTopicId: 301983\ndashedName: problem-326-modulo-summations\n--description--\nLet $a_n$ be a sequence recursively defined by: $a_1 = 1$, $\\displaystyle a_n = \\left(\\sum_{k = 1}^{n - 1} k \\times a_k\\right)\\bmod n$.\nSo the first 10 elements of $a_n$ are: 1, 1, 0, 3, 0, 3, 5, 4, 1, 9.\nLet $f(N, M)$ represent the number of pairs $(p, q)$ such that:\n$$ 1 \\le p \\le q \\le N \\; \\text{and} \\; \\left(\\sum_{i = p}^q a_i\\right)\\bmod M = 0$$\nIt can be seen that $f(10, 10) = 4$ with the pairs (3,3), (5,5), (7,9) and (9,10).\nYou are also given that $f({10}^4, {10}^3) = 97\\,158$.\nFind $f({10}^{12}, {10}^6)$.\n--hints--\nmoduloSummations() should return 1966666166408794400.\njs\nassert.strictEqual(moduloSummations(), 1966666166408794400);\n--seed--\n--seed-contents--\n```js\nfunction moduloSummations() {\nreturn true;\n}\nmoduloSummations();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1014,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-326-modulo-summations.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bc8a0dd2a239b9f2683265e398bfe88e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-325-stone-game-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b11000cf542c50ffc4\ntitle: 'Problem 325: Stone Game II'\nchallengeType: 1\nforumTopicId: 301982\ndashedName: problem-325-stone-game-ii\n--description--\nA game is played with two piles of stones and two players. On each player's turn, the player may remove a number of stones from the larger pile. The number of stones removes must be a positive multiple of the number of stones in the smaller pile.\nE.g., let the ordered pair (6,14) describe a configuration with 6 stones in the smaller pile and 14 stones in the larger pile, then the first player can remove 6 or 12 stones from the larger pile.\nThe player taking all the stones from a pile wins the game.\nA winning configuration is one where the first player can force a win. For example, (1,5), (2,6) and (3,12) are winning configurations because the first player can immediately remove all stones in the second pile.\nA losing configuration is one where the second player can force a win, no matter what the first player does. For example, (2,3) and (3,4) are losing configurations: any legal move leaves a winning configuration for the second player.\nDefine $S(N)$ as the sum of ($x_i + y_i$) for all losing configurations ($x_i$, $y_i$), $0 < x_i < y_i ≤ N$. We can verify that $S(10) = 211$ and $S({10}^4) = 230\\,312\\,207\\,313$.\nFind $S({10}^{16})\\bmod 7^{10}$.\n--hints--\nstoneGameTwo() should return 54672965.\njs\nassert.strictEqual(stoneGameTwo(), 54672965);\n--seed--\n--seed-contents--\n```js\nfunction stoneGameTwo() {\nreturn true;\n}\nstoneGameTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1620,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-325-stone-game-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "265718c62e199487c98b4b4c06a777ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-329-prime-frog.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b51000cf542c50ffc8\ntitle: 'Problem 329: Prime Frog'\nchallengeType: 1\nforumTopicId: 301986\ndashedName: problem-329-prime-frog\n--description--\nSusan has a prime frog.\nHer frog is jumping around over 500 squares numbered 1 to 500.\nHe can only jump one square to the left or to the right, with equal probability, and he cannot jump outside the range [1;500]. (if it lands at either end, it automatically jumps to the only available square on the next move.)\nWhen he is on a square with a prime number on it, he croaks 'P' (PRIME) with probability $\\frac{2}{3}$ or 'N' (NOT PRIME) with probability $\\frac{1}{3}$ just before jumping to the next square. When he is on a square with a number on it that is not a prime he croaks 'P' with probability $\\frac{1}{3}$ or 'N' with probability $\\frac{2}{3}$ just before jumping to the next square.\nGiven that the frog's starting position is random with the same probability for every square, and given that she listens to his first 15 croaks, what is the probability that she hears the sequence PPPPNNPPPNPPNPN?\nGive your answer as a string as a fraction p/q in reduced form.\n--hints--\nprimeFrog() should return a string.\njs\nasset.isString(primeFrog());\nprimeFrog() should return the string 199740353/29386561536000.\njs\nassert.strictEqual(primeFrog(), '199740353/29386561536000');\n--seed--\n--seed-contents--\n```js\nfunction primeFrog() {\nreturn true;\n}\nprimeFrog();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1521,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-329-prime-frog.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e74f4c966a5fbbb1c8fdc2387e389148",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-330-eulers-number.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b71000cf542c50ffc9\ntitle: 'Problem 330: Euler''s Number'\nchallengeType: 1\nforumTopicId: 301988\ndashedName: problem-330-eulers-number\n--description--\nAn infinite sequence of real numbers $a(n)$ is defined for all integers $n$ as follows:\n$$ a(n) =\n\\begin{cases}\n1                                                       & n < 0 \\\\\n\\displaystyle \\sum_{i = 1}^{\\infty} \\frac{a(n - 1)}{i!} & n \\ge 0\n\\end{cases}\n$$\nFor example,\n$$\\begin{align}\n& a(0) = \\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\ldots = e − 1 \\\\\n& a(1) = \\frac{e − 1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\ldots = 2e − 3 \\\\\n& a(2) = \\frac{2e − 3}{1!} + \\frac{e − 1}{2!} + \\frac{1}{3!} + \\ldots = \\frac{7}{2} e − 6\n\\end{align}$$\nwith $e = 2.7182818\\ldots$ being Euler's constant.\nIt can be shown that $a(n)$ is of the form $\\displaystyle\\frac{A(n)e + B(n)}{n!}$ for integers $A(n)$ and $B(n)$.\nFor example $\\displaystyle a(10) = \\frac{328161643e − 652694486}{10!}$.\nFind $A({10}^9)$ + $B({10}^9)$ and give your answer $\\bmod 77\\,777\\,777$.\n--hints--\neulersNumber() should return 15955822.\njs\nassert.strictEqual(eulersNumber(), 15955822);\n--seed--\n--seed-contents--\n```js\nfunction eulersNumber() {\nreturn true;\n}\neulersNumber();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-330-eulers-number.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "139097381a4b68b1e71fa7453e7d5c5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-332-spherical-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b91000cf542c50ffcb\ntitle: 'Problem 332: Spherical triangles'\nchallengeType: 1\nforumTopicId: 301990\ndashedName: problem-332-spherical-triangles\n--description--\nA spherical triangle is a figure formed on the surface of a sphere by three great circular arcs intersecting pairwise in three vertices.\nLet $C(r)$ be the sphere with the center (0,0,0) and radius $r$.\nLet $Z(r)$ be the set of points on the surface of $C(r)$ with integer coordinates.\nLet $T(r)$ be the set of spherical triangles with vertices in $Z(r)$. Degenerate spherical triangles, formed by three points on the same great arc, are not included in $T(r)$.\nLet $A(r)$ be the area of the smallest spherical triangle in $T(r)$.\nFor example $A(14)$ is 3.294040 rounded to six decimal places.\nFind $\\displaystyle \\sum_{r = 1}^{50} A(r)$. Give your answer rounded to six decimal places.\n--hints--\nsphericalTriangles() should return 2717.751525.\njs\nassert.strictEqual(sphericalTriangles(), 2717.751525);\n--seed--\n--seed-contents--\n```js\nfunction sphericalTriangles() {\nreturn true;\n}\nsphericalTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1455,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-332-spherical-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "50b26b0b5860f91074d84484576081c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-331-cross-flips.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b71000cf542c50ffca\ntitle: 'Problem 331: Cross flips'\nchallengeType: 1\nforumTopicId: 301989\ndashedName: problem-331-cross-flips\n--description--\nN×N disks are placed on a square game board. Each disk has a black side and white side.\nAt each turn, you may choose a disk and flip all the disks in the same row and the same column as this disk: thus $2 × N - 1$ disks are flipped. The game ends when all disks show their white side. The following example shows a game on a 5×5 board.\nIt can be proven that 3 is the minimal number of turns to finish this game.\nThe bottom left disk on the $N×N$ board has coordinates (0, 0); the bottom right disk has coordinates ($N - 1$,$0$) and the top left disk has coordinates ($0$,$N - 1$).\nLet $C_N$ be the following configuration of a board with $N × N$ disks: A disk at ($x$, $y$) satisfying $N - 1 \\le \\sqrt{x^2 + y^2} \\lt N$, shows its black side; otherwise, it shows its white side. $C_5$ is shown above.\nLet $T(N)$ be the minimal number of turns to finish a game starting from configuration $C_N$ or 0 if configuration $C_N$ is unsolvable. We have shown that $T(5) = 3$. You are also given that $T(10) = 29$ and $T(1\\,000) = 395\\,253$.\nFind $\\displaystyle \\sum_{i = 3}^{31} T(2^i - i)$.\n--hints--\ncrossFlips() should return 467178235146843500.\njs\nassert.strictEqual(crossFlips(), 467178235146843500);\n--seed--\n--seed-contents--\n```js\nfunction crossFlips() {\nreturn true;\n}\ncrossFlips();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-331-cross-flips.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "080278a3047283a4990675ea58a67251",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-328-lowest-cost-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b41000cf542c50ffc7\ntitle: 'Problem 328: Lowest-cost Search'\nchallengeType: 1\nforumTopicId: 301985\ndashedName: problem-328-lowest-cost-search\n--description--\nWe are trying to find a hidden number selected from the set of integers {1, 2, , $n$} by asking questions Each number (question) we ask, has a cost equal to the number asked and we get one of three possible answers:\n\"Your guess is lower than the hidden number\", or\n\"Yes, that's it \", or\n\"Your guess is higher than the hidden number\" Given the value of $n$, an optimal strategy minimizes the total cost (i e the sum of all the questions asked) for the worst possible case E g If $n = 3$, the best we can do is obviously to ask the number \"2\" The answer will immediately lead us to find the hidden number (at a total cost = 2) If $n = 8$, we might decide to use a \"binary search\" type of strategy: Our first question would be \"4\" and if the hidden number is higher than 4 we will need one or two additional questions Let our second question be \"6\" If the hidden number is still higher than 6, we will need a third question in order to discriminate between 7 and 8 Thus, our third question will be \"7\" and the total cost for this worst-case scenario will be $4 + 6 + 7 = \\mathbf{\\color{red}{17}}$ We can improve considerably the worst-case cost for $n = 8$, by asking \"5\" as our first question If we are told that the hidden number is higher than 5, our second question will be \"7\", then we'll know for certain what the hidden number is (for a total cost of $5 + 7 = \\mathbf{\\color{blue}{12}}$) If we are told that the hidden number is lower than 5, our second question will be \"3\" and if the hidden number is lower than 3 our third question will be \"1\", giving a total cost of $5 + 3 + 1 = \\mathbf{\\color{blue}{9}}$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-328-lowest-cost-search.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "aaf114a9e0b25592c7e66140edd41523",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-328-lowest-cost-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "number is higher than 5, our second question will be \"7\", then we'll know for certain what the hidden number is (for a total cost of $5 + 7 = \\mathbf{\\color{blue}{12}}$) If we are told that the hidden number is lower than 5, our second question will be \"3\" and if the hidden number is lower than 3 our third question will be \"1\", giving a total cost of $5 + 3 + 1 = \\mathbf{\\color{blue}{9}}$Since $\\mathbf{\\color{blue}{12 > 9}}$, the worst-case cost for this strategy is 12 That's better than what we achieved previously with the \"binary search\" strategy; it is also better than or equal to any other strategy So, in fact, we have just described an optimal strategy for $n = 8$ Let $C(n)$ be the worst-case cost achieved by an optimal strategy for $n$, as described above Thus $C(1) = 0$, $C(2) = 1$, $C(3) = 2$ and $C(8) = 12$ Similarly, $C(100) = 400$ and $\\displaystyle\\sum_{n = 1}^{100} C(n) = 17575$ Find $\\displaystyle\\sum_{n = 1}^{200\\,000} C(n)$ --hints--\nlowestCostSearch() should return 260511850222 js\nassert strictEqual(lowestCostSearch(), 260511850222);\n--seed--\n--seed-contents--\n```js\nfunction lowestCostSearch() {\nreturn true;\n}\nlowestCostSearch();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-328-lowest-cost-search.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9782bb667e166e48e1965207369fdde3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-335-gathering-the-beans.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4bd1000cf542c50ffce\ntitle: 'Problem 335: Gathering the beans'\nchallengeType: 1\nforumTopicId: 301993\ndashedName: problem-335-gathering-the-beans\n--description--\nWhenever Peter feels bored, he places some bowls, containing one bean each, in a circle. After this, he takes all the beans out of a certain bowl and drops them one by one in the bowls going clockwise. He repeats this, starting from the bowl he dropped the last bean in, until the initial situation appears again. For example with 5 bowls he acts as follows:\nSo with 5 bowls it takes Peter 15 moves to return to the initial situation.\nLet $M(x)$ represent the number of moves required to return to the initial situation, starting with $x$ bowls. Thus, $M(5) = 15$. It can also be verified that $M(100) = 10920$.\nFind $\\displaystyle\\sum_{k = 0}^{{10}^{18}} M(2^k + 1)$. Give your answer modulo $7^9$.\n--hints--\ngatheringTheBeans() should return 5032316.\njs\nassert.strictEqual(gatheringTheBeans(), 5032316);\n--seed--\n--seed-contents--\n```js\nfunction gatheringTheBeans() {\nreturn true;\n}\ngatheringTheBeans();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1431,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-335-gathering-the-beans.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "89cba91de6776b20f3152f3f49094224",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-334-spilling-the-beans.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ba1000cf542c50ffcd\ntitle: 'Problem 334: Spilling the beans'\nchallengeType: 1\nforumTopicId: 301992\ndashedName: problem-334-spilling-the-beans\n--description--\nIn Plato's heaven, there exist an infinite number of bowls in a straight line Each bowl either contains some or none of a finite number of beans A child plays a game, which allows only one kind of move: removing two beans from any bowl, and putting one in each of the two adjacent bowls The game ends when each bowl contains either one or no beans For example, consider two adjacent bowls containing 2 and 3 beans respectively, all other bowls being empty The following eight moves will finish the game:\nYou are given the following sequences:\n$$\\begin{align}\n& t_0 = 123456, \\\\\n& t_i = \\begin{cases}\n\\frac{t_{i - 1}}{2},               & \\text{if $t_{i - 1}$ is even} \\\\\n\\left\\lfloor\\frac{t_{i - 1}}{2}\\right\\rfloor \\oplus 926252, & \\text{if $t_{i - 1}$ is odd}\n\\end{cases} \\\\\n& \\qquad \\text{where $⌊x⌋$ is the floor function and $\\oplus$ is the bitwise XOR operator } \\\\\n& b_i = (t_i\\bmod 2^{11}) + 1 \\end{align}$$\nThe first two terms of the last sequence are $b_1 = 289$ and $b_2 = 145$ If we start with $b_1$ and $b_2$ beans in two adjacent bowls, 3419100 moves would be required to finish the game Consider now 1500 adjacent bowls containing $b_1, b_2, \\ldots, b_{1500}$ beans respectively, all other bowls being empty Find how many moves it takes before the game ends --hints--\nspillingTheBeans() should return 150320021261690850 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2124,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-334-spilling-the-beans.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "12e60b5e5c75c3d2b6325f5080cae233",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-334-spilling-the-beans.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(t_i\\bmod 2^{11}) + 1 \\end{align}$$ The first two terms of the last sequence are $b_1 = 289$ and $b_2 = 145$ If we start with $b_1$ and $b_2$ beans in two adjacent bowls, 3419100 moves would be required to finish the game Consider now 1500 adjacent bowls containing $b_1, b_2, \\ldots, b_{1500}$ beans respectively, all other bowls being empty Find how many moves it takes before the game ends --hints-- spillingTheBeans() should return 150320021261690850 js assertstrictEqual(spillingTheBeans(), 150320021261690850);\n--seed--\n--seed-contents--\n```js\nfunction spillingTheBeans() {\nreturn true;\n}\nspillingTheBeans();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2124,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-334-spilling-the-beans.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c5fa9c8c646de9698fbf0593276ffba8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-337-totient-stairstep-sequences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4be1000cf542c50ffd0\ntitle: 'Problem 337: Totient Stairstep Sequences'\nchallengeType: 1\nforumTopicId: 301995\ndashedName: problem-337-totient-stairstep-sequences\n--description--\nLet $\\{a_1, a_2, \\ldots, a_n\\}$ be an integer sequence of length $n$ such that:\n$a_1 = 6$\nfor all $1 ≤ i < n$ : $φ(a_i) < φ(a_{i + 1}) < a_i < a_{i + 1}$\n$φ$ denotes Euler's totient function.\nLet $S(N)$ be the number of such sequences with $a_n ≤ N$.\nFor example, $S(10) = 4$: {6}, {6, 8}, {6, 8, 9} and {6, 10}.\nWe can verify that $S(100) = 482\\,073\\,668$ and $S(10\\,000)\\bmod {10}^8 = 73\\,808\\,307$.\nFind $S(20\\,000\\,000)\\bmod {10}^8$.\n--hints--\ntotientStairstepSequences() should return 85068035.\njs\nassert.strictEqual(totientStairstepSequences(), 85068035);\n--seed--\n--seed-contents--\n```js\nfunction totientStairstepSequences() {\nreturn true;\n}\ntotientStairstepSequences();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 995,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-337-totient-stairstep-sequences.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "de86f70e112f4298437eea76b3e03163",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-327-rooms-of-doom.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b31000cf542c50ffc6\ntitle: 'Problem 327: Rooms of Doom'\nchallengeType: 1\nforumTopicId: 301984\ndashedName: problem-327-rooms-of-doom\n--description--\nA series of three rooms are connected to each other by automatic doors Each door is operated by a security card Once you enter a room, the door automatically closes, and that security card cannot be used again A machine will dispense an unlimited number of cards at the start, but each room (including the starting room) contains scanners If they detect that you are holding more than three security cards or if they detect an unattended security card on the floor, then all the doors will become permanently locked However, each room contains a box where you may safely store any number of security cards for use at a later stage If you simply tried to travel through the rooms one at a time then as you entered room 3 you would have used all three cards and would be trapped in that room forever However, if you make use of the storage boxes, then escape is possible For example, you could enter room 1 using your first card, place one card in the storage box, and use your third card to exit the room back to the start Then after collecting three more cards from the dispensing machine you could use one to enter room 1 and collect the card you placed in the box a moment ago You now have three cards again and will be able to travel through the remaining three doors This method allows you to travel through all three rooms using six security cards in total It is possible to travel through six rooms using a total of 123 security cards while carrying a maximum of 3 cards Let $C$ be the maximum number of cards which can be carried at any time Let $R$ be the number of rooms to travel through Let $M(C, R)$ be the minimum number of cards required from the dispensing machine to travel through $R$ rooms carrying up to a maximum of $C$ cards at any time For example, $M(3, 6) = 123$ and $M(4, 6) = 23$ And, $\\sum M(C, 6) = 146$ for $3 ≤ C ≤ 4$ You are given that $\\sum M(C, 10) = 10382$ for $3 ≤ C ≤ 10$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2718,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-327-rooms-of-doom.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "621882bdd6e39fd060d52078bf44a396",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-327-rooms-of-doom.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "be the number of rooms to travel through Let $M(C, R)$ be the minimum number of cards required from the dispensing machine to travel through $R$ rooms carrying up to a maximum of $C$ cards at any time For example, $M(3, 6) = 123$ and $M(4, 6) = 23$ And, $\\sum M(C, 6) = 146$ for $3 ≤ C ≤ 4$ You are given that $\\sum M(C, 10) = 10382$ for $3 ≤ C ≤ 10$Find $\\sum M(C, 30)$ for $3 ≤ C ≤ 40$ --hints--\nroomsOfDoom() should return 34315549139516 js\nassert strictEqual(roomsOfDoom(), 34315549139516);\n--seed--\n--seed-contents--\n```js\nfunction roomsOfDoom() {\nreturn true;\n}\nroomsOfDoom();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2718,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-327-rooms-of-doom.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1e6bcb44eec89864fb5804a3601e9cf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-333-special-partitions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4b91000cf542c50ffcc\ntitle: 'Problem 333: Special partitions'\nchallengeType: 1\nforumTopicId: 301991\ndashedName: problem-333-special-partitions\n--description--\nAll positive integers can be partitioned in such a way that each and every term of the partition can be expressed as $2^i \\times 3^j$, where $i, j ≥ 0$ Let's consider only those such partitions where none of the terms can divide any of the other terms For example, the partition of $17 = 2 + 6 + 9 = (2^1 \\times 3^0 + 2^1 \\times 3^1 + 2^0 \\times 3^2)$ would not be valid since 2 can divide 6 Neither would the partition $17 = 16 + 1 = (2^4 \\times 3^0 + 2^0 \\times 3^0)$ since 1 can divide 16 The only valid partition of 17 would be $8 + 9 = (2^3 \\times 3^0 + 2^0 \\times 3^2)$ Many integers have more than one valid partition, the first being 11 having the following two partitions $$\\begin{align}\n& 11 = 2 + 9 = (2^1 \\times 3^0 + 2^0 \\times 3^2) \\\\\n& 11 = 8 + 3 = (2^3 \\times 3^0 + 2^0 \\times 3^1)\n\\end{align}$$\nLet's define $P(n)$ as the number of valid partitions of $n$ For example, $P(11) = 2$ Let's consider only the prime integers $q$ which would have a single valid partition such as $P(17)$ The sum of the primes $q <100$ such that $P(q) = 1$ equals 233 Find the sum of the primes $q < 1\\,000\\,000$ such that $P(q) = 1$ --hints--\nspecialPartitions() should return 3053105 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-333-special-partitions.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ad22bd2b083e9c2c3bb96a94cf89f428",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-333-special-partitions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(2^3 \\times 3^0 + 2^0 \\times 3^1) \\end{align}$$ Let's define $P(n)$ as the number of valid partitions of $n$ For example, $P(11) = 2$ Let's consider only the prime integers $q$ which would have a single valid partition such as $P(17)$ The sum of the primes $q <100$ such that $P(q) = 1$ equals 233 Find the sum of the primes $q < 1\\,000\\,000$ such that $P(q) = 1$ --hints-- specialPartitions() should return 3053105 js assertstrictEqual(specialPartitions(), 3053105);\n--seed--\n--seed-contents--\n```js\nfunction specialPartitions() {\nreturn true;\n}\nspecialPartitions();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-333-special-partitions.md",
      "source_type": "git_repo"
    },
    "token_count": 195,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1594471554f61c06b2e9fafa5723dbb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-339-peredur-fab-efrawg.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c01000cf542c50ffd2\ntitle: 'Problem 339: Peredur fab Efrawg'\nchallengeType: 1\nforumTopicId: 301997\ndashedName: problem-339-peredur-fab-efrawg\n--description--\n\"And he came towards a valley, through which ran a river; and the borders of the valley were wooded, and on each side of the river were level meadows. And on one side of the river he saw a flock of white sheep, and on the other a flock of black sheep. And whenever one of the white sheep bleated, one of the black sheep would cross over and become white; and when one of the black sheep bleated, one of the white sheep would cross over and become black.\" - Peredur the Son of Evrawc\nInitially, each flock consists of $n$ sheep. Each sheep (regardless of color) is equally likely to be the next sheep to bleat. After a sheep has bleated and a sheep from the other flock has crossed over, Peredur may remove a number of white sheep in order to maximize the expected final number of black sheep. Let $E(n)$ be the expected final number of black sheep if Peredur uses an optimal strategy.\nYou are given that $E(5) = 6.871346$ rounded to 6 places behind the decimal point.\nFind $E(10\\,000)$ and give your answer rounded to 6 places behind the decimal point.\n--hints--\nperedurFabEfrawg() should return 19823.542204.\njs\nassert.strictEqual(peredurFabEfrawg(), 19823.542204);\n--seed--\n--seed-contents--\n```js\nfunction peredurFabEfrawg() {\nreturn true;\n}\nperedurFabEfrawg();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1529,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-339-peredur-fab-efrawg.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "751fbd7141626b869b518053f7533de4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-340-crazy-function.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c21000cf542c50ffd4\ntitle: 'Problem 340: Crazy Function'\nchallengeType: 1\nforumTopicId: 301999\ndashedName: problem-340-crazy-function\n--description--\nFor fixed integers $a$, $b$, $c$, define the crazy function $F(n)$ as follows:\n$$\\begin{align}\n& F(n) = n - c \\;\\text{ for all } n > b \\\\\n& F(n) = F(a + F(a + F(a + F(a + n)))) \\;\\text{ for all } n ≤ b.\n\\end{align}$$\nAlso, define $S(a, b, c) = \\displaystyle\\sum_{n = 0}^b F(n)$.\nFor example, if $a = 50$, $b = 2000$ and $c = 40$, then $F(0) = 3240$ and $F(2000) = 2040$. Also, $S(50, 2000, 40) = 5\\,204\\,240$.\nFind the last 9 digits of $S({21}^7, 7^{21}, {12}^7)$.\n--hints--\ncrazyFunction() should return 291504964.\njs\nassert.strictEqual(crazyFunction(), 291504964);\n--seed--\n--seed-contents--\n```js\nfunction crazyFunction() {\nreturn true;\n}\ncrazyFunction();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-340-crazy-function.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7212532a8d8a01e88e08ba0d9601ccd5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-342-the-totient-of-a-square-is-a-cube.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c31000cf542c50ffd5\ntitle: 'Problem 342: The totient of a square is a cube'\nchallengeType: 1\nforumTopicId: 302001\ndashedName: problem-342-the-totient-of-a-square-is-a-cube\n--description--\nConsider the number 50.\n${50}^2 = 2500 = 2^2 × 5^4$, so $φ(2500) = 2 × 4 × 5^3 = 8 × 5^3 = 2^3 × 5^3$. $φ$ denotes Euler's totient function.\nSo 2500 is a square and $φ(2500)$ is a cube.\nFind the sum of all numbers $n$, $1 < n < {10}^{10}$ such that $φ(n^2)$ is a cube.\n--hints--\ntotientOfSquare() should return 5943040885644.\njs\nassert.strictEqual(totientOfSquare(), 5943040885644);\n--seed--\n--seed-contents--\n```js\nfunction totientOfSquare() {\nreturn true;\n}\ntotientOfSquare();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-342-the-totient-of-a-square-is-a-cube.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a715c1f84ebe90a1552e43f2f6218602",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-341-golombs-self-describing-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c11000cf542c50ffd3\ntitle: 'Problem 341: Golomb''s self-describing sequence'\nchallengeType: 1\nforumTopicId: 302000\ndashedName: problem-341-golombs-self-describing-sequence\n--description--\nThe Golomb's self-describing sequence ($G(n)$) is the only nondecreasing sequence of natural numbers such that $n$ appears exactly $G(n)$ times in the sequence. The values of $G(n)$ for the first few $n$ are\n$$\\begin{array}{c}\nn    & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & 13 & 14 & 15 & \\ldots \\\\\nG(n) & 1 & 2 & 2 & 3 & 3 & 4 & 4 & 4 & 5 & 5  &  5 &  6 &  6 &  6 &  6 & \\ldots\n\\end{array}$$\nYou are given that $G({10}^3) = 86$, $G({10}^6) = 6137$.\nYou are also given that $\\sum G(n^3) = 153\\,506\\,976$ for $1 ≤ n < {10}^3$.\nFind $\\sum G(n^3)$ for $1 ≤ n < {10}^6$.\n--hints--\ngolombsSequence() should return 56098610614277016.\njs\nassert.strictEqual(golombsSequence(), 56098610614277016);\n--seed--\n--seed-contents--\n```js\nfunction golombsSequence() {\nreturn true;\n}\ngolombsSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1108,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-341-golombs-self-describing-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7c1aa8aa0130dbb2471d454e136a0bb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-336-maximix-arrangements.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4bd1000cf542c50ffcf\ntitle: 'Problem 336: Maximix Arrangements'\nchallengeType: 1\nforumTopicId: 301994\ndashedName: problem-336-maximix-arrangements\n--description--\nA train is used to transport four carriages in the order: $ABCD$ However, sometimes when the train arrives to collect the carriages they are not in the correct order To rearrange the carriages, they are all shunted onto a large rotating turntable After the carriages are uncoupled at a specific point, the train moves off the turntable pulling the carriages still attached with it The remaining carriages are rotated 180° All of the carriages are then rejoined and this process is repeated as often as necessary in order to obtain the least number of uses of the turntable Some arrangements, such as $ADCB$, can be solved easily: the carriages are separated between $A$ and $D$, and after $DCB$ are rotated the correct order has been achieved However, Simple Simon, the train driver, is not known for his efficiency, so he always solves the problem by initially getting carriage $A$ in the correct place, then carriage $B$, and so on Using four carriages, the worst possible arrangements for Simon, which we shall call maximix arrangements, are $DACB$ and $DBAC$; each requiring him five rotations (although, using the most efficient approach, they could be solved using just three rotations) The process he uses for $DACB$ is shown below It can be verified that there are 24 maximix arrangements for six carriages, of which the tenth lexicographic maximix arrangement is $DFAECB$ Find the ${2011}^{\\text{th}}$ lexicographic maximix arrangement for eleven carriages --hints--\nmaximixArrangements() should return a string js\nasset isString(maximixArrangements());\nmaximixArrangements() should return the string CAGBIHEFJDK js\nassert strictEqual(maximixArrangements(), 'CAGBIHEFJDK');\n--seed--\n--seed-contents--\n```js\nfunction maximixArrangements() {\nreturn true;\n}\nmaximixArrangements();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2351,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-336-maximix-arrangements.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b18f73da79e7e15eb7471102ff982327",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-338-cutting-rectangular-grid-paper.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4be1000cf542c50ffd1\ntitle: 'Problem 338: Cutting Rectangular Grid Paper'\nchallengeType: 1\nforumTopicId: 301996\ndashedName: problem-338-cutting-rectangular-grid-paper\n--description--\nA rectangular sheet of grid paper with integer dimensions $w$ × $h$ is given Its grid spacing is 1 When we cut the sheet along the grid lines into two pieces and rearrange those pieces without overlap, we can make new rectangles with different dimensions For example, from a sheet with dimensions 9 × 4, we can make rectangles with dimensions 18 × 2, 12 × 3 and 6 × 6 by cutting and rearranging as below:\nSimilarly, from a sheet with dimensions 9 × 8, we can make rectangles with dimensions 18 × 4 and 12 × 6 For a pair $w$ and $h$, let $F(w, h)$ be the number of distinct rectangles that can be made from a sheet with dimensions $w$ × $h$ For example, $F(2, 1) = 0$, $F(2, 2) = 1$, $F(9, 4) = 3$ and $F(9, 8) = 2$ Note that rectangles congruent to the initial one are not counted in $F(w, h)$ Note also that rectangles with dimensions $w$ × $h$ and dimensions $h$ × $w$ are not considered distinct For an integer $N$, let $G(N)$ be the sum of $F(w, h)$ for all pairs $w$ and $h$ which satisfy $0 < h ≤ w ≤ N$ We can verify that $G(10) = 55$, $G({10}^3) = 971\\,745$ and $G({10}^5) = 9\\,992\\,617\\,687$ Find $G({10}^{12})$ Give your answer modulo ${10}^8$ --hints--\ncuttingRectangularGridPaper() should return 15614292 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2076,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-338-cutting-rectangular-grid-paper.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "669dea05e3076f5e9a3270c6126160d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-338-cutting-rectangular-grid-paper.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in $F(w, h)$ Note also that rectangles with dimensions $w$ × $h$ and dimensions $h$ × $w$ are not considered distinct For an integer $N$, let $G(N)$ be the sum of $F(w, h)$ for all pairs $w$ and $h$ which satisfy $0 < h ≤ w ≤ N$ We can verify that $G(10) = 55$, $G({10}^3) = 971\\,745$ and $G({10}^5) = 9\\,992\\,617\\,687$ Find $G({10}^{12})$ Give your answer modulo ${10}^8$ --hints-- cuttingRectangularGridPaper() should return 15614292 js assertstrictEqual(cuttingRectangularGridPaper(), 15614292);\n--seed--\n--seed-contents--\n```js\nfunction cuttingRectangularGridPaper() {\nreturn true;\n}\ncuttingRectangularGridPaper();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2076,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-338-cutting-rectangular-grid-paper.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e93f704161635ab491799b87153f12ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-344-silver-dollar-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c51000cf542c50ffd7\ntitle: 'Problem 344: Silver dollar game'\nchallengeType: 1\nforumTopicId: 302003\ndashedName: problem-344-silver-dollar-game\n--description--\nOne variant of N.G. de Bruijn's silver dollar game can be described as follows:\nOn a strip of squares a number of coins are placed, at most one coin per square. Only one coin, called the silver dollar, has any value. Two players take turns making moves. At each turn a player must make either a regular or a special move.\nA regular move consists of selecting one coin and moving it one or more squares to the left. The coin cannot move out of the strip or jump on or over another coin.\nAlternatively, the player can choose to make the special move of pocketing the leftmost coin rather than making a regular move. If no regular moves are possible, the player is forced to pocket the leftmost coin.\nThe winner is the player who pockets the silver dollar.\nA winning configuration is an arrangement of coins on the strip where the first player can force a win no matter what the second player does.\nLet $W(n, c)$ be the number of winning configurations for a strip of $n$ squares, $c$ worthless coins and one silver dollar.\nYou are given that $W(10, 2) = 324$ and $W(100, 10) = 1\\,514\\,704\\,946\\,113\\,500$.\nFind $W(1\\,000\\,000, 100)$ modulo the semiprime $1000\\,036\\,000\\,099 (= 1\\,000\\,003 \\times 1\\,000\\,033)$.\n--hints--\nsilverDollarGame() should return 65579304332.\njs\nassert.strictEqual(silverDollarGame(), 65579304332);\n--seed--\n--seed-contents--\n```js\nfunction silverDollarGame() {\nreturn true;\n}\nsilverDollarGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1943,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-344-silver-dollar-game.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1284e0cd044881196bd49f0e317c83ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-343-fractional-sequences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c41000cf542c50ffd6\ntitle: 'Problem 343: Fractional Sequences'\nchallengeType: 1\nforumTopicId: 302002\ndashedName: problem-343-fractional-sequences\n--description--\nFor any positive integer $k$, a finite sequence $a_i$ of fractions $\\frac{x_i}{y_i}$ is defined by:\n$a_1 = \\displaystyle\\frac{1}{k}$ and\n$a_i = \\displaystyle\\frac{(x_{i - 1} + 1)}{(y_{i - 1} - 1)}$ reduced to lowest terms for $i > 1$.\nWhen $a_i$ reaches some integer $n$, the sequence stops. (That is, when $y_i = 1$.)\nDefine $f(k) = n$.\nFor example, for $k = 20$:\n$$\\frac{1}{20} → \\frac{2}{19} → \\frac{3}{18} = \\frac{1}{6} → \\frac{2}{5} → \\frac{3}{4} → \\frac{4}{3} → \\frac{5}{2} → \\frac{6}{1} = 6$$\nSo $f(20) = 6$.\nAlso $f(1) = 1$, $f(2) = 2$, $f(3) = 1$ and $\\sum f(k^3) = 118\\,937$ for $1 ≤ k ≤ 100$.\nFind $\\sum f(k^3)$ for $1 ≤ k ≤ 2 × {10}^6$.\n--hints--\nfractionalSequences() should return 269533451410884200.\njs\nassert.strictEqual(fractionalSequences(), 269533451410884200);\n--seed--\n--seed-contents--\n```js\nfunction fractionalSequences() {\nreturn true;\n}\nfractionalSequences();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1185,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-343-fractional-sequences.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e1ebd78b8a0d6d0d1dc5bb647dec4b30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-346-strong-repunits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c71000cf542c50ffd8\ntitle: 'Problem 346: Strong Repunits'\nchallengeType: 1\nforumTopicId: 302005\ndashedName: problem-346-strong-repunits\n--description--\nThe number 7 is special, because 7 is 111 written in base 2, and 11 written in base 6 (i.e. $7_{10} = {11}_6 = {111}_2$). In other words, 7 is a repunit in at least two bases $b > 1$.\nWe shall call a positive integer with this property a strong repunit. It can be verified that there are 8 strong repunits below 50: {1, 7, 13, 15, 21, 31, 40, 43}. Furthermore, the sum of all strong repunits below 1000 equals 15864.\nFind the sum of all strong repunits below ${10}^{12}$.\n--hints--\nstrongRepunits() should return 336108797689259260.\njs\nassert.strictEqual(strongRepunits(), 336108797689259260);\n--seed--\n--seed-contents--\n```js\nfunction strongRepunits() {\nreturn true;\n}\nstrongRepunits();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-346-strong-repunits.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9d4dd9321d8941c4aa53ee6ce6db8d15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-347-largest-integer-divisible-by-two-primes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c81000cf542c50ffd9\ntitle: 'Problem 347: Largest integer divisible by two primes'\nchallengeType: 1\nforumTopicId: 302006\ndashedName: problem-347-largest-integer-divisible-by-two-primes\n--description--\nThe largest integer $≤ 100$ that is only divisible by both the primes 2 and 3 is 96, as $96 = 32 \\times 3 = 2^5 \\times 3$.\nFor two distinct primes $p$ and $q$ let $M(p, q, N)$ be the largest positive integer $≤ N$ only divisible by both $p$ and $q$ and $M(p, q, N)=0$ if such a positive integer does not exist.\nE.g. $M(2, 3, 100) = 96$.\n$M(3, 5, 100) = 75$ and not 90 because 90 is divisible by 2, 3 and 5. Also $M(2, 73, 100) = 0$ because there does not exist a positive integer $≤ 100$ that is divisible by both 2 and 73.\nLet $S(N)$ be the sum of all distinct $M(p, q, N)$. $S(100)=2262$.\nFind $S(10\\,000\\,000)$.\n--hints--\nintegerDivisibleByTwoPrimes() should return 11109800204052.\njs\nassert.strictEqual(integerDivisibleByTwoPrimes(), 11109800204052);\n--seed--\n--seed-contents--\n```js\nfunction integerDivisibleByTwoPrimes() {\nreturn true;\n}\nintegerDivisibleByTwoPrimes();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1190,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-347-largest-integer-divisible-by-two-primes.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8b0477b00f72ee2c05e09abbd03097cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-348-sum-of-a-square-and-a-cube.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c81000cf542c50ffdb\ntitle: 'Problem 348: Sum of a square and a cube'\nchallengeType: 1\nforumTopicId: 302007\ndashedName: problem-348-sum-of-a-square-and-a-cube\n--description--\nMany numbers can be expressed as the sum of a square and a cube. Some of them in more than one way.\nConsider the palindromic numbers that can be expressed as the sum of a square and a cube, both greater than 1, in exactly 4 different ways.\nFor example, 5229225 is a palindromic number and it can be expressed in exactly 4 different ways:\n$$\\begin{align}\n& {2285}^2 + {20}^3 \\\\\n& {2223}^2 + {66}^3 \\\\\n& {1810}^2 + {125}^3 \\\\\n& {1197}^2 + {156}^3\n\\end{align}$$\nFind the sum of the five smallest such palindromic numbers.\n--hints--\nsumOfSquareAndCube() should return 1004195061.\njs\nassert.strictEqual(sumOfSquareAndCube(), 1004195061);\n--seed--\n--seed-contents--\n```js\nfunction sumOfSquareAndCube() {\nreturn true;\n}\nsumOfSquareAndCube();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1029,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-348-sum-of-a-square-and-a-cube.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "251d7853892e19931f2533b7aebcc734",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-349-langtons-ant.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ca1000cf542c50ffdc\ntitle: 'Problem 349: Langton''s ant'\nchallengeType: 1\nforumTopicId: 302008\ndashedName: problem-349-langtons-ant\n--description--\nAn ant moves on a regular grid of squares that are colored either black or white.\nThe ant is always oriented in one of the cardinal directions (left, right, up or down) and moves from square to adjacent square according to the following rules:\nif it is on a black square, it flips the color of the square to white, rotates 90° counterclockwise and moves forward one square.\nif it is on a white square, it flips the color of the square to black, rotates 90° clockwise and moves forward one square.\nStarting with a grid that is entirely white, how many squares are black after ${10}^{18}$ moves of the ant?\n--hints--\nlangtonsAnt() should return 115384615384614940.\njs\nassert.strictEqual(langtonsAnt(), 115384615384614940);\n--seed--\n--seed-contents--\n```js\nfunction langtonsAnt() {\nreturn true;\n}\nlangtonsAnt();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-349-langtons-ant.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "afb75e2de49e5c5e0b564ac7a3855b83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-351-hexagonal-orchards.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4cb1000cf542c50ffde\ntitle: 'Problem 351: Hexagonal orchards'\nchallengeType: 1\nforumTopicId: 302011\ndashedName: problem-351-hexagonal-orchards\n--description--\nA hexagonal orchard of order $n$ is a triangular lattice made up of points within a regular hexagon with side $n$. The following is an example of a hexagonal orchard of order 5:\nHighlighted in green are the points which are hidden from the center by a point closer to it. It can be seen that for a hexagonal orchard of order 5, 30 points are hidden from the center.\nLet $H(n)$ be the number of points hidden from the center in a hexagonal orchard of order $n$.\n$H(5) = 30$. $H(10) = 138$. $H(1\\,000)$ = $1\\,177\\,848$.\nFind $H(100\\,000\\,000)$.\n--hints--\nhexagonalOrchards() should return 11762187201804552.\njs\nassert.strictEqual(hexagonalOrchards(), 11762187201804552);\n--seed--\n--seed-contents--\n```js\nfunction hexagonalOrchards() {\nreturn true;\n}\nhexagonalOrchards();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-351-hexagonal-orchards.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "77b9150563f86bd4992b2babf04dd46c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-345-matrix-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c81000cf542c50ffda\ntitle: 'Problem 345: Matrix Sum'\nchallengeType: 1\nforumTopicId: 302004\ndashedName: problem-345-matrix-sum\n--description--\nWe define the Matrix Sum of a matrix as the maximum sum of matrix elements with each element being the only one in his row and column",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-345-matrix-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 82,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "559fa6b76c88319cc1c897d33246e628",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-345-matrix-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4c81000cf542c50ffda\ntitle: 'Problem 345: Matrix Sum'\nchallengeType: 1\nforumTopicId: 302004\ndashedName: problem-345-matrix-sum\n--description--\nWe define the Matrix Sum of a matrix as the maximum sum of matrix elements with each element being the only one in his row and columnFor example, the Matrix Sum of the matrix below equals $3315 ( = 863 + 383 + 343 + 959 + 767)$:\n$$\\begin{array}{rrrrr}\n7                &  53                & 183                & 439                & \\color{lime}{863} \\\\\n497                & \\color{lime}{383} & 563                &  79                & 973 \\\\\n287                &  63                & \\color{lime}{343} & 169                & 583 \\\\\n627                & 343                & 773                & \\color{lime}{959} & 943 \\\\\n\\color{lime}{767} & 473                & 103                & 699                & 303\n\\end{array}$$\nFind the Matrix Sum of:\n$$\\begin{array}{r}\n7 &  53 & 183 & 439 & 863 & 497 & 383 & 563 &  79 & 973 & 287 &  63 & 343 & 169 & 583 \\\\\n627 & 343 & 773 & 959 & 943 & 767 & 473 & 103 & 699 & 303 & 957 & 703 & 583 & 639 & 913 \\\\\n447 & 283 & 463 &  29 &  23 & 487 & 463 & 993 & 119 & 883 & 327 & 493 & 423 & 159 & 743 \\\\\n217 & 623 &   3 & 399 & 853 & 407 & 103 & 983 &  89 & 463 & 290 & 516 & 212 & 462 & 350 \\\\\n960 & 376 & 682 & 962 & 300 & 780 & 486 & 502 & 912 & 800 & 250 & 346 & 172 & 812 & 350 \\\\\n870 & 456 & 192 & 162 & 593 & 473 & 915 &  45 & 989 & 873 & 823 & 965 & 425 & 329 & 803 \\\\\n973 & 965 & 905 & 919 & 133 & 673 & 665 & 235 & 509 & 613 & 673 & 815 & 165 & 992 & 326 \\\\\n322 & 148 & 972 & 962 & 286 & 255 & 941 & 541 & 265 & 323 & 925 & 281 & 601 &  95 & 973 \\\\\n445 & 721 &  11 & 525 & 473 &  65 & 511 & 164 & 138 & 672 &  18 & 428 & 154 & 448 & 848 \\\\\n414 & 456 & 310 & 312 & 798 & 104 & 566 & 520 & 302 & 248 & 694 & 976 & 430 & 392 & 198 \\\\\n184 & 829 & 373 & 181 & 631 & 101 & 969 & 613 & 840 & 740 & 778 & 458 & 284 & 760 & 390 \\\\\n821 & 461 & 843 & 513 &  17 & 901 & 711 & 993 & 293 & 157 & 274 &  94 & 192 & 156 & 574 \\\\\n34 & 124 &   4 & 878 & 450 & 476 & 712 & 914 & 838 & 669 & 875 & 299 & 823 & 329 & 699 \\\\\n815 & 559 & 813 & 459 & 522 & 788 & 168 & 586 & 966 & 232 & 308 & 833 & 251 & 631 & 107 \\\\\n813 & 883 & 451 & 509 & 615 &  77 & 281 & 613 & 459 & 205 & 380 & 274 & 302 &  35 & 805\n\\end{array}$$\n--hints--\nmatrixSum() should return 13938",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-345-matrix-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 955,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d805b56774a7cd30745f45e1ce65a2f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-345-matrix-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "& 875 & 299 & 823 & 329 & 699 \\\\ 815 & 559 & 813 & 459 & 522 & 788 & 168 & 586 & 966 & 232 & 308 & 833 & 251 & 631 & 107 \\\\ 813 & 883 & 451 & 509 & 615 & 77 & 281 & 613 & 459 & 205 & 380 & 274 & 302 & 35 & 805 \\end{array}$$ --hints-- matrixSum() should return 13938js\nassert strictEqual(matrixSum(), 13938);\n--seed--\n--seed-contents--\n```js\nfunction matrixSum() {\nreturn true;\n}\nmatrixSum();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2644,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-345-matrix-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d0b22fa2ff96dc36d164a39749de6457",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-354-distances-in-a-bees-honeycomb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4cf1000cf542c50ffe1\ntitle: 'Problem 354: Distances in a bee''s honeycomb'\nchallengeType: 1\nforumTopicId: 302014\ndashedName: problem-354-distances-in-a-bees-honeycomb\n--description--\nConsider a honey bee's honeycomb where each cell is a perfect regular hexagon with side length 1.\nOne particular cell is occupied by the queen bee. For a positive real number $L$, let $B(L)$ count the cells with distance $L$ from the queen bee cell (all distances are measured from center to center); you may assume that the honeycomb is large enough to accommodate for any distance we wish to consider.\nFor example, $B(\\sqrt{3}) = 6$, $B(\\sqrt{21}) = 12$ and $B(111\\,111\\,111) = 54$.\nFind the number of $L ≤ 5 \\times {10}^{11}$ such that $B(L) = 450$.\n--hints--\ndistancesInHoneycomb() should return 58065134.\njs\nassert.strictEqual(distancesInHoneycomb(), 58065134);\n--seed--\n--seed-contents--\n```js\nfunction distancesInHoneycomb() {\nreturn true;\n}\ndistancesInHoneycomb();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-354-distances-in-a-bees-honeycomb.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "121de76d75697a27f8704aae29c5a4d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-350-constraining-the-least-greatest-and-the-greatest-least.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4cb1000cf542c50ffdd\ntitle: 'Problem 350: Constraining the least greatest and the greatest least'\nchallengeType: 1\nforumTopicId: 302010\ndashedName: problem-350-constraining-the-least-greatest-and-the-greatest-least\n--description--\nA list of size $n$ is a sequence of $n$ natural numbers Examples are (2, 4, 6), (2, 6, 4), (10, 6, 15, 6), and (11) The greatest common divisor, or $gcd$, of a list is the largest natural number that divides all entries of the list Examples: $gcd(2, 6, 4) = 2$, $gcd(10, 6, 15, 6) = 1$ and $gcd(11) = 11$ The least common multiple, or $lcm$, of a list is the smallest natural number divisible by each entry of the list Examples: $lcm(2, 6, 4) = 12$, $lcm(10, 6, 15, 6) = 30$ and $lcm(11) = 11$ Let $f(G, L, N)$ be the number of lists of size $N$ with $gcd ≥ G$ and $lcm ≤ L$ For example:\n$$\\begin{align}\n& f(10, 100, 1) = 91 \\\\\n& f(10, 100, 2) = 327 \\\\\n& f(10, 100, 3) = 1135 \\\\\n& f(10, 100, 1000)\\bmod {101}^4 = 3\\,286\\,053\n\\end{align}$$\nFind $f({10}^6, {10}^{12}, {10}^{18})\\bmod {101}^4$ --hints--\nleastGreatestAndGreatestLeast() should return 84664213 js\nassert strictEqual(leastGreatestAndGreatestLeast(), 84664213);\n--seed--\n--seed-contents--\n```js\nfunction leastGreatestAndGreatestLeast() {\nreturn true;\n}\nleastGreatestAndGreatestLeast();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1412,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-350-constraining-the-least-greatest-and-the-greatest-least.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bce9d3b0d234f48728a2e6a654dfafc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-355-maximal-coprime-subset.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d01000cf542c50ffe2\ntitle: 'Problem 355: Maximal coprime subset'\nchallengeType: 1\nforumTopicId: 302015\ndashedName: problem-355-maximal-coprime-subset\n--description--\nDefine $Co(n)$ to be the maximal possible sum of a set of mutually co-prime elements from $\\{1, 2, \\ldots, n\\}$. For example $Co(10)$ is 30 and hits that maximum on the subset $\\{1, 5, 7, 8, 9\\}$.\nYou are given that $Co(30) = 193$ and $Co(100) = 1356$.\nFind $Co(200\\,000)$.\n--hints--\nmaximalCoprimeSubset() should return 1726545007.\njs\nassert.strictEqual(maximalCoprimeSubset(), 1726545007);\n--seed--\n--seed-contents--\n```js\nfunction maximalCoprimeSubset() {\nreturn true;\n}\nmaximalCoprimeSubset();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 773,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-355-maximal-coprime-subset.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7dd01f363e84d313ba546a0fd7ac6bfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-356-largest-roots-of-cubic-polynomials.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d01000cf542c50ffe3\ntitle: 'Problem 356: Largest roots of cubic polynomials'\nchallengeType: 1\nforumTopicId: 302016\ndashedName: problem-356-largest-roots-of-cubic-polynomials\n--description--\nLet $a_n$ be the largest real root of a polynomial $g(x) = x^3 - 2^n \\times x^2 + n$.\nFor example, $a_2 = 3.86619826\\ldots$\nFind the last eight digits of $\\displaystyle\\sum_{i = 1}^{30} \\lfloor {a_i}^{987654321}\\rfloor$.\nNote: $\\lfloor a\\rfloor$ represents the floor function.\n--hints--\nrootsOfCubicPolynomials() should return 28010159.\njs\nassert.strictEqual(rootsOfCubicPolynomials(), 28010159);\n--seed--\n--seed-contents--\n```js\nfunction rootsOfCubicPolynomials() {\nreturn true;\n}\nrootsOfCubicPolynomials();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-356-largest-roots-of-cubic-polynomials.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "baef1d23473bc713751addcadf406055",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-357-prime-generating-integers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d11000cf542c50ffe4\ntitle: 'Problem 357: Prime generating integers'\nchallengeType: 1\nforumTopicId: 302017\ndashedName: problem-357-prime-generating-integers\n--description--\nConsider the divisors of 30: 1, 2, 3, 5, 6, 10, 15, 30.\nIt can be seen that for every divisor $d$ of 30, $d + \\frac{30}{d}$ is prime.\nFind the sum of all positive integers $n$ not exceeding $100\\,000\\,000$ such that for every divisor $d$ of $n$, $d + \\frac{n}{d}$ is prime.\n--hints--\nprimeGeneratingIntegers() should return 1739023853137.\njs\nassert.strictEqual(primeGeneratingIntegers(), 1739023853137);\n--seed--\n--seed-contents--\n```js\nfunction primeGeneratingIntegers() {\nreturn true;\n}\nprimeGeneratingIntegers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-357-prime-generating-integers.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b37e286bfb4ec782ebaf66b3b2e323b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-353-risky-moon.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4cd1000cf542c50ffe0\ntitle: 'Problem 353: Risky moon'\nchallengeType: 1\nforumTopicId: 302013\ndashedName: problem-353-risky-moon\n--description--\nA moon could be described by the sphere $C(r)$ with center (0, 0, 0) and radius $r$ There are stations on the moon at the points on the surface of $C(r)$ with integer coordinates The station at (0, 0, $r$) is called North Pole station, the station at (0, 0, $-r$) is called South Pole station All stations are connected with each other via the shortest road on the great arc through the stations A journey between two stations is risky If $d$ is the length of the road between two stations, ${\\left(\\frac{d}{πr}\\right)}^2$ is a measure for the risk of the journey (let us call it the risk of the road) If the journey includes more than two stations, the risk of the journey is the sum of risks of the used roads A direct journey from the North Pole station to the South Pole station has the length $πr$ and risk 1 The journey from the North Pole station to the South Pole station via (0, $r$, 0) has the same length, but a smaller risk:\n$${\\left(\\frac{\\frac{1}{2}πr}{πr}\\right)}^2+{\\left(\\frac{\\frac{1}{2}πr}{πr}\\right)}^2 = 0 5$$\nThe minimal risk of a journey from the North Pole station to the South Pole station on $C(r)$ is $M(r)$ You are given that $M(7) = 0 178\\,494\\,399\\,8$ rounded to 10 digits behind the decimal point Find $\\displaystyle\\sum_{n = 1}^{15} M(2^n - 1)$ Give your answer rounded to 10 digits behind the decimal point in the form a bcdefghijk --hints--\nriskyMoon() should return 1 2759860331 js\nassert strictEqual(riskyMoon(), 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-353-risky-moon.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "733f1d8483bcacdb9c23aa41907a8b04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-353-risky-moon.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a smaller risk: $${\\left(\\frac{\\frac{1}{2}πr}{πr}\\right)}^2+{\\left(\\frac{\\frac{1}{2}πr}{πr}\\right)}^2 = 0 5$$ The minimal risk of a journey from the North Pole station to the South Pole station on $C(r)$ is $M(r)$ You are given that $M(7) = 0 178\\,494\\,399\\,8$ rounded to 10 digits behind the decimal point Find $\\displaystyle\\sum_{n = 1}^{15} M(2^n - 1)$ Give your answer rounded to 10 digits behind the decimal point in the form a bcdefghijk --hints-- riskyMoon() should return 1 2759860331 js assert strictEqual(riskyMoon(), 12759860331);\n--seed--\n--seed-contents--\n```js\nfunction riskyMoon() {\nreturn true;\n}\nriskyMoon();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-353-risky-moon.md",
      "source_type": "git_repo"
    },
    "token_count": 221,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8ae84ab036b7d55bb467bf531964a738",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-358-cyclic-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d21000cf542c50ffe5\ntitle: 'Problem 358: Cyclic numbers'\nchallengeType: 1\nforumTopicId: 302018\ndashedName: problem-358-cyclic-numbers\n--description--\nA cyclic number with $n$ digits has a very interesting property:\nWhen it is multiplied by 1, 2, 3, 4, ... $n$, all the products have exactly the same digits, in the same order, but rotated in a circular fashion!\nThe smallest cyclic number is the 6-digit number 142857:\n$$\\begin{align}\n& 142857 × 1 = 142857 \\\\\n& 142857 × 2 = 285714 \\\\\n& 142857 × 3 = 428571 \\\\\n& 142857 × 4 = 571428 \\\\\n& 142857 × 5 = 714285 \\\\\n& 142857 × 6 = 857142\n\\end{align}$$\nThe next cyclic number is 0588235294117647 with 16 digits:\n$$\\begin{align}\n& 0588235294117647 × 1 = 0588235294117647 \\\\\n& 0588235294117647 × 2 = 1176470588235294 \\\\\n& 0588235294117647 × 3 = 1764705882352941 \\\\\n& \\ldots \\\\\n& 0588235294117647 × 16 = 9411764705882352\n\\end{align}$$\nNote that for cyclic numbers, leading zeros are important.\nThere is only one cyclic number for which, the eleven leftmost digits are 00000000137 and the five rightmost digits are 56789 (i.e., it has the form $00000000137\\ldots56789$ with an unknown number of digits in the middle). Find the sum of all its digits.\n--hints--\ncyclicNumbers() should return 3284144505.\njs\nassert.strictEqual(cyclicNumbers(), 3284144505);\n--seed--\n--seed-contents--\n```js\nfunction cyclicNumbers() {\nreturn true;\n}\ncyclicNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1544,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-358-cyclic-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3e77b3e0dd4c5dbd5613160a5b4ecd3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-352-blood-tests.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4cd1000cf542c50ffdf\ntitle: 'Problem 352: Blood tests'\nchallengeType: 1\nforumTopicId: 302012\ndashedName: problem-352-blood-tests\n--description--\nEach one of the 25 sheep in a flock must be tested for a rare virus, known to affect 2% of the sheep population An accurate and extremely sensitive PCR test exists for blood samples, producing a clear positive / negative result, but it is very time-consuming and expensive Because of the high cost, the vet-in-charge suggests that instead of performing 25 separate tests, the following procedure can be used instead:\nThe sheep are split into 5 groups of 5 sheep in each group For each group, the 5 samples are mixed together and a single test is performed Then,\nIf the result is negative, all the sheep in that group are deemed to be virus-free If the result is positive, 5 additional tests will be performed (a separate test for each animal) to determine the affected individual(s) Since the probability of infection for any specific animal is only 0 02, the first test (on the pooled samples) for each group will be:\nNegative (and no more tests needed) with probability ${0 98}^5 = 0 9039207968$ Positive (5 additional tests needed) with probability $1 - 0 9039207968 = 0 0960792032$ Thus, the expected number of tests for each group is $1 + 0 0960792032 × 5 = 1 480396016$ Consequently, all 5 groups can be screened using an average of only $1 480396016 × 5 = \\mathbf{7 40198008}$ tests, which represents a huge saving of more than 70% Although the scheme we have just described seems to be very efficient, it can still be improved considerably (always assuming that the test is sufficiently sensitive and no adverse effects are caused by mixing different samples) E g :\nWe may start by running a test on a mixture of all the 25 samples It can be verified that in about 60 35% of the cases this test will be negative, thus no more tests will be needed Further testing will only be required for the remaining 39 65% of the cases",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3635,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-352-blood-tests.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "36871c84f26f2a786d82faf46c007ba1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-352-blood-tests.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "improved considerably (always assuming that the test is sufficiently sensitive and no adverse effects are caused by mixing different samples) E g : We may start by running a test on a mixture of all the 25 samples It can be verified that in about 60 35% of the cases this test will be negative, thus no more tests will be needed Further testing will only be required for the remaining 39 65% of the casesIf we know that at least one animal in a group of 5 is infected and the first 4 individual tests come out negative, there is no need to run a test on the fifth animal (we know that it must be infected) We can try a different number of groups / different number of animals in each group, adjusting those numbers at each level so that the total expected number of tests will be minimised To simplify the very wide range of possibilities, there is one restriction we place when devising the most cost-efficient testing scheme: whenever we start with a mixed sample, all the sheep contributing to that sample must be fully screened (i e a verdict of infected / virus-free must be reached for all of them) before we start examining any other animals For the current example, it turns out that the most cost-efficient testing scheme (we'll call it the optimal strategy) requires an average of just 4 155452 tests Using the optimal strategy, let $T(s, p)$ represent the average number of tests needed to screen a flock of $s$ sheep for a virus having probability $p$ to be present in any individual Thus, rounded to six decimal places, $T(25, 0 02) = 4 155452$ and $T(25, 0 10) = 12 702124$ Find $\\sum T(10\\,000, p)$ for $p = 0 01, 0 02, 0 03, \\ldots 0 50$ Give your answer rounded to six decimal places --hints--\nbloodTests() should return 378563 260589 js\nassert strictEqual(bloodTests(), 378563 260589);\n--seed--\n--seed-contents--\n```js\nfunction bloodTests() {\nreturn true;\n}\nbloodTests();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3635,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-352-blood-tests.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4ed021f365b6ac248daffb216aa2fa6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-360-scary-sphere.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d41000cf542c50ffe7\ntitle: 'Problem 360: Scary Sphere'\nchallengeType: 1\nforumTopicId: 302021\ndashedName: problem-360-scary-sphere\n--description--\nGiven two points ($x_1$, $y_1$, $z_1$) and ($x_2$, $y_2$, $z_2$) in three dimensional space, the Manhattan distance between those points is defined as $|x_1 - x_2| + |y_1 - y_2| + |z_1 - z_2|$.\nLet $C(r)$ be a sphere with radius $r$ and center in the origin $O(0, 0, 0)$.\nLet $I(r)$ be the set of all points with integer coordinates on the surface of $C(r)$.\nLet $S(r)$ be the sum of the Manhattan distances of all elements of $I(r)$ to the origin $O$.\nE.g. $S(45)=34518$.\nFind $S({10}^{10})$.\n--hints--\nscarySphere() should return 878825614395267100.\njs\nassert.strictEqual(scarySphere(), 878825614395267100);\n--seed--\n--seed-contents--\n```js\nfunction scarySphere() {\nreturn true;\n}\nscarySphere();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-360-scary-sphere.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6061351c5d35033ccc77dd28cfbea5d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-362-squarefree-factors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d61000cf542c50ffe9\ntitle: 'Problem 362: Squarefree factors'\nchallengeType: 1\nforumTopicId: 302023\ndashedName: problem-362-squarefree-factors\n--description--\nConsider the number 54.\n54 can be factored in 7 distinct ways into one or more factors larger than 1:\n$$54, 2 × 27, 3 × 18, 6 × 9, 3 × 3 × 6, 2 × 3 × 9 \\text{ and } 2 × 3 × 3 × 3$$\nIf we require that the factors are all squarefree only two ways remain: $3 × 3 × 6$ and $2 × 3 × 3 × 3$.\nLet's call $Fsf(n)$ the number of ways $n$ can be factored into one or more squarefree factors larger than 1, so $Fsf(54) = 2$.\nLet $S(n)$ be $\\sum Fsf(k)$ for $k = 2$ to $n$.\n$S(100) = 193$.\nFind $S(10\\,000\\,000\\,000)$.\n--hints--\nsquarefreeFactors() should return 457895958010.\njs\nassert.strictEqual(squarefreeFactors(), 457895958010);\n--seed--\n--seed-contents--\n```js\nfunction squarefreeFactors() {\nreturn true;\n}\nsquarefreeFactors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-362-squarefree-factors.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d5105fee27e789208c3b004fad4ab71f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-364-comfortable-distance.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d91000cf542c50ffea\ntitle: 'Problem 364: Comfortable distance'\nchallengeType: 1\nforumTopicId: 302025\ndashedName: problem-364-comfortable-distance\n--description--\nThere are $N$ seats in a row. $N$ people come after each other to fill the seats according to the following rules:\nIf there is any seat whose adjacent seat(s) are not occupied take such a seat.\nIf there is no such seat and there is any seat for which only one adjacent seat is occupied take such a seat.\nOtherwise take one of the remaining available seats.\nLet $T(N)$ be the number of possibilities that $N$ seats are occupied by $N$ people with the given rules. The following figure shows $T(4) = 8$.\nWe can verify that $T(10) = 61\\,632$ and $T(1\\,000)\\bmod 100\\,000\\,007 = 47\\,255\\,094$.\nFind $T(1\\,000\\,000)\\bmod 100\\,000\\,007$.\n--hints--\ncomfortableDistance() should return 44855254.\njs\nassert.strictEqual(comfortableDistance(), 44855254);\n--seed--\n--seed-contents--\n```js\nfunction comfortableDistance() {\nreturn true;\n}\ncomfortableDistance();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-364-comfortable-distance.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3591de07ba17931e515027c73ac32912",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-359-hilberts-new-hotel.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d31000cf542c50ffe6\ntitle: 'Problem 359: Hilbert''s New Hotel'\nchallengeType: 1\nforumTopicId: 302019\ndashedName: problem-359-hilberts-new-hotel\n--description--\nAn infinite number of people (numbered 1, 2, 3, etc ) are lined up to get a room at Hilbert's newest infinite hotel The hotel contains an infinite number of floors (numbered 1, 2, 3, etc ), and each floor contains an infinite number of rooms (numbered 1, 2, 3, etc ) Initially the hotel is empty Hilbert declares a rule on how the $n^{\\text{th}}$ person is assigned a room: person $n$ gets the first vacant room in the lowest numbered floor satisfying either of the following:\nthe floor is empty\nthe floor is not empty, and if the latest person taking a room in that floor is person $m$, then $m + n$ is a perfect square\nPerson 1 gets room 1 in floor 1 since floor 1 is empty Person 2 does not get room 2 in floor 1 since 1 + 2 = 3 is not a perfect square Person 2 instead gets room 1 in floor 2 since floor 2 is empty Person 3 gets room 2 in floor 1 since 1 + 3 = 4 is a perfect square Eventually, every person in the line gets a room in the hotel Define $P(f, r)$ to be $n$ if person $n$ occupies room $r$ in floor $f$, and 0 if no person occupies the room",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1890,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-359-hilberts-new-hotel.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f2604bbb165233bbf5c1a0ea8ddc4a9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-359-hilberts-new-hotel.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 2 = 3 is not a perfect square Person 2 instead gets room 1 in floor 2 since floor 2 is empty Person 3 gets room 2 in floor 1 since 1 + 3 = 4 is a perfect square Eventually, every person in the line gets a room in the hotel Define $P(f, r)$ to be $n$ if person $n$ occupies room $r$ in floor $f$, and 0 if no person occupies the roomHere are a few examples:\n$$\\begin{align}\n& P(1, 1) = 1 \\\\\n& P(1, 2) = 3 \\\\\n& P(2, 1) = 2 \\\\\n& P(10, 20) = 440 \\\\\n& P(25, 75) = 4863 \\\\\n& P(99, 100) = 19454\n\\end{align}$$\nFind the sum of all $P(f, r)$ for all positive $f$ and $r$ such that $f × r = 71\\,328\\,803\\,586\\,048$ and give the last 8 digits as your answer --hints--\nhilbertsNewHotel() should return 40632119 js\nassert strictEqual(hilbertsNewHotel(), 40632119);\n--seed--\n--seed-contents--\n```js\nfunction hilbertsNewHotel() {\nreturn true;\n}\nhilbertsNewHotel();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1890,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-359-hilberts-new-hotel.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ae7cbfff16e52e7409a4572c3817c2ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-361-subsequence-of-thue-morse-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d51000cf542c50ffe8\ntitle: 'Problem 361: Subsequence of Thue-Morse sequence'\nchallengeType: 1\nforumTopicId: 302022\ndashedName: problem-361-subsequence-of-thue-morse-sequence\n--description--\nThe Thue-Morse sequence $\\{T_n\\}$ is a binary sequence satisfying:\n$T_0 = 0$\n$T_{2n} = T_n$\n$T_{2n + 1} = 1 - T_n$\nThe first several terms of $\\{T_n\\}$ are given as follows: $01101001\\color{red}{10010}1101001011001101001\\ldots$ We define $\\{A_n\\}$ as the sorted sequence of integers such that the binary expression of each element appears as a subsequence in $\\{T_n\\}$ For example, the decimal number 18 is expressed as 10010 in binary 10010 appears in $\\{T_n\\}$ ($T_8$ to $T_{12}$), so 18 is an element of $\\{A_n\\}$ The decimal number 14 is expressed as 1110 in binary 1110 never appears in $\\{T_n\\}$, so 14 is not an element of $\\{A_n\\}$ The first several terms of $A_n$ are given as follows:\n$$\\begin{array}{cr}\nn   & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 &  8 &  9 & 10 & 11 & 12 & \\ldots \\\\\nA_n & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 9 & 10 & 11 & 12 & 13 & 18 & \\ldots\n\\end{array}$$\nWe can also verify that $A_{100} = 3251$ and $A_{1000} = 80\\,852\\,364\\,498$ Find the last 9 digits of $\\displaystyle\\sum_{k = 1}^{18} A_{{10}^k}$ --hints--\nsubsequenceOfThueMorseSequence() should return 178476944 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1618,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-361-subsequence-of-thue-morse-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f593fe139aeb3a722ab6dcf46a370dcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-361-subsequence-of-thue-morse-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "& 6 & 7 & 8 & 9 & 10 & 11 & 12 & \\ldots \\\\ A_n & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 9 & 10 & 11 & 12 & 13 & 18 & \\ldots \\end{array}$$ We can also verify that $A_{100} = 3251$ and $A_{1000} = 80\\,852\\,364\\,498$ Find the last 9 digits of $\\displaystyle\\sum_{k = 1}^{18} A_{{10}^k}$ --hints-- subsequenceOfThueMorseSequence() should return 178476944 js assertstrictEqual(subsequenceOfThueMorseSequence(), 178476944);\n--seed--\n--seed-contents--\n```js\nfunction subsequenceOfThueMorseSequence() {\nreturn true;\n}\nsubsequenceOfThueMorseSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1618,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-361-subsequence-of-thue-morse-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0b938da8576201327fdaba4b797dc9d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-365-a-huge-binomial-coefficient.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4da1000cf542c50ffec\ntitle: 'Problem 365: A huge binomial coefficient'\nchallengeType: 1\nforumTopicId: 302026\ndashedName: problem-365-a-huge-binomial-coefficient\n--description--\nThe binomial coefficient $\\displaystyle\\binom{{10}^{18}}{{10}^9}$ is a number with more than 9 billion ($9 × {10}^9$) digits.\nLet $M(n, k, m)$ denote the binomial coefficient $\\displaystyle\\binom{n}{k}$ modulo $m$.\nCalculate $\\sum M({10}^{18}, {10}^9, p \\times q \\times r)$ for $1000 < p < q < r < 5000$ and $p$, $q$, $r$ prime.\n--hints--\nhugeBinomialCoefficient() should return 162619462356610300.\njs\nassert.strictEqual(hugeBinomialCoefficient(), 162619462356610300);\n--seed--\n--seed-contents--\n```js\nfunction hugeBinomialCoefficient() {\nreturn true;\n}\nhugeBinomialCoefficient();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-365-a-huge-binomial-coefficient.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "343ea039b931c4e4eee9d0cf5f1b7bae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-366-stone-game-iii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4da1000cf542c50ffed\ntitle: 'Problem 366: Stone Game III'\nchallengeType: 1\nforumTopicId: 302027\ndashedName: problem-366-stone-game-iii\n--description--\nTwo players, Anton and Bernhard, are playing the following game.\nThere is one pile of $n$ stones.\nThe first player may remove any positive number of stones, but not the whole pile.\nThereafter, each player may remove at most twice the number of stones his opponent took on the previous move.\nThe player who removes the last stone wins.\nE.g. $n = 5$\nIf the first player takes anything more than one stone the next player will be able to take all remaining stones.\nIf the first player takes one stone, leaving four, his opponent will take also one stone, leaving three stones.\nThe first player cannot take all three because he may take at most $2 \\times 1 = 2$ stones. So let's say he also takes one stone, leaving 2.\nThe second player can take the two remaining stones and wins.\nSo 5 is a losing position for the first player.\nFor some winning positions there is more than one possible move for the first player.\nE.g. when $n = 17$ the first player can remove one or four stones.\nLet $M(n)$ be the maximum number of stones the first player can take from a winning position at his first turn and $M(n) = 0$ for any other position.\n$\\sum M(n)$ for $n ≤ 100$ is 728.\nFind $\\sum M(n)$ for $n ≤ {10}^{18}$. Give your answer modulo ${10}^8$.\n--hints--\nstoneGameThree() should return 88351299.\njs\nassert.strictEqual(stoneGameThree(), 88351299);\n--seed--\n--seed-contents--\n```js\nfunction stoneGameThree() {\nreturn true;\n}\nstoneGameThree();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-366-stone-game-iii.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f5d1e3435912266fa1d758a330910f98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-367-bozo-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4db1000cf542c50ffee\ntitle: 'Problem 367: Bozo sort'\nchallengeType: 1\nforumTopicId: 302028\ndashedName: problem-367-bozo-sort\n--description--\nBozo sort, not to be confused with the slightly less efficient bogo sort, consists out of checking if the input sequence is sorted and if not swapping randomly two elements. This is repeated until eventually the sequence is sorted.\nIf we consider all permutations of the first 4 natural numbers as input the expectation value of the number of swaps, averaged over all $4!$ input sequences is $24.75$.\nThe already sorted sequence takes 0 steps.\nIn this problem we consider the following variant on bozo sort.\nIf the sequence is not in order we pick three elements at random and shuffle these three elements randomly.\nAll $3! = 6$ permutations of those three elements are equally likely.\nThe already sorted sequence will take 0 steps.\nIf we consider all permutations of the first 4 natural numbers as input the expectation value of the number of shuffles, averaged over all $4!$ input sequences is $27.5$.\nConsider as input sequences the permutations of the first 11 natural numbers.\nAveraged over all $11!$ input sequences, what is the expected number of shuffles this sorting algorithm will perform? Give your answer rounded to the nearest integer.\n--hints--\nbozoSort() should return 48271207.\njs\nassert.strictEqual(bozoSort(), 48271207);\n--seed--\n--seed-contents--\n```js\nfunction bozoSort() {\nreturn true;\n}\nbozoSort();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-367-bozo-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0dba988f66706d49028941f5238a173f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-363-bzier-curves.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4d91000cf542c50ffeb\ntitle: 'Problem 363: Bézier Curves'\nchallengeType: 1\nforumTopicId: 302024\ndashedName: problem-363-bzier-curves\n--description--\nA cubic Bézier curve is defined by four points: $P_0$, $P_1$, $P_2$ and $P_3$ The curve is constructed as follows:\nOn the segments $P_0P_1$, $P_1P_2$ and $P_2P_3$ the points $Q_0$,$Q_1$ and $Q_2$ are drawn such that $\\frac{P_0Q_0}{P_0P_1} = \\frac{P_1Q_1}{P_1P_2} = \\frac{P_2Q_2}{P_2P_3} = t$, with $t$ in [0,1] On the segments $Q_0Q_1$ and $Q_1Q_2$ the points $R_0$ and $R_1$ are drawn such that $\\frac{Q_0R_0}{Q_0Q_1} = \\frac{Q_1R_1}{Q_1Q_2} = t$ for the same value of $t$ On the segment $R_0R_1$ the point $B$ is drawn such that $\\frac{R_0B}{R_0R_1} = t$ for the same value of $t$ The Bézier curve defined by the points $P_0$, $P_1$, $P_2$, $P_3$ is the locus of $B$ as $Q_0$ takes all possible positions on the segment $P_0P_1$ (Please note that for all points the value of $t$ is the same )\nFrom the construction it is clear that the Bézier curve will be tangent to the segments $P_0P_1$ in $P_0$ and $P_2P_3$ in $P_3$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2201,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-363-bzier-curves.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "56b0374399f8e9c0d7446174d719e5d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-363-bzier-curves.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is drawn such that $\\frac{R_0B}{R_0R_1} = t$ for the same value of $t$ The Bézier curve defined by the points $P_0$, $P_1$, $P_2$, $P_3$ is the locus of $B$ as $Q_0$ takes all possible positions on the segment $P_0P_1$ (Please note that for all points the value of $t$ is the same ) From the construction it is clear that the Bézier curve will be tangent to the segments $P_0P_1$ in $P_0$ and $P_2P_3$ in $P_3$A cubic Bézier curve with $P_0 = (1, 0)$, $P_1 = (1, v)$, $P_2 = (v, 1)$ and $P_3 = (0, 1)$ is used to approximate a quarter circle The value $v > 0$ is chosen such that the area enclosed by the lines $OP_0$, $OP_3$ and the curve is equal to $\\frac{π}{4}$ (the area of the quarter circle) By how many percent does the length of the curve differ from the length of the quarter circle That is, if $L$ is the length of the curve, calculate $100 × \\displaystyle\\frac{L − \\frac{π}{2}}{\\frac{π}{2}}$ Give your answer rounded to 10 digits behind the decimal point --hints--\nbezierCurves() should return 0 0000372091 js\nassert strictEqual(bezierCurves(), 0 0000372091);\n--seed--\n--seed-contents--\n```js\nfunction bezierCurves() {\nreturn true;\n}\nbezierCurves();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2201,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-363-bzier-curves.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9b98564fd05d2119b9bff04fe276a0d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-368-a-kempner-like-series.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4dd1000cf542c50ffef\ntitle: 'Problem 368: A Kempner-like series'\nchallengeType: 1\nforumTopicId: 302029\ndashedName: problem-368-a-kempner-like-series\n--description--\nThe harmonic series $1 + \\dfrac{1}{2} + \\dfrac{1}{3} + \\dfrac{1}{4} + \\ldots$ is well known to be divergent.\nIf we however omit from this series every term where the denominator has a 9 in it, the series remarkably enough converges to approximately 22.9206766193. This modified harmonic series is called the Kempner series.\nLet us now consider another modified harmonic series by omitting from the harmonic series every term where the denominator has 3 or more equal consecutive digits. One can verify that out of the first 1200 terms of the harmonic series, only 20 terms will be omitted.\nThese 20 omitted terms are:\n$$\\dfrac{1}{111}, \\dfrac{1}{222}, \\dfrac{1}{333}, \\dfrac{1}{444}, \\dfrac{1}{555}, \\dfrac{1}{666}, \\dfrac{1}{777}, \\dfrac{1}{888}, \\dfrac{1}{999}, \\dfrac{1}{1000}, \\dfrac{1}{1110}, \\\\\n\\dfrac{1}{1111}, \\dfrac{1}{1112}, \\dfrac{1}{1113}, \\dfrac{1}{1114}, \\dfrac{1}{1115}, \\dfrac{1}{1116}, \\dfrac{1}{1117}, \\dfrac{1}{1118}, \\dfrac{1}{1119}$$\nThis series converges as well.\nFind the value the series converges to. Give your answer rounded to 10 digits behind the decimal point.\n--hints--\nkempnerLikeSeries() should return 253.6135092068.\njs\nassert.strictEqual(kempnerLikeSeries(), 253.6135092068);\n--seed--\n--seed-contents--\n```js\nfunction kempnerLikeSeries() {\nreturn true;\n}\nkempnerLikeSeries();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1584,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-368-a-kempner-like-series.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bd9ec11294d14ba4e9fd77281419d79b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-369-badugi.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4de1000cf542c50fff0\ntitle: 'Problem 369: Badugi'\nchallengeType: 1\nforumTopicId: 302030\ndashedName: problem-369-badugi\n--description--\nIn a standard 52 card deck of playing cards, a set of 4 cards is a Badugi if it contains 4 cards with no pairs and no two cards of the same suit.\nLet $f(n)$ be the number of ways to choose $n$ cards with a 4 card subset that is a Badugi. For example, there are $2\\,598\\,960$ ways to choose five cards from a standard 52 card deck, of which $514\\,800$ contain a 4 card subset that is a Badugi, so $f(5) = 514800$.\nFind $\\sum f(n)$ for $4 ≤ n ≤ 13$.\n--hints--\nbadugi() should return 862400558448.\njs\nassert.strictEqual(badugi(), 862400558448);\n--seed--\n--seed-contents--\n```js\nfunction badugi() {\nreturn true;\n}\nbadugi();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 865,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-369-badugi.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f83300e7da2f710f9d565c35b6fe786d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-370-geometric-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4de1000cf542c50fff1\ntitle: 'Problem 370: Geometric triangles'\nchallengeType: 1\nforumTopicId: 302032\ndashedName: problem-370-geometric-triangles\n--description--\nLet us define a geometric triangle as an integer sided triangle with sides $a ≤ b ≤ c$ so that its sides form a geometric progression, i.e. $b^2 = a \\times c$.\nAn example of such a geometric triangle is the triangle with sides $a = 144$, $b = 156$ and $c = 169$.\nThere are $861\\,805$ geometric triangles with $\\text{perimeter} ≤ {10}^6$.\nHow many geometric triangles exist with $\\text{perimeter} ≤ 2.5 \\times {10}^{13}$?\n--hints--\ngeometricTriangles() should return 41791929448408.\njs\nassert.strictEqual(geometricTriangles(), 41791929448408);\n--seed--\n--seed-contents--\n```js\nfunction geometricTriangles() {\nreturn true;\n}\ngeometricTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 919,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-370-geometric-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a00ef4a40d9dce03dc530a545b80e718",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-372-pencils-of-rays.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e11000cf542c50fff3\ntitle: 'Problem 372: Pencils of rays'\nchallengeType: 1\nforumTopicId: 302034\ndashedName: problem-372-pencils-of-rays\n--description--\nLet $R(M, N)$ be the number of lattice points ($x$, $y$) which satisfy $M \\lt x \\le N$, $M \\lt y \\le N$ and $\\left\\lfloor\\frac{y^2}{x^2}\\right\\rfloor$ is odd.\nWe can verify that $R(0, 100) = 3\\,019$ and $R(100, 10\\,000) = 29\\,750\\,422$.\nFind $R(2 \\times {10}^6, {10}^9)$.\nNote: $\\lfloor x\\rfloor$ represents the floor function.\n--hints--\npencilsOfRays() should return 301450082318807040.\njs\nassert.strictEqual(pencilsOfRays(), 301450082318807040);\n--seed--\n--seed-contents--\n```js\nfunction pencilsOfRays() {\nreturn true;\n}\npencilsOfRays();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 805,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-372-pencils-of-rays.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "06d4fc93cd7e466c0e10ad1cc1d8ab3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-371-licence-plates.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e01000cf542c50fff2\ntitle: 'Problem 371: License plates'\nchallengeType: 1\nforumTopicId: 302033\ndashedName: problem-371-licence-plates\n--description--\nOregon license plates consist of three letters followed by a three digit number (each digit can be from [0...9]).\nWhile driving to work Seth plays the following game:\nWhenever the numbers of two license plates seen on his trip add to 1000 that's a win.\nE.g. MIC-012 and HAN-988 is a win and RYU-500 and SET-500 too (as long as he sees them in the same trip).\nFind the expected number of plates he needs to see for a win. Give your answer rounded to 8 decimal places behind the decimal point.\nNote: We assume that each license plate seen is equally likely to have any three digit number on it.\n--hints--\nlicensePlates() should return 40.66368097.\njs\nassert.strictEqual(licensePlates(), 40.66368097);\n--seed--\n--seed-contents--\n```js\nfunction licensePlates() {\nreturn true;\n}\nlicensePlates();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-371-licence-plates.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b3bea7fcea591b92db7dfd0c3e1f3088",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-373-circumscribed-circles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e11000cf542c50fff4\ntitle: 'Problem 373: Circumscribed Circles'\nchallengeType: 1\nforumTopicId: 302035\ndashedName: problem-373-circumscribed-circles\n--description--\nEvery triangle has a circumscribed circle that goes through the three vertices. Consider all integer sided triangles for which the radius of the circumscribed circle is integral as well.\nLet $S(n)$ be the sum of the radii of the circumscribed circles of all such triangles for which the radius does not exceed $n$.\n$S(100) = 4\\,950$ and $S(1\\,200) = 1\\,653\\,605$.\nFind $S({10}^7)$.\n--hints--\ncircumscribedCircles() should return 727227472448913.\njs\nassert.strictEqual(circumscribedCircles(), 727227472448913);\n--seed--\n--seed-contents--\n```js\nfunction circumscribedCircles() {\nreturn true;\n}\ncircumscribedCircles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 889,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-373-circumscribed-circles.md",
      "source_type": "git_repo"
    },
    "token_count": 247,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd5ca732b5f618b85ddaf2feea80d26a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-375-minimum-of-subsequences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e41000cf542c50fff5\ntitle: 'Problem 375: Minimum of subsequences'\nchallengeType: 1\nforumTopicId: 302037\ndashedName: problem-375-minimum-of-subsequences\n--description--\nLet $S_n$ be an integer sequence produced with the following pseudo-random number generator:\n$$\\begin{align}\nS_0 & = 290\\,797 \\\\\nS_{n + 1} & = {S_n}^2\\bmod 50\\,515\\,093\n\\end{align}$$\nLet $A(i, j)$ be the minimum of the numbers $S_i, S_{i + 1}, \\ldots, S_j$ for $i ≤ j$. Let $M(N) = \\sum A(i, j)$ for $1 ≤ i ≤ j ≤ N$.\nWe can verify that $M(10) = 432\\,256\\,955$ and $M(10\\,000) = 3\\,264\\,567\\,774\\,119$.\nFind $M(2\\,000\\,000\\,000)$.\n--hints--\nminimumOfSubsequences() should return 7435327983715286000.\njs\nassert.strictEqual(minimumOfSubsequences(), 7435327983715286000);\n--seed--\n--seed-contents--\n```js\nfunction minimumOfSubsequences() {\nreturn true;\n}\nminimumOfSubsequences();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-375-minimum-of-subsequences.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c5249a40b3fe8a3962d4e211159df153",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-374-maximum-integer-partition-product.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e51000cf542c50fff6\ntitle: 'Problem 374: Maximum Integer Partition Product'\nchallengeType: 1\nforumTopicId: 302036\ndashedName: problem-374-maximum-integer-partition-product\n--description--\nAn integer partition of a number $n$ is a way of writing $n$ as a sum of positive integers.\nPartitions that differ only in the order of their summands are considered the same. A partition of $n$ into distinct parts is a partition of $n$ in which every part occurs at most once.\nThe partitions of 5 into distinct parts are:\n5, 4 + 1 and 3 + 2.\nLet $f(n)$ be the maximum product of the parts of any such partition of $n$ into distinct parts and let $m(n)$ be the number of elements of any such partition of $n$ with that product.\nSo $f(5) = 6$ and $m(5) = 2$.\nFor $n = 10$ the partition with the largest product is $10 = 2 + 3 + 5$, which gives $f(10) = 30$ and $m(10) = 3$. And their product, $f(10) \\times m(10) = 30 \\times 3 = 90$\nIt can be verified that $\\sum f(n) \\times m(n)$ for $1 ≤ n ≤ 100 = 1\\,683\\,550\\,844\\,462$.\nFind $\\sum f(n) \\times m(n)$ for $1 ≤ n ≤ {10}^{14}$. Give your answer modulo $982\\,451\\,653$, the 50 millionth prime.\n--hints--\nmaximumIntegerPartitionProduct() should return 334420941.\njs\nassert.strictEqual(maximumIntegerPartitionProduct(), 334420941);\n--seed--\n--seed-contents--\n```js\nfunction maximumIntegerPartitionProduct() {\nreturn true;\n}\nmaximumIntegerPartitionProduct();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-374-maximum-integer-partition-product.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d7c41bf4b0f6169756bc875f1500da73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-377-sum-of-digits-experience-13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e51000cf542c50fff8\ntitle: 'Problem 377: Sum of digits, experience 13'\nchallengeType: 1\nforumTopicId: 302039\ndashedName: problem-377-sum-of-digits-experience-13\n--description--\nThere are 16 positive integers that do not have a zero in their digits and that have a digital sum equal to 5, namely:\n5, 14, 23, 32, 41, 113, 122, 131, 212, 221, 311, 1112, 1121, 1211, 2111 and 11111.\nTheir sum is 17891.\nLet $f(n)$ be the sum of all positive integers that do not have a zero in their digits and have a digital sum equal to $n$.\nFind $\\displaystyle\\sum_{i=1}^{17} f(13^i)$. Give the last 9 digits as your answer.\n--hints--\nexperience13() should return 732385277.\njs\nassert.strictEqual(experience13(), 732385277);\n--seed--\n--seed-contents--\n```js\nfunction experience13() {\nreturn true;\n}\nexperience13();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 903,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-377-sum-of-digits-experience-13.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2343c170a872591f1d6c6f0f48f47a1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-379-least-common-multiple-count.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e81000cf542c50fffa\ntitle: 'Problem 379: Least common multiple count'\nchallengeType: 1\nforumTopicId: 302041\ndashedName: problem-379-least-common-multiple-count\n--description--\nLet $f(n)$ be the number of couples ($x$, $y$) with $x$ and $y$ positive integers, $x ≤ y$ and the least common multiple of $x$ and $y$ equal to $n$.\nLet $g$ be the summatory function of $f$, i.e.: $g(n) = \\sum f(i)$ for $1 ≤ i ≤ n$.\nYou are given that $g({10}^6) = 37\\,429\\,395$.\nFind $g({10}^{12})$.\n--hints--\nleastCommonMultipleCount() should return 132314136838185.\njs\nassert.strictEqual(leastCommonMultipleCount(), 132314136838185);\n--seed--\n--seed-contents--\n```js\nfunction leastCommonMultipleCount() {\nreturn true;\n}\nleastCommonMultipleCount();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 841,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-379-least-common-multiple-count.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c17b0585d133bccdef0f2253fcc6793c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-380-amazing-mazes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e81000cf542c50fffb\ntitle: 'Problem 380: Amazing Mazes!'\nchallengeType: 1\nforumTopicId: 302044\ndashedName: problem-380-amazing-mazes\n--description--\nAn $m×n$ maze is an $m×n$ rectangular grid with walls placed between grid cells such that there is exactly one path from the top-left square to any other square. The following are examples of a 9×12 maze and a 15×20 maze:\nLet $C(m, n)$ be the number of distinct $m×n$ mazes. Mazes which can be formed by rotation and reflection from another maze are considered distinct.\nIt can be verified that $C(1, 1) = 1$, $C(2, 2) = 4$, $C(3, 4) = 2415$, and $C(9, 12) = 2.5720\\mathrm{e}\\,46$ (in scientific notation rounded to 5 significant digits).\nFind $C(100, 500)$ and write your answer as a string in scientific notation rounded to 5 significant digits.\nWhen giving your answer, use a lowercase e to separate mantissa and exponent. E.g. if the answer is 1234567891011 then the answer format would be the string 1.2346e12.\n--hints--\namazingMazes() should return a string.\njs\nasset.isString(amazingMazes());\namazingMazes() should return the string 6.3202e25093.\njs\nassert.strictEqual(amazingMazes(), '6.3202e25093');\n--seed--\n--seed-contents--\n```js\nfunction amazingMazes() {\nreturn true;\n}\namazingMazes();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1615,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-380-amazing-mazes.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d5bb1251679b531188cf9621188cebca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-378-triangle-triples.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e61000cf542c50fff9\ntitle: 'Problem 378: Triangle Triples'\nchallengeType: 1\nforumTopicId: 302040\ndashedName: problem-378-triangle-triples\n--description--\nLet $T(n)$ be the $n^{\\text{th}}$ triangle number, so $T(n) = \\frac{n(n + 1)}{2}$.\nLet $dT(n)$ be the number of divisors of $T(n)$. E.g.: $T(7) = 28$ and $dT(7) = 6$.\nLet $Tr(n)$ be the number of triples ($i$, $j$, $k$) such that $1 ≤ i < j < k ≤ n$ and $dT(i) > dT(j) > dT(k)$. $Tr(20) = 14$, $Tr(100) = 5\\,772$ and $Tr(1000) = 11\\,174\\,776$.\nFind $Tr(60\\,000\\,000)$. Give the last 18 digits of your answer.\n--hints--\ntriangleTriples() should return 147534623725724700.\njs\nassert.strictEqual(triangleTriples(), 147534623725724700);\n--seed--\n--seed-contents--\n```js\nfunction triangleTriples() {\nreturn true;\n}\ntriangleTriples();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 903,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-378-triangle-triples.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d45359674779968d9a835630abbfc449",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-376-nontransitive-sets-of-dice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4e51000cf542c50fff7\ntitle: 'Problem 376: Nontransitive sets of dice'\nchallengeType: 1\nforumTopicId: 302038\ndashedName: problem-376-nontransitive-sets-of-dice\n--description--\nConsider the following set of dice with nonstandard pips:\n$$\\begin{array}{}\n\\text{Die A: } & 1 & 4 & 4 & 4 & 4 & 4 \\\\\n\\text{Die B: } & 2 & 2 & 2 & 5 & 5 & 5 \\\\\n\\text{Die C: } & 3 & 3 & 3 & 3 & 3 & 6 \\\\\n\\end{array}$$\nA game is played by two players picking a die in turn and rolling it The player who rolls the highest value wins If the first player picks die $A$ and the second player picks die $B$ we get\n$P(\\text{second player wins}) = \\frac{7}{12} > \\frac{1}{2}$\nIf the first player picks die $B$ and the second player picks die $C$ we get\n$P(\\text{second player wins}) = \\frac{7}{12} > \\frac{1}{2}$\nIf the first player picks die $C$ and the second player picks die $A$ we get\n$P(\\text{second player wins}) = \\frac{25}{36} > \\frac{1}{2}$\nSo whatever die the first player picks, the second player can pick another die and have a larger than 50% chance of winning A set of dice having this property is called a nontransitive set of dice We wish to investigate how many sets of nontransitive dice exist We will assume the following conditions:\nThere are three six-sided dice with each side having between 1 and $N$ pips, inclusive Dice with the same set of pips are equal, regardless of which side on the die the pips are located The same pip value may appear on multiple dice; if both players roll the same value neither player wins The sets of dice $\\{A, B, C\\}$, $\\{B, C, A\\}$ and $\\{C, A, B\\}$ are the same set",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-376-nontransitive-sets-of-dice.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5a68d364698ea1a674aa1593f137de4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-376-nontransitive-sets-of-dice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assume the following conditions: There are three six-sided dice with each side having between 1 and $N$ pips, inclusive Dice with the same set of pips are equal, regardless of which side on the die the pips are located The same pip value may appear on multiple dice; if both players roll the same value neither player wins The sets of dice $\\{A, B, C\\}$, $\\{B, C, A\\}$ and $\\{C, A, B\\}$ are the same setFor $N = 7$ we find there are 9780 such sets How many are there for $N = 30$ --hints--\nnontransitiveSetsOfDice() should return 973059630185670 js\nassert strictEqual(nontransitiveSetsOfDice(), 973059630185670);\n--seed--\n--seed-contents--\n```js\nfunction nontransitiveSetsOfDice() {\nreturn true;\n}\nnontransitiveSetsOfDice();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-376-nontransitive-sets-of-dice.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9994e476b529f3d1bf6661356538e7f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-381-prime-k-factorial.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ea1000cf542c50fffc\ntitle: 'Problem 381: (prime-k) factorial'\nchallengeType: 1\nforumTopicId: 302045\ndashedName: problem-381-prime-k-factorial\n--description--\nFor a prime $p$ let $S(p) = (\\sum (p - k)!)\\bmod (p)$ for $1 ≤ k ≤ 5$.\nFor example, if $p = 7$,\n$$(7 - 1)! + (7 - 2)! + (7 - 3)! + (7 - 4)! + (7 - 5)! = 6! + 5! + 4! + 3! + 2! = 720 + 120 + 24 + 6 + 2 = 872$$\nAs $872\\bmod (7) = 4$, $S(7) = 4$.\nIt can be verified that $\\sum S(p) = 480$ for $5 ≤ p < 100$.\nFind $\\sum S(p)$ for $5 ≤ p < {10}^8$.\n--hints--\nprimeKFactorial() should return 139602943319822.\njs\nassert.strictEqual(primeKFactorial(), 139602943319822);\n--seed--\n--seed-contents--\n```js\nfunction primeKFactorial() {\nreturn true;\n}\nprimeKFactorial();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-381-prime-k-factorial.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fa0b1fde71250e059f7cb048f002149e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-383-divisibility-comparison-between-factorials.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ed1000cf542c50ffff\ntitle: 'Problem 383: Divisibility comparison between factorials'\nchallengeType: 1\nforumTopicId: 302047\ndashedName: problem-383-divisibility-comparison-between-factorials\n--description--\nLet $f_5(n)$ be the largest integer $x$ for which $5^x$ divides $n$.\nFor example, $f_5(625\\,000) = 7$.\nLet $T_5(n)$ be the number of integers $i$ which satisfy $f_5((2 \\times i - 1)!) < 2 \\times f_5(i!)$ and $1 ≤ i ≤ n$.\nIt can be verified that $T_5({10}^3) = 68$ and $T_5({10}^9) = 2\\,408\\,210$.\nFind $T_5({10}^{18})$.\n--hints--\nfactorialDivisibilityComparison() should return 22173624649806.\njs\nassert.strictEqual(factorialDivisibilityComparison(), 22173624649806);\n--seed--\n--seed-contents--\n```js\nfunction factorialDivisibilityComparison() {\nreturn true;\n}\nfactorialDivisibilityComparison();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 918,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-383-divisibility-comparison-between-factorials.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7579302e0249711933916945b577bf00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-386-maximum-length-of-an-antichain.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ef1000cf542c510001\ntitle: 'Problem 386: Maximum length of an antichain'\nchallengeType: 1\nforumTopicId: 302050\ndashedName: problem-386-maximum-length-of-an-antichain\n--description--\nLet $n$ be an integer and $S(n)$ be the set of factors of $n$.\nA subset $A$ of $S(n)$ is called an antichain of $S(n)$ if $A$ contains only one element or if none of the elements of $A$ divides any of the other elements of $A$.\nFor example: $S(30) = \\{1, 2, 3, 5, 6, 10, 15, 30\\}$\n$\\{2, 5, 6\\}$ is not an antichain of $S(30)$.\n$\\{2, 3, 5\\}$ is an antichain of $S(30)$.\nLet $N(n)$ be the maximum length of an antichain of $S(n)$.\nFind $\\sum N(n)$ for $1 ≤ n ≤ {10}^8$\n--hints--\nmaximumLengthOfAntichain() should return 528755790.\njs\nassert.strictEqual(maximumLengthOfAntichain(), 528755790);\n--seed--\n--seed-contents--\n```js\nfunction maximumLengthOfAntichain() {\nreturn true;\n}\nmaximumLengthOfAntichain();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-386-maximum-length-of-an-antichain.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5860508cbedd50e5b91b8cf4e3640277",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-385-ellipses-inside-triangles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ee1000cf542c510000\ntitle: 'Problem 385: Ellipses inside triangles'\nchallengeType: 1\nforumTopicId: 302049\ndashedName: problem-385-ellipses-inside-triangles\n--description--\nFor any triangle $T$ in the plane, it can be shown that there is a unique ellipse with largest area that is completely inside $T$.\nFor a given $n$, consider triangles $T$ such that:\nthe vertices of $T$ have integer coordinates with absolute value $≤ n$, and\nthe foci1 of the largest-area ellipse inside $T$ are $(\\sqrt{13}, 0)$ and $(-\\sqrt{13}, 0)$.\nLet $A(n)$ be the sum of the areas of all such triangles.\nFor example, if $n = 8$, there are two such triangles. Their vertices are (-4,-3), (-4,3), (8,0) and (4,3), (4,-3), (-8,0), and the area of each triangle is 36. Thus $A(8) = 36 + 36 = 72$.\nIt can be verified that $A(10) = 252$, $A(100) = 34\\,632$ and $A(1000) = 3\\,529\\,008$.\nFind $A(1\\,000\\,000\\,000)$.\n1The foci (plural of focus) of an ellipse are two points $A$ and $B$ such that for every point $P$ on the boundary of the ellipse, $AP + PB$ is constant.\n--hints--\nellipsesInsideTriangles() should return 3776957309612154000.\njs\nassert.strictEqual(ellipsesInsideTriangles(), 3776957309612154000);\n--seed--\n--seed-contents--\n```js\nfunction ellipsesInsideTriangles() {\nreturn true;\n}\nellipsesInsideTriangles();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1706,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-385-ellipses-inside-triangles.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "457363ef401f48b47f6c7f2eabfb605c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-382-generating-polygons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4eb1000cf542c50fffd\ntitle: 'Problem 382: Generating polygons'\nchallengeType: 1\nforumTopicId: 302046\ndashedName: problem-382-generating-polygons\n--description--\nA polygon is a flat shape consisting of straight line segments that are joined to form a closed chain or circuit A polygon consists of at least three sides and does not self-intersect A set $S$ of positive numbers is said to generate a polygon $P$ if:\nno two sides of $P$ are the same length,\nthe length of every side of $P$ is in $S$, and\n$S$ contains no other value For example:\nThe set {3, 4, 5} generates a polygon with sides 3, 4, and 5 (a triangle) The set {6, 9, 11, 24} generates a polygon with sides 6, 9, 11, and 24 (a quadrilateral) The sets {1, 2, 3} and {2, 3, 4, 9} do not generate any polygon at all Consider the sequence $s$, defined as follows:\n$s_1 = 1$, $s_2 = 2$, $s_3 = 3$\n$s_n = s_{n - 1} + s_{n - 3}$ for $n > 3$ Let $U_n$ be the set $\\{s_1, s_2, \\ldots, s_n\\}$ For example, $U_{10} = \\{1, 2, 3, 4, 6, 9, 13, 19, 28, 41\\}$ Let $f(n)$ be the number of subsets of $U_n$ which generate at least one polygon For example, $f(5) = 7$, $f(10) = 501$ and $f(25) = 18\\,635\\,853$ Find the last 9 digits of $f({10}^{18})$ --hints--\ngeneratingPolygons() should return 697003956 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1550,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-382-generating-polygons.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "20e76baf2e60e828f03259bbfb5b75ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-382-generating-polygons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= s_{n - 1} + s_{n - 3}$ for $n > 3$ Let $U_n$ be the set $\\{s_1, s_2, \\ldots, s_n\\}$ For example, $U_{10} = \\{1, 2, 3, 4, 6, 9, 13, 19, 28, 41\\}$ Let $f(n)$ be the number of subsets of $U_n$ which generate at least one polygon For example, $f(5) = 7$, $f(10) = 501$ and $f(25) = 18\\,635\\,853$ Find the last 9 digits of $f({10}^{18})$ --hints-- generatingPolygons() should return 697003956 js assertstrictEqual(generatingPolygons(), 697003956);\n--seed--\n--seed-contents--\n```js\nfunction generatingPolygons() {\nreturn true;\n}\ngeneratingPolygons();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1550,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-382-generating-polygons.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "80fcd96b5a63d3733ab7f59204d070f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-387-harshad-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f11000cf542c510003\ntitle: 'Problem 387: Harshad Numbers'\nchallengeType: 1\nforumTopicId: 302051\ndashedName: problem-387-harshad-numbers\n--description--\nA Harshad or Niven number is a number that is divisible by the sum of its digits.\n201 is a Harshad number because it is divisible by 3 (the sum of its digits).\nWhen we truncate the last digit from 201, we get 20, which is a Harshad number.\nWhen we truncate the last digit from 20, we get 2, which is also a Harshad number.\nLet's call a Harshad number that, while recursively truncating the last digit, always results in a Harshad number a right truncatable Harshad number.\nAlso:\n$\\frac{201}{3} = 67$ which is prime.\nLet's call a Harshad number that, when divided by the sum of its digits, results in a prime a strong Harshad number.\nNow take the number 2011 which is prime. When we truncate the last digit from it we get 201, a strong Harshad number that is also right truncatable. Let's call such primes strong, right truncatable Harshad primes.\nYou are given that the sum of the strong, right truncatable Harshad primes less than 10000 is 90619.\nFind the sum of the strong, right truncatable Harshad primes less than ${10}^{14}$.\n--hints--\nharshadNumbers() should return 696067597313468.\njs\nassert.strictEqual(harshadNumbers(), 696067597313468);\n--seed--\n--seed-contents--\n```js\nfunction harshadNumbers() {\nreturn true;\n}\nharshadNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-387-harshad-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e2202a8ad994da2a2f3228cc57a168e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-388-distinct-lines.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f11000cf542c510002\ntitle: 'Problem 388: Distinct Lines'\nchallengeType: 1\nforumTopicId: 302052\ndashedName: problem-388-distinct-lines\n--description--\nConsider all lattice points ($a$, $b$, $c$) with $0 ≤ a, b, c ≤ N$.\nFrom the origin $O(0, 0, 0)$ all lines are drawn to the other lattice points. Let $D(N)$ be the number of distinct such lines.\nYou are given that $D(1\\,000\\,000) = 831\\,909\\,254\\,469\\,114\\,121$.\nFind $D({10}^{10})$. Give as your answer the first nine digits followed by the last nine digits.\n--hints--\ndistinctLines() should return 831907372805130000.\njs\nassert.strictEqual(distinctLines(), 831907372805130000);\n--seed--\n--seed-contents--\n```js\nfunction distinctLines() {\nreturn true;\n}\ndistinctLines();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 838,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-388-distinct-lines.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c98852af0e2b72ed6d1ce3a6cec43c42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-384-rudin-shapiro-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ed1000cf542c50fffe\ntitle: 'Problem 384: Rudin-Shapiro sequence'\nchallengeType: 1\nforumTopicId: 302048\ndashedName: problem-384-rudin-shapiro-sequence\n--description--\nDefine the sequence $a(n)$ as the number of adjacent pairs of ones in the binary expansion of $n$ (possibly overlapping) E g : $a(5) = a({101}_2) = 0$, $a(6) = a({110}_2) = 1$, $a(7) = a({111}_2) = 2$\nDefine the sequence $b(n) = {(-1)}^{a(n)}$ This sequence is called the Rudin-Shapiro sequence Also consider the summatory sequence of $b(n)$: $s(n) = \\displaystyle\\sum_{i = 0}^{n} b(i)$ The first couple of values of these sequences are:\n$$\\begin{array}{lr}\nn    & 0 & 1 & 2 &  3 & 4 & 5 &  6 & 7 \\\\\na(n) & 0 & 0 & 0 &  1 & 0 & 0 &  1 & 2 \\\\\nb(n) & 1 & 1 & 1 & -1 & 1 & 1 & -1 & 1 \\\\\ns(n) & 1 & 2 & 3 &  2 & 3 & 4 &  3 & 4\n\\end{array}$$\nThe sequence $s(n)$ has the remarkable property that all elements are positive and every positive integer $k$ occurs exactly $k$ times Define $g(t, c)$, with $1 ≤ c ≤ t$, as the index in $s(n)$ for which $t$ occurs for the $c$'th time in $s(n)$ E g : $g(3, 3) = 6$, $g(4, 2) = 7$ and $g(54321, 12345) = 1\\,220\\,847\\,710$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1751,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-384-rudin-shapiro-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d80e948f7215f8e97ce6e85162810418",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-384-rudin-shapiro-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "& 2 & 3 & 2 & 3 & 4 & 3 & 4 \\end{array}$$ The sequence $s(n)$ has the remarkable property that all elements are positive and every positive integer $k$ occurs exactly $k$ times Define $g(t, c)$, with $1 ≤ c ≤ t$, as the index in $s(n)$ for which $t$ occurs for the $c$'th time in $s(n)$ E g : $g(3, 3) = 6$, $g(4, 2) = 7$ and $g(54321, 12345) = 1\\,220\\,847\\,710$Let $F(n)$ be the fibonacci sequence defined by:\n$$\\begin{align}\n& F(0) = F(1) = 1 \\text{ and} \\\\\n& F(n) = F(n - 1) + F(n - 2) \\text{ for } n > 1 \\end{align}$$\nDefine $GF(t) = g(F(t), F(t - 1))$ Find $\\sum GF(t)$ for$ 2 ≤ t ≤ 45$ --hints--\nrudinShapiroSequence() should return 3354706415856333000 js\nassert strictEqual(rudinShapiroSequence(), 3354706415856333000);\n--seed--\n--seed-contents--\n```js\nfunction rudinShapiroSequence() {\nreturn true;\n}\nrudinShapiroSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1751,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-384-rudin-shapiro-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f734762869cb61416a31d008462a7fd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-389-platonic-dice.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f21000cf542c510004\ntitle: 'Problem 389: Platonic Dice'\nchallengeType: 1\nforumTopicId: 302053\ndashedName: problem-389-platonic-dice\n--description--\nAn unbiased single 4-sided die is thrown and its value, $T$, is noted.\n$T$ unbiased 6-sided dice are thrown and their scores are added together. The sum, $C$, is noted.\n$C$ unbiased 8-sided dice are thrown and their scores are added together. The sum, $O$, is noted.\n$O$ unbiased 12-sided dice are thrown and their scores are added together. The sum, $D$, is noted.\n$D$ unbiased 20-sided dice are thrown and their scores are added together. The sum, $I$, is noted.\nFind the variance of $I$, and give your answer rounded to 4 decimal places.\n--hints--\nplatonicDice() should return 2406376.3623.\njs\nassert.strictEqual(platonicDice(), 2406376.3623);\n--seed--\n--seed-contents--\n```js\nfunction platonicDice() {\nreturn true;\n}\nplatonicDice();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-389-platonic-dice.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff456cc69994ee419df5df7c77467931",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-390-triangles-with-non-rational-sides-and-integral-area.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f21000cf542c510005\ntitle: 'Problem 390: Triangles with non rational sides and integral area'\nchallengeType: 1\nforumTopicId: 302055\ndashedName: problem-390-triangles-with-non-rational-sides-and-integral-area\n--description--\nConsider the triangle with sides $\\sqrt{5}$, $\\sqrt{65}$ and $\\sqrt{68}$. It can be shown that this triangle has area 9.\n$S(n)$ is the sum of the areas of all triangles with sides $\\sqrt{1 + b^2}$, $\\sqrt{1 + c^2}$ and $\\sqrt{b^2 + c^2}$ (for positive integers $b$ and $c$) that have an integral area not exceeding $n$.\nThe example triangle has $b = 2$ and $c = 8$.\n$S({10}^6) = 18\\,018\\,206$.\nFind $S({10}^{10})$.\n--hints--\nnonRationalSidesAndIntegralArea() should return 2919133642971.\njs\nassert.strictEqual(nonRationalSidesAndIntegralArea(), 2919133642971);\n--seed--\n--seed-contents--\n```js\nfunction nonRationalSidesAndIntegralArea() {\nreturn true;\n}\nnonRationalSidesAndIntegralArea();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-390-triangles-with-non-rational-sides-and-integral-area.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9747d6b6eb76c40bc1be2ad2d2a80c02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-393-migrating-ants.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f61000cf542c510008\ntitle: 'Problem 393: Migrating ants'\nchallengeType: 1\nforumTopicId: 302058\ndashedName: problem-393-migrating-ants\n--description--\nAn $n × n$ grid of squares contains $n^2$ ants, one ant per square.\nAll ants decide to move simultaneously to an adjacent square (usually 4 possibilities, except for ants on the edge of the grid or at the corners).\nWe define $f(n)$ to be the number of ways this can happen without any ants ending on the same square and without any two ants crossing the same edge between two squares.\nYou are given that $f(4) = 88$.\nFind $f(10)$.\n--hints--\nmigratingAnts() should return 112398351350823100.\njs\nassert.strictEqual(migratingAnts(), 112398351350823100);\n--seed--\n--seed-contents--\n```js\nfunction migratingAnts() {\nreturn true;\n}\nmigratingAnts();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 900,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-393-migrating-ants.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9882ab8652f1d768cd157929832736d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-392-enmeshed-unit-circle.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f41000cf542c510007\ntitle: 'Problem 392: Enmeshed unit circle'\nchallengeType: 1\nforumTopicId: 302057\ndashedName: problem-392-enmeshed-unit-circle\n--description--\nA rectilinear grid is an orthogonal grid where the spacing between the gridlines does not have to be equidistant.\nAn example of such grid is logarithmic graph paper.\nConsider rectilinear grids in the Cartesian coordinate system with the following properties:\nThe gridlines are parallel to the axes of the Cartesian coordinate system.\nThere are $N + 2$ vertical and $N + 2$ horizontal gridlines. Hence there are $(N + 1) \\times (N + 1)$ rectangular cells.\nThe equations of the two outer vertical gridlines are $x = -1$ and $x = 1$.\nThe equations of the two outer horizontal gridlines are $y = -1$ and $y = 1$.\nThe grid cells are colored red if they overlap with the unit circle, black otherwise.\nFor this problem we would like you to find the positions of the remaining $N$ inner horizontal and $N$ inner vertical gridlines so that the area occupied by the red cells is minimized.\nE.g. here is a picture of the solution for $N = 10$:\nThe area occupied by the red cells for $N = 10$ rounded to 10 digits behind the decimal point is 3.3469640797.\nFind the positions for $N = 400$. Give as your answer the area occupied by the red cells rounded to 10 digits behind the decimal point.\n--hints--\nenmeshedUnitCircle() should return 3.1486734435.\njs\nassert.strictEqual(enmeshedUnitCircle(), 3.1486734435);\n--seed--\n--seed-contents--\n```js\nfunction enmeshedUnitCircle() {\nreturn true;\n}\nenmeshedUnitCircle();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1925,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-392-enmeshed-unit-circle.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8a3e29c6fba3950c029a1c44240eaad9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-394-eating-pie.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f71000cf542c510009\ntitle: 'Problem 394: Eating pie'\nchallengeType: 1\nforumTopicId: 302059\ndashedName: problem-394-eating-pie\n--description--\nJeff eats a pie in an unusual way.\nThe pie is circular. He starts with slicing an initial cut in the pie along a radius.\nWhile there is at least a given fraction $F$ of pie left, he performs the following procedure:\nHe makes two slices from the pie center to any point of what is remaining of the pie border, any point on the remaining pie border equally likely. This will divide the remaining pie into three pieces.\nGoing counterclockwise from the initial cut, he takes the first two pie pieces and eats them.\nWhen less than a fraction $F$ of pie remains, he does not repeat this procedure. Instead, he eats all of the remaining pie.\nFor $x ≥ 1$, let $E(x)$ be the expected number of times Jeff repeats the procedure above with $F = \\frac{1}{x}$. It can be verified that $E(1) = 1$, $E(2) ≈ 1.2676536759$, and $E(7.5) ≈ 2.1215732071$.\nFind $E(40)$ rounded to 10 decimal places behind the decimal point.\n--hints--\neatingPie() should return 3.2370342194.\njs\nassert.strictEqual(eatingPie(), 3.2370342194);\n--seed--\n--seed-contents--\n```js\nfunction eatingPie() {\nreturn true;\n}\neatingPie();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1597,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-394-eating-pie.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7b1ea5f663b3ce1d92bd853efa2c883a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-395-pythagorean-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f71000cf542c51000a\ntitle: 'Problem 395: Pythagorean tree'\nchallengeType: 1\nforumTopicId: 302060\ndashedName: problem-395-pythagorean-tree\n--description--\nThe Pythagorean tree is a fractal generated by the following procedure:\nStart with a unit square. Then, calling one of the sides its base (in the animation, the bottom side is the base):\nAttach a right triangle to the side opposite the base, with the hypotenuse coinciding with that side and with the sides in a 3-4-5 ratio. Note that the smaller side of the triangle must be on the 'right' side with respect to the base (see animation).\nAttach a square to each leg of the right triangle, with one of its sides coinciding with that leg.\nRepeat this procedure for both squares, considering as their bases the sides touching the triangle.\nThe resulting figure, after an infinite number of iterations, is the Pythagorean tree.\nIt can be shown that there exists at least one rectangle, whose sides are parallel to the largest square of the Pythagorean tree, which encloses the Pythagorean tree completely.\nFind the smallest area possible for such a bounding rectangle, and give your answer rounded to 10 decimal places.\n--hints--\npythagoreanTree() should return 28.2453753155.\njs\nassert.strictEqual(pythagoreanTree(), 28.2453753155);\n--seed--\n--seed-contents--\n```js\nfunction pythagoreanTree() {\nreturn true;\n}\npythagoreanTree();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1764,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-395-pythagorean-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3c6ab955607ff35b0ae908129ebdda4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-396-weak-goodstein-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f81000cf542c51000b\ntitle: 'Problem 396: Weak Goodstein sequence'\nchallengeType: 1\nforumTopicId: 302061\ndashedName: problem-396-weak-goodstein-sequence\n--description--\nFor any positive integer $n$, the $n$th weak Goodstein sequence $\\{g1, g2, g3, \\ldots\\}$ is defined as:\n$g_1 = n$\nfor $k > 1$, $g_k$ is obtained by writing $g_{k - 1}$ in base $k$, interpreting it as a base $k + 1$ number, and subtracting 1.\nThe sequence terminates when $g_k$ becomes 0.\nFor example, the $6$th weak Goodstein sequence is $\\{6, 11, 17, 25, \\ldots\\}$:\n$g_1 = 6$.\n$g_2 = 11$ since $6 = 110_2$, $110_3 = 12$, and $12 - 1 = 11$.\n$g_3 = 17$ since $11 = 102_3$, $102_4 = 18$, and $18 - 1 = 17$.\n$g_4 = 25$ since $17 = 101_4$, $101_5 = 26$, and $26 - 1 = 25$.\nand so on.\nIt can be shown that every weak Goodstein sequence terminates.\nLet $G(n)$ be the number of nonzero elements in the $n$th weak Goodstein sequence.\nIt can be verified that $G(2) = 3$, $G(4) = 21$ and $G(6) = 381$.\nIt can also be verified that $\\sum G(n) = 2517$ for $1 ≤ n < 8$.\nFind the last 9 digits of $\\sum G(n)$ for $1 ≤ n < 16$.\n--hints--\nweakGoodsteinSequence() should return 173214653.\njs\nassert.strictEqual(weakGoodsteinSequence(), 173214653);\n--seed--\n--seed-contents--\n```js\nfunction weakGoodsteinSequence() {\nreturn true;\n}\nweakGoodsteinSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-396-weak-goodstein-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "64d81b46d3e12388d43644f43facb61c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-397-triangle-on-parabola.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f91000cf542c51000c\ntitle: 'Problem 397: Triangle on parabola'\nchallengeType: 1\nforumTopicId: 302062\ndashedName: problem-397-triangle-on-parabola\n--description--\nOn the parabola $y = \\frac{x^2}{k}$, three points $A(a, \\frac{a^2}{k})$, $B(b, \\frac{b^2}{k})$ and $C(c, \\frac{c^2}{k})$ are chosen.\nLet $F(K, X)$ be the number of the integer quadruplets $(k, a, b, c)$ such that at least one angle of the triangle $ABC$ is 45°, with $1 ≤ k ≤ K$ and $-X ≤ a < b < c ≤ X$.\nFor example, $F(1, 10) = 41$ and $F(10, 100) = 12\\,492$.\nFind $F({10}^6, {10}^9)$.\n--hints--\ntriangleOnParabola() should return 141630459461893730.\njs\nassert.strictEqual(triangleOnParabola(), 141630459461893730);\n--seed--\n--seed-contents--\n```js\nfunction triangleOnParabola() {\nreturn true;\n}\ntriangleOnParabola();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 903,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-397-triangle-on-parabola.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b1b09090b0abefcc38c65444977f3d17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-391-hopping-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4f31000cf542c510006\ntitle: 'Problem 391: Hopping Game'\nchallengeType: 1\nforumTopicId: 302056\ndashedName: problem-391-hopping-game\n--description--\nLet $s_k$ be the number of 1’s when writing the numbers from 0 to $k$ in binary For example, writing 0 to 5 in binary, we have 0, 1, 10, 11, 100, 101 There are seven 1’s, so $s_5 = 7$ The sequence $S = \\{s_k : k ≥ 0\\}$ starts $\\{0, 1, 2, 4, 5, 7, 9, 12, \\ldots\\}$ A game is played by two players Before the game starts, a number $n$ is chosen A counter $c$ starts at 0 At each turn, the player chooses a number from 1 to $n$ (inclusive) and increases $c$ by that number The resulting value of $c$ must be a member of $S$ If there are no more valid moves, the player loses For example, with $n = 5$ and starting with $c = 0$:\nPlayer 1 chooses 4, so $c$ becomes $0 + 4 = 4$ Player 2 chooses 5, so $c$ becomes $4 + 5 = 9$ Player 1 chooses 3, so $c$ becomes $9 + 3 = 12$ etc Note that $c$ must always belong to $S$, and each player can increase $c$ by at most $n$ Let $M(n)$ be the highest number the first player can choose at her first turn to force a win, and $M(n) = 0$ if there is no such move For example, $M(2) = 2$, $M(7) = 1$ and $M(20) = 4$ It can be verified $\\sum M{(n)}^3 = 8150$ for $1 ≤ n ≤ 20$ Find $\\sum M{(n)}^3$ for $1 ≤ n ≤ 1000$ --hints--\nhoppingGame() should return 61029882288 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1638,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-391-hopping-game.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fe1f94db7b36d437afc3a2a3be33d886",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-391-hopping-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "$c$ by at most $n$ Let $M(n)$ be the highest number the first player can choose at her first turn to force a win, and $M(n) = 0$ if there is no such move For example, $M(2) = 2$, $M(7) = 1$ and $M(20) = 4$ It can be verified $\\sum M{(n)}^3 = 8150$ for $1 ≤ n ≤ 20$ Find $\\sum M{(n)}^3$ for $1 ≤ n ≤ 1000$ --hints-- hoppingGame() should return 61029882288 js assertstrictEqual(hoppingGame(), 61029882288);\n--seed--\n--seed-contents--\n```js\nfunction hoppingGame() {\nreturn true;\n}\nhoppingGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1638,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-391-hopping-game.md",
      "source_type": "git_repo"
    },
    "token_count": 185,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "71d4e851ad13f09a540fd455a9f5d6e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-398-cutting-rope.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4fa1000cf542c51000d\ntitle: 'Problem 398: Cutting rope'\nchallengeType: 1\nforumTopicId: 302063\ndashedName: problem-398-cutting-rope\n--description--\nInside a rope of length $n$, $n - 1$ points are placed with distance 1 from each other and from the endpoints. Among these points, we choose $m - 1$ points at random and cut the rope at these points to create $m$ segments.\nLet $E(n, m)$ be the expected length of the second-shortest segment. For example, $E(3, 2) = 2$ and $E(8, 3) = \\frac{16}{7}$. Note that if multiple segments have the same shortest length the length of the second-shortest segment is defined as the same as the shortest length.\nFind $E({10}^7, 100)$. Give your answer rounded to 5 decimal places behind the decimal point.\n--hints--\ncuttingRope() should return 2010.59096.\njs\nassert.strictEqual(cuttingRope(), 2010.59096);\n--seed--\n--seed-contents--\n```js\nfunction cuttingRope() {\nreturn true;\n}\ncuttingRope();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1031,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-398-cutting-rope.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d6caf44544f5010b7b8dbc5eb66025d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-400-fibonacci-tree-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4fe1000cf542c510010\ntitle: 'Problem 400: Fibonacci tree game'\nchallengeType: 1\nforumTopicId: 302067\ndashedName: problem-400-fibonacci-tree-game\n--description--\nA Fibonacci tree is a binary tree recursively defined as:\n$T(0)$ is the empty tree.\n$T(1)$ is the binary tree with only one node.\n$T(k)$ consists of a root node that has $T(k - 1)$ and $T(k - 2)$ as children.\nOn such a tree two players play a take-away game. On each turn a player selects a node and removes that node along with the subtree rooted at that node. The player who is forced to take the root node of the entire tree loses.\nHere are the winning moves of the first player on the first turn for $T(k)$ from $k = 1$ to $k = 6$.\nLet $f(k)$ be the number of winning moves of the first player (i.e. the moves for which the second player has no winning strategy) on the first turn of the game when this game is played on $T(k)$.\nFor example, $f(5) = 1$ and $f(10) = 17$.\nFind $f(10000)$. Give the last 18 digits of your answer.\n--hints--\nfibonacciTreeGame() should return 438505383468410600.\njs\nassert.strictEqual(fibonacciTreeGame(), 438505383468410600);\n--seed--\n--seed-contents--\n```js\nfunction fibonacciTreeGame() {\nreturn true;\n}\nfibonacciTreeGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1625,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-400-fibonacci-tree-game.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8c75663618d8394884289b935667cea8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-402-integer-valued-polynomials.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4ff1000cf542c510011\ntitle: 'Problem 402: Integer-valued polynomials'\nchallengeType: 1\nforumTopicId: 302070\ndashedName: problem-402-integer-valued-polynomials\n--description--\nIt can be shown that the polynomial $n^4 + 4n^3 + 2n^2 + 5n$ is a multiple of 6 for every integer $n$. It can also be shown that 6 is the largest integer satisfying this property.\nDefine $M(a, b, c)$ as the maximum $m$ such that $n^4 + an^3 + bn^2 + cn$ is a multiple of $m$ for all integers $n$. For example, $M(4, 2, 5) = 6$.\nAlso, define $S(N)$ as the sum of $M(a, b, c)$ for all $0 < a, b, c ≤ N$.\nWe can verify that $S(10) = 1\\,972$ and $S(10\\,000) = 2\\,024\\,258\\,331\\,114$.\nLet $F_k$ be the Fibonacci sequence:\n$F_0 = 0$, $F_1 = 1$ and\n$F_k = F_{k - 1} + F_{k - 2}$ for $k ≥ 2$.\nFind the last 9 digits of $\\sum S(F_k)$ for $2 ≤ k ≤ 1\\,234\\,567\\,890\\,123$.\n--hints--\nintegerValuedPolynomials() should return 356019862.\njs\nassert.strictEqual(integerValuedPolynomials(), 356019862);\n--seed--\n--seed-contents--\n```js\nfunction integerValuedPolynomials() {\nreturn true;\n}\nintegerValuedPolynomials();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1207,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-402-integer-valued-polynomials.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "70d173a8049f2b71efe9413f36ec5bac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-401-sum-of-squares-of-divisors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4fd1000cf542c51000f\ntitle: 'Problem 401: Sum of squares of divisors'\nchallengeType: 1\nforumTopicId: 302069\ndashedName: problem-401-sum-of-squares-of-divisors\n--description--\nThe divisors of 6 are 1, 2, 3 and 6.\nThe sum of the squares of these numbers is $1 + 4 + 9 + 36 = 50$.\nLet $\\sigma_2(n)$ represent the sum of the squares of the divisors of $n$. Thus $\\sigma_2(6) = 50$.\nLet $\\Sigma_2$ represent the summatory function of $\\sigma_2$, that is $\\Sigma_2(n) = \\sum \\sigma_2(i)$ for $i=1$ to $n$. The first 6 values of $\\Sigma_2$ are: 1, 6, 16, 37, 63 and 113.\nFind $\\Sigma_2({10}^{15})$ modulo ${10}^9$.\n--hints--\nsumOfSquaresDivisors() should return 281632621.\njs\nassert.strictEqual(sumOfSquaresDivisors(), 281632621);\n--seed--\n--seed-contents--\n```js\nfunction sumOfSquaresDivisors() {\nreturn true;\n}\nsumOfSquaresDivisors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 935,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-401-sum-of-squares-of-divisors.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "53e0ded7c55a6690e480626631afa7a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-403-lattice-points-enclosed-by-parabola-and-line.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5001000cf542c510013\ntitle: 'Problem 403: Lattice points enclosed by parabola and line'\nchallengeType: 1\nforumTopicId: 302071\ndashedName: problem-403-lattice-points-enclosed-by-parabola-and-line\n--description--\nFor integers $a$ and $b$, we define $D(a, b)$ as the domain enclosed by the parabola $y = x^2$ and the line $y = ax + b: D(a, b) = \\{ (x, y) | x^2 ≤ y ≤ ax + b \\}$.\n$L(a, b)$ is defined as the number of lattice points contained in $D(a, b)$. For example, $L(1, 2) = 8$ and $L(2, -1) = 1$.\nWe also define $S(N)$ as the sum of $L(a, b)$ for all the pairs ($a$, $b$) such that the area of $D(a, b)$ is a rational number and $|a|,|b| ≤ N$.\nWe can verify that $S(5) = 344$ and $S(100) = 26\\,709\\,528$.\nFind $S({10}^{12})$. Give your answer $\\bmod {10}^8$.\n--hints--\nlatticePoints() should return 18224771.\njs\nassert.strictEqual(latticePoints(), 18224771);\n--seed--\n--seed-contents--\n```js\nfunction latticePoints() {\nreturn true;\n}\nlatticePoints();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1069,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-403-lattice-points-enclosed-by-parabola-and-line.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "24b655a23f3100683b8c43aa992d042a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-404-crisscross-ellipses.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5001000cf542c510012\ntitle: 'Problem 404: Crisscross Ellipses'\nchallengeType: 1\nforumTopicId: 302072\ndashedName: problem-404-crisscross-ellipses\n--description--\n$E_a$ is an ellipse with an equation of the form $x^2 + 4y^2 = 4a^2$.\n$E_a'$ is the rotated image of $E_a$ by $θ$ degrees counterclockwise around the origin $O(0, 0)$ for $0° < θ < 90°$.\n$b$ is the distance to the origin of the two intersection points closest to the origin and $c$ is the distance of the two other intersection points.\nWe call an ordered triplet ($a$, $b$, $c$) a canonical ellipsoidal triplet if $a$, $b$ and $c$ are positive integers.\nFor example, (209, 247, 286) is a canonical ellipsoidal triplet.\nLet $C(N)$ be the number of distinct canonical ellipsoidal triplets ($a$, $b$, $c$) for $a ≤ N$.\nIt can be verified that $C({10}^3) = 7$, $C({10}^4) = 106$ and $C({10}^6) = 11\\,845$.\nFind $C({10}^{17})$.\n--hints--\ncrisscrossEllipses() should return 1199215615081353.\njs\nassert.strictEqual(crisscrossEllipses(), 1199215615081353);\n--seed--\n--seed-contents--\n```js\nfunction crisscrossEllipses() {\nreturn true;\n}\ncrisscrossEllipses();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-404-crisscross-ellipses.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f78335b8a665fe154eb215c2059abca9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-399-squarefree-fibonacci-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f4fc1000cf542c51000e\ntitle: 'Problem 399: Squarefree Fibonacci Numbers'\nchallengeType: 1\nforumTopicId: 302064\ndashedName: problem-399-squarefree-fibonacci-numbers\n--description--\nThe first 15 fibonacci numbers are:\n$$1,1,2,3,5,8,13,21,34,55,89,144,233,377,610 $$\nIt can be seen that 8 and 144 are not squarefree: 8 is divisible by 4 and 144 is divisible by 4 and by 9 So the first 13 squarefree fibonacci numbers are:\n$$1,1,2,3,5,13,21,34,55,89,233,377 \\text{ and } 610 $$\nThe $200$th squarefree fibonacci number is: 971183874599339129547649988289594072811608739584170445 The last sixteen digits of this number are: 1608739584170445 and in scientific notation this number can be written as 9 7e53 Find the $100\\,000\\,000$th squarefree fibonacci number Give as your answer as a string with its last sixteen digits followed by a comma followed by the number in scientific notation (rounded to one digit after the decimal point) For the $200$th squarefree number the answer would have been: 1608739584170445,9 7e53\nNote: For this problem, assume that for every prime $p$, the first fibonacci number divisible by $p$ is not divisible by $p^2$ (this is part of Wall's conjecture) This has been verified for primes $≤ 3 \\times {10}^{15}$, but has not been proven in general If it happens that the conjecture is false, then the accepted answer to this problem isn't guaranteed to be the $100\\,000\\,000$th squarefree fibonacci number, rather it represents only a lower bound for that number --hints--\nsquarefreeFibonacciNumbers() should return a string js\nasset isString(squarefreeFibonacciNumbers());\nsquarefreeFibonacciNumbers() should return the string 1508395636674243,6 5e27330467 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2026,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-399-squarefree-fibonacci-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2c5d171d699e36450e6453ac479450dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-399-squarefree-fibonacci-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "$p^2$ (this is part of Wall's conjecture) This has been verified for primes $≤ 3 \\times {10}^{15}$, but has not been proven in general If it happens that the conjecture is false, then the accepted answer to this problem isn't guaranteed to be the $100\\,000\\,000$th squarefree fibonacci number, rather it represents only a lower bound for that number --hints-- squarefreeFibonacciNumbers() should return a string js asset isString(squarefreeFibonacciNumbers()); squarefreeFibonacciNumbers() should return the string 1508395636674243,6 5e27330467 js assertstrictEqual(squarefreeFibonacciNumbers(), '1508395636674243,6 5e27330467');\n--seed--\n--seed-contents--\n```js\nfunction squarefreeFibonacciNumbers() {\nreturn true;\n}\nsquarefreeFibonacciNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2026,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-399-squarefree-fibonacci-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f524c0bbf953d8ce36f268398d265762",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-405-a-rectangular-tiling.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5021000cf542c510014\ntitle: 'Problem 405: A rectangular tiling'\nchallengeType: 1\nforumTopicId: 302073\ndashedName: problem-405-a-rectangular-tiling\n--description--\nWe wish to tile a rectangle whose length is twice its width.\nLet $T(0)$ be the tiling consisting of a single rectangle.\nFor $n > 0$, let $T(n)$ be obtained from $T( n- 1)$ by replacing all tiles in the following manner:\nThe following animation demonstrates the tilings $T(n)$ for $n$ from 0 to 5:\nLet $f(n)$ be the number of points where four tiles meet in $T(n)$. For example, $f(1) = 0$, $f(4) = 82$ and $f({10}^9)\\bmod {17}^7 = 126\\,897\\,180$.\nFind $f({10}^k)$ for $k = {10}^{18}$, give your answer modulo ${17}^7$.\n--hints--\nrectangularTiling() should return 237696125.\njs\nassert.strictEqual(rectangularTiling(), 237696125);\n--seed--\n--seed-contents--\n```js\nfunction rectangularTiling() {\nreturn true;\n}\nrectangularTiling();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1527,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-405-a-rectangular-tiling.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75dbbf59937ff928f5aed85c7795bf1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-407-idempotents.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5041000cf542c510016\ntitle: 'Problem 407: Idempotents'\nchallengeType: 1\nforumTopicId: 302075\ndashedName: problem-407-idempotents\n--description--\nIf we calculate $a^2\\bmod 6$ for $0 ≤ a ≤ 5$ we get: 0, 1, 4, 3, 4, 1.\nThe largest value of a such that $a^2 ≡ a\\bmod 6$ is $4$.\nLet's call $M(n)$ the largest value of $a < n$ such that $a^2 ≡ a (\\text{mod } n)$. So $M(6) = 4$.\nFind $\\sum M(n)$ for $1 ≤ n ≤ {10}^7$.\n--hints--\nidempotents() should return 39782849136421.\njs\nassert.strictEqual(idempotents(), 39782849136421);\n--seed--\n--seed-contents--\n```js\nfunction idempotents() {\nreturn true;\n}\nidempotents();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 727,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-407-idempotents.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8a3f6e6b8e091de828c020efa7071b87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-408-admissible-paths-through-a-grid.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5091000cf542c51001b\ntitle: 'Problem 408: Admissible paths through a grid'\nchallengeType: 1\nforumTopicId: 302076\ndashedName: problem-408-admissible-paths-through-a-grid\n--description--\nLet's call a lattice point ($x$, $y$) inadmissible if $x$, $y$ and $x + y$ are all positive perfect squares.\nFor example, (9, 16) is inadmissible, while (0, 4), (3, 1) and (9, 4) are not.\nConsider a path from point ($x_1$, $y_1$) to point ($x_2$, $y_2$) using only unit steps north or east. Let's call such a path admissible if none of its intermediate points are inadmissible.\nLet $P(n)$ be the number of admissible paths from (0, 0) to ($n$, $n$). It can be verified that $P(5) = 252$, $P(16) = 596\\,994\\,440$ and $P(1\\,000)\\bmod 1\\,000\\,000\\,007 = 341\\,920\\,854$.\nFind $P(10\\,000\\,000)\\bmod 1\\,000\\,000\\,007$.\n--hints--\nadmissiblePaths() should return 299742733.\njs\nassert.strictEqual(admissiblePaths(), 299742733);\n--seed--\n--seed-contents--\n```js\nfunction admissiblePaths() {\nreturn true;\n}\nadmissiblePaths();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1118,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-408-admissible-paths-through-a-grid.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c0714971f3bb821ddc99d10cd0fc8fa6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-409-nim-extreme.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5061000cf542c510017\ntitle: 'Problem 409: Nim Extreme'\nchallengeType: 1\nforumTopicId: 302077\ndashedName: problem-409-nim-extreme\n--description--\nLet $n$ be a positive integer. Consider nim positions where:\nThere are $n$ non-empty piles.\nEach pile has size less than $2^n$.\nNo two piles have the same size.\nLet $W(n)$ be the number of winning nim positions satisfying the above conditions (a position is winning if the first player has a winning strategy).\nFor example, $W(1) = 1$, $W(2) = 6$, $W(3) = 168$, $W(5) = 19\\,764\\,360$ and $W(100)\\bmod 1\\,000\\,000\\,007 = 384\\,777\\,056$.\nFind $W(10\\,000\\,000)\\bmod 1\\,000\\,000\\,007$.\n--hints--\nnimExtreme() should return 253223948.\njs\nassert.strictEqual(nimExtreme(), 253223948);\n--seed--\n--seed-contents--\n```js\nfunction nimExtreme() {\nreturn true;\n}\nnimExtreme();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 932,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-409-nim-extreme.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "642f7bf021539e77bfef8fb93a648a2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-410-circle-and-tangent-line.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5071000cf542c510018\ntitle: 'Problem 410: Circle and tangent line'\nchallengeType: 1\nforumTopicId: 302079\ndashedName: problem-410-circle-and-tangent-line\n--description--\nLet $C$ be the circle with radius $r$, $x^2 + y^2 = r^2$. We choose two points $P(a, b)$ and $Q(-a, c)$ so that the line passing through $P$ and $Q$ is tangent to $C$.\nFor example, the quadruplet $(r, a, b, c) = (2, 6, 2, -7)$ satisfies this property.\nLet $F(R, X)$ be the number of the integer quadruplets $(r, a, b, c)$ with this property, and with $0 < r ≤ R$ and $0 < a ≤ X$.\nWe can verify that $F(1, 5) = 10$, $F(2, 10) = 52$ and $F(10, 100) = 3384$.\nFind $F({10}^8, {10}^9) + F({10}^9, {10}^8)$.\n--hints--\ncircleAndTangentLine() should return 799999783589946600.\njs\nassert.strictEqual(circleAndTangentLine(), 799999783589946600);\n--seed--\n--seed-contents--\n```js\nfunction circleAndTangentLine() {\nreturn true;\n}\ncircleAndTangentLine();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1026,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-410-circle-and-tangent-line.md",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c22d9d00dc1fc6c4d6a0b105b90cd84d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-412-gnomon-numbering.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5081000cf542c51001a\ntitle: 'Problem 412: Gnomon numbering'\nchallengeType: 1\nforumTopicId: 302081\ndashedName: problem-412-gnomon-numbering\n--description--\nFor integers $m$, $n$ ($0 ≤ n < m$), let $L(m, n)$ be an $m×m$ grid with the top-right $n×n$ grid removed.\nFor example, $L(5, 3)$ looks like this:\nWe want to number each cell of $L(m, n)$ with consecutive integers 1, 2, 3, ... such that the number in every cell is smaller than the number below it and to the left of it.\nFor example, here are two valid numberings of $L(5, 3)$:\nLet $LC(m, n)$ be the number of valid numberings of $L(m, n)$. It can be verified that $LC(3, 0) = 42$, $LC(5, 3) = 250\\,250$, $LC(6, 3) = 406\\,029\\,023\\,400$ and $LC(10, 5)\\bmod 76\\,543\\,217 = 61\\,251\\,715$.\nFind $LC(10\\,000, 5\\,000)\\bmod 76\\,543\\,217$.\n--hints--\ngnomonNumbering() should return 38788800.\njs\nassert.strictEqual(gnomonNumbering(), 38788800);\n--seed--\n--seed-contents--\n```js\nfunction gnomonNumbering() {\nreturn true;\n}\ngnomonNumbering();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-412-gnomon-numbering.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d6cddc2974543ed2e8609ba79f1171d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-411-uphill-paths.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5081000cf542c510019\ntitle: 'Problem 411: Uphill paths'\nchallengeType: 1\nforumTopicId: 302080\ndashedName: problem-411-uphill-paths\n--description--\nLet $n$ be a positive integer. Suppose there are stations at the coordinates $(x, y) = (2^i\\bmod n, 3^i\\bmod n)$ for $0 ≤ i ≤ 2n$. We will consider stations with the same coordinates as the same station.\nWe wish to form a path from (0, 0) to ($n$, $n$) such that the $x$ and $y$ coordinates never decrease.\nLet $S(n)$ be the maximum number of stations such a path can pass through.\nFor example, if $n = 22$, there are 11 distinct stations, and a valid path can pass through at most 5 stations. Therefore, $S(22) = 5$. The case is illustrated below, with an example of an optimal path:\nIt can also be verified that $S(123) = 14$ and $S(10\\,000) = 48$.\nFind $\\sum S(k^5)$ for $1 ≤ k ≤ 30$.\n--hints--\nuphillPaths() should return 9936352.\njs\nassert.strictEqual(uphillPaths(), 9936352);\n--seed--\n--seed-contents--\n```js\nfunction uphillPaths() {\nreturn true;\n}\nuphillPaths();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-411-uphill-paths.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b1a6f0ed9d1ac3622fe3d213db1d8297",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-406-guessing-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5021000cf542c510015\ntitle: 'Problem 406: Guessing Game'\nchallengeType: 1\nforumTopicId: 302074\ndashedName: problem-406-guessing-game\n--description--\nWe are trying to find a hidden number selected from the set of integers {1, 2, , $n$} by asking questions Each number (question) we ask, we get one of three possible answers:\n\"Your guess is lower than the hidden number\" (and you incur a cost of a), or\n\"Your guess is higher than the hidden number\" (and you incur a cost of b), or\n\"Yes, that's it \" (and the game ends) Given the value of $n$, $a$, and $b$, an optimal strategy minimizes the total cost for the worst possible case For example, if $n = 5$, $a = 2$, and $b = 3$, then we may begin by asking \"2\" as our first question If we are told that 2 is higher than the hidden number (for a cost of $b = 3$), then we are sure that \"1\" is the hidden number (for a total cost of 3) If we are told that 2 is lower than the hidden number (for a cost of $a = 2$), then our next question will be \"4\" If we are told that 4 is higher than the hidden number (for a cost of $b = 3$), then we are sure that \"3\" is the hidden number (for a total cost of $2 + 3 = \\color{blue}{\\mathbf{5}}$) If we are told that 4 is lower than the hidden number (for a cost of $a = 2$), then we are sure that \"5\" is the hidden number (for a total cost of $2 + 2 = \\color{blue}{\\mathbf{4}}$) Thus, the worst-case cost achieved by this strategy is 5 It can also be shown that this is the lowest worst-case cost that can be achieved So, in fact, we have just described an optimal strategy for the given values of $n$, $a$, and $b$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2724,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-406-guessing-game.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a2feaea3eb6290242f082f5e246b008f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-406-guessing-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "than the hidden number (for a cost of $a = 2$), then we are sure that \"5\" is the hidden number (for a total cost of $2 + 2 = \\color{blue}{\\mathbf{4}}$) Thus, the worst-case cost achieved by this strategy is 5 It can also be shown that this is the lowest worst-case cost that can be achieved So, in fact, we have just described an optimal strategy for the given values of $n$, $a$, and $b$Let $C(n, a, b)$ be the worst-case cost achieved by an optimal strategy for the given values of $n$, $a$, and $b$ Here are a few examples:\n$$\\begin{align}\n& C(5, 2, 3) = 5 \\\\\n& C(500, \\sqrt{2}, \\sqrt{3}) = 13 220\\,731\\,97\\ldots \\\\\n& C(20\\,000, 5, 7) = 82 \\\\\n& C(2\\,000\\,000, √5, √7) = 49 637\\,559\\,55\\ldots \\\\\n\\end{align}$$\nLet $F_k$ be the Fibonacci numbers: $F_k = F_{k - 1} + F_{k - 2}$ with base cases $F_1 = F_2 = 1$ Find $\\displaystyle\\sum_{k = 1}^{30} C({10}^{12}, \\sqrt{k}, \\sqrt{F_k})$, and give your answer rounded to 8 decimal places behind the decimal point --hints--\nguessingGame() should return 36813 12757207 js\nassert strictEqual(guessingGame(), 36813 12757207);\n--seed--\n--seed-contents--\n```js\nfunction guessingGame() {\nreturn true;\n}\nguessingGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2724,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-406-guessing-game.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "89e9cbd5f44e8efd371e36dc970f9096",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-413-one-child-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f50a1000cf542c51001c\ntitle: 'Problem 413: One-child Numbers'\nchallengeType: 1\nforumTopicId: 302082\ndashedName: problem-413-one-child-numbers\n--description--\nWe say that a $d$-digit positive number (no leading zeros) is a one-child number if exactly one of its sub-strings is divisible by $d$.\nFor example, 5671 is a 4-digit one-child number. Among all its sub-strings 5, 6, 7, 1, 56, 67, 71, 567, 671 and 5671, only 56 is divisible by 4.\nSimilarly, 104 is a 3-digit one-child number because only 0 is divisible by 3. 1132451 is a 7-digit one-child number because only 245 is divisible by 7.\nLet $F(N)$ be the number of the one-child numbers less than $N$. We can verify that $F(10) = 9$, $F({10}^3) = 389$ and $F({10}^7) = 277\\,674$.\nFind $F({10}^{19})$.\n--hints--\noneChildNumbers() should return 3079418648040719.\njs\nassert.strictEqual(oneChildNumbers(), 3079418648040719);\n--seed--\n--seed-contents--\n```js\nfunction oneChildNumbers() {\nreturn true;\n}\noneChildNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-413-one-child-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "04cfa301323daf47ddf4b5496d0e2b50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-415-titanic-sets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f50c1000cf542c51001e\ntitle: 'Problem 415: Titanic sets'\nchallengeType: 1\nforumTopicId: 302084\ndashedName: problem-415-titanic-sets\n--description--\nA set of lattice points $S$ is called a titanic set if there exists a line passing through exactly two points in $S$.\nAn example of a titanic set is $S = \\{(0, 0), (0, 1), (0, 2), (1, 1), (2, 0), (1, 0)\\}$, where the line passing through (0, 1) and (2, 0) does not pass through any other point in $S$.\nOn the other hand, the set {(0, 0), (1, 1), (2, 2), (4, 4)} is not a titanic set since the line passing through any two points in the set also passes through the other two.\nFor any positive integer $N$, let $T(N)$ be the number of titanic sets $S$ whose every point ($x$, $y$) satisfies $0 ≤ x$, $y ≤ N$. It can be verified that $T(1) = 11$, $T(2) = 494$, $T(4) = 33\\,554\\,178$, $T(111)\\bmod {10}^8 = 13\\,500\\,401$ and $T({10}^5)\\bmod {10}^8 = 63\\,259\\,062$.\nFind $T({10}^{11})\\bmod {10}^8$.\n--hints--\ntitanicSets() should return 55859742.\njs\nassert.strictEqual(titanicSets(), 55859742);\n--seed--\n--seed-contents--\n```js\nfunction titanicSets() {\nreturn true;\n}\ntitanicSets();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1242,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-415-titanic-sets.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "229565812ea98c037cc2ef166acea703",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-416-a-frogs-trip.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f50e1000cf542c510020\ntitle: 'Problem 416: A frog''s trip'\nchallengeType: 1\nforumTopicId: 302085\ndashedName: problem-416-a-frogs-trip\n--description--\nA row of $n$ squares contains a frog in the leftmost square. By successive jumps the frog goes to the rightmost square and then back to the leftmost square. On the outward trip he jumps one, two or three squares to the right, and on the homeward trip he jumps to the left in a similar manner. He cannot jump outside the squares. He repeats the round-trip travel $m$ times.\nLet $F(m, n)$ be the number of the ways the frog can travel so that at most one square remains unvisited.\nFor example, $F(1, 3) = 4$, $F(1, 4) = 15$, $F(1, 5) = 46$, $F(2, 3) = 16$ and $F(2, 100)\\bmod {10}^9 = 429\\,619\\,151$.\nFind the last 9 digits of $F(10, {10}^{12})$.\n--hints--\nfrogsTrip() should return 898082747.\njs\nassert.strictEqual(frogsTrip(), 898082747);\n--seed--\n--seed-contents--\n```js\nfunction frogsTrip() {\nreturn true;\n}\nfrogsTrip();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-416-a-frogs-trip.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2c59a1ea3eeaa2c03811a20286951c93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-417-reciprocal-cycles-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f50d1000cf542c51001f\ntitle: 'Problem 417: Reciprocal cycles II'\nchallengeType: 1\nforumTopicId: 302086\ndashedName: problem-417-reciprocal-cycles-ii\n--description--\nA unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:\n$$\\begin{align}\n& \\frac{1}{2}  = 0.5 \\\\\n& \\frac{1}{3}  = 0.(3) \\\\\n& \\frac{1}{4}  = 0.25 \\\\\n& \\frac{1}{5}  = 0.2 \\\\\n& \\frac{1}{6}  = 0.1(6) \\\\\n& \\frac{1}{7}  = 0.(142857) \\\\\n& \\frac{1}{8}  = 0.125 \\\\\n& \\frac{1}{9}  = 0.(1) \\\\\n& \\frac{1}{10} = 0.1 \\\\\n\\end{align}$$\nWhere $0.1(6)$ means $0.166666\\ldots$, and has a 1-digit recurring cycle. It can be seen that $\\frac{1}{7}$ has a 6-digit recurring cycle.\nUnit fractions whose denominator has no other prime factors than 2 and/or 5 are not considered to have a recurring cycle. We define the length of the recurring cycle of those unit fractions as 0.\nLet $L(n)$ denote the length of the recurring cycle of $\\frac{1}{n}$. You are given that $\\sum L(n)$ for $3 ≤ n ≤ 1\\,000\\,000$ equals $55\\,535\\,191\\,115$.\nFind $\\sum L(n)$ for $3 ≤ n ≤ 100\\,000\\,000$.\n--hints--\nreciprocalCyclesTwo() should return 446572970925740.\njs\nassert.strictEqual(reciprocalCyclesTwo(), 446572970925740);\n--seed--\n--seed-contents--\n```js\nfunction reciprocalCyclesTwo() {\nreturn true;\n}\nreciprocalCyclesTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-417-reciprocal-cycles-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e7a723cbf3c66b8840a7d4df8d6bf53a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-418-factorisation-triples.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f50f1000cf542c510021\ntitle: 'Problem 418: Factorisation triples'\nchallengeType: 1\nforumTopicId: 302087\ndashedName: problem-418-factorisation-triples\n--description--\nLet $n$ be a positive integer. An integer triple ($a$, $b$, $c$) is called a factorisation triple of $n$ if:\n$1 ≤ a ≤ b ≤ c$\n$a \\times b \\times c = n$.\nDefine $f(n)$ to be $a + b + c$ for the factorisation triple ($a$, $b$, $c$) of $n$ which minimises $\\frac{c}{a}$. One can show that this triple is unique.\nFor example, $f(165) = 19$, $f(100\\,100) = 142$ and $f(20!) = 4\\,034\\,872$.\nFind $f(43!)$.\n--hints--\nfactorisationTriples() should return 1177163565297340400.\njs\nassert.strictEqual(factorisationTriples(), 1177163565297340400);\n--seed--\n--seed-contents--\n```js\nfunction factorisationTriples() {\nreturn true;\n}\nfactorisationTriples();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 924,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-418-factorisation-triples.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4287ba44b65b2c16d68beaeae1ece248",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-419-look-and-say-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5101000cf542c510022\ntitle: 'Problem 419: Look and say sequence'\nchallengeType: 1\nforumTopicId: 302088\ndashedName: problem-419-look-and-say-sequence\n--description--\nThe look and say sequence goes 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, ...\nThe sequence starts with 1 and all other members are obtained by describing the previous member in terms of consecutive digits.\nIt helps to do this out loud:\n1 is 'one one' $→ 11$\n11 is 'two ones' $→ 21$\n21 is 'one two and one one' $→ 1211$\n1211 is 'one one, one two and two ones' $→ 111221$\n111221 is 'three ones, two twos and one one' $→ 312211$\n...\nDefine $A(n)$, $B(n)$ and $C(n)$ as the number of ones, twos and threes in the $n$'th element of the sequence respectively. One can verify that $A(40) = 31\\,254$, $B(40) = 20\\,259$ and $C(40) = 11\\,625$.\nFind $A(n)$, $B(n)$ and $C(n)$ for $n = {10}^{12}$. Give your answer modulo $2^{30}$ as a string and separate your values for $A$, $B$ and $C$ by a comma. E.g. for $n = 40$ the answer would be 31254,20259,11625.\n--hints--\nlookAndSaySequence() should return a string.\njs\nassert.isString(lookAndSaySequence());\nlookAndSaySequence() should return the string 998567458,1046245404,43363922.\njs\nassert.strictEqual(lookAndSaySequence(), '998567458,1046245404,43363922');\n--seed--\n--seed-contents--\n```js\nfunction lookAndSaySequence() {\nreturn true;\n}\nlookAndSaySequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1515,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-419-look-and-say-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8703d60e6dd538bbc815098a235a4bf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-421-prime-factors-of-n151.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5131000cf542c510024\ntitle: 'Problem 421: Prime factors of n^15+1'\nchallengeType: 1\nforumTopicId: 302091\ndashedName: problem-421-prime-factors-of-n151\n--description--\nNumbers of the form $n^{15} + 1$ are composite for every integer $n > 1$.\nFor positive integers $n$ and $m$ let $s(n, m)$ be defined as the sum of the distinct prime factors of $n^{15} + 1$ not exceeding $m$.\nE.g. $2^{15} + 1 = 3 × 3 × 11 × 331$.\nSo $s(2, 10) = 3$ and $s(2, 1000) = 3 + 11 + 331 = 345$.\nAlso ${10}^{15} + 1 = 7 × 11 × 13 × 211 × 241 × 2161 × 9091$.\nSo $s(10, 100) = 31$ and $s(10, 1000) = 483$.\nFind $\\sum s(n, {10}^8)$ for $1 ≤ n ≤ {10}^{11}$.\n--hints--\nprimeFactorsOfN15Plus1() should return 2304215802083466200.\njs\nassert.strictEqual(primeFactorsOfN15Plus1(), 2304215802083466200);\n--seed--\n--seed-contents--\n```js\nfunction primeFactorsOfN15Plus1() {\nreturn true;\n}\nprimeFactorsOfN15Plus1();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-421-prime-factors-of-n151.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9beb6945cf71ab508d98315a645a7409",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-420-2x2-positive-integer-matrix.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5111000cf542c510023\ntitle: 'Problem 420: 2x2 positive integer matrix'\nchallengeType: 1\nforumTopicId: 302090\ndashedName: problem-420-2x2-positive-integer-matrix\n--description--\nA positive integer matrix is a matrix whose elements are all positive integers.\nSome positive integer matrices can be expressed as a square of a positive integer matrix in two different ways. Here is an example:\n$$\\begin{pmatrix}\n40 & 12 \\\\\n48 & 40\n\\end{pmatrix} =\n{\\begin{pmatrix}\n2 & 3 \\\\\n12 & 2\n\\end{pmatrix}}^2 =\n{\\begin{pmatrix}\n6 & 1 \\\\\n4 & 6\n\\end{pmatrix}}^2$$\nWe define $F(N)$ as the number of the 2x2 positive integer matrices which have a trace less than N and which can be expressed as a square of a positive integer matrix in two different ways.\nWe can verify that $F(50) = 7$ and $F(1000) = 1019$.\nFind $F({10}^7)$.\n--hints--\npositiveIntegerMatrix() should return 145159332.\njs\nassert.strictEqual(positiveIntegerMatrix(), 145159332);\n--seed--\n--seed-contents--\n```js\nfunction positiveIntegerMatrix() {\nreturn true;\n}\npositiveIntegerMatrix();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1155,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-420-2x2-positive-integer-matrix.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9fd8e4197128dac436a62992218df0cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-414-kaprekar-constant.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f50b1000cf542c51001d\ntitle: 'Problem 414: Kaprekar constant'\nchallengeType: 1\nforumTopicId: 302083\ndashedName: problem-414-kaprekar-constant\n--description--\n6174 is a remarkable number; if we sort its digits in increasing order and subtract that number from the number you get when you sort the digits in decreasing order, we get $7641 - 1467 = 6174$ Even more remarkable is that if we start from any 4 digit number and repeat this process of sorting and subtracting, we'll eventually end up with 6174 or immediately with 0 if all digits are equal This also works with numbers that have less than 4 digits if we pad the number with leading zeroes until we have 4 digits E g let's start with the number 0837:\n$$\\begin{align}\n& 8730 - 0378 = 8352 \\\\\n& 8532 - 2358 = 6174\n\\end{align}$$\n6174 is called the Kaprekar constant The process of sorting and subtracting and repeating this until either 0 or the Kaprekar constant is reached is called the Kaprekar routine We can consider the Kaprekar routine for other bases and number of digits Unfortunately, it is not guaranteed a Kaprekar constant exists in all cases; either the routine can end up in a cycle for some input numbers or the constant the routine arrives at can be different for different input numbers However, it can be shown that for 5 digits and a base $b = 6t + 3 ≠ 9$, a Kaprekar constant exists E g base 15: ${(10, 4, 14, 9, 5)}_{15}$\nbase 21: $(14, 6, 20, 13, 7)_{21}$\nDefine $C_b$ to be the Kaprekar constant in base $b$ for 5 digits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-414-kaprekar-constant.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "10632b0ca1427d5cb2049ec5d100456e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-414-kaprekar-constant.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "can end up in a cycle for some input numbers or the constant the routine arrives at can be different for different input numbers However, it can be shown that for 5 digits and a base $b = 6t + 3 ≠ 9$, a Kaprekar constant exists E g base 15: ${(10, 4, 14, 9, 5)}_{15}$ base 21: $(14, 6, 20, 13, 7)_{21}$ Define $C_b$ to be the Kaprekar constant in base $b$ for 5 digitsDefine the function $sb(i)$ to be:\n0 if $i = C_b$ or if $i$ written in base $b$ consists of 5 identical digits\nthe number of iterations it takes the Kaprekar routine in base $b$ to arrive at $C_b$, otherwise\nNote that we can define $sb(i)$ for all integers $i < b^5$ If $i$ written in base $b$ takes less than 5 digits, the number is padded with leading zero digits until we have 5 digits before applying the Kaprekar routine Define $S(b)$ as the sum of $sb(i)$ for $0 < i < b^5$ E g $S(15) = 5\\,274\\,369$ $S(111) = 400\\,668\\,930\\,299$\nFind the sum of $S(6k + 3)$ for $2 ≤ k ≤ 300$ Give the last 18 digits as your answer --hints--\nkaprekarConstant() should return 552506775824935500 js\nassert strictEqual(kaprekarConstant(), 552506775824935500);\n--seed--\n--seed-contents--\n```js\nfunction kaprekarConstant() {\nreturn true;\n}\nkaprekarConstant();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-414-kaprekar-constant.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3a6221412a884a7097b559b05924bfa7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-425-prime-connection.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5151000cf542c510028\ntitle: 'Problem 425: Prime connection'\nchallengeType: 1\nforumTopicId: 302095\ndashedName: problem-425-prime-connection\n--description--\nTwo positive numbers $A$ and $B$ are said to be connected (denoted by \"$A ↔ B$\") if one of these conditions holds:\n$A$ and $B$ have the same length and differ in exactly one digit; for example, $123 ↔ 173$.\nAdding one digit to the left of $A$ (or $B$) makes $B$ (or $A$); for example, $23 ↔ 223$ and $123 ↔ 23$.\nWe call a prime $P$ a 2's relative if there exists a chain of connected primes between 2 and $P$ and no prime in the chain exceeds $P$.\nFor example, 127 is a 2's relative. One of the possible chains is shown below:\n$$2 ↔ 3 ↔ 13 ↔ 113 ↔ 103 ↔ 107 ↔ 127$$\nHowever, 11 and 103 are not 2's relatives.\nLet $F(N)$ be the sum of the primes $≤ N$ which are not 2's relatives. We can verify that $F({10}^3) = 431$ and $F({10}^4) = 78\\,728$.\nFind $F({10}^7)$.\n--hints--\nprimeConnection() should return 46479497324.\njs\nassert.strictEqual(primeConnection(), 46479497324);\n--seed--\n--seed-contents--\n```js\nfunction primeConnection() {\nreturn true;\n}\nprimeConnection();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-425-prime-connection.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e87bb83835ce10cd60c8f4b4279b5a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-422-sequence-of-points-on-a-hyperbola.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5131000cf542c510025\ntitle: 'Problem 422: Sequence of points on a hyperbola'\nchallengeType: 1\nforumTopicId: 302092\ndashedName: problem-422-sequence-of-points-on-a-hyperbola\n--description--\nLet $H$ be the hyperbola defined by the equation $12x^2 + 7xy - 12y^2 = 625$ Next, define $X$ as the point (7, 1) It can be seen that $X$ is in $H$ Now we define a sequence of points in $H, \\{P_i : i ≥ 1\\}$, as:\n$P_1 = (13, \\frac{61}{4})$ $P_2 = (\\frac{-43}{6}, -4)$ For $i > 2$, $P_i$ is the unique point in $H$ that is different from $P_{i - 1}$ and such that line $P_iP_{i - 1}$ is parallel to line $P_{i - 2}X$ It can be shown that $P_i$ is well-defined, and that its coordinates are always rational You are given that $P_3 = (\\frac{-19}{2}, \\frac{-229}{24})$, $P_4 = (\\frac{1267}{144}, \\frac{-37}{12})$ and $P_7 = (\\frac{17\\,194\\,218\\,091}{143\\,327\\,232}, \\frac{274\\,748\\,766\\,781}{1\\,719\\,926\\,784})$ Find $P_n$ for $n = {11}^{14}$ in the following format: If $P_n = (\\frac{a}{b}, \\frac{c}{d})$ where the fractions are in lowest terms and the denominators are positive, then the answer is $(a + b + c + d)\\bmod 1\\,000\\,000\\,007$ For $n = 7$, the answer would have been: $806\\,236\\,837$ --hints--\nsequenceOfPointsOnHyperbola() should return 92060460 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-422-sequence-of-points-on-a-hyperbola.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "142d272ee6607684efc83dceb5e9f1e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-422-sequence-of-points-on-a-hyperbola.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are always rational You are given that $P_3 = (\\frac{-19}{2}, \\frac{-229}{24})$, $P_4 = (\\frac{1267}{144}, \\frac{-37}{12})$ and $P_7 = (\\frac{17\\,194\\,218\\,091}{143\\,327\\,232}, \\frac{274\\,748\\,766\\,781}{1\\,719\\,926\\,784})$ Find $P_n$ for $n = {11}^{14}$ in the following format: If $P_n = (\\frac{a}{b}, \\frac{c}{d})$ where the fractions are in lowest terms and the denominators are positive, then the answer is $(a + b + c + d)\\bmod 1\\,000\\,000\\,007$ For $n = 7$, the answer would have been: $806\\,236\\,837$ --hints-- sequenceOfPointsOnHyperbola() should return 92060460 js assertstrictEqual(sequenceOfPointsOnHyperbola(), 92060460);\n--seed--\n--seed-contents--\n```js\nfunction sequenceOfPointsOnHyperbola() {\nreturn true;\n}\nsequenceOfPointsOnHyperbola();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-422-sequence-of-points-on-a-hyperbola.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5e03239d245784992179dfb156bd13fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-423-consecutive-die-throws.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5141000cf542c510027\ntitle: 'Problem 423: Consecutive die throws'\nchallengeType: 1\nforumTopicId: 302093\ndashedName: problem-423-consecutive-die-throws\n--description--\nLet $n$ be a positive integer A 6-sided die is thrown $n$ times Let $c$ be the number of pairs of consecutive throws that give the same value For example, if $n = 7$ and the values of the die throws are (1, 1, 5, 6, 6, 6, 3), then the following pairs of consecutive throws give the same value:\n$$\\begin{align}\n& (\\underline{1}, \\underline{1}, 5, 6, 6, 6, 3) \\\\\n& (1, 1, 5, \\underline{6}, \\underline{6}, 6, 3) \\\\\n& (1, 1, 5, 6, \\underline{6}, \\underline{6}, 3)\n\\end{align}$$\nTherefore, $c = 3$ for (1, 1, 5, 6, 6, 6, 3) Define $C(n)$ as the number of outcomes of throwing a 6-sided die $n$ times such that $c$ does not exceed $π(n)$ 1\nFor example, $C(3) = 216$, $C(4) = 1290$, $C(11) = 361\\,912\\,500$ and $C(24) = 4\\,727\\,547\\,363\\,281\\,250\\,000$ Define $S(L)$ as $\\sum C(n)$ for $1 ≤ n ≤ L$ For example, $S(50)\\bmod 1\\,000\\,000\\,007 = 832\\,833\\,871$ Find $S(50\\,000\\,000)\\bmod 1\\,000\\,000\\,007$ 1 $π$ denotes the prime-counting function, i e $π(n)$ is the number of primes $≤ n$ --hints--\nconsecutiveDieThrows() should return 653972374 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-423-consecutive-die-throws.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0be5ae14176b279d8ac11751f370da68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-423-consecutive-die-throws.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "number of outcomes of throwing a 6-sided die $n$ times such that $c$ does not exceed $π(n)$ 1 For example, $C(3) = 216$, $C(4) = 1290$, $C(11) = 361\\,912\\,500$ and $C(24) = 4\\,727\\,547\\,363\\,281\\,250\\,000$ Define $S(L)$ as $\\sum C(n)$ for $1 ≤ n ≤ L$ For example, $S(50)\\bmod 1\\,000\\,000\\,007 = 832\\,833\\,871$ Find $S(50\\,000\\,000)\\bmod 1\\,000\\,000\\,007$ 1 $π$ denotes the prime-counting function, i e $π(n)$ is the number of primes $≤ n$ --hints-- consecutiveDieThrows() should return 653972374 js assertstrictEqual(consecutiveDieThrows(), 653972374);\n--seed--\n--seed-contents--\n```js\nfunction consecutiveDieThrows() {\nreturn true;\n}\nconsecutiveDieThrows();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-423-consecutive-die-throws.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4a2b09b3abf09300b3f2d5486d637515",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-427-n-sequences.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5181000cf542c51002a\ntitle: 'Problem 427: n-sequences'\nchallengeType: 1\nforumTopicId: 302097\ndashedName: problem-427-n-sequences\n--description--\nA sequence of integers $S = \\{s_i\\}$ is called an $n$-sequence if it has $n$ elements and each element $s_i$ satisfies $1 ≤ s_i ≤ n$. Thus there are $n^n$ distinct $n$-sequences in total.\nFor example, the sequence $S = \\{1, 5, 5, 10, 7, 7, 7, 2, 3, 7\\}$ is a 10-sequence.\nFor any sequence $S$, let $L(S)$ be the length of the longest contiguous subsequence of $S$ with the same value. For example, for the given sequence $S$ above, $L(S) = 3$, because of the three consecutive 7's.\nLet $f(n) = \\sum L(S)$ for all $n$-sequences $S$.\nFor example, $f(3) = 45$, $f(7) = 1\\,403\\,689$ and $f(11) = 481\\,496\\,895\\,121$.\nFind $f(7\\,500\\,000)\\bmod 1\\,000\\,000\\,009$.\n--hints--\nnSequences() should return 97138867.\njs\nassert.strictEqual(nSequences(), 97138867);\n--seed--\n--seed-contents--\n```js\nfunction nSequences() {\nreturn true;\n}\nnSequences();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-427-n-sequences.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ca54b9f4e25e861e11cda8a97489aeb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-429-sum-of-squares-of-unitary-divisors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5191000cf542c51002c\ntitle: 'Problem 429: Sum of squares of unitary divisors'\nchallengeType: 1\nforumTopicId: 302099\ndashedName: problem-429-sum-of-squares-of-unitary-divisors\n--description--\nA unitary divisor $d$ of a number $n$ is a divisor of $n$ that has the property $gcd(d, \\frac{n}{d}) = 1$.\nThe unitary divisors of $4! = 24$ are 1, 3, 8 and 24.\nThe sum of their squares is $12 + 32 + 82 + 242 = 650$.\nLet $S(n)$ represent the sum of the squares of the unitary divisors of $n$. Thus $S(4!) = 650$.\nFind $S(100\\,000\\,000!)$ modulo $1\\,000\\,000\\,009$.\n--hints--\nsumSquaresOfUnitaryDivisors() should return 98792821.\njs\nassert.strictEqual(sumSquaresOfUnitaryDivisors(), 98792821);\n--seed--\n--seed-contents--\n```js\nfunction sumSquaresOfUnitaryDivisors() {\nreturn true;\n}\nsumSquaresOfUnitaryDivisors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 914,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-429-sum-of-squares-of-unitary-divisors.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4867bad7c61cf6f30cf0101343796798",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-428-necklace-of-circles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5191000cf542c51002b\ntitle: 'Problem 428: Necklace of Circles'\nchallengeType: 1\nforumTopicId: 302098\ndashedName: problem-428-necklace-of-circles\n--description--\nLet $a$, $b$ and $c$ be positive numbers Let $W$, $X$, $Y$, $Z$ be four collinear points where $|WX| = a$, $|XY| = b$, $|YZ| = c$ and $|WZ| = a + b + c$ Let $C_{\\text{in}}$ be the circle having the diameter $XY$ Let $C_{\\text{out}}$ be the circle having the diameter $WZ$ The triplet ($a$, $b$, $c$) is called a necklace triplet if you can place $k ≥ 3$ distinct circles $C_1, C_2, \\ldots, C_k$ such that:\n$C_i$ has no common interior points with any $C_j$ for $1 ≤ i$, $j ≤ k$ and $i ≠ j$,\n$C_i$ is tangent to both $C_{\\text{in}}$ and $C_{\\text{out}}$ for $1 ≤ i ≤ k$,\n$C_i$ is tangent to $C_{i + 1}$ for $1 ≤ i < k$, and\n$C_k$ is tangent to $C_1$ For example, (5, 5, 5) and (4, 3, 21) are necklace triplets, while it can be shown that (2, 2, 5) is not Let $T(n)$ be the number of necklace triplets $(a, b, c)$ such that $a$, $b$ and $c$ are positive integers, and $b ≤ n$ For example, $T(1) = 9$, $T(20) = 732$ and $T(3\\,000) = 438\\,106$ Find $T(1\\,000\\,000\\,000)$ --hints--\nnecklace(1000000000) should return 747215561862 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-428-necklace-of-circles.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a15534c037509f721796acd397c37ead",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-428-necklace-of-circles.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "< k$, and $C_k$ is tangent to $C_1$ For example, (5, 5, 5) and (4, 3, 21) are necklace triplets, while it can be shown that (2, 2, 5) is not Let $T(n)$ be the number of necklace triplets $(a, b, c)$ such that $a$, $b$ and $c$ are positive integers, and $b ≤ n$ For example, $T(1) = 9$, $T(20) = 732$ and $T(3\\,000) = 438\\,106$ Find $T(1\\,000\\,000\\,000)$ --hints-- necklace(1000000000) should return 747215561862 js assertstrictEqual(necklace(1000000000), 747215561862);\n--seed--\n--seed-contents--\n```js\nfunction necklace(n) {\nreturn true;\n}\nnecklace(1000000000)\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-428-necklace-of-circles.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "52c35fd19dfceb9c2be15c698a2f28eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-430-range-flips.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f51a1000cf542c51002d\ntitle: 'Problem 430: Range flips'\nchallengeType: 1\nforumTopicId: 302101\ndashedName: problem-430-range-flips\n--description--\n$N$ disks are placed in a row, indexed 1 to $N$ from left to right.\nEach disk has a black side and white side. Initially all disks show their white side.\nAt each turn, two, not necessarily distinct, integers $A$ and $B$ between 1 and $N$ (inclusive) are chosen uniformly at random. All disks with an index from $A$ to $B$ (inclusive) are flipped.\nThe following example shows the case $N = 8$. At the first turn $A = 5$ and $B = 2$, and at the second turn $A = 4$ and $B = 6$.\nLet $E(N, M)$ be the expected number of disks that show their white side after $M$ turns. We can verify that $E(3, 1) = \\frac{10}{9}$, $E(3, 2) = \\frac{5}{3}$, $E(10, 4) ≈ 5.157$ and $E(100, 10) ≈ 51.893$.\nFind $E({10}^{10}, 4000)$. Give your answer rounded to 2 decimal places behind the decimal point.\n--hints--\nrangeFlips() should return 5000624921.38.\njs\nassert.strictEqual(rangeFlips(), 5000624921.38);\n--seed--\n--seed-contents--\n```js\nfunction rangeFlips() {\nreturn true;\n}\nrangeFlips();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-430-range-flips.md",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "03cc4a92159e47c637684b3323a7f6d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-432-totient-sum.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f51e1000cf542c510030\ntitle: 'Problem 432: Totient sum'\nchallengeType: 1\nforumTopicId: 302103\ndashedName: problem-432-totient-sum\n--description--\nLet $S(n, m) = \\sum φ(n × i)$ for $1 ≤ i ≤ m$. ($φ$ is Euler's totient function)\nYou are given that $S(510\\,510, {10}^6) = 45\\,480\\,596\\,821\\,125\\,120$.\nFind $S(510\\,510, {10}^{11})$. Give the last 9 digits of your answer.\n--hints--\ntotientSum() should return 754862080.\njs\nassert.strictEqual(totientSum(), 754862080);\n--seed--\n--seed-contents--\n```js\nfunction totientSum() {\nreturn true;\n}\ntotientSum();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 667,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-432-totient-sum.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6dbf2522373162472dd44ad7b2a6e1c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-426-box-ball-system.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5171000cf542c510029\ntitle: 'Problem 426: Box-ball system'\nchallengeType: 1\nforumTopicId: 302096\ndashedName: problem-426-box-ball-system\n--description--\nConsider an infinite row of boxes Some of the boxes contain a ball For example, an initial configuration of 2 consecutive occupied boxes followed by 2 empty boxes, 2 occupied boxes, 1 empty box, and 2 occupied boxes can be denoted by the sequence (2, 2, 2, 1, 2), in which the number of consecutive occupied and empty boxes appear alternately A turn consists of moving each ball exactly once according to the following rule: Transfer the leftmost ball which has not been moved to the nearest empty box to its right After one turn the sequence (2, 2, 2, 1, 2) becomes (2, 2, 1, 2, 3) as can be seen below; note that we begin the new sequence starting at the first occupied box A system like this is called a Box-Ball System or BBS for short It can be shown that after a sufficient number of turns, the system evolves to a state where the consecutive numbers of occupied boxes is invariant In the example below, the consecutive numbers of occupied boxes evolves to [1, 2, 3]; we shall call this the final state We define the sequence $\\{t_i\\}$:\n$$\\begin{align}\n& s_0 = 290\\,797 \\\\\n& s_{k + 1} = {s_k}^2\\bmod 50\\,515\\,093 \\\\\n& t_k = (s_k\\bmod 64) + 1\n\\end{align}$$\nStarting from the initial configuration $(t_0, t_1, \\ldots, t_{10})$, the final state becomes [1, 3, 10, 24, 51, 75] Starting from the initial configuration $(t_0, t_1, \\ldots, t_{10\\,000\\,000})$, find the final state Give as your answer the sum of the squares of the elements of the final state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-426-box-ball-system.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6101a769700f112569720173d8f53668",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-426-box-ball-system.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "state We define the sequence $\\{t_i\\}$: $$\\begin{align} & s_0 = 290\\,797 \\\\ & s_{k + 1} = {s_k}^2\\bmod 50\\,515\\,093 \\\\ & t_k = (s_k\\bmod 64) + 1 \\end{align}$$ Starting from the initial configuration $(t_0, t_1, \\ldots, t_{10})$, the final state becomes [1, 3, 10, 24, 51, 75] Starting from the initial configuration $(t_0, t_1, \\ldots, t_{10\\,000\\,000})$, find the final state Give as your answer the sum of the squares of the elements of the final stateFor example, if the final state is [1, 2, 3] then $14 (= 1^2 + 2^2 + 3^2)$ is your answer --hints--\nboxBallSystem() should return 31591886008 js\nassert strictEqual(boxBallSystem(), 31591886008);\n--seed--\n--seed-contents--\n```js\nfunction boxBallSystem() {\nreturn true;\n}\nboxBallSystem();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-426-box-ball-system.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "04bea6202b7040f45940697771bcc30d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-433-steps-in-euclids-algorithm.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f51d1000cf542c51002f\ntitle: 'Problem 433: Steps in Euclid''s algorithm'\nchallengeType: 1\nforumTopicId: 302104\ndashedName: problem-433-steps-in-euclids-algorithm\n--description--\nLet $E(x_0, y_0)$ be the number of steps it takes to determine the greatest common divisor of $x_0$ and $y_0$ with Euclid's algorithm. More formally:\n$$\\begin{align}\n& x_1 = y_0, y_1 = x_0\\bmod y_0 \\\\\n& x_n = y_{n - 1}, y_n = x_{n - 1}\\bmod y_{n - 1}\n\\end{align}$$\n$E(x_0, y_0)$ is the smallest $n$ such that $y_n = 0$.\nWe have $E(1, 1) = 1$, $E(10, 6) = 3$ and $E(6, 10) = 4$.\nDefine $S(N)$ as the sum of $E(x, y)$ for $1 ≤ x$, $y ≤ N$.\nWe have $S(1) = 1$, $S(10) = 221$ and $S(100) = 39\\,826$.\nFind $S(5 \\times {10}^6)$.\n--hints--\nstepsInEuclidsAlgorithm() should return 326624372659664.\njs\nassert.strictEqual(stepsInEuclidsAlgorithm(), 326624372659664);\n--seed--\n--seed-contents--\n```js\nfunction stepsInEuclidsAlgorithm() {\nreturn true;\n}\nstepsInEuclidsAlgorithm();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1064,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-433-steps-in-euclids-algorithm.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "82ad414eab61bb3a3d75c92e1a10ecb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-435-polynomials-of-fibonacci-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5201000cf542c510032\ntitle: 'Problem 435: Polynomials of Fibonacci numbers'\nchallengeType: 1\nforumTopicId: 302106\ndashedName: problem-435-polynomials-of-fibonacci-numbers\n--description--\nThe Fibonacci numbers $\\{f_n, n ≥ 0\\}$ are defined recursively as $f_n = f_{n - 1} + f_{n - 2}$ with base cases $f_0 = 0$ and $f_1 = 1$.\nDefine the polynomials $\\{F_n, n ≥ 0\\}$ as $F_n(x) = \\displaystyle\\sum_{i = 0}^n f_ix^i$.\nFor example, $F_7(x) = x + x^2 + 2x^3 + 3x^4 + 5x^5 + 8x^6 + 13x^7$, and $F_7(11) = 268\\,357\\,683$.\nLet $n = {10}^{15}$. Find the sum $\\displaystyle\\sum_{x = 0}^{100} F_n(x)$ and give your answer modulo $1\\,307\\,674\\,368\\,000 \\, (= 15!)$.\n--hints--\npolynomialsOfFibonacciNumbers() should return 252541322550.\njs\nassert.strictEqual(polynomialsOfFibonacciNumbers(), 252541322550);\n--seed--\n--seed-contents--\n```js\nfunction polynomialsOfFibonacciNumbers() {\nreturn true;\n}\npolynomialsOfFibonacciNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1036,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-435-polynomials-of-fibonacci-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f68ef3ed592a310e345ca1ab111013d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-431-square-space-silo.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f51b1000cf542c51002e\ntitle: 'Problem 431: Square Space Silo'\nchallengeType: 1\nforumTopicId: 302102\ndashedName: problem-431-square-space-silo\n--description--\nFred the farmer arranges to have a new storage silo installed on his farm and having an obsession for all things square he is absolutely devastated when he discovers that it is circular Quentin, the representative from the company that installed the silo, explains that they only manufacture cylindrical silos, but he points out that it is resting on a square base Fred is not amused and insists that it is removed from his property Quick thinking Quentin explains that when granular materials are delivered from above a conical slope is formed and the natural angle made with the horizontal is called the angle of repose For example if the angle of repose, $\\alpha = 30°$, and grain is delivered at the center of the silo then a perfect cone will form towards the top of the cylinder In the case of this silo, which has a diameter of 6m, the amount of space wasted would be approximately 32 648388556 m3 However, if grain is delivered at a point on the top which has a horizontal distance of $x$ metres from the center then a cone with a strangely curved and sloping base is formed He shows Fred a picture We shall let the amount of space wasted in cubic metres be given by $V(x)$ If $x = 1 114\\,785\\,284$, which happens to have three squared decimal places, then the amount of space wasted, $V(1 114\\,785\\,284) \\approx 36$ Given the range of possible solutions to this problem there is exactly one other option: $V(2 511\\,167\\,869) \\approx 49$ It would be like knowing that the square is king of the silo, sitting in splendid glory on top of your grain Fred's eyes light up with delight at this elegant resolution, but on closer inspection of Quentin's drawings and calculations his happiness turns to despondency once more Fred points out to Quentin that it's the radius of the silo that is 6 metres, not the diameter, and the angle of repose for his grain is 40­°",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-431-square-space-silo.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e69ec029fe2930dbf2a5cd8fa496eede",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-431-square-space-silo.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "would be like knowing that the square is king of the silo, sitting in splendid glory on top of your grain Fred's eyes light up with delight at this elegant resolution, but on closer inspection of Quentin's drawings and calculations his happiness turns to despondency once more Fred points out to Quentin that it's the radius of the silo that is 6 metres, not the diameter, and the angle of repose for his grain is 40­°However, if Quentin can find a set of solutions for this particular silo then he will be more than happy to keep it If Quick thinking Quentin is to satisfy frustratingly fussy Fred the farmer's appetite for all things square then determine the values of $x$ for all possible square space wastage options and calculate $\\sum x$ correct to 9 decimal places --hints--\nsquareSpaceSilo() should return 23 386029052 js\nassert strictEqual(squareSpaceSilo(), 23 386029052);\n--seed--\n--seed-contents--\n```js\nfunction squareSpaceSilo() {\nreturn true;\n}\nsquareSpaceSilo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-431-square-space-silo.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "086f31b398b6e8b02c92e2bd895d92e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-434-rigid-graphs.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f51f1000cf542c510031\ntitle: 'Problem 434: Rigid graphs'\nchallengeType: 1\nforumTopicId: 302105\ndashedName: problem-434-rigid-graphs\n--description--\nRecall that a graph is a collection of vertices and edges connecting the vertices, and that two vertices connected by an edge are called adjacent Graphs can be embedded in Euclidean space by associating each vertex with a point in the Euclidean space A flexible graph is an embedding of a graph where it is possible to move one or more vertices continuously so that the distance between at least two nonadjacent vertices is altered while the distances between each pair of adjacent vertices is kept constant A rigid graph is an embedding of a graph which is not flexible Informally, a graph is rigid if by replacing the vertices with fully rotating hinges and the edges with rods that are unbending and inelastic, no parts of the graph can be moved independently from the rest of the graph The grid graphs embedded in the Euclidean plane are not rigid, as the following animation demonstrates:\nHowever, one can make them rigid by adding diagonal edges to the cells For example, for the 2x3 grid graph, there are 19 ways to make the graph rigid:\nNote that for the purposes of this problem, we do not consider changing the orientation of a diagonal edge or adding both diagonal edges to a cell as a different way of making a grid graph rigid Let $R(m, n)$ be the number of ways to make the $m × n$ grid graph rigid E g $R(2, 3) = 19$ and $R(5, 5) = 23\\,679\\,901$ Define $S(N)$ as $\\sum R(i, j)$ for $1 ≤ i$, $j ≤ N$ E g $S(5) = 25\\,021\\,721$ Find $S(100)$, give your answer modulo $1\\,000\\,000\\,033$ --hints--\nrigidGraphs() should return 863253606 js\nassert strictEqual(rigidGraphs(), 863253606);\n--seed--\n--seed-contents--\n```js\nfunction rigidGraphs() {\nreturn true;\n}\nrigidGraphs();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-434-rigid-graphs.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d05d11c29bb6d68a05de9a1d9cf1983e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-437-fibonacci-primitive-roots.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5241000cf542c510036\ntitle: 'Problem 437: Fibonacci primitive roots'\nchallengeType: 1\nforumTopicId: 302108\ndashedName: problem-437-fibonacci-primitive-roots\n--description--\nWhen we calculate $8^n$ modulo 11 for $n = 0$ to 9 we get: 1, 8, 9, 6, 4, 10, 3, 2, 5, 7.\nAs we see all possible values from 1 to 10 occur. So 8 is a primitive root of 11.\nBut there is more:\nIf we take a closer look we see:\n$$\\begin{align}\n& 1 + 8 = 9 \\\\\n& 8 + 9 = 17 ≡ 6\\bmod 11 \\\\\n& 9 + 6 = 15 ≡ 4\\bmod 11 \\\\\n& 6 + 4 = 10 \\\\\n& 4 + 10 = 14 ≡ 3\\bmod 11 \\\\\n& 10 + 3 = 13 ≡ 2\\bmod 11 \\\\\n& 3 + 2 = 5 \\\\\n& 2 + 5 = 7 \\\\\n& 5 + 7 = 12 ≡ 1\\bmod 11.\n\\end{align}$$\nSo the powers of 8 mod 11 are cyclic with period 10, and $8^n + 8^{n + 1} ≡ 8^{n + 2} (\\text{mod } 11)$. 8 is called a Fibonacci primitive root of 11.\nNot every prime has a Fibonacci primitive root. There are 323 primes less than 10000 with one or more Fibonacci primitive roots and the sum of these primes is 1480491.\nFind the sum of the primes less than $100\\,000\\,000$ with at least one Fibonacci primitive root.\n--hints--\nfibonacciPrimitiveRoots() should return 74204709657207.\njs\nassert.strictEqual(fibonacciPrimitiveRoots(), 74204709657207);\n--seed--\n--seed-contents--\n```js\nfunction fibonacciPrimitiveRoots() {\nreturn true;\n}\nfibonacciPrimitiveRoots();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1444,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-437-fibonacci-primitive-roots.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0d853c99d14a7737ebf20fc7da7007a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-436-unfair-wager.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5221000cf542c510033\ntitle: 'Problem 436: Unfair wager'\nchallengeType: 1\nforumTopicId: 302107\ndashedName: problem-436-unfair-wager\n--description--\nJulie proposes the following wager to her sister Louise.\nShe suggests they play a game of chance to determine who will wash the dishes.\nFor this game, they shall use a generator of independent random numbers uniformly distributed between 0 and 1.\nThe game starts with $S = 0$.\nThe first player, Louise, adds to $S$ different random numbers from the generator until $S > 1$ and records her last random number '$x$'.\nThe second player, Julie, continues adding to $S$ different random numbers from the generator until $S > 2$ and records her last random number '$y$'.\nThe player with the highest number wins and the loser washes the dishes, i.e. if $y > x$ the second player wins.\nFor example, if the first player draws 0.62 and 0.44, the first player turn ends since $0.62 + 0.44 > 1$ and $x = 0.44$. If the second players draws 0.1, 0.27 and 0.91, the second player turn ends since $0.62 + 0.44 + 0.1 + 0.27 + 0.91 > 2$ and $y = 0.91$. Since $y > x$, the second player wins.\nLouise thinks about it for a second, and objects: \"That's not fair\".\nWhat is the probability that the second player wins? Give your answer rounded to 10 places behind the decimal point in the form 0.abcdefghij\n--hints--\nunfairWager() should return 0.5276662759.\njs\nassert.strictEqual(unfairWager(), 0.5276662759);\n--seed--\n--seed-contents--\n```js\nfunction unfairWager() {\nreturn true;\n}\nunfairWager();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1633,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-436-unfair-wager.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "18ca3dfd5bf0bc5406f33335819341c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-438-integer-part-of-polynomial-equations-solutions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5231000cf542c510034\ntitle: 'Problem 438: Integer part of polynomial equation''s solutions'\nchallengeType: 1\nforumTopicId: 302109\ndashedName: problem-438-integer-part-of-polynomial-equations-solutions\n--description--\nFor an $n$-tuple of integers $t = (a_1, \\ldots, a_n)$, let $(x_1, \\ldots, x_n)$ be the solutions of the polynomial equation $x^n + a_1x^{n - 1} + a_2x^{n - 2} + \\ldots + a_{n - 1}x + a_n = 0$.\nConsider the following two conditions:\n$x_1, \\ldots, x_n$ are all real.\nIf $x_1, ..., x_n$ are sorted, $⌊x_i⌋ = i$ for $1 ≤ i ≤ n$. ($⌊·⌋:$ floor function.)\nIn the case of $n = 4$, there are 12 $n$-tuples of integers which satisfy both conditions.\nWe define $S(t)$ as the sum of the absolute values of the integers in $t$.\nFor $n = 4$ we can verify that $\\sum S(t) = 2087$ for all $n$-tuples $t$ which satisfy both conditions.\nFind $\\sum S(t)$ for $n = 7$.\n--hints--\npolynomialIntegerPart() should return 2046409616809.\njs\nassert.strictEqual(polynomialIntegerPart(), 2046409616809);\n--seed--\n--seed-contents--\n```js\nfunction polynomialIntegerPart() {\nreturn true;\n}\npolynomialIntegerPart();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1225,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-438-integer-part-of-polynomial-equations-solutions.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9759bff1fd0a2d613eb816ef35957fcd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-439-sum-of-sum-of-divisors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5231000cf542c510035\ntitle: 'Problem 439: Sum of sum of divisors'\nchallengeType: 1\nforumTopicId: 302110\ndashedName: problem-439-sum-of-sum-of-divisors\n--description--\nLet $d(k)$ be the sum of all divisors of $k$.\nWe define the function $S(N) = \\sum_{i = 1}^N \\sum_{j = 1}^N d(i \\times j)$.\nFor example, $S(3) = d(1) + d(2) + d(3) + d(2) + d(4) + d(6) + d(3) + d(6) + d(9) = 59$.\nYou are given that $S({10}^3) = 563\\,576\\,517\\,282$ and $S({10}^5)\\bmod {10}^9 = 215\\,766\\,508$.\nFind $S({10}^{11})\\bmod {10}^9$.\n--hints--\nsumOfSumOfDivisors() should return 968697378.\njs\nassert.strictEqual(sumOfSumOfDivisors(), 968697378);\n--seed--\n--seed-contents--\n```js\nfunction sumOfSumOfDivisors() {\nreturn true;\n}\nsumOfSumOfDivisors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 833,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-439-sum-of-sum-of-divisors.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "83f8f2f0acd2ade41b77c67843152d1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-440-gcd-and-tiling.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5241000cf542c510037\ntitle: 'Problem 440: GCD and Tiling'\nchallengeType: 1\nforumTopicId: 302112\ndashedName: problem-440-gcd-and-tiling\n--description--\nWe want to tile a board of length $n$ and height 1 completely, with either 1 × 2 blocks or 1 × 1 blocks with a single decimal digit on top:\nFor example, here are some of the ways to tile a board of length $n = 8$:\nLet $T(n)$ be the number of ways to tile a board of length $n$ as described above.\nFor example, $T(1) = 10$ and $T(2) = 101$.\nLet $S(L)$ be the triple sum $\\sum_{a, b, c} gcd(T(c^a), T(c^b))$ for $1 ≤ a, b, c ≤ L$.\nFor example:\n$$\\begin{align}\n& S(2) = 10\\,444 \\\\\n& S(3) = 1\\,292\\,115\\,238\\,446\\,807\\,016\\,106\\,539\\,989 \\\\\n& S(4)\\bmod 987\\,898\\,789 = 670\\,616\\,280.\n\\end{align}$$\nFind $S(2000)\\bmod 987\\,898\\,789$.\n--hints--\ngcdAndTiling() should return 970746056.\njs\nassert.strictEqual(gcdAndTiling(), 970746056);\n--seed--\n--seed-contents--\n```js\nfunction gcdAndTiling() {\nreturn true;\n}\ngcdAndTiling();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-440-gcd-and-tiling.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6eb82c7c46fefee8b07c6907006de07d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-441-the-inverse-summation-of-coprime-couples.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5261000cf542c510038\ntitle: 'Problem 441: The inverse summation of coprime couples'\nchallengeType: 1\nforumTopicId: 302113\ndashedName: problem-441-the-inverse-summation-of-coprime-couples\n--description--\nFor an integer $M$, we define $R(M)$ as the sum of $\\frac{1}{p·q}$ for all the integer pairs $p$ and $q$ which satisfy all of these conditions:\n$1 ≤ p < q ≤ M$\n$p + q ≥ M$\n$p$ and $q$ are coprime.\nWe also define $S(N)$ as the sum of $R(i)$ for $2 ≤ i ≤ N$.\nWe can verify that $S(2) = R(2) = \\frac{1}{2}$, $S(10) ≈ 6.9147$ and $S(100) ≈ 58.2962$.\nFind $S({10}^7)$. Give your answer rounded to four decimal places.\n--hints--\ninverseSummationCoprimeCouples() should return 5000088.8395.\njs\nassert.strictEqual(inverseSummationCoprimeCouples(), 5000088.8395);\n--seed--\n--seed-contents--\n```js\nfunction inverseSummationCoprimeCouples() {\nreturn true;\n}\ninverseSummationCoprimeCouples();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-441-the-inverse-summation-of-coprime-couples.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "113e13438c7157d23e1815a416ec9a21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-443-gcd-sequence.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5271000cf542c51003a\ntitle: 'Problem 443: GCD sequence'\nchallengeType: 1\nforumTopicId: 302115\ndashedName: problem-443-gcd-sequence\n--description--\nLet $g(n)$ be a sequence defined as follows:\n$$\\begin{align}\n& g(4) = 13, \\\\\n& g(n) = g(n-1) + gcd(n, g(n - 1)) \\text{ for } n > 4.\n\\end{align}$$\nThe first few values are:\n$$\\begin{array}{l}\nn    & 4  & 5  & 6  & 7  & 8  & 9  & 10 & 11 & 12 & 13 & 14 & 15 & 16 & 17 & 18 & 19 & 20 & \\ldots \\\\\ng(n) & 13 & 14 & 16 & 17 & 18 & 27 & 28 & 29 & 30 & 31 & 32 & 33 & 34 & 51 & 54 & 55 & 60 & \\ldots\n\\end{array}$$\nYou are given that $g(1\\,000) = 2\\,524$ and $g(1\\,000\\,000) = 2\\,624\\,152$.\nFind $g({10}^{15})$.\n--hints--\ngcdSequence() should return 2744233049300770.\njs\nassert.strictEqual(gcdSequence(), 2744233049300770);\n--seed--\n--seed-contents--\n```js\nfunction gcdSequence() {\nreturn true;\n}\ngcdSequence();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-443-gcd-sequence.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5c93948c75a3d76b3caa10e9c5a4ff37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-442-eleven-free-integers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5271000cf542c510039\ntitle: 'Problem 442: Eleven-free integers'\nchallengeType: 1\nforumTopicId: 302114\ndashedName: problem-442-eleven-free-integers\n--description--\nAn integer is called eleven-free if its decimal expansion does not contain any substring representing a power of 11 except 1.\nFor example, 2404 and 13431 are eleven-free, while 911 and 4121331 are not.\nLet $E(n)$ be the $n$th positive eleven-free integer. For example, $E(3) = 3$, $E(200) = 213$ and $E(500\\,000) = 531\\,563$.\nFind $E({10}^{18})$.\n--hints--\nelevenFreeIntegers() should return 1295552661530920200.\njs\nassert.strictEqual(elevenFreeIntegers(), 1295552661530920200);\n--seed--\n--seed-contents--\n```js\nfunction elevenFreeIntegers() {\nreturn true;\n}\nelevenFreeIntegers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 850,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-442-eleven-free-integers.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "98193622c133ef1a9c28f19f244da8b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-446-retractions-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f52c1000cf542c51003d\ntitle: 'Problem 446: Retractions B'\nchallengeType: 1\nforumTopicId: 302118\ndashedName: problem-446-retractions-b\n--description--\nFor every integer $n > 1$, the family of functions $f_{n, a, b}$ is defined by:\n$f_{n, a, b}(x) ≡ ax + b\\bmod n$ for $a, b, x$ integer and $0 \\lt a \\lt n$, $0 \\le b \\lt n$, $0 \\le x \\lt n$.\nWe will call $f_{n, a, b}$ a retraction if $f_{n, a, b}(f_{n, a, b}(x)) \\equiv f_{n, a, b}(x)\\bmod n$ for every $0 \\le x \\lt n$.\nLet $R(n)$ be the number of retractions for $n$.\n$F(N) = \\displaystyle\\sum_{n = 1}^N R(n^4 + 4)$.\n$F(1024) = 77\\,532\\,377\\,300\\,600$.\nFind $F({10}^7)$. Give your answer modulo $1\\,000\\,000\\,007$.\n--hints--\nretractionsB() should return 907803852.\njs\nassert.strictEqual(retractionsB(), 907803852);\n--seed--\n--seed-contents--\n```js\nfunction retractionsB() {\nreturn true;\n}\nretractionsB();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 970,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-446-retractions-b.md",
      "source_type": "git_repo"
    },
    "token_count": 363,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f00025a27eb720d9297b89bacabd5ef1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-445-retractions-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f52a1000cf542c51003c\ntitle: 'Problem 445: Retractions A'\nchallengeType: 1\nforumTopicId: 302117\ndashedName: problem-445-retractions-a\n--description--\nFor every integer $n > 1$, the family of functions $f_{n, a, b}$ is defined by:\n$f_{n, a, b}(x) ≡ ax + b\\bmod n$ for $a, b, x$ integer and $0 \\lt a \\lt n$, $0 \\le b \\lt n$, $0 \\le x \\lt n$.\nWe will call $f_{n, a, b}$ a retraction if $f_{n, a, b}(f_{n, a, b}(x)) \\equiv f_{n, a, b}(x)\\bmod n$ for every $0 \\le x \\lt n$.\nLet $R(n)$ be the number of retractions for $n$.\nYou are given that\n$$\\sum_{k = 1}^{99\\,999} R(\\displaystyle\\binom{100\\,000}{k}) \\equiv 628\\,701\\,600\\bmod 1\\,000\\,000\\,007$$\nFind $$\\sum_{k = 1}^{9\\,999\\,999} R(\\displaystyle\\binom{10\\,000\\,000}{k})$$ Give your answer modulo $1\\,000\\,000\\,007$.\n--hints--\nretractionsA() should return 659104042.\njs\nassert.strictEqual(retractionsA(), 659104042);\n--seed--\n--seed-contents--\n```js\nfunction retractionsA() {\nreturn true;\n}\nretractionsA();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1075,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-445-retractions-a.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "704d4e0a5a32ab659d590c20f1def9aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-447-retractions-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f52c1000cf542c51003e\ntitle: 'Problem 447: Retractions C'\nchallengeType: 1\nforumTopicId: 302119\ndashedName: problem-447-retractions-c\n--description--\nFor every integer $n > 1$, the family of functions $f_{n, a, b}$ is defined by:\n$f_{n, a, b}(x) ≡ ax + b\\bmod n$ for $a, b, x$ integer and $0 \\lt a \\lt n$, $0 \\le b \\lt n$, $0 \\le x \\lt n$.\nWe will call $f_{n, a, b}$ a retraction if $f_{n, a, b}(f_{n, a, b}(x)) \\equiv f_{n, a, b}(x)\\bmod n$ for every $0 \\le x \\lt n$.\nLet $R(n)$ be the number of retractions for $n$.\n$F(N) = \\displaystyle\\sum_{n = 2}^N R(n)$.\n$F({10}^7) ≡ 638\\,042\\,271\\bmod 1\\,000\\,000\\,007$.\nFind $F({10}^{14})$. Give your answer modulo $1\\,000\\,000\\,007$.\n--hints--\nretractionsC() should return 530553372.\njs\nassert.strictEqual(retractionsC(), 530553372);\n--seed--\n--seed-contents--\n```js\nfunction retractionsC() {\nreturn true;\n}\nretractionsC();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 985,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-447-retractions-c.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "11356f22560e446dd7d8c5b69ec6fd43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-448-average-least-common-multiple.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f52c1000cf542c51003f\ntitle: 'Problem 448: Average least common multiple'\nchallengeType: 1\nforumTopicId: 302120\ndashedName: problem-448-average-least-common-multiple\n--description--\nThe function $lcm(a, b)$ denotes the least common multiple of $a$ and $b$.\nLet $A(n)$ be the average of the values of $lcm(n, i)$ for $1 ≤ i ≤ n$.\nE.g: $A(2) = \\frac{2 + 2}{2} = 2$ and $A(10) = \\frac{10 + 10 + 30 + 20 + 10 + 30 + 70 + 40 + 90 + 10}{10} = 32$.\nLet $S(n) = \\sum A(k)$ for $1 ≤ k ≤ n$.\n$S(100) = 122\\,726$.\nFind $S(99\\,999\\,999\\,019)\\bmod 999\\,999\\,017$.\n--hints--\naverageLCM() should return 106467648.\njs\nassert.strictEqual(averageLCM(), 106467648);\n--seed--\n--seed-contents--\n```js\nfunction averageLCM() {\nreturn true;\n}\naverageLCM();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-448-average-least-common-multiple.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a6103e4bd3fc3fcae73e61f69ce66cac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-449-chocolate-covered-candy.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f52d1000cf542c510040\ntitle: 'Problem 449: Chocolate covered candy'\nchallengeType: 1\nforumTopicId: 302121\ndashedName: problem-449-chocolate-covered-candy\n--description--\nPhil the confectioner is making a new batch of chocolate covered candy. Each candy center is shaped like an ellipsoid of revolution defined by the equation: $b^2x^2 + b^2y^2 + a^2z^2 = a^2b^2$.\nPhil wants to know how much chocolate is needed to cover one candy center with a uniform coat of chocolate one millimeter thick.\nIf $a = 1$ mm and $b = 1$ mm, the amount of chocolate required is $\\frac{28}{3} \\pi$ mm3\nIf $a = 2$ mm and $b = 1$ mm, the amount of chocolate required is approximately 60.35475635 mm3.\nFind the amount of chocolate in mm3 required if $a = 3$ mm and $b = 1$ mm. Give your answer as the number rounded to 8 decimal places behind the decimal point.\n--hints--\nchocolateCoveredCandy() should return 103.37870096.\njs\nassert.strictEqual(chocolateCoveredCandy(), 103.37870096);\n--seed--\n--seed-contents--\n```js\nfunction chocolateCoveredCandy() {\nreturn true;\n}\nchocolateCoveredCandy();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-449-chocolate-covered-candy.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cb09b81cc5dc58b7fa87519b34bf401b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-444-the-roundtable-lottery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f52a1000cf542c51003b\ntitle: 'Problem 444: The Roundtable Lottery'\nchallengeType: 1\nforumTopicId: 302116\ndashedName: problem-444-the-roundtable-lottery\n--description--\nA group of $p$ people decide to sit down at a round table and play a lottery-ticket trading game Each person starts off with a randomly-assigned, unscratched lottery ticket Each ticket, when scratched, reveals a whole-pound prize ranging anywhere from £1 to £$p$, with no two tickets alike The goal of the game is for each person to maximize his ticket winnings upon leaving the game An arbitrary person is chosen to be the first player Going around the table, each player has only one of two options:\nThe player can scratch his ticket and reveal its worth to everyone at the table The player can trade his unscratched ticket for a previous player's scratched ticket, and then leave the game with that ticket The previous player then scratches his newly-acquired ticket and reveals its worth to everyone at the table The game ends once all tickets have been scratched All players still remaining at the table must leave with their currently-held tickets Assume that each player uses the optimal strategy for maximizing the expected value of his ticket winnings Let $E(p)$ represent the expected number of players left at the table when the game ends in a game consisting of $p$ players (e g $E(111) = 5 2912$ when rounded to 5 significant digits) Let $S_1(N) = \\displaystyle\\sum_{p = 1}^N E(p)$ Let $S_k(N) = \\displaystyle\\sum_{p = 1}^N S_{k - 1}(p)$ for $k > 1$ Find $S_{20}({10}^{14})$ and write the answer as a string in scientific notation rounded to 10 significant digits Use a lowercase e to separate mantissa and exponent For example, the answer for $S_3(100)$ would be 5 983679014e5 --hints--\nroundtableLottery() should return a string js\nassert isString(roundtableLottery());\nroundtableLottery() should return the string 1 200856722e263 js\nassert strictEqual(roundtableLottery(), '1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2230,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-444-the-roundtable-lottery.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "84ee8fb3cc05a019a802ea538f65a087",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-444-the-roundtable-lottery.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Let $S_1(N) = \\displaystyle\\sum_{p = 1}^N E(p)$ Let $S_k(N) = \\displaystyle\\sum_{p = 1}^N S_{k - 1}(p)$ for $k > 1$ Find $S_{20}({10}^{14})$ and write the answer as a string in scientific notation rounded to 10 significant digits Use a lowercase e to separate mantissa and exponent For example, the answer for $S_3(100)$ would be 5 983679014e5 --hints-- roundtableLottery() should return a string js assert isString(roundtableLottery()); roundtableLottery() should return the string 1 200856722e263 js assert strictEqual(roundtableLottery(), '1200856722e263');\n--seed--\n--seed-contents--\n```js\nfunction roundtableLottery() {\nreturn true;\n}\nroundtableLottery();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2230,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-444-the-roundtable-lottery.md",
      "source_type": "git_repo"
    },
    "token_count": 215,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "31d5ec6bec79646dbf1f67d577527c86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-451-modular-inverses.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5311000cf542c510042\ntitle: 'Problem 451: Modular inverses'\nchallengeType: 1\nforumTopicId: 302124\ndashedName: problem-451-modular-inverses\n--description--\nConsider the number 15.\nThere are eight positive numbers less than 15 which are coprime to 15: 1, 2, 4, 7, 8, 11, 13, 14.\nThe modular inverses of these numbers modulo 15 are: 1, 8, 4, 13, 2, 11, 7, 14 because\n$$\\begin{align}\n& 1  \\times 1\\bmod 15 = 1 \\\\\n& 2  \\times 8  = 16\\bmod 15 = 1 \\\\\n& 4  \\times 4  = 16\\bmod 15 = 1 \\\\\n& 7  \\times 13 = 91\\bmod 15 = 1 \\\\\n& 11 \\times 11 = 121\\bmod 15 = 1 \\\\\n& 14 \\times 14 = 196\\bmod 15 = 1\n\\end{align}$$\nLet $I(n)$ be the largest positive number $m$ smaller than $n - 1$ such that the modular inverse of $m$ modulo $n$ equals $m$ itself.\nSo $I(15) = 11$.\nAlso $I(100) = 51$ and $I(7) = 1$.\nFind $\\sum I(n)$ for $3 ≤ n ≤ 2 \\times {10}^7$\n--hints--\nmodularInverses() should return 153651073760956.\njs\nassert.strictEqual(modularInverses(), 153651073760956);\n--seed--\n--seed-contents--\n```js\nfunction modularInverses() {\nreturn true;\n}\nmodularInverses();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-451-modular-inverses.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c92e658bd51426969f02335b30ea9167",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-424-kakuro.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5141000cf542c510026\ntitle: 'Problem 424: Kakuro'\nchallengeType: 1\nforumTopicId: 302094\ndashedName: problem-424-kakuro\n--description--\nThe above is an example of a cryptic kakuro (also known as cross sums, or even sums cross) puzzle, with its final solution on the right (The common rules of kakuro puzzles can be found easily on numerous internet sites Other related information can also be currently found at krazydad com whose author has provided the puzzle data for this challenge )\nThe testPuzzles array contains the description of 200 such puzzles, a mix of 5x5 and 6x6 types The first puzzle in the file is the above example which is coded as string as follows:\n6,X,X,(vCC),(vI),X,X,X,(hH),B,O,(vCA),(vJE),X,(hFE,vD),O,O,O,O,(hA),O,I,(hJC,vB),O,O,(hJC),H,O,O,O,X,X,X,(hJE),O,O,X\nThe first character is a numerical digit indicating the size of the information grid It would be either a 6 (for a 5x5 kakuro puzzle) or a 7 (for a 6x6 puzzle) followed by a comma (,) The extra top line and left column are needed to insert information The content of each cell is then described and followed by a comma, going left to right and starting with the top line X = Gray cell, not required to be filled by a digit O (upper case letter)= White empty cell to be filled by a digit A = Or any one of the upper case letters from A to J to be replaced by its equivalent digit in the solved puzzle ( ) = Location of the encrypted sums Horizontal sums are preceded by a lower case \"h\" and vertical sums are preceded by a lower case \"v\" Those are followed by one or two upper case letters depending if the sum is a single digit or double digit one For double digit sums, the first letter would be for the \"tens\" and the second one for the \"units\" When the cell must contain information for both a horizontal and a vertical sum, the first one is always for the horizontal sum and the two are separated by a comma within the same set of brackets, ex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 57960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-424-kakuro.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4cf8b5bf528110ab82ea1aa12400c7e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-424-kakuro.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "by one or two upper case letters depending if the sum is a single digit or double digit one For double digit sums, the first letter would be for the \"tens\" and the second one for the \"units\" When the cell must contain information for both a horizontal and a vertical sum, the first one is always for the horizontal sum and the two are separated by a comma within the same set of brackets, ex: (hFE,vD) Each set of brackets is also immediately followed by a comma The description of the last cell is followed by a Carriage Return/Line Feed (CRLF) instead of a comma The required answer to each puzzle is based on the value of each letter necessary to arrive at the solution and according to the alphabetical order As indicated under the example puzzle, its answer would be 8426039571 At least 9 out of the 10 encrypting letters are always part of the problem description When only 9 are given, the missing one must be assigned the remaining digit You are given that the sum of the answers for the first 10 puzzles in testPuzzles is 64414157580 Find the sum of the answers for puzzles array --hints--\nkakuro(testPuzzles) should return 1059760019628 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 57960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-424-kakuro.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ea92b4a17eb94ce7b3dc63d1ec222d9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-424-kakuro.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "order As indicated under the example puzzle, its answer would be 8426039571 At least 9 out of the 10 encrypting letters are always part of the problem description When only 9 are given, the missing one must be assigned the remaining digit You are given that the sum of the answers for the first 10 puzzles in testPuzzles is 64414157580 Find the sum of the answers for puzzles array --hints-- kakuro(testPuzzles) should return 1059760019628 js assertstrictEqual(kakuro(_testPuzzles), 1059760019628);\n--seed--\n--after-user-code--\njs\nconst _testPuzzles = [\n'6,X,X,(vCC),(vI),X,X,X,(hH),B,O,(vCA),(vJE),X,(hFE,vD),O,O,O,O,(hA),O,I,(hJC,vB),O,O,(hJC),H,O,O,O,X,X,X,(hJE),O,O,X','7,X,X,X,X,(vJJ),(vCD),X,X,X,X,(hCG),O,O,(vCE),X,X,X,(hCI,vJB),C,O,O,X,(vB),(hJF,vJF),O,F,O,O,(hJA),F,G,O,O,X,X,(hCA),O,A,O,X,X,X,X,(hCF),O,O,X,X,X','7,X,X,X,(vE),(vCB),X,X,X,X,(hJ),O,O,(vCA),X,X,(vCH),(hCG,vCJ),O,O,O,(vJ),(hCE),O,O,O,(hJ,vGG),O,O,(hD),I,O,(hCD,vCB),H,O,O,X,(hCE),O,O,E,X,X,X,X,(hCE),O,O,X,X','6,X,X,X,(vEA),(vJF),X,X,X,(hI),O,O,(vJA),X,(vA),(hEI,vEB),O,O,O,(hIG),C,O,J,O,D,(hJD),O,O,O,X,X,X,(hJD),O,O,X,X','7,X,(vH),(vG),X,X,(vI),(vDH),(hG),B,O,(vDI),(hDB,vDE),O,O,(hBC),I,O,F,O,O,J,X,X,(hG),O,O,X,X,X,(vDG),(hH,vDD),O,O,(vDJ),(vC),(hBI),O,O,O,O,O,O,(hDJ),O,O,X,(hA),O,O','6,X,(vID),(vIJ),X,X,X,(hH),F,I,(vF),(vIA),X,(hIA),G,B,O,C,X,X,(hID),O,O,O,(vIF),X,(hIA),E,O,I,O,X,X,X,(hII),O,G','6,X,X,(vAF),(vAI),X,X,X,(hJ,vAC),O,B,(vGJ),X,(hGH),J,O,O,O,(vAF),(hAG),O,O,(hH,vF),A,D,X,(hGF),O,E,O,O,X,X,(hD),O,O,X','7,X,X,X,X,(vCE),(vGB),X,X,(vJG),(vCI),(hCD,vCJ),O,O,X,(hCI),O,O,O,O,B,(vJB),(hCF),O,O,O,(hCA,vH),O,O,(hCJ),O,O,(hJB,vCJ),O,O,O,X,(hJD),O,O,O,O,O,X,(hF),I,O,X,X,X','7,X,(vBB),(vBD),X,X,X,X,(hBB),C,E,(vEE),(vEC),X,X,(hBC),O,O,O,O,X,X,X,(hEF),H,O,A,(vJ),X,X,X,(hBD),O,O,O,(vI),X,X,(hBE),F,O,O,O,X,X,X,X,(hG),O,O','7,X,X,(vGG),(vGD),X,(vI),(vGI),X,(hGB),O,O,(hGH,vIC),O,O,X,(hGA),O,O,O,J,O,X,X,(hGI),O,O,X,X,X,(vGD),(hE,vE),O,O,(vGF),X,(hIH),O,O,O,O,O,X,(hE),A,O,(hGF),O,O,X','6,X,(vIJ),(vIE),X,X,X,(hF),O,C,(vIA),X,X,(hCA),O,O,D,(vIH),X,X,(hIB),E,O,O,(vF),X,X,(hD),O,A,O,X,X,X,(hID),O,G','6,X,(vAD),(vGI),(vI),X,X,(hB),O,O,O,(vAF),X,(hGC),O,O,O,O,(vGA),(hGE),O,O,(hJ,vB),O,O,X,(hGD),D,O,E,O,X,X,(hAI),O,C,O','6,X,X,X,(vAB),(vFA),X,X,X,(hHI),O,O,(vHJ),X,(vA),(hFJ,vHE),I,D,O,(hFH),O,O,O,O,O,(hHJ),O,O,O,X,X,X,(hC),O,J,X,X','7,X,X,X,(vJ),(vEF),X,X,X,X,(hI,vGD),C,E,(vEF),(vA),X,(hEH),O,O,O,O,O,X,(hH,vJ),O,O,(hJ,vEJ),O,O,(hD),O,A,(hEF,vEB),O,O,X,(hCC),O,O,A,O,O,X,X,X,(hH),O,O,X,X','7,X,X,X,(vAG),(vAJ),(vFH),X,X,X,(hFD),O,O,O,X,X,(vH),(hAJ,vAB),O,O,O,(vB),(hAH),O,H,O,(hC,vAI),O,O,(hE),O,O,(hAI,vAE),O,O,O,X,(hJ),O,O,O,X,X,X,(hFG),E,O,O,X,X','7,X,(vAI),(vHB),X,X,(vJE),(vAA),(hD),O,O,X,(hG),O,O,(hAJ),O,O,(vE),(hAA,vAI),O,O,X,(hHF),O,O,O,O,X,X,(hJF,vAE),O,O,O,J,(vH),(hAI),D,O,X,(hB),O,O,(hAG),O,O,X,(hAA),O,O','7,X,X,(vHJ),(vC),(vAF),X,X,X,(hHF),O,O,O,(vHI),(vHD),X,(hHB,vAB),O,O,O,O,E,(hAI),O,O,X,(hAB),O,O,(hD),O,O,(vAB),(hAI,vE),J,O,(hHH),O,O,O,B,O,X,X,X,(hG),O,A,O,X','6,X,X,(vDF),(vHE),X,X,X,(hHJ,vE),C,O,X,X,(hHI),O,O,O,(vDF),(vHH),(hFA),A,O,B,O,O,X,X,(hE),O,I,O,X,X,(hHH),O,O,X','6,X,(vA),(vA),X,X,X,(hE),O,O,(vCJ),X,X,(hG),O,O,O,(vHI),X,X,(hHC),O,O,H,(vB),X,X,(hCE),O,O,D,X,X,X,(hE),O,O','6,X,X,X,X,(vEH),(vEC),X,X,X,(hEB,vEJ),O,O,X,X,(hEC,vEF),O,O,B,X,(hDD,vEI),O,B,C,X,(hB),O,D,A,X,X,(hEC),O,O,X,X,X','6,X,X,X,X,(vIF),(vH),X,X,X,(hIJ,vGJ),B,I,X,X,(hIB,vIC),O,O,G,X,(hIA,vC),O,O,O,X,(hE),O,O,O,X,X,(hIA),E,O,X,X,X','7,X,(vC),(vFB),X,X,X,X,(hFH),O,O,(vFA),(vFJ),(vC),X,(hFJ),O,O,O,O,O,X,X,X,(hA,vJ),O,O,O,X,X,(hG),D,O,O,(vC),(vFC),X,(hBH),A,O,O,O,E,X,X,X,X,(hFH),O,I','6,X,X,(vFD),(vC),X,X,X,(hDH),E,F,(vDG),(vDD),X,(hDF,vDI),O,O,A,O,(hDG),O,O,(hDG,vDG),O,O,(hDJ),O,D,J,O,X,X,X,(hJ),E,O,X','6,X,X,X,(vE),(vGH),(vIC),X,X,(hD,vIG),O,O,A,X,(hIF,vJ),O,J,E,O,(hJ),O,D,(hGG,vGH),O,O,(hGG),O,O,O,O,X,(hIC),O,O,O,X,X','7,X,X,X,X,(vAG),(vJA),(vH),X,X,X,(hAJ,vDJ),O,O,O,X,X,(hJF),O,O,O,O,X,X,(hG),D,O,X,X,X,(vJH),(hJE,vJD),C,I,X,X,(hAE),B,O,O,O,X,X,(hAJ),O,O,E,X,X,X','7,X,X,X,X,(vGG),(vIA),(vGF),X,X,X,(hGF),O,O,D,X,X,X,(hGJ,vIB),O,O,O,X,X,(hGH,vGD),O,O,O,X,X,(hII,vC),O,J,O,X,X,(hIH),J,O,O,X,X,X,(hGE),O,I,O,X,X,X','6,X,X,(vFA),(vEC),X,X,X,(hI,vFI),F,O,X,X,(hDE),O,O,O,(vFF),(vFF),(hDI),G,J,O,F,O,X,X,(hFJ),O,D,O,X,X,(hFH),J,A,X','7,X,X,X,X,X,(vID),(vBB),X,X,X,X,(hBC),O,I,X,X,(vIH),(vBH),(hBF,vF),O,O,X,(hIE,vD),O,O,I,O,O,(hAG),O,O,O,O,F,X,(hA),O,O,X,X,X,X,(hD),O,O,X,X,X,X','7,X,(vCD),(vCC),X,X,X,X,(hE),B,C,(vCE),X,X,X,(hCD),O,O,O,(vE),(vCG),X,X,(hCH),O,O,O,O,X,X,(hFC),B,J,G,O,(vCC),X,X,X,(hCI),O,O,O,X,X,X,X,(hG),O,O','7,X,X,X,(vID),(vD),(vFB),X,X,X,(hIB,vID),O,O,O,X,X,(hJE,vIA),J,C,O,D,(vF),(hIB),O,O,X,(hIG),O,O,(hIJ),O,O,(vD),(hA,vID),O,O,X,(hJF),O,O,O,O,X,X,(hIE),O,O,O,X,X','7,X,X,(vAC),(vAH),X,X,X,X,(hD),O,O,(vAD),X,X,X,(hCH,vAD),O,O,O,(vAA),(vF),(hAC),O,H,(hAB,vAJ),O,O,A,(hAE),O,O,O,(hD,vAD),O,O,X,X,(hAC),O,O,O,X,X,X,X,(hG),O,O,X','6,X,X,(vBB),(vBE),X,X,X,(hBH),O,I,(vBG),(vBB),X,(hHE,vBD),H,D,O,O,(hBA),C,O,(hA,vG),O,O,(hBF),I,O,O,O,X,X,X,(hG),O,O,X','6,X,X,(vEC),(vD),X,X,X,(hD,vH),O,O,(vIB),X,(hIA),O,O,O,O,(vE),(hII),O,F,(hII,vIG),O,O,X,(hIH),O,O,O,O,X,X,(hIA),O,D,X','6,X,X,X,X,(vEH),(vEG),X,X,X,(hEB,vEF),O,O,X,X,(hAC,vG),O,B,O,X,(hEE,vEC),O,D,O,X,(hEE),O,O,O,X,X,(hEJ),D,O,X,X,X','6,X,(vD),(vB),X,X,X,(hA),O,O,(vE),X,X,(hE),A,O,O,(vCJ),X,X,(hCH),O,A,O,(vCI),X,X,(hB),O,D,O,X,X,X,(hCB),G,O','7,X,X,X,X,(vHJ),(vIF),(vIB),X,X,X,(hIH,vJI),O,O,J,X,X,(hIA),O,O,O,F,X,X,(hIG),O,C,X,X,X,(vD),(hA,vIB),O,J,X,X,(hHB),O,O,O,O,X,X,(hHB),O,O,O,X,X,X','7,X,X,X,(vBJ),(vIB),X,X,X,(vIF),(hBB,vBB),O,O,(vBA),X,(hIC),O,O,O,O,O,(vBA),(hBD),O,O,(hC,vC),O,O,O,(hBJ),E,O,O,(hBC,vBI),G,H,X,(hBA),O,O,O,O,O,X,X,(hBF),O,O,X,X','7,X,(vHI),(vHE),X,X,X,X,(hA),O,O,X,X,X,X,(hHG),O,O,(vHH),(vHE),(vIJ),X,(hHA),O,O,O,O,O,(vHI),X,(hID),H,O,O,B,I,X,X,X,X,(hHB),F,O,X,X,X,X,(hHE),O,H','6,X,X,(vAJ),(vAJ),X,X,X,(hAF,vAA),G,A,X,X,(hDA),O,O,O,(vDE),(vAH),(hAJ),O,O,O,O,I,X,X,(hAG),D,C,O,X,X,(hAI),O,O,X','6,X,X,X,X,(vDH),(vDA),X,X,X,(hG,vDG),O,E,X,X,(hBJ,vBC),O,O,O,X,(hBI,vE),O,E,O,X,(hE),O,O,O,X,X,(hDH),O,E,X,X,X','6,X,X,X,X,(vHJ),(vHH),X,X,X,(hHE,vCC),O,O,X,X,(hF,vG),A,O,O,X,(hHC,vHJ),O,B,O,X,(hHH),O,O,O,X,X,(hHI),O,O,X,X,X','7,X,(vJ),(vDG),X,X,(vDF),(vEF),(hC),E,B,X,(hEA),O,O,(hEE),C,O,(vH),(hED,vEF),A,O,X,(hEC),O,O,O,O,X,X,(hDD,vEF),O,O,O,O,(vEA),(hEJ),O,F,X,(hJ),O,O,(hEF),O,O,X,(hEF),O,O','7,X,X,X,(vCC),(vD),X,X,X,(vJE),(hI,vCH),O,O,(vBF),X,(hCC),O,O,O,O,A,(vJB),(hCB),G,O,O,(hJA,vJF),O,O,(hJA),O,O,(hG,vH),O,O,O,X,(hCE),O,O,O,O,O,X,X,(hH),O,O,X,X','7,X,X,(vEI),(vEB),(vG),X,X,X,(hEF),E,O,O,(vHE),X,X,(hEF,vH),O,O,O,O,(vEI),(hH),O,O,X,(hEH),O,B,(hG),O,O,(vG),(hEI,vED),O,O,X,(hAG),C,O,O,O,X,X,X,(hEE),O,O,O,X','6,X,X,X,X,(vJE),(vF),X,X,X,(hI,vJJ),O,O,X,X,(hEC,vJJ),H,O,O,X,(hF,vJB),O,O,O,X,(hJI),A,C,E,X,X,(hJD),O,J,X,X,X','6,X,X,X,(vH),(vAE),X,X,X,(hCB,vCJ),O,O,(vCB),X,(hCA,vD),O,O,O,O,(hD),C,O,(hCC,vJ),O,O,(hAB),A,O,F,O,X,X,(hB),G,O,X,X','6,X,X,(vEC),(vEG),X,X,X,(hEF),O,O,(vFC),(vEI),X,(hHJ,vJ),E,O,O,A,(hJ),O,O,(hEA,vEA),O,O,(hHH),O,O,O,B,X,X,X,(hEF),O,O,X','7,X,(vEI),(vEC),X,X,X,X,(hH),O,O,X,X,X,X,(hED),O,O,(vEB),(vEG),(vGB),X,(hEJ),O,O,O,O,O,(vD),X,(hIA),O,O,O,O,C,X,X,X,X,(hA),O,I,X,X,X,X,(hEB),A,O','7,X,X,X,(vF),(vG),(vIB),X,X,(vG),(hBA,vIH),J,I,D,X,(hBG),O,O,O,O,O,(vBG),(hA),O,O,X,(hE),O,O,(hBB),O,C,(vA),(hBI,vBE),O,O,X,(hBA),O,O,O,O,O,X,(hBF),O,O,O,X,X','7,X,X,(vEF),(vDI),X,X,X,X,(hDG),O,O,(vDA),X,X,X,(hEA,vG),O,O,O,(vEJ),(vJ),(hF),O,G,(hDH,vDI),O,O,F,(hED),O,O,O,(hDD,vB),O,O,X,X,(hDB),O,O,A,X,X,X,X,(hH),O,O,X','7,X,X,X,X,(vJH),(vD),(vAJ),X,X,X,(hAC,vDH),O,O,O,X,X,(hAA),O,O,O,O,X,X,(hC),F,O,X,X,X,(vC),(hAJ,vAA),I,H,X,X,(hJA),O,D,O,G,X,X,(hJB),O,C,O,X,X,X','6,X,X,X,(vDC),(vG),X,X,X,(hA),O,O,(vCH),X,(vCI),(hCB,vB),O,O,O,(hDF),O,H,O,O,O,(hH),O,O,O,X,X,X,(hH),J,O,X,X','6,X,X,(vCG),(vGA),X,X,X,(hE),O,O,(vGG),(vGB),X,(hCI,vF),O,O,O,I,(hGI),O,O,(hI,vD),O,A,(hGH),O,B,O,O,X,X,X,(hA),O,O,X','6,X,X,X,(vJ),(vHF),X,X,(vF),(hHG,vHD),O,A,X,(hHI),A,O,O,O,(vHE),(hB),G,O,(hD,vHE),O,F,X,(hGJ),O,O,O,O,X,(hHD),O,O,X,X','6,X,X,X,X,(vBD),(vD),X,X,X,(hD,vBB),O,O,X,X,(hI,vHD),O,O,O,X,(hHD,vBE),O,O,A,X,(hHF),C,O,G,X,X,(hBI),O,O,X,X,X','7,X,(vJ),(vFB),(vDB),X,X,X,(hFC),O,O,O,(vFE),X,X,(hFB),O,O,O,O,X,X,X,X,(hG),I,O,X,X,X,X,(hA),O,O,(vFG),(vE),X,X,(hDD),O,O,O,A,X,X,X,(hFD),D,E,J','6,X,X,X,(vAD),(vAH),X,X,(vB),(hF,vEB),O,O,X,(hED),O,O,O,O,(vD),(hD),O,O,(hJ,vI),O,O,X,(hEH),O,A,O,C,X,(hB),G,O,X,X','6,X,X,X,X,(vFG),(vFB),X,X,X,(hFD,vB),O,O,X,X,(hFG,vFG),O,O,O,X,(hI,vH),O,O,C,X,(hGA),E,H,O,X,X,(hD),O,G,X,X,X','7,X,X,X,(vBH),(vBB),X,X,X,X,(hBJ,vBJ),I,O,(vHE),(vI),X,(hBF,vBA),O,O,O,O,O,(hBE),O,D,X,(hA),O,O,(hBC),O,O,(vA),(hBB,vBH),O,O,(hDA),B,H,O,O,O,X,X,X,(hI),O,O,X,X','7,X,X,X,(vEC),(vD),X,X,X,(vJ),(hEB,vEJ),O,O,X,X,(hFC),O,O,O,F,(vEG),X,(hG),O,O,(hH,vFI),O,E,(vEH),X,(hEB),A,O,(hED,vJ),O,O,X,X,(hFI),O,O,O,O,X,X,(hED),O,O,X,X','6,X,(vGH),(vGG),X,X,X,(hGE),O,O,(vFI),(vGJ),X,(hGF),O,O,D,O,X,X,(hGB),O,C,O,(vGG),X,(hFG),O,O,O,O,X,X,X,(hE),O,I','7,X,X,X,(vF),(vGI),X,X,X,(vJ),(hB,vGA),H,G,X,X,(hHF),O,O,O,A,(vHH),X,(hB),O,O,(hGB,vGA),C,O,(vC),X,(hGC),O,O,(hGI,vGF),O,O,X,X,(hHB),O,E,O,O,X,X,(hA),O,O,X,X','7,X,X,X,X,X,(vED),(vIG),X,X,X,X,(hEC),O,O,X,X,(vAC),(vA),(hH,vEG),O,O,X,(hAE,vB),O,O,H,O,O,(hIJ),O,O,O,B,O,X,(hEC),O,O,X,X,X,X,(hEI),O,O,X,X,X,X','7,X,X,(vAI),(vAA),X,X,X,X,(hAD,vAG),O,O,(vAE),X,X,(hAH),O,O,O,O,(vBH),(vD),(hG),O,O,(hI,vE),O,O,O,(hAI),O,O,O,(hG,vAC),D,F,X,X,(hAH),O,O,O,O,X,X,X,(hAJ),O,O,X','7,X,X,(vGD),(vFB),(vJ),X,X,X,(hGD),O,O,O,(vFA),(vGG),X,(hFA),O,O,O,O,O,X,(hGE,vGF),O,O,(hH,vFB),O,O,(hH),O,G,(hGC,vD),O,G,X,(hEB),O,O,O,O,O,X,X,X,(hGC),O,A,O,X','6,X,X,(vAD),(vEE),X,X,X,(hEC),G,O,(vAJ),(vH),X,(hEC,vEG),O,A,O,O,(hEG),F,O,(hEG,vEG),O,O,(hAB),O,E,F,A,X,X,X,(hEG),O,O,X','6,X,X,X,X,(vIB),(vJ),X,X,X,(hB,vIJ),O,O,X,X,(hE,vIF),O,O,C,X,(hFC,vIF),O,A,O,X,(hG),O,O,H,X,X,(hIJ),O,O,X,X,X','6,X,X,X,(vIB),(vEB),X,X,X,(hD,vAE),O,O,(vE),X,(hIJ,vE),O,O,O,O,(hII),O,O,(hJ,vC),H,O,(hAE),O,O,G,J,X,X,(hC),O,O,X,X','6,X,X,(vFF),(vB),X,X,X,(hC,vI),O,J,(vJE),X,(hJJ),O,O,I,G,(vA),(hJJ),O,O,(hJD,vJE),O,O,X,(hJB),O,O,F,O,X,X,(hJH),C,J,X','7,X,X,X,(vEI),(vJI),X,X,X,X,(hJA),O,O,(vJE),(vJJ),X,X,(hJI,vJB),O,E,O,D,X,(hJI,vC),O,H,(hJB,vJE),O,O,(hB),O,O,(hF,vD),O,O,X,(hJB),O,O,O,O,X,X,X,X,(hJE),O,O,X,X','7,X,(vJB),(vFD),X,X,(vFE),(vH),(hJF),O,O,X,(hH),O,O,(hJC),O,O,(vH),(hJF,vJF),O,O,X,(hJI),H,O,O,O,X,X,(hFJ,vJJ),J,O,O,O,(vJA),(hA),G,O,X,(hJF),O,C,(hJC),O,O,X,(hD),O,O','7,X,(vI),(vDH),X,X,X,X,(hB),O,I,X,X,X,X,(hC),O,O,(vA),(vI),(vDJ),X,(hDH),O,B,O,O,O,(vDH),X,(hGG),O,O,O,J,O,X,X,X,X,(hHH),B,O,X,X,X,X,(hHE),O,O','6,X,X,(vDI),(vE),X,X,X,(hA,vDA),E,O,(vHI),X,(hHI),F,A,O,O,(vDF),(hDD),O,O,(hDJ,vDJ),O,O,X,(hDG),O,O,H,O,X,X,(hB),O,D,X','6,X,(vJ),(vDH),X,X,X,(hDA),G,O,(vDA),(vDB),X,(hDB),O,O,I,F,X,X,(hG),O,F,O,(vDI),X,(hED),G,O,O,F,X,X,X,(hDE),O,H','6,X,X,(vCJ),(vD),X,X,X,(hG),O,O,(vAD),(vAE),X,(hCC,vI),O,O,A,O,(hJ),O,F,(hAD,vAD),I,H,(hCD),O,O,O,F,X,X,X,(hAJ),O,G,X','7,X,X,X,X,(vEF),(vEC),(vF),X,X,X,(hED,vEB),O,O,O,X,X,(hEB),O,O,O,O,X,X,(hC),O,D,X,X,X,(vI),(hB,vEE),O,O,X,X,(hEB),E,H,D,O,X,X,(hHJ),O,G,O,X,X,X','7,X,X,X,X,(vJF),(vIC),X,X,X,(vIA),(hD,vJE),O,O,X,X,(hIJ,vD),J,O,O,D,(vG),(hJC),I,O,O,(hJA,vC),O,O,(hJF),J,C,(hJF,vJE),O,O,O,X,(hIB),O,O,O,O,X,X,(hJF),O,O,X,X,X','6,X,(vH),(vJE),X,X,X,(hC),J,O,(vJJ),(vJC),X,(hJJ),A,I,O,H,X,X,(hD),O,O,A,(vC),X,(hAI),F,B,O,O,X,X,X,(hC),J,O','7,X,(vA),(vEE),X,X,(vD),(vF),(hEC),O,O,(vIH),(hI,vEB),O,O,(hBD),O,O,O,O,F,O,X,X,(hA),O,O,X,X,X,(vJ),(hEJ,vEG),F,O,(vA),(vG),(hBG),O,O,O,O,O,O,(hEH),O,O,X,(hG),O,O','6,X,X,X,(vFG),(vFC),X,X,(vE),(hFE,vFF),A,O,X,(hBF),O,O,O,O,(vH),(hE),O,O,(hD,vFF),I,O,X,(hFF),O,O,E,D,X,(hFI),O,O,X,X','6,X,X,(vHA),(vFH),X,X,X,(hFF),O,O,(vFH),(vE),X,(hDI,vFG),O,O,O,O,(hFG),B,O,(hC,vFB),O,O,(hDC),O,G,O,F,X,X,X,(hFF),O,O,X','7,X,X,(vBE),(vBB),(vA),X,X,X,(hH),O,O,O,(vBA),(vH),X,(hGI,vBB),O,J,O,O,O,(hBG),O,O,X,(hI),O,O,(hC),O,O,(vBG),(hE,vBD),H,C,(hBI),O,O,O,O,O,X,X,X,(hGG),O,O,O,X','7,X,X,X,X,X,(vHC),(vF),X,X,X,X,(hF,vC),O,E,X,X,(vEJ),(hEF,vEG),F,O,H,X,(hHD),C,O,O,O,X,X,(hHC,vI),A,O,O,O,X,(hJ),D,O,O,X,X,X,(hF),O,O,X,X,X,X','6,X,X,(vH),(vDC),X,X,X,(hCI,vCD),O,O,X,X,(hH),O,O,O,(vCA),(vCB),(hCJ),O,I,O,D,E,X,X,(hDI),E,H,O,X,X,(hG),O,O,X','7,X,X,X,X,(vJ),(vHE),X,X,X,X,(hHA,vHF),O,B,(vHE),X,X,(hEC,vHG),O,O,O,O,X,(hHE,vHG),O,O,(hA,vHB),O,O,(hJ),O,O,(hHE,vJ),O,O,X,(hED),O,J,O,O,X,X,X,(hB),O,O,X,X,X','6,X,X,(vJG),(vA),X,X,X,(hI),B,O,(vJC),(vJH),X,(hJH,vJC),O,E,O,O,(hB),O,O,(hJJ,vF),O,O,(hCE),O,O,D,I,X,X,X,(hB),O,H,X','6,X,X,X,X,(vDG),(vHH),X,X,(vDH),(hJ,vHB),O,O,X,(hJF),O,O,O,O,X,(hHF,vE),O,O,O,X,(hDJ),H,O,O,I,X,(hHC),G,O,X,X,X','7,X,(vAI),(vHC),X,X,X,X,(hD),O,G,X,X,(vHI),(vG),(hAJ),O,O,(vB),(hH,vAH),O,O,X,(hHF,vH),O,O,F,O,O,(hCA),O,O,O,O,O,(vF),(hH),O,O,X,(hG),O,O,X,X,X,X,(hAH),O,O','7,X,X,X,X,(vFG),(vFI),X,X,X,X,(hFI,vFB),O,O,(vFJ),X,(vFA),(hFG,vGA),O,B,O,O,(hIB),O,O,O,(hH,vJ),O,O,(hJ),O,O,(hFD,vD),O,C,O,(hII),O,O,O,O,X,X,X,(hE),O,O,X,X,X','7,X,X,X,(vI),(vEG),(vFD),X,X,(vED),(hA,vEB),O,O,O,X,(hJC),O,O,A,O,O,X,(hEG),O,O,(hEG,vEC),O,O,(vB),X,(hH),O,O,(hJ,vEB),O,O,X,(hEI),O,O,O,O,J,X,(hFF),O,H,O,X,X','6,X,X,(vEI),(vEB),X,X,X,(hEC,vB),O,O,(vEB),X,(hHC),J,O,O,F,(vEC),(hH),O,O,(hB,vEC),O,O,X,(hEH),O,O,O,O,X,X,(hEA),D,O,X','6,X,X,(vAF),(vBF),X,X,X,(hBI),O,G,(vAD),(vBD),X,(hBI,vF),O,J,O,E,(hBB),A,G,(hBI,vBI),O,H,(hAJ),B,O,O,O,X,X,X,(hBA),O,O,X','6,X,(vCB),(vJ),X,X,X,(hCE),A,O,(vCI),X,X,(hCG),D,O,O,(vCC),X,X,(hCA),O,O,O,(vB),X,X,(hB),O,E,G,X,X,X,(hG),O,H','7,X,X,X,X,X,(vFI),(vHG),X,X,X,X,(hHJ,vHH),O,O,X,X,(vHC),(hHD,vHG),O,O,O,X,(hHH),O,O,O,O,X,X,(hFE,vHC),O,O,O,D,X,(hHE),H,O,O,X,X,X,(hHE),I,A,X,X,X,X','7,X,X,(vFA),(vC),X,X,X,X,(hE),O,B,(vAC),(vGJ),X,X,(hFF,vG),O,O,O,O,(vAI),(hAA),O,D,(hAB,vAC),O,O,O,(hAH),O,O,O,(hAB,vAB),O,O,X,(hFJ),O,O,O,O,X,X,X,X,(hAH),O,J,X','7,X,X,X,(vIF),(vIB),X,X,X,X,(hID),O,O,(vC),X,X,(vIF),(hIH,vEE),O,O,O,(vII),(hEB),O,O,O,(hIB,vIF),D,J,(hIF),O,O,(hII,vIE),O,O,O,X,(hJ),O,G,O,X,X,X,X,(hIF),O,O,X,X','7,X,(vDJ),(vDB),X,X,X,X,(hDJ),O,O,(vDF),(vCE),(vI),X,(hCH),O,O,O,O,O,X,X,X,(hDC,vDB),O,A,G,X,X,(hFE),O,O,O,(vDJ),(vI),X,(hCF),O,O,O,O,O,X,X,X,X,(hDE),O,O','6,X,X,(vCI),(vJ),X,X,X,(hA),O,E,(vEG),(vCC),X,(hEG,vCF),O,O,D,O,(hJ),C,G,(hB,vCC),C,O,(hED),O,O,A,O,X,X,X,(hCD),O,O,X','6,X,X,X,(vG),(vFE),X,X,X,(hG,vBC),O,O,(vBC),X,(hFJ,vC),O,E,O,I,(hG),O,O,(hBF,vBC),O,O,(hEJ),O,O,O,O,X,X,(hBA),D,O,X,X','6,X,X,(vAJ),(vE),X,X,X,(hFH,vH),O,O,(vFA),X,(hFH),O,O,O,O,(vFI),(hI),O,C,(hFI,vFD),O,O,X,(hAC),O,O,I,G,X,X,(hC),O,O,X','6,X,X,X,(vE),(vCJ),X,X,(vFF),(hA,vHJ),C,O,X,(hFC),O,O,O,F,(vD),(hFI),O,O,(hFE,vFJ),O,O,X,(hFG),O,O,O,O,X,(hFD),O,O,X,X','7,X,X,X,(vBJ),(vBI),X,X,X,X,(hA),O,O,(vCH),(vBJ),X,(vCJ),(hCB,vG),H,O,I,B,(hBA),O,O,O,(hBE,vG),O,O,(hBB),F,O,(hBE,vBI),O,O,O,(hBI),O,O,O,O,X,X,X,X,(hBC),O,O,X,X','6,X,X,(vCJ),(vD),X,X,X,(hH),O,O,(vBD),(vJ),X,(hCI,vCH),O,J,F,O,(hCG),O,E,(hA,vCD),O,F,(hBF),O,O,O,O,X,X,X,(hCG),O,O,X','6,X,X,X,X,(vJB),(vG),X,X,X,(hA,vH),I,O,X,X,(hCD,vCG),O,O,B,X,(hCF,vCD),O,O,O,X,(hJD),O,H,O,X,X,(hB),O,O,X,X,X','7,X,(vI),(vEH),X,X,(vCC),(vF),(hG),O,O,X,(hH),O,C,(hJ),O,O,(vAD),(hAG,vG),O,O,X,(hEI),F,O,O,O,X,X,(hAD,vAB),O,O,I,O,(vI),(hG),O,O,X,(hC),O,O,(hAJ),O,O,X,(hAA),O,O','7,X,X,X,X,X,(vEC),(vEA),X,X,X,X,(hB),O,O,X,X,(vDF),(vEH),(hEC,vH),H,O,X,(hEA,vI),O,B,E,O,O,(hDB),E,J,O,D,O,X,(hEH),O,A,X,X,X,X,(hI),O,O,X,X,X,X','6,X,X,X,(vBC),(vBC),X,X,X,(hBJ,vEC),H,O,(vBB),X,(hBE,vA),D,J,O,O,(hC),O,O,(hBE,vBG),O,O,(hEG),H,O,B,O,X,X,(hBI),O,O,X,X','7,X,(vE),(vCF),X,X,X,X,(hJ),O,O,(vFB),X,X,X,(hCJ),O,O,A,(vFE),(vCA),X,X,(hIH),O,O,O,O,X,X,(hFF),O,O,O,B,(vFA),X,X,X,(hCI),O,O,O,X,X,X,X,(hFG),O,O','7,X,X,X,X,(vBH),(vH),X,X,X,X,(hI),O,O,(vE),X,X,X,(hJG,vBF),O,O,O,X,(vH),(hBA,vJE),O,O,O,O,(hDG),O,O,O,O,X,X,(hBG),O,F,O,X,X,X,X,(hA),J,O,X,X,X','7,X,X,X,X,X,(vIC),(vA),X,X,X,(vII),(hG,vIH),F,I,X,X,(hIG),O,O,O,D,X,X,(hC,vC),O,O,J,X,X,(hIF,vE),O,G,A,X,X,(hIH),O,O,O,O,X,X,(hJ),F,D,X,X,X,X','7,X,X,X,(vH),(vCJ),X,X,X,(vCG),(hCB,vEG),O,O,X,X,(hEF),O,I,O,O,(vCI),X,(hCD),O,J,(hCB,vCJ),E,O,(vCC),X,(hCE),O,O,(hCI,vH),O,O,X,X,(hEB),O,O,O,O,X,X,(hD),O,O,X,X','6,X,(vGA),(vBE),X,X,X,(hGC),H,O,(vGF),X,X,(hGG),O,O,O,(vGD),X,X,(hBG),O,J,O,(vGD),X,X,(hGD),O,O,E,X,X,X,(hGH),O,O','6,X,X,(vEE),(vEJ),X,X,X,(hI,vEF),O,O,(vEH),X,(hEA),O,O,O,E,(vB),(hEE),O,O,(hB,vB),O,O,X,(hEG),A,O,I,O,X,X,(hA),D,B,X','6,X,(vJ),(vHA),X,X,X,(hHH),D,O,(vHG),X,X,(hI),O,O,F,(vDG),X,X,(hDJ),O,O,O,(vHF),X,X,(hHF),O,O,E,X,X,X,(hHE),B,O','6,X,X,X,X,(vFI),(vE),X,X,X,(hH,vA),J,I,X,X,(hGF,vD),O,O,F,X,(hGF,vC),O,O,A,X,(hD),O,O,O,X,X,(hD),O,O,X,X,X','7,X,X,(vHG),(vE),X,X,X,X,(hGD),O,O,(vGA),(vHC),(vAJ),X,(hGD,vAC),O,O,O,O,O,(hGC),O,O,(hAA,vGC),O,O,O,(hAC),O,O,F,(hGD,vD),O,O,(hHB),O,O,O,O,O,X,X,X,X,(hI),O,D,X','7,X,X,(vBG),(vBJ),X,(vBD),(vE),X,(hC),O,O,(hBB,vAG),O,C,X,(hBE),O,O,O,O,D,X,(hBG),O,O,O,(vBE),X,X,(vE),(hBI,vJ),O,O,O,X,(hCG),F,G,O,O,O,X,(hC),O,O,(hBJ),O,O,X','7,X,X,X,X,X,(vEA),(vJJ),X,X,(vED),(vJI),(hF),O,O,X,(hB),O,O,(hJH,vB),O,O,X,(hED),O,B,O,O,X,X,(hJI,vJI),O,O,C,O,X,(hJH),O,O,(hJJ),O,O,X,(hF),J,E,X,X,X,X','6,X,(vF),(vED),X,X,X,(hEI),O,O,(vEA),X,X,(hEJ),O,O,J,(vB),X,X,(hB),O,O,O,(vG),X,X,(hJ),B,O,C,X,X,X,(hF),O,E','6,X,X,X,X,(vCH),(vCD),X,X,X,(hG,vCH),O,O,X,X,(hCH,vCI),O,O,O,X,(hFA,vCE),O,O,J,X,(hFF),O,O,O,X,X,(hI),F,C,X,X,X','6,X,X,(vCH),(vA),X,X,X,(hE,vE),D,O,(vAG),(vHC),(hHB),O,O,C,O,I,(hHA),O,O,(hE,vJ),O,O,(hCH),A,O,O,O,O,X,X,(hHD),O,O,X','7,X,(vF),(vDG),(vGD),X,X,X,(hA),O,D,O,(vI),(vGE),X,(hDG),O,C,O,O,O,X,(hGC),H,O,(hH,vA),O,O,(vGF),X,(hH),O,O,(hGB,vGD),O,O,X,(hDH),O,D,O,O,O,X,X,X,(hA),O,O,G','7,X,X,X,X,(vIG),(vIG),X,X,X,X,(hCJ),O,O,(vCE),X,X,X,(hIE,vEA),O,O,O,X,(vJ),(hEA,vIE),O,O,O,O,(hCH),O,F,O,O,X,X,(hCH),I,B,O,X,X,X,X,(hCH),O,O,X,X,X','7,X,X,X,X,(vJ),(vDB),X,X,X,X,(hDG,vH),O,O,X,X,(vB),(hJ,vEB),E,O,O,(vG),(hDJ),O,F,D,(hI,vDC),O,O,(hA),O,O,(hJ,vA),O,O,I,X,(hDA),O,O,O,X,X,X,(hDH),O,O,X,X,X','6,X,X,X,(vEE),(vJA),(vEI),X,X,(hD,vEE),O,F,O,X,(hED,vEC),O,O,O,O,(hJ),O,O,(hEH,vEI),O,O,(hIB),O,O,O,O,X,(hII),O,O,O,X,X','6,X,(vE),(vGH),X,X,X,(hC),O,J,(vFJ),X,X,(hGH),O,O,O,(vJ),X,X,(hFA),B,O,I,(vFF),X,X,(hFG),O,O,O,X,X,X,(hB),F,G','6,X,X,(vIF),(vIJ),X,X,X,(hD,vIC),O,O,X,X,(hIB),O,O,O,(vIG),(vA),(hBF),O,O,F,I,O,X,X,(hE),D,O,F,X,X,(hIF),O,C,X','7,X,(vCD),(vB),X,X,X,X,(hII),O,D,(vA),X,X,X,(hIJ),O,O,O,(vII),X,X,(hID),O,O,O,O,(vIJ),(vCJ),X,X,(hCA),H,O,F,O,X,X,X,(hA),O,O,G,X,X,X,X,(hII),J,O','7,X,(vC),(vFF),X,X,(vHF),(vD),(hFD),O,O,(vHG),(hA,vFJ),O,O,(hHF),O,O,O,O,O,O,X,X,(hFG,vFH),O,O,O,X,X,(hFB,vI),O,O,O,(vFB),(vB),(hIG),O,O,O,O,D,J,(hG),O,I,X,(hFE),O,O','7,X,(vHJ),(vDE),X,X,(vDI),(vHH),(hHG),O,J,(vHJ),(hJ),O,O,(hHE),O,O,O,(hHJ,vB),O,O,X,(hHH),O,O,O,O,X,X,(hDJ,vHA),D,O,E,O,(vF),(hHJ),O,O,(hA),O,O,E,(hHA),O,O,X,(hI),O,O','7,X,(vEH),(vFA),X,X,X,X,(hEB),O,O,(vFA),X,X,X,(hFD),O,O,O,(vEE),(vID),X,X,(hFB),O,O,O,O,X,X,(hFJ),O,O,O,O,(vEE),X,X,X,(hJ),O,B,O,X,X,X,X,(hEH),C,O','6,X,(vJ),(vE),X,X,X,(hA),B,C,(vCJ),X,X,(hCG),O,O,O,(vCD),X,X,(hHF),O,O,O,(vJ),X,X,(hE),O,O,H,X,X,X,(hCE),O,O','6,X,(vGC),(vGH),X,X,X,(hGG),O,O,(vGB),X,X,(hGI),E,O,I,(vGG),X,X,(hIJ),O,C,O,(vA),X,X,(hD),G,O,O,X,X,X,(hD),O,O','6,X,X,X,X,(vIG),(vII),X,X,X,(hE,vIA),I,G,X,X,(hGJ,vGF),O,C,O,X,(hIE,vII),D,O,O,X,(hGJ),O,B,O,X,X,(hA),O,J,X,X,X','6,X,X,X,X,(vIA),(vE),X,X,(vJB),(hB,vII),I,J,X,(hIF),O,O,O,H,X,(hIB,vG),D,J,O,X,(hJG),C,O,O,F,X,(hB),O,O,X,X,X','7,X,X,X,(vDB),(vGG),X,X,X,X,(hGH),O,O,(vGA),(vGA),X,X,(hGF,vGA),O,O,O,O,X,(hGA,vGE),B,O,(hGD,vI),O,O,(hJ),O,I,(hGE,vGG),O,O,X,(hDA),O,D,O,O,X,X,X,X,(hF),O,O,X,X','6,X,X,X,(vFB),(vI),X,X,X,(hGF),O,O,(vGA),X,(vH),(hGA,vFD),O,O,O,(hFF),O,A,O,O,C,(hGG),O,J,O,X,X,X,(hGH),O,D,X,X','6,X,X,(vGA),(vA),X,X,X,(hB,vGE),O,O,(vHJ),X,(hBD),O,O,O,O,(vGH),(hGC),O,O,(hGJ,vGE),O,O,X,(hGG),O,F,O,O,X,X,(hGC),O,O,X','7,X,X,(vCE),(vG),(vI),X,X,X,(hEE),A,O,E,(vCD),(vCH),X,(hEG,vCD),O,O,O,O,O,(hA),G,C,X,(hEH),O,O,(hEE),O,O,(vI),(hA,vD),O,O,(hCF),O,O,O,O,O,X,X,X,(hED),O,O,B,X','7,X,(vG),(vDC),X,(vBA),(vDG),X,(hJ),O,G,(hDA,vBA),O,O,X,(hBC),O,O,G,O,O,X,X,(hDH),O,O,O,(vG),X,X,X,(hG,vDI),O,O,O,(vJ),X,(hBB),E,O,O,O,O,X,(hH),O,J,(hB),O,O','6,X,X,X,(vJG),(vCG),X,X,(vJG),(hJB,vJH),O,O,X,(hJH),I,B,O,O,(vD),(hJB),O,O,(hA,vJG),O,O,X,(hJB),O,B,O,O,X,(hF),I,C,X,X','7,X,(vA),(vE),X,X,(vD),(vB),(hF),O,O,(vJJ),(hI,vGD),O,O,(hGD),O,O,O,O,I,O,X,X,(hJI),O,O,X,X,X,(vJE),(hA,vF),I,O,(vD),(vJJ),(hGA),O,O,O,J,O,O,(hH),O,O,X,(hI),O,O','7,X,X,(vEH),(vEF),X,X,X,X,(hEI,vIH),O,O,(vEI),X,X,(hEI),O,O,O,O,(vIE),(vEJ),(hD),O,O,(hEH,vH),O,O,O,(hEC),O,O,O,(hD,vC),H,G,X,X,(hIA),O,O,O,O,X,X,X,(hD),E,O,X','7,X,X,X,X,X,(vEA),(vCJ),X,X,X,X,(hCD,vCC),O,O,X,X,(vCI),(hCJ,vEH),O,O,O,X,(hDH),O,J,B,O,X,X,(hCH,vD),O,O,O,O,X,(hCJ),O,O,O,X,X,X,(hJ),O,G,X,X,X,X','7,X,(vB),(vFF),X,(vEI),(vFE),X,(hH),O,O,(hFC,vIB),G,O,X,(hFC),O,O,O,O,O,X,X,X,(hFH),O,D,X,X,X,X,(hFF,vFG),O,O,(vFE),(vFH),X,(hEE),O,O,J,O,O,X,(hFG),O,O,(hFG),O,O','6,X,(vHE),(vII),X,X,X,(hHB),O,O,(vHF),(vHJ),X,(hHD),B,O,O,O,X,X,(hG),H,O,O,(vHE),X,(hCA),O,O,E,B,X,X,X,(hHB),O,G','6,X,(vH),(vAF),X,X,X,(hAC),O,O,(vAD),X,X,(hDI),J,O,O,(vAH),X,X,(hAC),O,O,O,(vAI),X,X,(hH),O,O,B,X,X,X,(hAH),O,E','6,X,(vC),(vHA),X,X,X,(hC),O,J,(vHA),X,X,(hF),J,O,O,(vHC),X,X,(hI),O,J,O,(vF),X,X,(hEJ),O,O,B,X,X,X,(hG),O,O','6,X,X,X,(vFJ),(vJC),X,X,(vFF),(hFF,vJE),O,O,X,(hFH),O,F,O,O,(vD),(hFI),O,C,(hE,vH),D,O,X,(hJC),O,O,O,A,X,(hFG),O,J,X,X','7,X,X,X,X,X,(vDE),(vBB),X,(vC),(vDF),X,(hBF),O,O,(hH),O,O,(vE),(hH,vBI),B,O,(hDF),O,O,O,O,D,(vE),X,(hDI,vBE),O,O,C,O,B,(hBF),O,A,X,(hG),E,D,(hG),O,O,X,X,X,X','7,X,(vJ),(vFH),X,X,X,X,(hHH),F,A,X,X,(vGE),(vA),(hI),O,O,(vC),(hF,vD),O,O,X,(hHC,vF),H,O,O,O,O,(hGJ),O,O,O,O,O,(vE),(hE),O,O,X,(hHI),O,O,X,X,X,X,(hA),O,O','7,X,X,(vCD),(vCB),(vF),X,X,X,(hCA,vCJ),O,O,O,(vFH),X,(hCD),O,O,O,O,O,(vCB),(hH),O,O,X,(hI),O,O,(hCE),O,B,(vCE),(hCH,vCI),O,G,X,(hFA),O,G,O,O,O,X,X,(hBC),H,O,O,X','6,X,X,X,X,(vHD),(vHH),X,X,X,(hA,vHH),H,I,X,X,(hHJ,vIG),O,C,O,X,(hHC,vE),O,O,O,X,(hIG),J,O,O,X,X,(hHF),O,O,X,X,X','6,X,X,(vFD),(vJB),X,X,X,(hH,vH),O,O,(vJD),X,(hFH),O,O,O,O,(vJI),(hJD),O,O,(hJD,vG),J,E,X,(hJD),O,O,O,O,X,X,(hB),A,O,X','6,X,X,X,(vC),(vDC),X,X,(vF),(hHB,vDI),O,O,(vDJ),(hDG),O,O,E,O,O,(hHA),O,O,(hHD,vG),O,O,(hEJ),O,O,F,O,O,X,(hJ),O,O,X,X','7,X,X,X,X,X,(vEJ),(vG),X,X,X,X,(hD,vI),C,O,X,X,(vEG),(hFE,vFE),O,O,O,X,(hFD),O,O,O,O,X,X,(hEC,vFI),O,O,O,O,X,(hEC),B,O,H,X,X,X,(hJ),O,O,X,X,X,X','7,X,(vI),(vAC),X,X,(vAI),(vCG),(hB),O,I,X,(hCB,vCD),O,O,(hH),A,D,(hCD,vAF),O,O,O,X,(hAC),O,O,O,O,X,X,(hCF,vCC),O,O,O,O,(vB),(hCB),O,O,O,(hCF),O,O,(hCB),O,J,X,(hB),O,O','6,X,X,X,(vJB),(vIG),X,X,(vA),(hJI,vJC),O,F,X,(hJB),O,O,O,O,(vJE),(hJD),B,O,(hJB,vD),O,H,X,(hJG),O,I,O,O,X,(hA),O,E,X,X','7,X,X,X,X,(vCD),(vCC),(vB),X,X,X,(hCC,vEC),O,I,O,X,X,(hCH),C,O,O,O,X,X,(hCA),F,O,X,X,X,(vA),(hCH,vCE),O,E,X,X,(hGA),C,O,O,O,X,X,(hCE),O,O,O,X,X,X','6,X,X,X,X,(vJI),(vA),X,X,(vJH),(hJE,vJI),O,G,X,(hJE),F,O,O,D,X,(hC,vB),O,E,O,X,(hJH),O,O,O,O,X,(hJD),O,E,X,X,X','6,X,X,X,X,(vAJ),(vAJ),X,X,X,(hAF,vGB),O,O,X,X,(hAE,vD),O,O,O,X,(hAJ,vF),O,J,O,X,(hAF),O,O,H,X,X,(hB),O,I,X,X,X','7,X,X,X,X,(vH),(vIE),X,X,X,X,(hA,vA),O,O,X,X,(vID),(hF,vCH),O,O,A,(vIE),(hIH),O,O,O,(hIA,vIH),O,O,(hIE),O,O,(hIG,vIA),B,O,O,X,(hIF),O,G,A,X,X,X,(hIE),O,D,X,X,X','7,X,(vEF),(vB),(vFC),X,X,X,(hH),O,O,O,(vEA),X,X,(hED),C,O,O,O,X,X,X,X,(hEG),O,F,X,X,X,X,(hEI),O,O,(vEH),(vI),X,X,(hFH),O,O,O,O,X,X,X,(hEE),O,I,O','6,X,(vHI),(vDG),X,X,X,(hHE),J,O,(vDG),X,X,(hHC),H,O,O,(vHA),X,X,(hDH),F,O,G,(vHE),X,X,(hHC),O,O,O,X,X,X,(hHE),O,O','6,X,X,(vAD),(vAE),X,X,X,(hAA),O,O,(vAD),(vAA),X,(hAI,vI),O,F,D,J,(hC),A,O,(hB,vJ),A,E,(hAB),O,I,C,J,X,X,X,(hI),O,H,X','6,X,X,(vDA),(vE),X,X,X,(hJ,vDE),O,F,(vGG),X,(hDJ),O,O,O,O,(vC),(hDD),O,O,(hJ,vI),O,O,X,(hGG),O,D,O,O,X,X,(hDA),G,B,X','7,X,X,(vJD),(vG),(vI),X,X,X,(hG),O,O,H,(vEB),(vEF),X,(hEB),O,O,B,O,J,X,(hEJ,vA),O,H,(hEE,vEA),O,O,(hA),O,O,(hEJ,vG),O,O,X,(hJF),O,O,O,O,O,X,X,X,(hG),F,O,O,X','6,X,X,X,X,(vEJ),(vG),X,X,X,(hDE,vF),O,O,X,X,(hDJ,vF),O,O,O,X,(hA,vDA),O,O,O,X,(hDI),B,O,O,X,X,(hDE),C,O,X,X,X','6,X,X,(vAC),(vD),X,X,X,(hD,vEI),O,O,(vBC),X,(hBA),O,O,O,O,(vH),(hEF),O,O,(hEI,vF),O,O,X,(hEF),O,O,A,O,X,X,(hEE),G,D,X','6,X,X,(vGB),(vD),X,X,X,(hGG),A,C,(vGJ),(vC),X,(hGG,vGC),O,O,O,J,(hGH),O,O,(hE,vI),G,H,(hHF),O,H,O,O,X,X,X,(hE),O,O,X','6,X,X,(vIJ),(vCD),X,X,X,(hCD),O,O,(vCI),(vCG),X,(hIH,vCC),G,O,O,O,(hCE),O,I,(hCH,vCD),G,O,(hIC),B,D,O,O,X,X,X,(hA),O,O,X','7,X,(vII),(vDH),(vID),X,X,X,(hIG),O,O,O,X,X,X,(hDA),O,C,J,(vII),X,X,X,(hID),F,O,O,(vDH),X,X,X,(hID),O,O,O,(vID),X,X,X,(hIE),A,O,O,X,X,X,(hDD),O,O,O','7,X,(vEB),(vF),X,X,X,X,(hED),O,O,(vAJ),(vED),(vD),X,(hIB),O,O,O,G,O,X,X,X,(hF,vA),O,O,O,X,X,(hED),O,O,F,(vA),(vEB),X,(hIE),O,H,O,O,O,X,X,X,X,(hEE),O,O','7,X,X,X,X,(vCA),(vCE),(vB),X,X,X,(hF),O,O,O,X,X,X,(hJG,vCD),I,O,O,X,X,(hF,vB),O,O,O,X,X,(hJI,vCI),O,F,O,X,X,(hD),O,O,O,X,X,X,(hCI),O,O,O,X,X,X','6,X,(vJI),(vI),X,X,X,(hH),O,O,(vD),X,X,(hJA),F,O,O,(vJH),X,X,(hJI),C,G,O,(vJJ),X,X,(hD),O,O,O,X,X,X,(hJE),O,O','6,X,X,X,(vDC),(vAE),X,X,X,(hI),O,B,(vI),X,(vC),(hJ,vDE),O,O,O,(hAF),A,D,O,O,O,(hI),O,O,G,X,X,X,(hDA),H,O,X,X','7,X,X,X,(vFD),(vAF),X,X,X,(vFD),(hFE,vFA),B,O,X,X,(hHI),O,O,O,O,(vFF),X,(hFI),O,O,(hC,vG),O,H,(vFA),X,(hE),O,O,(hFB,vC),O,O,X,X,(hFJ),O,G,O,O,X,X,(hH),O,O,X,X','7,X,X,X,X,(vD),(vHD),X,X,X,(vDH),(hA,vJJ),O,O,(vE),X,(hHB,vJH),O,O,O,E,J,(hJE),H,O,O,(hD,vF),O,O,(hJG),E,O,(hJE,vJG),C,O,O,(hHH),J,O,O,O,O,X,X,(hJJ),O,O,X,X,X','7,X,X,X,X,(vBA),(vEB),X,X,X,(vBG),(hC,vBB),O,O,X,X,(hBD,vBA),O,O,O,O,(vBJ),(hBC),O,O,O,(hBG,vBD),A,O,(hBB),O,O,(hEE,vBF),O,O,D,X,(hBJ),O,O,O,I,X,X,(hBD),O,O,X,X,X','7,X,X,X,X,X,(vDG),(vC),X,(vB),(vFH),X,(hC),E,O,(hA),O,O,(vDD),(hH,vDB),O,O,(hDA),C,O,O,O,O,(vE),X,(hFH,vDE),O,O,H,O,F,(hDH),O,O,X,(hDI),O,O,(hJ),O,O,X,X,X,X','6,X,(vB),(vE),X,X,X,(hA),D,O,(vA),X,X,(hH),O,C,O,(vIG),X,X,(hDI),O,O,O,(vDF),X,X,(hIF),O,O,O,X,X,X,(hH),O,O','7,X,(vHF),(vC),X,X,(vC),(vHF),(hC),O,O,(vBC),(hA,vBF),O,O,(hBE),O,O,O,O,O,O,X,X,(hHD),A,O,X,X,X,(vD),(hJ,vHA),O,O,(vHI),(vC),(hCH),J,O,O,O,O,B,(hHH),O,O,X,(hE),O,O','6,X,X,X,(vJ),(vDA),X,X,(vFD),(hB,vFE),O,O,(vDA),(hDJ),O,O,O,O,O,(hDE),O,O,(hDA,vC),O,H,(hBA),O,I,O,G,O,X,(hJ),E,O,X,X','6,X,(vGA),(vA),X,X,X,(hGE),O,O,(vGD),X,X,(hGA),O,G,A,(vED),X,X,(hGE),O,O,O,(vGD),X,X,(hEB),C,H,F,X,X,X,(hGE),A,I','6,X,(vIC),(vFD),X,X,X,(hIG),O,C,(vIB),X,X,(hFJ),O,O,O,(vII),X,X,(hIE),O,O,F,(vIA),X,X,(hIJ),F,I,O,X,X,X,(hIC),O,O','6,X,X,X,(vJG),(vHH),X,X,X,(hHA),O,O,(vHD),X,(vE),(hJF,vHJ),O,O,O,(hHB),F,O,D,O,O,(hE),O,J,O,X,X,X,(hHE),I,O,X,X','7,X,X,X,(vGG),(vI),(vEC),X,X,(vBH),(hJ,vBI),O,O,O,X,(hBJ),O,O,O,O,O,(vJ),(hGJ),O,O,X,(hA),O,O,(hGC),O,O,(vC),(hGB,vGJ),O,O,X,(hBF),O,O,O,O,B,X,(hBH),O,O,O,X,X','7,X,X,X,X,X,(vD),(vHB),X,X,(vG),(vFC),(hHA,vAI),O,O,X,(hAB),O,O,O,O,O,X,(hAD),O,O,O,(vHB),X,X,(vF),(hAF,vHI),O,O,O,X,(hAB),O,O,O,O,O,X,(hB),O,E,X,X,X,X','6,X,(vBC),(vDF),X,X,X,(hBE),O,O,(vDB),X,X,(hDG),O,J,O,(vC),X,X,(hBI),O,O,O,(vBB),X,X,(hBA),O,O,D,X,X,X,(hBG),F,O','6,X,X,X,(vH),(vDC),(vGA),X,X,(hA,vIE),O,O,O,X,(hIG,vGG),O,O,O,O,(hF),O,O,(hGF,vJ),J,O,(hGA),O,O,O,O,X,(hIE),O,O,O,X,X','6,X,(vHC),(vHJ),X,X,X,(hHC),A,B,(vA),X,X,(hHI),O,O,O,(vHA),X,X,(hD),F,O,O,(vB),X,X,(hII),G,O,O,X,X,X,(hB),O,O','7,X,(vH),(vJA),X,X,(vIE),(vJI),(hJC),O,O,(vDG),(hJE,vIG),O,O,(hDD),I,O,O,O,O,O,X,X,(hII,vIG),O,O,O,X,X,(hIE,vJA),O,O,O,(vB),(vJI),(hDG),C,O,O,O,O,O,(hJF),O,O,X,(hH),O,O','7,X,(vHH),(vBE),X,X,X,X,(hE),B,O,X,(vHF),(vBJ),X,(hHI),C,O,(hJ,vHI),O,O,X,X,(hBC),D,O,O,O,X,X,(hHH),O,O,D,O,(vHF),X,(hHD),F,O,(hHD),G,O,X,X,X,X,(hHE),O,O','7,X,X,X,X,X,(vIF),(vI),X,X,X,X,(hB,vGF),O,O,X,X,(vEG),(hGG,vB),O,O,O,X,(hGJ),O,O,O,H,X,X,(hGA,vA),O,O,O,O,X,(hGC),I,H,O,X,X,X,(hH),G,J,X,X,X,X','7,X,X,X,X,X,(vJF),(vJF),X,X,X,X,(hJD),A,O,X,X,(vBG),(vJB),(hI,vI),O,O,X,(hBD,vJF),F,O,O,E,O,(hIB),O,O,O,O,C,X,(hJG),O,B,X,X,X,X,(hI),O,J,X,X,X,X','6,X,X,(vEI),(vC),X,X,X,(hH,vGG),O,O,(vGD),X,(hBJ),O,O,O,O,(vD),(hGI),O,O,(hD,vD),E,G,X,(hBG),O,O,A,O,X,X,(hJ),O,O,X','7,X,X,X,X,(vFI),(vJF),X,X,X,X,(hJH),O,O,(vJC),X,X,X,(hEE,vEC),O,O,O,X,(vJE),(hED,vEF),O,O,O,G,(hJB),O,O,O,O,X,X,(hEH),O,O,G,X,X,X,X,(hJG),O,O,X,X,X','7,X,X,X,(vJ),(vEI),X,X,X,X,(hJ,vEC),O,A,(vBD),X,X,(hHC,vEA),O,O,O,I,(vF),(hEE),O,O,(hEE,vHD),B,J,O,(hHE),O,O,O,(hG,vED),O,O,X,(hHD),O,O,O,O,X,X,X,(hEA),O,O,X,X','7,X,X,X,X,X,(vFH),(vED),X,X,X,X,(hEC,vEA),O,O,X,X,(vED),(hFI,vEH),O,O,O,X,(hEE),O,O,A,D,X,X,(hFB,vJ),O,O,O,J,X,(hFI),O,O,O,X,X,X,(hI),O,A,X,X,X,X','6,X,(vB),(vHI),X,X,X,(hHH),O,O,(vHJ),(vGA),X,(hHH),O,O,O,I,X,X,(hGE),O,A,O,(vHE),X,(hHJ),H,B,F,D,X,X,X,(hHJ),O,C'\n]\n--seed-contents--\n```js\nfunction kakuro(puzzles) {\nreturn true;\n}\nconst testPuzzles = [\n'6,X,X,(vCC),(vI),X,X,X,(hH),B,O,(vCA),(vJE),X,(hFE,vD),O,O,O,O,(hA),O,I,(hJC,vB),O,O,(hJC),H,O,O,O,X,X,X,(hJE),O,O,X','7,X,X,X,X,(vJJ),(vCD),X,X,X,X,(hCG),O,O,(vCE),X,X,X,(hCI,vJB),C,O,O,X,(vB),(hJF,vJF),O,F,O,O,(hJA),F,G,O,O,X,X,(hCA),O,A,O,X,X,X,X,(hCF),O,O,X,X,X','7,X,X,X,(vE),(vCB),X,X,X,X,(hJ),O,O,(vCA),X,X,(vCH),(hCG,vCJ),O,O,O,(vJ),(hCE),O,O,O,(hJ,vGG),O,O,(hD),I,O,(hCD,vCB),H,O,O,X,(hCE),O,O,E,X,X,X,X,(hCE),O,O,X,X','6,X,X,X,(vEA),(vJF),X,X,X,(hI),O,O,(vJA),X,(vA),(hEI,vEB),O,O,O,(hIG),C,O,J,O,D,(hJD),O,O,O,X,X,X,(hJD),O,O,X,X','7,X,(vH),(vG),X,X,(vI),(vDH),(hG),B,O,(vDI),(hDB,vDE),O,O,(hBC),I,O,F,O,O,J,X,X,(hG),O,O,X,X,X,(vDG),(hH,vDD),O,O,(vDJ),(vC),(hBI),O,O,O,O,O,O,(hDJ),O,O,X,(hA),O,O','6,X,(vID),(vIJ),X,X,X,(hH),F,I,(vF),(vIA),X,(hIA),G,B,O,C,X,X,(hID),O,O,O,(vIF),X,(hIA),E,O,I,O,X,X,X,(hII),O,G','6,X,X,(vAF),(vAI),X,X,X,(hJ,vAC),O,B,(vGJ),X,(hGH),J,O,O,O,(vAF),(hAG),O,O,(hH,vF),A,D,X,(hGF),O,E,O,O,X,X,(hD),O,O,X','7,X,X,X,X,(vCE),(vGB),X,X,(vJG),(vCI),(hCD,vCJ),O,O,X,(hCI),O,O,O,O,B,(vJB),(hCF),O,O,O,(hCA,vH),O,O,(hCJ),O,O,(hJB,vCJ),O,O,O,X,(hJD),O,O,O,O,O,X,(hF),I,O,X,X,X','7,X,(vBB),(vBD),X,X,X,X,(hBB),C,E,(vEE),(vEC),X,X,(hBC),O,O,O,O,X,X,X,(hEF),H,O,A,(vJ),X,X,X,(hBD),O,O,O,(vI),X,X,(hBE),F,O,O,O,X,X,X,X,(hG),O,O','7,X,X,(vGG),(vGD),X,(vI),(vGI),X,(hGB),O,O,(hGH,vIC),O,O,X,(hGA),O,O,O,J,O,X,X,(hGI),O,O,X,X,X,(vGD),(hE,vE),O,O,(vGF),X,(hIH),O,O,O,O,O,X,(hE),A,O,(hGF),O,O,X','6,X,(vIJ),(vIE),X,X,X,(hF),O,C,(vIA),X,X,(hCA),O,O,D,(vIH),X,X,(hIB),E,O,O,(vF),X,X,(hD),O,A,O,X,X,X,(hID),O,G','6,X,(vAD),(vGI),(vI),X,X,(hB),O,O,O,(vAF),X,(hGC),O,O,O,O,(vGA),(hGE),O,O,(hJ,vB),O,O,X,(hGD),D,O,E,O,X,X,(hAI),O,C,O','6,X,X,X,(vAB),(vFA),X,X,X,(hHI),O,O,(vHJ),X,(vA),(hFJ,vHE),I,D,O,(hFH),O,O,O,O,O,(hHJ),O,O,O,X,X,X,(hC),O,J,X,X','7,X,X,X,(vJ),(vEF),X,X,X,X,(hI,vGD),C,E,(vEF),(vA),X,(hEH),O,O,O,O,O,X,(hH,vJ),O,O,(hJ,vEJ),O,O,(hD),O,A,(hEF,vEB),O,O,X,(hCC),O,O,A,O,O,X,X,X,(hH),O,O,X,X','7,X,X,X,(vAG),(vAJ),(vFH),X,X,X,(hFD),O,O,O,X,X,(vH),(hAJ,vAB),O,O,O,(vB),(hAH),O,H,O,(hC,vAI),O,O,(hE),O,O,(hAI,vAE),O,O,O,X,(hJ),O,O,O,X,X,X,(hFG),E,O,O,X,X','7,X,(vAI),(vHB),X,X,(vJE),(vAA),(hD),O,O,X,(hG),O,O,(hAJ),O,O,(vE),(hAA,vAI),O,O,X,(hHF),O,O,O,O,X,X,(hJF,vAE),O,O,O,J,(vH),(hAI),D,O,X,(hB),O,O,(hAG),O,O,X,(hAA),O,O','7,X,X,(vHJ),(vC),(vAF),X,X,X,(hHF),O,O,O,(vHI),(vHD),X,(hHB,vAB),O,O,O,O,E,(hAI),O,O,X,(hAB),O,O,(hD),O,O,(vAB),(hAI,vE),J,O,(hHH),O,O,O,B,O,X,X,X,(hG),O,A,O,X','6,X,X,(vDF),(vHE),X,X,X,(hHJ,vE),C,O,X,X,(hHI),O,O,O,(vDF),(vHH),(hFA),A,O,B,O,O,X,X,(hE),O,I,O,X,X,(hHH),O,O,X','6,X,(vA),(vA),X,X,X,(hE),O,O,(vCJ),X,X,(hG),O,O,O,(vHI),X,X,(hHC),O,O,H,(vB),X,X,(hCE),O,O,D,X,X,X,(hE),O,O','6,X,X,X,X,(vEH),(vEC),X,X,X,(hEB,vEJ),O,O,X,X,(hEC,vEF),O,O,B,X,(hDD,vEI),O,B,C,X,(hB),O,D,A,X,X,(hEC),O,O,X,X,X','6,X,X,X,X,(vIF),(vH),X,X,X,(hIJ,vGJ),B,I,X,X,(hIB,vIC),O,O,G,X,(hIA,vC),O,O,O,X,(hE),O,O,O,X,X,(hIA),E,O,X,X,X','7,X,(vC),(vFB),X,X,X,X,(hFH),O,O,(vFA),(vFJ),(vC),X,(hFJ),O,O,O,O,O,X,X,X,(hA,vJ),O,O,O,X,X,(hG),D,O,O,(vC),(vFC),X,(hBH),A,O,O,O,E,X,X,X,X,(hFH),O,I','6,X,X,(vFD),(vC),X,X,X,(hDH),E,F,(vDG),(vDD),X,(hDF,vDI),O,O,A,O,(hDG),O,O,(hDG,vDG),O,O,(hDJ),O,D,J,O,X,X,X,(hJ),E,O,X','6,X,X,X,(vE),(vGH),(vIC),X,X,(hD,vIG),O,O,A,X,(hIF,vJ),O,J,E,O,(hJ),O,D,(hGG,vGH),O,O,(hGG),O,O,O,O,X,(hIC),O,O,O,X,X','7,X,X,X,X,(vAG),(vJA),(vH),X,X,X,(hAJ,vDJ),O,O,O,X,X,(hJF),O,O,O,O,X,X,(hG),D,O,X,X,X,(vJH),(hJE,vJD),C,I,X,X,(hAE),B,O,O,O,X,X,(hAJ),O,O,E,X,X,X','7,X,X,X,X,(vGG),(vIA),(vGF),X,X,X,(hGF),O,O,D,X,X,X,(hGJ,vIB),O,O,O,X,X,(hGH,vGD),O,O,O,X,X,(hII,vC),O,J,O,X,X,(hIH),J,O,O,X,X,X,(hGE),O,I,O,X,X,X','6,X,X,(vFA),(vEC),X,X,X,(hI,vFI),F,O,X,X,(hDE),O,O,O,(vFF),(vFF),(hDI),G,J,O,F,O,X,X,(hFJ),O,D,O,X,X,(hFH),J,A,X','7,X,X,X,X,X,(vID),(vBB),X,X,X,X,(hBC),O,I,X,X,(vIH),(vBH),(hBF,vF),O,O,X,(hIE,vD),O,O,I,O,O,(hAG),O,O,O,O,F,X,(hA),O,O,X,X,X,X,(hD),O,O,X,X,X,X','7,X,(vCD),(vCC),X,X,X,X,(hE),B,C,(vCE),X,X,X,(hCD),O,O,O,(vE),(vCG),X,X,(hCH),O,O,O,O,X,X,(hFC),B,J,G,O,(vCC),X,X,X,(hCI),O,O,O,X,X,X,X,(hG),O,O','7,X,X,X,(vID),(vD),(vFB),X,X,X,(hIB,vID),O,O,O,X,X,(hJE,vIA),J,C,O,D,(vF),(hIB),O,O,X,(hIG),O,O,(hIJ),O,O,(vD),(hA,vID),O,O,X,(hJF),O,O,O,O,X,X,(hIE),O,O,O,X,X','7,X,X,(vAC),(vAH),X,X,X,X,(hD),O,O,(vAD),X,X,X,(hCH,vAD),O,O,O,(vAA),(vF),(hAC),O,H,(hAB,vAJ),O,O,A,(hAE),O,O,O,(hD,vAD),O,O,X,X,(hAC),O,O,O,X,X,X,X,(hG),O,O,X','6,X,X,(vBB),(vBE),X,X,X,(hBH),O,I,(vBG),(vBB),X,(hHE,vBD),H,D,O,O,(hBA),C,O,(hA,vG),O,O,(hBF),I,O,O,O,X,X,X,(hG),O,O,X','6,X,X,(vEC),(vD),X,X,X,(hD,vH),O,O,(vIB),X,(hIA),O,O,O,O,(vE),(hII),O,F,(hII,vIG),O,O,X,(hIH),O,O,O,O,X,X,(hIA),O,D,X','6,X,X,X,X,(vEH),(vEG),X,X,X,(hEB,vEF),O,O,X,X,(hAC,vG),O,B,O,X,(hEE,vEC),O,D,O,X,(hEE),O,O,O,X,X,(hEJ),D,O,X,X,X','6,X,(vD),(vB),X,X,X,(hA),O,O,(vE),X,X,(hE),A,O,O,(vCJ),X,X,(hCH),O,A,O,(vCI),X,X,(hB),O,D,O,X,X,X,(hCB),G,O','7,X,X,X,X,(vHJ),(vIF),(vIB),X,X,X,(hIH,vJI),O,O,J,X,X,(hIA),O,O,O,F,X,X,(hIG),O,C,X,X,X,(vD),(hA,vIB),O,J,X,X,(hHB),O,O,O,O,X,X,(hHB),O,O,O,X,X,X','7,X,X,X,(vBJ),(vIB),X,X,X,(vIF),(hBB,vBB),O,O,(vBA),X,(hIC),O,O,O,O,O,(vBA),(hBD),O,O,(hC,vC),O,O,O,(hBJ),E,O,O,(hBC,vBI),G,H,X,(hBA),O,O,O,O,O,X,X,(hBF),O,O,X,X','7,X,(vHI),(vHE),X,X,X,X,(hA),O,O,X,X,X,X,(hHG),O,O,(vHH),(vHE),(vIJ),X,(hHA),O,O,O,O,O,(vHI),X,(hID),H,O,O,B,I,X,X,X,X,(hHB),F,O,X,X,X,X,(hHE),O,H','6,X,X,(vAJ),(vAJ),X,X,X,(hAF,vAA),G,A,X,X,(hDA),O,O,O,(vDE),(vAH),(hAJ),O,O,O,O,I,X,X,(hAG),D,C,O,X,X,(hAI),O,O,X','6,X,X,X,X,(vDH),(vDA),X,X,X,(hG,vDG),O,E,X,X,(hBJ,vBC),O,O,O,X,(hBI,vE),O,E,O,X,(hE),O,O,O,X,X,(hDH),O,E,X,X,X','6,X,X,X,X,(vHJ),(vHH),X,X,X,(hHE,vCC),O,O,X,X,(hF,vG),A,O,O,X,(hHC,vHJ),O,B,O,X,(hHH),O,O,O,X,X,(hHI),O,O,X,X,X','7,X,(vJ),(vDG),X,X,(vDF),(vEF),(hC),E,B,X,(hEA),O,O,(hEE),C,O,(vH),(hED,vEF),A,O,X,(hEC),O,O,O,O,X,X,(hDD,vEF),O,O,O,O,(vEA),(hEJ),O,F,X,(hJ),O,O,(hEF),O,O,X,(hEF),O,O','7,X,X,X,(vCC),(vD),X,X,X,(vJE),(hI,vCH),O,O,(vBF),X,(hCC),O,O,O,O,A,(vJB),(hCB),G,O,O,(hJA,vJF),O,O,(hJA),O,O,(hG,vH),O,O,O,X,(hCE),O,O,O,O,O,X,X,(hH),O,O,X,X','7,X,X,(vEI),(vEB),(vG),X,X,X,(hEF),E,O,O,(vHE),X,X,(hEF,vH),O,O,O,O,(vEI),(hH),O,O,X,(hEH),O,B,(hG),O,O,(vG),(hEI,vED),O,O,X,(hAG),C,O,O,O,X,X,X,(hEE),O,O,O,X','6,X,X,X,X,(vJE),(vF),X,X,X,(hI,vJJ),O,O,X,X,(hEC,vJJ),H,O,O,X,(hF,vJB),O,O,O,X,(hJI),A,C,E,X,X,(hJD),O,J,X,X,X','6,X,X,X,(vH),(vAE),X,X,X,(hCB,vCJ),O,O,(vCB),X,(hCA,vD),O,O,O,O,(hD),C,O,(hCC,vJ),O,O,(hAB),A,O,F,O,X,X,(hB),G,O,X,X','6,X,X,(vEC),(vEG),X,X,X,(hEF),O,O,(vFC),(vEI),X,(hHJ,vJ),E,O,O,A,(hJ),O,O,(hEA,vEA),O,O,(hHH),O,O,O,B,X,X,X,(hEF),O,O,X','7,X,(vEI),(vEC),X,X,X,X,(hH),O,O,X,X,X,X,(hED),O,O,(vEB),(vEG),(vGB),X,(hEJ),O,O,O,O,O,(vD),X,(hIA),O,O,O,O,C,X,X,X,X,(hA),O,I,X,X,X,X,(hEB),A,O','7,X,X,X,(vF),(vG),(vIB),X,X,(vG),(hBA,vIH),J,I,D,X,(hBG),O,O,O,O,O,(vBG),(hA),O,O,X,(hE),O,O,(hBB),O,C,(vA),(hBI,vBE),O,O,X,(hBA),O,O,O,O,O,X,(hBF),O,O,O,X,X','7,X,X,(vEF),(vDI),X,X,X,X,(hDG),O,O,(vDA),X,X,X,(hEA,vG),O,O,O,(vEJ),(vJ),(hF),O,G,(hDH,vDI),O,O,F,(hED),O,O,O,(hDD,vB),O,O,X,X,(hDB),O,O,A,X,X,X,X,(hH),O,O,X','7,X,X,X,X,(vJH),(vD),(vAJ),X,X,X,(hAC,vDH),O,O,O,X,X,(hAA),O,O,O,O,X,X,(hC),F,O,X,X,X,(vC),(hAJ,vAA),I,H,X,X,(hJA),O,D,O,G,X,X,(hJB),O,C,O,X,X,X','6,X,X,X,(vDC),(vG),X,X,X,(hA),O,O,(vCH),X,(vCI),(hCB,vB),O,O,O,(hDF),O,H,O,O,O,(hH),O,O,O,X,X,X,(hH),J,O,X,X','6,X,X,(vCG),(vGA),X,X,X,(hE),O,O,(vGG),(vGB),X,(hCI,vF),O,O,O,I,(hGI),O,O,(hI,vD),O,A,(hGH),O,B,O,O,X,X,X,(hA),O,O,X','6,X,X,X,(vJ),(vHF),X,X,(vF),(hHG,vHD),O,A,X,(hHI),A,O,O,O,(vHE),(hB),G,O,(hD,vHE),O,F,X,(hGJ),O,O,O,O,X,(hHD),O,O,X,X','6,X,X,X,X,(vBD),(vD),X,X,X,(hD,vBB),O,O,X,X,(hI,vHD),O,O,O,X,(hHD,vBE),O,O,A,X,(hHF),C,O,G,X,X,(hBI),O,O,X,X,X','7,X,(vJ),(vFB),(vDB),X,X,X,(hFC),O,O,O,(vFE),X,X,(hFB),O,O,O,O,X,X,X,X,(hG),I,O,X,X,X,X,(hA),O,O,(vFG),(vE),X,X,(hDD),O,O,O,A,X,X,X,(hFD),D,E,J','6,X,X,X,(vAD),(vAH),X,X,(vB),(hF,vEB),O,O,X,(hED),O,O,O,O,(vD),(hD),O,O,(hJ,vI),O,O,X,(hEH),O,A,O,C,X,(hB),G,O,X,X','6,X,X,X,X,(vFG),(vFB),X,X,X,(hFD,vB),O,O,X,X,(hFG,vFG),O,O,O,X,(hI,vH),O,O,C,X,(hGA),E,H,O,X,X,(hD),O,G,X,X,X','7,X,X,X,(vBH),(vBB),X,X,X,X,(hBJ,vBJ),I,O,(vHE),(vI),X,(hBF,vBA),O,O,O,O,O,(hBE),O,D,X,(hA),O,O,(hBC),O,O,(vA),(hBB,vBH),O,O,(hDA),B,H,O,O,O,X,X,X,(hI),O,O,X,X','7,X,X,X,(vEC),(vD),X,X,X,(vJ),(hEB,vEJ),O,O,X,X,(hFC),O,O,O,F,(vEG),X,(hG),O,O,(hH,vFI),O,E,(vEH),X,(hEB),A,O,(hED,vJ),O,O,X,X,(hFI),O,O,O,O,X,X,(hED),O,O,X,X','6,X,(vGH),(vGG),X,X,X,(hGE),O,O,(vFI),(vGJ),X,(hGF),O,O,D,O,X,X,(hGB),O,C,O,(vGG),X,(hFG),O,O,O,O,X,X,X,(hE),O,I','7,X,X,X,(vF),(vGI),X,X,X,(vJ),(hB,vGA),H,G,X,X,(hHF),O,O,O,A,(vHH),X,(hB),O,O,(hGB,vGA),C,O,(vC),X,(hGC),O,O,(hGI,vGF),O,O,X,X,(hHB),O,E,O,O,X,X,(hA),O,O,X,X','7,X,X,X,X,X,(vED),(vIG),X,X,X,X,(hEC),O,O,X,X,(vAC),(vA),(hH,vEG),O,O,X,(hAE,vB),O,O,H,O,O,(hIJ),O,O,O,B,O,X,(hEC),O,O,X,X,X,X,(hEI),O,O,X,X,X,X','7,X,X,(vAI),(vAA),X,X,X,X,(hAD,vAG),O,O,(vAE),X,X,(hAH),O,O,O,O,(vBH),(vD),(hG),O,O,(hI,vE),O,O,O,(hAI),O,O,O,(hG,vAC),D,F,X,X,(hAH),O,O,O,O,X,X,X,(hAJ),O,O,X','7,X,X,(vGD),(vFB),(vJ),X,X,X,(hGD),O,O,O,(vFA),(vGG),X,(hFA),O,O,O,O,O,X,(hGE,vGF),O,O,(hH,vFB),O,O,(hH),O,G,(hGC,vD),O,G,X,(hEB),O,O,O,O,O,X,X,X,(hGC),O,A,O,X','6,X,X,(vAD),(vEE),X,X,X,(hEC),G,O,(vAJ),(vH),X,(hEC,vEG),O,A,O,O,(hEG),F,O,(hEG,vEG),O,O,(hAB),O,E,F,A,X,X,X,(hEG),O,O,X','6,X,X,X,X,(vIB),(vJ),X,X,X,(hB,vIJ),O,O,X,X,(hE,vIF),O,O,C,X,(hFC,vIF),O,A,O,X,(hG),O,O,H,X,X,(hIJ),O,O,X,X,X','6,X,X,X,(vIB),(vEB),X,X,X,(hD,vAE),O,O,(vE),X,(hIJ,vE),O,O,O,O,(hII),O,O,(hJ,vC),H,O,(hAE),O,O,G,J,X,X,(hC),O,O,X,X','6,X,X,(vFF),(vB),X,X,X,(hC,vI),O,J,(vJE),X,(hJJ),O,O,I,G,(vA),(hJJ),O,O,(hJD,vJE),O,O,X,(hJB),O,O,F,O,X,X,(hJH),C,J,X','7,X,X,X,(vEI),(vJI),X,X,X,X,(hJA),O,O,(vJE),(vJJ),X,X,(hJI,vJB),O,E,O,D,X,(hJI,vC),O,H,(hJB,vJE),O,O,(hB),O,O,(hF,vD),O,O,X,(hJB),O,O,O,O,X,X,X,X,(hJE),O,O,X,X','7,X,(vJB),(vFD),X,X,(vFE),(vH),(hJF),O,O,X,(hH),O,O,(hJC),O,O,(vH),(hJF,vJF),O,O,X,(hJI),H,O,O,O,X,X,(hFJ,vJJ),J,O,O,O,(vJA),(hA),G,O,X,(hJF),O,C,(hJC),O,O,X,(hD),O,O','7,X,(vI),(vDH),X,X,X,X,(hB),O,I,X,X,X,X,(hC),O,O,(vA),(vI),(vDJ),X,(hDH),O,B,O,O,O,(vDH),X,(hGG),O,O,O,J,O,X,X,X,X,(hHH),B,O,X,X,X,X,(hHE),O,O','6,X,X,(vDI),(vE),X,X,X,(hA,vDA),E,O,(vHI),X,(hHI),F,A,O,O,(vDF),(hDD),O,O,(hDJ,vDJ),O,O,X,(hDG),O,O,H,O,X,X,(hB),O,D,X','6,X,(vJ),(vDH),X,X,X,(hDA),G,O,(vDA),(vDB),X,(hDB),O,O,I,F,X,X,(hG),O,F,O,(vDI),X,(hED),G,O,O,F,X,X,X,(hDE),O,H','6,X,X,(vCJ),(vD),X,X,X,(hG),O,O,(vAD),(vAE),X,(hCC,vI),O,O,A,O,(hJ),O,F,(hAD,vAD),I,H,(hCD),O,O,O,F,X,X,X,(hAJ),O,G,X','7,X,X,X,X,(vEF),(vEC),(vF),X,X,X,(hED,vEB),O,O,O,X,X,(hEB),O,O,O,O,X,X,(hC),O,D,X,X,X,(vI),(hB,vEE),O,O,X,X,(hEB),E,H,D,O,X,X,(hHJ),O,G,O,X,X,X','7,X,X,X,X,(vJF),(vIC),X,X,X,(vIA),(hD,vJE),O,O,X,X,(hIJ,vD),J,O,O,D,(vG),(hJC),I,O,O,(hJA,vC),O,O,(hJF),J,C,(hJF,vJE),O,O,O,X,(hIB),O,O,O,O,X,X,(hJF),O,O,X,X,X','6,X,(vH),(vJE),X,X,X,(hC),J,O,(vJJ),(vJC),X,(hJJ),A,I,O,H,X,X,(hD),O,O,A,(vC),X,(hAI),F,B,O,O,X,X,X,(hC),J,O','7,X,(vA),(vEE),X,X,(vD),(vF),(hEC),O,O,(vIH),(hI,vEB),O,O,(hBD),O,O,O,O,F,O,X,X,(hA),O,O,X,X,X,(vJ),(hEJ,vEG),F,O,(vA),(vG),(hBG),O,O,O,O,O,O,(hEH),O,O,X,(hG),O,O','6,X,X,X,(vFG),(vFC),X,X,(vE),(hFE,vFF),A,O,X,(hBF),O,O,O,O,(vH),(hE),O,O,(hD,vFF),I,O,X,(hFF),O,O,E,D,X,(hFI),O,O,X,X','6,X,X,(vHA),(vFH),X,X,X,(hFF),O,O,(vFH),(vE),X,(hDI,vFG),O,O,O,O,(hFG),B,O,(hC,vFB),O,O,(hDC),O,G,O,F,X,X,X,(hFF),O,O,X','7,X,X,(vBE),(vBB),(vA),X,X,X,(hH),O,O,O,(vBA),(vH),X,(hGI,vBB),O,J,O,O,O,(hBG),O,O,X,(hI),O,O,(hC),O,O,(vBG),(hE,vBD),H,C,(hBI),O,O,O,O,O,X,X,X,(hGG),O,O,O,X','7,X,X,X,X,X,(vHC),(vF),X,X,X,X,(hF,vC),O,E,X,X,(vEJ),(hEF,vEG),F,O,H,X,(hHD),C,O,O,O,X,X,(hHC,vI),A,O,O,O,X,(hJ),D,O,O,X,X,X,(hF),O,O,X,X,X,X','6,X,X,(vH),(vDC),X,X,X,(hCI,vCD),O,O,X,X,(hH),O,O,O,(vCA),(vCB),(hCJ),O,I,O,D,E,X,X,(hDI),E,H,O,X,X,(hG),O,O,X','7,X,X,X,X,(vJ),(vHE),X,X,X,X,(hHA,vHF),O,B,(vHE),X,X,(hEC,vHG),O,O,O,O,X,(hHE,vHG),O,O,(hA,vHB),O,O,(hJ),O,O,(hHE,vJ),O,O,X,(hED),O,J,O,O,X,X,X,(hB),O,O,X,X,X','6,X,X,(vJG),(vA),X,X,X,(hI),B,O,(vJC),(vJH),X,(hJH,vJC),O,E,O,O,(hB),O,O,(hJJ,vF),O,O,(hCE),O,O,D,I,X,X,X,(hB),O,H,X','6,X,X,X,X,(vDG),(vHH),X,X,(vDH),(hJ,vHB),O,O,X,(hJF),O,O,O,O,X,(hHF,vE),O,O,O,X,(hDJ),H,O,O,I,X,(hHC),G,O,X,X,X','7,X,(vAI),(vHC),X,X,X,X,(hD),O,G,X,X,(vHI),(vG),(hAJ),O,O,(vB),(hH,vAH),O,O,X,(hHF,vH),O,O,F,O,O,(hCA),O,O,O,O,O,(vF),(hH),O,O,X,(hG),O,O,X,X,X,X,(hAH),O,O','7,X,X,X,X,(vFG),(vFI),X,X,X,X,(hFI,vFB),O,O,(vFJ),X,(vFA),(hFG,vGA),O,B,O,O,(hIB),O,O,O,(hH,vJ),O,O,(hJ),O,O,(hFD,vD),O,C,O,(hII),O,O,O,O,X,X,X,(hE),O,O,X,X,X','7,X,X,X,(vI),(vEG),(vFD),X,X,(vED),(hA,vEB),O,O,O,X,(hJC),O,O,A,O,O,X,(hEG),O,O,(hEG,vEC),O,O,(vB),X,(hH),O,O,(hJ,vEB),O,O,X,(hEI),O,O,O,O,J,X,(hFF),O,H,O,X,X','6,X,X,(vEI),(vEB),X,X,X,(hEC,vB),O,O,(vEB),X,(hHC),J,O,O,F,(vEC),(hH),O,O,(hB,vEC),O,O,X,(hEH),O,O,O,O,X,X,(hEA),D,O,X','6,X,X,(vAF),(vBF),X,X,X,(hBI),O,G,(vAD),(vBD),X,(hBI,vF),O,J,O,E,(hBB),A,G,(hBI,vBI),O,H,(hAJ),B,O,O,O,X,X,X,(hBA),O,O,X','6,X,(vCB),(vJ),X,X,X,(hCE),A,O,(vCI),X,X,(hCG),D,O,O,(vCC),X,X,(hCA),O,O,O,(vB),X,X,(hB),O,E,G,X,X,X,(hG),O,H','7,X,X,X,X,X,(vFI),(vHG),X,X,X,X,(hHJ,vHH),O,O,X,X,(vHC),(hHD,vHG),O,O,O,X,(hHH),O,O,O,O,X,X,(hFE,vHC),O,O,O,D,X,(hHE),H,O,O,X,X,X,(hHE),I,A,X,X,X,X','7,X,X,(vFA),(vC),X,X,X,X,(hE),O,B,(vAC),(vGJ),X,X,(hFF,vG),O,O,O,O,(vAI),(hAA),O,D,(hAB,vAC),O,O,O,(hAH),O,O,O,(hAB,vAB),O,O,X,(hFJ),O,O,O,O,X,X,X,X,(hAH),O,J,X','7,X,X,X,(vIF),(vIB),X,X,X,X,(hID),O,O,(vC),X,X,(vIF),(hIH,vEE),O,O,O,(vII),(hEB),O,O,O,(hIB,vIF),D,J,(hIF),O,O,(hII,vIE),O,O,O,X,(hJ),O,G,O,X,X,X,X,(hIF),O,O,X,X','7,X,(vDJ),(vDB),X,X,X,X,(hDJ),O,O,(vDF),(vCE),(vI),X,(hCH),O,O,O,O,O,X,X,X,(hDC,vDB),O,A,G,X,X,(hFE),O,O,O,(vDJ),(vI),X,(hCF),O,O,O,O,O,X,X,X,X,(hDE),O,O','6,X,X,(vCI),(vJ),X,X,X,(hA),O,E,(vEG),(vCC),X,(hEG,vCF),O,O,D,O,(hJ),C,G,(hB,vCC),C,O,(hED),O,O,A,O,X,X,X,(hCD),O,O,X','6,X,X,X,(vG),(vFE),X,X,X,(hG,vBC),O,O,(vBC),X,(hFJ,vC),O,E,O,I,(hG),O,O,(hBF,vBC),O,O,(hEJ),O,O,O,O,X,X,(hBA),D,O,X,X','6,X,X,(vAJ),(vE),X,X,X,(hFH,vH),O,O,(vFA),X,(hFH),O,O,O,O,(vFI),(hI),O,C,(hFI,vFD),O,O,X,(hAC),O,O,I,G,X,X,(hC),O,O,X','6,X,X,X,(vE),(vCJ),X,X,(vFF),(hA,vHJ),C,O,X,(hFC),O,O,O,F,(vD),(hFI),O,O,(hFE,vFJ),O,O,X,(hFG),O,O,O,O,X,(hFD),O,O,X,X','7,X,X,X,(vBJ),(vBI),X,X,X,X,(hA),O,O,(vCH),(vBJ),X,(vCJ),(hCB,vG),H,O,I,B,(hBA),O,O,O,(hBE,vG),O,O,(hBB),F,O,(hBE,vBI),O,O,O,(hBI),O,O,O,O,X,X,X,X,(hBC),O,O,X,X','6,X,X,(vCJ),(vD),X,X,X,(hH),O,O,(vBD),(vJ),X,(hCI,vCH),O,J,F,O,(hCG),O,E,(hA,vCD),O,F,(hBF),O,O,O,O,X,X,X,(hCG),O,O,X','6,X,X,X,X,(vJB),(vG),X,X,X,(hA,vH),I,O,X,X,(hCD,vCG),O,O,B,X,(hCF,vCD),O,O,O,X,(hJD),O,H,O,X,X,(hB),O,O,X,X,X','7,X,(vI),(vEH),X,X,(vCC),(vF),(hG),O,O,X,(hH),O,C,(hJ),O,O,(vAD),(hAG,vG),O,O,X,(hEI),F,O,O,O,X,X,(hAD,vAB),O,O,I,O,(vI),(hG),O,O,X,(hC),O,O,(hAJ),O,O,X,(hAA),O,O','7,X,X,X,X,X,(vEC),(vEA),X,X,X,X,(hB),O,O,X,X,(vDF),(vEH),(hEC,vH),H,O,X,(hEA,vI),O,B,E,O,O,(hDB),E,J,O,D,O,X,(hEH),O,A,X,X,X,X,(hI),O,O,X,X,X,X','6,X,X,X,(vBC),(vBC),X,X,X,(hBJ,vEC),H,O,(vBB),X,(hBE,vA),D,J,O,O,(hC),O,O,(hBE,vBG),O,O,(hEG),H,O,B,O,X,X,(hBI),O,O,X,X','7,X,(vE),(vCF),X,X,X,X,(hJ),O,O,(vFB),X,X,X,(hCJ),O,O,A,(vFE),(vCA),X,X,(hIH),O,O,O,O,X,X,(hFF),O,O,O,B,(vFA),X,X,X,(hCI),O,O,O,X,X,X,X,(hFG),O,O','7,X,X,X,X,(vBH),(vH),X,X,X,X,(hI),O,O,(vE),X,X,X,(hJG,vBF),O,O,O,X,(vH),(hBA,vJE),O,O,O,O,(hDG),O,O,O,O,X,X,(hBG),O,F,O,X,X,X,X,(hA),J,O,X,X,X','7,X,X,X,X,X,(vIC),(vA),X,X,X,(vII),(hG,vIH),F,I,X,X,(hIG),O,O,O,D,X,X,(hC,vC),O,O,J,X,X,(hIF,vE),O,G,A,X,X,(hIH),O,O,O,O,X,X,(hJ),F,D,X,X,X,X','7,X,X,X,(vH),(vCJ),X,X,X,(vCG),(hCB,vEG),O,O,X,X,(hEF),O,I,O,O,(vCI),X,(hCD),O,J,(hCB,vCJ),E,O,(vCC),X,(hCE),O,O,(hCI,vH),O,O,X,X,(hEB),O,O,O,O,X,X,(hD),O,O,X,X','6,X,(vGA),(vBE),X,X,X,(hGC),H,O,(vGF),X,X,(hGG),O,O,O,(vGD),X,X,(hBG),O,J,O,(vGD),X,X,(hGD),O,O,E,X,X,X,(hGH),O,O','6,X,X,(vEE),(vEJ),X,X,X,(hI,vEF),O,O,(vEH),X,(hEA),O,O,O,E,(vB),(hEE),O,O,(hB,vB),O,O,X,(hEG),A,O,I,O,X,X,(hA),D,B,X','6,X,(vJ),(vHA),X,X,X,(hHH),D,O,(vHG),X,X,(hI),O,O,F,(vDG),X,X,(hDJ),O,O,O,(vHF),X,X,(hHF),O,O,E,X,X,X,(hHE),B,O','6,X,X,X,X,(vFI),(vE),X,X,X,(hH,vA),J,I,X,X,(hGF,vD),O,O,F,X,(hGF,vC),O,O,A,X,(hD),O,O,O,X,X,(hD),O,O,X,X,X','7,X,X,(vHG),(vE),X,X,X,X,(hGD),O,O,(vGA),(vHC),(vAJ),X,(hGD,vAC),O,O,O,O,O,(hGC),O,O,(hAA,vGC),O,O,O,(hAC),O,O,F,(hGD,vD),O,O,(hHB),O,O,O,O,O,X,X,X,X,(hI),O,D,X','7,X,X,(vBG),(vBJ),X,(vBD),(vE),X,(hC),O,O,(hBB,vAG),O,C,X,(hBE),O,O,O,O,D,X,(hBG),O,O,O,(vBE),X,X,(vE),(hBI,vJ),O,O,O,X,(hCG),F,G,O,O,O,X,(hC),O,O,(hBJ),O,O,X','7,X,X,X,X,X,(vEA),(vJJ),X,X,(vED),(vJI),(hF),O,O,X,(hB),O,O,(hJH,vB),O,O,X,(hED),O,B,O,O,X,X,(hJI,vJI),O,O,C,O,X,(hJH),O,O,(hJJ),O,O,X,(hF),J,E,X,X,X,X','6,X,(vF),(vED),X,X,X,(hEI),O,O,(vEA),X,X,(hEJ),O,O,J,(vB),X,X,(hB),O,O,O,(vG),X,X,(hJ),B,O,C,X,X,X,(hF),O,E','6,X,X,X,X,(vCH),(vCD),X,X,X,(hG,vCH),O,O,X,X,(hCH,vCI),O,O,O,X,(hFA,vCE),O,O,J,X,(hFF),O,O,O,X,X,(hI),F,C,X,X,X','6,X,X,(vCH),(vA),X,X,X,(hE,vE),D,O,(vAG),(vHC),(hHB),O,O,C,O,I,(hHA),O,O,(hE,vJ),O,O,(hCH),A,O,O,O,O,X,X,(hHD),O,O,X','7,X,(vF),(vDG),(vGD),X,X,X,(hA),O,D,O,(vI),(vGE),X,(hDG),O,C,O,O,O,X,(hGC),H,O,(hH,vA),O,O,(vGF),X,(hH),O,O,(hGB,vGD),O,O,X,(hDH),O,D,O,O,O,X,X,X,(hA),O,O,G','7,X,X,X,X,(vIG),(vIG),X,X,X,X,(hCJ),O,O,(vCE),X,X,X,(hIE,vEA),O,O,O,X,(vJ),(hEA,vIE),O,O,O,O,(hCH),O,F,O,O,X,X,(hCH),I,B,O,X,X,X,X,(hCH),O,O,X,X,X','7,X,X,X,X,(vJ),(vDB),X,X,X,X,(hDG,vH),O,O,X,X,(vB),(hJ,vEB),E,O,O,(vG),(hDJ),O,F,D,(hI,vDC),O,O,(hA),O,O,(hJ,vA),O,O,I,X,(hDA),O,O,O,X,X,X,(hDH),O,O,X,X,X','6,X,X,X,(vEE),(vJA),(vEI),X,X,(hD,vEE),O,F,O,X,(hED,vEC),O,O,O,O,(hJ),O,O,(hEH,vEI),O,O,(hIB),O,O,O,O,X,(hII),O,O,O,X,X','6,X,(vE),(vGH),X,X,X,(hC),O,J,(vFJ),X,X,(hGH),O,O,O,(vJ),X,X,(hFA),B,O,I,(vFF),X,X,(hFG),O,O,O,X,X,X,(hB),F,G','6,X,X,(vIF),(vIJ),X,X,X,(hD,vIC),O,O,X,X,(hIB),O,O,O,(vIG),(vA),(hBF),O,O,F,I,O,X,X,(hE),D,O,F,X,X,(hIF),O,C,X','7,X,(vCD),(vB),X,X,X,X,(hII),O,D,(vA),X,X,X,(hIJ),O,O,O,(vII),X,X,(hID),O,O,O,O,(vIJ),(vCJ),X,X,(hCA),H,O,F,O,X,X,X,(hA),O,O,G,X,X,X,X,(hII),J,O','7,X,(vC),(vFF),X,X,(vHF),(vD),(hFD),O,O,(vHG),(hA,vFJ),O,O,(hHF),O,O,O,O,O,O,X,X,(hFG,vFH),O,O,O,X,X,(hFB,vI),O,O,O,(vFB),(vB),(hIG),O,O,O,O,D,J,(hG),O,I,X,(hFE),O,O','7,X,(vHJ),(vDE),X,X,(vDI),(vHH),(hHG),O,J,(vHJ),(hJ),O,O,(hHE),O,O,O,(hHJ,vB),O,O,X,(hHH),O,O,O,O,X,X,(hDJ,vHA),D,O,E,O,(vF),(hHJ),O,O,(hA),O,O,E,(hHA),O,O,X,(hI),O,O','7,X,(vEH),(vFA),X,X,X,X,(hEB),O,O,(vFA),X,X,X,(hFD),O,O,O,(vEE),(vID),X,X,(hFB),O,O,O,O,X,X,(hFJ),O,O,O,O,(vEE),X,X,X,(hJ),O,B,O,X,X,X,X,(hEH),C,O','6,X,(vJ),(vE),X,X,X,(hA),B,C,(vCJ),X,X,(hCG),O,O,O,(vCD),X,X,(hHF),O,O,O,(vJ),X,X,(hE),O,O,H,X,X,X,(hCE),O,O','6,X,(vGC),(vGH),X,X,X,(hGG),O,O,(vGB),X,X,(hGI),E,O,I,(vGG),X,X,(hIJ),O,C,O,(vA),X,X,(hD),G,O,O,X,X,X,(hD),O,O','6,X,X,X,X,(vIG),(vII),X,X,X,(hE,vIA),I,G,X,X,(hGJ,vGF),O,C,O,X,(hIE,vII),D,O,O,X,(hGJ),O,B,O,X,X,(hA),O,J,X,X,X','6,X,X,X,X,(vIA),(vE),X,X,(vJB),(hB,vII),I,J,X,(hIF),O,O,O,H,X,(hIB,vG),D,J,O,X,(hJG),C,O,O,F,X,(hB),O,O,X,X,X','7,X,X,X,(vDB),(vGG),X,X,X,X,(hGH),O,O,(vGA),(vGA),X,X,(hGF,vGA),O,O,O,O,X,(hGA,vGE),B,O,(hGD,vI),O,O,(hJ),O,I,(hGE,vGG),O,O,X,(hDA),O,D,O,O,X,X,X,X,(hF),O,O,X,X','6,X,X,X,(vFB),(vI),X,X,X,(hGF),O,O,(vGA),X,(vH),(hGA,vFD),O,O,O,(hFF),O,A,O,O,C,(hGG),O,J,O,X,X,X,(hGH),O,D,X,X','6,X,X,(vGA),(vA),X,X,X,(hB,vGE),O,O,(vHJ),X,(hBD),O,O,O,O,(vGH),(hGC),O,O,(hGJ,vGE),O,O,X,(hGG),O,F,O,O,X,X,(hGC),O,O,X','7,X,X,(vCE),(vG),(vI),X,X,X,(hEE),A,O,E,(vCD),(vCH),X,(hEG,vCD),O,O,O,O,O,(hA),G,C,X,(hEH),O,O,(hEE),O,O,(vI),(hA,vD),O,O,(hCF),O,O,O,O,O,X,X,X,(hED),O,O,B,X','7,X,(vG),(vDC),X,(vBA),(vDG),X,(hJ),O,G,(hDA,vBA),O,O,X,(hBC),O,O,G,O,O,X,X,(hDH),O,O,O,(vG),X,X,X,(hG,vDI),O,O,O,(vJ),X,(hBB),E,O,O,O,O,X,(hH),O,J,(hB),O,O','6,X,X,X,(vJG),(vCG),X,X,(vJG),(hJB,vJH),O,O,X,(hJH),I,B,O,O,(vD),(hJB),O,O,(hA,vJG),O,O,X,(hJB),O,B,O,O,X,(hF),I,C,X,X','7,X,(vA),(vE),X,X,(vD),(vB),(hF),O,O,(vJJ),(hI,vGD),O,O,(hGD),O,O,O,O,I,O,X,X,(hJI),O,O,X,X,X,(vJE),(hA,vF),I,O,(vD),(vJJ),(hGA),O,O,O,J,O,O,(hH),O,O,X,(hI),O,O','7,X,X,(vEH),(vEF),X,X,X,X,(hEI,vIH),O,O,(vEI),X,X,(hEI),O,O,O,O,(vIE),(vEJ),(hD),O,O,(hEH,vH),O,O,O,(hEC),O,O,O,(hD,vC),H,G,X,X,(hIA),O,O,O,O,X,X,X,(hD),E,O,X','7,X,X,X,X,X,(vEA),(vCJ),X,X,X,X,(hCD,vCC),O,O,X,X,(vCI),(hCJ,vEH),O,O,O,X,(hDH),O,J,B,O,X,X,(hCH,vD),O,O,O,O,X,(hCJ),O,O,O,X,X,X,(hJ),O,G,X,X,X,X','7,X,(vB),(vFF),X,(vEI),(vFE),X,(hH),O,O,(hFC,vIB),G,O,X,(hFC),O,O,O,O,O,X,X,X,(hFH),O,D,X,X,X,X,(hFF,vFG),O,O,(vFE),(vFH),X,(hEE),O,O,J,O,O,X,(hFG),O,O,(hFG),O,O','6,X,(vHE),(vII),X,X,X,(hHB),O,O,(vHF),(vHJ),X,(hHD),B,O,O,O,X,X,(hG),H,O,O,(vHE),X,(hCA),O,O,E,B,X,X,X,(hHB),O,G','6,X,(vH),(vAF),X,X,X,(hAC),O,O,(vAD),X,X,(hDI),J,O,O,(vAH),X,X,(hAC),O,O,O,(vAI),X,X,(hH),O,O,B,X,X,X,(hAH),O,E','6,X,(vC),(vHA),X,X,X,(hC),O,J,(vHA),X,X,(hF),J,O,O,(vHC),X,X,(hI),O,J,O,(vF),X,X,(hEJ),O,O,B,X,X,X,(hG),O,O','6,X,X,X,(vFJ),(vJC),X,X,(vFF),(hFF,vJE),O,O,X,(hFH),O,F,O,O,(vD),(hFI),O,C,(hE,vH),D,O,X,(hJC),O,O,O,A,X,(hFG),O,J,X,X','7,X,X,X,X,X,(vDE),(vBB),X,(vC),(vDF),X,(hBF),O,O,(hH),O,O,(vE),(hH,vBI),B,O,(hDF),O,O,O,O,D,(vE),X,(hDI,vBE),O,O,C,O,B,(hBF),O,A,X,(hG),E,D,(hG),O,O,X,X,X,X','7,X,(vJ),(vFH),X,X,X,X,(hHH),F,A,X,X,(vGE),(vA),(hI),O,O,(vC),(hF,vD),O,O,X,(hHC,vF),H,O,O,O,O,(hGJ),O,O,O,O,O,(vE),(hE),O,O,X,(hHI),O,O,X,X,X,X,(hA),O,O','7,X,X,(vCD),(vCB),(vF),X,X,X,(hCA,vCJ),O,O,O,(vFH),X,(hCD),O,O,O,O,O,(vCB),(hH),O,O,X,(hI),O,O,(hCE),O,B,(vCE),(hCH,vCI),O,G,X,(hFA),O,G,O,O,O,X,X,(hBC),H,O,O,X','6,X,X,X,X,(vHD),(vHH),X,X,X,(hA,vHH),H,I,X,X,(hHJ,vIG),O,C,O,X,(hHC,vE),O,O,O,X,(hIG),J,O,O,X,X,(hHF),O,O,X,X,X','6,X,X,(vFD),(vJB),X,X,X,(hH,vH),O,O,(vJD),X,(hFH),O,O,O,O,(vJI),(hJD),O,O,(hJD,vG),J,E,X,(hJD),O,O,O,O,X,X,(hB),A,O,X','6,X,X,X,(vC),(vDC),X,X,(vF),(hHB,vDI),O,O,(vDJ),(hDG),O,O,E,O,O,(hHA),O,O,(hHD,vG),O,O,(hEJ),O,O,F,O,O,X,(hJ),O,O,X,X','7,X,X,X,X,X,(vEJ),(vG),X,X,X,X,(hD,vI),C,O,X,X,(vEG),(hFE,vFE),O,O,O,X,(hFD),O,O,O,O,X,X,(hEC,vFI),O,O,O,O,X,(hEC),B,O,H,X,X,X,(hJ),O,O,X,X,X,X','7,X,(vI),(vAC),X,X,(vAI),(vCG),(hB),O,I,X,(hCB,vCD),O,O,(hH),A,D,(hCD,vAF),O,O,O,X,(hAC),O,O,O,O,X,X,(hCF,vCC),O,O,O,O,(vB),(hCB),O,O,O,(hCF),O,O,(hCB),O,J,X,(hB),O,O','6,X,X,X,(vJB),(vIG),X,X,(vA),(hJI,vJC),O,F,X,(hJB),O,O,O,O,(vJE),(hJD),B,O,(hJB,vD),O,H,X,(hJG),O,I,O,O,X,(hA),O,E,X,X','7,X,X,X,X,(vCD),(vCC),(vB),X,X,X,(hCC,vEC),O,I,O,X,X,(hCH),C,O,O,O,X,X,(hCA),F,O,X,X,X,(vA),(hCH,vCE),O,E,X,X,(hGA),C,O,O,O,X,X,(hCE),O,O,O,X,X,X','6,X,X,X,X,(vJI),(vA),X,X,(vJH),(hJE,vJI),O,G,X,(hJE),F,O,O,D,X,(hC,vB),O,E,O,X,(hJH),O,O,O,O,X,(hJD),O,E,X,X,X','6,X,X,X,X,(vAJ),(vAJ),X,X,X,(hAF,vGB),O,O,X,X,(hAE,vD),O,O,O,X,(hAJ,vF),O,J,O,X,(hAF),O,O,H,X,X,(hB),O,I,X,X,X','7,X,X,X,X,(vH),(vIE),X,X,X,X,(hA,vA),O,O,X,X,(vID),(hF,vCH),O,O,A,(vIE),(hIH),O,O,O,(hIA,vIH),O,O,(hIE),O,O,(hIG,vIA),B,O,O,X,(hIF),O,G,A,X,X,X,(hIE),O,D,X,X,X','7,X,(vEF),(vB),(vFC),X,X,X,(hH),O,O,O,(vEA),X,X,(hED),C,O,O,O,X,X,X,X,(hEG),O,F,X,X,X,X,(hEI),O,O,(vEH),(vI),X,X,(hFH),O,O,O,O,X,X,X,(hEE),O,I,O','6,X,(vHI),(vDG),X,X,X,(hHE),J,O,(vDG),X,X,(hHC),H,O,O,(vHA),X,X,(hDH),F,O,G,(vHE),X,X,(hHC),O,O,O,X,X,X,(hHE),O,O','6,X,X,(vAD),(vAE),X,X,X,(hAA),O,O,(vAD),(vAA),X,(hAI,vI),O,F,D,J,(hC),A,O,(hB,vJ),A,E,(hAB),O,I,C,J,X,X,X,(hI),O,H,X','6,X,X,(vDA),(vE),X,X,X,(hJ,vDE),O,F,(vGG),X,(hDJ),O,O,O,O,(vC),(hDD),O,O,(hJ,vI),O,O,X,(hGG),O,D,O,O,X,X,(hDA),G,B,X','7,X,X,(vJD),(vG),(vI),X,X,X,(hG),O,O,H,(vEB),(vEF),X,(hEB),O,O,B,O,J,X,(hEJ,vA),O,H,(hEE,vEA),O,O,(hA),O,O,(hEJ,vG),O,O,X,(hJF),O,O,O,O,O,X,X,X,(hG),F,O,O,X','6,X,X,X,X,(vEJ),(vG),X,X,X,(hDE,vF),O,O,X,X,(hDJ,vF),O,O,O,X,(hA,vDA),O,O,O,X,(hDI),B,O,O,X,X,(hDE),C,O,X,X,X','6,X,X,(vAC),(vD),X,X,X,(hD,vEI),O,O,(vBC),X,(hBA),O,O,O,O,(vH),(hEF),O,O,(hEI,vF),O,O,X,(hEF),O,O,A,O,X,X,(hEE),G,D,X','6,X,X,(vGB),(vD),X,X,X,(hGG),A,C,(vGJ),(vC),X,(hGG,vGC),O,O,O,J,(hGH),O,O,(hE,vI),G,H,(hHF),O,H,O,O,X,X,X,(hE),O,O,X','6,X,X,(vIJ),(vCD),X,X,X,(hCD),O,O,(vCI),(vCG),X,(hIH,vCC),G,O,O,O,(hCE),O,I,(hCH,vCD),G,O,(hIC),B,D,O,O,X,X,X,(hA),O,O,X','7,X,(vII),(vDH),(vID),X,X,X,(hIG),O,O,O,X,X,X,(hDA),O,C,J,(vII),X,X,X,(hID),F,O,O,(vDH),X,X,X,(hID),O,O,O,(vID),X,X,X,(hIE),A,O,O,X,X,X,(hDD),O,O,O','7,X,(vEB),(vF),X,X,X,X,(hED),O,O,(vAJ),(vED),(vD),X,(hIB),O,O,O,G,O,X,X,X,(hF,vA),O,O,O,X,X,(hED),O,O,F,(vA),(vEB),X,(hIE),O,H,O,O,O,X,X,X,X,(hEE),O,O','7,X,X,X,X,(vCA),(vCE),(vB),X,X,X,(hF),O,O,O,X,X,X,(hJG,vCD),I,O,O,X,X,(hF,vB),O,O,O,X,X,(hJI,vCI),O,F,O,X,X,(hD),O,O,O,X,X,X,(hCI),O,O,O,X,X,X','6,X,(vJI),(vI),X,X,X,(hH),O,O,(vD),X,X,(hJA),F,O,O,(vJH),X,X,(hJI),C,G,O,(vJJ),X,X,(hD),O,O,O,X,X,X,(hJE),O,O','6,X,X,X,(vDC),(vAE),X,X,X,(hI),O,B,(vI),X,(vC),(hJ,vDE),O,O,O,(hAF),A,D,O,O,O,(hI),O,O,G,X,X,X,(hDA),H,O,X,X','7,X,X,X,(vFD),(vAF),X,X,X,(vFD),(hFE,vFA),B,O,X,X,(hHI),O,O,O,O,(vFF),X,(hFI),O,O,(hC,vG),O,H,(vFA),X,(hE),O,O,(hFB,vC),O,O,X,X,(hFJ),O,G,O,O,X,X,(hH),O,O,X,X','7,X,X,X,X,(vD),(vHD),X,X,X,(vDH),(hA,vJJ),O,O,(vE),X,(hHB,vJH),O,O,O,E,J,(hJE),H,O,O,(hD,vF),O,O,(hJG),E,O,(hJE,vJG),C,O,O,(hHH),J,O,O,O,O,X,X,(hJJ),O,O,X,X,X','7,X,X,X,X,(vBA),(vEB),X,X,X,(vBG),(hC,vBB),O,O,X,X,(hBD,vBA),O,O,O,O,(vBJ),(hBC),O,O,O,(hBG,vBD),A,O,(hBB),O,O,(hEE,vBF),O,O,D,X,(hBJ),O,O,O,I,X,X,(hBD),O,O,X,X,X','7,X,X,X,X,X,(vDG),(vC),X,(vB),(vFH),X,(hC),E,O,(hA),O,O,(vDD),(hH,vDB),O,O,(hDA),C,O,O,O,O,(vE),X,(hFH,vDE),O,O,H,O,F,(hDH),O,O,X,(hDI),O,O,(hJ),O,O,X,X,X,X','6,X,(vB),(vE),X,X,X,(hA),D,O,(vA),X,X,(hH),O,C,O,(vIG),X,X,(hDI),O,O,O,(vDF),X,X,(hIF),O,O,O,X,X,X,(hH),O,O','7,X,(vHF),(vC),X,X,(vC),(vHF),(hC),O,O,(vBC),(hA,vBF),O,O,(hBE),O,O,O,O,O,O,X,X,(hHD),A,O,X,X,X,(vD),(hJ,vHA),O,O,(vHI),(vC),(hCH),J,O,O,O,O,B,(hHH),O,O,X,(hE),O,O','6,X,X,X,(vJ),(vDA),X,X,(vFD),(hB,vFE),O,O,(vDA),(hDJ),O,O,O,O,O,(hDE),O,O,(hDA,vC),O,H,(hBA),O,I,O,G,O,X,(hJ),E,O,X,X','6,X,(vGA),(vA),X,X,X,(hGE),O,O,(vGD),X,X,(hGA),O,G,A,(vED),X,X,(hGE),O,O,O,(vGD),X,X,(hEB),C,H,F,X,X,X,(hGE),A,I','6,X,(vIC),(vFD),X,X,X,(hIG),O,C,(vIB),X,X,(hFJ),O,O,O,(vII),X,X,(hIE),O,O,F,(vIA),X,X,(hIJ),F,I,O,X,X,X,(hIC),O,O','6,X,X,X,(vJG),(vHH),X,X,X,(hHA),O,O,(vHD),X,(vE),(hJF,vHJ),O,O,O,(hHB),F,O,D,O,O,(hE),O,J,O,X,X,X,(hHE),I,O,X,X','7,X,X,X,(vGG),(vI),(vEC),X,X,(vBH),(hJ,vBI),O,O,O,X,(hBJ),O,O,O,O,O,(vJ),(hGJ),O,O,X,(hA),O,O,(hGC),O,O,(vC),(hGB,vGJ),O,O,X,(hBF),O,O,O,O,B,X,(hBH),O,O,O,X,X','7,X,X,X,X,X,(vD),(vHB),X,X,(vG),(vFC),(hHA,vAI),O,O,X,(hAB),O,O,O,O,O,X,(hAD),O,O,O,(vHB),X,X,(vF),(hAF,vHI),O,O,O,X,(hAB),O,O,O,O,O,X,(hB),O,E,X,X,X,X','6,X,(vBC),(vDF),X,X,X,(hBE),O,O,(vDB),X,X,(hDG),O,J,O,(vC),X,X,(hBI),O,O,O,(vBB),X,X,(hBA),O,O,D,X,X,X,(hBG),F,O','6,X,X,X,(vH),(vDC),(vGA),X,X,(hA,vIE),O,O,O,X,(hIG,vGG),O,O,O,O,(hF),O,O,(hGF,vJ),J,O,(hGA),O,O,O,O,X,(hIE),O,O,O,X,X','6,X,(vHC),(vHJ),X,X,X,(hHC),A,B,(vA),X,X,(hHI),O,O,O,(vHA),X,X,(hD),F,O,O,(vB),X,X,(hII),G,O,O,X,X,X,(hB),O,O','7,X,(vH),(vJA),X,X,(vIE),(vJI),(hJC),O,O,(vDG),(hJE,vIG),O,O,(hDD),I,O,O,O,O,O,X,X,(hII,vIG),O,O,O,X,X,(hIE,vJA),O,O,O,(vB),(vJI),(hDG),C,O,O,O,O,O,(hJF),O,O,X,(hH),O,O','7,X,(vHH),(vBE),X,X,X,X,(hE),B,O,X,(vHF),(vBJ),X,(hHI),C,O,(hJ,vHI),O,O,X,X,(hBC),D,O,O,O,X,X,(hHH),O,O,D,O,(vHF),X,(hHD),F,O,(hHD),G,O,X,X,X,X,(hHE),O,O','7,X,X,X,X,X,(vIF),(vI),X,X,X,X,(hB,vGF),O,O,X,X,(vEG),(hGG,vB),O,O,O,X,(hGJ),O,O,O,H,X,X,(hGA,vA),O,O,O,O,X,(hGC),I,H,O,X,X,X,(hH),G,J,X,X,X,X','7,X,X,X,X,X,(vJF),(vJF),X,X,X,X,(hJD),A,O,X,X,(vBG),(vJB),(hI,vI),O,O,X,(hBD,vJF),F,O,O,E,O,(hIB),O,O,O,O,C,X,(hJG),O,B,X,X,X,X,(hI),O,J,X,X,X,X','6,X,X,(vEI),(vC),X,X,X,(hH,vGG),O,O,(vGD),X,(hBJ),O,O,O,O,(vD),(hGI),O,O,(hD,vD),E,G,X,(hBG),O,O,A,O,X,X,(hJ),O,O,X','7,X,X,X,X,(vFI),(vJF),X,X,X,X,(hJH),O,O,(vJC),X,X,X,(hEE,vEC),O,O,O,X,(vJE),(hED,vEF),O,O,O,G,(hJB),O,O,O,O,X,X,(hEH),O,O,G,X,X,X,X,(hJG),O,O,X,X,X','7,X,X,X,(vJ),(vEI),X,X,X,X,(hJ,vEC),O,A,(vBD),X,X,(hHC,vEA),O,O,O,I,(vF),(hEE),O,O,(hEE,vHD),B,J,O,(hHE),O,O,O,(hG,vED),O,O,X,(hHD),O,O,O,O,X,X,X,(hEA),O,O,X,X','7,X,X,X,X,X,(vFH),(vED),X,X,X,X,(hEC,vEA),O,O,X,X,(vED),(hFI,vEH),O,O,O,X,(hEE),O,O,A,D,X,X,(hFB,vJ),O,O,O,J,X,(hFI),O,O,O,X,X,X,(hI),O,A,X,X,X,X','6,X,(vB),(vHI),X,X,X,(hHH),O,O,(vHJ),(vGA),X,(hHH),O,O,O,I,X,X,(hGE),O,A,O,(vHE),X,(hHJ),H,B,F,D,X,X,X,(hHJ),O,C'\n]\nkakuro(testPuzzles);\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 57960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-424-kakuro.md",
      "source_type": "git_repo"
    },
    "token_count": 31923,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fde9d883c32ce9240d752495622c8085",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-453-lattice-quadrilaterals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5311000cf542c510044\ntitle: 'Problem 453: Lattice Quadrilaterals'\nchallengeType: 1\nforumTopicId: 302126\ndashedName: problem-453-lattice-quadrilaterals\n--description--\nA simple quadrilateral is a polygon that has four distinct vertices, has no straight angles and does not self-intersect.\nLet $Q(m, n)$ be the number of simple quadrilaterals whose vertices are lattice points with coordinates ($x$, $y$) satisfying $0 ≤ x ≤ m$ and $0 ≤ y ≤ n$.\nFor example, $Q(2, 2) = 94$ as can be seen below:\nIt can also be verified that $Q(3, 7) = 39\\,590$, $Q(12, 3) = 309\\,000$ and $Q(123, 45) = 70\\,542\\,215\\,894\\,646$.\nFind $Q(12\\,345, 6\\,789)\\bmod 135\\,707\\,531$.\n--hints--\nlatticeQuadrilaterals() should return 104354107.\njs\nassert.strictEqual(latticeQuadrilaterals(), 104354107);\n--seed--\n--seed-contents--\n```js\nfunction latticeQuadrilaterals() {\nreturn true;\n}\nlatticeQuadrilaterals();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-453-lattice-quadrilaterals.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2167543cebfb043b3f9b40bb6203ffc1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-452-long-products.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5311000cf542c510043\ntitle: 'Problem 452: Long Products'\nchallengeType: 1\nforumTopicId: 302125\ndashedName: problem-452-long-products\n--description--\nDefine $F(m, n)$ as the number of $n$-tuples of positive integers for which the product of the elements doesn't exceed $m$.\n$F(10, 10) = 571$.\n$F({10}^6, {10}^6)\\bmod 1\\,234\\,567\\,891 = 252\\,903\\,833$.\nFind $F({10}^9, {10}^9)\\bmod 1\\,234\\,567\\,891$.\n--hints--\nlongProducts() should return 345558983.\njs\nassert.strictEqual(longProducts(), 345558983);\n--seed--\n--seed-contents--\n```js\nfunction longProducts() {\nreturn true;\n}\nlongProducts();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 701,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-452-long-products.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0c7b24767892d7291e0efc0d5bf5bdfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-454-diophantine-reciprocals-iii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5331000cf542c510045\ntitle: 'Problem 454: Diophantine reciprocals III'\nchallengeType: 1\nforumTopicId: 302127\ndashedName: problem-454-diophantine-reciprocals-iii\n--description--\nIn the following equation $x$, $y$, and $n$ are positive integers.\n$$\\frac{1}{x} + \\frac{1}{y} = \\frac{1}{n}$$\nFor a limit $L$ we define $F(L)$ as the number of solutions which satisfy $x < y ≤ L$.\nWe can verify that $F(15) = 4$ and $F(1000) = 1069$.\nFind $F({10}^{12})$.\n--hints--\ndiophantineReciprocalsThree() should return 5435004633092.\njs\nassert.strictEqual(diophantineReciprocalsThree(), 5435004633092);\n--seed--\n--seed-contents--\n```js\nfunction diophantineReciprocalsThree() {\nreturn true;\n}\ndiophantineReciprocalsThree();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 817,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-454-diophantine-reciprocals-iii.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d0a1eab5cd6b0142e016cff8f98e68bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-455-powers-with-trailing-digits.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5331000cf542c510046\ntitle: 'Problem 455: Powers With Trailing Digits'\nchallengeType: 1\nforumTopicId: 302129\ndashedName: problem-455-powers-with-trailing-digits\n--description--\nLet $f(n)$ be the largest positive integer $x$ less than ${10}^9$ such that the last 9 digits of $n^x$ form the number $x$ (including leading zeros), or zero if no such integer exists.\nFor example:\n$$\\begin{align}\n& f(4) = 411\\,728\\,896 (4^{411\\,728\\,896} = ...490\\underline{411728896}) \\\\\n& f(10) = 0 \\\\\n& f(157) = 743\\,757 (157^{743\\,757} = ...567\\underline{000743757}) \\\\\n& Σf(n), 2 ≤ n ≤ 103 = 442\\,530\\,011\\,399\n\\end{align}$$\nFind $\\sum f(n)$, $2 ≤ n ≤ {10}^6$.\n--hints--\npowersWithTrailingDigits() should return 450186511399999.\njs\nassert.strictEqual(powersWithTrailingDigits(), 450186511399999);\n--seed--\n--seed-contents--\n```js\nfunction powersWithTrailingDigits() {\nreturn true;\n}\npowersWithTrailingDigits();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1030,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-455-powers-with-trailing-digits.md",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2974a58cb0afcebcbe9891f8d591b900",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-450-hypocycloid-and-lattice-points.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f52e1000cf542c510041\ntitle: 'Problem 450: Hypocycloid and Lattice points'\nchallengeType: 1\nforumTopicId: 302123\ndashedName: problem-450-hypocycloid-and-lattice-points\n--description--\nA hypocycloid is the curve drawn by a point on a small circle rolling inside a larger circle The parametric equations of a hypocycloid centered at the origin, and starting at the right most point is given by:\n$$x(t) = (R - r) \\cos(t) + r \\cos(\\frac{R - r}{r}t)$$\n$$y(t) = (R - r) \\sin(t) - r \\sin(\\frac{R - r}{r} t)$$\nWhere $R$ is the radius of the large circle and $r$ the radius of the small circle Let $C(R, r)$ be the set of distinct points with integer coordinates on the hypocycloid with radius $R$ and $r$ and for which there is a corresponding value of $t$ such that $\\sin(t)$ and $\\cos(t)$ are rational numbers Let $S(R, r) = \\sum_{(x,y) \\in C(R, r)} |x| + |y|$ be the sum of the absolute values of the $x$ and $y$ coordinates of the points in $C(R, r)$ Let $T(N) = \\sum_{R = 3}^N \\sum_{r=1}^{\\left\\lfloor \\frac{R - 1}{2} \\right\\rfloor} S(R, r)$ be the sum of $S(R, r)$ for $R$ and $r$ positive integers, $R\\leq N$ and $2r < R$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2132,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-450-hypocycloid-and-lattice-points.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a56520450e01b4c2919d2dec62b47ca3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-450-hypocycloid-and-lattice-points.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "there is a corresponding value of $t$ such that $\\sin(t)$ and $\\cos(t)$ are rational numbers Let $S(R, r) = \\sum_{(x,y) \\in C(R, r)} |x| + |y|$ be the sum of the absolute values of the $x$ and $y$ coordinates of the points in $C(R, r)$ Let $T(N) = \\sum_{R = 3}^N \\sum_{r=1}^{\\left\\lfloor \\frac{R - 1}{2} \\right\\rfloor} S(R, r)$ be the sum of $S(R, r)$ for $R$ and $r$ positive integers, $R\\leq N$ and $2r < R$You are given:\n$$\\begin{align}\nC(3, 1) = & \\{(3, 0), (-1, 2), (-1,0), (-1,-2)\\} \\\\\nC(2500, 1000) = & \\{(2500, 0), (772, 2376), (772, -2376), (516, 1792), (516, -1792), (500, 0), (68, 504), \\\\\n&(68, -504),(-1356, 1088), (-1356, -1088), (-1500, 1000), (-1500, -1000)\\}\n\\end{align}$$\nNote: (-625, 0) is not an element of $C(2500, 1000)$ because $\\sin(t)$ is not a rational number for the corresponding values of $t$ $S(3, 1) = (|3| + |0|) + (|-1| + |2|) + (|-1| + |0|) + (|-1| + |-2|) = 10$\n$T(3) = 10$; $T(10) = 524$; $T(100) = 580\\,442$; $T({10}^3) = 583\\,108\\,600$ Find $T({10}^6)$ --hints--\nhypocycloidAndLatticePoints() should return 583333163984220900 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2132,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-450-hypocycloid-and-lattice-points.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1444c9742324f459509c9880b1be2551",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-450-hypocycloid-and-lattice-points.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "504), \\\\ &(68, -504),(-1356, 1088), (-1356, -1088), (-1500, 1000), (-1500, -1000)\\} \\end{align}$$ Note: (-625, 0) is not an element of $C(2500, 1000)$ because $\\sin(t)$ is not a rational number for the corresponding values of $t$ $S(3, 1) = (|3| + |0|) + (|-1| + |2|) + (|-1| + |0|) + (|-1| + |-2|) = 10$ $T(3) = 10$; $T(10) = 524$; $T(100) = 580\\,442$; $T({10}^3) = 583\\,108\\,600$ Find $T({10}^6)$ --hints-- hypocycloidAndLatticePoints() should return 583333163984220900 js assertstrictEqual(hypocycloidAndLatticePoints(), 583333163984220900);\n--seed--\n--seed-contents--\n```js\nfunction hypocycloidAndLatticePoints() {\nreturn true;\n}\nhypocycloidAndLatticePoints();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2132,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-450-hypocycloid-and-lattice-points.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "10c050fe64a13c875fbdb214d3b7358b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-456-triangles-containing-the-origin-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5351000cf542c510047\ntitle: 'Problem 456: Triangles containing the origin II'\nchallengeType: 1\nforumTopicId: 302130\ndashedName: problem-456-triangles-containing-the-origin-ii\n--description--\nDefine:\n$$\\begin{align}\n& x_n = ({1248}^n\\bmod 32323) - 16161 \\\\\n& y_n = ({8421}^n\\bmod 30103) - 15051 \\\\\n& P_n = \\{(x_1, y_1), (x_2, y_2), \\ldots, (x_n, y_n)\\}\n\\end{align}$$\nFor example,\n$$P_8 = \\{(-14913, -6630), (-10161, 5625), (5226, 11896), (8340, -10778), (15852, -5203), (-15165, 11295), (-1427, -14495), (12407, 1060)\\}$$\nLet $C(n)$ be the number of triangles whose vertices are in $P_n$ which contain the origin in the interior.\nExamples:\n$$\\begin{align}\n& C(8) = 20 \\\\\n& C(600) = 8\\,950\\,634 \\\\\n& C(40\\,000) = 2\\,666\\,610\\,948\\,988\n\\end{align}$$\nFind $C(2\\,000\\,000)$.\n--hints--\ntrianglesContainingOriginTwo() should return 333333208685971500.\njs\nassert.strictEqual(trianglesContainingOriginTwo(), 333333208685971500);\n--seed--\n--seed-contents--\n```js\nfunction trianglesContainingOriginTwo() {\nreturn true;\n}\ntrianglesContainingOriginTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1182,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-456-triangles-containing-the-origin-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e7c4fab0039ab4ed5b8e968c0257513c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-457-a-polynomial-modulo-the-square-of-a-prime.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5361000cf542c510048\ntitle: 'Problem 457: A polynomial modulo the square of a prime'\nchallengeType: 1\nforumTopicId: 302131\ndashedName: problem-457-a-polynomial-modulo-the-square-of-a-prime\n--description--\nLet $f(n) = n^2 - 3n - 1$.\nLet $p$ be a prime.\nLet $R(p)$ be the smallest positive integer $n$ such that $f(n)\\bmod p^2 = 0$ if such an integer $n$ exists, otherwise $R(p) = 0$.\nLet $SR(L)$ be $\\sum R(p)$ for all primes not exceeding $L$.\nFind $SR({10}^7)$.\n--hints--\npolynomialModuloSquareOfPrime() should return 2647787126797397000.\njs\nassert.strictEqual(polynomialModuloSquareOfPrime(), 2647787126797397000);\n--seed--\n--seed-contents--\n```js\nfunction polynomialModuloSquareOfPrime() {\nreturn true;\n}\npolynomialModuloSquareOfPrime();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 846,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-457-a-polynomial-modulo-the-square-of-a-prime.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "33fbd3218da39b6fead43111e959f0da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-458-permutations-of-project.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5361000cf542c510049\ntitle: 'Problem 458: Permutations of Project'\nchallengeType: 1\nforumTopicId: 302132\ndashedName: problem-458-permutations-of-project\n--description--\nConsider the alphabet $A$ made out of the letters of the word project: $A = \\{c, e, j, o, p, r, t\\}$.\nLet $T(n)$ be the number of strings of length $n$ consisting of letters from $A$ that do not have a substring that is one of the 5040 permutations of project.\n$T(7) = 7^7 - 7! = 818\\,503$.\nFind $T({10}^{12})$. Give the last 9 digits of your answer.\n--hints--\npermutationsOfProject() should return 423341841.\njs\nassert.strictEqual(permutationsOfProject(), 423341841);\n--seed--\n--seed-contents--\n```js\nfunction permutationsOfProject() {\nreturn true;\n}\npermutationsOfProject();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 857,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-458-permutations-of-project.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a48464d31af41a6de4643521e0a7a164",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-459-flipping-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5371000cf542c51004a\ntitle: 'Problem 459: Flipping game'\nchallengeType: 1\nforumTopicId: 302133\ndashedName: problem-459-flipping-game\n--description--\nThe flipping game is a two player game played on a $N$ by $N$ square board.\nEach square contains a disk with one side white and one side black.\nThe game starts with all disks showing their white side.\nA turn consists of flipping all disks in a rectangle with the following properties:\nthe upper right corner of the rectangle contains a white disk\nthe rectangle width is a perfect square (1, 4, 9, 16, ...)\nthe rectangle height is a triangular number (1, 3, 6, 10, ...)\nPlayers alternate turns. A player wins by turning the grid all black.\nLet $W(N)$ be the number of winning moves for the first player on a $N$ by $N$ board with all disks white, assuming perfect play.\n$W(1) = 1$, $W(2) = 0$, $W(5) = 8$ and $W({10}^2) = 31\\,395$.\nFor $N = 5$, the first player's eight winning first moves are:\nFind $W({10}^6)$.\n--hints--\nflippingGame() should return 3996390106631.\njs\nassert.strictEqual(flippingGame(), 3996390106631);\n--seed--\n--seed-contents--\n```js\nfunction flippingGame() {\nreturn true;\n}\nflippingGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-459-flipping-game.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "026f2b48e322f15cc42b4243f22bf6de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-463-a-weird-recurrence-relation.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f53c1000cf542c51004e\ntitle: 'Problem 463: A weird recurrence relation'\nchallengeType: 1\nforumTopicId: 302138\ndashedName: problem-463-a-weird-recurrence-relation\n--description--\nThe function $f$ is defined for all positive integers as follows:\n$$\\begin{align}\n& f(1) = 1 \\\\\n& f(3) = 3 \\\\\n& f(2n) = f(n) \\\\\n& f(4n + 1) = 2f(2n + 1) - f(n) \\\\\n& f(4n + 3) = 3f(2n + 1) - 2f(n)\n\\end{align}$$\nThe function $S(n)$ is defined as $\\sum_{i=1}^{n} f(i)$.\n$S(8) = 22$ and $S(100) = 3604$.\nFind $S(3^{37})$. Give the last 9 digits of your answer.\n--hints--\nweirdRecurrenceRelation() should return 808981553.\njs\nassert.strictEqual(weirdRecurrenceRelation(), 808981553);\n--seed--\n--seed-contents--\n```js\nfunction weirdRecurrenceRelation() {\nreturn true;\n}\nweirdRecurrenceRelation();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 891,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-463-a-weird-recurrence-relation.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d8d002946ed54028e24aa6d9837727e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-464-mbius-function-and-intervals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f53d1000cf542c51004f\ntitle: 'Problem 464: Möbius function and intervals'\nchallengeType: 1\nforumTopicId: 302139\ndashedName: problem-464-mbius-function-and-intervals\n--description--\nThe Möbius function, denoted $μ(n)$, is defined as:\n$μ(n) = (-1)^{ω(n)}$ if $n$ is squarefree (where $ω(n)$ is the number of distinct prime factors of $n$)\n$μ(n) = 0$ if $n$ is not squarefree.\nLet $P(a, b)$ be the number of integers $n$ in the interval $[a, b]$ such that $μ(n) = 1$.\nLet $N(a, b)$ be the number of integers $n$ in the interval $[a, b]$ such that $μ(n) = -1$.\nFor example, $P(2, 10) = 2$ and $N(2, 10) = 4$.\nLet $C(n)$ be the number of integer pairs $(a, b)$ such that:\n$1 ≤ a ≤ b ≤ n$,\n$99 \\times N(a, b) ≤ 100 \\times P(a, b)$, and\n$99 \\times P(a, b) ≤ 100 \\times N(a, b)$.\nFor example, $C(10) = 13$, $C(500) = 16\\,676$ and $C(10\\,000) = 20\\,155\\,319$.\nFind $C(20\\,000\\,000)$.\n--hints--\nmobiusFunctionAndIntervals() should return 198775297232878.\njs\nassert.strictEqual(mobiusFunctionAndIntervals(), 198775297232878);\n--seed--\n--seed-contents--\n```js\nfunction mobiusFunctionAndIntervals() {\nreturn true;\n}\nmobiusFunctionAndIntervals();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1276,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-464-mbius-function-and-intervals.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c0e89efba43afdec9cff056f0dc6894b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-460-an-ant-on-the-move.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5381000cf542c51004b\ntitle: 'Problem 460: An ant on the move'\nchallengeType: 1\nforumTopicId: 302135\ndashedName: problem-460-an-ant-on-the-move\n--description--\nOn the Euclidean plane, an ant travels from point $A(0, 1)$ to point $B(d, 1)$ for an integer $d$ In each step, the ant at point ($x_0$, $y_0$) chooses one of the lattice points ($x_1$, $y_1$) which satisfy $x_1 ≥ 0$ and $y_1 ≥ 1$ and goes straight to ($x_1$, $y_1$) at a constant velocity $v$ The value of $v$ depends on $y_0$ and $y_1$ as follows:\nIf $y_0 = y_1$, the value of $v$ equals $y_0$ If $y_0 ≠ y_1$, the value of $v$ equals $\\frac{y_1 - y_0}{\\ln y_1 - \\ln y_0}$ The left image is one of the possible paths for $d = 4$ First the ant goes from $A(0, 1)$ to $P_1(1, 3)$ at velocity $\\frac{3 - 1}{\\ln 3 - \\ln 1} ≈ 1 8205$ Then the required time is $\\frac{\\sqrt{5}}{1 820} ≈ 1 2283$ From $P_1(1, 3)$ to $P_2(3, 3)$ the ant travels at velocity 3 so the required time is $\\frac{2}{3} ≈ 0 6667$ From $P_2(3, 3)$ to $B(4, 1)$ the ant travels at velocity $\\frac{1 - 3}{\\ln 1 - \\ln 3} ≈ 1 8205$ so the required time is $\\frac{\\sqrt{5}}{1 8205} ≈ 1 2283$ Thus the total required time is $1 2283 + 0 6667 + 1 2283 = 3 1233$ The right image is another path",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2210,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-460-an-ant-on-the-move.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "790424f63bbc4e4499f508cbb3a2cc30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-460-an-ant-on-the-move.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2283$ From $P_1(1, 3)$ to $P_2(3, 3)$ the ant travels at velocity 3 so the required time is $\\frac{2}{3} ≈ 0 6667$ From $P_2(3, 3)$ to $B(4, 1)$ the ant travels at velocity $\\frac{1 - 3}{\\ln 1 - \\ln 3} ≈ 1 8205$ so the required time is $\\frac{\\sqrt{5}}{1 8205} ≈ 1 2283$ Thus the total required time is $1 2283 + 0 6667 + 1 2283 = 3 1233$ The right image is another pathThe total required time is calculated as $0 98026 + 1 + 0 98026 = 2 96052$ It can be shown that this is the quickest path for $d = 4$ Let $F(d)$ be the total required time if the ant chooses the quickest path For example, $F(4) ≈ 2 960\\,516\\,287$ We can verify that $F(10) ≈ 4 668\\,187\\,834$ and $F(100) ≈ 9 217\\,221\\,972$ Find $F(10\\,000)$ Give your answer rounded to nine decimal places --hints--\nantOnTheMove() should return 18 420738199 js\nassert strictEqual(antOnTheMove(), 18 420738199);\n--seed--\n--seed-contents--\n```js\nfunction antOnTheMove() {\nreturn true;\n}\nantOnTheMove();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2210,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-460-an-ant-on-the-move.md",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a1303e475c8fe97c5b28ea135e81d17a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-462-permutation-of-3-smooth-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f53b1000cf542c51004d\ntitle: 'Problem 462: Permutation of 3-smooth numbers'\nchallengeType: 1\nforumTopicId: 302137\ndashedName: problem-462-permutation-of-3-smooth-numbers\n--description--\nA 3-smooth number is an integer which has no prime factor larger than 3 For an integer $N$, we define $S(N)$ as the set of 3-smooth numbers less than or equal to $N$ For example, $S(20) = \\{1, 2, 3, 4, 6, 8, 9, 12, 16, 18\\}$ We define $F(N)$ as the number of permutations of $S(N)$ in which each element comes after all of its proper divisors This is one of the possible permutations for $N = 20$ 1, 2, 4, 3, 9, 8, 16, 6, 18, 12 This is not a valid permutation because 12 comes before its divisor 6 1, 2, 4, 3, 9, 8, 12, 16, 6, 18 We can verify that $F(6) = 5$, $F(8) = 9$, $F(20) = 450$ and $F(1000) ≈ 8 8521816557e\\,21$ Find $F({10}^{18})$ Give your answer as a string in scientific notation rounded to ten digits after the decimal point When giving your answer, use a lowercase e to separate mantissa and exponent E g if the answer is $112\\,233\\,445\\,566\\,778\\,899$ then the answer format would be 1 1223344557e17 --hints--\npermutationOf3SmoothNumbers() should return a string js\nassert strictEqual(typeof permutationOf3SmoothNumbers(), 'string');\npermutationOf3SmoothNumbers() should return the string 5 5350769703e1512 js\nassert strictEqual(permutationOf3SmoothNumbers(), '5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1661,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-462-permutation-of-3-smooth-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "43ac400c53461b1c40fdd726a33c840f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-462-permutation-of-3-smooth-numbers.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= 450$ and $F(1000) ≈ 8 8521816557e\\,21$ Find $F({10}^{18})$ Give your answer as a string in scientific notation rounded to ten digits after the decimal point When giving your answer, use a lowercase e to separate mantissa and exponent E g if the answer is $112\\,233\\,445\\,566\\,778\\,899$ then the answer format would be 1 1223344557e17 --hints-- permutationOf3SmoothNumbers() should return a string js assert strictEqual(typeof permutationOf3SmoothNumbers(), 'string'); permutationOf3SmoothNumbers() should return the string 5 5350769703e1512 js assert strictEqual(permutationOf3SmoothNumbers(), '55350769703e1512');\n--seed--\n--seed-contents--\n```js\nfunction permutationOf3SmoothNumbers() {\nreturn true;\n}\npermutationOf3SmoothNumbers();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1661,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-462-permutation-of-3-smooth-numbers.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cb2c44cdd40237c9b353456c1a669fb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-465-polar-polygons.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f53d1000cf542c510050\ntitle: 'Problem 465: Polar polygons'\nchallengeType: 1\nforumTopicId: 302140\ndashedName: problem-465-polar-polygons\n--description--\nThe kernel of a polygon is defined by the set of points from which the entire polygon's boundary is visible. We define a polar polygon as a polygon for which the origin is strictly contained inside its kernel.\nFor this problem, a polygon can have collinear consecutive vertices. However, a polygon still cannot have self-intersection and cannot have zero area.\nFor example, only the first of the following is a polar polygon (the kernels of the second, third, and fourth do not strictly contain the origin, and the fifth does not have a kernel at all):\nNotice that the first polygon has three consecutive collinear vertices.\nLet $P(n)$ be the number of polar polygons such that the vertices $(x, y)$ have integer coordinates whose absolute values are not greater than $n$.\nNote that polygons should be counted as different if they have different set of edges, even if they enclose the same area. For example, the polygon with vertices [(0,0), (0,3), (1,1), (3,0)] is distinct from the polygon with vertices [(0,0), (0,3), (1,1), (3,0), (1,0)].\nFor example, $P(1) = 131$, $P(2) = 1\\,648\\,531$, $P(3) = 1\\,099\\,461\\,296\\,175$ and $P(343)\\bmod 1\\,000\\,000\\,007 = 937\\,293\\,740$.\nFind $P(7^{13})\\bmod 1\\,000\\,000\\,007$.\n--hints--\npolarPolygons() should return 585965659.\njs\nassert.strictEqual(polarPolygons(), 585965659);\n--seed--\n--seed-contents--\n```js\nfunction polarPolygons() {\nreturn true;\n}\npolarPolygons();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1923,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-465-polar-polygons.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ad625bdc4cb2a6a202c2eab3348adf8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-466-distinct-terms-in-a-multiplication-table.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f53e1000cf542c510051\ntitle: 'Problem 466: Distinct terms in a multiplication table'\nchallengeType: 1\nforumTopicId: 302141\ndashedName: problem-466-distinct-terms-in-a-multiplication-table\n--description--\nLet $P(m,n)$ be the number of distinct terms in an $m×n$ multiplication table.\nFor example, a 3×4 multiplication table looks like this:\n$$\\begin{array}{c}\n×          & \\mathbf{1} & \\mathbf{2} & \\mathbf{3} & \\mathbf{4}  \\\\\n\\mathbf{1} & 1          & 2          & 3          & 4  \\\\\n\\mathbf{2} & 2          & 4          & 6          & 8  \\\\\n\\mathbf{3} & 3          & 6          & 9          & 12\n\\end{array}$$\nThere are 8 distinct terms {1, 2, 3, 4, 6, 8, 9, 12}, therefore $P(3, 4) = 8$.\nYou are given that:\n$$\\begin{align}\n& P(64, 64) = 1\\,263, \\\\\n& P(12, 345) = 1\\,998, \\text{ and} \\\\\n& P(32, {10}^{15}) = 13\\,826\\,382\\,602\\,124\\,302. \\\\\n\\end{align}$$\nFind $P(64, {10}^{16})$.\n--hints--\nmultiplicationTable() should return 258381958195474750.\njs\nassert.strictEqual(multiplicationTable(), 258381958195474750);\n--seed--\n--seed-contents--\n```js\nfunction multiplicationTable() {\nreturn true;\n}\nmultiplicationTable();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1259,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-466-distinct-terms-in-a-multiplication-table.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1b128055237daf3a19db28ebb63ee071",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-461-almost-pi.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f53a1000cf542c51004c\ntitle: 'Problem 461: Almost Pi'\nchallengeType: 1\nforumTopicId: 302136\ndashedName: problem-461-almost-pi\n--description--\nLet f(k, n) = $e^\\frac{k}{n} - 1$, for all non-negative integers k Remarkably, f(6, 200) + f(75, 200) + f(89, 200) + f(226, 200) = 3 1415926… ≈ π In fact, it is the best approximation of π of the form f(a, 200) + f(b, 200) + f(c, 200) + f(d, 200) Let almostPi(n) = a2 + b2 + c2 + d2 for a, b, c, d that minimize the error: $\\lvert f(a,n) + f(b,n) + f(c,n) + f(d,n) - \\Pi\\rvert$\nYou are given almostPi(200) = 62 + 752 + 892 + 2262 = 64658 --hints--\nalmostPi should be a function js\nassert isFunction(almostPi);\nalmostPi should return a number js\nassert strictEqual(typeof almostPi(10), 'number');\nalmostPi(29) should return 1208 js\nassert strictEqual(almostPi(29), 1208);\nalmostPi(50) should return 4152 js\nassert strictEqual(almostPi(50), 4152);\nalmostPi(200) should return 64658 js\nassert strictEqual(almostPi(200), 64658);\n--seed--\n--seed-contents--\n```js\nfunction almostPi(n) {\nreturn true;\n}\n```\n--solutions--\n```js\nfunction almostPi(n) {\nconst max_k = Math ceil(n * Math log(Math PI + 1)) + 1;\nconst     f = Array(max_k) fill(0) map((_, i) => Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-461-almost-pi.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2f16883d3041d4e405ac6fb7f04e7847",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-461-almost-pi.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a function js assert isFunction(almostPi); almostPi should return a number js assert strictEqual(typeof almostPi(10), 'number'); almostPi(29) should return 1208 js assert strictEqual(almostPi(29), 1208); almostPi(50) should return 4152 js assert strictEqual(almostPi(50), 4152); almostPi(200) should return 64658 js assert strictEqual(almostPi(200), 64658); --seed-- --seed-contents-- ```js function almostPi(n) { return true; } ``` --solutions-- ```js function almostPi(n) { const max_k = Math ceil(n * Math log(Math PI + 1)) + 1; const f = Array(max_k) fill(0) map((_, i) => Mathexp(i / n) - 1);\n// Pairs of values\nconst pairs     = Array(max_k * (max_k - 1) / 2);\nlet   num_pairs = 0;\nfor (let b = 1; b < max_k; b++) {\nfor (let a = 0; a < b; a++) {\nconst value = f[a] + f[b];\nif (value > Math PI) break;\npairs[num_pairs] = {a, b, value};\nnum_pairs++;\n}\n}\npairs sort((a, b) => a value - b value);\n// Find lowest matching pair for each pair\nlet min_error = Math PI;\nlet min_abcd  = -1;\nfor (let i = 0; i < num_pairs; i++) {\nconst error = Math PI - pairs[i] value;\nlet start   = i;\nlet stop    = num_pairs - 1;\n// Find best match\nwhile (stop - start > 1) {\nlet mid = start + Math floor((stop - start) / 2);\nif (pairs[mid] value > error) stop = mid - 1;\nelse start = mid + 1;\n}\n// Compute new best error\nfor (const j of [start, stop]) {\nconst new_error = Math abs(error - pairs[j] value);\nif (new_error < min_error) {\nmin_error = new_error;\nmin_abcd  = pairs[i] a * pairs[i] a + pairs[i] b * pairs[i] b +\npairs[j] a * pairs[j]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-461-almost-pi.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "638c87edbb881c0f23d75a018b7b5ce3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-461-almost-pi.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1) { let mid = start + Math floor((stop - start) / 2); if (pairs[mid] value > error) stop = mid - 1; else start = mid + 1; } // Compute new best error for (const j of [start, stop]) { const new_error = Math abs(error - pairs[j] value); if (new_error < min_error) { min_error = new_error; min_abcd = pairs[i] a * pairs[i] a + pairs[i] b * pairs[i] b + pairs[j] a * pairs[j]a + pairs[j] b * pairs[j] b;\n}\n}\n}\nreturn min_abcd;\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2632,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-461-almost-pi.md",
      "source_type": "git_repo"
    },
    "token_count": 142,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f5944078a19e0c3d96673f4514926287",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-468-smooth-divisors-of-binomial-coefficients.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5411000cf542c510054\ntitle: 'Problem 468: Smooth divisors of binomial coefficients'\nchallengeType: 1\nforumTopicId: 302143\ndashedName: problem-468-smooth-divisors-of-binomial-coefficients\n--description--\nAn integer is called B-smooth if none of its prime factors is greater than $B$.\nLet $SB(n)$ be the largest B-smooth divisor of $n$.\nExamples:\n$$\\begin{align}\n& S_1(10) = 1 \\\\\n& S_4(2\\,100) = 12 \\\\\n& S_{17}(2\\,496\\,144) = 5\\,712\n\\end{align}$$\nDefine $F(n) = \\displaystyle\\sum_{B = 1}^n \\sum_{r = 0}^n S_B(\\displaystyle\\binom{n}{r})$. Here, $\\displaystyle\\binom{n}{r}$ denotes the binomial coefficient.\nExamples:\n$$\\begin{align}\n& F(11) = 3132 \\\\\n& F(1\\,111)\\bmod 1\\,000\\,000\\,993 = 706\\,036\\,312 \\\\\n& F(111\\,111)\\bmod 1\\,000\\,000\\,993 = 22\\,156\\,169\n\\end{align}$$\nFind $F(11\\,111\\,111)\\bmod 1\\,000\\,000\\,993$.\n--hints--\nsmoothDivisorsOfBinomialCoefficients() should return 852950321.\njs\nassert.strictEqual(smoothDivisorsOfBinomialCoefficients(), 852950321);\n--seed--\n--seed-contents--\n```js\nfunction smoothDivisorsOfBinomialCoefficients() {\nreturn true;\n}\nsmoothDivisorsOfBinomialCoefficients();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1247,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-468-smooth-divisors-of-binomial-coefficients.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "77d895600aa8bd20d695f9527c159042",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-469-empty-chairs.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5411000cf542c510053\ntitle: 'Problem 469: Empty chairs'\nchallengeType: 1\nforumTopicId: 302144\ndashedName: problem-469-empty-chairs\n--description--\nIn a room $N$ chairs are placed around a round table.\nKnights enter the room one by one and choose at random an available empty chair.\nTo have enough elbow room the knights always leave at least one empty chair between each other.\nWhen there aren't any suitable chairs left, the fraction $C$ of empty chairs is determined. We also define $E(N)$ as the expected value of $C$.\nWe can verify that $E(4) = \\frac{1}{2}$ and $E(6) = \\frac{5}{9}$.\nFind $E({10}^{18})$. Give your answer rounded to fourteen decimal places in the form 0.abcdefghijklmn.\n--hints--\nemptyChairs() should return 0.56766764161831.\njs\nassert.strictEqual(emptyChairs(), 0.56766764161831);\n--seed--\n--seed-contents--\n```js\nfunction emptyChairs() {\nreturn true;\n}\nemptyChairs();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 997,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-469-empty-chairs.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "533542dc6e8eb206c8a425831ea29f4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-471-triangle-inscribed-in-ellipse.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5431000cf542c510056\ntitle: 'Problem 471: Triangle inscribed in ellipse'\nchallengeType: 1\nforumTopicId: 302148\ndashedName: problem-471-triangle-inscribed-in-ellipse\n--description--\nThe triangle $ΔABC$ is inscribed in an ellipse with equation $\\frac{x^2}{a^2} + \\frac{y^2}{b^2} = 1$, $0 < 2b < a$, $a$ and $b$ integers.\nLet $r(a, b)$ be the radius of the incircle of $ΔABC$ when the incircle has center $(2b, 0)$ and $A$ has coordinates $\\left(\\frac{a}{2}, \\frac{\\sqrt{3}}{2}b\\right)$.\nFor example, $r(3, 1) = \\frac{1}{2}, r(6, 2) = 1, r(12, 3) = 2$.\nLet $G(n) = \\sum_{a = 3}^n \\sum_{b = 1}^{\\left\\lfloor\\frac{a - 1}{2} \\right\\rfloor} r(a, b)$\nYou are given $G(10) = 20.59722222$, $G(100) = 19223.60980$ (rounded to 10 significant digits).\nFind $G({10}^{11})$. Give your answer as a string in scientific notation rounded to 10 significant digits. Use a lowercase e to separate mantissa and exponent.\nFor $G(10)$ the answer would have been 2.059722222e1\n--hints--\ntriangleInscribedInEllipse() should return a string.\njs\nassert.isString(triangleInscribedInEllipse());\ntriangleInscribedInEllipse() should return the string 1.895093981e31.\njs\nassert.strictEqual(triangleInscribedInEllipse(), '1.895093981e31');\n--seed--\n--seed-contents--\n```js\nfunction triangleInscribedInEllipse() {\nreturn true;\n}\ntriangleInscribedInEllipse();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2093,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-471-triangle-inscribed-in-ellipse.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "211ae7adb1483ee03352e1792ea1c86a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-467-superinteger.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5411000cf542c510052\ntitle: 'Problem 467: Superinteger'\nchallengeType: 1\nforumTopicId: 302142\ndashedName: problem-467-superinteger\n--description--\nAn integer $s$ is called a superinteger of another integer $n$ if the digits of $n$ form a subsequence of the digits of $s$ For example, 2718281828 is a superinteger of 18828, while 314159 is not a superinteger of 151 Let $p(n)$ be the $n$th prime number, and let $c(n)$ be the $n$th composite number For example, $p(1) = 2$, $p(10) = 29$, $c(1) = 4$ and $c(10) = 18$ $$\\begin{align}\n& \\{p(i) : i ≥ 1\\} = \\{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, \\ldots \\} \\\\\n& \\{c(i) : i ≥ 1\\} = \\{4, 6, 8, 9, 10, 12, 14, 15, 16, 18, \\ldots \\}\n\\end{align}$$\nLet $P^D$ the sequence of the digital roots of $\\{p(i)\\}$ ($C^D$ is defined similarly for $\\{c(i)\\}$):\n$$\\begin{align}\n& P^D = \\{2, 3, 5, 7, 2, 4, 8, 1, 5, 2, \\ldots \\} \\\\\n& C^D = \\{4, 6, 8, 9, 1, 3, 5, 6, 7, 9, \\ldots \\}\n\\end{align}$$\nLet $P_n$ be the integer formed by concatenating the first $n$ elements of $P^D$ ($C_n$ is defined similarly for $C^D$)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-467-superinteger.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8f5de48b9f87aa320aa234380c9ab19d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-467-superinteger.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "14, 15, 16, 18, \\ldots \\} \\end{align}$$ Let $P^D$ the sequence of the digital roots of $\\{p(i)\\}$ ($C^D$ is defined similarly for $\\{c(i)\\}$): $$\\begin{align} & P^D = \\{2, 3, 5, 7, 2, 4, 8, 1, 5, 2, \\ldots \\} \\\\ & C^D = \\{4, 6, 8, 9, 1, 3, 5, 6, 7, 9, \\ldots \\} \\end{align}$$ Let $P_n$ be the integer formed by concatenating the first $n$ elements of $P^D$ ($C_n$ is defined similarly for $C^D$)$$\\begin{align}\n& P_{10} = 2\\,357\\,248\\,152 \\\\\n& C_{10} = 4\\,689\\,135\\,679\n\\end{align}$$\nLet $f(n)$ be the smallest positive integer that is a common superinteger of $P_n$ and $C_n$ For example, $f(10) = 2\\,357\\,246\\,891\\,352\\,679$, and $f(100)\\bmod 1\\,000\\,000\\,007 = 771\\,661\\,825$ Find $f(10\\,000)\\bmod 1\\,000\\,000\\,007$ --hints--\nsuperinteger() should return 775181359 js\nassert strictEqual(superinteger(), 775181359);\n--seed--\n--seed-contents--\n```js\nfunction superinteger() {\nreturn true;\n}\nsuperinteger();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-467-superinteger.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9aafdbd84d96a62c5c1ea77c0237e615",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-470-super-ramvok.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5431000cf542c510055\ntitle: 'Problem 470: Super Ramvok'\nchallengeType: 1\nforumTopicId: 302146\ndashedName: problem-470-super-ramvok\n--description--\nConsider a single game of Ramvok:\nLet $t$ represent the maximum number of turns the game lasts If $t = 0$, then the game ends immediately Otherwise, on each turn $i$, the player rolls a die After rolling, if $i < t$ the player can either stop the game and receive a prize equal to the value of the current roll, or discard the roll and try again next turn If $i = t$, then the roll cannot be discarded and the prize must be accepted Before the game begins, $t$ is chosen by the player, who must then pay an up-front cost $ct$ for some constant $c$ For $c = 0$, $t$ can be chosen to be infinite (with an up-front cost of 0) Let $R(d, c)$ be the expected profit (i e net gain) that the player receives from a single game of optimally-played Ramvok, given a fair $d$-sided die and cost constant $c$ For example, $R(4, 0 2) = 2 65$ Assume that the player has sufficient funds for paying any/all up-front costs Now consider a game of Super Ramvok:\nIn Super Ramvok, the game of Ramvok is played repeatedly, but with a slight modification After each game, the die is altered The alteration process is as follows: The die is rolled once, and if the resulting face has its pips visible, then that face is altered to be blank instead If the face is already blank, then it is changed back to its original value After the alteration is made, another game of Ramvok can begin (and during such a game, at each turn, the die is rolled until a face with a value on it appears) The player knows which faces are blank and which are not at all times The game of Super Ramvok ends once all faces of the die are blank",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2399,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-470-super-ramvok.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4caa23179b5341fcb9249c110f30bc88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-470-super-ramvok.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "instead If the face is already blank, then it is changed back to its original value After the alteration is made, another game of Ramvok can begin (and during such a game, at each turn, the die is rolled until a face with a value on it appears) The player knows which faces are blank and which are not at all times The game of Super Ramvok ends once all faces of the die are blankLet $S(d, c)$ be the expected profit that the player receives from an optimally-played game of Super Ramvok, given a fair $d$-sided die to start (with all sides visible), and cost constant $c$ For example, $S(6, 1) = 208 3$ Let $F(n) = \\sum_{4 ≤ d ≤ n} \\sum_{0 ≤ c ≤ n} S(d, c)$ Calculate $F(20)$, rounded to the nearest integer --hints--\nsuperRamvok() should return 147668794 js\nassert strictEqual(superRamvok(), 147668794);\n--seed--\n--seed-contents--\n```js\nfunction superRamvok() {\nreturn true;\n}\nsuperRamvok();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2399,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-470-super-ramvok.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0318d051cb621088c1c71fac855623f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-474-last-digits-of-divisors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5471000cf542c510059\ntitle: 'Problem 474: Last digits of divisors'\nchallengeType: 1\nforumTopicId: 302151\ndashedName: problem-474-last-digits-of-divisors\n--description--\nFor a positive integer $n$ and digits $d$, we define $F(n, d)$ as the number of the divisors of $n$ whose last digits equal $d$.\nFor example, $F(84, 4) = 3$. Among the divisors of 84 (1, 2, 3, 4, 6, 7, 12, 14, 21, 28, 42, 84), three of them (4, 14, 84) have the last digit 4.\nWe can also verify that $F(12!, 12) = 11$ and $F(50!, 123) = 17\\,888$.\nFind $F({10}^6!, 65\\,432) \\text{ modulo } ({10}^{16} + 61)$.\n--hints--\nlastDigitsOfDivisors() should return 9690646731515010.\njs\nassert.strictEqual(lastDigitsOfDivisors(), 9690646731515010);\n--seed--\n--seed-contents--\n```js\nfunction lastDigitsOfDivisors() {\nreturn true;\n}\nlastDigitsOfDivisors();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 919,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-474-last-digits-of-divisors.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f8af8857de791b39ec9c41dca4d6625",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-472-comfortable-distance-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5451000cf542c510057\ntitle: 'Problem 472: Comfortable Distance II'\nchallengeType: 1\nforumTopicId: 302149\ndashedName: problem-472-comfortable-distance-ii\n--description--\nThere are $N$ seats in a row. $N$ people come one after another to fill the seats according to the following rules:\nNo person sits beside another.\nThe first person chooses any seat.\nEach subsequent person chooses the seat furthest from anyone else already seated, as long as it does not violate rule 1. If there is more than one choice satisfying this condition, then the person chooses the leftmost choice.\nNote that due to rule 1, some seats will surely be left unoccupied, and the maximum number of people that can be seated is less than $N$ (for $N > 1$).\nHere are the possible seating arrangements for $N = 15$:\nWe see that if the first person chooses correctly, the 15 seats can seat up to 7 people. We can also see that the first person has 9 choices to maximize the number of people that may be seated.\nLet $f(N)$ be the number of choices the first person has to maximize the number of occupants for $N$ seats in a row. Thus, $f(1) = 1$, $f(15) = 9$, $f(20) = 6$, and $f(500) = 16$.\nAlso, $\\sum f(N) = 83$ for $1 ≤ N ≤ 20$ and $\\sum f(N) = 13\\,343$ for $1 ≤ N ≤ 500$.\nFind $\\sum f(N)$ for $1 ≤ N ≤ {10}^{12}$. Give the last 8 digits of your answer.\n--hints--\ncomfortableDistanceTwo() should return 73811586.\njs\nassert.strictEqual(comfortableDistanceTwo(), 73811586);\n--seed--\n--seed-contents--\n```js\nfunction comfortableDistanceTwo() {\nreturn true;\n}\ncomfortableDistanceTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1943,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-472-comfortable-distance-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6fadfbfa80f8047974ebc883f762bd61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-473-phigital-number-base.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5461000cf542c510058\ntitle: 'Problem 473: Phigital number base'\nchallengeType: 1\nforumTopicId: 302150\ndashedName: problem-473-phigital-number-base\n--description--\nLet $\\varphi$ be the golden ratio: $\\varphi = \\frac{1+\\sqrt{5}}{2}.$\nRemarkably it is possible to write every positive integer as a sum of powers of $\\varphi$ even if we require that every power of $\\varphi$ is used at most once in this sum.\nEven then this representation is not unique.\nWe can make it unique by requiring that no powers with consecutive exponents are used and that the representation is finite.\nE.g:\n$2 = \\varphi + \\varphi^{-2}$ and $3 = \\varphi^{2} + \\varphi^{-2}$\nTo represent this sum of powers of $\\varphi$ we use a string of 0's and 1's with a point to indicate where the negative exponents start. We call this the representation in the phigital numberbase.\nSo $1 = 1_{\\varphi}$, $2 = 10.01_{\\varphi}$, $3 = 100.01_{\\varphi}$ and $14 = 100100.001001_{\\varphi}$. The strings representing 1, 2 and 14 in the phigital number base are palindromic, while the string representing 3 is not (the phigital point is not the middle character).\nThe sum of the positive integers not exceeding 1000 whose phigital representation is palindromic is 4345.\nFind the sum of the positive integers not exceeding $10^{10}$ whose phigital representation is palindromic.\n--hints--\nphigitalNumberBase() should return 35856681704365.\njs\nassert.strictEqual(phigitalNumberBase(), 35856681704365);\n--seed--\n--seed-contents--\n```js\nfunction phigitalNumberBase() {\nreturn true;\n}\nphigitalNumberBase();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-473-phigital-number-base.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d34a90605143ad49618d5ecdd90b4050",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-476-circle-packing-ii.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5481000cf542c51005b\ntitle: 'Problem 476: Circle Packing II'\nchallengeType: 1\nforumTopicId: 302153\ndashedName: problem-476-circle-packing-ii\n--description--\nLet $R(a, b, c)$ be the maximum area covered by three non-overlapping circles inside a triangle with edge lengths $a$, $b$ and $c$.\nLet $S(n)$ be the average value of $R(a, b, c)$ over all integer triplets $(a, b, c)$ such that $1 ≤ a ≤ b ≤ c < a + b ≤ n$.\nYou are given $S(2) = R(1, 1, 1) ≈ 0.31998$, $S(5) ≈ 1.25899$.\nFind $S(1803)$ rounded to 5 decimal places behind the decimal point.\n--hints--\ncirclePackingTwo() should return 110242.87794.\njs\nassert.strictEqual(circlePackingTwo(), 110242.87794);\n--seed--\n--seed-contents--\n```js\nfunction circlePackingTwo() {\nreturn true;\n}\ncirclePackingTwo();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-476-circle-packing-ii.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "53695b18220240486007d4e44f0379ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-479-roots-on-the-rise.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f54b1000cf542c51005d\ntitle: 'Problem 479: Roots on the Rise'\nchallengeType: 1\nforumTopicId: 302156\ndashedName: problem-479-roots-on-the-rise\n--description--\nLet $a_k$, $b_k$, and $c_k$ represent the three solutions (real or complex numbers) to the expression $\\frac{1}{x} = {\\left(\\frac{k}{x} \\right)}^2 (k + x^2) - kx$.\nFor instance, for $k = 5$, we see that $\\{a_5, b_5, c_5\\}$ is approximately $\\{5.727244, -0.363622 + 2.057397i, -0.363622 - 2.057397i\\}$.\nLet $S(n) = \\displaystyle\\sum_{p = 1}^n \\sum_{k = 1}^n {(a_k + b_k)}^p {(b_k + c_k)}^p {(c_k + a_k)}^p$ for all integers $p$, $k$ such that $1 ≤ p, k ≤ n$.\nInterestingly, $S(n)$ is always an integer. For example, $S(4) = 51\\,160$.\nFind $S({10}^6) \\text{ modulo } 1\\,000\\,000\\,007$.\n--hints--\nrootsOnTheRise() should return 191541795.\njs\nassert.strictEqual(rootsOnTheRise(), 191541795);\n--seed--\n--seed-contents--\n```js\nfunction rootsOnTheRise() {\nreturn true;\n}\nrootsOnTheRise();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1056,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-479-roots-on-the-rise.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9911c27ee17364b55b4ce4ce7319d345",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-475-music-festival.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f5481000cf542c51005a\ntitle: 'Problem 475: Music festival'\nchallengeType: 1\nforumTopicId: 302152\ndashedName: problem-475-music-festival\n--description--\n$12n$ musicians participate at a music festival. On the first day, they form $3n$ quartets and practice all day.\nIt is a disaster. At the end of the day, all musicians decide they will never again agree to play with any member of their quartet.\nOn the second day, they form $4n$ trios, each musician avoiding his previous quartet partners.\nLet $f(12n)$ be the number of ways to organize the trios amongst the $12n$ musicians.\nYou are given $f(12) = 576$ and $f(24)\\bmod 1\\,000\\,000\\,007 = 509\\,089\\,824$.\nFind $f(600)\\bmod 1\\,000\\,000\\,007$.\n--hints--\nmusicFestival() should return 75780067.\njs\nassert.strictEqual(musicFestival(), 75780067);\n--seed--\n--seed-contents--\n```js\nfunction musicFestival() {\nreturn true;\n}\nmusicFestival();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-475-music-festival.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1187f9582d61a72f64fd4a334c02a33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-a-data-graph-explorer-project\\build-a-data-graph-explorer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63d8402e39c73468b059cd43\ntitle: \"Build a Data Graph Explorer\"\nchallengeType: 10\ndashedName: build-a-data-graph-explorer\n--description--\nYou will be working on this project with Google Colaboratory.\nOnce you complete the project, submit your project link below. If you are submitting a Google Colaboratory link, make sure to turn on link sharing for \"anyone with the link.\"\n--instructions--\nFor this challenge, you need to create a data graph explorer using Python that take input and do the following:\nGet a .csv file in three ways\nuploading it from the local computer\ngetting a url from user input\nputting the url in the code\nUse the Pandas library to save the .csv as a dataframe\nPrint headings and the first two rows\nStore the column names as a list\nChoose one or two columns and convert the data to Numpy arrays\nDisplay data as a scatter plot or a line graph\nBe able to do this for different column combinations, and interpret the graphs\nOnce you're done, submit the URL to the public Colab notebook on your Google drive.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-a-data-graph-explorer-project\\build-a-data-graph-explorer.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "14dc7cc8727649c867e41fbd2b1a11d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-477-number-sequence-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f54a1000cf542c51005c\ntitle: 'Problem 477: Number Sequence Game'\nchallengeType: 1\nforumTopicId: 302154\ndashedName: problem-477-number-sequence-game\n--description--\nThe number sequence game starts with a sequence $S$ of $N$ numbers written on a line Two players alternate turns At his turn, a player must select and remove either the first or the last number remaining in the sequence The player score is the sum of all the numbers he has taken Each player attempts to maximize his own sum If $N = 4$ and $S = \\{1, 2, 10, 3\\}$, then each player maximizes his score as follows:\nPlayer 1: removes the first number (1)\nPlayer 2: removes the last number from the remaining sequence (3)\nPlayer 1: removes the last number from the remaining sequence (10)\nPlayer 2: removes the remaining number (2)\nPlayer 1 score is $1 + 10 = 11$ Let $F(N)$ be the score of player 1 if both players follow the optimal strategy for the sequence $S = \\{s_1, s_2, \\ldots, s_N\\}$ defined as:\n$s_1 = 0$\n$s_{i + 1} = ({s_i}^2 + 45)$ modulo $1\\,000\\,000\\,007$\nThe sequence begins with $S = \\{0, 45, 2\\,070, 4\\,284\\,945, 753\\,524\\,550, 478\\,107\\,844, 894\\,218\\,625, \\ldots\\}$ You are given $F(2) = 45$, $F(4) = 4\\,284\\,990$, $F(100) = 26\\,365\\,463\\,243$, $F(104) = 2\\,495\\,838\\,522\\,951$ Find $F({10}^8)$ --hints--\nnumberSequenceGame() should return 25044905874565164 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1661,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-477-number-sequence-game.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e0b5bf1870ccc9441242ef5c6b9e77ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-477-number-sequence-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Let $F(N)$ be the score of player 1 if both players follow the optimal strategy for the sequence $S = \\{s_1, s_2, \\ldots, s_N\\}$ defined as: $s_1 = 0$ $s_{i + 1} = ({s_i}^2 + 45)$ modulo $1\\,000\\,000\\,007$ The sequence begins with $S = \\{0, 45, 2\\,070, 4\\,284\\,945, 753\\,524\\,550, 478\\,107\\,844, 894\\,218\\,625, \\ldots\\}$ You are given $F(2) = 45$, $F(4) = 4\\,284\\,990$, $F(100) = 26\\,365\\,463\\,243$, $F(104) = 2\\,495\\,838\\,522\\,951$ Find $F({10}^8)$ --hints-- numberSequenceGame() should return 25044905874565164 js assertstrictEqual(numberSequenceGame(), 25044905874565164);\n--seed--\n--seed-contents--\n```js\nfunction numberSequenceGame() {\nreturn true;\n}\nnumberSequenceGame();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1661,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-477-number-sequence-game.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b2da27bd845b39ba1f414ed57c1cb2a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-478-mixtures.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f54c1000cf542c51005e\ntitle: 'Problem 478: Mixtures'\nchallengeType: 1\nforumTopicId: 302155\ndashedName: problem-478-mixtures\n--description--\nLet us consider mixtures of three substances: $A$, $B$ and $C$ A mixture can be described by a ratio of the amounts of $A$, $B$, and $C$ in it, i e , $(a : b : c)$ For example, a mixture described by the ratio (2 : 3 : 5) contains 20% $A$, 30% $B$ and 50% $C$ For the purposes of this problem, we cannot separate the individual components from a mixture However, we can combine different amounts of different mixtures to form mixtures with new ratios For example, say we have three mixtures with ratios (3 : 0 : 2), (3 : 6 : 11) and (3 : 3 : 4) By mixing 10 units of the first, 20 units of the second and 30 units of the third, we get a new mixture with ratio (6 : 5 : 9), since: ($10 \\times \\frac{3}{5} + 20 \\times \\frac{3}{20} + 30 \\times \\frac{3}{10}$ : $10 \\times \\frac{0}{5} + 20 \\times \\frac{6}{20} + 30 \\times \\frac{3}{10}$ : $10 \\times \\frac{2}{5} + 20 \\times \\frac{11}{20} + 30 \\times \\frac{4}{10}$) = (18 : 15 : 27) = (6 : 5 : 9)\nHowever, with the same three mixtures, it is impossible to form the ratio (3 : 2 : 1), since the amount of $B$ is always less than the amount of $C$ Let $n$ be a positive integer Suppose that for every triple of integers $(a, b, c)$ with $0 ≤ a, b, c ≤ n$ and $gcd(a, b, c) = 1$, we have a mixture with ratio $(a : b : c)$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2386,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-478-mixtures.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bc43fd69432c3e1deeafe8d4d7fcda1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-478-mixtures.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": ": 5 : 9) However, with the same three mixtures, it is impossible to form the ratio (3 : 2 : 1), since the amount of $B$ is always less than the amount of $C$ Let $n$ be a positive integer Suppose that for every triple of integers $(a, b, c)$ with $0 ≤ a, b, c ≤ n$ and $gcd(a, b, c) = 1$, we have a mixture with ratio $(a : b : c)$Let $M(n)$ be the set of all such mixtures For example, $M(2)$ contains the 19 mixtures with the following ratios:\n{(0 : 0 : 1), (0 : 1 : 0), (0 : 1 : 1), (0 : 1 : 2), (0 : 2 : 1), (1 : 0 : 0), (1 : 0 : 1), (1 : 0 : 2), (1 : 1 : 0), (1 : 1 : 1), (1 : 1 : 2), (1 : 2 : 0), (1 : 2 : 1), (1 : 2 : 2), (2 : 0 : 1), (2 : 1 : 0), (2 : 1 : 1), (2 : 1 : 2), (2 : 2 : 1)} Let $E(n)$ be the number of subsets of $M(n)$ which can produce the mixture with ratio (1 : 1 : 1), i e , the mixture with equal parts $A$, $B$ and $C$ We can verify that $E(1) = 103$, $E(2) = 520\\,447$, $E(10)\\bmod {11}^8 = 82\\,608\\,406$ and $E(500)\\bmod {11}^8 = 13\\,801\\,403$ Find $E(10\\,000\\,000)\\bmod {11}^8$ --hints--\nmixtures() should return 59510340 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2386,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-478-mixtures.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d5ab281ba91f6a716ece26fb9963b2ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-478-mixtures.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": ": 1 : 1), (2 : 1 : 2), (2 : 2 : 1)} Let $E(n)$ be the number of subsets of $M(n)$ which can produce the mixture with ratio (1 : 1 : 1), i e , the mixture with equal parts $A$, $B$ and $C$ We can verify that $E(1) = 103$, $E(2) = 520\\,447$, $E(10)\\bmod {11}^8 = 82\\,608\\,406$ and $E(500)\\bmod {11}^8 = 13\\,801\\,403$ Find $E(10\\,000\\,000)\\bmod {11}^8$ --hints-- mixtures() should return 59510340 js assertstrictEqual(mixtures(), 59510340);\n--seed--\n--seed-contents--\n```js\nfunction mixtures() {\nreturn true;\n}\nmixtures();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2386,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-478-mixtures.md",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ae1b12dd1f11cffd62a7226163ced493",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-a-financial-calculator-project\\build-a-financial-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63d8401e39c73468b059cd42\ntitle: \"Build a Financial Calculator\"\nchallengeType: 10\ndashedName: build-a-financial-calculator\n--description--\nYou will be working on this project with Google Colaboratory.\nAfter going to that link, create a copy of the notebook either in your own account or locally. Once you complete the project and it passes the test (included at that link), submit your project link below. If you are submitting a Google Colaboratory link, make sure to turn on link sharing for \"anyone with the link.\"\n--instructions--\nFor this challenge, you need to create a financial calculator using Python that take input and do the following:\nCalculate annuity with monthly or continuous growth\nCalculate monthly mortgage payment\nEstimate retirement investment balance\nDetermine how long until an amount doubles, given the rate\nSolve logarithmic equations\nConvert to (and from) scientific notation\nIf you are struggling, you can follow the video walkthrough for this project.\nOnce you're done, submit the URL to the public Colab notebook on your Google drive.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1359,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-a-financial-calculator-project\\build-a-financial-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f94ddf01020dc3231ecac3cb2a1fa351",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-a-graphing-calculator-project\\build-a-graphing-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63d83ffd39c73468b059cd40\ntitle: \"Build a Graphing Calculator\"\nchallengeType: 10\ndashedName: build-a-graphing-calculator\n--description--\nYou will be working on this project with Google Colaboratory.\nAfter going to that link, create a copy of the notebook either in your own account or locally. Once you complete the project and it passes the test (included at that link), submit your project link below. If you are submitting a Google Colaboratory link, make sure to turn on link sharing for \"anyone with the link.\"\n--instructions--\nFor this challenge, you need to create a graphing calculator using Python that can take input and do the following:\nGraph one or more functions\nCreate a table of (x,y) values\nShade above or below the line\nSolve and graph a system of equations\nZoom in or out on a graph\nSolve quadratic equations\nIf you are struggling, you can follow the video walkthrough for this project.\nOnce you're done, submit the URL to the public Colab notebook on your Google drive.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-a-graphing-calculator-project\\build-a-graphing-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1e03f92a1a9db2a3bdbe9cfb020b82f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-a-multi-function-calculator-project\\build-a-multi-function-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63d83ff239c73468b059cd3f\ntitle: \"Build a Multi-Function Calculator\"\nchallengeType: 10\ndashedName: build-a-multi-function-calculator\n--description--\nYou will be working on this project with Google Colaboratory.\nAfter going to that link, create a copy of the notebook either in your own account or locally. Once you complete the project and it passes the test (included at that link), submit your project link below. If you are submitting a Google Colaboratory link, make sure to turn on link sharing for \"anyone with the link.\"\n--instructions--\nFor this challenge, you need to create a multi-function calculator using Python that take input and do the following:\nsolve proportions\nsolve for x in equations\nfactor square roots\nconvert decimals to fractions and percents\nconvert fractions to decimals and percents\nconvert percents to decimals and fractions\nIf you are struggling, you can follow the video walkthrough for this project.\nOnce you're done, submit the URL to the public Colab notebook on your Google drive.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-a-multi-function-calculator-project\\build-a-multi-function-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5d591d4801b1b4535d1e67dfe0474044",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-480-the-last-question.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5900f54c1000cf542c51005f\ntitle: 'Problem 480: The Last Question'\nchallengeType: 1\nforumTopicId: 302158\ndashedName: problem-480-the-last-question\n--description--\nConsider all the words which can be formed by selecting letters, in any order, from the phrase:\n$$\\mathbf{\\text{thereisasyetinsufficientdataforameaningfulanswer}}$$\nSuppose those with 15 letters or less are listed in alphabetical order and numbered sequentially starting at 1 The list would include:\n$$\\begin{align}\n& 1: \\text{a} \\\\\n& 2: \\text{aa} \\\\\n& 3: \\text{aaa} \\\\\n& 4: \\text{aaaa} \\\\\n& 5: \\text{aaaaa} \\\\\n& 6: \\text{aaaaaa} \\\\\n& 7: \\text{aaaaaac} \\\\\n& 8: \\text{aaaaaacd} \\\\\n& 9: \\text{aaaaaacde} \\\\\n& 10: \\text{aaaaaacdee} \\\\\n& 11: \\text{aaaaaacdeee} \\\\\n& 12: \\text{aaaaaacdeeee} \\\\\n& 13: \\text{aaaaaacdeeeee} \\\\\n& 14: \\text{aaaaaacdeeeeee} \\\\\n& 15: \\text{aaaaaacdeeeeeef} \\\\\n& 16: \\text{aaaaaacdeeeeeeg} \\\\\n& 17: \\text{aaaaaacdeeeeeeh} \\\\\n& \\ldots \\\\\n& 28: \\text{aaaaaacdeeeeeey} \\\\\n& 29: \\text{aaaaaacdeeeeef} \\\\\n& 30: \\text{aaaaaacdeeeeefe} \\\\\n& \\ldots \\\\\n& 115246685191495242: \\text{euleoywuttttsss} \\\\\n& 115246685191495243: \\text{euler} \\\\\n& 115246685191495244: \\text{eulera} \\\\\n& \\\\\n& 525069350231428029: \\text{ywuuttttssssrrr} \\\\\n\\end{align}$$\nDefine $P(w)$ as the position of the word $w$",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2289,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-480-the-last-question.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "be98585e38456f2202b6d430618036d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-480-the-last-question.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\\text{aaaaaacdee} \\\\ & 11: \\text{aaaaaacdeee} \\\\ & 12: \\text{aaaaaacdeeee} \\\\ & 13: \\text{aaaaaacdeeeee} \\\\ & 14: \\text{aaaaaacdeeeeee} \\\\ & 15: \\text{aaaaaacdeeeeeef} \\\\ & 16: \\text{aaaaaacdeeeeeeg} \\\\ & 17: \\text{aaaaaacdeeeeeeh} \\\\ & \\ldots \\\\ & 28: \\text{aaaaaacdeeeeeey} \\\\ & 29: \\text{aaaaaacdeeeeef} \\\\ & 30: \\text{aaaaaacdeeeeefe} \\\\ & \\ldots \\\\ & 115246685191495242: \\text{euleoywuttttsss} \\\\ & 115246685191495243: \\text{euler} \\\\ & 115246685191495244: \\text{eulera} \\\\ & \\\\ & 525069350231428029: \\text{ywuuttttssssrrr} \\\\ \\end{align}$$ Define $P(w)$ as the position of the word $w$Define $W(p)$ as the word in position $p$ We can see that $P(w)$ and $W(p)$ are inverses: $P(W(p)) = p$ and $W(P(w)) = w$ Examples:\n$$\\begin{align}\n& W(10) = \\text{ aaaaaacdee} \\\\\n& P(\\text{aaaaaacdee}) = 10 \\\\\n& W(115246685191495243) = \\text{ euler} \\\\\n& P(\\text{euler}) = 115246685191495243 \\\\\n\\end{align}$$\nFind\n$$W(P(\\text{legionary}) + P(\\text{calorimeters}) - P(\\text{annihilate}) + P(\\text{orchestrated}) - P(\\text{fluttering})) $$\nGive your answer using lowercase characters (no punctuation or space) --hints--\neuler480() should return a string js\nassert isString(euler480());\neuler480() should return the string turnthestarson js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2289,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-480-the-last-question.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6cfa5b750fc8779c84542c2ca8c81637",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-480-the-last-question.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that $P(w)$ and $W(p)$ are inverses: $P(W(p)) = p$ and $W(P(w)) = w$ Examples: $$\\begin{align} & W(10) = \\text{ aaaaaacdee} \\\\ & P(\\text{aaaaaacdee}) = 10 \\\\ & W(115246685191495243) = \\text{ euler} \\\\ & P(\\text{euler}) = 115246685191495243 \\\\ \\end{align}$$ Find $$W(P(\\text{legionary}) + P(\\text{calorimeters}) - P(\\text{annihilate}) + P(\\text{orchestrated}) - P(\\text{fluttering})) $$ Give your answer using lowercase characters (no punctuation or space) --hints-- euler480() should return a string js assert isString(euler480()); euler480() should return the string turnthestarson js assertstrictEqual(euler480(), 'turnthestarson');\n--seed--\n--seed-contents--\n```js\nfunction euler480() {\nreturn true;\n}\neuler480();\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2289,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-480-the-last-question.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "421cea86d31342d30d29db1074d86f2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\college-algebra-with-python-conclusion\\more-resources-in-colab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d2959078df117ce4c408\ntitle: \"More Resources in Colab\"\nchallengeType: 15\nvideoId: HNFrRHqpck4\ndashedName: more-resources-in-colab\n--description--\nOne more thing... This brief video will show you some of the resources available to you in Google Colab notebooks.\n--questions--\n--text--\nWhich code snippets are available in the Google Colaboratory?\n--answers--\nCamera capture\nAdding form fields\nImporting data from Google Sheets\nAll of the above\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 519,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\college-algebra-with-python-conclusion\\more-resources-in-colab.md",
      "source_type": "git_repo"
    },
    "token_count": 124,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "934c67c443ddbfcdea0e978b25016849",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-three-math-games-project\\build-three-math-games.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63d8401039c73468b059cd41\ntitle: \"Build Three Math Games\"\nchallengeType: 10\ndashedName: build-three-math-games\n--description--\nYou will be working on this project with Google Colaboratory.\nOnce you complete the project, submit your project link below. If you are submitting a Google Colaboratory link, make sure to turn on link sharing for \"anyone with the link.\"\n--instructions--\nFor this challenge, you need to create three math games using Python that do the following:\nScatter plot game\nRandomly generate points on a graph and the player has to input the (x,y) coordinates\nFor added difficulty, make the graph larger\nAlgebra practice game\nGenerate one-step and two-step problems with random integer values and the player has to input the answer\nUse positive and negative values. For added difficulty, make the numbers larger\nProjectile game\nDisplay a \"wall\" with random height and location. Player has to move sliders to adjust a parabolic path to clear the wall\nFor added difficulty, make a second level where players enter a, b, and c without sliders\nOnce you're done, submit the URL to the public Colab notebook on your Google drive.",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1306,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\build-three-math-games-project\\build-three-math-games.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "694e24dec9c68743da0ebe9cc6e41311",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-applications-of-linear-systems\\word-problems.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d2019078df117ce4c3fe\ntitle: \"Word Problems\"\nchallengeType: 15\nvideoId: 3ZM3XMn1QYo\ndashedName: word-problems\n--description--\nThis first video will look at key words that tell you what math operation to use. Then you will see how to apply some of your code to different problems.\nHere are links to the textbooks you will need to complete the assignments for this video:\n- Business Math, a Step-by-Step Handbook (2021) by Jean-Paul Oliver\n- Algebra and Trigonometry by Jay Abramson - sourced from OpenStax under Creative Commons Attribution 4.0 International (CC BY 4.0)\nIt is also possible to download the Algebra and Trigonometry textbook from the OpenStax website. You will need to find the correct textbook and then download the PDF. The page numbers for the assignment are based on the first link for this book.\n--assignment--\nComplete the problems on pages 63, 75, 85, and 118 from \"Business Math, a Step-by-Step Handbook (2021)\".\nComplete the problems on pages 304, 308, and 321 from \"Algebra and Trigonometry\".\n--questions--\n--text--\nWhich of the following key words indicate subtraction?\n--answers--\nplus, more, increase, up\ndifference, less, decrease, down\nof, by, factor, area, times\nout of, per, divided, quotient\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-applications-of-linear-systems\\word-problems.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7058b5c63bdb78c0bcc6bfa69e69b0e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-applications-of-linear-systems\\applications-of-linear-systems-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d23a9078df117ce4c3ff\ntitle: \"Applications of Linear Systems: Extra\"\nchallengeType: 15\nvideoId: ZtypoUnNdAY\ndashedName: applications-of-linear-systems-extra\n--description--\nThe next video contains more examples of how to set up equations and use your Colab notebook to solve them.\n--questions--\n--text--\nHow can you make use of a Colab notebook to solve practical business problems?\n--answers--\nModify the equations in the code you already wrote\nCopy your existing code and then modify it as necessary\nWrite new code based on the functions you already know\nAll of the above\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-applications-of-linear-systems\\applications-of-linear-systems-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 148,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "00e7c41ba5c51ecbf9fa3bf915bc8ae1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\college-algebra-with-python-conclusion\\spreadsheets-and-additional-resources.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d2899078df117ce4c407\ntitle: \"Spreadsheets and Additional Resources\"\nchallengeType: 15\nvideoId: JH9Uk2mi3Dc\ndashedName: spreadsheets-and-additional-resources\n--description--\nLet's look at how you can connect your Math and Python knowledge with external data. This video will show you how to get data from other sources, then transform it so that you can graph it and interpret it.\n--questions--\n--text--\nWhat library helps you to read data from a .csv and store it as a dataframe where you can select columns?\n--answers--\nMath\nPandas\nData\nMatplotlib\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 626,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\college-algebra-with-python-conclusion\\spreadsheets-and-additional-resources.md",
      "source_type": "git_repo"
    },
    "token_count": 151,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c2b6279e6942dd592d25ff6208723f53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-business-applications-of-college-algebra\\business-applications-of-college-algebra-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63dbd0375d93712ff177d969\ntitle: \"Business Applications of College Algebra: Extra\"\nchallengeType: 15\nvideoId: 9n_ZybF0Phc\ndashedName: business-applications-of-college-algebra-extra\n--description--\nThis video is showing you some economics applications, and creating graphs and formulas.\n--questions--\n--text--\nWhich of the following is not true of supply and demand graphs?\n--answers--\nThe supply curve has a positive slope\nThe demand curve has a negative slope\nThe supply curve and demand curve will intersect\nThe supply curve and demand curve will always be straight lines\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-business-applications-of-college-algebra\\business-applications-of-college-algebra-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 143,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2225ca16c8baeb26c1e170419e45b3c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-business-applications-of-college-algebra\\demand-and-revenue.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d2649078df117ce4c404\ntitle: \"Demand and Revenue\"\nchallengeType: 15\nvideoId: 8PIZmiMFmfk\ndashedName: demand-and-revenue\n--description--\nIn this video, you will write code to develop a demand function from two points. You will see how price affects the profit graph and how all of these equations relate to each other.\nHere is the Colab notebook to go along with this video.\nHere is a link to the textbook you will need to complete the assignment for this video:\n- Business Math, a Step-by-Step Handbook (2021) by Jean-Paul Oliver\n--assignment--\nComplete the problems on pages 155 and 163 from \"Business Math, a Step-by-Step Handbook (2021)\".\n--questions--\n--text--\nWhich of the following business equations is not correct?\n--answers--\nProfit = Revenue - Cost\nRevenue = Price * Demand\nCost = Fixed Expenses + Variable Expenses\nMarginal Revenue = Margins + Revenue\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1225,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-business-applications-of-college-algebra\\demand-and-revenue.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a4fd87fabe7172a5a39fd4ff89cc23c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-exponents-and-logarithms\\exponents-and-logarithms.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d2769078df117ce4c406\ntitle: \"Exponents and Logarithms\"\nchallengeType: 15\nvideoId: LhzmzugFFu8\ndashedName: exponents-and-logarithms\n--description--\nHere is the Colab notebook to go along with this video.\n--questions--\n--text--\nWhat is log5(25)?\n--answers--\n0\n1\n2\n5\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 503,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-exponents-and-logarithms\\exponents-and-logarithms.md",
      "source_type": "git_repo"
    },
    "token_count": 100,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4c10b0cd370f757d856682f85fa2e49e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-fractions-and-decimals\\converting-fractions-and-decimals.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d258b51aeedd1a2bd649\ntitle: \"Converting Fractions and Decimals\"\nchallengeType: 15\nvideoId: hVHWr4KXZn0\ndashedName: converting-fractions-and-decimals\n--description--\nThe first video will show you how to convert between fractions, decimals, and percents on paper. Then, it will show you how to do it with Python code.\nHere is the Colab notebook used in the video. Use this code as a model, and write your own code to convert fractions and decimals.\n--assignment--\nAdd the code to convert fractions and decimals to your algebra Colab notebook.\n--questions--\n--text--\nWhich of the following correctly represents \"three hundredths\" as a decimal?\n--answers--\n0.3\n0.03\n0.003\n100.3\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-fractions-and-decimals\\converting-fractions-and-decimals.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "53d8b89d9b7a531b82f526ed6f784537",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-common-factors-and-square-roots\\factoring.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d251b51aeedd1a2bd648\ntitle: \"Factoring\"\nchallengeType: 15\nvideoId: Puyp_-ZYA54\ndashedName: factoring\n--description--\nThis first video will show you how to find common factors and divide them out - in writing, then in code using loops and modulus operations.\nHere is the Colab notebook used in this video.\n--questions--\n--text--\nWhat does the modulus (%) operator do in Python?\n--answers--\nreturns the percent\ndivides\nreturns the remainder when dividing\ncreates a space\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 700,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-common-factors-and-square-roots\\factoring.md",
      "source_type": "git_repo"
    },
    "token_count": 130,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8928876fd1ea286ef78114eaaab9106f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-fractions-and-decimals\\fractions-and-decimals-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d260b51aeedd1a2bd64a\ntitle: \"Fractions and Decimals: Extra\"\nchallengeType: 15\nvideoId: YHVA6cYIglM\ndashedName: fractions-and-decimals-extra\n--description--\nThe following video will show you one way to set up your Google Colaboratory notebook, so that you can continue to build your personalized algebra calculator.\nHere is the Colab notebook used in this video so you can use it as a model.\n--assignment--\nAdd the code to factor and solve for a variable to your algebra Colab notebook.\nRun the code in the following notebook to get practice converting fractions and decimals. As a bonus, look at the code used to generate the practice problems.\n--questions--\n--text--\nWhich of the following languages can you use in a Google Colaboratory text field?\n--answers--\nHTML\nLaTex\nEnglish\nAll of the above\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-fractions-and-decimals\\fractions-and-decimals-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 205,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "07401611255f6902832f2c263523236a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-functions-and-graphing\\functions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d266b51aeedd1a2bd64b\ntitle: \"Functions\"\nchallengeType: 15\nvideoId: rYg12-omcGg\ndashedName: functions\n--description--\nThis first video will show you what it means to be a function, and then it will show you how math functions and Python functions are similar.\nHere is the Colab notebook used in this and the next videos.\n--assignment--\nAdd code to your algebra Colab notebook that creates Python functions for decimal-to-fraction conversions\n--questions--\n--text--\nAfter defining a function in Python, indent each line of the function how many spaces?\n--answers--\n2\n3\n4\n5\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 792,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-functions-and-graphing\\functions.md",
      "source_type": "git_repo"
    },
    "token_count": 156,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6da7a1f1b01602755dda3575724ba77d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-functions-and-graphing\\graphing.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d26fb51aeedd1a2bd64c\ntitle: \"Graphing\"\nchallengeType: 15\nvideoId: vUefCkh8-wc\ndashedName: graphing\n--description--\nThis next video will show you the connection between functions and graphing. Notice how the graph is a way to represent the inputs and outputs of a function. Then the video will show you how to graph a function with Python.\nHere is the Colab notebook to go with the last two videos so you can start making your own graphs.\n--assignment--\nAdd code to your algebra Colab notebook for functions and graphing.\nRun the following notebook to see more ways to create graphs using algebra and Python.\n--questions--\n--text--\nWhich of the following would put a blue line on a graph?\n--answers--\nplt.plot([0,0],[10,10],'b-')\nplt.plot([0,0],[10,10],'bo')\nplt.plot([0,10],[0,10],'b')\nplt.plot([10,10],[10,10],'b^')\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-functions-and-graphing\\graphing.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "58147f83a04552ea35b8645b7dc4133e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-functions-and-graphing\\functions-and-graphing-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63e1798f811fda1bc546bba0\ntitle: \"Functions and Graphing: Extra\"\nchallengeType: 15\nvideoId: N7Fh1xKrIM4\ndashedName: functions-and-graphing-extra\n--description--\nThis next video will show you the connection between functions and graphing. Notice how the graph is a way to represent the inputs and outputs of a function. Then the video will show you how to graph a function with Python.\nHere is the Colab notebook to go with this video.\n--assignment--\nAdd code to your algebra Colab notebook for functions and graphing.\n--questions--\n--text--\nWhat Python library would you import to create arrays that you can graph?\n--answers--\nnumpy\nnimby\nmath\ngraph\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-functions-and-graphing\\functions-and-graphing-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 172,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "595f3d5acffafecb395d6152f6fe8077",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-graph-systems-of-equations\\graphing-systems-of-equations-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d276b51aeedd1a2bd64d\ntitle: \"Graphing Systems of Equations: Extra\"\nchallengeType: 15\nvideoId: q8ad1tTFqns\ndashedName: graphing-systems-of-equations-extra\n--description--\nThis next video will give you a deeper dive into what you can do with graphing systems of equations, graphing inequalities, and shading above or below the line. You will also see how to download the graph to your computer or your Google Drive.\nHere is the Colab notebook used in this video.\n--questions--\n--text--\nIf you want to create an interactive plot with a slider to zoom in and out, where does most of the graphing code appear?\n--answers--\nWithin the interactive() function\nIn the slider\nWithin the function that the interactive() calls\nBefore all of the functions\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 971,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-graph-systems-of-equations\\graphing-systems-of-equations-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 192,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ab18ee40efd681653d2aee9f2d2b5493",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-solve-for-x\\how-to-solve-for-x-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d233b51aeedd1a2bd645\ntitle: \"How to Solve for X: Extra\"\nchallengeType: 15\nvideoId: lFTCVUCbNoM\ndashedName: how-to-solve-for-x-extra\n--description--\nThis video will go deeper, with more examples of how to use SymPy solve. It will also explain how the practice functions generate the random problems.\nHere is the Colab notebook to go along with this video. Use it to add more to the algebra Colab notebook that you are building.\n--assignment--\nAdd the code for more ways to solve for x from the video to your algebra Colab notebook.\nOpen the following Colab notebook, run the cell, and practice solving one and two-step algebra problems. As a bonus, look at the code that generates the practice problems.\n--questions--\n--text--\nIf you import sympy and define x as a variable, what would be the output from the following code?\npy\nexample = 3*x - 12\nequation = Eq(example,0)\nsolution = solve(equation,x)\nprint(solution)\n--answers--\n3\n4\n[4]\nx = 4\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1316,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-solve-for-x\\how-to-solve-for-x-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5c54a5c125456f626703c1c5e2e4375f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-graph-systems-of-equations\\graphing-systems.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d27db51aeedd1a2bd64e\ntitle: \"Graphing Systems\"\nchallengeType: 15\nvideoId: FxSIFR4zsrE\ndashedName: graphing-systems\n--description--\nThis first video will show you how to graph systems of equations with written math, then code.\nHere is the Colab notebook used in this video.\n--assignment--\nAdd code from the video to the algebra notebook you are building, and test it with different functions.\n--questions--\n--text--\nThe numpy linspace() function takes three arguments to create an array. Which of the following arguments does it not take?\n--answers--\nMinimum value\nMaximum value\nNumber of items in the array\nFormula to generate each item\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 872,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-graph-systems-of-equations\\graphing-systems.md",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "685db7af1a28ce689a43ba292fe0e269",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-solve-systems-of-equations\\solving-systems.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d2b0b51aeedd1a2bd655\ntitle: \"Solving Systems\"\nchallengeType: 15\nvideoId: CNGUQzXfC6c\ndashedName: solving-systems\n--description--\nThe first video will show you the math behind solving a system of two equations without graphing, how you can factor an equation, and solve for a certain variable.\nHere is the Colab notebook used in this video.\n--assignment--\nAdd code to your notebook to solve and graph systems of equations\n--questions--\n--text--\nWhich of the following can SymPy do that matplotlib can't do?\n--answers--\nSolve for a variable\nDisplay an x-y axis\nGraph an equation or two\nShow tic marks on the graph\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 845,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-solve-systems-of-equations\\solving-systems.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1950ccd0a70b64f43f7237fcb374b84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-solve-for-x\\solving-for-x.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d23eb51aeedd1a2bd646\ntitle: \"Solving for X\"\nchallengeType: 15\nvideoId: _U9PEFKjyb8\ndashedName: solving-for-x\n--description--\nThis first video will show you the essence of algebra and then how Python code does the same task in a different way.\nHere is the Colab notebook to go along with this video. Add the code from the video to your algebra Colab notebook to see how to solve for X using Python. Then change the code if you want, test it, and compare it to paper-and-pencil solving. Remember the equation input needs to be in Python syntax.\n--assignment--\nAdd the code to solve for x from the video to your algebra Colab notebook.\n--questions--\n--text--\nIn Python, what is the library you import to solve algebra problems with variables?\n--answers--\nsymba\nmath\nsympsons\nsympy\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-solve-for-x\\solving-for-x.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2251ce6329172964bc78c79ab91147c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-solve-systems-of-equations\\solving-systems-of-equations-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d2a9b51aeedd1a2bd654\ntitle: \"Solving Systems of Equations: Extra\"\nchallengeType: 15\nvideoId: 856p7t2V9NY\ndashedName: solving-systems-of-equations-extra\n--description--\nThis video will show you one way to create a calculator that solves and graphs. It will also show you how to zoom in or zoom out on the graph and write the code to build that feature.\nHere is the Colab notebook used in this video. This will give you an example of what your notebook could look like so far, as you have some functions in there and create headings for the next few functions.\n--questions--\n--text--\nWhich of the following is not true?\n--answers--\nWhen graphing, you can adjust your tic marks on each axis\nThe nonlinsolve() function can solve linear equations\nThe linsolve() function can solve nonlinear equations\nTo zoom in or out on a graph, an interactive slider is useful\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1091,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-how-to-solve-systems-of-equations\\solving-systems-of-equations-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 223,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9b6fce2fde6410fea4aaed1d6237e5ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-linear-functions\\linear-equations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d28ab51aeedd1a2bd650\ntitle: \"Linear Equations\"\nchallengeType: 15\nvideoId: u0bgovPh4ME\ndashedName: linear-equations\n--description--\nThis video will show you the math behind finding the y-intercept in a linear function, so you can develop the whole equation. Then the video will show you how to graph the whole function. You will also see how to do the whole process with Python code.\nHere is the Colab notebook to go with the last two videos, so you can see the formulas.\n--assignment--\nAdd code to your algebra Colab notebook to graph a function from points or from equation input.\n--questions--\n--text--\nIf you know the slope (\"m\") and you have one (x,y) coordinate point, which of the following equations could you use to find \"b\", representing the y-intercept in Python?\n--answers--\ny = mx +b\nb = y - m*x\nax + by = c\n(y2-y1)/(x2-x1)=m\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1079,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-linear-functions\\linear-equations.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "81226f2a358ba196af155215f830d673",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-linear-functions\\linear-functions-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d283b51aeedd1a2bd64f\ntitle: \"Linear Functions: Extra\"\nchallengeType: 15\nvideoId: Emeex5gi5uA\ndashedName: linear-functions-extra\n--description--\nThis video will give you a deeper look into developing equations from word problems (so then you can write the code to solve or graph those equations). The video will also begin to look at data points as (x,y) coordinates. With this, you will begin to see the connection between Algebra and data science.\nHere is the Colab notebook used in this video.\n--questions--\n--text--\nWhich of the following would you not use when displaying a graph?\n--answers--\nax.set_xlabel(\"x values\")\nax.set_ylabel(\"y values\")\nax.grid(True)\nax.set_table()\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-linear-functions\\linear-functions-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bf05a9664fd7a08648fa385f38e0c7e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-linear-functions\\slope.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d291b51aeedd1a2bd651\ntitle: \"Slope\"\nchallengeType: 15\nvideoId: nURsz7SR5aM\ndashedName: slope\n--description--\nThis first video will focus on the slope of a line and how to calculate it.\nHere is the Colab notebook used in this and the next videos.\n--questions--\n--text--\nIf you have already defined these variables, which of the following is the correct slope formula?\n--answers--\nslope = (x1 - x2) / (y1 - y2)\nslope = (x2 - x1) / (y2 - y1)\nslope = (x1 - y1) / (x2 - y2)\nslope = (y2 - y1) / (x2 - x1)\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 736,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-linear-functions\\slope.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "45855569e31275e39d636e318c336c5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-parent-graphs-and-polynomials\\parent-graphs-and-polynomials-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d25c9078df117ce4c403\ntitle: \"Parent Graphs and Polynomials: Extra\"\nchallengeType: 15\nvideoId: YDlXmmRgQJI\ndashedName: parent-graphs-and-polynomials-extra\n--description--\nThis next video will show you how to add sliders to your graphs, to see them change in real time. You will also see ways to use loops to find the roots of a graph, and how this method is different from factoring.\nHere is the Colab notebook to go along with this video.\n--questions--\n--text--\nHow many sliders would you add to change the coefficients in a quadratic graph?\n--answers--\n1\n2\n3\n4\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 791,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-parent-graphs-and-polynomials\\parent-graphs-and-polynomials-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 162,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1bb8172647429704bb3a42a8fec198b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-parent-graphs-and-polynomials\\parent-graphs.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d2529078df117ce4c402\ntitle: \"Parent Graphs\"\nchallengeType: 15\nvideoId: 6S2QhY8rIcw\ndashedName: parent-graphs\n--description--\nIn this video, you will see what these parent graphs look like, how to modify them, and how to do this all with Python code.\nHere is the Colab notebook to go along with this video.\n--questions--\n--text--\nIn numpy, what is the cube root of x?\n--answers--\ncbrt(x)\ncube_root(x)\nroot3(x)\nroot(x,3)\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 648,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-parent-graphs-and-polynomials\\parent-graphs.md",
      "source_type": "git_repo"
    },
    "token_count": 141,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b88882149f1c038facde8f83a4b19a5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-quadratic-equations\\quadratics.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d2429078df117ce4c400\ntitle: \"Quadratics\"\nchallengeType: 15\nvideoId: pPLBL3L0OGg\ndashedName: quadratics\n--description--\nThis video show you how to solve quadratic equations, and explain the coefficients (\"A,\" \"B,\" and \"C\") in the standard form and how to use them to find the roots and vertex.\nHere is the Colab notebook to go along with this video.\n--questions--\n--text--\nIn Python code, what is the formula for the x value of the vertex?\n--answers--\nx = -b/2a\nx = -b/(2 * a)\nx = b/2a\nx = -b/2*a\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 729,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-quadratic-equations\\quadratics.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "22961c2d0d3a60769804b26de580c76b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-ratios-and-proportions\\introduction-to-college-algebra-with-python.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331caa1b51aeedd1a2bd644\ntitle: \"Introduction to College Algebra with Python\"\nchallengeType: 15\nvideoId: bO3Sn10-XNw\ndashedName: introduction-to-college-algebra-with-python\n--description--\nThis first video includes an introduction to the course, how it will work, and how to use Google Colaboratory. Follow along to create your first Colab notebook.\nVideos throughout these courses will reference problems from these two textbooks:\n- Business Math, a Step-by-Step Handbook (2021) by Jean-Paul Oliver\n- Algebra and Trigonometry by Jay Abramson - sourced from OpenStax under Creative Commons Attribution 4.0 International (CC BY 4.0)\nIt is also possible to download the Algebra and Trigonometry textbook from the OpenStax website. You will need to find the correct textbook and then download the PDF. The page numbers for the assignment are based on the first link for this book.\n--assignment--\nCreate an algebra Colab notebook on your google drive so you can follow along with the videos.\n--questions--\n--text--\nWhen adding text in Google Colab, what symbol would you use to create a heading that will appear in the table of contents?\n--answers--\n$\n#\n@\n%\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-ratios-and-proportions\\introduction-to-college-algebra-with-python.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c57fd74158106ef0d0734793565b5ece",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-ratios-and-proportions\\ratios-and-proportions-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d298b51aeedd1a2bd652\ntitle: \"Ratios and Proportions: Extra\"\nchallengeType: 15\nvideoId: 6o0SsdyUf2U\ndashedName: ratios-and-proportions-extra\n--description--\nThe last video in this section will show you how to use proportions in other applications, such as currency exchange rates and unit conversion. It will also show you more about setting up your notebook and working through the practice assignment.\n--assignment--\nOpen the following Colab notebook, run the cell, and practice solving one-step algebra problems. As a bonus, look at the code that generates the practice problems.\n--questions--\n--text--\nWhat is another way to write 0.9999... (repeating 9)?\n--answers--\n99 percent\nYou can't get an exact answer\n1\nAlmost 1\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 943,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-ratios-and-proportions\\ratios-and-proportions-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 195,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "47426967c0d5bf1c975fa64554cd5d11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-ratios-and-proportions\\solving-proportions.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6331d29fb51aeedd1a2bd653\ntitle: \"Solving Proportions\"\nchallengeType: 15\nvideoId: 61A3PNx1hjY\ndashedName: solving-proportions\n--description--\nNow we get to the math content. This video will show you how to set up and solve proportions and write code to solve for variables.\nHere is the Colab notebook to go along with this video. If you have not done so yet, set up your algebra Colab notebook from the last video. Then, add the code from this video to it.\n--assignment--\nAdd the code from the video to the algebra Colab notebook you created in the first step.\n--questions--\n--text--\nIn solving a proportion, if one numerator is zero, does the other numerator have to be zero for the statement to be true?\n--answers--\nYes\nNo\nSometimes\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 957,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-ratios-and-proportions\\solving-proportions.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4f13b7ccea687f3421cc4517bc5bf433",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6619240f46cec8e04d77e03a\ntitle: Basic Functions Exercise A\nchallengeType: 1\ndashedName: top-basic-functions-exercise-a\n--description--\nCreate a function that takes in an integer. This function should return the given integer + 7 if the integer is less than 10. If the integer is greater than or equal to 10, it should return the given integer - 3.\nThe name of the function should be addOrSubtract.\n--hints--\nYou should have a function called addOrSubtract.\njs\nassert.isFunction(addOrSubtract);\nYour function should take in an integer as an argument.\njs\nassert.match(addOrSubtract.toString(), /\\s*addOrSubtract\\(\\s*\\w+\\s*\\)/);\nYou should return the given integer + 7 if the integer is less than 10.\njs\nassert.strictEqual(addOrSubtract(5), 12);\nYou should return the given integer - 3 if the integer is greater than or equal to 10.\njs\nassert.strictEqual(addOrSubtract(10), 7);\n--seed--\n--seed-contents--\n```js\n```\n--solutions--\njs\nfunction addOrSubtract(num) {\nif (num < 10) {\nreturn num + 7;\n} else {\nreturn num - 3;\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-a.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8bfd84dbfbccb976a791c25e2b8ddd79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-simple-and-compound-interest\\simple-and-compound-interest.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6363d26c9078df117ce4c405\ntitle: \"Simple and Compound Interest\"\nchallengeType: 15\nvideoId: iMPFK7wXNPg\ndashedName: simple-and-compound-interest\n--description--\nThis video will help you understand the equations of simple and compound interest, and what it all means.\nHere is the Colab notebook to go along with this video.\nHere is an additional Colab notebook that shows you one way to put many of these interest and payment formulas into Python functions. Also you will see an example of using some formulas to output results, notice a trend, and follow up with other formulas to analyze patterns.\n--questions--\n--text--\nIn percent increase formulas, what does the \"principle\" refer to?\n--answers--\nthe main amount\nthe ending amount\nthe starting amount\nthe (1 + rate) multiplier\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1155,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-simple-and-compound-interest\\simple-and-compound-interest.md",
      "source_type": "git_repo"
    },
    "token_count": 192,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d5a22ee019d95ba29ed76db71102f2f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-simple-and-compound-interest\\simple-and-compound-interest-extra.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63dbd1335d93712ff177d96a\ntitle: \"Simple and Compound Interest: Extra\"\nchallengeType: 15\nvideoId: 2cbrstoKNSc\ndashedName: simple-and-compound-interest-extra\n--description--\nHere is a detour from the Python code, as this video shows you how to create mortgage payment amortization tables in Google Sheets. You will also learn about how to use a very similar setup to estimate retirement account investment returns. This is the video that shows you where your money is going.\n--questions--\n--text--\nWhat marker do you use to attach a formula to a cell in a spreadsheet?\n--answers--\n()\n=\n==\nformula()\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\17-college-algebra-with-python\\learn-simple-and-compound-interest\\simple-and-compound-interest-extra.md",
      "source_type": "git_repo"
    },
    "token_count": 154,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "da987f5b01dd3f4b76eca42a34f673b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e131f068359c3ccf2f4d6\ntitle: Basic Functions Exercise B\nchallengeType: 1\ndashedName: top-basic-functions-exercise-b\n--description--\nWrite a function, named multiply, that takes two parameters and returns their product.\n--hints--\nYou should have a function named multiply.\njs\nassert.isFunction(multiply);\nYour function should take in two integers as arguments.\njs\nassert.match(multiply.toString(), /\\s*multiply\\(\\s*\\w+\\s*,\\s*\\w+\\s*\\)/);\nYou should return the product of the two integers.\njs\nassert.strictEqual(multiply(10, 10), 100);\n--seed--\n--seed-contents--\n```js\n```\n--solutions--\njs\nfunction multiply(a, b) {\nreturn a * b;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 706,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-b.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8b268a11af00e67276239c07aea765c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e17c6068359c3ccf2f4d8\ntitle: Basic Functions Exercise D\nchallengeType: 1\ndashedName: top-basic-functions-exercise-d\n--description--\nWrite a function, named lastLetter, that takes a string as a parameter and returns the last letter of the string.\n--hints--\nYou should have a function named lastLetter.\njs\nassert.isFunction(lastLetter);\nYour function should take in a string as a parameter.\njs\nassert.match(lastLetter.toString(), /\\s*lastLetter\\(\\s*\\w+\\s*\\)/);\nYou should return the last letter of the string.\njs\nassert.strictEqual(lastLetter('Sem'), 'm');\n--seed--\n--seed-contents--\n```js\n```\n--solutions--\njs\nfunction lastLetter(str) {\nreturn str[str.length - 1];\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-d.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "632703aecd34266ec8f9659252646d6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e151f068359c3ccf2f4d7\ntitle: Basic Functions Exercise C\nchallengeType: 1\ndashedName: top-basic-functions-exercise-c\n--description--\nWrite a function, named capitalize, that takes a string as an parameter and returns a new string with the first letter capitalized.\n--hints--\nYou should have a function named capitalize.\njs\nassert.isFunction(capitalize);\nYour function should take in a string as a parameter.\njs\nassert.match(capitalize.toString(), /\\s*capitalize\\(\\s*\\w+\\s*\\)/);\nYour function should return a new string with the first letter capitalized.\njs\nassert.strictEqual(capitalize('sem'), 'Sem');\n--seed--\n--seed-contents--\n```js\n```\n--solutions--\njs\nfunction capitalize(str) {\nreturn str[0].toUpperCase() + str.slice(1);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 806,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-c.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "53c6fcac5c3c06e2e603c1b62f75a9db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571b2fecc1de61d7b4dd380\ntitle: Introduction to Flexbox Lesson B\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-b\n--description--\nAs you’ve seen, flexbox is not just a single CSS property but a whole toolbox of properties that you can use to put things where you need them. Some of these properties belong on the flex container, while some go on the flex items. This is a simple yet important concept.\nA flex container is any element that has display: flex on it. A flex item is any element that lives directly inside of a flex container.\n--questions--\n--text--\nWhat’s the difference between a flex container and a flex item?\n--answers--\nFlex containers are elements with display: flex, while flex items are elements within flex containers.\nFlex containers are elements within flex items, while flex items define the overall layout.\nFlex containers are elements using flexbox, and flex items are inline elements.\nFlex containers are elements that define the layout structure, while flex items control the overall page design.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 231,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "46454b95c17824df15e6fe090e017116",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571b2fecc1de61d7b4dd381\ntitle: Introduction to Flexbox Lesson C\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-c\n--description--\nSomewhat confusingly, any element can be both a flex container and a flex item. Said another way, you can also put display: flex on a flex item and then use flexbox to arrange its children.\nCreating and nesting multiple flex containers and items is the primary way you will be building up complex layouts. The following image was achieved using only flexbox to arrange, size, and place the various elements. Flexbox is a very powerful tool.\nCertainly, the image features a representation of a CSS Flexbox layout with nested flex containers. The outer container is denoted as \"ALSO a flex container\" highlighted in blue, and within it is another container marked as \"with flex items\" in red. Inside the red container, there are three items labeled as \"flex items\" in peach. This demonstrates that a flex container can be nested within another flex container and contain its own flex items, showcasing the recursive nature of Flexbox layout structures.\n--questions--\n--text--\nWhich CSS property is applied to elements to make them flex containers?\n--answers--\nalign-items\ndisplay: flex\njustify-content\nflex\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1875,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e1e9291829eff110a8b423aed07f210b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571b2fccc1de61d7b4dd37f\ntitle: Introduction to Flexbox Lesson A\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-a\n--description--\nBefore we get started\nFlexbox layouts can get a little complicated In a previous lesson, you learned how to inspect and debug things using your browser’s developer tools Those tools will be crucial for you in the following lessons If something isn’t behaving the way you expect, inspecting it in the developer tools should be your first step every time Flexbox isn’t necessarily any more difficult than the other concepts that we’ve covered so far, but it does have a few more moving parts It is going to be somewhat difficult to make use of any of the things you’re learning in these first lessons until you get to the end and can put it all together As we go, do yourself a favor and play with all of the code examples You will almost definitely need to come back and reference these lessons (or a couple of the resources we share with you) when you get to the assignments at the end of the section, but if you take your time and experiment with all the code examples we provide, you’ll know better where to look when that time comes Let’s flex\nFlexbox is a way to arrange items into rows or columns These items will flex (i e grow or shrink) based on some simple rules that you can define To get started, let’s look at a simple demonstration We’ve embedded a lot of interactive examples in these lessons Take your time to experiment with them as you go to cement the concepts in your mind We’ll get into exactly what’s going on here soon enough But for now, let’s uncomment the two flex related CSS declarations in the above Codepen by removing the /* and */ tags surrounding them, then check out the result Comments prevent the browser from interpreting lines as code, and are wrapped between specific tags CSS uses /* as an opening comment tag and */ as a closing comment tag, while HTML and JavaScript have their own syntax Commented out lines of code can be re-enabled simply by removing the comment tags surrounding the code All 3 divs should now be arranged horizontally If you resize the results frame with the 1x, 5x and 25x buttons you’ll also see that the div elements will \"flex\" They will fill the available area and will each have equal width If you add another div to the HTML, inside of",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7f4463a69c4f72b9892d812302062005",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "HTML and JavaScript have their own syntax Commented out lines of code can be re-enabled simply by removing the comment tags surrounding the code All 3 divs should now be arranged horizontally If you resize the results frame with the 1x, 5x and 25x buttons you’ll also see that the div elements will \"flex\" They will fill the available area and will each have equal width If you add another div to the HTML, inside offlex-container, it will show up alongside the others, and everything will flex to fit within the available area If it’s hard to see what's going on in the small embedded CodePen, feel free to click the \"Edit on CodePen\" or \"Fork on CodePen\" button This will bring the example into a full-sized environment Some of the later examples might especially benefit from doing this --questions--\n--text--\nWhat happens when the two flex related CSS declarations in the CodePen are uncommented --answers--\nThe div elements become hidden from view, losing their visibility within the container All 3 div elements are arranged horizontally, and they flex to fill the available area with equal width Each div element enlarges and covers the entire container, overlapping each other The div elements align vertically in a single column, ignoring the flex-related CSS declarations --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "32975875acf4cb9570a77c97031af307",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571b2ffcc1de61d7b4dd382\ntitle: Introduction to Flexbox Lesson D\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-d\n--description--\nNow that you have a basic understanding of how flexbox works, what is the primairy role of a flex item in a flexbox layout? Try and answer the question below.\n--questions--\n--text--\nWhat role does a flex item play within a flex container?\n--answers--\nFlex items define the overall layout structure.\nFlex items set the background colors of flex containers.\nFlex items allow the flex container to resize based on content.\nFlex items are elements that reside directly within a flex container.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 705,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 153,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b1da5788461e2e4d004affa495084680",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571b300cc1de61d7b4dd384\ntitle: Introduction to Flexbox Lesson F\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-f\n--description--\nflex-grow expects a single number as its value, and that number is used as the flex-item's \"growth factor\". When you applied flex: 1 to every div inside our container, you were telling every div to grow the same amount. The result of this is that every div ends up the exact same size. If you instead add flex: 2 to just one of the divs, then that div would grow to 2x the size of the others.\nIn the following example the flex shorthand has values for flex-shrink and flex-basis specified with their default values.\n--questions--\n--text--\nWhat does setting flex: 2 to one specific div inside a flex container, while other divs have flex: 1, imply?\n--answers--\nThe container will shrink to accommodate the larger div.\nAll divs will retain the same size due to conflicting flex values.\nThe specific div will grow to be twice the size of the others.\nAll divs will shrink equally to adjust to the new flex values.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "069744d83ae63cef12c90f721fe200db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571b300cc1de61d7b4dd383\ntitle: Introduction to Flexbox Lesson E\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-e\n--description--\nThe flex declaration is actually a shorthand for 3 properties that you can set on a flex item. These properties affect how flex items size themselves within their container. You've seen some shorthand properties before, but you haven't officially defined them yet.\nShorthand properties are CSS properties that let you set the values of multiple other CSS properties simultaneously. Using a shorthand property, you can write more concise (and often more readable) stylesheets, saving time and energy.\nIn this case, flex is actually a shorthand for flex-grow, flex-shrink and flex-basis.\nIn the above screenshot, flex: 1 equates to: flex-grow: 1, flex-shrink: 1, flex-basis: 0.\nVery often, you see the flex shorthand defined with only one value. In that case, that value is applied to flex-grow. So when you put flex: 1 on our divs, you were actually specifying a shorthand of flex: 1 1 0.\n--questions--\n--text--\nWhich properties are set by the flex shorthand?\n--answers--\nflex-grow, flex-shrink, and flex\nflex-basis, flex-wrap, and flex-direction\nflex-grow, flex-shrink, and flex-basis\nflex-direction, flex, and flex-wrap\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1545,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2b20b82ff59c2bac150767bd12d8050c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571c34668e4b3b17d3957f9\ntitle: Introduction to Flexbox Lesson H\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-h\n--description--\nNo matter which direction you're using, you need to think of your flex-containers as having 2 axes: the main axis and the cross axis. It is the direction of these axes that changes when the flex-direction is changed. In most circumstances, flex-direction: row puts the main axis horizontal (left-to-right), and column puts the main axis vertical (top-to-bottom).\nIn other words, in our very first example, you put display: flex on a div and it arranged its children horizontally. This is a demonstration of flex-direction: row, the default setting. The following example is very similar. If you uncomment the line that says flex-direction: column, those divs will stack vertically.\n--questions--\n--text--\nWhich CSS property changes the main axis direction in flex containers to arrange items from top to bottom?\n--answers--\nalign-items\nflex-flow\nflex-direction\njustify-content\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1f4bd1d44bf073cab6d2c7bb4c52bdff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571c34568e4b3b17d3957f8\ntitle: Introduction to Flexbox Lesson G\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-g\n--description--\nflex-shrink is similar to flex-grow, but sets the \"shrink factor\" of a flex item. flex-shrink only ends up being applied if the size of all flex items is larger than their parent container. For example, if our 3 divs from above had a width declaration like: width: 100px, and .flex-container was smaller than 300px, our divs would have to shrink to fit.\nThe default shrink factor is flex-shrink: 1, which means all items will shrink evenly. If you do not want an item to shrink then you can specify flex-shrink: 0;. You can also specify higher numbers to make certain items shrink at a higher rate than normal.\nHere's an example. If you shrink your browser window you'll notice that .two never gets smaller than the given width of 250px, even though the flex-grow rule would otherwise specify that each element should be equally sized.\nAn important implication to notice here is that when you specify flex-grow or flex-shrink, flex items do not necessarily respect your given values for width. In the above example, all 3 divs are given a width of 250px, but when their parent is big enough, they grow to fill it. Likewise, when the parent is too small, the default behavior is for them to shrink to fit. This is not a bug, but it could be confusing behavior if you aren’t expecting it.\n--questions--\n--text--\nWhat is the default behavior of flex-shrink when applied to flex items?\n--answers--\nIt prevents any item from shrinking.\nIt makes all items shrink at an equal rate.\nIt causes only specific items to shrink.\nIt enlarges the items' sizes equally.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2308,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "21ee60864092a1536cbd81700842f223",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571c34768e4b3b17d3957fa\ntitle: Introduction to Flexbox Lesson I\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-i\n--description--\nOne thing to note is that in this example, flex-direction: column would not work as expected if you used the shorthand flex: 1. Try it out now (i.e. go change the flex value on the flex: 1 1 auto; line). Can you figure out why it does not work if flex: 1 is used? The divs collapse, even though they clearly have a height defined there.\nThe reason for this is that the flex shorthand expands flex-basis to 0, which means that all flex-growing and flex-shrinking would begin their calculations from 0. Empty divs by default have 0 height, so for our flex items to fill up the height of their container, they don't actually need to have any height at all.\nThe example above fixed this by specifying flex: 1 1 auto, telling the flex items to default to their given height. You could also have fixed it by putting a height on the parent .flex-container, or by using flex-grow: 1 instead of the shorthand.\nAnother detail to notice: when you changed the flex-direction to column, flex-basis refers to height instead of width. Given the context this may be obvious, but it's something to be aware of.\n--questions--\n--text--\nWhy does using flex: 1 shorthand with flex-direction: column lead to collapsed divs in the example described?\n--answers--\nThe flex shorthand defaults flex-basis to 0, disregarding the defined height of the divs.\nThe flex shorthand overrides the specified flex-direction, causing collapsing.\nflex: 1 only works in a row-based layout, not in a column-based one.\nThe flex-basis property becomes fixed to the width, ignoring the height in column layout.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2335,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-i.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "deac3ad9b0d21f7dccac9849f3c17048",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-k.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6597b43d854b3fa8e35d66d7\ntitle: Introduction to Flexbox Lesson K\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-k\n--description--\nTo change the placement of items along the cross axis use align-items. Try getting the boxes to the center of the container by adding align-items: center to .container. The desired result looks like this:\nBecause justify-content and align-items are based on the main and cross axis of your container, their behavior changes when you change the flex-direction of a flex-container. For example, when you change flex-direction to column, justify-content aligns vertically and align-items aligns horizontally. The most common behavior, however, is the default, i.e. justify-content aligns items horizontally (because the main axis defaults to horizontal), and align-items aligns them vertically. One of the biggest sticking points that beginners have with flexbox is confusion when this behavior changes.\n--assignment--\nBefore moving on to the next lesson, see if you can figure out how align-items behaves when you change the flex-direction property to column.\n--questions--\n--text--\nWhen changing the flex-direction property to column in a flex container, how does align-items behave in relation to the flex items?\n--answers--\nIt distributes space between items evenly.\nIt aligns items horizontally along the main axis.\nIt centers items vertically along the cross axis.\nIt aligns items to the start of the container along the cross axis.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-k.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b30c52824b96c0e42fc2688ac46337e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-j.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6571c34868e4b3b17d3957fb\ntitle: Introduction to Flexbox Lesson J\nchallengeType: 15\ndashedName: introduction-flexbox-lesson-j\n--description--\nLet's look at an example.\nYou should be able to predict what happens if you put flex: 1 on the .item by now. Give it a shot before you move on!\nAdding flex: 1 to .item makes each of the items grow to fill the available space, but what if you wanted them to stay the same width, but distribute themselves differently inside the container? You can do this!\nRemove flex: 1 from .item and add justify-content: space-between to .container. Doing so should give you something like this:\njustify-content aligns items across the main axis. There are a few values that you can use here. You'll learn the rest of them in the reading assignments, but for now try changing it to center, which should center the boxes along the main axis.\n--assignment--\nBefore moving on to the next lesson, see what is possible with the justify-content property. Read this interactive article on MDN and play around with the different values of justify-content on the example.\n--questions--\n--text--\nHow does applying justify-content: space-between to a flex container affect the positioning of its items?\n--answers--\nIt evenly distributes space between items, pushing the first and last items to the edges.\nIt centers all items within the container.\nIt causes the items to grow to fill available space.\nIt aligns items to the left side while leaving excessive space on the right side.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2558,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-j.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "25b4693276df8e60f271b72e0ba5d69f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md",
    "source_type": "git_repo",
    "title": "The Odin Recipes",
    "content": "id: 6391d1a4f7ac71efd0621380\ntitle: Build a Recipe Page Project\nchallengeType: 25\ndashedName: top-build-a-recipe-project\n--description--\nThe website will consist of a main index page which will have links to a few recipes The website won’t look very pretty by the time you’ve finished User Stories:\nYour recipe page should contain a DOCTYPE tag Your recipe page should include an html element with a head and body element as children You should have a title element within the head element with the text The Odin Recipes You should see an h1 element that has the text Creamy Chocolate Fudge You should see a related image with an alt attribute There should be an h2 element with the text Description under the image You should see a couple of paragraphs under Description that describe the recipe There should be an h2 element with the text Ingredients Under the Ingredients heading there should be an unordered list with the ingredients needed for the recipe Under the list of ingredients add another heading called Steps You should see an ordered list with a couple of steps needed to complete the recipe Under the steps there should be an h2 element with the text More Recipes You should see a couple of links to other recipes inside an unordered list which has a couple of list items with anchor elements within These anchor elements should have an href attribute with the value set to # --hints--\nYou should have a DOCTYPE tag js\nassert(code match(/< DOCTYPE\\s+ html\\s* >/gi));\nYou should have an html element with head and body element ```js\nconst html = document querySelectorAll('html')[0];\nconst head = document querySelectorAll('html > head')[0];\nconst body = document querySelectorAll('html > body')[0];\nassert(html && head && body);\n```\nYou should have a title element within the head element that contains the text\nThe Odin Recipes js\nassert(document querySelectorAll('HEAD > TITLE')[0] innerText == 'The Odin Recipes');\nYou should have an h1 element within your body element that contains the text\nCreamy Chocolate Fudge js\nassert(document querySelectorAll('BODY > H1')[0] innerText == 'Creamy Chocolate Fudge');\nYou should have an image with an alt attribute ```js\nconst img = document querySelectorAll('IMG')[0];\nassert(img && img alt ='' && img src = '')\n```\nYou should have an h2 element with the text Description",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "33c145993e3c704dd669e7a726eab191",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md",
    "source_type": "git_repo",
    "title": "The Odin Recipes",
    "content": "The Odin Recipes js assert(document querySelectorAll('HEAD > TITLE')[0] innerText == 'The Odin Recipes'); You should have an h1 element within your body element that contains the text Creamy Chocolate Fudge js assert(document querySelectorAll('BODY > H1')[0] innerText == 'Creamy Chocolate Fudge'); You should have an image with an alt attribute ```js const img = document querySelectorAll('IMG')[0]; assert(img && img alt ='' && img src = '') ``` You should have an h2 element with the text Description```js\nconst h2 = document querySelectorAll('H2')[0];\nassert(h2 innerText == 'Description');\n```\nYou should have at least two p elements describing the recipe ```js\nconst paragraphs = document querySelectorAll('P');\nassert(paragraphs length > 1);\n```\nYou should have an h2 element with the text Ingredients ```js\nconst h2 = document querySelectorAll('H2')[1];\nassert(h2 innerText == 'Ingredients');\n```\nYou should have an ul element nested with li elements that contain the ingredients ```js\nconst headers = document querySelectorAll(\"h2\");\nheaders forEach(header => {\nif (header textContent trim() === \"Ingredients\") {\nconst next = header nextElementSibling;\nif(next tagName === \"UL\") {\nconst listItems = next querySelectorAll(\"LI\");\nassert(listItems length > 1);\n} else {\nassert(false);\n}\n}\n});\n```\nYou should have an h2 element with the text Steps ```js\nconst h2 = document querySelectorAll('H2')[2];\nassert(h2 innerText == 'Steps');\n```\nYou should have an ol element that contains li elements with the steps of the recipe ```js\nconst orderedList = document querySelectorAll('OL')[0];\nconst listItems = document querySelectorAll('OL > LI');\nassert(orderedList && listItems && listItems length > 1);\n```\nYou should have an h2 element with the text More Recipes ```js\nconst h2 = document querySelectorAll('H2')[3];\nassert(h2 innerText == 'More Recipes');\n```\nYou should have an ul element nested with li elements that contain a elements that link to other recipes ```js\nconst headers = document querySelectorAll(\"h2\");\nheaders forEach(header => {\nif (header textContent trim() === \"More Recipes\") {\nconst next = header nextElementSibling;\nif(next",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "11549ddbb281a16d9681ec2cdbe8f6a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md",
    "source_type": "git_repo",
    "title": "The Odin Recipes",
    "content": "LI'); assert(orderedList && listItems && listItems length > 1); ``` You should have an h2 element with the text More Recipes ```js const h2 = document querySelectorAll('H2')[3]; assert(h2 innerText == 'More Recipes'); ``` You should have an ul element nested with li elements that contain a elements that link to other recipes ```js const headers = document querySelectorAll(\"h2\"); headers forEach(header => { if (header textContent trim() === \"More Recipes\") { const next = header nextElementSibling; if(nexttagName === \"UL\") {\nconst listItems = next querySelectorAll(\"LI\");\nassert(listItems length > 1);\nlistItems forEach(listItem => {\nconst anchor = listItem querySelector(\"A\");\nassert(anchor);\n});\n} else {\nassert(false);\n}\n}\n});\n```\nYour anchor elements linking to the recipes should have an href attribute with the value set to # ```js\nconst anchorTags = document querySelectorAll(\"a\");\nconst allAnchorsHaveHrefHash = [ anchorTags] every(function(anchorTag) {\nreturn anchorTag hasAttribute(\"href\") && anchorTag getAttribute(\"href\") === \"#\";\n});\nassert(allAnchorsHaveHrefHash && anchorTags length > 0);\n```\n--seed--\n--seed-contents--\n```html\n```\n```css\n```\n--solutions--\n```html\nThe Odin Recipes\nCreamy Chocolate Fudge\nDescription\nThis recipe is for a rich and creamy chocolate fudge that is sure to satisfy your sweet tooth It's perfect for a special occasion or as a tasty treat for any time of the year This recipe is easy to follow and only requires a few simple ingredients With just a few steps, you'll be able to create a delicious dessert that everyone will love Ingredients\n1 cup sugar\n1/2 cup unsalted butter\n1/4 cup milk\n1/4 cup cocoa powder\n1/4 cup chocolate chips\n1/4 tsp salt\n1 tsp vanilla extract\nSteps\nIn a medium saucepan, melt the butter over medium heat Add the sugar, milk, cocoa powder, and salt to the saucepan and stir until well combined Bring the mixture to a boil, stirring constantly, and then reduce the heat to low and simmer for 5 minutes Remove the saucepan from the heat and stir in the chocolate chips and vanilla extract until the chocolate is melted and the mixture is smooth",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "79cc93d7613f6c012e27bb26ae6ba1f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md",
    "source_type": "git_repo",
    "title": "The Odin Recipes",
    "content": "1 tsp vanilla extract Steps In a medium saucepan, melt the butter over medium heat Add the sugar, milk, cocoa powder, and salt to the saucepan and stir until well combined Bring the mixture to a boil, stirring constantly, and then reduce the heat to low and simmer for 5 minutes Remove the saucepan from the heat and stir in the chocolate chips and vanilla extract until the chocolate is melted and the mixture is smoothPour the fudge into a greased 8-inch square pan and let it cool completely before cutting into squares More Recipes\nPeanut Butter Cookies\nLemon Bars\nChocolate Chip Pancakes\n```\n```css\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6951,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md",
      "source_type": "git_repo"
    },
    "token_count": 132,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4401493c611bcd21f746e740ec281522",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e27508602567c118451d1\ntitle: Learn Arrays and Loops Lesson A\nchallengeType: 15\ndashedName: learn-arrays-and-loops-lesson-a\n--description--\nStrings and numbers may be our building blocks, but as your scripts get more complex, you're going to need a way to deal with large quantities of them. Luckily, JavaScript has a couple of data types that are used for just that. An Array is an ordered collection of items (Strings, numbers, or other things).\nArrays are a way to store multiple values in a single variable. They are a special type of object that has a length property and a series of numbered properties. Each numbered property is called an element, and each element can store a value of any type.\nAn Example of an array is:\njavascript\nconst fruits = ['apple', 'banana', 'orange'];\n--questions--\n--text--\nWhat is an array in JavaScript?\n--answers--\nA function that stores multiple strings and numbers.\nA data type used exclusively for numerical operations.\nAn ordered collection of items that can store values of any type, including strings and numbers.\nA variable that can only store string values.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "875d4a635d3230f1cd71f3334e811e01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e27568602567c118451d2\ntitle: Learn Arrays and Loops Lesson B\nchallengeType: 15\ndashedName: learn-arrays-and-loops-lesson-b\n--description--\nTo access the elements of an array, you can use the index number. The index number starts from 0, so the first element of an array is at index 0, the second element is at index 1, and so on.\nFor example, to access the first element of the fruits array, you can use the following code:\njavascript\nconst fruits = ['apple', 'banana', 'orange'];\nconsole.log(fruits[0]); // Output: apple\nconsole.log(fruits[2]); // Output: orange\nIf the index is out of range, JavaScript will return undefined. Meaning that if you try to access fruits[3] in the above example, it will return undefined.\n--questions--\n--text--\nWhat is the element at the fourth index of the fruits array?\n--answers--\norange\napple\npineapple\nundefined\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 953,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "73633563883307a8fd55b447c641aa97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e27578602567c118451d3\ntitle: Learn Arrays and Loops Lesson C\nchallengeType: 15\ndashedName: learn-arrays-and-loops-lesson-c\n--description--\nOne of the most common ways to add a new element to an array is by using the push() method. The push() method adds one or more elements to the end of an array and returns the new length of the array.\nFor example, to add a new element to the pet array, you can use the following code:\njavascript\nconst pet = ['cat', 'dog', 'bunny'];\npet.push('parrot');\nconsole.log(pet); // Output: ['cat', 'dog', 'bunny', 'parrot']\nTo remove the last element of an array, you can use the pop() method. The pop() method removes the last element from an array and returns that element.\nFor example, to remove the last element from the pet array, you can use the following code:\njavascript\nconst pet = ['cat', 'dog', 'tiger'];\npet.pop();\nconsole.log(pet); // Output: ['cat', 'dog']\n--questions--\n--text--\nGiven the following JavaScript code, what will be the output after executing the code snippet?\n```javascript\nconst animals = ['deer', 'whale', 'frog'];\nanimals.push('shark', 'bear');\nconst removed = animals.pop();\nconsole.log(animals);\nconsole.log(removed);\n```\n--answers--\n['deer', 'whale', 'frog', 'shark', 'bear'] and 'bear'\n['deer', 'whale', 'frog', 'shark'] and 'bear'\n['deer', 'whale', 'frog', 'shark', 'bear'] and null\n['deer', 'whale', 'frog', 'shark', 'bear'] and ['deer', 'whale', 'frog', 'shark']\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1557,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6c4bb89909b7fba45727d8e24d81db8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e27588602567c118451d5\ntitle: Learn Arrays and Loops Lesson E\nchallengeType: 15\ndashedName: learn-arrays-and-loops-lesson-e\n--description--\nNow that you have a basic understanding about arrays, let's talk about loops. Loops are used to execute a block of code multiple times. One of those loops is the while loop. The while loop executes a block of code as long as the condition is true. The syntax of the while loop is as follows:\njavascript\nwhile (condition) {\n// code block to be executed\n}\nFor example, the following code snippet prints the numbers from 1 to 5:\njavascript\nlet i = 1;\nwhile (i <= 5) {\nconsole.log(i);\ni++;\n}\nThe above code snippet initializes a variable i with the value 1. The while loop executes the block of code as long as the value of i is less than or equal to 5. The value of i is incremented by 1 in each iteration.\n--questions--\n--text--\nWhat will be the output of the following JavaScript code snippet?\njavascript\nlet i = 5;\nwhile (i >= 0) {\nconsole.log(i);\ni--;\n}\n--answers--\n5, 4, 3, 2, 1, 0\n5, 4, 3, 2, 1\n5, 4, 3, 2, 1, 0, -1\n1, 2, 3, 4, 5\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1250,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "17791431a2ea35b497e8af7610535cfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e275a8602567c118451d7\ntitle: Learn Arrays and Loops Lesson G\nchallengeType: 15\ndashedName: learn-arrays-and-loops-lesson-g\n--description--\nNow that you know about the most common ways to iterate over values and arrays, there are a few more ways to iterate over arrays. Arrays have a built-in method called map(), which is used to create a new array by applying a function to each element of the original array. The map() method does not change the original array. The syntax of the map() method is as follows:\n```javascript\nconst array = [1, 2, 3, 4, 5];\nconst newArray = array.map((arrayValue) => {\nreturn arrayValue * 2;\n});\nconsole.log(newArray); // Output: [2, 4, 6, 8, 10]\n```\nThe map() method creates a new array by applying the function (arrayValue) => { return arrayValue * 2; } to each element of the original array. This is particularly useful when you want to transform the elements of an array without changing the original array.\n--questions--\n--text--\nWhat will be the output of the following JavaScript code snippet?\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst newNumbers = numbers.map((number) => {\nreturn number * 3;\n});\nconsole.log(newNumbers);\n```\n--answers--\n[1, 2, 3, 4, 5]\n[3, 6, 9, 12, 15]\n[1, 3, 5, 7, 9]\n[3, 6, 9, 12, 15, 18]\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1363,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "478994d7bf03762647e4a5af0c6fa595",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e27588602567c118451d4\ntitle: Learn Arrays and Loops Lesson D\nchallengeType: 15\ndashedName: learn-arrays-and-loops-lesson-d\n--description--\nOne of the more complex methods used with arrays are the splice() and slice() methods The splice() method changes the contents of an array by removing or replacing an element in the array The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) The original array will not be modified For example, to remove the second element from the characters array, you can use the following code:\njavascript\nconst characters = ['Harry', 'Ron', 'Hermione'];\ncharacters splice(1, 1);\nconsole log(characters); // Output: ['Harry', 'Hermione']\nThe above element removes the second element from the characters array The splice() method takes two arguments: the index of the element to remove and the number of elements to remove To create a new array with the second element from the character array, you can use the following code:\njavascript\nconst characters = ['Harry', 'Ron', 'Hermione'];\nconst newCharacters = characters slice(1, 2);\nconsole log(newCharacters); // Output: ['Ron']\nThe above code creates a new array newCharacters with the second element from the characters array The slice() method takes two arguments: the index of the element to start the slice and the index of the element to end the slice (not included) --questions--\n--text--\nWhat will be the output of the following JavaScript code snippet ```javascript\nconst numbers = [10, 20, 30, 40, 50];\nnumbers splice(3, 1);\nconst slicedNumbers = numbers slice(2, 4);\nconsole log(numbers);\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b5eb89d00832d600bbf5b0bcbee2d0e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "above code creates a new array newCharacters with the second element from the characters array The slice() method takes two arguments: the index of the element to start the slice and the index of the element to end the slice (not included) --questions-- --text-- What will be the output of the following JavaScript code snippet ```javascript const numbers = [10, 20, 30, 40, 50]; numbers splice(3, 1); const slicedNumbers = numbers slice(2, 4); console log(numbers); consolelog(slicedNumbers);\n```\n--answers--\nnumbers output: [10, 20, 30, 50] and slicedNumbers output: [30, 50]\nnumbers output: [10, 20, 30, 40] and slicedNumbers output: [30, 40]\nnumbers output: [10, 20, 50, 40] and slicedNumbers output: [20, 50]\nnumbers output: [10, 20, 30, 50, 40] and slicedNumbers output: [30, 50]\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "50a513d84fa0985b0bdddb15cb6c79b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66629f407d679d3105e8317f\ntitle: Build a Rock Paper Scissors Game\nchallengeType: 25\ndashedName: top-build-a-rock-paper-scissors-game\n--description--\nYour game will be played against the computer You will write a function that randomly returns \"rock\", \"paper\" or \"scissors\" You do not need to worry about the front-end part of the game You will only write the logic for the game Open the script js and start following the instructions User stories:\nYou should have a function named getComputerChoice Your getComputerChoice function should return \"rock\", \"paper\", or \"scissors\" at random Hint: The Math random method returns a random number that’s greater than or equal to 0 and less than 1 Think about how you can use this to conditionally return one of the multiple choices Your game will be played by a human player You will write a function that takes the user's choice and returns it Create a function named getHumanChoice Write the code so that getHumanChoice will return one of the valid choices depending on what the user inputs Hint: Use the prompt method to get the user’s input Your game will keep track of the player's score You will write variables to keep track of the player's score Create two new variables named humanScore and computerScore in the global scope Initialize those variables with the value of 0 Your game will be played round by round You will write a function that takes the human and computer player choices as arguments, plays a single round, increments the round winner’s score and logs a winner announcement Create a new function named playRound Define two parameters for playRound Parameter one humanChoice and parameter two computerChoice Use these two parameters to take the human and computer choices as arguments Make your function’s humanChoice parameter case-insensitive so that players can input \"rock\", \"ROCK\", \"RocK\", or other variations Write the code for your playRound function that returns a string value representing the round winner If it is a tie, it should return \"It's a tie \" If the player wins, it should return \"You win [player choice] beats [computer choice]\" If the computer wins, it should return \"You lose [computer choice] beats [player choice]\" Increment the humanScore or computerScore variable based on the round winner Your game will play 3 rounds",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f5c855cc2699fffe649d4c72bac2bfc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "or other variations Write the code for your playRound function that returns a string value representing the round winner If it is a tie, it should return \"It's a tie \" If the player wins, it should return \"You win [player choice] beats [computer choice]\" If the computer wins, it should return \"You lose [computer choice] beats [player choice]\" Increment the humanScore or computerScore variable based on the round winner Your game will play 3 roundsYou will write a function named playGame that calls playRound to play 3 rounds, keeps track of the scores, and declares a winner at the end Create a new function named playGame Create a loop that plays 3 rounds and calls the playRound function each time with the human's choice and the computer's choice functions as arguments At the end of the game, return the winner of the game based on who won the most rounds If the human player wins more rounds than the computer player, return a message that says \"You win the game \" If the computer player wins more rounds than the human player, return a message that says \"You lose the game \" --hints--\nYou should have a function called getComputerChoice\njs\nassert isFunction(getComputerChoice);\nYour getComputerChoice function should return \"rock\", \"paper\", or \"scissors\" at random js\nconst counts = {}\nfor (let i = 0; i < 100; i++) {\nconst result = getComputerChoice();\ncounts[result] = (counts[result] 0) + 1;\n}\nassert lengthOf(Object keys(counts), 3);\nassert include(Object keys(counts), \"rock\");\nassert include(Object keys(counts), \"paper\");\nassert include(Object keys(counts), \"scissors\");\nYou should have a function called getHumanChoice\njs\nassert isFunction(getHumanChoice);\nYou should have two variables named humanScore and computerScore in the global scope js\nassert exists(humanScore);\nassert exists(computerScore);\nYou should have a function called playRound\njs\nassert isFunction(playRound);\nYour playRound function should take the human and computer player choices as arguments with the parameters humanChoice and computerChoice js\nassert match(playRound toString(), /\\s*( :\\bhumanChoice\\b\\s*,\\s*\\bcomputerChoice\\b)/);\nYour playRound function should be case-insensitive so that players can input \"rock\", \"ROCK\", \"RocK\", or other variations js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "540668dbe7f08e9d0204cfc2342be117",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "getHumanChoice js assert isFunction(getHumanChoice); You should have two variables named humanScore and computerScore in the global scope js assert exists(humanScore); assert exists(computerScore); You should have a function called playRound js assert isFunction(playRound); Your playRound function should take the human and computer player choices as arguments with the parameters humanChoice and computerChoice js assert match(playRound toString(), /\\s*( :\\bhumanChoice\\b\\s*,\\s*\\bcomputerChoice\\b)/); Your playRound function should be case-insensitive so that players can input \"rock\", \"ROCK\", \"RocK\", or other variations js assertmatch(playRound toString(), /\\bhumanChoice\\s*\\ toLowerCase\\(\\)/);\nYour playRound function should return the string \"It's a tie \" if the human and computer choices are the same js\nassert equal(playRound(\"rock\", \"rock\"), \"It's a tie \");\nYour playRound function should return the string \"You win [player choice] beats [computer choice]\" if the player wins js\nassert equal(playRound(\"rock\", \"scissors\"), \"You win rock beats scissors\");\nYour playRound function should return the string \"You lose [computer choice] beats [player choice]\" if the computer wins js\nassert equal(playRound(\"rock\", \"paper\"), \"You lose paper beats rock\");\nYour playRound function should increment the humanScore or computerScore variable based on the round winner js\nhumanScore = 0;\ncomputerScore = 0;\nplayRound(\"rock\", \"scissors\");\nassert equal(humanScore, 1);\nYou should have a function called playGame js\nassert isFunction(playGame);\nYou should use a loop to play 3 rounds js\nassert match(playGame toString(), /\\bfor\\s*\\(/);\nYou should return the winner of the game based on who won the most rounds js\nwindow prompt = () => \"rock\";\nassert match(playGame(), /You (win|lose) the game /);\n--seed--\n--seed-contents--\njs\nconst hand = ['rock', 'paper', 'scissors'];\n```html\n```\n--solutions--\n```html\n```\n```js\nconst hand = ['rock', 'paper', 'scissors'];\nlet computerScore = 0;\nlet humanScore = 0;\nconst getComputerChoice = () => {\nreturn hand[Math floor(Math random() * hand",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "44e53e1afc4baca340f8a7c854bc7666",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "rounds js assert match(playGame toString(), /\\bfor\\s*\\(/); You should return the winner of the game based on who won the most rounds js window prompt = () => \"rock\"; assert match(playGame(), /You (win|lose) the game /); --seed-- --seed-contents-- js const hand = ['rock', 'paper', 'scissors']; ```html ``` --solutions-- ```html ``` ```js const hand = ['rock', 'paper', 'scissors']; let computerScore = 0; let humanScore = 0; const getComputerChoice = () => { return hand[Math floor(Math random() * handlength)];\n}\nconst getHumanChoice = () => {\nreturn prompt();\n}\nconst playRound = (humanChoice, computerChoice) => {\nhumanChoice = humanChoice toLowerCase()\nconst tie = \"It's a tie \"\nconst win = You win ${humanChoice} beats ${computerChoice}\nconst lose = You lose ${computerChoice} beats ${humanChoice}\nif (humanChoice == 'rock') {\nif (computerChoice == 'rock') {\ncomputerScore++;\nhumanScore++;\nreturn tie;\n} else if (computerChoice == 'paper') {\ncomputerScore++;\nreturn lose;\n} else {\nhumanScore++;\nreturn win;\n}\n} else if (humanChoice == 'paper') {\nif (computerChoice == 'rock') {\nhumanScore++;\nreturn win;\n} else if (computerChoice == 'paper') {\ncomputerScore++;\nhumanScore++;\nreturn tie;\n} else {\ncomputerScore++;\nreturn lose;\n}\n} else if (humanChoice == 'scissors') {\nif (computerChoice == 'rock') {\ncomputerScore++;\nreturn lose;\n} else if (computerChoice == 'paper') {\nhumanScore++;\nreturn win;\n} else {\ncomputerScore++;\nhumanScore++;\nreturn tie;\n}\n}\n}\nconst playGame = () => {\nfor(let i = 0; i < 3; i++){\nplayRound(getHumanChoice(), getComputerChoice())\n}\nreturn humanScore > computerScore \"You win the game \" : \"You lose the game \"\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7688,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e0ecf4b60ec795c2c2b93184f1e94033",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e27598602567c118451d6\ntitle: Learn Arrays and Loops Lesson F\nchallengeType: 15\ndashedName: learn-arrays-and-loops-lesson-f\n--description--\nThe for loop is another type of loop that is used to execute a block of code multiple times. The for loop is used when the number of iterations is known. The syntax of the for loop is as follows:\njavascript\nfor (initialization; condition; increment/decrement) {\n// code block to be executed\n}\nFor example, the following code snippet prints the numbers from 1 to 5:\njavascript\nfor (let i = 1; i <= 5; i++) {\nconsole.log(i);\n}\nTo iterate over an array using a for loop, you can use the array's length property. For example, the following code snippet prints the elements of an array:\njavascript\nconst arr = [1, 2, 3, 4, 5];\nfor (let i = 0; i < arr.length; i++) {\nconsole.log(arr[i]);\n}\n--questions--\n--text--\nWhat will be the output of the following JavaScript code snippet?\njavascript\nconst items = ['apple', 'banana', 'cherry', 'date'];\nfor (let i = 1; i < items.length; i++) {\nconsole.log(items[i]);\n}\n--answers--\nmd\napple\nbanana\ncherry\ndate\nmd\nbanana\ncherry\nmd\napple\nbanana\ncherry\nmd\nbanana\ncherry\ndate\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1297,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "72771082b6d4839719195a8d50ef5504",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6570447ce7b02272663824df\ntitle: Learn Block and Inline Lesson A\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-a\n--description--\nMost of the elements that you have learned about so far are block elements. In other words, their default style is display: block. By default, block elements will appear on the page stacked atop each other, each new element starting on a new line.\n--questions--\n--text--\nWhich of the following statements about block elements is true?\n--answers--\nBlock elements take up only the space necessary for their content.\nBlock elements start on a new line and take up the full width available.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a50b2af3d59f6686904c5309213b715b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6570447de7b02272663824e0\ntitle: Learn Block and Inline Lesson B\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-b\n--description--\nInline elements, however, do not start on a new line. They appear in line with whatever elements they are placed beside. A clear example of an inline element is a link, or <a> tag. If you stick one of these in the middle of a paragraph of text, it will behave like a part of the paragraph. (Like this) The link’s text will sit alongside other words in that paragraph. Additionally, padding and margin behave differently on inline elements. In general, you do not want to try to put extra padding or margin on inline elements.\n--assignment--\nSearch the web for a list of block elements and a list of inline elements.\n--questions--\n--text--\nWhat is the difference between a block element and an inline element?\n--answers--\nblock elements are displayed without line breaks, while inline elements are displayed with line breaks.\nblock elements take up the full width available, while inline elements only take up the space necessary for their content.\nblock elements are always positioned horizontally, while inline elements are positioned vertically.\nblock elements are used for small sections of text, while inline elements are used for larger chunks of content.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1470,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3081668389059020fadbba0fd8b58013",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6570447ee7b02272663824e1\ntitle: Learn Block and Inline Lesson C\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-c\n--description--\nPadding is used to create space around an element's content, inside of any defined borders. With inline elements, padding adds space to the left, right, top, and bottom of the content. However, it's important to note that while padding does affect the space around the content, it does not affect the layout of other elements around the inline element. This means that horizontal padding (left and right) is respected, but vertical padding (top and bottom) does not cause other elements to move away.\n--questions--\n--text--\nHow does padding affect inline elements?\n--answers--\nPadding has no effect on inline elements.\nPadding increases the width and height of inline elements.\nPadding only affects the horizontal spacing of inline elements.\nPadding only affects the vertical spacing of inline elements.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1034,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "177de84234492b709089d95a4c63ef60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6570447fe7b02272663824e3\ntitle: Learn Block and Inline Lesson E\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-e\n--description--\nInline-block elements behave like inline elements, but with block-style padding and margin. display: inline-block is a useful tool to know about, but in practice, you'll probably end up reaching for flexbox more often if you're trying to line up a bunch of boxes. Flexbox will be covered in-depth in the next lesson.\n--questions--\n--text--\nWhat is the difference between an inline element and an inline-block element?\n--answers--\ninline elements are displayed without line breaks, while inline-block elements are displayed with line breaks.\ninline elements do not allow setting width and height, while inline-block elements allow setting width and height.\ninline elements are always positioned horizontally, while inline-block elements are positioned vertically.\ninline elements can contain block-level elements, while inline-block elements cannot contain other elements.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7ce5e8bb09caeb8a70ba60247cd3af7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661e275a8602567c118451d8\ntitle: Learn Arrays and Loops Lesson H\nchallengeType: 15\ndashedName: learn-arrays-and-loops-lesson-h\n--description--\nOne other useful array method is the filter() method. The filter() method creates a new array with all elements that pass the test implemented by the provided function. The syntax of the filter() method is as follows:\n```javascript\nconst numbers = [2, 5, 6, 1, 9, -1]\nconst newNumbers = numbers.filter((number) => {\nreturn number > 2;\n});\nconsole.log(newNumbers); // Output: [5, 6, 9]\n```\nThe filter() method creates a new array with all elements that are greater than 2. The filter() method does not change the original array.\n--questions--\n--text--\nWhat will be the output of the following JavaScript code snippet?\n```javascript\nconst strings = ['apple', 'banana', 'cherry', 'orange', 'kiwi', 'mango'];\nconst newStrings = strings.filter((string) => {\nreturn string.length > 5;\n});\nconsole.log(newStrings);\n```\n--answers--\n['apple', 'banana', 'cherry', 'orange', 'kiwi', 'mango']\n['apple', 'banana', 'cherry', 'orange', 'kiwi']\n['banana, 'cherry', 'orange']\n['banana', 'cherry', 'orange', 'kiwi', 'mango' ]\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1251,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fdbe3d2593603197d86899df44efdfd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6570447ee7b02272663824e2\ntitle: Learn Block and Inline Lesson D\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-d\n--description--\nNow that you have a basic understanding on how adding width and height to inline elements works, what happens when you add a top margin to an inline element?\n--questions--\n--text--\nHow does margin-top affect inline elements?\n--answers--\nmargin-top has no impact on the layout of inline elements\nmargin-top increases the height of inline elements.\nmargin-top adds space above the inline element.\nmargin-top only affects the horizontal spacing of inline elements.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 704,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 141,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cbc812159ce07f97d18c63834cb2424d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65704480e7b02272663824e4\ntitle: Learn Block and Inline Lesson F\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-f\n--description--\nThe concept of “Normal flow” is implied in the box-model resources, but isn’t laid out very specifically. Read Normal Flow from MDN to make sure you understand how elements lay themselves out by default.\n--questions--\n--text--\nWhat is the \"Normal flow\" in CSS layouts?\n--answers--\nNormal flow refers to the process of animating elements in a CSS layout.\nNormal flow is a CSS property used to control the visibility of elements in a layout.\nNormal flow is a CSS rule that defines the order of media queries for responsive design.\nNormal flow in CSS layouts refers to the default positioning of elements on a webpage.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 941,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-f.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "51bd8077cc4b3052341bf19451f09e90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65704482e7b02272663824e5\ntitle: Learn Block and Inline Lesson G\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-g\n--description--\nNow that you have some basic understanding of block and inline elements, pull up your list of block and inline elements from a couple questions ago and see if you can identify which of the following elements are block elements and which are inline elements.\n--questions--\n--text--\nWhich of the following is NOT an inline element?\n--answers--\nform element\nanchor element\nimage element\nspan element\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 130,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ec5500a0d70200a49a084c186cc54919",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-j.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65704485e7b02272663824e8\ntitle: Learn Block and Inline Lesson J\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-j\n--description--\nNow that you have a basic understanding on how adding width and height to inline elements works, what happens when you add a top padding of 10 pixels to a span element?\n--questions--\n--text--\nWhat happens when you add padding-top: 10px; to a span element?\n--answers--\nThe span element's content will shift downward by 10 pixels.\nThe span element will gain additional space above its content.\nThe span element's width will increase by 10 pixels.\nPadding has no effect on the layout of a span element.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 734,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-j.md",
      "source_type": "git_repo"
    },
    "token_count": 161,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fca82896f4a3cbee487104f1ee385b5f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-k.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65704486e7b02272663824e9\ntitle: Learn Block and Inline Lesson K\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-k\n--description--\nNow that you have a basic understanding on how adding width and height to inline elements works.\n--questions--\n--text--\nWhat happens when you add a bottom padding of 15 pixels to a span element with display set to inline-block?\n--answers--\nThe span element's content will shift upward by 15 pixels.\nThe span element's width will increase by 15 pixels.\nThe span element will gain additional space below its content.\nPadding has no effect on the layout of an inline-block span element.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 718,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-k.md",
      "source_type": "git_repo"
    },
    "token_count": 152,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "665eb4905f8ef480858a775475fa8cdb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-h.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65704483e7b02272663824e6\ntitle: Learn Block and Inline Lesson H\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-h\n--description--\nNow that you have some basic understanding of block and inline elements, pull up your list of block and inline elements from a couple questions ago and see if you can identify which of the following elements are block elements and which are inline elements.\n--questions--\n--text--\nWhich of the following is NOT a block level element?\n--answers--\nparagraph element\nimage element\nunordered list element\nfooter element\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-h.md",
      "source_type": "git_repo"
    },
    "token_count": 132,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0088801b9a1a79febe3192b932d2d753",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63ee351d0d8d4841c3a7091a\ntitle: CSS Foundations Lesson A\nchallengeType: 19\ndashedName: css-foundations-lesson-a\n--description--\nA type selector (or element selector) will select all elements of the given element type, and the syntax is just the name of the element:\n```html\nHello, World!\nHello again!\nHi...\nOkay, bye.\n```\n```css\n/ styles.css /\ndiv {\ncolor: white;\n}\n```\nHere, all three <div> elements would be selected, while the <p> element wouldn’t be.\n--questions--\n--text--\nWhich of the following best describes the CSS code given above?\n--answers--\nThe code applies a white color to all elements in the HTML file.\nThe code applies a white color to all div elements in the HTML file.\nThe code applies a white color to all p elements in the HTML file.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 911,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-a.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d3f9547670e20a839a30a124d71c3cef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-i.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65704484e7b02272663824e7\ntitle: Learn Block and Inline Lesson I\nchallengeType: 15\ndashedName: learn-block-and-inline-lesson-i\n--description--\nYou can't talk about block and inline elements without discussing divs and spans. All the other HTML elements you have encountered so far give meaning to their content. For example, paragraph elements tell the browser to display the text it contains as a paragraph. Strong elements tell the browser which texts within are important and so on. Yet, divs and spans give no particular meaning to their content. They are just generic boxes that can contain anything.\n--questions--\n--text--\nWhat is the primary difference of span and div elements from other elements?\n--answers--\nUnlike specific HTML elements that carry inherent meanings, span and div elements are versatile and are primarily used for styling and layout purposes.\nspan and div elements do not impart any specific semantic meaning to the content they contain, unlike other HTML elements such as paragraphs or headings.\nspan and div elements are generic containers that allow developers to apply CSS styles and structure content without any particular semantic significance.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1276,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-i.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "908d22c503a456d93fdecb06c988d537",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63ee35240d8d4841c3a7091b\ntitle: CSS Foundations Lesson B\nchallengeType: 19\ndashedName: css-foundations-lesson-b\n--description--\nClass selectors will select all elements with the given class, which is just an attribute you place on an HTML element. Here’s how you add a class to an HTML tag and select it in CSS:\n```html\nPlease agree to our terms of service.\n```\n```css\n/ styles.css /\n.alert-text {\ncolor: red;\n}\n```\nNote the syntax for class selectors: a period immediately followed by the case-sensitive value of the class attribute. Classes aren’t required to be unique, so you can use the same class on as many elements as you want.\nAnother thing you can do with the class attribute is to add multiple classes to a single element as a space-separated list, such as class=\"alert-text severe-alert\". Since whitespace is used to separate class names like this, you should never use spaces for multi-worded names and should use a hyphen instead.\nID Selectors\nID selectors are similar to class selectors. They select an element with the given id, which is another attribute you place on an HTML element:\n```html\nMy Awesome 90's Page\n```\n```css\n/ styles.css /\ntitle {\nbackground-color: red;\n}\n```\nInstead of a period, you use a hashtag immediately followed by the case-sensitive value of the id attribute. A common pitfall is people overusing the id attribute when they don’t necessarily need to, and when classes will suffice. While there are cases where using an id makes sense or is needed, such as taking advantage of specificity or having links redirect to a section on the current page, you should use ids sparingly (if at all).\nThe major difference between classes and IDs is that an element can only have one id. An id cannot be repeated on a single page, and the id attribute should not contain any whitespace at all.\n--questions--\n--text--\nWhat is the syntax for class and ID selectors?\n--answers--\nTo select a class you use $ and to select an id you use #\nTo select a class you use . and to select an id you use *\nTo select a class you use . and to select an id you use #\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-b.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ae752fdca37218042063fb0d7853a0ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63ee352b0d8d4841c3a7091c\ntitle: CSS Foundations Lesson C\nchallengeType: 19\ndashedName: css-foundations-lesson-c\n--description--\nWhat if you have two groups of elements that share some of their style declarations?\n```css\n.read {\ncolor: white;\nbackground-color: black;\n/ several unique declarations /\n}\n.unread {\ncolor: white;\nbackground-color: black;\n/ several unique declarations /\n}\n```\nBoth our .read and .unread selectors share the color: white; and background-color: black; declarations, but otherwise have several of their own unique declarations. To cut down on the repetition, you can group these two selectors together as a comma-separated list:\n```css\n.read,\n.unread {\ncolor: white;\nbackground-color: black;\n}\n.read {\n/ several unique declarations /\n}\n.unread {\n/ several unique declarations /\n}\n```\nBoth of the examples above (with and without grouping) will have the same result, but the second example reduces the repetition of declarations and makes it easier to edit either the color or background-color for both classes at once.\n--questions--\n--text--\nHow would you apply a single rule to two different selectors, .red-box and .yellow-box?\n--answers--\ncss\n.red-box,\n.yellow-box {\nwidth: 25px;\nheight: 25px;\n}\n```css\n.red-box {\nwidth: 25px;\nheight: 25px;\n}\n.yellow-box {\nwidth: 25px;\nheight: 25px;\n}\n```\ncss\n.red-box {\nwidth: 25px;\n.yellow-box {\nheight: 25px;\n}\n}\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-c.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1eac8d20604b374f2c5821dc6c682e91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63ee35300d8d4841c3a7091d\ntitle: CSS Foundations Lesson D\nchallengeType: 19\ndashedName: css-foundations-lesson-d\n--description--\nAnother way to use selectors is to chain them as a list without any separation. Let’s say you had the following HTML:\n```html\nLatest Posts\nThis is where a preview for a post might go.\n```\nYou have two elements with the subsection class that have some sort of unique styles, but what if you only want to apply a separate rule to the element that also has header as a second class? Well, you could chain both the class selectors together in your CSS like so:\ncss\n.subsection.header {\ncolor: red;\n}\nWhat .subsection.header does is it selects any element that has both the subsection and header classes. Notice how there isn’t any space between the .subsection and .header class selectors. This syntax basically works for chaining any combination of selectors, except for chaining more than one type selector.\nThis can also be used to chain a class and an ID, as shown below:\n```html\nLatest Posts\nThis is where a preview for a post might go.\n```\nYou can take the two elements above and combine them with the following:\n```css\n.subsection.header {\ncolor: red;\n}\n.subsection#preview {\ncolor: blue;\n}\n```\nIn general, you can’t chain more than one type selector since an element can’t be two different types at once. For example, chaining two type selectors like div and p would give us the selector divp, which wouldn’t work since the selector would try to find a literal <divp> element, which doesn’t exist.\n--questions--\n--text--\nGiven an element that has an id of title and a class of primary, how would you use both attributes for a single rule?\n--answers--\ncss\n.title.primary {\n...\n}\ncss\n.title > primary {\n...\n}\n```css\ntitle.primary {\n...\n}\n```\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-d.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b03f0591570177168bdb2f5d92dc7d4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63ee35370d8d4841c3a7091e\ntitle: CSS Foundations Lesson E\nchallengeType: 19\ndashedName: css-foundations-lesson-e\n--description--\nCombinators allow us to combine multiple selectors differently than either grouping or chaining them, as they show a relationship between the selectors. There are four types of combinators in total, but for right now we’re going to only show you the descendant combinator, which is represented in CSS by a single space between selectors. A descendant combinator will only cause elements that match the last selector to be selected if they also have an ancestor (parent, grandparent, etc) that matches the previous selector.\nSo something like .ancestor .child would select an element with the class child if it has an ancestor with the class ancestor. Another way to think of it is child will only be selected if it is nested inside of ancestor, no matter how deep. Take a quick look at the example below and see if you can tell which elements would be selected based on the CSS rule provided:\n```html\n```\n```css\n/ styles.css /\n.ancestor .contents {\n/ some declarations /\n}\n```\nIn the above example, the first two elements with the contents class (B and C) would be selected, but that last element (D) won’t be. Was your guess correct?\nThere’s really no limit to how many combinators you can add to a rule, so .one .two .three .four would be totally valid. This would just select an element that has a class of four if it has an ancestor with a class of three, and if that ancestor has its own ancestor with a class of two, and so on. You generally want to avoid trying to select elements that need this level of nesting, though, as it can get pretty confusing and long, and it can cause issues when it comes to specificity.\n--questions--\n--text--\nWhat does the descendant combinator do?\n--answers--\nIt groups certain classes together which share the same declarations.\nIt gives the ability to select an element that shares the same class and id.\nIt allows you to select an element based on its relationship with its ancestor (parent, grandparent, and so on).\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2401,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-e.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8014d78e8b1420c18d1f31982612116f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-g.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 63ee35450d8d4841c3a70920\ntitle: CSS Foundations Lesson G\nchallengeType: 19\ndashedName: css-foundations-lesson-g\n--description--\nInternal CSS (or embedded CSS) involves adding the CSS within the HTML file itself instead of creating a completely separate file. With the internal method, you place all the rules inside of a pair of opening and closing <style> tags, which are then placed inside of the opening and closing <head> tags of your HTML file. Since the styles are being placed directly inside of the <head> tags, you no longer need a <link> element that the external method requires.\nBesides these differences, the syntax is exactly the same as the external method (selector, curly braces, declarations):\n```html\n...\n```\nThis method can be useful for adding unique styles to a single page of a website, but it doesn’t keep things separate like the external method, and depending on how many rules and declarations there are it can cause the HTML file to get pretty big.\n--questions--\n--text--\nWhich of the following is a difference between internal and external CSS methods?\n--answers--\nThe external method places CSS rules in a separate file, while the internal method places CSS rules within the HTML file itself.\nThe internal method keeps CSS separate from HTML, while the external method embeds CSS directly in HTML.\nThe internal method uses <link> element to link CSS to HTML, while the external method embeds CSS directly in HTML.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-g.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 1
  }
]